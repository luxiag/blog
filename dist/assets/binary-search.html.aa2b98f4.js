import{_ as s,o as n,c as a,b as t}from"./app.a393d442.js";const p="/assets/20220915113332.b460e8b6.png",e="/assets/20220915113350.38a0829d.png",o="/assets/20220915113532.343c5a2e.png",c="/assets/20220915113549.96387dd0.png",l="/assets/20220915113613.d9a57208.png",i="/assets/20220915164338.8382aaad.png",r={},u=t('<p><strong>\u4EC5\u5F53\u5217\u8868\u662F\u6709\u5E8F\u7684\u65F6\u5019\uFF0C\u4E8C\u5206\u67E5\u627E\u624D\u7BA1\u7528</strong></p><h1 id="\u5DE5\u4F5C\u539F\u7406" tabindex="-1"><a class="header-anchor" href="#\u5DE5\u4F5C\u539F\u7406" aria-hidden="true">#</a> \u5DE5\u4F5C\u539F\u7406</h1><p>\u6211\u968F\u4FBF\u60F3\u4E00\u4E2A 1 \uFF5E 100 \u7684\u6570\u5B57\u3002 <strong>\u7CDF\u7CD5\u7684\u7B97\u6CD5</strong><img src="'+p+'" alt=""><br><img src="'+e+'" alt=""><strong>\u66F4\u4F73\u7684\u67E5\u627E\u65B9\u5F0F</strong><img src="'+o+'" alt=""><br><img src="'+c+'" alt=""><br><img src="'+l+'" alt=""><img src="'+i+`" alt=""></p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">binary_search</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">list<span class="token punctuation">,</span> aim</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> low <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> hight <span class="token operator">=</span> list<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> mid <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span>low <span class="token operator">&lt;</span> hight<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    mid <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token punctuation">(</span>low <span class="token operator">+</span> hight<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    guess <span class="token operator">=</span> list<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>guess <span class="token operator">==</span> aim<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> mid<span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>guess <span class="token operator">&gt;</span> aim<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      high <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      low <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">// \u8FD0\u884C\u65F6\u95F4 log2(n)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4),k=[u];function d(m,v){return n(),a("div",null,k)}const g=s(r,[["render",d],["__file","binary-search.html.vue"]]);export{g as default};
