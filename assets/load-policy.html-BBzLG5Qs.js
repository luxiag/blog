import{_ as l,c as a,a as n,o as e}from"./app-DS_HEYrV.js";const t="/blog/assets/0337061738490360499-DIVuzSBy.png",o={};function p(r,s){return e(),a("div",null,s[0]||(s[0]=[n(`<h2 id="懒加载" tabindex="-1"><a class="header-anchor" href="#懒加载"><span>懒加载</span></a></h2><p>延迟加载（懒加载）是一种将资源标识为非阻塞（非关键）资源并仅在需要时加载它们的策略。这是一种缩短关键渲染路径长度的方法，可以缩短页面加载时间。</p><h3 id="css模块加载" tabindex="-1"><a class="header-anchor" href="#css模块加载"><span>CSS模块加载</span></a></h3><div class="language-html line-numbers-mode" data-highlighter="shiki" data-ext="html" data-title="html" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#6272A4;">&lt;!-- 加载和解析 styles.css 会阻塞渲染 --&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">&lt;</span><span style="color:#FF79C6;">link</span><span style="color:#50FA7B;font-style:italic;"> rel</span><span style="color:#FF79C6;">=</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">stylesheet</span><span style="color:#E9F284;">&quot;</span><span style="color:#50FA7B;font-style:italic;"> href</span><span style="color:#FF79C6;">=</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">styles.css</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;"> /&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">&lt;!-- 加载和解析 print.css 不会阻塞渲染 --&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">&lt;</span><span style="color:#FF79C6;">link</span><span style="color:#50FA7B;font-style:italic;"> rel</span><span style="color:#FF79C6;">=</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">stylesheet</span><span style="color:#E9F284;">&quot;</span><span style="color:#50FA7B;font-style:italic;"> href</span><span style="color:#FF79C6;">=</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">print.css</span><span style="color:#E9F284;">&quot;</span><span style="color:#50FA7B;font-style:italic;"> media</span><span style="color:#FF79C6;">=</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">print</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;"> /&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">&lt;!-- 在大屏幕上，加载和解析 mobile.css 不会阻塞渲染 --&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">&lt;</span><span style="color:#FF79C6;">link</span></span>
<span class="line"><span style="color:#50FA7B;font-style:italic;">  rel</span><span style="color:#FF79C6;">=</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">stylesheet</span><span style="color:#E9F284;">&quot;</span></span>
<span class="line"><span style="color:#50FA7B;font-style:italic;">  href</span><span style="color:#FF79C6;">=</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">mobile.css</span><span style="color:#E9F284;">&quot;</span></span>
<span class="line"><span style="color:#50FA7B;font-style:italic;">  media</span><span style="color:#FF79C6;">=</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">screen and (max-width: 480px)</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;"> /&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="dns预解析、预加载、预渲染" tabindex="-1"><a class="header-anchor" href="#dns预解析、预加载、预渲染"><span>DNS预解析、预加载、预渲染</span></a></h2><h2 id="dns预解析" tabindex="-1"><a class="header-anchor" href="#dns预解析"><span>DNS预解析</span></a></h2><p>dns-prefetch(DNS预获取)是前端网络性能优化的一种措施。它根据浏览器定义的规则，提前解析之后可能会用到的域名，使解析结果缓存到系统缓存中，缩短DNS解析时间，进而提高网站的访问速度。</p><div class="language-html line-numbers-mode" data-highlighter="shiki" data-ext="html" data-title="html" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#F8F8F2;">&lt;</span><span style="color:#FF79C6;">link</span><span style="color:#50FA7B;font-style:italic;"> rel</span><span style="color:#FF79C6;">=</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">dns-prefetch</span><span style="color:#E9F284;">&quot;</span><span style="color:#50FA7B;font-style:italic;"> href</span><span style="color:#FF79C6;">=</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">https://fonts.googleapis.com/</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;"> /&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>当浏览器访问一个域名的时候，需要解析一次DNS，获得对应域名的ip地址。 在解析过程中，按照:</p><ul><li>浏览器缓存</li><li>系统缓存</li><li>路由器缓存</li><li>ISP(运营商)DNS缓存</li><li>根域名服务器</li><li>顶级域名服务器</li><li>主域名服务器</li></ul><p>dns-prefetch就是在将解析后的IP缓存在系统中。</p><h2 id="预先建立连接" tabindex="-1"><a class="header-anchor" href="#预先建立连接"><span>预先建立连接</span></a></h2><p>连接不仅需要 DNS 查询，还需要进行 TCP 协议握手，有些还会有 TLS/SSL 协议</p><div class="language-html line-numbers-mode" data-highlighter="shiki" data-ext="html" data-title="html" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#F8F8F2;">&lt;</span><span style="color:#FF79C6;">link</span><span style="color:#50FA7B;font-style:italic;"> rel</span><span style="color:#FF79C6;">=</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">preconnect</span><span style="color:#E9F284;">&quot;</span><span style="color:#50FA7B;font-style:italic;"> href</span><span style="color:#FF79C6;">=</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">https://fonts.googleapis.com/</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;"> /&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>浏览器大致做了如下处理：</p><ul><li>首先，解析 Preconnect 的 url；</li><li>其次，根据当前 link 元素中的属性进行 cors 的设置；</li><li>然后，默认先将 credential 设为 true，如果 cors 为 Anonymous 并且存在跨域，则将 credential 置为 false；</li><li>最后，进行连接。</li></ul><h2 id="cdn" tabindex="-1"><a class="header-anchor" href="#cdn"><span>CDN</span></a></h2><p>内容分发网络 (CDN) 是一个分布在不同地理位置的服务器群，用于缓存靠近最终用户的内容。CDN 可以快速传输加载互联网内容所需的资产，包括 HTML 网页、JavaScript 文件、样式表、图像和视频。</p><figure><img src="`+t+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>假设通过CDN加速的域名为www.a.com，接入CDN网络，开始使用加速服务后，当终端用户（北京）发起HTTP请求时，处理流程如下：</p><ul><li>当终端用户（北京）向www.a.com下的指定资源发起请求时，首先向LDNS（本地DNS）发起域名解析请求。</li><li>LDNS检查缓存中是否有www.a.com的IP地址记录。如果有，则直接返回给终端用户；如果没有，则向授权DNS查询。</li><li>当授权DNS解析www.a.com时，返回域名CNAME www.a.tbcdn.com对应IP地址。</li><li>域名解析请求发送至阿里云DNS调度系统，并为请求分配最佳节点IP地址。</li><li>LDNS获取DNS返回的解析IP地址。</li><li>用户获取解析IP地址。</li><li>用户向获取的IP地址发起对该资源的访问请求。</li><li>如果该IP地址对应的节点已缓存该资源，则会将数据直接返回给用户，例如，图中步骤7和8，请求结束。</li><li>如果该IP地址对应的节点未缓存该资源，则节点向源站发起对该资源的请求。获取资源后，结合用户自定义配置的缓存策略，将资源缓存至节点，例如，图中的北京节点，并返回给用户，请求结束。</li></ul><p>（1）CDN的加速资源是跟域名绑定的。 （2）通过域名访问资源，首先是通过DNS分查找离用户最近的CDN节点（边缘服务器）的IP （3）通过IP访问实际资源时，如果CDN上并没有缓存资源，则会到源站请求资源，并缓存到CDN节点上，这样，用户下一次访问时，该CDN节点就会有对应资源的缓存了。</p><h2 id="预渲染" tabindex="-1"><a class="header-anchor" href="#预渲染"><span>预渲染</span></a></h2><p>当项目代码构建时（build time）简单地生成一些针对特定路由的静态HTML文件，使浏览器在请求服务器之前就能渲染一些文字或内容，以便于提高SEO优化和首页白屏的缺陷（至少用户可以看到东西不那么焦虑）</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#6272A4;">// webpack.config.js</span></span>
<span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> path </span><span style="color:#FF79C6;">=</span><span style="color:#50FA7B;"> require</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">path</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> PrerenderSPAPlugin </span><span style="color:#FF79C6;">=</span><span style="color:#50FA7B;"> require</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">prerender-spa-plugin</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#8BE9FD;font-style:italic;">module</span><span style="color:#F8F8F2;">.</span><span style="color:#8BE9FD;font-style:italic;">exports</span><span style="color:#FF79C6;"> =</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  plugins</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> [</span></span>
<span class="line"><span style="color:#6272A4;">    // ... other config</span></span>
<span class="line"><span style="color:#FF79C6;font-weight:bold;">    new</span><span style="color:#50FA7B;"> PrerenderSPAPlugin</span><span style="color:#F8F8F2;">({</span></span>
<span class="line"><span style="color:#6272A4;">      // required，打包的文件输出目录，预渲染工具会在这个目录启动express服务</span></span>
<span class="line"><span style="color:#F8F8F2;">      staticDir</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> path.</span><span style="color:#50FA7B;">join</span><span style="color:#F8F8F2;">(__dirname, </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">dist</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">),</span></span>
<span class="line"><span style="color:#6272A4;">      // required，指定需要预渲染的路由</span></span>
<span class="line"><span style="color:#F8F8F2;">      routes</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> [ </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">/</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">/about</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">/some/deep/nested/route</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;"> ]</span></span>
<span class="line"><span style="color:#F8F8F2;">    })</span></span>
<span class="line"><span style="color:#F8F8F2;">  ]</span></span>
<span class="line"><span style="color:#F8F8F2;">};</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="预加载" tabindex="-1"><a class="header-anchor" href="#预加载"><span>预加载</span></a></h2><h3 id="resource-hints" tabindex="-1"><a class="header-anchor" href="#resource-hints"><span>Resource Hints</span></a></h3><p>Resource Hints</p><p><a href="https://html.spec.whatwg.org/#linkTypes" target="_blank" rel="noopener noreferrer">Resource Hints</a> 是一种预加载相关的标准，它告诉浏览器哪些源下的资源我们的 Web 应用需要获取，哪些资源在之后的操作或浏览时需要被使用，从而让浏览器能够进行一些预先连接或预先加载操作。Resource Hints 标准包括 DNS Prefetch、Preconnect、Prefetch 与 Prerender。</p><h4 id="prefetch" tabindex="-1"><a class="header-anchor" href="#prefetch"><span>Prefetch</span></a></h4><p>提前获取资源，但是不会对资源进行预处理</p><div class="language-html line-numbers-mode" data-highlighter="shiki" data-ext="html" data-title="html" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#F8F8F2;">&lt;</span><span style="color:#FF79C6;">link</span><span style="color:#50FA7B;font-style:italic;"> rel</span><span style="color:#FF79C6;">=</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">prefetch</span><span style="color:#E9F284;">&quot;</span><span style="color:#50FA7B;font-style:italic;"> href</span><span style="color:#FF79C6;">=</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">/prefetch.js</span><span style="color:#E9F284;">&quot;</span><span style="color:#50FA7B;font-style:italic;"> as</span><span style="color:#FF79C6;">=</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">script</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h4 id="prerender" tabindex="-1"><a class="header-anchor" href="#prerender"><span>Prerender</span></a></h4><p>Prerender 比 Prefetch 更进一步，可以粗略地理解不仅会预获取，还会预执行。</p><div class="language-html line-numbers-mode" data-highlighter="shiki" data-ext="html" data-title="html" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#F8F8F2;">&lt;</span><span style="color:#FF79C6;">link</span><span style="color:#50FA7B;font-style:italic;"> rel</span><span style="color:#FF79C6;">=</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">prerender</span><span style="color:#E9F284;">&quot;</span><span style="color:#50FA7B;font-style:italic;"> href</span><span style="color:#FF79C6;">=</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">//sample.com/nextpage.html</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h4 id="preload" tabindex="-1"><a class="header-anchor" href="#preload"><span>Preload</span></a></h4><p>在遇到需要 Preload 的资源时，浏览器会<strong>立刻</strong>进行预获取，并将结果放在内存中，资源的获取不会影响页面 parse 与 load 事件的触发。</p><div class="language-html line-numbers-mode" data-highlighter="shiki" data-ext="html" data-title="html" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#F8F8F2;">&lt;</span><span style="color:#FF79C6;">link</span><span style="color:#50FA7B;font-style:italic;"> rel</span><span style="color:#FF79C6;">=</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">preload</span><span style="color:#E9F284;">&quot;</span><span style="color:#50FA7B;font-style:italic;"> href</span><span style="color:#FF79C6;">=</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">/preload.js</span><span style="color:#E9F284;">&quot;</span><span style="color:#50FA7B;font-style:italic;"> as</span><span style="color:#FF79C6;">=</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">script</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="离线化" tabindex="-1"><a class="header-anchor" href="#离线化"><span>离线化</span></a></h2><h3 id="pwa" tabindex="-1"><a class="header-anchor" href="#pwa"><span>PWA</span></a></h3><h2 id="http缓存" tabindex="-1"><a class="header-anchor" href="#http缓存"><span>HTTP缓存</span></a></h2><h2 id="数据缓存" tabindex="-1"><a class="header-anchor" href="#数据缓存"><span>数据缓存</span></a></h2><h2 id="资源加载" tabindex="-1"><a class="header-anchor" href="#资源加载"><span>资源加载</span></a></h2><h2 id="请求合并" tabindex="-1"><a class="header-anchor" href="#请求合并"><span>请求合并</span></a></h2><h2 id="http2" tabindex="-1"><a class="header-anchor" href="#http2"><span>HTTP2</span></a></h2><h2 id="cdn-1" tabindex="-1"><a class="header-anchor" href="#cdn-1"><span>CDN</span></a></h2>`,46)]))}const c=l(o,[["render",p],["__file","load-policy.html.vue"]]),F=JSON.parse('{"path":"/optimization/load-policy.html","title":"加载策略","lang":"en-US","frontmatter":{"title":"加载策略","category":["Optimization"],"date":"2023-11-07T00:00:00.000Z","description":"懒加载 延迟加载（懒加载）是一种将资源标识为非阻塞（非关键）资源并仅在需要时加载它们的策略。这是一种缩短关键渲染路径长度的方法，可以缩短页面加载时间。 CSS模块加载 DNS预解析、预加载、预渲染 DNS预解析 dns-prefetch(DNS预获取)是前端网络性能优化的一种措施。它根据浏览器定义的规则，提前解析之后可能会用到的域名，使解析结果缓存到系...","head":[["meta",{"property":"og:url","content":"https://luxiag.github.io/luxiag/blog/optimization/load-policy.html"}],["meta",{"property":"og:title","content":"加载策略"}],["meta",{"property":"og:description","content":"懒加载 延迟加载（懒加载）是一种将资源标识为非阻塞（非关键）资源并仅在需要时加载它们的策略。这是一种缩短关键渲染路径长度的方法，可以缩短页面加载时间。 CSS模块加载 DNS预解析、预加载、预渲染 DNS预解析 dns-prefetch(DNS预获取)是前端网络性能优化的一种措施。它根据浏览器定义的规则，提前解析之后可能会用到的域名，使解析结果缓存到系..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2025-02-12T09:28:57.000Z"}],["meta",{"property":"article:published_time","content":"2023-11-07T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-02-12T09:28:57.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"加载策略\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-11-07T00:00:00.000Z\\",\\"dateModified\\":\\"2025-02-12T09:28:57.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"luxiag\\",\\"url\\":\\"https://luxiag.github.io/luxiag\\"}]}"]]},"headers":[{"level":2,"title":"懒加载","slug":"懒加载","link":"#懒加载","children":[{"level":3,"title":"CSS模块加载","slug":"css模块加载","link":"#css模块加载","children":[]}]},{"level":2,"title":"DNS预解析、预加载、预渲染","slug":"dns预解析、预加载、预渲染","link":"#dns预解析、预加载、预渲染","children":[]},{"level":2,"title":"DNS预解析","slug":"dns预解析","link":"#dns预解析","children":[]},{"level":2,"title":"预先建立连接","slug":"预先建立连接","link":"#预先建立连接","children":[]},{"level":2,"title":"CDN","slug":"cdn","link":"#cdn","children":[]},{"level":2,"title":"预渲染","slug":"预渲染","link":"#预渲染","children":[]},{"level":2,"title":"预加载","slug":"预加载","link":"#预加载","children":[{"level":3,"title":"Resource Hints","slug":"resource-hints","link":"#resource-hints","children":[]}]},{"level":2,"title":"离线化","slug":"离线化","link":"#离线化","children":[{"level":3,"title":"PWA","slug":"pwa","link":"#pwa","children":[]}]},{"level":2,"title":"HTTP缓存","slug":"http缓存","link":"#http缓存","children":[]},{"level":2,"title":"数据缓存","slug":"数据缓存","link":"#数据缓存","children":[]},{"level":2,"title":"资源加载","slug":"资源加载","link":"#资源加载","children":[]},{"level":2,"title":"请求合并","slug":"请求合并","link":"#请求合并","children":[]},{"level":2,"title":"HTTP2","slug":"http2","link":"#http2","children":[]},{"level":2,"title":"CDN","slug":"cdn-1","link":"#cdn-1","children":[]}],"git":{"createdTime":1667813179000,"updatedTime":1739352537000,"contributors":[{"name":"luxiag","email":"luxiag@qq.com","commits":1},{"name":"卢祥","email":"example@gmail.com","commits":1}]},"readingTime":{"minutes":4.55,"words":1364},"filePathRelative":"optimization/load-policy.md","localizedDate":"November 7, 2023","excerpt":"<h2>懒加载</h2>\\n<p>延迟加载（懒加载）是一种将资源标识为非阻塞（非关键）资源并仅在需要时加载它们的策略。这是一种缩短关键渲染路径长度的方法，可以缩短页面加载时间。</p>\\n<h3>CSS模块加载</h3>","autoDesc":true}');export{c as comp,F as data};
