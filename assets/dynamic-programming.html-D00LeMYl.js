import{_ as n}from"./0407071739096838889-3B2l6h4f.js";import{_ as a,e as l,g as t,o as e}from"./app-BcLUFOMF.js";const p="/blog/assets/168012340-11-22-16-43-01-D9Hx2UhI.png",o="/blog/assets/0407071739098110609-DyiWX_bT.png",F={};function r(c,s){return e(),l("div",null,s[0]||(s[0]=[t(`<h1 id="拿走最有价值的物品" tabindex="-1"><a class="header-anchor" href="#拿走最有价值的物品"><span>拿走最有价值的物品</span></a></h1><p>背包可装 3kg,商品有 3 件</p><table><thead><tr><th>音响</th><th>笔记本电脑</th><th>吉他</th></tr></thead><tbody><tr><td>3000 元</td><td>2000 元</td><td>1500 元</td></tr><tr><td>4 kg</td><td>3 kg</td><td>1 kg</td></tr></tbody></table><p>将问题分成一个个网格</p><table><thead><tr><th>商品/重量</th><th>1kg</th><th>2kg</th><th>3kg</th><th>4kg</th></tr></thead><tbody><tr><td>吉他</td><td></td><td></td><td></td><td></td></tr><tr><td>音响</td><td></td><td></td><td></td><td></td></tr><tr><td>笔记本电脑</td><td></td><td></td><td></td><td></td></tr></tbody></table><table><thead><tr><th>商品/重量</th><th>1kg</th><th>2kg</th><th>3kg</th><th>4kg</th></tr></thead><tbody><tr><td>吉他</td><td>¥1500</td><td>¥1500</td><td>¥1500</td><td>¥1500</td></tr><tr><td>音响</td><td></td><td></td><td></td><td></td></tr><tr><td>笔记本电脑</td><td></td><td></td><td></td><td></td></tr></tbody></table><table><thead><tr><th>商品/重量</th><th>1kg</th><th>2kg</th><th>3kg</th><th>4kg</th></tr></thead><tbody><tr><td>吉他</td><td>¥1500</td><td>¥1500</td><td>¥1500</td><td>¥1500</td></tr><tr><td>音响</td><td>¥1500</td><td>¥1500</td><td>¥1500</td><td>¥3000</td></tr><tr><td>笔记本电脑</td><td></td><td></td><td></td><td></td></tr></tbody></table><table><thead><tr><th>商品/重量</th><th>1kg</th><th>2kg</th><th>3kg</th><th>4kg</th></tr></thead><tbody><tr><td>吉他</td><td>¥1500</td><td>¥1500</td><td>¥1500</td><td>¥1500</td></tr><tr><td>音响</td><td>¥1500</td><td>¥1500</td><td>¥1500</td><td>¥3000</td></tr><tr><td>笔记本电脑</td><td>¥1500</td><td>¥1500</td><td>¥2000</td><td>¥3500</td></tr></tbody></table><p>发现第四件商品 iPhone</p><table><thead><tr><th>音响</th><th>笔记本电脑</th><th>吉他</th><th>iphone</th></tr></thead><tbody><tr><td>3000 元</td><td>2000 元</td><td>1500 元</td><td>2000 元</td></tr><tr><td>4 kg</td><td>3 kg</td><td>1 kg</td><td>1kg</td></tr></tbody></table><table><thead><tr><th>商品/重量</th><th>1kg</th><th>2kg</th><th>3kg</th><th>4kg</th></tr></thead><tbody><tr><td>吉他</td><td>¥1500</td><td>¥1500</td><td>¥1500</td><td>¥1500</td></tr><tr><td>音响</td><td>¥1500</td><td>¥1500</td><td>¥1500</td><td>¥3000</td></tr><tr><td>笔记本电脑</td><td>¥1500</td><td>¥1500</td><td>¥2000</td><td>¥3500</td></tr><tr><td>iphone</td><td>¥2000</td><td>¥3500</td><td>¥3500</td><td>¥4000</td></tr></tbody></table><h1 id="爬楼梯" tabindex="-1"><a class="header-anchor" href="#爬楼梯"><span><a href="https://leetcode.cn/problems/climbing-stairs/description/?envType=problem-list-v2&amp;envId=dynamic-programming" target="_blank" rel="noopener noreferrer">爬楼梯</a></span></a></h1><p>假设你正在爬楼梯。需要 n 阶你才能到达楼顶。</p><p>每次你可以爬 1 或 2 个台阶。你有多少种不同的方法可以爬到楼顶呢？</p><div class="language-md line-numbers-mode" data-highlighter="shiki" data-ext="md" data-title="md" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#F8F8F2;">输入：n = 2</span></span>
<span class="line"><span style="color:#F8F8F2;">输出：2</span></span>
<span class="line"><span style="color:#F8F8F2;">解释：有两种方法可以爬到楼顶。</span></span>
<span class="line"><span style="color:#F8F8F2;">1. 1 阶 + 1 阶</span></span>
<span class="line"><span style="color:#F8F8F2;">2. 2 阶</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">输入：n = 3</span></span>
<span class="line"><span style="color:#F8F8F2;">输出：3</span></span>
<span class="line"><span style="color:#F8F8F2;">解释：有三种方法可以爬到楼顶。</span></span>
<span class="line"><span style="color:#F8F8F2;">1. 1 阶 + 1 阶 + 1 阶</span></span>
<span class="line"><span style="color:#F8F8F2;">2. 1 阶 + 2 阶</span></span>
<span class="line"><span style="color:#F8F8F2;">3. 2 阶 + 1 阶</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>目的地1：青蛙在只剩一个台阶到达终点 目的地2：青蛙在只剩两个台阶到达终点 到达 目的地1 的路线数，我们记做 f(n−1)； 到达 目的地2 的路线数，我们记做 f(n−2)； 因为两个目的地不同，所以 f(n−1) 绝对不包含 f(n−2)，即不重复。（一开始我就是这里没想通）</p><p>接下来分析, 从上面两个目的地 到达 终点 的路线数:</p><p>目的地1 到达 终点 的路线数，只能有一个选择，即跳一个台阶，所以只能是 f(n−1)∗1 ，注意不是+1，这里我们求的是路线数。</p><p>目的地2 到达 终点 的路线数，这里有两个选择，即跳一个一个台阶跳 或 一次跳两个台阶，但是我们发现如果选择一个一个台阶跳，会经过上面的目的地1，即重复路线，所以我们也只能有一个选择，即一次跳两个台阶，这时，目的地2 到达 终点 的路线数是 f(n−2)∗1，注意不是+1，这里我们求的是路线数。</p><p>最后：由于一次跳一个台阶或者两个台阶的限制，所以达到终点的前一步，只能可能是从上面两个目的地出发。即得出到达终点的路线数为f(n)=f(n−1)+f(n−2)。</p><p>发散一下： 明白上面的逻辑之后，你就可以知道，如果这只青蛙一次可以跳1个台阶 或 2个台阶 或 3个台阶的时候，公式怎么写了，如下： f(n)=f(n−1)+f(n−2)+f(n−3)</p><div class="language-ts line-numbers-mode" data-highlighter="shiki" data-ext="ts" data-title="ts" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">function</span><span style="color:#50FA7B;"> climbStairs</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">n</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> number</span><span style="color:#F8F8F2;">)</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> number</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#FF79C6;">    let</span><span style="color:#F8F8F2;"> p</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> number</span><span style="color:#FF79C6;"> =</span><span style="color:#BD93F9;"> 0</span><span style="color:#F8F8F2;">, q</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> number</span><span style="color:#FF79C6;"> =</span><span style="color:#BD93F9;"> 0</span><span style="color:#F8F8F2;">, r</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> number</span><span style="color:#FF79C6;"> =</span><span style="color:#BD93F9;"> 1</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#6272A4;">    // 只有两种上楼方式，从前一层再爬一楼和从前二层再爬两楼。</span></span>
<span class="line"><span style="color:#6272A4;">    // 可以推出 f(n) = f(n -1) + f(n -2)</span></span>
<span class="line"><span style="color:#FF79C6;">    for</span><span style="color:#F8F8F2;"> (</span><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> i </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> 1</span><span style="color:#F8F8F2;">; i </span><span style="color:#FF79C6;">&lt;=</span><span style="color:#F8F8F2;"> n; </span><span style="color:#FF79C6;">++</span><span style="color:#F8F8F2;">i) {</span></span>
<span class="line"><span style="color:#6272A4;">        // x -2</span></span>
<span class="line"><span style="color:#F8F8F2;">        p </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> q;</span></span>
<span class="line"><span style="color:#6272A4;">        // x - 1 </span></span>
<span class="line"><span style="color:#F8F8F2;">        q </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> r; </span></span>
<span class="line"><span style="color:#6272A4;">        // 第 x 级台阶的方案数是爬到第 x−1 级台阶的方案数和爬到第 x−2 级台阶的方案数的和。</span></span>
<span class="line"><span style="color:#F8F8F2;">        r </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> p </span><span style="color:#FF79C6;">+</span><span style="color:#F8F8F2;"> q;</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#FF79C6;">    return</span><span style="color:#F8F8F2;"> r;</span></span>
<span class="line"><span style="color:#F8F8F2;">};</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="k-站中转内最便宜的航班" tabindex="-1"><a class="header-anchor" href="#k-站中转内最便宜的航班"><span><a href="https://leetcode.cn/problems/cheapest-flights-within-k-stops/" target="_blank" rel="noopener noreferrer">K 站中转内最便宜的航班</a></span></a></h1><p>有 n 个城市通过一些航班连接。给你一个数组 flights ，其中 flights[i] = [fromi, toi, pricei] ，表示该航班都从城市 fromi 开始，以价格 pricei 抵达 toi。</p><p>现在给定所有的城市和航班，以及出发城市 src 和目的地 dst，你的任务是找到出一条最多经过 k 站中转的路线，使得从 src 到 dst 的 价格最便宜 ，并返回该价格。 如果不存在这样的路线，则输出 -1。</p><div class="language-md line-numbers-mode" data-highlighter="shiki" data-ext="md" data-title="md" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#F8F8F2;">输入:</span></span>
<span class="line"><span style="color:#F8F8F2;">n 三个城市 0-&gt;1 100 元,1 -&gt; 2 100 元 ， 0 -&gt; 2 500 元</span></span>
<span class="line"><span style="color:#F8F8F2;">n = 3, edges = [[</span><span style="color:#FF79C6;">0,1,100</span><span style="color:#F8F8F2;">],[</span><span style="color:#FF79C6;">1,2,100</span><span style="color:#F8F8F2;">],[</span><span style="color:#FF79C6;">0,2,500</span><span style="color:#F8F8F2;">]]</span></span>
<span class="line"><span style="color:#F8F8F2;">src 出发城市 dst 目的地 k 经过一站</span></span>
<span class="line"><span style="color:#F8F8F2;">src = 0, dst = 2, k = 1</span></span>
<span class="line"><span style="color:#F8F8F2;">输出: 200</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+p+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#6272A4;">//来源  https://leetcode.cn/problems/cheapest-flights-within-k-stops/solutions/954402/k-zhan-zhong-zhuan-nei-zui-bian-yi-de-ha-abzi/</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">var</span><span style="color:#50FA7B;"> findCheapestPrice</span><span style="color:#FF79C6;"> =</span><span style="color:#FF79C6;"> function</span><span style="color:#F8F8F2;"> (</span><span style="color:#FFB86C;font-style:italic;">n</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">flights</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">src</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">dst</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">k</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#FF79C6;">  const</span><span style="color:#F8F8F2;"> INF </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> 10000</span><span style="color:#FF79C6;"> *</span><span style="color:#BD93F9;"> 101</span><span style="color:#FF79C6;"> +</span><span style="color:#BD93F9;"> 1</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">  /*     1   2   3   航班</span></span>
<span class="line"><span style="color:#6272A4;">     1  花费</span></span>
<span class="line"><span style="color:#6272A4;">     2</span></span>
<span class="line"><span style="color:#6272A4;">     3</span></span>
<span class="line"><span style="color:#6272A4;">     城市</span></span>
<span class="line"><span style="color:#6272A4;">  */</span></span>
<span class="line"><span style="color:#6272A4;">  // 最多达成k+1次航班 =》 生成 k+2的数组</span></span>
<span class="line"><span style="color:#6272A4;">  // n 个城市</span></span>
<span class="line"><span style="color:#6272A4;">  // f =&gt; 一个二维数组 城市和航班次数</span></span>
<span class="line"><span style="color:#FF79C6;">  const</span><span style="color:#F8F8F2;"> f </span><span style="color:#FF79C6;">=</span><span style="color:#FF79C6;font-weight:bold;"> new</span><span style="color:#50FA7B;"> Array</span><span style="color:#F8F8F2;">(k </span><span style="color:#FF79C6;">+</span><span style="color:#BD93F9;"> 2</span><span style="color:#F8F8F2;">).</span><span style="color:#50FA7B;">fill</span><span style="color:#F8F8F2;">(</span><span style="color:#BD93F9;">0</span><span style="color:#F8F8F2;">).</span><span style="color:#50FA7B;">map</span><span style="color:#F8F8F2;">(() </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#FF79C6;font-weight:bold;"> new</span><span style="color:#50FA7B;"> Array</span><span style="color:#F8F8F2;">(n).</span><span style="color:#50FA7B;">fill</span><span style="color:#F8F8F2;">(INF));</span></span>
<span class="line"><span style="color:#6272A4;">  //0城市 话费为0 </span></span>
<span class="line"><span style="color:#F8F8F2;">  f[</span><span style="color:#BD93F9;">0</span><span style="color:#F8F8F2;">][src] </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> 0</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#FF79C6;">  for</span><span style="color:#F8F8F2;"> (</span><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> t </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> 1</span><span style="color:#F8F8F2;">; t </span><span style="color:#FF79C6;">&lt;=</span><span style="color:#F8F8F2;"> k </span><span style="color:#FF79C6;">+</span><span style="color:#BD93F9;"> 1</span><span style="color:#F8F8F2;">; </span><span style="color:#FF79C6;">++</span><span style="color:#F8F8F2;">t) {</span></span>
<span class="line"><span style="color:#FF79C6;">    for</span><span style="color:#F8F8F2;"> (</span><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> flight </span><span style="color:#FF79C6;">of</span><span style="color:#F8F8F2;"> flights) {</span></span>
<span class="line"><span style="color:#FF79C6;">      const</span><span style="color:#F8F8F2;"> j </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> flight[</span><span style="color:#BD93F9;">0</span><span style="color:#F8F8F2;">],</span></span>
<span class="line"><span style="color:#F8F8F2;">        i </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> flight[</span><span style="color:#BD93F9;">1</span><span style="color:#F8F8F2;">],</span></span>
<span class="line"><span style="color:#F8F8F2;">        cost </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> flight[</span><span style="color:#BD93F9;">2</span><span style="color:#F8F8F2;">];</span></span>
<span class="line"><span style="color:#6272A4;">        // t 航班 i 城市 =  话费</span></span>
<span class="line"><span style="color:#F8F8F2;">      f[t][i] </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> Math.</span><span style="color:#50FA7B;">min</span><span style="color:#F8F8F2;">(f[t][i], f[t </span><span style="color:#FF79C6;">-</span><span style="color:#BD93F9;"> 1</span><span style="color:#F8F8F2;">][j] </span><span style="color:#FF79C6;">+</span><span style="color:#F8F8F2;"> cost);</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#FF79C6;">  let</span><span style="color:#F8F8F2;"> ans </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> INF;</span></span>
<span class="line"><span style="color:#6272A4;">  // 遍历航班次数 筛选最小话费</span></span>
<span class="line"><span style="color:#FF79C6;">  for</span><span style="color:#F8F8F2;"> (</span><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> t </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> 1</span><span style="color:#F8F8F2;">; t </span><span style="color:#FF79C6;">&lt;=</span><span style="color:#F8F8F2;"> k </span><span style="color:#FF79C6;">+</span><span style="color:#BD93F9;"> 1</span><span style="color:#F8F8F2;">; </span><span style="color:#FF79C6;">++</span><span style="color:#F8F8F2;">t) {</span></span>
<span class="line"><span style="color:#F8F8F2;">    ans </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> Math.</span><span style="color:#50FA7B;">min</span><span style="color:#F8F8F2;">(ans, f[t][dst]);</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#FF79C6;">  return</span><span style="color:#F8F8F2;"> ans </span><span style="color:#FF79C6;">==</span><span style="color:#F8F8F2;"> INF </span><span style="color:#FF79C6;">?</span><span style="color:#FF79C6;"> -</span><span style="color:#BD93F9;">1</span><span style="color:#FF79C6;"> :</span><span style="color:#F8F8F2;"> ans;</span></span>
<span class="line"><span style="color:#F8F8F2;">};</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="接雨水" tabindex="-1"><a class="header-anchor" href="#接雨水"><span><a href="https://leetcode.cn/problems/trapping-rain-water/description/?envType=problem-list-v2&amp;envId=dynamic-programming" target="_blank" rel="noopener noreferrer">接雨水</a></span></a></h1><p>给定 n 个非负整数表示每个宽度为 1 的柱子的高度图，计算按此排列的柱子，下雨之后能接多少雨水。</p><figure><img src="`+n+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="'+o+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><div class="language-md line-numbers-mode" data-highlighter="shiki" data-ext="md" data-title="md" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#F8F8F2;">输入：height = [</span><span style="color:#FF79C6;">0,1,0,2,1,0,1,3,2,1,2,1</span><span style="color:#F8F8F2;">]</span></span>
<span class="line"><span style="color:#F8F8F2;">输出：6</span></span>
<span class="line"><span style="color:#F8F8F2;">解释：上面是由数组 [</span><span style="color:#FF79C6;">0,1,0,2,1,0,1,3,2,1,2,1</span><span style="color:#F8F8F2;">] 表示的高度图，在这种情况下，可以接 6 个单位的雨水（蓝色部分表示雨水）。 </span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">输入：height = [</span><span style="color:#FF79C6;">4,2,0,3,2,5</span><span style="color:#F8F8F2;">]</span></span>
<span class="line"><span style="color:#F8F8F2;">输出：9</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-ts line-numbers-mode" data-highlighter="shiki" data-ext="ts" data-title="ts" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">function</span><span style="color:#50FA7B;"> trap</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">height</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> number</span><span style="color:#F8F8F2;">[])</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> number</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#FF79C6;">    const</span><span style="color:#F8F8F2;"> n </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> height.length;</span></span>
<span class="line"><span style="color:#FF79C6;">    if</span><span style="color:#F8F8F2;"> (n </span><span style="color:#FF79C6;">==</span><span style="color:#BD93F9;"> 0</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#FF79C6;">        return</span><span style="color:#BD93F9;"> 0</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">    const</span><span style="color:#F8F8F2;"> leftMax </span><span style="color:#FF79C6;">=</span><span style="color:#FF79C6;font-weight:bold;"> new</span><span style="color:#50FA7B;"> Array</span><span style="color:#F8F8F2;">(n).</span><span style="color:#50FA7B;">fill</span><span style="color:#F8F8F2;">(</span><span style="color:#BD93F9;">0</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">    leftMax[</span><span style="color:#BD93F9;">0</span><span style="color:#F8F8F2;">] </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> height[</span><span style="color:#BD93F9;">0</span><span style="color:#F8F8F2;">];</span></span>
<span class="line"><span style="color:#FF79C6;">    for</span><span style="color:#F8F8F2;"> (</span><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> i </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> 1</span><span style="color:#F8F8F2;">; i </span><span style="color:#FF79C6;">&lt;</span><span style="color:#F8F8F2;"> n; </span><span style="color:#FF79C6;">++</span><span style="color:#F8F8F2;">i) {</span></span>
<span class="line"><span style="color:#F8F8F2;">        leftMax[i] </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> Math.</span><span style="color:#50FA7B;">max</span><span style="color:#F8F8F2;">(leftMax[i </span><span style="color:#FF79C6;">-</span><span style="color:#BD93F9;"> 1</span><span style="color:#F8F8F2;">], height[i]);</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">    const</span><span style="color:#F8F8F2;"> rightMax </span><span style="color:#FF79C6;">=</span><span style="color:#FF79C6;font-weight:bold;"> new</span><span style="color:#50FA7B;"> Array</span><span style="color:#F8F8F2;">(n).</span><span style="color:#50FA7B;">fill</span><span style="color:#F8F8F2;">(</span><span style="color:#BD93F9;">0</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">    rightMax[n </span><span style="color:#FF79C6;">-</span><span style="color:#BD93F9;"> 1</span><span style="color:#F8F8F2;">] </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> height[n </span><span style="color:#FF79C6;">-</span><span style="color:#BD93F9;"> 1</span><span style="color:#F8F8F2;">];</span></span>
<span class="line"><span style="color:#FF79C6;">    for</span><span style="color:#F8F8F2;"> (</span><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> i </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> n </span><span style="color:#FF79C6;">-</span><span style="color:#BD93F9;"> 2</span><span style="color:#F8F8F2;">; i </span><span style="color:#FF79C6;">&gt;=</span><span style="color:#BD93F9;"> 0</span><span style="color:#F8F8F2;">; </span><span style="color:#FF79C6;">--</span><span style="color:#F8F8F2;">i) {</span></span>
<span class="line"><span style="color:#F8F8F2;">        rightMax[i] </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> Math.</span><span style="color:#50FA7B;">max</span><span style="color:#F8F8F2;">(rightMax[i </span><span style="color:#FF79C6;">+</span><span style="color:#BD93F9;"> 1</span><span style="color:#F8F8F2;">], height[i]);</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">    let</span><span style="color:#F8F8F2;"> ans </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> 0</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#FF79C6;">    for</span><span style="color:#F8F8F2;"> (</span><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> i </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> 0</span><span style="color:#F8F8F2;">; i </span><span style="color:#FF79C6;">&lt;</span><span style="color:#F8F8F2;"> n; </span><span style="color:#FF79C6;">++</span><span style="color:#F8F8F2;">i) {</span></span>
<span class="line"><span style="color:#F8F8F2;">        ans </span><span style="color:#FF79C6;">+=</span><span style="color:#F8F8F2;"> Math.</span><span style="color:#50FA7B;">min</span><span style="color:#F8F8F2;">(leftMax[i], rightMax[i]) </span><span style="color:#FF79C6;">-</span><span style="color:#F8F8F2;"> height[i];</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#FF79C6;">    return</span><span style="color:#F8F8F2;"> ans;</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,34)]))}const y=a(F,[["render",r],["__file","dynamic-programming.html.vue"]]),m=JSON.parse('{"path":"/algorithm/dynamic-programming.html","title":"动态规划","lang":"en-US","frontmatter":{"title":"动态规划","date":"2022-10-04T00:00:00.000Z","category":["算法"],"tag":["算法图解"],"description":"拿走最有价值的物品 背包可装 3kg,商品有 3 件 将问题分成一个个网格 发现第四件商品 iPhone 爬楼梯 假设你正在爬楼梯。需要 n 阶你才能到达楼顶。 每次你可以爬 1 或 2 个台阶。你有多少种不同的方法可以爬到楼顶呢？ 目的地1：青蛙在只剩一个台阶到达终点 目的地2：青蛙在只剩两个台阶到达终点 到达 目的地1 的路线数，我们记做 f(n−...","head":[["meta",{"property":"og:url","content":"https://luxiag.github.io/luxiag/blog/algorithm/dynamic-programming.html"}],["meta",{"property":"og:title","content":"动态规划"}],["meta",{"property":"og:description","content":"拿走最有价值的物品 背包可装 3kg,商品有 3 件 将问题分成一个个网格 发现第四件商品 iPhone 爬楼梯 假设你正在爬楼梯。需要 n 阶你才能到达楼顶。 每次你可以爬 1 或 2 个台阶。你有多少种不同的方法可以爬到楼顶呢？ 目的地1：青蛙在只剩一个台阶到达终点 目的地2：青蛙在只剩两个台阶到达终点 到达 目的地1 的路线数，我们记做 f(n−..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2025-02-09T14:06:21.000Z"}],["meta",{"property":"article:tag","content":"算法图解"}],["meta",{"property":"article:published_time","content":"2022-10-04T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-02-09T14:06:21.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"动态规划\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-10-04T00:00:00.000Z\\",\\"dateModified\\":\\"2025-02-09T14:06:21.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"luxiag\\",\\"url\\":\\"https://luxiag.github.io/luxiag\\"}]}"]]},"git":{"createdTime":1665068249000,"updatedTime":1739109981000,"contributors":[{"name":"luxiang","username":"luxiang","email":"luxiag@qq.com","commits":1,"url":"https://github.com/luxiang"},{"name":"卢祥","username":"卢祥","email":"example@qq.com","commits":4,"url":"https://github.com/卢祥"},{"name":"luxiag","username":"luxiag","email":"luxiag@qq.com","commits":3,"url":"https://github.com/luxiag"}]},"readingTime":{"minutes":5.06,"words":1519},"filePathRelative":"algorithm/dynamic-programming.md","localizedDate":"October 4, 2022","excerpt":"\\n<p>背包可装 3kg,商品有 3 件</p>\\n<table>\\n<thead>\\n<tr>\\n<th>音响</th>\\n<th>笔记本电脑</th>\\n<th>吉他</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>3000 元</td>\\n<td>2000 元</td>\\n<td>1500 元</td>\\n</tr>\\n<tr>\\n<td>4 kg</td>\\n<td>3 kg</td>\\n<td>1 kg</td>\\n</tr>\\n</tbody>\\n</table>","autoDesc":true}');export{y as comp,m as data};
