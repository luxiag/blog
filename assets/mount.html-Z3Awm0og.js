import{_ as a,c as l,d as e,a as p,o,r as F}from"./app-DsmKNl15.js";const c="/blog/assets/1680123400811104229-u7pCdkrD.png",i="/blog/assets/1680123400811111106-hc2h-yOO.png",t="/blog/assets/1680123401031164038-C9WwxcA4.png",r="/blog/assets/1680123400816165854-kKa2KzWY.png",d={};function y(v,s){const n=F("Mermaid");return o(),l("div",null,[e(n,{id:"mermaid-0",code:"eJyVkc1OwkAUhfc+RRcugUdwodGlK4NL0pRRSGhL6hRdEixIxSiJQPhLkUgCbqpigkJDeBlmpn0Lp1NoSoKAu5l7znfunbkXKflaSPAK5M4O9zguo4JILCklIRcOH3AZMbIvyqoEXWV5Zgo7HcliWpYAk1cLzIP1vt19wD9D3Hk+56GQAAo1rtwDPjUd5yEIRq6tB4iYAqQ4UOzHb/RUsxtNXOpET+U48NG/DCwDFfLO7WBhFBRAmxyngOi13qB6Awy7uK1D/jKEii1kTcjbZNl6C0kZXH8n7Q4yDfs+R3LjRcSS3xZAZTI1V1DcMJ1s818D+P9JPi1klCi2th74bS/J13FtjL+q7rwbZIbPpzNSGYAbSJdBrD7WZ1GVPXQricpFNB5RN2lqjlW3zZ6chklZutqJpq9Bd1Nc/SCWNrdGIc95okqCm8GnfAb1NFIusMydUt2BvEhk6vZr3rtgQ3OyL17HkD2roJYRldyN7P0CbKOksA=="}),s[0]||(s[0]=p(`<h2 id="mount" tabindex="-1"><a class="header-anchor" href="#mount"><span>mount</span></a></h2><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#6272A4;">// vue._init()</span></span>
<span class="line"><span style="color:#FF79C6;">if</span><span style="color:#F8F8F2;"> (vm.$options.el) {</span></span>
<span class="line"><span style="color:#F8F8F2;">  vm.</span><span style="color:#50FA7B;">$mount</span><span style="color:#F8F8F2;">(vm.$options.el);</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#8BE9FD;font-style:italic;">Vue</span><span style="color:#F8F8F2;">.prototype.</span><span style="color:#50FA7B;">$mount</span><span style="color:#FF79C6;"> =</span><span style="color:#FF79C6;"> function</span><span style="color:#F8F8F2;"> (</span></span>
<span class="line"><span style="color:#FFB86C;font-style:italic;">  el</span><span style="color:#FF79C6;">?:</span><span style="color:#8BE9FD;font-style:italic;"> string</span><span style="color:#FF79C6;"> |</span><span style="color:#8BE9FD;font-style:italic;"> Element</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#FFB86C;font-style:italic;">  hydrating</span><span style="color:#FF79C6;">?:</span><span style="color:#8BE9FD;font-style:italic;"> boolean</span></span>
<span class="line"><span style="color:#F8F8F2;">)</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> Component</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  el </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> el </span><span style="color:#FF79C6;">&amp;&amp;</span><span style="color:#F8F8F2;"> inBrowser </span><span style="color:#FF79C6;">?</span><span style="color:#50FA7B;"> query</span><span style="color:#F8F8F2;">(el) </span><span style="color:#FF79C6;">:</span><span style="color:#BD93F9;"> undefined</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#FF79C6;">  return</span><span style="color:#50FA7B;"> mountComponent</span><span style="color:#F8F8F2;">(</span><span style="color:#BD93F9;font-style:italic;">this</span><span style="color:#F8F8F2;">, el, hydrating);</span></span>
<span class="line"><span style="color:#F8F8F2;">};</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>this</code><img src="`+c+'" alt="" loading="lazy"></p><h2 id="mountcomponent" tabindex="-1"><a class="header-anchor" href="#mountcomponent"><span>mountComponent</span></a></h2><figure><img src="'+i+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><code>core/instance/lifecycle</code></p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">export</span><span style="color:#FF79C6;"> function</span><span style="color:#50FA7B;"> mountComponent</span><span style="color:#F8F8F2;">(</span></span>
<span class="line"><span style="color:#FFB86C;font-style:italic;">  vm</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> Component</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#FFB86C;font-style:italic;">  el</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> Element</span><span style="color:#FF79C6;"> |</span><span style="color:#8BE9FD;font-style:italic;"> null</span><span style="color:#FF79C6;"> |</span><span style="color:#8BE9FD;font-style:italic;"> undefined</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#FFB86C;font-style:italic;">  hydrating</span><span style="color:#FF79C6;">?:</span><span style="color:#8BE9FD;font-style:italic;"> boolean</span></span>
<span class="line"><span style="color:#F8F8F2;">)</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> Component</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  vm.$el </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> el;</span></span>
<span class="line"><span style="color:#FF79C6;">  if</span><span style="color:#F8F8F2;"> (</span><span style="color:#FF79C6;">!</span><span style="color:#F8F8F2;">vm.$options.render) {</span></span>
<span class="line"><span style="color:#6272A4;">    //  判断实例上是否存在渲染函数</span></span>
<span class="line"><span style="color:#F8F8F2;">    vm.$options.render </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> createEmptyVNode;</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#50FA7B;">  callHook</span><span style="color:#F8F8F2;">(vm, </span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">beforeMount</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">  let</span><span style="color:#F8F8F2;"> updateComponent;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#50FA7B;">  updateComponent</span><span style="color:#FF79C6;"> =</span><span style="color:#F8F8F2;"> () </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#6272A4;">    /*</span></span>
<span class="line"><span style="color:#6272A4;">    vm._render()得到一份最新的VNode节点树，</span></span>
<span class="line"><span style="color:#6272A4;">    然后执行vm._update()方法对最新的VNode节点树与上一次渲染的旧VNode节点树进行对比并更新DOM节点(即patch操作)，</span></span>
<span class="line"><span style="color:#6272A4;">    完成一次渲染。</span></span>
<span class="line"><span style="color:#6272A4;">    */</span></span>
<span class="line"><span style="color:#F8F8F2;">    vm.</span><span style="color:#50FA7B;">_update</span><span style="color:#F8F8F2;">(vm.</span><span style="color:#50FA7B;">_render</span><span style="color:#F8F8F2;">(), hydrating);</span></span>
<span class="line"><span style="color:#F8F8F2;">  };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">  const</span><span style="color:#F8F8F2;"> watcherOptions</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> WatcherOptions</span><span style="color:#FF79C6;"> =</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#50FA7B;">    before</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#FF79C6;">      if</span><span style="color:#F8F8F2;"> (vm._isMounted </span><span style="color:#FF79C6;">&amp;&amp;</span><span style="color:#FF79C6;"> !</span><span style="color:#F8F8F2;">vm._isDestroyed) {</span></span>
<span class="line"><span style="color:#50FA7B;">        callHook</span><span style="color:#F8F8F2;">(vm, </span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">beforeUpdate</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">      }</span></span>
<span class="line"><span style="color:#F8F8F2;">    },</span></span>
<span class="line"><span style="color:#F8F8F2;">  };</span></span>
<span class="line"><span style="color:#6272A4;">  // we set this to vm._watcher inside the watcher&#39;s constructor</span></span>
<span class="line"><span style="color:#6272A4;">  // since the watcher&#39;s initial patch may call $forceUpdate (e.g. inside child</span></span>
<span class="line"><span style="color:#6272A4;">  // component&#39;s mounted hook), which relies on vm._watcher being already defined</span></span>
<span class="line"><span style="color:#FF79C6;font-weight:bold;">  new</span><span style="color:#50FA7B;"> Watcher</span><span style="color:#F8F8F2;">(</span></span>
<span class="line"><span style="color:#F8F8F2;">    vm,</span></span>
<span class="line"><span style="color:#F8F8F2;">    updateComponent,</span></span>
<span class="line"><span style="color:#F8F8F2;">    noop,</span></span>
<span class="line"><span style="color:#F8F8F2;">    watcherOptions,</span></span>
<span class="line"><span style="color:#BD93F9;">    true</span><span style="color:#6272A4;"> /* isRenderWatcher */</span></span>
<span class="line"><span style="color:#F8F8F2;">  );</span></span>
<span class="line"><span style="color:#F8F8F2;">  hydrating </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> false</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">  // flush buffer for flush: &quot;pre&quot; watchers queued in setup()</span></span>
<span class="line"><span style="color:#FF79C6;">  const</span><span style="color:#F8F8F2;"> preWatchers </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> vm._preWatchers;</span></span>
<span class="line"><span style="color:#FF79C6;">  if</span><span style="color:#F8F8F2;"> (preWatchers) {</span></span>
<span class="line"><span style="color:#FF79C6;">    for</span><span style="color:#F8F8F2;"> (</span><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> i </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> 0</span><span style="color:#F8F8F2;">; i </span><span style="color:#FF79C6;">&lt;</span><span style="color:#F8F8F2;"> preWatchers.length; i</span><span style="color:#FF79C6;">++</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">      preWatchers[i].</span><span style="color:#50FA7B;">run</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">  // manually mounted instance, call mounted on self</span></span>
<span class="line"><span style="color:#6272A4;">  // mounted is called for render-created child components in its inserted hook</span></span>
<span class="line"><span style="color:#FF79C6;">  if</span><span style="color:#F8F8F2;"> (vm.$vnode </span><span style="color:#FF79C6;">==</span><span style="color:#BD93F9;"> null</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">    vm._isMounted </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> true</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#50FA7B;">    callHook</span><span style="color:#F8F8F2;">(vm, </span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">mounted</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#FF79C6;">  return</span><span style="color:#F8F8F2;"> vm;</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="render" tabindex="-1"><a class="header-anchor" href="#render"><span>render</span></a></h3><details class="hint-container details"><summary>_render</summary><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#8BE9FD;font-style:italic;">  Vue</span><span style="color:#F8F8F2;">.prototype.</span><span style="color:#50FA7B;">_render</span><span style="color:#FF79C6;"> =</span><span style="color:#FF79C6;"> function</span><span style="color:#F8F8F2;"> ()</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> VNode</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#FF79C6;">    const</span><span style="color:#F8F8F2;"> vm</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> Component</span><span style="color:#FF79C6;"> =</span><span style="color:#BD93F9;font-style:italic;"> this</span></span>
<span class="line"><span style="color:#FF79C6;">    const</span><span style="color:#F8F8F2;"> { render, _parentVnode } </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> vm.$options</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">    if</span><span style="color:#F8F8F2;"> (_parentVnode) {</span></span>
<span class="line"><span style="color:#F8F8F2;">      vm.$scopedSlots </span><span style="color:#FF79C6;">=</span><span style="color:#50FA7B;"> normalizeScopedSlots</span><span style="color:#F8F8F2;">(</span></span>
<span class="line"><span style="color:#F8F8F2;">        vm.$parent</span><span style="color:#FF79C6;">!</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">        _parentVnode.data</span><span style="color:#FF79C6;">!</span><span style="color:#F8F8F2;">.scopedSlots,</span></span>
<span class="line"><span style="color:#F8F8F2;">        vm.$slots,</span></span>
<span class="line"><span style="color:#F8F8F2;">        vm.$scopedSlots</span></span>
<span class="line"><span style="color:#F8F8F2;">      )</span></span>
<span class="line"><span style="color:#FF79C6;">      if</span><span style="color:#F8F8F2;"> (vm._slotsProxy) {</span></span>
<span class="line"><span style="color:#50FA7B;">        syncSetupSlots</span><span style="color:#F8F8F2;">(vm._slotsProxy, vm.$scopedSlots)</span></span>
<span class="line"><span style="color:#F8F8F2;">      }</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">    // set parent vnode. this allows render functions to have access</span></span>
<span class="line"><span style="color:#6272A4;">    // to the data on the placeholder node.</span></span>
<span class="line"><span style="color:#F8F8F2;">    vm.$vnode </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> _parentVnode</span><span style="color:#FF79C6;">!</span></span>
<span class="line"><span style="color:#6272A4;">    // render self</span></span>
<span class="line"><span style="color:#FF79C6;">    let</span><span style="color:#F8F8F2;"> vnode</span></span>
<span class="line"><span style="color:#FF79C6;">    try</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#6272A4;">      // There&#39;s no need to maintain a stack because all render fns are called</span></span>
<span class="line"><span style="color:#6272A4;">      // separately from one another. Nested component&#39;s render fns are called</span></span>
<span class="line"><span style="color:#6272A4;">      // when parent component is patched.</span></span>
<span class="line"><span style="color:#50FA7B;">      setCurrentInstance</span><span style="color:#F8F8F2;">(vm)</span></span>
<span class="line"><span style="color:#F8F8F2;">      currentRenderingInstance </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> vm</span></span>
<span class="line"><span style="color:#6272A4;">      // vm._renderProxy = vm</span></span>
<span class="line"><span style="color:#F8F8F2;">      vnode </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> render.</span><span style="color:#50FA7B;">call</span><span style="color:#F8F8F2;">(vm._renderProxy, vm.$createElement)</span></span>
<span class="line"><span style="color:#F8F8F2;">    } </span><span style="color:#FF79C6;">catch</span><span style="color:#F8F8F2;"> (</span><span style="color:#FFB86C;font-style:italic;">e</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> any</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#50FA7B;">      handleError</span><span style="color:#F8F8F2;">(e, vm, </span><span style="color:#F1FA8C;">\`render\`</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#6272A4;">      // return error render result,</span></span>
<span class="line"><span style="color:#6272A4;">      // or previous vnode to prevent render error causing blank component</span></span>
<span class="line"><span style="color:#6272A4;">      /* istanbul ignore else */</span></span>
<span class="line"><span style="color:#F8F8F2;">        vnode </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> vm._vnode</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">    } </span><span style="color:#FF79C6;">finally</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">      currentRenderingInstance </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> null</span></span>
<span class="line"><span style="color:#50FA7B;">      setCurrentInstance</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#6272A4;">    // if the returned array contains only a single node, allow it</span></span>
<span class="line"><span style="color:#FF79C6;">    if</span><span style="color:#F8F8F2;"> (</span><span style="color:#50FA7B;">isArray</span><span style="color:#F8F8F2;">(vnode) </span><span style="color:#FF79C6;">&amp;&amp;</span><span style="color:#F8F8F2;"> vnode.length </span><span style="color:#FF79C6;">===</span><span style="color:#BD93F9;"> 1</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">      vnode </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> vnode[</span><span style="color:#BD93F9;">0</span><span style="color:#F8F8F2;">]</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#6272A4;">    // return empty vnode in case the render function errored out</span></span>
<span class="line"><span style="color:#FF79C6;">    if</span><span style="color:#F8F8F2;"> (</span><span style="color:#FF79C6;">!</span><span style="color:#F8F8F2;">(vnode </span><span style="color:#FF79C6;">instanceof</span><span style="color:#8BE9FD;font-style:italic;"> VNode</span><span style="color:#F8F8F2;">)) {</span></span>
<span class="line"><span style="color:#F8F8F2;">      vnode </span><span style="color:#FF79C6;">=</span><span style="color:#50FA7B;"> createEmptyVNode</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#6272A4;">    // set parent</span></span>
<span class="line"><span style="color:#F8F8F2;">    vnode.parent </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> _parentVnode</span></span>
<span class="line"><span style="color:#FF79C6;">    return</span><span style="color:#F8F8F2;"> vnode</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h3 id="createelement" tabindex="-1"><a class="header-anchor" href="#createelement"><span>createElement</span></a></h3><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#F8F8F2;">vnode </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> render.</span><span style="color:#50FA7B;">call</span><span style="color:#F8F8F2;">(vm._renderProxy, vm.$createElement);</span></span>
<span class="line"><span style="color:#F8F8F2;">vm.</span><span style="color:#50FA7B;">$createElement</span><span style="color:#FF79C6;"> =</span><span style="color:#F8F8F2;"> (</span><span style="color:#FFB86C;font-style:italic;">a</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">b</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">c</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">d</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#50FA7B;"> createElement</span><span style="color:#F8F8F2;">(vm, a, b, c, d, </span><span style="color:#BD93F9;">true</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#6272A4;">//  =&gt; vm._renderProxy.render(vm.$createElement) _renderProxy = vm</span></span>
<span class="line"><span style="color:#6272A4;">//  =&gt; vm.render(vm.$createElement)</span></span>
<span class="line"><span style="color:#6272A4;">// App.vue  render: h =&gt; h(App) = h =vm.$createElement</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><details class="hint-container details"><summary>render</summary><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">var</span><span style="color:#50FA7B;"> render</span><span style="color:#FF79C6;"> =</span><span style="color:#FF79C6;"> function</span><span style="color:#F8F8F2;"> () {</span></span>
<span class="line"><span style="color:#FF79C6;">  var</span><span style="color:#F8F8F2;"> _vm </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;font-style:italic;"> this</span></span>
<span class="line"><span style="color:#FF79C6;">  var</span><span style="color:#F8F8F2;"> _h </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> _vm.$createElement</span></span>
<span class="line"><span style="color:#FF79C6;">  var</span><span style="color:#F8F8F2;"> _c </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> _vm._self._c </span><span style="color:#FF79C6;">||</span><span style="color:#F8F8F2;"> _h</span></span>
<span class="line"><span style="color:#FF79C6;">  return</span><span style="color:#50FA7B;"> _c</span><span style="color:#F8F8F2;">(</span></span>
<span class="line"><span style="color:#E9F284;">    &quot;</span><span style="color:#F1FA8C;">div</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">    { attrs</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> { id</span><span style="color:#FF79C6;">:</span><span style="color:#E9F284;"> &quot;</span><span style="color:#F1FA8C;">app</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;"> } },</span></span>
<span class="line"><span style="color:#F8F8F2;">    [</span></span>
<span class="line"><span style="color:#50FA7B;">      _c</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">img</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">, {</span></span>
<span class="line"><span style="color:#F8F8F2;">        attrs</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> { alt</span><span style="color:#FF79C6;">:</span><span style="color:#E9F284;"> &quot;</span><span style="color:#F1FA8C;">Vue logo</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">, src</span><span style="color:#FF79C6;">:</span><span style="color:#50FA7B;"> __webpack_require__</span><span style="color:#F8F8F2;">(</span><span style="color:#6272A4;">/*! ./assets/logo.png */</span><span style="color:#E9F284;"> &quot;</span><span style="color:#F1FA8C;">./src/assets/logo.png</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">) },</span></span>
<span class="line"><span style="color:#F8F8F2;">      }),</span></span>
<span class="line"><span style="color:#F8F8F2;">      _vm.</span><span style="color:#50FA7B;">_v</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&quot;</span><span style="color:#E9F284;"> &quot;</span><span style="color:#F8F8F2;">),</span></span>
<span class="line"><span style="color:#50FA7B;">      _c</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">HelloWorldVue</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">, { attrs</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> { msg</span><span style="color:#FF79C6;">:</span><span style="color:#E9F284;"> &quot;</span><span style="color:#F1FA8C;">Welcome to Your Vue.js App</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;"> } }),</span></span>
<span class="line"><span style="color:#F8F8F2;">      _vm.</span><span style="color:#50FA7B;">_v</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&quot;</span><span style="color:#E9F284;"> &quot;</span><span style="color:#F8F8F2;">),</span></span>
<span class="line"><span style="color:#50FA7B;">      _c</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">input</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">, { directives</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> [{ name</span><span style="color:#FF79C6;">:</span><span style="color:#E9F284;"> &quot;</span><span style="color:#F1FA8C;">focus</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">, rawName</span><span style="color:#FF79C6;">:</span><span style="color:#E9F284;"> &quot;</span><span style="color:#F1FA8C;">v-focus</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;"> }] }),</span></span>
<span class="line"><span style="color:#F8F8F2;">      _vm.</span><span style="color:#50FA7B;">_v</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&quot;</span><span style="color:#E9F284;"> &quot;</span><span style="color:#F8F8F2;">),</span></span>
<span class="line"><span style="color:#50FA7B;">      _c</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">router-link</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">, { attrs</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> { to</span><span style="color:#FF79C6;">:</span><span style="color:#E9F284;"> &quot;</span><span style="color:#F1FA8C;">/home</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;"> } }, [_vm.</span><span style="color:#50FA7B;">_v</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">Home</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">)]),</span></span>
<span class="line"><span style="color:#F8F8F2;">      _vm.</span><span style="color:#50FA7B;">_v</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&quot;</span><span style="color:#E9F284;"> &quot;</span><span style="color:#F8F8F2;">),</span></span>
<span class="line"><span style="color:#50FA7B;">      _c</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">router-link</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">, { attrs</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> { to</span><span style="color:#FF79C6;">:</span><span style="color:#E9F284;"> &quot;</span><span style="color:#F1FA8C;">/about</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;"> } }, [_vm.</span><span style="color:#50FA7B;">_v</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">About</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">)]),</span></span>
<span class="line"><span style="color:#F8F8F2;">      _vm.</span><span style="color:#50FA7B;">_v</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&quot;</span><span style="color:#E9F284;"> &quot;</span><span style="color:#F8F8F2;">),</span></span>
<span class="line"><span style="color:#50FA7B;">      _c</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">KeepAlive</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">, [</span><span style="color:#50FA7B;">_c</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">router-view</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">)], </span><span style="color:#BD93F9;">1</span><span style="color:#F8F8F2;">),</span></span>
<span class="line"><span style="color:#F8F8F2;">      _vm.</span><span style="color:#50FA7B;">_v</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&quot;</span><span style="color:#E9F284;"> &quot;</span><span style="color:#F8F8F2;">),</span></span>
<span class="line"><span style="color:#50FA7B;">      _c</span><span style="color:#F8F8F2;">(</span></span>
<span class="line"><span style="color:#E9F284;">        &quot;</span><span style="color:#F1FA8C;">button</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">        {</span></span>
<span class="line"><span style="color:#F8F8F2;">          on</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#50FA7B;">            click</span><span style="color:#FF79C6;">:</span><span style="color:#FF79C6;"> function</span><span style="color:#F8F8F2;"> (</span><span style="color:#FFB86C;font-style:italic;">$event</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">              _vm.num </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> _vm.num </span><span style="color:#FF79C6;">+</span><span style="color:#BD93F9;"> 1</span></span>
<span class="line"><span style="color:#F8F8F2;">            },</span></span>
<span class="line"><span style="color:#F8F8F2;">          },</span></span>
<span class="line"><span style="color:#F8F8F2;">        },</span></span>
<span class="line"><span style="color:#F8F8F2;">        [_vm.</span><span style="color:#50FA7B;">_v</span><span style="color:#F8F8F2;">(_vm.</span><span style="color:#50FA7B;">_s</span><span style="color:#F8F8F2;">(_vm.num))]</span></span>
<span class="line"><span style="color:#F8F8F2;">      ),</span></span>
<span class="line"><span style="color:#F8F8F2;">    ],</span></span>
<span class="line"><span style="color:#BD93F9;">    1</span></span>
<span class="line"><span style="color:#F8F8F2;">  )</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><figure><img src="`+t+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">export</span><span style="color:#FF79C6;"> function</span><span style="color:#50FA7B;"> createElement</span><span style="color:#F8F8F2;">(</span></span>
<span class="line"><span style="color:#FFB86C;font-style:italic;">  context</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> Component</span><span style="color:#F8F8F2;">, </span><span style="color:#6272A4;">//context 表示 VNode 的上下文环境</span></span>
<span class="line"><span style="color:#FFB86C;font-style:italic;">  tag</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> any</span><span style="color:#F8F8F2;">, </span><span style="color:#6272A4;">//tag 表示标签，它可以是一个字符串，也可以是一个 Component</span></span>
<span class="line"><span style="color:#FFB86C;font-style:italic;">  data</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> any</span><span style="color:#F8F8F2;">,</span><span style="color:#6272A4;">//data 表示 VNode 的数据，它是一个 VNodeData 类型</span></span>
<span class="line"><span style="color:#FFB86C;font-style:italic;">  children</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> any</span><span style="color:#F8F8F2;">,</span><span style="color:#6272A4;">//children 表示当前 VNode 的子节点，它是任意类型的</span></span>
<span class="line"><span style="color:#FFB86C;font-style:italic;">  normalizationType</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> any</span><span style="color:#F8F8F2;">, </span><span style="color:#6272A4;">//normalizationType 表示子节点规范的类型，类型不同规范的方法也就不一样</span></span>
<span class="line"><span style="color:#FFB86C;font-style:italic;">  alwaysNormalize</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> boolean</span></span>
<span class="line"><span style="color:#F8F8F2;">)</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> VNode</span><span style="color:#FF79C6;"> |</span><span style="color:#8BE9FD;font-style:italic;"> Array</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#FFB86C;font-style:italic;">VNode</span><span style="color:#F8F8F2;">&gt; {</span></span>
<span class="line"><span style="color:#FF79C6;">  if</span><span style="color:#F8F8F2;"> (</span><span style="color:#50FA7B;">isArray</span><span style="color:#F8F8F2;">(data) </span><span style="color:#FF79C6;">||</span><span style="color:#50FA7B;"> isPrimitive</span><span style="color:#F8F8F2;">(data)) {</span></span>
<span class="line"><span style="color:#F8F8F2;">    normalizationType </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> children;</span></span>
<span class="line"><span style="color:#F8F8F2;">    children </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> data;</span></span>
<span class="line"><span style="color:#F8F8F2;">    data </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> undefined</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#FF79C6;">  if</span><span style="color:#F8F8F2;"> (</span><span style="color:#50FA7B;">isTrue</span><span style="color:#F8F8F2;">(alwaysNormalize)) {</span></span>
<span class="line"><span style="color:#F8F8F2;">    normalizationType </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> ALWAYS_NORMALIZE;</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#FF79C6;">  return</span><span style="color:#50FA7B;"> _createElement</span><span style="color:#F8F8F2;">(context, tag, data, children, normalizationType);</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">export</span><span style="color:#FF79C6;"> function</span><span style="color:#50FA7B;"> _createElement</span><span style="color:#F8F8F2;">(</span></span>
<span class="line"><span style="color:#FFB86C;font-style:italic;">  context</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> Component</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#FFB86C;font-style:italic;">  tag</span><span style="color:#FF79C6;">?:</span><span style="color:#8BE9FD;font-style:italic;"> string</span><span style="color:#FF79C6;"> |</span><span style="color:#8BE9FD;font-style:italic;"> Component</span><span style="color:#FF79C6;"> |</span><span style="color:#8BE9FD;font-style:italic;"> Function</span><span style="color:#FF79C6;"> |</span><span style="color:#8BE9FD;font-style:italic;"> Object</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#FFB86C;font-style:italic;">  data</span><span style="color:#FF79C6;">?:</span><span style="color:#8BE9FD;font-style:italic;"> VNodeData</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#FFB86C;font-style:italic;">  children</span><span style="color:#FF79C6;">?:</span><span style="color:#8BE9FD;font-style:italic;"> any</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#FFB86C;font-style:italic;">  normalizationType</span><span style="color:#FF79C6;">?:</span><span style="color:#8BE9FD;font-style:italic;"> number</span></span>
<span class="line"><span style="color:#F8F8F2;">)</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> VNode</span><span style="color:#FF79C6;"> |</span><span style="color:#8BE9FD;font-style:italic;"> Array</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#FFB86C;font-style:italic;">VNode</span><span style="color:#F8F8F2;">&gt; {</span></span>
<span class="line"><span style="color:#6272A4;">  // object syntax in v-bind</span></span>
<span class="line"><span style="color:#FF79C6;">  if</span><span style="color:#F8F8F2;"> (</span><span style="color:#50FA7B;">isDef</span><span style="color:#F8F8F2;">(data) </span><span style="color:#FF79C6;">&amp;&amp;</span><span style="color:#50FA7B;"> isDef</span><span style="color:#F8F8F2;">(data.is)) {</span></span>
<span class="line"><span style="color:#F8F8F2;">    tag </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> data.is</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#FF79C6;">  if</span><span style="color:#F8F8F2;"> (</span><span style="color:#FF79C6;">!</span><span style="color:#F8F8F2;">tag) {</span></span>
<span class="line"><span style="color:#6272A4;">    // in case of component :is set to falsy value</span></span>
<span class="line"><span style="color:#FF79C6;">    return</span><span style="color:#50FA7B;"> createEmptyVNode</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#6272A4;">  // support single function children as default scoped slot</span></span>
<span class="line"><span style="color:#FF79C6;">  if</span><span style="color:#F8F8F2;"> (</span><span style="color:#50FA7B;">isArray</span><span style="color:#F8F8F2;">(children) </span><span style="color:#FF79C6;">&amp;&amp;</span><span style="color:#50FA7B;"> isFunction</span><span style="color:#F8F8F2;">(children[</span><span style="color:#BD93F9;">0</span><span style="color:#F8F8F2;">])) {</span></span>
<span class="line"><span style="color:#F8F8F2;">    data </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> data </span><span style="color:#FF79C6;">||</span><span style="color:#F8F8F2;"> {}</span></span>
<span class="line"><span style="color:#F8F8F2;">    data.scopedSlots </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> { default</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> children[</span><span style="color:#BD93F9;">0</span><span style="color:#F8F8F2;">] }</span></span>
<span class="line"><span style="color:#F8F8F2;">    children.length </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> 0</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#FF79C6;">  if</span><span style="color:#F8F8F2;"> (normalizationType </span><span style="color:#FF79C6;">===</span><span style="color:#F8F8F2;"> ALWAYS_NORMALIZE) {</span></span>
<span class="line"><span style="color:#6272A4;">    // render 函数是用户手写的</span></span>
<span class="line"><span style="color:#F8F8F2;">    children </span><span style="color:#FF79C6;">=</span><span style="color:#50FA7B;"> normalizeChildren</span><span style="color:#F8F8F2;">(children)</span></span>
<span class="line"><span style="color:#F8F8F2;">  } </span><span style="color:#FF79C6;">else</span><span style="color:#FF79C6;"> if</span><span style="color:#F8F8F2;"> (normalizationType </span><span style="color:#FF79C6;">===</span><span style="color:#F8F8F2;"> SIMPLE_NORMALIZE) {</span></span>
<span class="line"><span style="color:#6272A4;">    // render 函数是编译生成的</span></span>
<span class="line"><span style="color:#F8F8F2;">    children </span><span style="color:#FF79C6;">=</span><span style="color:#50FA7B;"> simpleNormalizeChildren</span><span style="color:#F8F8F2;">(children)</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#FF79C6;">  let</span><span style="color:#F8F8F2;"> vnode, ns</span></span>
<span class="line"><span style="color:#FF79C6;">  if</span><span style="color:#F8F8F2;"> (</span><span style="color:#FF79C6;">typeof</span><span style="color:#F8F8F2;"> tag </span><span style="color:#FF79C6;">===</span><span style="color:#E9F284;"> &#39;</span><span style="color:#F1FA8C;">string</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#FF79C6;">    let</span><span style="color:#F8F8F2;"> Ctor</span></span>
<span class="line"><span style="color:#F8F8F2;">    ns </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> (context.$vnode </span><span style="color:#FF79C6;">&amp;&amp;</span><span style="color:#F8F8F2;"> context.$vnode.ns) </span><span style="color:#FF79C6;">||</span><span style="color:#F8F8F2;"> config.</span><span style="color:#50FA7B;">getTagNamespace</span><span style="color:#F8F8F2;">(tag)</span></span>
<span class="line"><span style="color:#FF79C6;">    if</span><span style="color:#F8F8F2;"> (config.</span><span style="color:#50FA7B;">isReservedTag</span><span style="color:#F8F8F2;">(tag)) {</span></span>
<span class="line"><span style="color:#6272A4;">      // platform built-in elements</span></span>
<span class="line"><span style="color:#F8F8F2;">      vnode </span><span style="color:#FF79C6;">=</span><span style="color:#FF79C6;font-weight:bold;"> new</span><span style="color:#50FA7B;"> VNode</span><span style="color:#F8F8F2;">(</span></span>
<span class="line"><span style="color:#F8F8F2;">        config.</span><span style="color:#50FA7B;">parsePlatformTagName</span><span style="color:#F8F8F2;">(tag),</span></span>
<span class="line"><span style="color:#F8F8F2;">        data,</span></span>
<span class="line"><span style="color:#F8F8F2;">        children,</span></span>
<span class="line"><span style="color:#BD93F9;">        undefined</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#BD93F9;">        undefined</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">        context</span></span>
<span class="line"><span style="color:#F8F8F2;">      )</span></span>
<span class="line"><span style="color:#F8F8F2;">    } </span><span style="color:#FF79C6;">else</span><span style="color:#FF79C6;"> if</span><span style="color:#F8F8F2;"> (</span></span>
<span class="line"><span style="color:#F8F8F2;">      (</span><span style="color:#FF79C6;">!</span><span style="color:#F8F8F2;">data </span><span style="color:#FF79C6;">||</span><span style="color:#FF79C6;"> !</span><span style="color:#F8F8F2;">data.pre) </span><span style="color:#FF79C6;">&amp;&amp;</span></span>
<span class="line"><span style="color:#50FA7B;">      isDef</span><span style="color:#F8F8F2;">((Ctor </span><span style="color:#FF79C6;">=</span><span style="color:#50FA7B;"> resolveAsset</span><span style="color:#F8F8F2;">(context.$options, </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">components</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, tag)))</span></span>
<span class="line"><span style="color:#F8F8F2;">    ) {</span></span>
<span class="line"><span style="color:#6272A4;">      // tag 一个 Component 类型，则直接调用 createComponent 创建一个组件类型的 VNode 节点</span></span>
<span class="line"><span style="color:#6272A4;">      // component</span></span>
<span class="line"><span style="color:#F8F8F2;">      vnode </span><span style="color:#FF79C6;">=</span><span style="color:#50FA7B;"> createComponent</span><span style="color:#F8F8F2;">(Ctor, data, context, children, tag)</span></span>
<span class="line"><span style="color:#F8F8F2;">    } </span><span style="color:#FF79C6;">else</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#6272A4;">      // unknown or unlisted namespaced elements</span></span>
<span class="line"><span style="color:#6272A4;">      // check at runtime because it may get assigned a namespace when its</span></span>
<span class="line"><span style="color:#6272A4;">      // parent normalizes children</span></span>
<span class="line"><span style="color:#6272A4;">      // 如果是内置的一些节点，则直接创建一个普通 VNode</span></span>
<span class="line"><span style="color:#F8F8F2;">      vnode </span><span style="color:#FF79C6;">=</span><span style="color:#FF79C6;font-weight:bold;"> new</span><span style="color:#50FA7B;"> VNode</span><span style="color:#F8F8F2;">(tag, data, children, </span><span style="color:#BD93F9;">undefined</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">undefined</span><span style="color:#F8F8F2;">, context)</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">  } </span><span style="color:#FF79C6;">else</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#6272A4;">    // direct component options / constructor</span></span>
<span class="line"><span style="color:#F8F8F2;">    vnode </span><span style="color:#FF79C6;">=</span><span style="color:#50FA7B;"> createComponent</span><span style="color:#F8F8F2;">(tag </span><span style="color:#FF79C6;">as</span><span style="color:#8BE9FD;font-style:italic;"> any</span><span style="color:#F8F8F2;">, data, context, children)</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#FF79C6;">  if</span><span style="color:#F8F8F2;"> (</span><span style="color:#50FA7B;">isArray</span><span style="color:#F8F8F2;">(vnode)) {</span></span>
<span class="line"><span style="color:#FF79C6;">    return</span><span style="color:#F8F8F2;"> vnode</span></span>
<span class="line"><span style="color:#F8F8F2;">  } </span><span style="color:#FF79C6;">else</span><span style="color:#FF79C6;"> if</span><span style="color:#F8F8F2;"> (</span><span style="color:#50FA7B;">isDef</span><span style="color:#F8F8F2;">(vnode)) {</span></span>
<span class="line"><span style="color:#FF79C6;">    if</span><span style="color:#F8F8F2;"> (</span><span style="color:#50FA7B;">isDef</span><span style="color:#F8F8F2;">(ns)) </span><span style="color:#50FA7B;">applyNS</span><span style="color:#F8F8F2;">(vnode, ns)</span></span>
<span class="line"><span style="color:#FF79C6;">    if</span><span style="color:#F8F8F2;"> (</span><span style="color:#50FA7B;">isDef</span><span style="color:#F8F8F2;">(data)) </span><span style="color:#50FA7B;">registerDeepBindings</span><span style="color:#F8F8F2;">(data)</span></span>
<span class="line"><span style="color:#FF79C6;">    return</span><span style="color:#F8F8F2;"> vnode</span></span>
<span class="line"><span style="color:#F8F8F2;">  } </span><span style="color:#FF79C6;">else</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#FF79C6;">    return</span><span style="color:#50FA7B;"> createEmptyVNode</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="createcomponent" tabindex="-1"><a class="header-anchor" href="#createcomponent"><span>createComponent</span></a></h3><p>节点是组件</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">export</span><span style="color:#FF79C6;"> function</span><span style="color:#50FA7B;"> createComponent</span><span style="color:#F8F8F2;">(</span></span>
<span class="line"><span style="color:#FFB86C;font-style:italic;">  Ctor</span><span style="color:#FF79C6;">:</span><span style="color:#FF79C6;"> typeof</span><span style="color:#F8F8F2;"> Component </span><span style="color:#FF79C6;">|</span><span style="color:#8BE9FD;font-style:italic;"> Function</span><span style="color:#FF79C6;"> |</span><span style="color:#8BE9FD;font-style:italic;"> ComponentOptions</span><span style="color:#FF79C6;"> |</span><span style="color:#8BE9FD;font-style:italic;"> void</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#FFB86C;font-style:italic;">  data</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> VNodeData</span><span style="color:#FF79C6;"> |</span><span style="color:#8BE9FD;font-style:italic;"> undefined</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#FFB86C;font-style:italic;">  context</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> Component</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#FFB86C;font-style:italic;">  children</span><span style="color:#FF79C6;">?:</span><span style="color:#8BE9FD;font-style:italic;"> Array</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#FFB86C;font-style:italic;">VNode</span><span style="color:#F8F8F2;">&gt;,</span></span>
<span class="line"><span style="color:#FFB86C;font-style:italic;">  tag</span><span style="color:#FF79C6;">?:</span><span style="color:#8BE9FD;font-style:italic;"> string</span></span>
<span class="line"><span style="color:#F8F8F2;">)</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> VNode</span><span style="color:#FF79C6;"> |</span><span style="color:#8BE9FD;font-style:italic;"> Array</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#FFB86C;font-style:italic;">VNode</span><span style="color:#F8F8F2;">&gt; </span><span style="color:#FF79C6;">|</span><span style="color:#8BE9FD;font-style:italic;"> void</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#FF79C6;">  if</span><span style="color:#F8F8F2;"> (</span><span style="color:#50FA7B;">isUndef</span><span style="color:#F8F8F2;">(Ctor)) {</span></span>
<span class="line"><span style="color:#FF79C6;">    return</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#6272A4;">  // Vue.options._base = Vue</span></span>
<span class="line"><span style="color:#FF79C6;">  const</span><span style="color:#F8F8F2;"> baseCtor </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> context.$options._base</span></span>
<span class="line"><span style="color:#6272A4;">  // plain options object: turn it into a constructor</span></span>
<span class="line"><span style="color:#FF79C6;">  if</span><span style="color:#F8F8F2;"> (</span><span style="color:#50FA7B;">isObject</span><span style="color:#F8F8F2;">(Ctor)) {</span></span>
<span class="line"><span style="color:#F8F8F2;">    Ctor </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> baseCtor.</span><span style="color:#50FA7B;">extend</span><span style="color:#F8F8F2;">(Ctor </span><span style="color:#FF79C6;">as</span><span style="color:#FF79C6;"> typeof</span><span style="color:#F8F8F2;"> Component)</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#FF79C6;">  if</span><span style="color:#F8F8F2;"> (</span><span style="color:#FF79C6;">typeof</span><span style="color:#F8F8F2;"> Ctor </span><span style="color:#FF79C6;">!==</span><span style="color:#E9F284;"> &#39;</span><span style="color:#F1FA8C;">function</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#FF79C6;">    if</span><span style="color:#F8F8F2;"> (__DEV__) {</span></span>
<span class="line"><span style="color:#50FA7B;">      warn</span><span style="color:#F8F8F2;">(</span><span style="color:#F1FA8C;">\`Invalid Component definition: </span><span style="color:#FF79C6;">\${</span><span style="color:#50FA7B;">String</span><span style="color:#F8F8F2;">(Ctor)</span><span style="color:#FF79C6;">}</span><span style="color:#F1FA8C;">\`</span><span style="color:#F8F8F2;">, context)</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#FF79C6;">    return</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#FF79C6;">  let</span><span style="color:#F8F8F2;"> asyncFactory</span></span>
<span class="line"><span style="color:#6272A4;">  // @ts-expect-error</span></span>
<span class="line"><span style="color:#FF79C6;">  if</span><span style="color:#F8F8F2;"> (</span><span style="color:#50FA7B;">isUndef</span><span style="color:#F8F8F2;">(Ctor.cid)) {</span></span>
<span class="line"><span style="color:#F8F8F2;">    asyncFactory </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> Ctor</span></span>
<span class="line"><span style="color:#F8F8F2;">    Ctor </span><span style="color:#FF79C6;">=</span><span style="color:#50FA7B;"> resolveAsyncComponent</span><span style="color:#F8F8F2;">(asyncFactory, baseCtor)</span></span>
<span class="line"><span style="color:#FF79C6;">    if</span><span style="color:#F8F8F2;"> (Ctor </span><span style="color:#FF79C6;">===</span><span style="color:#BD93F9;"> undefined</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#FF79C6;">      return</span><span style="color:#50FA7B;"> createAsyncPlaceholder</span><span style="color:#F8F8F2;">(asyncFactory, data, context, children, tag)</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">  data </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> data </span><span style="color:#FF79C6;">||</span><span style="color:#F8F8F2;"> {}</span></span>
<span class="line"><span style="color:#6272A4;">  //  合并 options, 就是把自定义的 options 和 默认的 \`options\` 合并</span></span>
<span class="line"><span style="color:#50FA7B;">  resolveConstructorOptions</span><span style="color:#F8F8F2;">(Ctor </span><span style="color:#FF79C6;">as</span><span style="color:#FF79C6;"> typeof</span><span style="color:#F8F8F2;"> Component)</span></span>
<span class="line"><span style="color:#FF79C6;">  if</span><span style="color:#F8F8F2;"> (</span><span style="color:#50FA7B;">isDef</span><span style="color:#F8F8F2;">(data.model)) {</span></span>
<span class="line"><span style="color:#6272A4;">    // @ts-expect-error</span></span>
<span class="line"><span style="color:#50FA7B;">    transformModel</span><span style="color:#F8F8F2;">(Ctor.options, data)</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#6272A4;">  // extract props</span></span>
<span class="line"><span style="color:#6272A4;">  // @ts-expect-error</span></span>
<span class="line"><span style="color:#FF79C6;">  const</span><span style="color:#F8F8F2;"> propsData </span><span style="color:#FF79C6;">=</span><span style="color:#50FA7B;"> extractPropsFromVNodeData</span><span style="color:#F8F8F2;">(data, Ctor, tag)</span></span>
<span class="line"><span style="color:#6272A4;">  // functional component</span></span>
<span class="line"><span style="color:#6272A4;">  // @ts-expect-error</span></span>
<span class="line"><span style="color:#FF79C6;">  if</span><span style="color:#F8F8F2;"> (</span><span style="color:#50FA7B;">isTrue</span><span style="color:#F8F8F2;">(Ctor.options.functional)) {</span></span>
<span class="line"><span style="color:#FF79C6;">    return</span><span style="color:#50FA7B;"> createFunctionalComponent</span><span style="color:#F8F8F2;">(</span></span>
<span class="line"><span style="color:#F8F8F2;">      Ctor </span><span style="color:#FF79C6;">as</span><span style="color:#FF79C6;"> typeof</span><span style="color:#F8F8F2;"> Component,</span></span>
<span class="line"><span style="color:#F8F8F2;">      propsData,</span></span>
<span class="line"><span style="color:#F8F8F2;">      data,</span></span>
<span class="line"><span style="color:#F8F8F2;">      context,</span></span>
<span class="line"><span style="color:#F8F8F2;">      children</span></span>
<span class="line"><span style="color:#F8F8F2;">    )</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#6272A4;">  // extract listeners, since these needs to be treated as</span></span>
<span class="line"><span style="color:#6272A4;">  // child component listeners instead of DOM listeners</span></span>
<span class="line"><span style="color:#FF79C6;">  const</span><span style="color:#F8F8F2;"> listeners </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> data.on</span></span>
<span class="line"><span style="color:#6272A4;">  // replace with listeners with .native modifier</span></span>
<span class="line"><span style="color:#6272A4;">  // so it gets processed during parent component patch.</span></span>
<span class="line"><span style="color:#F8F8F2;">  data.on </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> data.nativeOn</span></span>
<span class="line"><span style="color:#6272A4;">  // @ts-expect-error</span></span>
<span class="line"><span style="color:#FF79C6;">  if</span><span style="color:#F8F8F2;"> (</span><span style="color:#50FA7B;">isTrue</span><span style="color:#F8F8F2;">(Ctor.options.abstract)) {</span></span>
<span class="line"><span style="color:#6272A4;">    // abstract components do not keep anything</span></span>
<span class="line"><span style="color:#6272A4;">    // other than props &amp; listeners &amp; slot</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">    // work around flow</span></span>
<span class="line"><span style="color:#FF79C6;">    const</span><span style="color:#F8F8F2;"> slot </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> data.slot</span></span>
<span class="line"><span style="color:#F8F8F2;">    data </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> {}</span></span>
<span class="line"><span style="color:#FF79C6;">    if</span><span style="color:#F8F8F2;"> (slot) {</span></span>
<span class="line"><span style="color:#F8F8F2;">      data.slot </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> slot</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#6272A4;">  // 安装组件钩子函数</span></span>
<span class="line"><span style="color:#6272A4;">  // install component management hooks onto the placeholder node</span></span>
<span class="line"><span style="color:#50FA7B;">  installComponentHooks</span><span style="color:#F8F8F2;">(data)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">  // return a placeholder vnode</span></span>
<span class="line"><span style="color:#6272A4;">  // @ts-expect-error</span></span>
<span class="line"><span style="color:#FF79C6;">  const</span><span style="color:#F8F8F2;"> name </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> Ctor.options.name </span><span style="color:#FF79C6;">||</span><span style="color:#F8F8F2;"> tag</span></span>
<span class="line"><span style="color:#FF79C6;">  const</span><span style="color:#F8F8F2;"> vnode </span><span style="color:#FF79C6;">=</span><span style="color:#FF79C6;font-weight:bold;"> new</span><span style="color:#50FA7B;"> VNode</span><span style="color:#F8F8F2;">(</span></span>
<span class="line"><span style="color:#6272A4;">    // @ts-expect-error</span></span>
<span class="line"><span style="color:#F1FA8C;">    \`vue-component-</span><span style="color:#FF79C6;">\${</span><span style="color:#F8F8F2;">Ctor.cid</span><span style="color:#FF79C6;">}\${</span><span style="color:#F8F8F2;">name</span><span style="color:#FF79C6;"> ?</span><span style="color:#F1FA8C;"> \`-</span><span style="color:#FF79C6;">\${</span><span style="color:#F8F8F2;">name</span><span style="color:#FF79C6;">}</span><span style="color:#F1FA8C;">\`</span><span style="color:#FF79C6;"> :</span><span style="color:#E9F284;"> &#39;&#39;</span><span style="color:#FF79C6;">}</span><span style="color:#F1FA8C;">\`</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">    data,</span></span>
<span class="line"><span style="color:#BD93F9;">    undefined</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#BD93F9;">    undefined</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#BD93F9;">    undefined</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">    context,</span></span>
<span class="line"><span style="color:#6272A4;">    // @ts-expect-error</span></span>
<span class="line"><span style="color:#F8F8F2;">    { Ctor, propsData, listeners, tag, children },</span></span>
<span class="line"><span style="color:#F8F8F2;">    asyncFactory</span></span>
<span class="line"><span style="color:#F8F8F2;">  )</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">  return</span><span style="color:#F8F8F2;"> vnode</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="update" tabindex="-1"><a class="header-anchor" href="#update"><span>_update</span></a></h3><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> vnode </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> vm.</span><span style="color:#50FA7B;">_render</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#F8F8F2;">vm.</span><span style="color:#50FA7B;">_update</span><span style="color:#F8F8F2;">(vnode, hydrating);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><details class="hint-container details"><summary>vnode</summary><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></details><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#6272A4;">/*</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">mountComponent(vm,el) vm.$el = el</span></span>
<span class="line"><span style="color:#6272A4;">*/</span></span>
<span class="line"></span>
<span class="line"><span style="color:#8BE9FD;font-style:italic;">Vue</span><span style="color:#F8F8F2;">.prototype.</span><span style="color:#50FA7B;">_update</span><span style="color:#FF79C6;"> =</span><span style="color:#FF79C6;"> function</span><span style="color:#F8F8F2;"> (</span><span style="color:#FFB86C;font-style:italic;">vnode</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> VNode</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">hydrating</span><span style="color:#FF79C6;">?:</span><span style="color:#8BE9FD;font-style:italic;"> boolean</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#FF79C6;">  const</span><span style="color:#F8F8F2;"> vm</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> Component</span><span style="color:#FF79C6;"> =</span><span style="color:#BD93F9;font-style:italic;"> this</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#FF79C6;">  const</span><span style="color:#F8F8F2;"> prevEl </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> vm.$el;</span></span>
<span class="line"><span style="color:#FF79C6;">  const</span><span style="color:#F8F8F2;"> prevVnode </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> vm._vnode;</span></span>
<span class="line"><span style="color:#FF79C6;">  const</span><span style="color:#F8F8F2;"> restoreActiveInstance </span><span style="color:#FF79C6;">=</span><span style="color:#50FA7B;"> setActiveInstance</span><span style="color:#F8F8F2;">(vm);</span></span>
<span class="line"><span style="color:#F8F8F2;">  vm._vnode </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> vnode;</span></span>
<span class="line"><span style="color:#6272A4;">  // Vue.prototype.__patch__ is injected in entry points</span></span>
<span class="line"><span style="color:#6272A4;">  // based on the rendering backend used.</span></span>
<span class="line"><span style="color:#FF79C6;">  if</span><span style="color:#F8F8F2;"> (</span><span style="color:#FF79C6;">!</span><span style="color:#F8F8F2;">prevVnode) {</span></span>
<span class="line"><span style="color:#6272A4;">    // initial render</span></span>
<span class="line"><span style="color:#F8F8F2;">    vm.$el </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> vm.</span><span style="color:#50FA7B;">__patch__</span><span style="color:#F8F8F2;">(vm.$el, vnode, hydrating, </span><span style="color:#BD93F9;">false</span><span style="color:#6272A4;"> /* removeOnly */</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">  } </span><span style="color:#FF79C6;">else</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#6272A4;">    // updates</span></span>
<span class="line"><span style="color:#F8F8F2;">    vm.$el </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> vm.</span><span style="color:#50FA7B;">__patch__</span><span style="color:#F8F8F2;">(prevVnode, vnode);</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#50FA7B;">  restoreActiveInstance</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#6272A4;">  // update __vue__ reference</span></span>
<span class="line"><span style="color:#FF79C6;">  if</span><span style="color:#F8F8F2;"> (prevEl) {</span></span>
<span class="line"><span style="color:#F8F8F2;">    prevEl.__vue__ </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> null</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#FF79C6;">  if</span><span style="color:#F8F8F2;"> (vm.$el) {</span></span>
<span class="line"><span style="color:#F8F8F2;">    vm.$el.__vue__ </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> vm;</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#6272A4;">  // if parent is an HOC, update its $el as well</span></span>
<span class="line"><span style="color:#FF79C6;">  if</span><span style="color:#F8F8F2;"> (vm.$vnode </span><span style="color:#FF79C6;">&amp;&amp;</span><span style="color:#F8F8F2;"> vm.$parent </span><span style="color:#FF79C6;">&amp;&amp;</span><span style="color:#F8F8F2;"> vm.$vnode </span><span style="color:#FF79C6;">===</span><span style="color:#F8F8F2;"> vm.$parent._vnode) {</span></span>
<span class="line"><span style="color:#F8F8F2;">    vm.$parent.$el </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> vm.$el;</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#6272A4;">  // updated hook is called by the scheduler to ensure that children are</span></span>
<span class="line"><span style="color:#6272A4;">  // updated in a parent&#39;s updated hook.</span></span>
<span class="line"><span style="color:#F8F8F2;">};</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="createpathfunction" tabindex="-1"><a class="header-anchor" href="#createpathfunction"><span>createPathFunction</span></a></h2><p>DOM-Diff 过程叫做 patch 过程。patch,意为“补丁”，即指对旧的 VNode 修补，打补丁从而得到新的 VNode</p><ul><li>创建节点：新的 VNode 中有而旧的 oldVNode 中没有，就在旧的 oldVNode 中创建。</li><li>删除节点：新的 VNode 中没有而旧的 oldVNode 中有，就从旧的 oldVNode 中删除。</li><li>更新节点：新的 VNode 和旧的 oldVNode 中都有，就以新的 VNode 为准，更新旧的 oldVNode。</li></ul><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#8BE9FD;font-style:italic;">Vue</span><span style="color:#F8F8F2;">.prototype.__patch__ </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> inBrowser </span><span style="color:#FF79C6;">?</span><span style="color:#F8F8F2;"> patch </span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> noop;</span></span>
<span class="line"><span style="color:#FF79C6;">export</span><span style="color:#FF79C6;"> const</span><span style="color:#50FA7B;"> patch</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> Function</span><span style="color:#FF79C6;"> =</span><span style="color:#50FA7B;"> createPatchFunction</span><span style="color:#F8F8F2;">({ nodeOps, modules });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">export</span><span style="color:#FF79C6;"> function</span><span style="color:#50FA7B;"> createPathFunction</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">backend</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#FF79C6;">  const</span><span style="color:#F8F8F2;"> { tag, data, children } </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> vnode;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">  return</span><span style="color:#FF79C6;"> function</span><span style="color:#50FA7B;"> patch</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">oldVnode</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">vnode</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">hydrating</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">removeOnly</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#6272A4;">    // ....</span></span>
<span class="line"><span style="color:#F8F8F2;">  };</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="path" tabindex="-1"><a class="header-anchor" href="#path"><span>path</span></a></h3><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">export</span><span style="color:#FF79C6;"> function</span><span style="color:#50FA7B;"> isUndef</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">v</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> any</span><span style="color:#F8F8F2;">)</span><span style="color:#FF79C6;">:</span><span style="color:#FFB86C;font-style:italic;"> v</span><span style="color:#FF79C6;"> is</span><span style="color:#8BE9FD;font-style:italic;"> undefined</span><span style="color:#FF79C6;"> |</span><span style="color:#8BE9FD;font-style:italic;"> null</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#FF79C6;">  return</span><span style="color:#F8F8F2;"> v </span><span style="color:#FF79C6;">===</span><span style="color:#BD93F9;"> undefined</span><span style="color:#FF79C6;"> ||</span><span style="color:#F8F8F2;"> v </span><span style="color:#FF79C6;">===</span><span style="color:#BD93F9;"> null</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">export</span><span style="color:#FF79C6;"> function</span><span style="color:#50FA7B;"> isDef</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#FFB86C;font-style:italic;">T</span><span style="color:#F8F8F2;">&gt;(</span><span style="color:#FFB86C;font-style:italic;">v</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> T</span><span style="color:#F8F8F2;">)</span><span style="color:#FF79C6;">:</span><span style="color:#FFB86C;font-style:italic;"> v</span><span style="color:#FF79C6;"> is</span><span style="color:#8BE9FD;font-style:italic;"> NonNullable</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#FFB86C;font-style:italic;">T</span><span style="color:#F8F8F2;">&gt; {</span></span>
<span class="line"><span style="color:#FF79C6;">  return</span><span style="color:#F8F8F2;"> v </span><span style="color:#FF79C6;">!==</span><span style="color:#BD93F9;"> undefined</span><span style="color:#FF79C6;"> &amp;&amp;</span><span style="color:#F8F8F2;"> v </span><span style="color:#FF79C6;">!==</span><span style="color:#BD93F9;"> null</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">export</span><span style="color:#FF79C6;"> function</span><span style="color:#50FA7B;"> isTrue</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">v</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> any</span><span style="color:#F8F8F2;">)</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> boolean</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#FF79C6;">  return</span><span style="color:#F8F8F2;"> v </span><span style="color:#FF79C6;">===</span><span style="color:#BD93F9;"> true</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">export</span><span style="color:#FF79C6;"> function</span><span style="color:#50FA7B;"> isFalse</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">v</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> any</span><span style="color:#F8F8F2;">)</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> boolean</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#FF79C6;">  return</span><span style="color:#F8F8F2;"> v </span><span style="color:#FF79C6;">===</span><span style="color:#BD93F9;"> false</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#FF79C6;">return</span><span style="color:#FF79C6;"> function</span><span style="color:#50FA7B;"> patch</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">oldVnode</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">vnode</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">hydrating</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">removeOnly</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#6272A4;">  // 如果新节点不存在，老节点存在，则调用 destroy，销毁老节点</span></span>
<span class="line"><span style="color:#FF79C6;">  if</span><span style="color:#F8F8F2;"> (</span><span style="color:#50FA7B;">isUndef</span><span style="color:#F8F8F2;">(vnode)) {</span></span>
<span class="line"><span style="color:#FF79C6;">    if</span><span style="color:#F8F8F2;"> (</span><span style="color:#50FA7B;">isDef</span><span style="color:#F8F8F2;">(oldVnode)) </span><span style="color:#50FA7B;">invokeDestroyHook</span><span style="color:#F8F8F2;">(oldVnode);</span></span>
<span class="line"><span style="color:#FF79C6;">    return</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">  let</span><span style="color:#F8F8F2;"> isInitialPatch </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> false</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#FF79C6;">  const</span><span style="color:#F8F8F2;"> insertedVnodeQueue</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> any</span><span style="color:#F8F8F2;">[] </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> [];</span></span>
<span class="line"><span style="color:#6272A4;">   // 新的 VNode 存在，老的 VNode 不存在，这种情况会在一个组件初次渲染的时候出现</span></span>
<span class="line"><span style="color:#FF79C6;">  if</span><span style="color:#F8F8F2;"> (</span><span style="color:#50FA7B;">isUndef</span><span style="color:#F8F8F2;">(oldVnode)) {</span></span>
<span class="line"><span style="color:#6272A4;">    // empty mount (likely as component), create new root element</span></span>
<span class="line"><span style="color:#F8F8F2;">    isInitialPatch </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> true</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#50FA7B;">    createElm</span><span style="color:#F8F8F2;">(vnode, insertedVnodeQueue);</span></span>
<span class="line"><span style="color:#F8F8F2;">  } </span><span style="color:#FF79C6;">else</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#6272A4;">    // 判断 oldVnode 是否为真实元素</span></span>
<span class="line"><span style="color:#FF79C6;">    const</span><span style="color:#F8F8F2;"> isRealElement </span><span style="color:#FF79C6;">=</span><span style="color:#50FA7B;"> isDef</span><span style="color:#F8F8F2;">(oldVnode.nodeType);</span></span>
<span class="line"><span style="color:#FF79C6;">    if</span><span style="color:#F8F8F2;"> (</span><span style="color:#FF79C6;">!</span><span style="color:#F8F8F2;">isRealElement </span><span style="color:#FF79C6;">&amp;&amp;</span><span style="color:#50FA7B;"> sameVnode</span><span style="color:#F8F8F2;">(oldVnode, vnode)) {</span></span>
<span class="line"><span style="color:#6272A4;">       // 不是真实元素，但是老节点和新节点是同一个节点，则是更新阶段，执行 patch 更新节点</span></span>
<span class="line"><span style="color:#50FA7B;">      patchVnode</span><span style="color:#F8F8F2;">(oldVnode, vnode, insertedVnodeQueue, </span><span style="color:#BD93F9;">null</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">null</span><span style="color:#F8F8F2;">, removeOnly);</span></span>
<span class="line"><span style="color:#F8F8F2;">    } </span><span style="color:#FF79C6;">else</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#6272A4;">      // 是真实元素，则表示初次渲染</span></span>
<span class="line"><span style="color:#FF79C6;">      if</span><span style="color:#F8F8F2;"> (isRealElement) {</span></span>
<span class="line"><span style="color:#6272A4;">        // mounting to a real element</span></span>
<span class="line"><span style="color:#6272A4;">        // check if this is server-rendered content and if we can perform</span></span>
<span class="line"><span style="color:#6272A4;">        // a successful hydration.</span></span>
<span class="line"><span style="color:#FF79C6;">        if</span><span style="color:#F8F8F2;"> (oldVnode.nodeType </span><span style="color:#FF79C6;">===</span><span style="color:#BD93F9;"> 1</span><span style="color:#FF79C6;"> &amp;&amp;</span><span style="color:#F8F8F2;"> oldVnode.</span><span style="color:#50FA7B;">hasAttribute</span><span style="color:#F8F8F2;">(SSR_ATTR)) {</span></span>
<span class="line"><span style="color:#F8F8F2;">          oldVnode.</span><span style="color:#50FA7B;">removeAttribute</span><span style="color:#F8F8F2;">(SSR_ATTR);</span></span>
<span class="line"><span style="color:#F8F8F2;">          hydrating </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> true</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">        }</span></span>
<span class="line"><span style="color:#FF79C6;">        if</span><span style="color:#F8F8F2;"> (</span><span style="color:#50FA7B;">isTrue</span><span style="color:#F8F8F2;">(hydrating)) {</span></span>
<span class="line"><span style="color:#FF79C6;">          if</span><span style="color:#F8F8F2;"> (</span><span style="color:#50FA7B;">hydrate</span><span style="color:#F8F8F2;">(oldVnode, vnode, insertedVnodeQueue)) {</span></span>
<span class="line"><span style="color:#50FA7B;">            invokeInsertHook</span><span style="color:#F8F8F2;">(vnode, insertedVnodeQueue, </span><span style="color:#BD93F9;">true</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#FF79C6;">            return</span><span style="color:#F8F8F2;"> oldVnode;</span></span>
<span class="line"><span style="color:#F8F8F2;">          } </span><span style="color:#FF79C6;">else</span><span style="color:#FF79C6;"> if</span><span style="color:#F8F8F2;"> (__DEV__) {</span></span>
<span class="line"><span style="color:#50FA7B;">            warn</span><span style="color:#F8F8F2;">(</span></span>
<span class="line"><span style="color:#E9F284;">              &quot;</span><span style="color:#F1FA8C;">The client-side rendered virtual DOM tree is not matching </span><span style="color:#E9F284;">&quot;</span><span style="color:#FF79C6;"> +</span></span>
<span class="line"><span style="color:#E9F284;">                &quot;</span><span style="color:#F1FA8C;">server-rendered content. This is likely caused by incorrect </span><span style="color:#E9F284;">&quot;</span><span style="color:#FF79C6;"> +</span></span>
<span class="line"><span style="color:#E9F284;">                &quot;</span><span style="color:#F1FA8C;">HTML markup, for example nesting block-level elements inside </span><span style="color:#E9F284;">&quot;</span><span style="color:#FF79C6;"> +</span></span>
<span class="line"><span style="color:#E9F284;">                &quot;</span><span style="color:#F1FA8C;">&lt;p&gt;, or missing &lt;tbody&gt;. Bailing hydration and performing </span><span style="color:#E9F284;">&quot;</span><span style="color:#FF79C6;"> +</span></span>
<span class="line"><span style="color:#E9F284;">                &quot;</span><span style="color:#F1FA8C;">full client-side render.</span><span style="color:#E9F284;">&quot;</span></span>
<span class="line"><span style="color:#F8F8F2;">            );</span></span>
<span class="line"><span style="color:#F8F8F2;">          }</span></span>
<span class="line"><span style="color:#F8F8F2;">        }</span></span>
<span class="line"><span style="color:#6272A4;">        // 走到这儿说明不是服务端渲染，或者 hydration 失败，则根据 oldVnode 创建一个 vnode 节点</span></span>
<span class="line"><span style="color:#6272A4;">        // either not server-rendered, or hydration failed.</span></span>
<span class="line"><span style="color:#6272A4;">        // create an empty node and replace it</span></span>
<span class="line"><span style="color:#F8F8F2;">        oldVnode </span><span style="color:#FF79C6;">=</span><span style="color:#50FA7B;"> emptyNodeAt</span><span style="color:#F8F8F2;">(oldVnode);</span></span>
<span class="line"><span style="color:#F8F8F2;">      }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">       // 拿到老节点的真实元素</span></span>
<span class="line"><span style="color:#FF79C6;">      const</span><span style="color:#F8F8F2;"> oldElm </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> oldVnode.elm;</span></span>
<span class="line"><span style="color:#6272A4;">       // 获取老节点的父元素，即 body</span></span>
<span class="line"><span style="color:#FF79C6;">      const</span><span style="color:#F8F8F2;"> parentElm </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> nodeOps.</span><span style="color:#50FA7B;">parentNode</span><span style="color:#F8F8F2;">(oldElm);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">      // 基于新 vnode 创建整棵 DOM 树并插入到 body 元素下</span></span>
<span class="line"><span style="color:#50FA7B;">      createElm</span><span style="color:#F8F8F2;">(</span></span>
<span class="line"><span style="color:#F8F8F2;">        vnode,</span></span>
<span class="line"><span style="color:#F8F8F2;">        insertedVnodeQueue,</span></span>
<span class="line"><span style="color:#6272A4;">        // extremely rare edge case: do not insert if old element is in a</span></span>
<span class="line"><span style="color:#6272A4;">        // leaving transition. Only happens when combining transition +</span></span>
<span class="line"><span style="color:#6272A4;">        // keep-alive + HOCs. (#4590)</span></span>
<span class="line"><span style="color:#F8F8F2;">        oldElm._leaveCb </span><span style="color:#FF79C6;">?</span><span style="color:#BD93F9;"> null</span><span style="color:#FF79C6;"> :</span><span style="color:#F8F8F2;"> parentElm,</span></span>
<span class="line"><span style="color:#F8F8F2;">        nodeOps.</span><span style="color:#50FA7B;">nextSibling</span><span style="color:#F8F8F2;">(oldElm)</span></span>
<span class="line"><span style="color:#F8F8F2;">      );</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">     // 递归更新父占位符节点元素</span></span>
<span class="line"><span style="color:#FF79C6;">      if</span><span style="color:#F8F8F2;"> (</span><span style="color:#50FA7B;">isDef</span><span style="color:#F8F8F2;">(vnode.parent)) {</span></span>
<span class="line"><span style="color:#FF79C6;">        let</span><span style="color:#F8F8F2;"> ancestor </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> vnode.parent;</span></span>
<span class="line"><span style="color:#FF79C6;">        const</span><span style="color:#F8F8F2;"> patchable </span><span style="color:#FF79C6;">=</span><span style="color:#50FA7B;"> isPatchable</span><span style="color:#F8F8F2;">(vnode);</span></span>
<span class="line"><span style="color:#FF79C6;">        while</span><span style="color:#F8F8F2;"> (ancestor) {</span></span>
<span class="line"><span style="color:#FF79C6;">          for</span><span style="color:#F8F8F2;"> (</span><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> i </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> 0</span><span style="color:#F8F8F2;">; i </span><span style="color:#FF79C6;">&lt;</span><span style="color:#F8F8F2;"> cbs.destroy.length; </span><span style="color:#FF79C6;">++</span><span style="color:#F8F8F2;">i) {</span></span>
<span class="line"><span style="color:#F8F8F2;">            cbs.destroy[i](ancestor);</span></span>
<span class="line"><span style="color:#F8F8F2;">          }</span></span>
<span class="line"><span style="color:#F8F8F2;">          ancestor.elm </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> vnode.elm;</span></span>
<span class="line"><span style="color:#FF79C6;">          if</span><span style="color:#F8F8F2;"> (patchable) {</span></span>
<span class="line"><span style="color:#FF79C6;">            for</span><span style="color:#F8F8F2;"> (</span><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> i </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> 0</span><span style="color:#F8F8F2;">; i </span><span style="color:#FF79C6;">&lt;</span><span style="color:#F8F8F2;"> cbs.create.length; </span><span style="color:#FF79C6;">++</span><span style="color:#F8F8F2;">i) {</span></span>
<span class="line"><span style="color:#F8F8F2;">              cbs.create[i](emptyNode, ancestor);</span></span>
<span class="line"><span style="color:#F8F8F2;">            }</span></span>
<span class="line"><span style="color:#6272A4;">            // #6513</span></span>
<span class="line"><span style="color:#6272A4;">            // invoke insert hooks that may have been merged by create hooks.</span></span>
<span class="line"><span style="color:#6272A4;">            // e.g. for directives that uses the &quot;inserted&quot; hook.</span></span>
<span class="line"><span style="color:#FF79C6;">            const</span><span style="color:#F8F8F2;"> insert </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> ancestor.data.hook.insert;</span></span>
<span class="line"><span style="color:#FF79C6;">            if</span><span style="color:#F8F8F2;"> (insert.merged) {</span></span>
<span class="line"><span style="color:#6272A4;">              // start at index 1 to avoid re-invoking component mounted hook</span></span>
<span class="line"><span style="color:#FF79C6;">              for</span><span style="color:#F8F8F2;"> (</span><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> i </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> 1</span><span style="color:#F8F8F2;">; i </span><span style="color:#FF79C6;">&lt;</span><span style="color:#F8F8F2;"> insert.fns.length; i</span><span style="color:#FF79C6;">++</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">                insert.fns[i]();</span></span>
<span class="line"><span style="color:#F8F8F2;">              }</span></span>
<span class="line"><span style="color:#F8F8F2;">            }</span></span>
<span class="line"><span style="color:#F8F8F2;">          } </span><span style="color:#FF79C6;">else</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#50FA7B;">            registerRef</span><span style="color:#F8F8F2;">(ancestor);</span></span>
<span class="line"><span style="color:#F8F8F2;">          }</span></span>
<span class="line"><span style="color:#F8F8F2;">          ancestor </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> ancestor.parent;</span></span>
<span class="line"><span style="color:#F8F8F2;">        }</span></span>
<span class="line"><span style="color:#F8F8F2;">      }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">      // destroy old node</span></span>
<span class="line"><span style="color:#FF79C6;">      if</span><span style="color:#F8F8F2;"> (</span><span style="color:#50FA7B;">isDef</span><span style="color:#F8F8F2;">(parentElm)) {</span></span>
<span class="line"><span style="color:#50FA7B;">        removeVnodes</span><span style="color:#F8F8F2;">([oldVnode], </span><span style="color:#BD93F9;">0</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">0</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">      } </span><span style="color:#FF79C6;">else</span><span style="color:#FF79C6;"> if</span><span style="color:#F8F8F2;"> (</span><span style="color:#50FA7B;">isDef</span><span style="color:#F8F8F2;">(oldVnode.tag)) {</span></span>
<span class="line"><span style="color:#50FA7B;">        invokeDestroyHook</span><span style="color:#F8F8F2;">(oldVnode);</span></span>
<span class="line"><span style="color:#F8F8F2;">      }</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#50FA7B;">  invokeInsertHook</span><span style="color:#F8F8F2;">(vnode, insertedVnodeQueue, isInitialPatch);</span></span>
<span class="line"><span style="color:#FF79C6;">  return</span><span style="color:#F8F8F2;"> vnode.elm;</span></span>
<span class="line"><span style="color:#F8F8F2;">};</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="samevnode" tabindex="-1"><a class="header-anchor" href="#samevnode"><span>sameVnode</span></a></h4><ul><li>key 必须相同（都是 undefined 则也是相同的），</li><li>DOM 元素的标签必须相同。比如都是 div</li><li>如果满足以上条件，那么就认为是相同的 vnode，因此就可以进行 patchVnode 操作。那么如果不是呢？就认为是完全新的一个 vnode，因此会进入下面的 createElm。让我们梳理下逻辑：当进入 patch 之后有两种分支可以走：</li><li>如果是第一次 patch（组件第一次挂载的时候），或者发现元素的标签不相同了（比如 div 变 p 了），那么直接 createElm 创建新的 DOM 元素</li><li>否则，就是对已存在的 DOM 元素进行更新，那么通过 patchVnode 进行 diff，有条件的更新以提升性能</li></ul><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">function</span><span style="color:#50FA7B;"> sameVnode</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">a</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">b</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#FF79C6;">  return</span><span style="color:#F8F8F2;"> (</span></span>
<span class="line"><span style="color:#6272A4;">    // key 必须相同，需要注意的是 undefined === undefined =&gt; true</span></span>
<span class="line"><span style="color:#F8F8F2;">    a.key </span><span style="color:#FF79C6;">===</span><span style="color:#F8F8F2;"> b.key </span><span style="color:#FF79C6;">&amp;&amp;</span></span>
<span class="line"><span style="color:#F8F8F2;">    a.asyncFactory </span><span style="color:#FF79C6;">===</span><span style="color:#F8F8F2;"> b.asyncFactory </span><span style="color:#FF79C6;">&amp;&amp;</span></span>
<span class="line"><span style="color:#6272A4;">    // 标签相同</span></span>
<span class="line"><span style="color:#F8F8F2;">    ((a.tag </span><span style="color:#FF79C6;">===</span><span style="color:#F8F8F2;"> b.tag </span><span style="color:#FF79C6;">&amp;&amp;</span></span>
<span class="line"><span style="color:#6272A4;">      // 都是注释节点</span></span>
<span class="line"><span style="color:#F8F8F2;">      a.isComment </span><span style="color:#FF79C6;">===</span><span style="color:#F8F8F2;"> b.isComment </span><span style="color:#FF79C6;">&amp;&amp;</span></span>
<span class="line"><span style="color:#6272A4;">      // 都有 data 属性</span></span>
<span class="line"><span style="color:#50FA7B;">      isDef</span><span style="color:#F8F8F2;">(a.data) </span><span style="color:#FF79C6;">===</span><span style="color:#50FA7B;"> isDef</span><span style="color:#F8F8F2;">(b.data) </span><span style="color:#FF79C6;">&amp;&amp;</span></span>
<span class="line"><span style="color:#6272A4;">      // input 标签的情况</span></span>
<span class="line"><span style="color:#50FA7B;">      sameInputType</span><span style="color:#F8F8F2;">(a, b)) </span><span style="color:#FF79C6;">||</span></span>
<span class="line"><span style="color:#F8F8F2;">      (</span><span style="color:#50FA7B;">isTrue</span><span style="color:#F8F8F2;">(a.isAsyncPlaceholder) </span><span style="color:#FF79C6;">&amp;&amp;</span><span style="color:#50FA7B;"> isUndef</span><span style="color:#F8F8F2;">(b.asyncFactory.error)))</span></span>
<span class="line"><span style="color:#F8F8F2;">  );</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="createelm" tabindex="-1"><a class="header-anchor" href="#createelm"><span>createElm</span></a></h4><p>基于 vnode 创建整棵 DOM 树，并插入到父节点上</p><p>VNode 类可以描述 6 种类型的节点，而实际上只有 3 种类型的节点能够被创建并插入到 DOM 中，它们分别是：元素节点、文本节点、注释节点。</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">function</span><span style="color:#50FA7B;"> createElm</span><span style="color:#F8F8F2;">(</span></span>
<span class="line"><span style="color:#FFB86C;font-style:italic;">  vnode</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#FFB86C;font-style:italic;">  insertedVnodeQueue</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#FFB86C;font-style:italic;">  parentElm</span><span style="color:#FF79C6;">?:</span><span style="color:#8BE9FD;font-style:italic;"> any</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#FFB86C;font-style:italic;">  refElm</span><span style="color:#FF79C6;">?:</span><span style="color:#8BE9FD;font-style:italic;"> any</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#FFB86C;font-style:italic;">  nested</span><span style="color:#FF79C6;">?:</span><span style="color:#8BE9FD;font-style:italic;"> any</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#FFB86C;font-style:italic;">  ownerArray</span><span style="color:#FF79C6;">?:</span><span style="color:#8BE9FD;font-style:italic;"> any</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#FFB86C;font-style:italic;">  index</span><span style="color:#FF79C6;">?:</span><span style="color:#8BE9FD;font-style:italic;"> any</span></span>
<span class="line"><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#FF79C6;">  if</span><span style="color:#F8F8F2;"> (</span><span style="color:#50FA7B;">isDef</span><span style="color:#F8F8F2;">(vnode.elm) </span><span style="color:#FF79C6;">&amp;&amp;</span><span style="color:#50FA7B;"> isDef</span><span style="color:#F8F8F2;">(ownerArray)) {</span></span>
<span class="line"><span style="color:#6272A4;">    // This vnode was used in a previous render!</span></span>
<span class="line"><span style="color:#6272A4;">    // now it&#39;s used as a new node, overwriting its elm would cause</span></span>
<span class="line"><span style="color:#6272A4;">    // potential patch errors down the road when it&#39;s used as an insertion</span></span>
<span class="line"><span style="color:#6272A4;">    // reference node. Instead, we clone the node on-demand before creating</span></span>
<span class="line"><span style="color:#6272A4;">    // associated DOM element for it.</span></span>
<span class="line"><span style="color:#F8F8F2;">    vnode </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> ownerArray[index] </span><span style="color:#FF79C6;">=</span><span style="color:#50FA7B;"> cloneVNode</span><span style="color:#F8F8F2;">(vnode);</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">  vnode.isRootInsert </span><span style="color:#FF79C6;">=</span><span style="color:#FF79C6;"> !</span><span style="color:#F8F8F2;">nested; </span><span style="color:#6272A4;">// for transition enter check</span></span>
<span class="line"><span style="color:#6272A4;">  /**</span></span>
<span class="line"><span style="color:#6272A4;">   * 重点</span></span>
<span class="line"><span style="color:#6272A4;">   * 1、如果 vnode 是一个组件，则执行 init 钩子，创建组件实例并挂载，</span></span>
<span class="line"><span style="color:#6272A4;">   *   然后为组件执行各个模块的 create 钩子</span></span>
<span class="line"><span style="color:#6272A4;">   *   如果组件被 keep-alive 包裹，则激活组件</span></span>
<span class="line"><span style="color:#6272A4;">   * 2、如果是一个普通元素，则什么也不错</span></span>
<span class="line"><span style="color:#6272A4;">   */</span></span>
<span class="line"><span style="color:#FF79C6;">  if</span><span style="color:#F8F8F2;"> (</span><span style="color:#50FA7B;">createComponent</span><span style="color:#F8F8F2;">(vnode, insertedVnodeQueue, parentElm, refElm)) {</span></span>
<span class="line"><span style="color:#FF79C6;">    return</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">  const</span><span style="color:#F8F8F2;"> data </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> vnode.data;</span></span>
<span class="line"><span style="color:#FF79C6;">  const</span><span style="color:#F8F8F2;"> children </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> vnode.children;</span></span>
<span class="line"><span style="color:#FF79C6;">  const</span><span style="color:#F8F8F2;"> tag </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> vnode.tag;</span></span>
<span class="line"><span style="color:#6272A4;">  // 创建元素节点</span></span>
<span class="line"><span style="color:#6272A4;">  // 有tag属性即认为是元素节点，则调用createElement方法创建元素节点</span></span>
<span class="line"><span style="color:#FF79C6;">  if</span><span style="color:#F8F8F2;"> (</span><span style="color:#50FA7B;">isDef</span><span style="color:#F8F8F2;">(tag)) {</span></span>
<span class="line"><span style="color:#F8F8F2;">    vnode.elm </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> vnode.ns</span></span>
<span class="line"><span style="color:#FF79C6;">      ?</span><span style="color:#F8F8F2;"> nodeOps.</span><span style="color:#50FA7B;">createElementNS</span><span style="color:#F8F8F2;">(vnode.ns, tag)</span></span>
<span class="line"><span style="color:#FF79C6;">      :</span><span style="color:#F8F8F2;"> nodeOps.</span><span style="color:#50FA7B;">createElement</span><span style="color:#F8F8F2;">(tag, vnode);</span></span>
<span class="line"><span style="color:#50FA7B;">    setScope</span><span style="color:#F8F8F2;">(vnode);</span></span>
<span class="line"><span style="color:#6272A4;">    // 循环遍历 children调用 createElm</span></span>
<span class="line"><span style="color:#50FA7B;">    createChildren</span><span style="color:#F8F8F2;">(vnode, children, insertedVnodeQueue);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">    if</span><span style="color:#F8F8F2;"> (</span><span style="color:#50FA7B;">isDef</span><span style="color:#F8F8F2;">(data)) {</span></span>
<span class="line"><span style="color:#50FA7B;">      invokeCreateHooks</span><span style="color:#F8F8F2;">(vnode, insertedVnodeQueue);</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#50FA7B;">    insert</span><span style="color:#F8F8F2;">(parentElm, vnode.elm, refElm);</span></span>
<span class="line"><span style="color:#6272A4;">    // 创建注释节点</span></span>
<span class="line"><span style="color:#6272A4;">    // isComment属性是否为true</span></span>
<span class="line"><span style="color:#F8F8F2;">  } </span><span style="color:#FF79C6;">else</span><span style="color:#FF79C6;"> if</span><span style="color:#F8F8F2;"> (</span><span style="color:#50FA7B;">isTrue</span><span style="color:#F8F8F2;">(vnode.isComment)) {</span></span>
<span class="line"><span style="color:#F8F8F2;">    vnode.elm </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> nodeOps.</span><span style="color:#50FA7B;">createComment</span><span style="color:#F8F8F2;">(vnode.text);</span></span>
<span class="line"><span style="color:#6272A4;">    // 将组件的 DOM 节点插入到父节点内</span></span>
<span class="line"><span style="color:#50FA7B;">    insert</span><span style="color:#F8F8F2;">(parentElm, vnode.elm, refElm);</span></span>
<span class="line"><span style="color:#6272A4;">    // 创建文本节点</span></span>
<span class="line"><span style="color:#F8F8F2;">  } </span><span style="color:#FF79C6;">else</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">    vnode.elm </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> nodeOps.</span><span style="color:#50FA7B;">createTextNode</span><span style="color:#F8F8F2;">(vnode.text);</span></span>
<span class="line"><span style="color:#50FA7B;">    insert</span><span style="color:#F8F8F2;">(parentElm, vnode.elm, refElm);</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="createcomponent-1" tabindex="-1"><a class="header-anchor" href="#createcomponent-1"><span>createComponent()</span></a></h5><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#6272A4;">/**</span></span>
<span class="line"><span style="color:#6272A4;"> * 如果 vnode 是一个组件，则执行 init 钩子，创建组件实例，并挂载</span></span>
<span class="line"><span style="color:#6272A4;"> * 然后为组件执行各个模块的 create 方法</span></span>
<span class="line"><span style="color:#6272A4;"> * </span><span style="color:#FF79C6;">@param</span><span style="color:#8BE9FD;font-style:italic;"> {*}</span><span style="color:#FFB86C;font-style:italic;"> vnode</span><span style="color:#6272A4;"> 组件新的 vnode</span></span>
<span class="line"><span style="color:#6272A4;"> * </span><span style="color:#FF79C6;">@param</span><span style="color:#8BE9FD;font-style:italic;"> {*}</span><span style="color:#FFB86C;font-style:italic;"> insertedVnodeQueue</span><span style="color:#6272A4;"> 数组</span></span>
<span class="line"><span style="color:#6272A4;"> * </span><span style="color:#FF79C6;">@param</span><span style="color:#8BE9FD;font-style:italic;"> {*}</span><span style="color:#FFB86C;font-style:italic;"> parentElm</span><span style="color:#6272A4;"> oldVnode 的父节点</span></span>
<span class="line"><span style="color:#6272A4;"> * </span><span style="color:#FF79C6;">@param</span><span style="color:#8BE9FD;font-style:italic;"> {*}</span><span style="color:#FFB86C;font-style:italic;"> refElm</span><span style="color:#6272A4;"> oldVnode 的下一个兄弟节点</span></span>
<span class="line"><span style="color:#6272A4;"> * </span><span style="color:#FF79C6;">@returns</span><span style="color:#6272A4;"> 如果 vnode 是一个组件并且组件创建成功，则返回 true，否则返回 undefined</span></span>
<span class="line"><span style="color:#6272A4;"> */</span></span>
<span class="line"><span style="color:#FF79C6;">function</span><span style="color:#50FA7B;"> createComponent</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">vnode</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">insertedVnodeQueue</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">parentElm</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">refElm</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#FF79C6;">  let</span><span style="color:#F8F8F2;"> i </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> vnode.data;</span></span>
<span class="line"><span style="color:#FF79C6;">  if</span><span style="color:#F8F8F2;"> (</span><span style="color:#50FA7B;">isDef</span><span style="color:#F8F8F2;">(i)) {</span></span>
<span class="line"><span style="color:#6272A4;">    // 验证组件实例是否已经存在 &amp;&amp; 被 keep-alive 包裹</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">    const</span><span style="color:#F8F8F2;"> isReactivated </span><span style="color:#FF79C6;">=</span><span style="color:#50FA7B;"> isDef</span><span style="color:#F8F8F2;">(vnode.componentInstance) </span><span style="color:#FF79C6;">&amp;&amp;</span><span style="color:#F8F8F2;"> i.keepAlive;</span></span>
<span class="line"><span style="color:#6272A4;">    // 如果是组件没有被 keep-alive 包裹或者首次渲染，则初始化组件，并进入挂载阶段</span></span>
<span class="line"><span style="color:#FF79C6;">    if</span><span style="color:#F8F8F2;"> (</span><span style="color:#50FA7B;">isDef</span><span style="color:#F8F8F2;">((i </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> i.hook)) </span><span style="color:#FF79C6;">&amp;&amp;</span><span style="color:#50FA7B;"> isDef</span><span style="color:#F8F8F2;">((i </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> i.init))) {</span></span>
<span class="line"><span style="color:#50FA7B;">      i</span><span style="color:#F8F8F2;">(vnode, </span><span style="color:#BD93F9;">false</span><span style="color:#6272A4;"> /* hydrating */</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#6272A4;">    // after calling the init hook, if the vnode is a child component</span></span>
<span class="line"><span style="color:#6272A4;">    // it should&#39;ve created a child instance and mounted it. the child</span></span>
<span class="line"><span style="color:#6272A4;">    // component also has set the placeholder vnode&#39;s elm.</span></span>
<span class="line"><span style="color:#6272A4;">    // in that case we can just return the element and be done.</span></span>
<span class="line"><span style="color:#FF79C6;">    if</span><span style="color:#F8F8F2;"> (</span><span style="color:#50FA7B;">isDef</span><span style="color:#F8F8F2;">(vnode.componentInstance)) {</span></span>
<span class="line"><span style="color:#6272A4;">      // 如果 vnode 是一个子组件，则调用 init 钩子之后会创建一个组件实例，并挂载</span></span>
<span class="line"><span style="color:#6272A4;">      // 这时候就可以给组件执行各个模块的的 create 钩子了</span></span>
<span class="line"><span style="color:#50FA7B;">      initComponent</span><span style="color:#F8F8F2;">(vnode, insertedVnodeQueue);</span></span>
<span class="line"><span style="color:#50FA7B;">      insert</span><span style="color:#F8F8F2;">(parentElm, vnode.elm, refElm);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">      if</span><span style="color:#F8F8F2;"> (</span><span style="color:#50FA7B;">isTrue</span><span style="color:#F8F8F2;">(isReactivated)) {</span></span>
<span class="line"><span style="color:#6272A4;">        // 组件被 keep-alive 包裹的情况，激活组件</span></span>
<span class="line"><span style="color:#50FA7B;">        reactivateComponent</span><span style="color:#F8F8F2;">(vnode, insertedVnodeQueue, parentElm, refElm);</span></span>
<span class="line"><span style="color:#F8F8F2;">      }</span></span>
<span class="line"><span style="color:#FF79C6;">      return</span><span style="color:#BD93F9;"> true</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h6 id="initcomponent" tabindex="-1"><a class="header-anchor" href="#initcomponent"><span>initComponent</span></a></h6><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">function</span><span style="color:#50FA7B;"> initComponent</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">vnode</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">insertedVnodeQueue</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#FF79C6;">  if</span><span style="color:#F8F8F2;"> (</span><span style="color:#50FA7B;">isDef</span><span style="color:#F8F8F2;">(vnode.data.pendingInsert)) {</span></span>
<span class="line"><span style="color:#F8F8F2;">    insertedVnodeQueue.push.</span><span style="color:#50FA7B;">apply</span><span style="color:#F8F8F2;">(insertedVnodeQueue, vnode.data.pendingInsert);</span></span>
<span class="line"><span style="color:#F8F8F2;">    vnode.data.pendingInsert </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> null</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">  vnode.elm </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> vnode.componentInstance.$el;</span></span>
<span class="line"><span style="color:#FF79C6;">  if</span><span style="color:#F8F8F2;"> (</span><span style="color:#50FA7B;">isPatchable</span><span style="color:#F8F8F2;">(vnode)) {</span></span>
<span class="line"><span style="color:#50FA7B;">    invokeCreateHooks</span><span style="color:#F8F8F2;">(vnode, insertedVnodeQueue);</span></span>
<span class="line"><span style="color:#50FA7B;">    setScope</span><span style="color:#F8F8F2;">(vnode);</span></span>
<span class="line"><span style="color:#F8F8F2;">  } </span><span style="color:#FF79C6;">else</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#6272A4;">    // empty component root.</span></span>
<span class="line"><span style="color:#6272A4;">    // skip all element-related modules except for ref (#3455)</span></span>
<span class="line"><span style="color:#50FA7B;">    registerRef</span><span style="color:#F8F8F2;">(vnode);</span></span>
<span class="line"><span style="color:#6272A4;">    // make sure to invoke the insert hook</span></span>
<span class="line"><span style="color:#F8F8F2;">    insertedVnodeQueue.</span><span style="color:#50FA7B;">push</span><span style="color:#F8F8F2;">(vnode);</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="insert" tabindex="-1"><a class="header-anchor" href="#insert"><span>insert</span></a></h5><p>向父节点插入节点</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">function</span><span style="color:#50FA7B;"> insert</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">parent</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">elm</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">ref</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#FF79C6;">  if</span><span style="color:#F8F8F2;"> (</span><span style="color:#50FA7B;">isDef</span><span style="color:#F8F8F2;">(parent)) {</span></span>
<span class="line"><span style="color:#FF79C6;">    if</span><span style="color:#F8F8F2;"> (</span><span style="color:#50FA7B;">isDef</span><span style="color:#F8F8F2;">(ref)) {</span></span>
<span class="line"><span style="color:#FF79C6;">      if</span><span style="color:#F8F8F2;"> (nodeOps.</span><span style="color:#50FA7B;">parentNode</span><span style="color:#F8F8F2;">(ref) </span><span style="color:#FF79C6;">===</span><span style="color:#F8F8F2;"> parent) {</span></span>
<span class="line"><span style="color:#F8F8F2;">        nodeOps.</span><span style="color:#50FA7B;">insertBefore</span><span style="color:#F8F8F2;">(parent, elm, ref);</span></span>
<span class="line"><span style="color:#F8F8F2;">      }</span></span>
<span class="line"><span style="color:#F8F8F2;">    } </span><span style="color:#FF79C6;">else</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">      nodeOps.</span><span style="color:#50FA7B;">appendChild</span><span style="color:#F8F8F2;">(parent, elm);</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="removenode" tabindex="-1"><a class="header-anchor" href="#removenode"><span>removeNode</span></a></h4><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">function</span><span style="color:#50FA7B;"> removeNode</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">el</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#FF79C6;">  const</span><span style="color:#F8F8F2;"> parent </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> nodeOps.</span><span style="color:#50FA7B;">parentNode</span><span style="color:#F8F8F2;">(el); </span><span style="color:#6272A4;">// 获取父节点</span></span>
<span class="line"><span style="color:#6272A4;">  // element may have already been removed due to v-html / v-text</span></span>
<span class="line"><span style="color:#FF79C6;">  if</span><span style="color:#F8F8F2;"> (</span><span style="color:#50FA7B;">isDef</span><span style="color:#F8F8F2;">(parent)) {</span></span>
<span class="line"><span style="color:#F8F8F2;">    nodeOps.</span><span style="color:#50FA7B;">removeChild</span><span style="color:#F8F8F2;">(parent, el); </span><span style="color:#6272A4;">// 调用父节点的removeChild方法</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="invokecreatehooks" tabindex="-1"><a class="header-anchor" href="#invokecreatehooks"><span>invokeCreateHooks</span></a></h4><p><code>createPatchFunction</code></p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> hooks </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> [</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">create</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">, </span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">activate</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">, </span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">update</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">, </span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">remove</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">, </span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">destroy</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">];</span></span>
<span class="line"><span style="color:#FF79C6;">export</span><span style="color:#FF79C6;"> function</span><span style="color:#50FA7B;"> createPatchFunction</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">backend</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#FF79C6;">  let</span><span style="color:#F8F8F2;"> i, j;</span></span>
<span class="line"><span style="color:#FF79C6;">  const</span><span style="color:#F8F8F2;"> cbs</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> any</span><span style="color:#FF79C6;"> =</span><span style="color:#F8F8F2;"> {};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">  const</span><span style="color:#F8F8F2;"> { modules, nodeOps } </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> backend;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">  for</span><span style="color:#F8F8F2;"> (i </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> 0</span><span style="color:#F8F8F2;">; i </span><span style="color:#FF79C6;">&lt;</span><span style="color:#F8F8F2;"> hooks.length; </span><span style="color:#FF79C6;">++</span><span style="color:#F8F8F2;">i) {</span></span>
<span class="line"><span style="color:#F8F8F2;">    cbs[hooks[i]] </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> [];</span></span>
<span class="line"><span style="color:#FF79C6;">    for</span><span style="color:#F8F8F2;"> (j </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> 0</span><span style="color:#F8F8F2;">; j </span><span style="color:#FF79C6;">&lt;</span><span style="color:#F8F8F2;"> modules.length; </span><span style="color:#FF79C6;">++</span><span style="color:#F8F8F2;">j) {</span></span>
<span class="line"><span style="color:#FF79C6;">      if</span><span style="color:#F8F8F2;"> (</span><span style="color:#50FA7B;">isDef</span><span style="color:#F8F8F2;">(modules[j][hooks[i]])) {</span></span>
<span class="line"><span style="color:#F8F8F2;">        cbs[hooks[i]].</span><span style="color:#50FA7B;">push</span><span style="color:#F8F8F2;">(modules[j][hooks[i]]);</span></span>
<span class="line"><span style="color:#F8F8F2;">      }</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#6272A4;">  //....</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">function</span><span style="color:#50FA7B;"> invokeCreateHooks</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">vnode</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">insertedVnodeQueue</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#FF79C6;">  for</span><span style="color:#F8F8F2;"> (</span><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> i </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> 0</span><span style="color:#F8F8F2;">; i </span><span style="color:#FF79C6;">&lt;</span><span style="color:#F8F8F2;"> cbs.create.length; </span><span style="color:#FF79C6;">++</span><span style="color:#F8F8F2;">i) {</span></span>
<span class="line"><span style="color:#F8F8F2;">    cbs.create[i](emptyNode, vnode);</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">  i </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> vnode.data.hook; </span><span style="color:#6272A4;">// Reuse variable</span></span>
<span class="line"><span style="color:#FF79C6;">  if</span><span style="color:#F8F8F2;"> (</span><span style="color:#50FA7B;">isDef</span><span style="color:#F8F8F2;">(i)) {</span></span>
<span class="line"><span style="color:#FF79C6;">    if</span><span style="color:#F8F8F2;"> (</span><span style="color:#50FA7B;">isDef</span><span style="color:#F8F8F2;">(i.create)) i.</span><span style="color:#50FA7B;">create</span><span style="color:#F8F8F2;">(emptyNode, vnode);</span></span>
<span class="line"><span style="color:#FF79C6;">    if</span><span style="color:#F8F8F2;"> (</span><span style="color:#50FA7B;">isDef</span><span style="color:#F8F8F2;">(i.insert)) insertedVnodeQueue.</span><span style="color:#50FA7B;">push</span><span style="color:#F8F8F2;">(vnode);</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="patchvnode" tabindex="-1"><a class="header-anchor" href="#patchvnode"><span>patchVnode</span></a></h4><p>更新节点</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">function</span><span style="color:#50FA7B;"> patchVnode</span><span style="color:#F8F8F2;">(</span></span>
<span class="line"><span style="color:#FFB86C;font-style:italic;">  oldVnode</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#FFB86C;font-style:italic;">  vnode</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#FFB86C;font-style:italic;">  insertedVnodeQueue</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#FFB86C;font-style:italic;">  ownerArray</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#FFB86C;font-style:italic;">  index</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#FFB86C;font-style:italic;">  removeOnly</span><span style="color:#FF79C6;">?:</span><span style="color:#8BE9FD;font-style:italic;"> any</span></span>
<span class="line"><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#6272A4;">  // 老节点和新节点相同，直接返回</span></span>
<span class="line"><span style="color:#FF79C6;">  if</span><span style="color:#F8F8F2;"> (oldVnode </span><span style="color:#FF79C6;">===</span><span style="color:#F8F8F2;"> vnode) {</span></span>
<span class="line"><span style="color:#FF79C6;">    return</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">  if</span><span style="color:#F8F8F2;"> (</span><span style="color:#50FA7B;">isDef</span><span style="color:#F8F8F2;">(vnode.elm) </span><span style="color:#FF79C6;">&amp;&amp;</span><span style="color:#50FA7B;"> isDef</span><span style="color:#F8F8F2;">(ownerArray)) {</span></span>
<span class="line"><span style="color:#6272A4;">    // clone reused vnode</span></span>
<span class="line"><span style="color:#F8F8F2;">    vnode </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> ownerArray[index] </span><span style="color:#FF79C6;">=</span><span style="color:#50FA7B;"> cloneVNode</span><span style="color:#F8F8F2;">(vnode);</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">  const</span><span style="color:#F8F8F2;"> elm </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> (vnode.elm </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> oldVnode.elm);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">  if</span><span style="color:#F8F8F2;"> (</span><span style="color:#50FA7B;">isTrue</span><span style="color:#F8F8F2;">(oldVnode.isAsyncPlaceholder)) {</span></span>
<span class="line"><span style="color:#FF79C6;">    if</span><span style="color:#F8F8F2;"> (</span><span style="color:#50FA7B;">isDef</span><span style="color:#F8F8F2;">(vnode.asyncFactory.resolved)) {</span></span>
<span class="line"><span style="color:#50FA7B;">      hydrate</span><span style="color:#F8F8F2;">(oldVnode.elm, vnode, insertedVnodeQueue);</span></span>
<span class="line"><span style="color:#F8F8F2;">    } </span><span style="color:#FF79C6;">else</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">      vnode.isAsyncPlaceholder </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> true</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#FF79C6;">    return</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">  // reuse element for static trees.</span></span>
<span class="line"><span style="color:#6272A4;">  // note we only do this if the vnode is cloned -</span></span>
<span class="line"><span style="color:#6272A4;">  // if the new node is not cloned it means the render functions have been</span></span>
<span class="line"><span style="color:#6272A4;">  // reset by the hot-reload-api and we need to do a proper re-render.</span></span>
<span class="line"><span style="color:#6272A4;">  // 跳过静态节点</span></span>
<span class="line"><span style="color:#FF79C6;">  if</span><span style="color:#F8F8F2;"> (</span></span>
<span class="line"><span style="color:#50FA7B;">    isTrue</span><span style="color:#F8F8F2;">(vnode.isStatic) </span><span style="color:#FF79C6;">&amp;&amp;</span></span>
<span class="line"><span style="color:#50FA7B;">    isTrue</span><span style="color:#F8F8F2;">(oldVnode.isStatic) </span><span style="color:#FF79C6;">&amp;&amp;</span></span>
<span class="line"><span style="color:#F8F8F2;">    vnode.key </span><span style="color:#FF79C6;">===</span><span style="color:#F8F8F2;"> oldVnode.key </span><span style="color:#FF79C6;">&amp;&amp;</span></span>
<span class="line"><span style="color:#F8F8F2;">    (</span><span style="color:#50FA7B;">isTrue</span><span style="color:#F8F8F2;">(vnode.isCloned) </span><span style="color:#FF79C6;">||</span><span style="color:#50FA7B;"> isTrue</span><span style="color:#F8F8F2;">(vnode.isOnce))</span></span>
<span class="line"><span style="color:#F8F8F2;">  ) {</span></span>
<span class="line"><span style="color:#6272A4;">    // 新旧节点都是静态的而且两个节点的 key 一样，并且新节点被 clone 了 或者 新节点有 v-once指令，则重用这部分节点</span></span>
<span class="line"><span style="color:#F8F8F2;">    vnode.componentInstance </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> oldVnode.componentInstance;</span></span>
<span class="line"><span style="color:#FF79C6;">    return</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#6272A4;">  // 执行组件的 prepatch 钩子</span></span>
<span class="line"><span style="color:#FF79C6;">  let</span><span style="color:#F8F8F2;"> i;</span></span>
<span class="line"><span style="color:#FF79C6;">  const</span><span style="color:#F8F8F2;"> data </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> vnode.data;</span></span>
<span class="line"><span style="color:#FF79C6;">  if</span><span style="color:#F8F8F2;"> (</span><span style="color:#50FA7B;">isDef</span><span style="color:#F8F8F2;">(data) </span><span style="color:#FF79C6;">&amp;&amp;</span><span style="color:#50FA7B;"> isDef</span><span style="color:#F8F8F2;">((i </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> data.hook)) </span><span style="color:#FF79C6;">&amp;&amp;</span><span style="color:#50FA7B;"> isDef</span><span style="color:#F8F8F2;">((i </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> i.prepatch))) {</span></span>
<span class="line"><span style="color:#50FA7B;">    i</span><span style="color:#F8F8F2;">(oldVnode, vnode);</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">  const</span><span style="color:#F8F8F2;"> oldCh </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> oldVnode.children;</span></span>
<span class="line"><span style="color:#FF79C6;">  const</span><span style="color:#F8F8F2;"> ch </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> vnode.children;</span></span>
<span class="line"><span style="color:#6272A4;">  // 全量更新新节点的属性</span></span>
<span class="line"><span style="color:#6272A4;">  /*</span></span>
<span class="line"><span style="color:#6272A4;">    - 全量的属性更新</span></span>
<span class="line"><span style="color:#6272A4;">    - 如果新老节点都有孩子，则递归执行 diff</span></span>
<span class="line"><span style="color:#6272A4;">    - 如果新节点有孩子，老节点没孩子，则新增新节点的这些孩子节点</span></span>
<span class="line"><span style="color:#6272A4;">    - 如果老节点有孩子，新节点没孩子，则删除老节点的这些孩子</span></span>
<span class="line"><span style="color:#6272A4;">    - 更新文本节点</span></span>
<span class="line"><span style="color:#6272A4;">  */</span></span>
<span class="line"><span style="color:#FF79C6;">  if</span><span style="color:#F8F8F2;"> (</span><span style="color:#50FA7B;">isDef</span><span style="color:#F8F8F2;">(data) </span><span style="color:#FF79C6;">&amp;&amp;</span><span style="color:#50FA7B;"> isPatchable</span><span style="color:#F8F8F2;">(vnode)) {</span></span>
<span class="line"><span style="color:#6272A4;">    // 执行新节点所有的属性更新</span></span>
<span class="line"><span style="color:#FF79C6;">    for</span><span style="color:#F8F8F2;"> (i </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> 0</span><span style="color:#F8F8F2;">; i </span><span style="color:#FF79C6;">&lt;</span><span style="color:#F8F8F2;"> cbs.update.length; </span><span style="color:#FF79C6;">++</span><span style="color:#F8F8F2;">i) cbs.update[i](oldVnode, vnode);</span></span>
<span class="line"><span style="color:#FF79C6;">    if</span><span style="color:#F8F8F2;"> (</span><span style="color:#50FA7B;">isDef</span><span style="color:#F8F8F2;">((i </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> data.hook)) </span><span style="color:#FF79C6;">&amp;&amp;</span><span style="color:#50FA7B;"> isDef</span><span style="color:#F8F8F2;">((i </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> i.update))) </span><span style="color:#50FA7B;">i</span><span style="color:#F8F8F2;">(oldVnode, vnode);</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">  if</span><span style="color:#F8F8F2;"> (</span><span style="color:#50FA7B;">isUndef</span><span style="color:#F8F8F2;">(vnode.text)) {</span></span>
<span class="line"><span style="color:#6272A4;">    // 新节点不是文本节点</span></span>
<span class="line"><span style="color:#FF79C6;">    if</span><span style="color:#F8F8F2;"> (</span><span style="color:#50FA7B;">isDef</span><span style="color:#F8F8F2;">(oldCh) </span><span style="color:#FF79C6;">&amp;&amp;</span><span style="color:#50FA7B;"> isDef</span><span style="color:#F8F8F2;">(ch)) {</span></span>
<span class="line"><span style="color:#FF79C6;">      if</span><span style="color:#F8F8F2;"> (oldCh </span><span style="color:#FF79C6;">!==</span><span style="color:#F8F8F2;"> ch)</span></span>
<span class="line"><span style="color:#50FA7B;">        updateChildren</span><span style="color:#F8F8F2;">(elm, oldCh, ch, insertedVnodeQueue, removeOnly);</span></span>
<span class="line"><span style="color:#F8F8F2;">    } </span><span style="color:#FF79C6;">else</span><span style="color:#FF79C6;"> if</span><span style="color:#F8F8F2;"> (</span><span style="color:#50FA7B;">isDef</span><span style="color:#F8F8F2;">(ch)) {</span></span>
<span class="line"><span style="color:#FF79C6;">      if</span><span style="color:#F8F8F2;"> (</span><span style="color:#50FA7B;">isDef</span><span style="color:#F8F8F2;">(oldVnode.text)) nodeOps.</span><span style="color:#50FA7B;">setTextContent</span><span style="color:#F8F8F2;">(elm, </span><span style="color:#E9F284;">&quot;&quot;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#50FA7B;">      addVnodes</span><span style="color:#F8F8F2;">(elm, </span><span style="color:#BD93F9;">null</span><span style="color:#F8F8F2;">, ch, </span><span style="color:#BD93F9;">0</span><span style="color:#F8F8F2;">, ch.length </span><span style="color:#FF79C6;">-</span><span style="color:#BD93F9;"> 1</span><span style="color:#F8F8F2;">, insertedVnodeQueue);</span></span>
<span class="line"><span style="color:#F8F8F2;">    } </span><span style="color:#FF79C6;">else</span><span style="color:#FF79C6;"> if</span><span style="color:#F8F8F2;"> (</span><span style="color:#50FA7B;">isDef</span><span style="color:#F8F8F2;">(oldCh)) {</span></span>
<span class="line"><span style="color:#50FA7B;">      removeVnodes</span><span style="color:#F8F8F2;">(oldCh, </span><span style="color:#BD93F9;">0</span><span style="color:#F8F8F2;">, oldCh.length </span><span style="color:#FF79C6;">-</span><span style="color:#BD93F9;"> 1</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">    } </span><span style="color:#FF79C6;">else</span><span style="color:#FF79C6;"> if</span><span style="color:#F8F8F2;"> (</span><span style="color:#50FA7B;">isDef</span><span style="color:#F8F8F2;">(oldVnode.text)) {</span></span>
<span class="line"><span style="color:#6272A4;">      // 老节点是文本节点，则将文本内容置空</span></span>
<span class="line"><span style="color:#F8F8F2;">      nodeOps.</span><span style="color:#50FA7B;">setTextContent</span><span style="color:#F8F8F2;">(elm, </span><span style="color:#E9F284;">&quot;&quot;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">  } </span><span style="color:#FF79C6;">else</span><span style="color:#FF79C6;"> if</span><span style="color:#F8F8F2;"> (oldVnode.text </span><span style="color:#FF79C6;">!==</span><span style="color:#F8F8F2;"> vnode.text) {</span></span>
<span class="line"><span style="color:#6272A4;">    // 新节点是文本节点，则更新文本节点</span></span>
<span class="line"><span style="color:#F8F8F2;">    nodeOps.</span><span style="color:#50FA7B;">setTextContent</span><span style="color:#F8F8F2;">(elm, vnode.text);</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#FF79C6;">  if</span><span style="color:#F8F8F2;"> (</span><span style="color:#50FA7B;">isDef</span><span style="color:#F8F8F2;">(data)) {</span></span>
<span class="line"><span style="color:#FF79C6;">    if</span><span style="color:#F8F8F2;"> (</span><span style="color:#50FA7B;">isDef</span><span style="color:#F8F8F2;">((i </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> data.hook)) </span><span style="color:#FF79C6;">&amp;&amp;</span><span style="color:#50FA7B;"> isDef</span><span style="color:#F8F8F2;">((i </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> i.postpatch))) </span><span style="color:#50FA7B;">i</span><span style="color:#F8F8F2;">(oldVnode, vnode);</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="updatechildren" tabindex="-1"><a class="header-anchor" href="#updatechildren"><span>updateChildren</span></a></h4><figure><img src="`+r+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li>先把 newChildren 数组里的所有未处理子节点的第一个子节点和 oldChildren 数组里所有未处理子节点的第一个子节点做比对，如果相同，那就直接进入更新节点的操作；</li><li>如果不同，再把 newChildren 数组里所有未处理子节点的最后一个子节点和 oldChildren 数组里所有未处理子节点的最后一个子节点做比对，如果相同，那就直接进入更新节点的操作；</li><li>如果不同，再把 newChildren 数组里所有未处理子节点的最后一个子节点和 oldChildren 数组里所有未处理子节点的第一个子节点做比对，如果相同，那就直接进入更新节点的操作，更新完后再将 oldChildren 数组里的该节点移动到与 newChildren 数组里节点相同的位置；</li><li>如果不同，再把 newChildren 数组里所有未处理子节点的第一个子节点和 oldChildren 数组里所有未处理子节点的最后一个子节点做比对，如果相同，那就直接进入更新节点的操作，更新完后再将 oldChildren 数组里的该节点移动到与 newChildren 数组里节点相同的位置；</li><li>如果上面的四种假设都不成立，则通过遍历找到新开始节点在老节点中的位置索引</li><li>如果老节点先于新节点遍历结束，则剩余的新节点执行新增节点操作</li><li>如果新节点先于老节点遍历结束，则剩余的老节点执行删除操作，移除这些老节点</li></ul><p>对未处理的上下扫描一遍，交叉扫一遍</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">function</span><span style="color:#50FA7B;"> updateChildren</span><span style="color:#F8F8F2;">(</span></span>
<span class="line"><span style="color:#FFB86C;font-style:italic;">  parentElm</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#FFB86C;font-style:italic;">  oldCh</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#FFB86C;font-style:italic;">  newCh</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#FFB86C;font-style:italic;">  insertedVnodeQueue</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#FFB86C;font-style:italic;">  removeOnly</span></span>
<span class="line"><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#FF79C6;">  let</span><span style="color:#F8F8F2;"> oldStartIdx </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> 0</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#FF79C6;">  let</span><span style="color:#F8F8F2;"> newStartIdx </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> 0</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#FF79C6;">  let</span><span style="color:#F8F8F2;"> oldEndIdx </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> oldCh.length </span><span style="color:#FF79C6;">-</span><span style="color:#BD93F9;"> 1</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#FF79C6;">  let</span><span style="color:#F8F8F2;"> oldStartVnode </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> oldCh[</span><span style="color:#BD93F9;">0</span><span style="color:#F8F8F2;">];</span></span>
<span class="line"><span style="color:#FF79C6;">  let</span><span style="color:#F8F8F2;"> oldEndVnode </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> oldCh[oldEndIdx];</span></span>
<span class="line"><span style="color:#FF79C6;">  let</span><span style="color:#F8F8F2;"> newEndIdx </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> newCh.length </span><span style="color:#FF79C6;">-</span><span style="color:#BD93F9;"> 1</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#FF79C6;">  let</span><span style="color:#F8F8F2;"> newStartVnode </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> newCh[</span><span style="color:#BD93F9;">0</span><span style="color:#F8F8F2;">];</span></span>
<span class="line"><span style="color:#FF79C6;">  let</span><span style="color:#F8F8F2;"> newEndVnode </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> newCh[newEndIdx];</span></span>
<span class="line"><span style="color:#FF79C6;">  let</span><span style="color:#F8F8F2;"> oldKeyToIdx, idxInOld, vnodeToMove, refElm;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">  // removeOnly is a special flag used only by &lt;transition-group&gt;</span></span>
<span class="line"><span style="color:#6272A4;">  // to ensure removed elements stay in correct relative positions</span></span>
<span class="line"><span style="color:#6272A4;">  // during leaving transitions</span></span>
<span class="line"><span style="color:#FF79C6;">  const</span><span style="color:#F8F8F2;"> canMove </span><span style="color:#FF79C6;">=</span><span style="color:#FF79C6;"> !</span><span style="color:#F8F8F2;">removeOnly;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">  // 遍历新老两组节点，只要有一组遍历完（开始索引超过结束索引）则跳出循环</span></span>
<span class="line"><span style="color:#FF79C6;">  while</span><span style="color:#F8F8F2;"> (oldStartIdx </span><span style="color:#FF79C6;">&lt;=</span><span style="color:#F8F8F2;"> oldEndIdx </span><span style="color:#FF79C6;">&amp;&amp;</span><span style="color:#F8F8F2;"> newStartIdx </span><span style="color:#FF79C6;">&lt;=</span><span style="color:#F8F8F2;"> newEndIdx) {</span></span>
<span class="line"><span style="color:#FF79C6;">    if</span><span style="color:#F8F8F2;"> (</span><span style="color:#50FA7B;">isUndef</span><span style="color:#F8F8F2;">(oldStartVnode)) {</span></span>
<span class="line"><span style="color:#F8F8F2;">      oldStartVnode </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> oldCh[</span><span style="color:#FF79C6;">++</span><span style="color:#F8F8F2;">oldStartIdx]; </span><span style="color:#6272A4;">// Vnode has been moved left</span></span>
<span class="line"><span style="color:#F8F8F2;">    } </span><span style="color:#FF79C6;">else</span><span style="color:#FF79C6;"> if</span><span style="color:#F8F8F2;"> (</span><span style="color:#50FA7B;">isUndef</span><span style="color:#F8F8F2;">(oldEndVnode)) {</span></span>
<span class="line"><span style="color:#F8F8F2;">      oldEndVnode </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> oldCh[</span><span style="color:#FF79C6;">--</span><span style="color:#F8F8F2;">oldEndIdx];</span></span>
<span class="line"><span style="color:#F8F8F2;">    } </span><span style="color:#FF79C6;">else</span><span style="color:#FF79C6;"> if</span><span style="color:#F8F8F2;"> (</span><span style="color:#50FA7B;">sameVnode</span><span style="color:#F8F8F2;">(oldStartVnode, newStartVnode)) {</span></span>
<span class="line"><span style="color:#50FA7B;">      patchVnode</span><span style="color:#F8F8F2;">(</span></span>
<span class="line"><span style="color:#F8F8F2;">        oldStartVnode,</span></span>
<span class="line"><span style="color:#F8F8F2;">        newStartVnode,</span></span>
<span class="line"><span style="color:#F8F8F2;">        insertedVnodeQueue,</span></span>
<span class="line"><span style="color:#F8F8F2;">        newCh,</span></span>
<span class="line"><span style="color:#F8F8F2;">        newStartIdx</span></span>
<span class="line"><span style="color:#F8F8F2;">      );</span></span>
<span class="line"><span style="color:#F8F8F2;">      oldStartVnode </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> oldCh[</span><span style="color:#FF79C6;">++</span><span style="color:#F8F8F2;">oldStartIdx];</span></span>
<span class="line"><span style="color:#F8F8F2;">      newStartVnode </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> newCh[</span><span style="color:#FF79C6;">++</span><span style="color:#F8F8F2;">newStartIdx];</span></span>
<span class="line"><span style="color:#F8F8F2;">    } </span><span style="color:#FF79C6;">else</span><span style="color:#FF79C6;"> if</span><span style="color:#F8F8F2;"> (</span><span style="color:#50FA7B;">sameVnode</span><span style="color:#F8F8F2;">(oldEndVnode, newEndVnode)) {</span></span>
<span class="line"><span style="color:#50FA7B;">      patchVnode</span><span style="color:#F8F8F2;">(</span></span>
<span class="line"><span style="color:#F8F8F2;">        oldEndVnode,</span></span>
<span class="line"><span style="color:#F8F8F2;">        newEndVnode,</span></span>
<span class="line"><span style="color:#F8F8F2;">        insertedVnodeQueue,</span></span>
<span class="line"><span style="color:#F8F8F2;">        newCh,</span></span>
<span class="line"><span style="color:#F8F8F2;">        newEndIdx</span></span>
<span class="line"><span style="color:#F8F8F2;">      );</span></span>
<span class="line"><span style="color:#F8F8F2;">      oldEndVnode </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> oldCh[</span><span style="color:#FF79C6;">--</span><span style="color:#F8F8F2;">oldEndIdx];</span></span>
<span class="line"><span style="color:#F8F8F2;">      newEndVnode </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> newCh[</span><span style="color:#FF79C6;">--</span><span style="color:#F8F8F2;">newEndIdx];</span></span>
<span class="line"><span style="color:#F8F8F2;">    } </span><span style="color:#FF79C6;">else</span><span style="color:#FF79C6;"> if</span><span style="color:#F8F8F2;"> (</span><span style="color:#50FA7B;">sameVnode</span><span style="color:#F8F8F2;">(oldStartVnode, newEndVnode)) {</span></span>
<span class="line"><span style="color:#6272A4;">      // Vnode moved right</span></span>
<span class="line"><span style="color:#50FA7B;">      patchVnode</span><span style="color:#F8F8F2;">(</span></span>
<span class="line"><span style="color:#F8F8F2;">        oldStartVnode,</span></span>
<span class="line"><span style="color:#F8F8F2;">        newEndVnode,</span></span>
<span class="line"><span style="color:#F8F8F2;">        insertedVnodeQueue,</span></span>
<span class="line"><span style="color:#F8F8F2;">        newCh,</span></span>
<span class="line"><span style="color:#F8F8F2;">        newEndIdx</span></span>
<span class="line"><span style="color:#F8F8F2;">      );</span></span>
<span class="line"><span style="color:#F8F8F2;">      canMove </span><span style="color:#FF79C6;">&amp;&amp;</span></span>
<span class="line"><span style="color:#F8F8F2;">        nodeOps.</span><span style="color:#50FA7B;">insertBefore</span><span style="color:#F8F8F2;">(</span></span>
<span class="line"><span style="color:#F8F8F2;">          parentElm,</span></span>
<span class="line"><span style="color:#F8F8F2;">          oldStartVnode.elm,</span></span>
<span class="line"><span style="color:#F8F8F2;">          nodeOps.</span><span style="color:#50FA7B;">nextSibling</span><span style="color:#F8F8F2;">(oldEndVnode.elm)</span></span>
<span class="line"><span style="color:#F8F8F2;">        );</span></span>
<span class="line"><span style="color:#F8F8F2;">      oldStartVnode </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> oldCh[</span><span style="color:#FF79C6;">++</span><span style="color:#F8F8F2;">oldStartIdx];</span></span>
<span class="line"><span style="color:#F8F8F2;">      newEndVnode </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> newCh[</span><span style="color:#FF79C6;">--</span><span style="color:#F8F8F2;">newEndIdx];</span></span>
<span class="line"><span style="color:#F8F8F2;">    } </span><span style="color:#FF79C6;">else</span><span style="color:#FF79C6;"> if</span><span style="color:#F8F8F2;"> (</span><span style="color:#50FA7B;">sameVnode</span><span style="color:#F8F8F2;">(oldEndVnode, newStartVnode)) {</span></span>
<span class="line"><span style="color:#6272A4;">      // Vnode moved left</span></span>
<span class="line"><span style="color:#50FA7B;">      patchVnode</span><span style="color:#F8F8F2;">(</span></span>
<span class="line"><span style="color:#F8F8F2;">        oldEndVnode,</span></span>
<span class="line"><span style="color:#F8F8F2;">        newStartVnode,</span></span>
<span class="line"><span style="color:#F8F8F2;">        insertedVnodeQueue,</span></span>
<span class="line"><span style="color:#F8F8F2;">        newCh,</span></span>
<span class="line"><span style="color:#F8F8F2;">        newStartIdx</span></span>
<span class="line"><span style="color:#F8F8F2;">      );</span></span>
<span class="line"><span style="color:#F8F8F2;">      canMove </span><span style="color:#FF79C6;">&amp;&amp;</span></span>
<span class="line"><span style="color:#F8F8F2;">        nodeOps.</span><span style="color:#50FA7B;">insertBefore</span><span style="color:#F8F8F2;">(parentElm, oldEndVnode.elm, oldStartVnode.elm);</span></span>
<span class="line"><span style="color:#F8F8F2;">      oldEndVnode </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> oldCh[</span><span style="color:#FF79C6;">--</span><span style="color:#F8F8F2;">oldEndIdx];</span></span>
<span class="line"><span style="color:#F8F8F2;">      newStartVnode </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> newCh[</span><span style="color:#FF79C6;">++</span><span style="color:#F8F8F2;">newStartIdx];</span></span>
<span class="line"><span style="color:#F8F8F2;">    } </span><span style="color:#FF79C6;">else</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#FF79C6;">      if</span><span style="color:#F8F8F2;"> (</span><span style="color:#50FA7B;">isUndef</span><span style="color:#F8F8F2;">(oldKeyToIdx))</span></span>
<span class="line"><span style="color:#6272A4;">        //  找到老节点中每个节点 key 和 索引之间的关系映射 =&gt; oldKeyToIdx = { key1: idx1, ... }</span></span>
<span class="line"><span style="color:#F8F8F2;">        oldKeyToIdx </span><span style="color:#FF79C6;">=</span><span style="color:#50FA7B;"> createKeyToOldIdx</span><span style="color:#F8F8F2;">(oldCh, oldStartIdx, oldEndIdx);</span></span>
<span class="line"><span style="color:#F8F8F2;">      idxInOld </span><span style="color:#FF79C6;">=</span><span style="color:#50FA7B;"> isDef</span><span style="color:#F8F8F2;">(newStartVnode.key)</span></span>
<span class="line"><span style="color:#FF79C6;">        ?</span><span style="color:#F8F8F2;"> oldKeyToIdx[newStartVnode.key]</span></span>
<span class="line"><span style="color:#FF79C6;">        :</span><span style="color:#50FA7B;"> findIdxInOld</span><span style="color:#F8F8F2;">(newStartVnode, oldCh, oldStartIdx, oldEndIdx);</span></span>
<span class="line"><span style="color:#FF79C6;">      if</span><span style="color:#F8F8F2;"> (</span><span style="color:#50FA7B;">isUndef</span><span style="color:#F8F8F2;">(idxInOld)) {</span></span>
<span class="line"><span style="color:#6272A4;">        // New element</span></span>
<span class="line"><span style="color:#50FA7B;">        createElm</span><span style="color:#F8F8F2;">(</span></span>
<span class="line"><span style="color:#F8F8F2;">          newStartVnode,</span></span>
<span class="line"><span style="color:#F8F8F2;">          insertedVnodeQueue,</span></span>
<span class="line"><span style="color:#F8F8F2;">          parentElm,</span></span>
<span class="line"><span style="color:#F8F8F2;">          oldStartVnode.elm,</span></span>
<span class="line"><span style="color:#BD93F9;">          false</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">          newCh,</span></span>
<span class="line"><span style="color:#F8F8F2;">          newStartIdx</span></span>
<span class="line"><span style="color:#F8F8F2;">        );</span></span>
<span class="line"><span style="color:#F8F8F2;">      } </span><span style="color:#FF79C6;">else</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">        vnodeToMove </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> oldCh[idxInOld];</span></span>
<span class="line"><span style="color:#FF79C6;">        if</span><span style="color:#F8F8F2;"> (</span><span style="color:#50FA7B;">sameVnode</span><span style="color:#F8F8F2;">(vnodeToMove, newStartVnode)) {</span></span>
<span class="line"><span style="color:#50FA7B;">          patchVnode</span><span style="color:#F8F8F2;">(</span></span>
<span class="line"><span style="color:#F8F8F2;">            vnodeToMove,</span></span>
<span class="line"><span style="color:#F8F8F2;">            newStartVnode,</span></span>
<span class="line"><span style="color:#F8F8F2;">            insertedVnodeQueue,</span></span>
<span class="line"><span style="color:#F8F8F2;">            newCh,</span></span>
<span class="line"><span style="color:#F8F8F2;">            newStartIdx</span></span>
<span class="line"><span style="color:#F8F8F2;">          );</span></span>
<span class="line"><span style="color:#F8F8F2;">          oldCh[idxInOld] </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> undefined</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">          canMove </span><span style="color:#FF79C6;">&amp;&amp;</span></span>
<span class="line"><span style="color:#F8F8F2;">            nodeOps.</span><span style="color:#50FA7B;">insertBefore</span><span style="color:#F8F8F2;">(parentElm, vnodeToMove.elm, oldStartVnode.elm);</span></span>
<span class="line"><span style="color:#F8F8F2;">        } </span><span style="color:#FF79C6;">else</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#6272A4;">          // same key but different element. treat as new element</span></span>
<span class="line"><span style="color:#50FA7B;">          createElm</span><span style="color:#F8F8F2;">(</span></span>
<span class="line"><span style="color:#F8F8F2;">            newStartVnode,</span></span>
<span class="line"><span style="color:#F8F8F2;">            insertedVnodeQueue,</span></span>
<span class="line"><span style="color:#F8F8F2;">            parentElm,</span></span>
<span class="line"><span style="color:#F8F8F2;">            oldStartVnode.elm,</span></span>
<span class="line"><span style="color:#BD93F9;">            false</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">            newCh,</span></span>
<span class="line"><span style="color:#F8F8F2;">            newStartIdx</span></span>
<span class="line"><span style="color:#F8F8F2;">          );</span></span>
<span class="line"><span style="color:#F8F8F2;">        }</span></span>
<span class="line"><span style="color:#F8F8F2;">      }</span></span>
<span class="line"><span style="color:#F8F8F2;">      newStartVnode </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> newCh[</span><span style="color:#FF79C6;">++</span><span style="color:#F8F8F2;">newStartIdx];</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">  //  老节点被遍历完了，新节点有剩余，则说明这部分剩余的节点是新增的节点，然后添加这些节点</span></span>
<span class="line"><span style="color:#FF79C6;">  if</span><span style="color:#F8F8F2;"> (oldStartIdx </span><span style="color:#FF79C6;">&gt;</span><span style="color:#F8F8F2;"> oldEndIdx) {</span></span>
<span class="line"><span style="color:#F8F8F2;">    refElm </span><span style="color:#FF79C6;">=</span><span style="color:#50FA7B;"> isUndef</span><span style="color:#F8F8F2;">(newCh[newEndIdx </span><span style="color:#FF79C6;">+</span><span style="color:#BD93F9;"> 1</span><span style="color:#F8F8F2;">]) </span><span style="color:#FF79C6;">?</span><span style="color:#BD93F9;"> null</span><span style="color:#FF79C6;"> :</span><span style="color:#F8F8F2;"> newCh[newEndIdx </span><span style="color:#FF79C6;">+</span><span style="color:#BD93F9;"> 1</span><span style="color:#F8F8F2;">].elm;</span></span>
<span class="line"><span style="color:#50FA7B;">    addVnodes</span><span style="color:#F8F8F2;">(</span></span>
<span class="line"><span style="color:#F8F8F2;">      parentElm,</span></span>
<span class="line"><span style="color:#F8F8F2;">      refElm,</span></span>
<span class="line"><span style="color:#F8F8F2;">      newCh,</span></span>
<span class="line"><span style="color:#F8F8F2;">      newStartIdx,</span></span>
<span class="line"><span style="color:#F8F8F2;">      newEndIdx,</span></span>
<span class="line"><span style="color:#F8F8F2;">      insertedVnodeQueue</span></span>
<span class="line"><span style="color:#F8F8F2;">    );</span></span>
<span class="line"><span style="color:#6272A4;">    // 说明新节点被遍历完了，老节点有剩余，说明这部分的节点被删掉了，则移除这些节点</span></span>
<span class="line"><span style="color:#F8F8F2;">  } </span><span style="color:#FF79C6;">else</span><span style="color:#FF79C6;"> if</span><span style="color:#F8F8F2;"> (newStartIdx </span><span style="color:#FF79C6;">&gt;</span><span style="color:#F8F8F2;"> newEndIdx) {</span></span>
<span class="line"><span style="color:#50FA7B;">    removeVnodes</span><span style="color:#F8F8F2;">(oldCh, oldStartIdx, oldEndIdx);</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,56))])}const m=a(d,[["render",y],["__file","mount.html.vue"]]),b=JSON.parse('{"path":"/vue2/mount.html","title":"Vue2.x框架原理分析-组件挂载","lang":"en-US","frontmatter":{"title":"Vue2.x框架原理分析-组件挂载","date":"2021-08-10T00:00:00.000Z","next":"parse","category":["Vue"],"type":["vue2"],"description":"mount this mountComponent core/instance/lifecycle render _render createElement render createComponent 节点是组件 _update vnode createPathFunction DOM-Diff 过程叫做 patch 过程。patch,意为“补丁”，...","head":[["meta",{"property":"og:url","content":"https://luxiag.github.io/luxiag/blog/vue2/mount.html"}],["meta",{"property":"og:title","content":"Vue2.x框架原理分析-组件挂载"}],["meta",{"property":"og:description","content":"mount this mountComponent core/instance/lifecycle render _render createElement render createComponent 节点是组件 _update vnode createPathFunction DOM-Diff 过程叫做 patch 过程。patch,意为“补丁”，..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2024-11-04T09:35:13.000Z"}],["meta",{"property":"article:published_time","content":"2021-08-10T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-11-04T09:35:13.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Vue2.x框架原理分析-组件挂载\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2021-08-10T00:00:00.000Z\\",\\"dateModified\\":\\"2024-11-04T09:35:13.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"luxiag\\",\\"url\\":\\"https://luxiag.github.io/luxiag\\"}]}"]]},"headers":[{"level":2,"title":"mount","slug":"mount","link":"#mount","children":[]},{"level":2,"title":"mountComponent","slug":"mountcomponent","link":"#mountcomponent","children":[{"level":3,"title":"render","slug":"render","link":"#render","children":[]},{"level":3,"title":"createElement","slug":"createelement","link":"#createelement","children":[]},{"level":3,"title":"createComponent","slug":"createcomponent","link":"#createcomponent","children":[]},{"level":3,"title":"_update","slug":"update","link":"#update","children":[]}]},{"level":2,"title":"createPathFunction","slug":"createpathfunction","link":"#createpathfunction","children":[{"level":3,"title":"path","slug":"path","link":"#path","children":[]}]}],"git":{"createdTime":1663833246000,"updatedTime":1730712913000,"contributors":[{"name":"卢祥","email":"example@gmail.com","commits":9},{"name":"luxiag","email":"luxiag@qq.com","commits":2},{"name":"luxiang","email":"luxiag@qq.com","commits":2},{"name":"卢祥","email":"example@qq.com","commits":2}]},"readingTime":{"minutes":15.96,"words":4788},"filePathRelative":"vue2/mount.md","localizedDate":"August 10, 2021","excerpt":"<h2>mount</h2>\\n<div class=\\"language-js line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"js\\" data-title=\\"js\\" style=\\"background-color:#282A36;color:#F8F8F2\\"><pre class=\\"shiki dracula vp-code\\"><code><span class=\\"line\\"><span style=\\"color:#6272A4\\">// vue._init()</span></span>\\n<span class=\\"line\\"><span style=\\"color:#FF79C6\\">if</span><span style=\\"color:#F8F8F2\\"> (vm.$options.el) {</span></span>\\n<span class=\\"line\\"><span style=\\"color:#F8F8F2\\">  vm.</span><span style=\\"color:#50FA7B\\">$mount</span><span style=\\"color:#F8F8F2\\">(vm.$options.el);</span></span>\\n<span class=\\"line\\"><span style=\\"color:#F8F8F2\\">}</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{m as comp,b as data};
