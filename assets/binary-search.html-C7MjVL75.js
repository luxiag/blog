import{_ as n,c as a,a as l,o as e}from"./app-BcWk5rXQ.js";const p={};function o(F,s){return e(),a("div",null,s[0]||(s[0]=[l(`<p><strong>仅当列表是有序的时候，二分查找才管用</strong></p><p>找到列表的中间值，如果中间值大于查找值，则往数组的左边继续查找，如果小于查找值这往右边继续查找。</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">const</span><span style="color:#50FA7B;"> binary_search</span><span style="color:#FF79C6;"> =</span><span style="color:#F8F8F2;"> (</span><span style="color:#FFB86C;font-style:italic;">list</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">aim</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#FF79C6;">  let</span><span style="color:#F8F8F2;"> low </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> 0</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#FF79C6;">  let</span><span style="color:#F8F8F2;"> hight </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> list.length </span><span style="color:#FF79C6;">-</span><span style="color:#BD93F9;"> 1</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#FF79C6;">  let</span><span style="color:#F8F8F2;"> mid </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> 0</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#FF79C6;">  let</span><span style="color:#F8F8F2;"> guess;</span></span>
<span class="line"><span style="color:#FF79C6;">  while</span><span style="color:#F8F8F2;"> (low </span><span style="color:#FF79C6;">&lt;=</span><span style="color:#F8F8F2;"> hight) {</span></span>
<span class="line"><span style="color:#F8F8F2;">    mid </span><span style="color:#FF79C6;">=</span><span style="color:#50FA7B;"> parseInt</span><span style="color:#F8F8F2;">((low </span><span style="color:#FF79C6;">+</span><span style="color:#F8F8F2;"> hight) </span><span style="color:#FF79C6;">/</span><span style="color:#BD93F9;"> 2</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">    guess </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> list[mid];</span></span>
<span class="line"><span style="color:#FF79C6;">    if</span><span style="color:#F8F8F2;"> (guess </span><span style="color:#FF79C6;">==</span><span style="color:#F8F8F2;"> aim) {</span></span>
<span class="line"><span style="color:#FF79C6;">      return</span><span style="color:#F8F8F2;"> mid;</span></span>
<span class="line"><span style="color:#F8F8F2;">    } </span><span style="color:#FF79C6;">else</span><span style="color:#FF79C6;"> if</span><span style="color:#F8F8F2;"> (guess </span><span style="color:#FF79C6;">&gt;</span><span style="color:#F8F8F2;"> aim) {</span></span>
<span class="line"><span style="color:#F8F8F2;">      high </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> mid </span><span style="color:#FF79C6;">-</span><span style="color:#BD93F9;"> 1</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">    } </span><span style="color:#FF79C6;">else</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">      low </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> mid </span><span style="color:#FF79C6;">+</span><span style="color:#BD93F9;"> 1</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#FF79C6;">  return</span><span style="color:#BD93F9;"> null</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">};</span></span>
<span class="line"><span style="color:#6272A4;">// 运行时间 log2(n)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="在排序数组中查找元素的第一个和最后一个位置" tabindex="-1"><a class="header-anchor" href="#在排序数组中查找元素的第一个和最后一个位置"><span>在排序数组中查找元素的第一个和最后一个位置</span></a></h2><p><a href="https://leetcode.cn/problems/find-first-and-last-position-of-element-in-sorted-array/" target="_blank" rel="noopener noreferrer">https://leetcode.cn/problems/find-first-and-last-position-of-element-in-sorted-array/</a> 给你一个按照非递减顺序排列的整数数组 nums，和一个目标值 target。请你找出给定目标值在数组中的开始位置和结束位置。</p><p>如果数组中不存在目标值 target，返回 [-1, -1]。</p><p>你必须设计并实现<strong>时间复杂度为 O(log n)</strong> 的算法解决此问题。</p><div class="language-md line-numbers-mode" data-highlighter="shiki" data-ext="md" data-title="md" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#F8F8F2;">输入：nums = [</span><span style="color:#FF79C6;">5,7,7,8,8,10</span><span style="color:#F8F8F2;">], target = 8</span></span>
<span class="line"><span style="color:#F8F8F2;">输出：[</span><span style="color:#FF79C6;">3,4</span><span style="color:#F8F8F2;">]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">输入：nums = [</span><span style="color:#FF79C6;">5,7,7,8,8,10</span><span style="color:#F8F8F2;">], target = 6</span></span>
<span class="line"><span style="color:#F8F8F2;">输出：[</span><span style="color:#FF79C6;">-1,-1</span><span style="color:#F8F8F2;">]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-ts line-numbers-mode" data-highlighter="shiki" data-ext="ts" data-title="ts" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">function</span><span style="color:#50FA7B;"> searchRange</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">nums</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> number</span><span style="color:#F8F8F2;">[], </span><span style="color:#FFB86C;font-style:italic;">target</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> number</span><span style="color:#F8F8F2;">)</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> number</span><span style="color:#F8F8F2;">[] {</span></span>
<span class="line"><span style="color:#FF79C6;">  let</span><span style="color:#F8F8F2;"> result</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;">number</span><span style="color:#F8F8F2;">[] </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> [</span><span style="color:#FF79C6;">-</span><span style="color:#BD93F9;">1</span><span style="color:#F8F8F2;">,</span><span style="color:#FF79C6;">-</span><span style="color:#BD93F9;">1</span><span style="color:#F8F8F2;">]</span></span>
<span class="line"><span style="color:#FF79C6;">  const</span><span style="color:#F8F8F2;"> leftIdx </span><span style="color:#FF79C6;">=</span><span style="color:#50FA7B;"> search</span><span style="color:#F8F8F2;">(nums,target,</span><span style="color:#BD93F9;">true</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#FF79C6;">  const</span><span style="color:#F8F8F2;"> rightIdx </span><span style="color:#FF79C6;">=</span><span style="color:#50FA7B;"> search</span><span style="color:#F8F8F2;">(nums,target,</span><span style="color:#BD93F9;">false</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">-</span><span style="color:#BD93F9;">1</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">  if</span><span style="color:#F8F8F2;">(leftIdx </span><span style="color:#FF79C6;">&lt;=</span><span style="color:#F8F8F2;"> rightIdx </span><span style="color:#FF79C6;">&amp;&amp;</span><span style="color:#F8F8F2;"> rightIdx</span><span style="color:#FF79C6;">&lt;</span><span style="color:#F8F8F2;"> nums.length </span><span style="color:#FF79C6;">&amp;&amp;</span><span style="color:#F8F8F2;"> nums[leftIdx ]</span><span style="color:#FF79C6;">===</span><span style="color:#F8F8F2;"> target  </span><span style="color:#FF79C6;">&amp;&amp;</span><span style="color:#F8F8F2;"> nums[rightIdx] </span><span style="color:#FF79C6;">===</span><span style="color:#F8F8F2;"> target) {</span></span>
<span class="line"><span style="color:#F8F8F2;">    result </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> [leftIdx,rightIdx]</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#FF79C6;">  return</span><span style="color:#F8F8F2;"> result</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">// lower = true 获取左边界</span></span>
<span class="line"><span style="color:#6272A4;">// lower = false 获取右边界</span></span>
<span class="line"><span style="color:#FF79C6;">function</span><span style="color:#50FA7B;"> search</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">nums</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> number</span><span style="color:#F8F8F2;">[], </span><span style="color:#FFB86C;font-style:italic;">target</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> number</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">lower</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> boolean</span><span style="color:#F8F8F2;">)</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> number</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#FF79C6;">  let</span><span style="color:#F8F8F2;"> left </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> 0</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">    right </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> nums.length </span><span style="color:#FF79C6;">-</span><span style="color:#BD93F9;"> 1</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#FF79C6;">  while</span><span style="color:#F8F8F2;"> (left </span><span style="color:#FF79C6;">&lt;=</span><span style="color:#F8F8F2;"> right) {</span></span>
<span class="line"><span style="color:#FF79C6;">    const</span><span style="color:#F8F8F2;"> mid </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> Math.</span><span style="color:#50FA7B;">floor</span><span style="color:#F8F8F2;">((left </span><span style="color:#FF79C6;">+</span><span style="color:#F8F8F2;"> right) </span><span style="color:#FF79C6;">/</span><span style="color:#BD93F9;"> 2</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#6272A4;">    //  &gt; right 最终会得到比target大的第一位数  右边界</span></span>
<span class="line"><span style="color:#6272A4;">    //  &gt;= right 最终会得到target所在位置，right -1后，即target已经离开匹配范围，左边界</span></span>
<span class="line"><span style="color:#FF79C6;">    if</span><span style="color:#F8F8F2;"> (nums[mid] </span><span style="color:#FF79C6;">&gt;</span><span style="color:#F8F8F2;"> target </span><span style="color:#FF79C6;">||</span><span style="color:#F8F8F2;"> (lower </span><span style="color:#FF79C6;">&amp;&amp;</span><span style="color:#F8F8F2;"> nums[mid] </span><span style="color:#FF79C6;">&gt;=</span><span style="color:#F8F8F2;"> target)) {</span></span>
<span class="line"><span style="color:#F8F8F2;">      right </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> mid </span><span style="color:#FF79C6;">-</span><span style="color:#BD93F9;"> 1</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">    } </span><span style="color:#FF79C6;">else</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">      left </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> mid </span><span style="color:#FF79C6;">+</span><span style="color:#BD93F9;"> 1</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#FF79C6;">  return</span><span style="color:#F8F8F2;"> right </span><span style="color:#FF79C6;">+</span><span style="color:#BD93F9;"> 1</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="寻找两个正序数组的中位数" tabindex="-1"><a class="header-anchor" href="#寻找两个正序数组的中位数"><span>寻找两个正序数组的中位数</span></a></h2><p><a href="https://leetcode.cn/problems/median-of-two-sorted-arrays/" target="_blank" rel="noopener noreferrer">https://leetcode.cn/problems/median-of-two-sorted-arrays/</a></p><p>给定两个大小分别为 m 和 n 的正序（从小到大）数组 nums1 和 nums2。请你找出并返回这两个正序数组的 中位数 <strong>算法的时间复杂度应该为 O(log (m+n)) 。</strong></p><div class="language-md line-numbers-mode" data-highlighter="shiki" data-ext="md" data-title="md" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#F8F8F2;">输入：nums1 = [</span><span style="color:#FF79C6;">1,3</span><span style="color:#F8F8F2;">], nums2 = [</span><span style="color:#FF79C6;">2</span><span style="color:#F8F8F2;">]</span></span>
<span class="line"><span style="color:#F8F8F2;">输出：2.00000</span></span>
<span class="line"><span style="color:#F8F8F2;">解释：合并数组 = [</span><span style="color:#FF79C6;">1,2,3</span><span style="color:#F8F8F2;">] ，中位数 2</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,13)]))}const r=n(p,[["render",o],["__file","binary-search.html.vue"]]),c=JSON.parse('{"path":"/algorithm/binary-search.html","title":"二分查找","lang":"en-US","frontmatter":{"title":"二分查找","reference":"算法图解","date":"2022-09-15T00:00:00.000Z","category":["算法"],"tag":["算法图解"],"description":"仅当列表是有序的时候，二分查找才管用 找到列表的中间值，如果中间值大于查找值，则往数组的左边继续查找，如果小于查找值这往右边继续查找。 在排序数组中查找元素的第一个和最后一个位置 https://leetcode.cn/problems/find-first-and-last-position-of-element-in-sorted-array/ 给...","head":[["meta",{"property":"og:url","content":"https://luxiag.github.io/luxiag/blog/algorithm/binary-search.html"}],["meta",{"property":"og:title","content":"二分查找"}],["meta",{"property":"og:description","content":"仅当列表是有序的时候，二分查找才管用 找到列表的中间值，如果中间值大于查找值，则往数组的左边继续查找，如果小于查找值这往右边继续查找。 在排序数组中查找元素的第一个和最后一个位置 https://leetcode.cn/problems/find-first-and-last-position-of-element-in-sorted-array/ 给..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2022-11-17T09:21:42.000Z"}],["meta",{"property":"article:tag","content":"算法图解"}],["meta",{"property":"article:published_time","content":"2022-09-15T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2022-11-17T09:21:42.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"二分查找\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-09-15T00:00:00.000Z\\",\\"dateModified\\":\\"2022-11-17T09:21:42.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"luxiag\\",\\"url\\":\\"https://luxiag.github.io/luxiag\\"}]}"]]},"headers":[{"level":2,"title":"在排序数组中查找元素的第一个和最后一个位置","slug":"在排序数组中查找元素的第一个和最后一个位置","link":"#在排序数组中查找元素的第一个和最后一个位置","children":[]},{"level":2,"title":"寻找两个正序数组的中位数","slug":"寻找两个正序数组的中位数","link":"#寻找两个正序数组的中位数","children":[]}],"git":{"createdTime":1663833246000,"updatedTime":1668676902000,"contributors":[{"name":"卢祥","email":"example@gmail.com","commits":4},{"name":"luxiang","email":"luxiag@qq.com","commits":3},{"name":"卢祥","email":"example@email.com","commits":1}]},"readingTime":{"minutes":1.79,"words":536},"filePathRelative":"algorithm/binary-search.md","localizedDate":"September 15, 2022","excerpt":"<p><strong>仅当列表是有序的时候，二分查找才管用</strong></p>\\n<p>找到列表的中间值，如果中间值大于查找值，则往数组的左边继续查找，如果小于查找值这往右边继续查找。</p>\\n<div class=\\"language-js line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"js\\" data-title=\\"js\\" style=\\"background-color:#282A36;color:#F8F8F2\\"><pre class=\\"shiki dracula vp-code\\"><code><span class=\\"line\\"><span style=\\"color:#FF79C6\\">const</span><span style=\\"color:#50FA7B\\"> binary_search</span><span style=\\"color:#FF79C6\\"> =</span><span style=\\"color:#F8F8F2\\"> (</span><span style=\\"color:#FFB86C;font-style:italic\\">list</span><span style=\\"color:#F8F8F2\\">, </span><span style=\\"color:#FFB86C;font-style:italic\\">aim</span><span style=\\"color:#F8F8F2\\">) </span><span style=\\"color:#FF79C6\\">=&gt;</span><span style=\\"color:#F8F8F2\\"> {</span></span>\\n<span class=\\"line\\"><span style=\\"color:#FF79C6\\">  let</span><span style=\\"color:#F8F8F2\\"> low </span><span style=\\"color:#FF79C6\\">=</span><span style=\\"color:#BD93F9\\"> 0</span><span style=\\"color:#F8F8F2\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color:#FF79C6\\">  let</span><span style=\\"color:#F8F8F2\\"> hight </span><span style=\\"color:#FF79C6\\">=</span><span style=\\"color:#F8F8F2\\"> list.length </span><span style=\\"color:#FF79C6\\">-</span><span style=\\"color:#BD93F9\\"> 1</span><span style=\\"color:#F8F8F2\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color:#FF79C6\\">  let</span><span style=\\"color:#F8F8F2\\"> mid </span><span style=\\"color:#FF79C6\\">=</span><span style=\\"color:#BD93F9\\"> 0</span><span style=\\"color:#F8F8F2\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color:#FF79C6\\">  let</span><span style=\\"color:#F8F8F2\\"> guess;</span></span>\\n<span class=\\"line\\"><span style=\\"color:#FF79C6\\">  while</span><span style=\\"color:#F8F8F2\\"> (low </span><span style=\\"color:#FF79C6\\">&lt;=</span><span style=\\"color:#F8F8F2\\"> hight) {</span></span>\\n<span class=\\"line\\"><span style=\\"color:#F8F8F2\\">    mid </span><span style=\\"color:#FF79C6\\">=</span><span style=\\"color:#50FA7B\\"> parseInt</span><span style=\\"color:#F8F8F2\\">((low </span><span style=\\"color:#FF79C6\\">+</span><span style=\\"color:#F8F8F2\\"> hight) </span><span style=\\"color:#FF79C6\\">/</span><span style=\\"color:#BD93F9\\"> 2</span><span style=\\"color:#F8F8F2\\">);</span></span>\\n<span class=\\"line\\"><span style=\\"color:#F8F8F2\\">    guess </span><span style=\\"color:#FF79C6\\">=</span><span style=\\"color:#F8F8F2\\"> list[mid];</span></span>\\n<span class=\\"line\\"><span style=\\"color:#FF79C6\\">    if</span><span style=\\"color:#F8F8F2\\"> (guess </span><span style=\\"color:#FF79C6\\">==</span><span style=\\"color:#F8F8F2\\"> aim) {</span></span>\\n<span class=\\"line\\"><span style=\\"color:#FF79C6\\">      return</span><span style=\\"color:#F8F8F2\\"> mid;</span></span>\\n<span class=\\"line\\"><span style=\\"color:#F8F8F2\\">    } </span><span style=\\"color:#FF79C6\\">else</span><span style=\\"color:#FF79C6\\"> if</span><span style=\\"color:#F8F8F2\\"> (guess </span><span style=\\"color:#FF79C6\\">&gt;</span><span style=\\"color:#F8F8F2\\"> aim) {</span></span>\\n<span class=\\"line\\"><span style=\\"color:#F8F8F2\\">      high </span><span style=\\"color:#FF79C6\\">=</span><span style=\\"color:#F8F8F2\\"> mid </span><span style=\\"color:#FF79C6\\">-</span><span style=\\"color:#BD93F9\\"> 1</span><span style=\\"color:#F8F8F2\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color:#F8F8F2\\">    } </span><span style=\\"color:#FF79C6\\">else</span><span style=\\"color:#F8F8F2\\"> {</span></span>\\n<span class=\\"line\\"><span style=\\"color:#F8F8F2\\">      low </span><span style=\\"color:#FF79C6\\">=</span><span style=\\"color:#F8F8F2\\"> mid </span><span style=\\"color:#FF79C6\\">+</span><span style=\\"color:#BD93F9\\"> 1</span><span style=\\"color:#F8F8F2\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color:#F8F8F2\\">    }</span></span>\\n<span class=\\"line\\"><span style=\\"color:#F8F8F2\\">  }</span></span>\\n<span class=\\"line\\"><span style=\\"color:#FF79C6\\">  return</span><span style=\\"color:#BD93F9\\"> null</span><span style=\\"color:#F8F8F2\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color:#F8F8F2\\">};</span></span>\\n<span class=\\"line\\"><span style=\\"color:#6272A4\\">// 运行时间 log2(n)</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{r as comp,c as data};
