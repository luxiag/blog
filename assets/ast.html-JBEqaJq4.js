import{_ as n,c as a,a as l,o as p}from"./app-xakek6kx.js";const o={};function e(F,s){return p(),a("div",null,s[0]||(s[0]=[l(`<h2 id="解析过程" tabindex="-1"><a class="header-anchor" href="#解析过程"><span>解析过程</span></a></h2><p>AST 整个解析过程分为两个步骤</p><p>分词：将整个代码字符串分割成语法单元数组 语法分析：建立分析语法单元之间的关系</p><h2 id="语法单元" tabindex="-1"><a class="header-anchor" href="#语法单元"><span>语法单元</span></a></h2><p>Javascript 代码中的语法单元主要包括以下这么几种</p><ul><li>关键字：<code>const</code>、<code>let</code>、<code>var</code>等</li><li>标识符：可能是一个变量，也可能是 if、else 这些关键字，又或者是 true、false 这些常量</li><li>运算符</li><li>数字</li><li>空格</li><li>注释</li></ul><h2 id="词法分析" tabindex="-1"><a class="header-anchor" href="#词法分析"><span>词法分析</span></a></h2><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> jsx </span><span style="color:#FF79C6;">=</span><span style="color:#F1FA8C;"> \`let element=&lt;h1&gt;hello&lt;/h1&gt;\`</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">function</span><span style="color:#50FA7B;"> lexical</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">code</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#FF79C6;">  const</span><span style="color:#F8F8F2;"> tokens </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> [];</span></span>
<span class="line"><span style="color:#FF79C6;">  for</span><span style="color:#F8F8F2;"> (</span><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> i </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> 0</span><span style="color:#F8F8F2;">; i </span><span style="color:#FF79C6;">&lt;</span><span style="color:#F8F8F2;"> code.length; i</span><span style="color:#FF79C6;">++</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#FF79C6;">    let</span><span style="color:#F8F8F2;"> char </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> code.</span><span style="color:#50FA7B;">charAt</span><span style="color:#F8F8F2;">(i);</span></span>
<span class="line"><span style="color:#FF79C6;">    if</span><span style="color:#F8F8F2;"> (char </span><span style="color:#FF79C6;">==</span><span style="color:#E9F284;"> &quot;</span><span style="color:#F1FA8C;">=</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">      tokens.</span><span style="color:#50FA7B;">push</span><span style="color:#F8F8F2;">({</span></span>
<span class="line"><span style="color:#F8F8F2;">        type</span><span style="color:#FF79C6;">:</span><span style="color:#E9F284;"> &quot;</span><span style="color:#F1FA8C;">operator</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">        value</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> char,</span></span>
<span class="line"><span style="color:#F8F8F2;">      });</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#FF79C6;">    if</span><span style="color:#F8F8F2;"> (char </span><span style="color:#FF79C6;">==</span><span style="color:#E9F284;"> &quot;</span><span style="color:#F1FA8C;">&lt;</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#FF79C6;">      const</span><span style="color:#F8F8F2;"> token </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">        type</span><span style="color:#FF79C6;">:</span><span style="color:#E9F284;"> &quot;</span><span style="color:#F1FA8C;">JSXElement</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">        value</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> char,</span></span>
<span class="line"><span style="color:#F8F8F2;">      };</span></span>
<span class="line"><span style="color:#F8F8F2;">      tokens.</span><span style="color:#50FA7B;">push</span><span style="color:#F8F8F2;">(token);</span></span>
<span class="line"><span style="color:#FF79C6;">      let</span><span style="color:#F8F8F2;"> isClose </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> false</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#FF79C6;">      for</span><span style="color:#F8F8F2;"> (i</span><span style="color:#FF79C6;">++</span><span style="color:#F8F8F2;">; i </span><span style="color:#FF79C6;">&lt;</span><span style="color:#F8F8F2;"> code.length; i</span><span style="color:#FF79C6;">++</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">        char </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> code.</span><span style="color:#50FA7B;">charAt</span><span style="color:#F8F8F2;">(i);</span></span>
<span class="line"><span style="color:#F8F8F2;">        token.value </span><span style="color:#FF79C6;">+=</span><span style="color:#F8F8F2;"> char;</span></span>
<span class="line"><span style="color:#FF79C6;">        if</span><span style="color:#F8F8F2;"> (char </span><span style="color:#FF79C6;">==</span><span style="color:#E9F284;"> &quot;</span><span style="color:#F1FA8C;">&gt;</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#FF79C6;">          if</span><span style="color:#F8F8F2;"> (isClose) {</span></span>
<span class="line"><span style="color:#FF79C6;">            break</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">          } </span><span style="color:#FF79C6;">else</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">            isClose </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> true</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">          }</span></span>
<span class="line"><span style="color:#F8F8F2;">        }</span></span>
<span class="line"><span style="color:#F8F8F2;">      }</span></span>
<span class="line"><span style="color:#FF79C6;">      continue</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#FF79C6;">    if</span><span style="color:#F8F8F2;"> (</span><span style="color:#FF5555;">/</span><span style="color:#8BE9FD;">[</span><span style="color:#BD93F9;">a-zA-Z</span><span style="color:#F1FA8C;">\\$\\_</span><span style="color:#8BE9FD;">]</span><span style="color:#FF5555;">/</span><span style="color:#F8F8F2;">.</span><span style="color:#50FA7B;">test</span><span style="color:#F8F8F2;">(char)) {</span></span>
<span class="line"><span style="color:#FF79C6;">      const</span><span style="color:#F8F8F2;"> token </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">        type</span><span style="color:#FF79C6;">:</span><span style="color:#E9F284;"> &quot;</span><span style="color:#F1FA8C;">Identifier</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">        value</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> char,</span></span>
<span class="line"><span style="color:#F8F8F2;">      };</span></span>
<span class="line"><span style="color:#F8F8F2;">      tokens.</span><span style="color:#50FA7B;">push</span><span style="color:#F8F8F2;">(token);</span></span>
<span class="line"><span style="color:#FF79C6;">      for</span><span style="color:#F8F8F2;"> (i</span><span style="color:#FF79C6;">++</span><span style="color:#F8F8F2;">; i </span><span style="color:#FF79C6;">&lt;</span><span style="color:#F8F8F2;"> code.length; i</span><span style="color:#FF79C6;">++</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">        char </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> code.</span><span style="color:#50FA7B;">charAt</span><span style="color:#F8F8F2;">(i);</span></span>
<span class="line"><span style="color:#FF79C6;">        if</span><span style="color:#F8F8F2;"> (</span><span style="color:#FF5555;">/</span><span style="color:#8BE9FD;">[</span><span style="color:#BD93F9;">a-zA-Z</span><span style="color:#F1FA8C;">\\$\\_</span><span style="color:#8BE9FD;">]</span><span style="color:#FF5555;">/</span><span style="color:#F8F8F2;">.</span><span style="color:#50FA7B;">test</span><span style="color:#F8F8F2;">(char)) {</span></span>
<span class="line"><span style="color:#F8F8F2;">          token.value </span><span style="color:#FF79C6;">+=</span><span style="color:#F8F8F2;"> char;</span></span>
<span class="line"><span style="color:#F8F8F2;">        } </span><span style="color:#FF79C6;">else</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">          i</span><span style="color:#FF79C6;">--</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#FF79C6;">          break</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">        }</span></span>
<span class="line"><span style="color:#F8F8F2;">      }</span></span>
<span class="line"><span style="color:#FF79C6;">      continue</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">    if</span><span style="color:#F8F8F2;"> (</span><span style="color:#FF5555;">/</span><span style="color:#BD93F9;">\\s</span><span style="color:#FF5555;">/</span><span style="color:#F8F8F2;">.</span><span style="color:#50FA7B;">test</span><span style="color:#F8F8F2;">(char)) {</span></span>
<span class="line"><span style="color:#FF79C6;">      const</span><span style="color:#F8F8F2;"> token </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">        type</span><span style="color:#FF79C6;">:</span><span style="color:#E9F284;"> &quot;</span><span style="color:#F1FA8C;">whitespace</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">        value</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> char,</span></span>
<span class="line"><span style="color:#F8F8F2;">      };</span></span>
<span class="line"><span style="color:#F8F8F2;">      tokens.</span><span style="color:#50FA7B;">push</span><span style="color:#F8F8F2;">(token);</span></span>
<span class="line"><span style="color:#FF79C6;">      for</span><span style="color:#F8F8F2;"> (i</span><span style="color:#FF79C6;">++</span><span style="color:#F8F8F2;">; i </span><span style="color:#FF79C6;">&lt;</span><span style="color:#F8F8F2;"> code.length; i</span><span style="color:#FF79C6;">++</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">        char </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> code.charAt[i];</span></span>
<span class="line"><span style="color:#FF79C6;">        if</span><span style="color:#F8F8F2;"> (</span><span style="color:#FF5555;">/</span><span style="color:#BD93F9;">\\s</span><span style="color:#FF5555;">/</span><span style="color:#F8F8F2;">.</span><span style="color:#50FA7B;">test</span><span style="color:#F8F8F2;">(char)) {</span></span>
<span class="line"><span style="color:#F8F8F2;">          token.value </span><span style="color:#FF79C6;">+=</span><span style="color:#F8F8F2;"> char;</span></span>
<span class="line"><span style="color:#F8F8F2;">        } </span><span style="color:#FF79C6;">else</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">          i</span><span style="color:#FF79C6;">--</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#FF79C6;">          break</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">        }</span></span>
<span class="line"><span style="color:#F8F8F2;">      }</span></span>
<span class="line"><span style="color:#FF79C6;">      continue</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#FF79C6;">  return</span><span style="color:#F8F8F2;"> tokens;</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> result </span><span style="color:#FF79C6;">=</span><span style="color:#50FA7B;"> lexical</span><span style="color:#F8F8F2;">(jsx);</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(result);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><details class="hint-container details"><summary>result</summary><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#F8F8F2;">[</span></span>
<span class="line"><span style="color:#F8F8F2;">  { type</span><span style="color:#FF79C6;">:</span><span style="color:#E9F284;"> &quot;</span><span style="color:#F1FA8C;">Identifier</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">, value</span><span style="color:#FF79C6;">:</span><span style="color:#E9F284;"> &quot;</span><span style="color:#F1FA8C;">let</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;"> },</span></span>
<span class="line"><span style="color:#F8F8F2;">  { type</span><span style="color:#FF79C6;">:</span><span style="color:#E9F284;"> &quot;</span><span style="color:#F1FA8C;">whitespace</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">, value</span><span style="color:#FF79C6;">:</span><span style="color:#E9F284;"> &quot;</span><span style="color:#E9F284;"> &quot;</span><span style="color:#F8F8F2;"> },</span></span>
<span class="line"><span style="color:#F8F8F2;">  { type</span><span style="color:#FF79C6;">:</span><span style="color:#E9F284;"> &quot;</span><span style="color:#F1FA8C;">Identifier</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">, value</span><span style="color:#FF79C6;">:</span><span style="color:#E9F284;"> &quot;</span><span style="color:#F1FA8C;">element</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;"> },</span></span>
<span class="line"><span style="color:#F8F8F2;">  { type</span><span style="color:#FF79C6;">:</span><span style="color:#E9F284;"> &quot;</span><span style="color:#F1FA8C;">operator</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">, value</span><span style="color:#FF79C6;">:</span><span style="color:#E9F284;"> &quot;</span><span style="color:#F1FA8C;">=</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;"> },</span></span>
<span class="line"><span style="color:#F8F8F2;">  { type</span><span style="color:#FF79C6;">:</span><span style="color:#E9F284;"> &quot;</span><span style="color:#F1FA8C;">JSXElement</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">, value</span><span style="color:#FF79C6;">:</span><span style="color:#E9F284;"> &quot;</span><span style="color:#F1FA8C;">&lt;h1&gt;hello&lt;/h1&gt;</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;"> },</span></span>
<span class="line"><span style="color:#F8F8F2;">];</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h2 id="语法分析" tabindex="-1"><a class="header-anchor" href="#语法分析"><span>语法分析</span></a></h2><ul><li>语义分析则是将得到的词汇进行一个立体的组合，确定词语之间的关系</li><li>简单来说语法分析是对语句和表达式识别，这是个递归过程</li></ul><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#6272A4;">// babylon7 https://astexplorer.net/</span></span>
<span class="line"><span style="color:#6272A4;">// babylon7 https://astexplorer.net/</span></span>
<span class="line"><span style="color:#FF79C6;">function</span><span style="color:#50FA7B;"> parse</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">tokens</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#FF79C6;">  const</span><span style="color:#F8F8F2;"> ast </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">    type</span><span style="color:#FF79C6;">:</span><span style="color:#E9F284;"> &quot;</span><span style="color:#F1FA8C;">Program</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">    body</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> [],</span></span>
<span class="line"><span style="color:#F8F8F2;">    sourceType</span><span style="color:#FF79C6;">:</span><span style="color:#E9F284;"> &quot;</span><span style="color:#F1FA8C;">script</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">  };</span></span>
<span class="line"><span style="color:#FF79C6;">  let</span><span style="color:#F8F8F2;"> i </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> 0</span><span style="color:#F8F8F2;">; </span><span style="color:#6272A4;">//标示当前位置</span></span>
<span class="line"><span style="color:#FF79C6;">  let</span><span style="color:#F8F8F2;"> currentToken; </span><span style="color:#6272A4;">//当前的符号</span></span>
<span class="line"><span style="color:#FF79C6;">  while</span><span style="color:#F8F8F2;"> ((currentToken </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> tokens[i])) {</span></span>
<span class="line"><span style="color:#FF79C6;">    if</span><span style="color:#F8F8F2;"> (</span></span>
<span class="line"><span style="color:#F8F8F2;">      currentToken.type </span><span style="color:#FF79C6;">==</span><span style="color:#E9F284;"> &quot;</span><span style="color:#F1FA8C;">Identifier</span><span style="color:#E9F284;">&quot;</span><span style="color:#FF79C6;"> &amp;&amp;</span></span>
<span class="line"><span style="color:#F8F8F2;">      (currentToken.value </span><span style="color:#FF79C6;">==</span><span style="color:#E9F284;"> &quot;</span><span style="color:#F1FA8C;">let</span><span style="color:#E9F284;">&quot;</span><span style="color:#FF79C6;"> ||</span><span style="color:#F8F8F2;"> currentToken.value </span><span style="color:#FF79C6;">==</span><span style="color:#E9F284;"> &quot;</span><span style="color:#F1FA8C;">var</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">    ) {</span></span>
<span class="line"><span style="color:#FF79C6;">      const</span><span style="color:#F8F8F2;"> VariableDeclaration </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">        type</span><span style="color:#FF79C6;">:</span><span style="color:#E9F284;"> &quot;</span><span style="color:#F1FA8C;">VariableDeclaration</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">        declarations</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> [],</span></span>
<span class="line"><span style="color:#F8F8F2;">      };</span></span>
<span class="line"><span style="color:#F8F8F2;">      i </span><span style="color:#FF79C6;">+=</span><span style="color:#BD93F9;"> 2</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">      currentToken </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> tokens[i];</span></span>
<span class="line"><span style="color:#FF79C6;">      let</span><span style="color:#F8F8F2;"> VariableDeclarator </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">        type</span><span style="color:#FF79C6;">:</span><span style="color:#E9F284;"> &quot;</span><span style="color:#F1FA8C;">VariableDeclarator</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">        id</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">          type</span><span style="color:#FF79C6;">:</span><span style="color:#E9F284;"> &quot;</span><span style="color:#F1FA8C;">Identifier</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">          name</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> currentToken.value,</span></span>
<span class="line"><span style="color:#F8F8F2;">        },</span></span>
<span class="line"><span style="color:#F8F8F2;">      };</span></span>
<span class="line"><span style="color:#F8F8F2;">      VariableDeclaration.declarations.</span><span style="color:#50FA7B;">push</span><span style="color:#F8F8F2;">(VariableDeclarator);</span></span>
<span class="line"><span style="color:#F8F8F2;">      i </span><span style="color:#FF79C6;">+=</span><span style="color:#BD93F9;"> 2</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">      currentToken </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> tokens[i];</span></span>
<span class="line"><span style="color:#FF79C6;">      if</span><span style="color:#F8F8F2;"> (currentToken.type </span><span style="color:#FF79C6;">==</span><span style="color:#E9F284;"> &quot;</span><span style="color:#F1FA8C;">JSXElement</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#FF79C6;">        let</span><span style="color:#F8F8F2;"> value </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> currentToken.value;</span></span>
<span class="line"><span style="color:#FF79C6;">        let</span><span style="color:#F8F8F2;"> [, type, children] </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> value.</span><span style="color:#50FA7B;">match</span><span style="color:#F8F8F2;">(</span><span style="color:#FF5555;">/</span><span style="color:#FFB86C;">(</span><span style="color:#8BE9FD;">[</span><span style="color:#FF5555;">^</span><span style="color:#F1FA8C;">&lt;</span><span style="color:#8BE9FD;">]</span><span style="color:#FF79C6;">+?</span><span style="color:#FFB86C;">)</span><span style="color:#F1FA8C;">&gt;</span><span style="color:#FFB86C;">(</span><span style="color:#8BE9FD;">[</span><span style="color:#FF5555;">^</span><span style="color:#F1FA8C;">&lt;</span><span style="color:#8BE9FD;">]</span><span style="color:#FF79C6;">+</span><span style="color:#FFB86C;">)</span><span style="color:#F1FA8C;">&lt;\\/</span><span style="color:#FF79C6;">\\1</span><span style="color:#F1FA8C;">&gt;</span><span style="color:#FF5555;">/</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">        VariableDeclarator.init </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">          type</span><span style="color:#FF79C6;">:</span><span style="color:#E9F284;"> &quot;</span><span style="color:#F1FA8C;">JSXElement</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">          openingElement</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">            type</span><span style="color:#FF79C6;">:</span><span style="color:#E9F284;"> &quot;</span><span style="color:#F1FA8C;">JSXOpeningElement</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">            name</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">              type</span><span style="color:#FF79C6;">:</span><span style="color:#E9F284;"> &quot;</span><span style="color:#F1FA8C;">JSXIdentifier</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">              name</span><span style="color:#FF79C6;">:</span><span style="color:#E9F284;"> &quot;</span><span style="color:#F1FA8C;">h1</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">            },</span></span>
<span class="line"><span style="color:#F8F8F2;">          },</span></span>
<span class="line"><span style="color:#F8F8F2;">          closingElement</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">            type</span><span style="color:#FF79C6;">:</span><span style="color:#E9F284;"> &quot;</span><span style="color:#F1FA8C;">JSXClosingElement</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">            name</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">              type</span><span style="color:#FF79C6;">:</span><span style="color:#E9F284;"> &quot;</span><span style="color:#F1FA8C;">JSXIdentifier</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">              name</span><span style="color:#FF79C6;">:</span><span style="color:#E9F284;"> &quot;</span><span style="color:#F1FA8C;">h1</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">            },</span></span>
<span class="line"><span style="color:#F8F8F2;">          },</span></span>
<span class="line"><span style="color:#F8F8F2;">          name</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> type,</span></span>
<span class="line"><span style="color:#F8F8F2;">          children</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> [</span></span>
<span class="line"><span style="color:#F8F8F2;">            {</span></span>
<span class="line"><span style="color:#F8F8F2;">              type</span><span style="color:#FF79C6;">:</span><span style="color:#E9F284;"> &quot;</span><span style="color:#F1FA8C;">JSXText</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">              value</span><span style="color:#FF79C6;">:</span><span style="color:#E9F284;"> &quot;</span><span style="color:#F1FA8C;">hello</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">            },</span></span>
<span class="line"><span style="color:#F8F8F2;">          ],</span></span>
<span class="line"><span style="color:#F8F8F2;">        };</span></span>
<span class="line"><span style="color:#F8F8F2;">      } </span><span style="color:#FF79C6;">else</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">        VariableDeclarator.init </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">          type</span><span style="color:#FF79C6;">:</span><span style="color:#E9F284;"> &quot;</span><span style="color:#F1FA8C;">Literal</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">          value</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> currentToken.value,</span></span>
<span class="line"><span style="color:#F8F8F2;">        };</span></span>
<span class="line"><span style="color:#F8F8F2;">      }</span></span>
<span class="line"><span style="color:#F8F8F2;">      ast.body.</span><span style="color:#50FA7B;">push</span><span style="color:#F8F8F2;">(VariableDeclaration);</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">    i</span><span style="color:#FF79C6;">++</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#FF79C6;">  return</span><span style="color:#F8F8F2;"> ast;</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> tokens </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> [</span></span>
<span class="line"><span style="color:#F8F8F2;">  { type</span><span style="color:#FF79C6;">:</span><span style="color:#E9F284;"> &quot;</span><span style="color:#F1FA8C;">Identifier</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">, value</span><span style="color:#FF79C6;">:</span><span style="color:#E9F284;"> &quot;</span><span style="color:#F1FA8C;">let</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;"> },</span></span>
<span class="line"><span style="color:#F8F8F2;">  { type</span><span style="color:#FF79C6;">:</span><span style="color:#E9F284;"> &quot;</span><span style="color:#F1FA8C;">whitespace</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">, value</span><span style="color:#FF79C6;">:</span><span style="color:#E9F284;"> &quot;</span><span style="color:#E9F284;"> &quot;</span><span style="color:#F8F8F2;"> },</span></span>
<span class="line"><span style="color:#F8F8F2;">  { type</span><span style="color:#FF79C6;">:</span><span style="color:#E9F284;"> &quot;</span><span style="color:#F1FA8C;">Identifier</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">, value</span><span style="color:#FF79C6;">:</span><span style="color:#E9F284;"> &quot;</span><span style="color:#F1FA8C;">element</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;"> },</span></span>
<span class="line"><span style="color:#F8F8F2;">  { type</span><span style="color:#FF79C6;">:</span><span style="color:#E9F284;"> &quot;</span><span style="color:#F1FA8C;">operator</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">, value</span><span style="color:#FF79C6;">:</span><span style="color:#E9F284;"> &quot;</span><span style="color:#F1FA8C;">=</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;"> },</span></span>
<span class="line"><span style="color:#F8F8F2;">  { type</span><span style="color:#FF79C6;">:</span><span style="color:#E9F284;"> &quot;</span><span style="color:#F1FA8C;">JSXElement</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">, value</span><span style="color:#FF79C6;">:</span><span style="color:#E9F284;"> &quot;</span><span style="color:#F1FA8C;">&lt;h1&gt;hello&lt;/h1&gt;</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;"> },</span></span>
<span class="line"><span style="color:#F8F8F2;">];</span></span>
<span class="line"><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> result </span><span style="color:#FF79C6;">=</span><span style="color:#50FA7B;"> parse</span><span style="color:#F8F8F2;">(tokens);</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(result);</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#BD93F9;">JSON</span><span style="color:#F8F8F2;">.</span><span style="color:#50FA7B;">stringify</span><span style="color:#F8F8F2;">(result));</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><details class="hint-container details"><summary>result</summary><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#F8F8F2;">{</span></span>
<span class="line"><span style="color:#E9F284;">    &quot;</span><span style="color:#F1FA8C;">type</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">: </span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">Program</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#E9F284;">    &quot;</span><span style="color:#F1FA8C;">body</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">: [{</span></span>
<span class="line"><span style="color:#E9F284;">        &quot;</span><span style="color:#F1FA8C;">type</span><span style="color:#E9F284;">&quot;</span><span style="color:#FF79C6;">:</span><span style="color:#E9F284;"> &quot;</span><span style="color:#F1FA8C;">VariableDeclaration</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#E9F284;">        &quot;</span><span style="color:#F1FA8C;">declarations</span><span style="color:#E9F284;">&quot;</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> [{</span></span>
<span class="line"><span style="color:#E9F284;">            &quot;</span><span style="color:#F1FA8C;">type</span><span style="color:#E9F284;">&quot;</span><span style="color:#FF79C6;">:</span><span style="color:#E9F284;"> &quot;</span><span style="color:#F1FA8C;">VariableDeclarator</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#E9F284;">            &quot;</span><span style="color:#F1FA8C;">id</span><span style="color:#E9F284;">&quot;</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#E9F284;">                &quot;</span><span style="color:#F1FA8C;">type</span><span style="color:#E9F284;">&quot;</span><span style="color:#FF79C6;">:</span><span style="color:#E9F284;"> &quot;</span><span style="color:#F1FA8C;">Identifier</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#E9F284;">                &quot;</span><span style="color:#F1FA8C;">name</span><span style="color:#E9F284;">&quot;</span><span style="color:#FF79C6;">:</span><span style="color:#E9F284;"> &quot;</span><span style="color:#F1FA8C;">element</span><span style="color:#E9F284;">&quot;</span></span>
<span class="line"><span style="color:#F8F8F2;">            },</span></span>
<span class="line"><span style="color:#E9F284;">            &quot;</span><span style="color:#F1FA8C;">init</span><span style="color:#E9F284;">&quot;</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#E9F284;">                &quot;</span><span style="color:#F1FA8C;">type</span><span style="color:#E9F284;">&quot;</span><span style="color:#FF79C6;">:</span><span style="color:#E9F284;"> &quot;</span><span style="color:#F1FA8C;">JSXElement</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#E9F284;">                &quot;</span><span style="color:#F1FA8C;">openingElement</span><span style="color:#E9F284;">&quot;</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#E9F284;">                    &quot;</span><span style="color:#F1FA8C;">type</span><span style="color:#E9F284;">&quot;</span><span style="color:#FF79C6;">:</span><span style="color:#E9F284;"> &quot;</span><span style="color:#F1FA8C;">JSXOpeningElement</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#E9F284;">                    &quot;</span><span style="color:#F1FA8C;">name</span><span style="color:#E9F284;">&quot;</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#E9F284;">                        &quot;</span><span style="color:#F1FA8C;">type</span><span style="color:#E9F284;">&quot;</span><span style="color:#FF79C6;">:</span><span style="color:#E9F284;"> &quot;</span><span style="color:#F1FA8C;">JSXIdentifier</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#E9F284;">                        &quot;</span><span style="color:#F1FA8C;">name</span><span style="color:#E9F284;">&quot;</span><span style="color:#FF79C6;">:</span><span style="color:#E9F284;"> &quot;</span><span style="color:#F1FA8C;">h1</span><span style="color:#E9F284;">&quot;</span></span>
<span class="line"><span style="color:#F8F8F2;">                    }</span></span>
<span class="line"><span style="color:#F8F8F2;">                },</span></span>
<span class="line"><span style="color:#E9F284;">                &quot;</span><span style="color:#F1FA8C;">closingElement</span><span style="color:#E9F284;">&quot;</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#E9F284;">                    &quot;</span><span style="color:#F1FA8C;">type</span><span style="color:#E9F284;">&quot;</span><span style="color:#FF79C6;">:</span><span style="color:#E9F284;"> &quot;</span><span style="color:#F1FA8C;">JSXClosingElement</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#E9F284;">                    &quot;</span><span style="color:#F1FA8C;">name</span><span style="color:#E9F284;">&quot;</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#E9F284;">                        &quot;</span><span style="color:#F1FA8C;">type</span><span style="color:#E9F284;">&quot;</span><span style="color:#FF79C6;">:</span><span style="color:#E9F284;"> &quot;</span><span style="color:#F1FA8C;">JSXIdentifier</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#E9F284;">                        &quot;</span><span style="color:#F1FA8C;">name</span><span style="color:#E9F284;">&quot;</span><span style="color:#FF79C6;">:</span><span style="color:#E9F284;"> &quot;</span><span style="color:#F1FA8C;">h1</span><span style="color:#E9F284;">&quot;</span></span>
<span class="line"><span style="color:#F8F8F2;">                    }</span></span>
<span class="line"><span style="color:#F8F8F2;">                },</span></span>
<span class="line"><span style="color:#E9F284;">                &quot;</span><span style="color:#F1FA8C;">name</span><span style="color:#E9F284;">&quot;</span><span style="color:#FF79C6;">:</span><span style="color:#E9F284;"> &quot;</span><span style="color:#F1FA8C;">h1</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#E9F284;">                &quot;</span><span style="color:#F1FA8C;">children</span><span style="color:#E9F284;">&quot;</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> [{</span></span>
<span class="line"><span style="color:#E9F284;">                    &quot;</span><span style="color:#F1FA8C;">type</span><span style="color:#E9F284;">&quot;</span><span style="color:#FF79C6;">:</span><span style="color:#E9F284;"> &quot;</span><span style="color:#F1FA8C;">JSXText</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#E9F284;">                    &quot;</span><span style="color:#F1FA8C;">value</span><span style="color:#E9F284;">&quot;</span><span style="color:#FF79C6;">:</span><span style="color:#E9F284;"> &quot;</span><span style="color:#F1FA8C;">hello</span><span style="color:#E9F284;">&quot;</span></span>
<span class="line"><span style="color:#F8F8F2;">                }]</span></span>
<span class="line"><span style="color:#F8F8F2;">            }</span></span>
<span class="line"><span style="color:#F8F8F2;">        }]</span></span>
<span class="line"><span style="color:#F8F8F2;">    }],</span></span>
<span class="line"><span style="color:#E9F284;">    &quot;</span><span style="color:#F1FA8C;">sourceType</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">: </span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">script</span><span style="color:#E9F284;">&quot;</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details>`,13)]))}const t=n(o,[["render",e],["__file","ast.html.vue"]]),r=JSON.parse('{"path":"/webpack/ast.html","title":"ast","lang":"en-US","frontmatter":{"title":"ast","category":"Webpack","date":"2021-10-21T00:00:00.000Z","description":"解析过程 AST 整个解析过程分为两个步骤 分词：将整个代码字符串分割成语法单元数组 语法分析：建立分析语法单元之间的关系 语法单元 Javascript 代码中的语法单元主要包括以下这么几种 关键字：const、let、var等 标识符：可能是一个变量，也可能是 if、else 这些关键字，又或者是 true、false 这些常量 运算符 数字 空格...","head":[["meta",{"property":"og:url","content":"https://luxiag.github.io/luxiag/blog/webpack/ast.html"}],["meta",{"property":"og:title","content":"ast"}],["meta",{"property":"og:description","content":"解析过程 AST 整个解析过程分为两个步骤 分词：将整个代码字符串分割成语法单元数组 语法分析：建立分析语法单元之间的关系 语法单元 Javascript 代码中的语法单元主要包括以下这么几种 关键字：const、let、var等 标识符：可能是一个变量，也可能是 if、else 这些关键字，又或者是 true、false 这些常量 运算符 数字 空格..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2023-01-08T13:32:53.000Z"}],["meta",{"property":"article:published_time","content":"2021-10-21T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-01-08T13:32:53.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"ast\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2021-10-21T00:00:00.000Z\\",\\"dateModified\\":\\"2023-01-08T13:32:53.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"luxiag\\",\\"url\\":\\"https://luxiag.github.io/luxiag\\"}]}"]]},"headers":[{"level":2,"title":"解析过程","slug":"解析过程","link":"#解析过程","children":[]},{"level":2,"title":"语法单元","slug":"语法单元","link":"#语法单元","children":[]},{"level":2,"title":"词法分析","slug":"词法分析","link":"#词法分析","children":[]},{"level":2,"title":"语法分析","slug":"语法分析","link":"#语法分析","children":[]}],"git":{"createdTime":1673184773000,"updatedTime":1673184773000,"contributors":[{"name":"luxiag","email":"luxiag@qq.com","commits":1}]},"readingTime":{"minutes":1.85,"words":556},"filePathRelative":"webpack/ast.md","localizedDate":"October 21, 2021","excerpt":"<h2>解析过程</h2>\\n<p>AST 整个解析过程分为两个步骤</p>\\n<p>分词：将整个代码字符串分割成语法单元数组\\n语法分析：建立分析语法单元之间的关系</p>\\n<h2>语法单元</h2>\\n<p>Javascript 代码中的语法单元主要包括以下这么几种</p>","autoDesc":true}');export{t as comp,r as data};
