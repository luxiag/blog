import{l as W,m as G,aD as z,a5 as R,p as M,W as V,aJ as O,a as N,aK as ra,i as ca,aL as va,G as aa,aM as Fa,q as ia,aC as sa,A as ea,aH as na,aE as da,r as ya,s as ma}from"./three.module-_5Kft3IB.js";import{O as X}from"./OrbitControls-86TszHm5.js";import{C as H,a as ta}from"./CSS2DRenderer-cXBTsFor.js";import{_ as ua,e as ba,f as q,g as B,j as ha,r as P,i as la,o as Ca}from"./app-Bd-A8UqK.js";const Ba={__name:"threejs-raycaster.html",setup(oa,{expose:t}){t();const f=P(),_=()=>{const i=new W,l=new G(75,2,.1,100);l.position.set(0,0,20),i.add(l);const A=new z(1,1,1),d=new R({wireframe:!0}),e=new R({color:"#ff0000"});let r=[];for(let y=-5;y<5;y++)for(let c=-5;c<5;c++)for(let v=-5;v<5;v++){const w=new M(A,d);w.position.set(y,c,v),i.add(w),r.push(w)}const a=new V;console.log(f.value.offsetWidth,"width"),a.setSize(f.value.offsetWidth,f.value.offsetWidth/2),a.shadowMap.enabled=!0,a.physicallyCorrectLights=!0,f.value.appendChild(a.domElement);const n=new X(l,a.domElement);n.enableDamping=!0;const u=new O,g=new N;new ra(5),f.value.addEventListener("pointermove",y=>{g.x=y.clientX/window.innerWidth*2-1,g.y=-(y.clientY/window.innerHeight*2-1),u.setFromCamera(g,l),u.intersectObjects(r).forEach(v=>{v.object.material=e})});function j(){n.update(),a.render(i,l),requestAnimationFrame(j)}j()},m=P(),L=()=>{let i,l,A=!1;const d=[],e=new W;e.background=new ca(15790320);const r=new G(45,2,.1,1e4);r.position.set(500,800,1300),r.lookAt(0,0,0);const a=new z(50,50,50),n=new R({color:16711680,opacity:.5,transparent:!0}),u=new M(a,n);e.add(u);const g=new z(50,50,50),j=new va({color:16693068,map:new aa().load("./assets/textures/square-outline-textured.png")}),y=new Fa(1e3,20);e.add(y),l=new O,i=new N;const c=new ia(1e3,1e3);c.rotateX(-Math.PI/2);const v=new M(c,new R({visible:!1}));e.add(v),d.push(v);const w=new sa(6316128);e.add(w);const b=new ea(16777215);b.position.set(1,.75,.5).normalize(),e.add(b);const D=new V({antialias:!0});D.setSize(m.value.offsetWidth,m.value.offsetWidth/2),m.value.appendChild(D.domElement),m.value.addEventListener("pointermove",S),m.value.addEventListener("pointerdown",x),m.value.addEventListener("keydown",h),m.value.addEventListener("keyup",T);function S(s){i.set(s.clientX/window.innerWidth*2-1,-(s.clientY/window.innerHeight)*2+1),l.setFromCamera(i,r);const o=l.intersectObjects(d,!1);if(o.length>0){const F=o[0];u.position.copy(F.point).add(F.face.normal),u.position.divideScalar(50).floor().multiplyScalar(50).addScalar(25),C()}}function x(s){i.set(s.clientX/window.innerWidth*2-1,-(s.clientY/window.innerHeight)*2+1),l.setFromCamera(i,r);const o=l.intersectObjects(d,!1);if(o.length>0){const F=o[0];if(A)F.object!==v&&(e.remove(F.object),d.splice(d.indexOf(F.object),1));else{const E=new M(g,j);E.position.copy(F.point).add(F.face.normal),E.position.divideScalar(50).floor().multiplyScalar(50).addScalar(25),e.add(E),d.push(E)}C()}}function h(s){switch(s.keyCode){case 16:A=!0;break}}function T(s){switch(s.keyCode){case 16:A=!1;break}}function C(){D.render(e,r)}C()},p=P();function I(){const A=new ma,d=new aa,e=new O,r=new O,a=new G(75,2,.1,200);a.position.set(0,5,-10);const n=new W,u=new ea(16777215);u.position.set(0,0,10),n.add(u);const g=new sa(16777215,.8);n.add(g);const j=new na(5,16,16),y=new da({specular:3355443,shininess:5,map:d.load("./assets/textures/planets/earth_atmos_2048.jpg"),specularMap:d.load("./assets/textures/planets/earth_specular_2048.jpg"),normalMap:d.load("./assets/textures/planets/earth_normal_2048.jpg"),normalScale:new N(.85,.85)}),c=new M(j,y);n.add(c);const v=new na(.5,16,16),w=new da({shininess:5,map:d.load("./assets/textures/planets/moon_1024.jpg")}),b=new M(v,w);n.add(b);const D=document.createElement("div");D.className="label",D.innerHTML="地球";const S=new H(D);S.position.set(0,6,0),c.add(S);const x=document.createElement("div");x.className="label1",x.innerHTML="中国";const h=new H(x);h.position.set(-1.5,2.5,-5),c.add(h);const T=document.createElement("div");T.className="label",T.innerHTML="月球";const C=new H(T);C.position.set(0,1,0),b.add(C);const s=new ta;s.setSize(p.value.offsetWidth,p.value.offsetWidth/2),p.value.appendChild(s.domElement),s.domElement.style.position="absolute",s.domElement.style.height="100%",s.domElement.style.width="100%";const o=new V;o.setSize(p.value.offsetWidth,p.value.offsetWidth/2),p.value.appendChild(o.domElement),o.setPixelRatio(window.devicePixelRatio),window.addEventListener("resize",E),o.render(n,a);const F=new X(a,s.domElement);F.minDistance=5,F.maxDistance=100;function E(){a.aspect=2,a.updateProjectionMatrix(),s.setSize(p.value.offsetWidth,p.value.offsetWidth/2),o.setSize(p.value.offsetWidth,p.value.offsetWidth/2)}function Y(){const U=A.getElapsedTime();b.position.set(Math.sin(U)*8,0,Math.cos(U)*8);const k=h.position.clone(),Z=b.position.clone(),$=a.position.clone(),pa=k.distanceTo(a.position);Z.distanceTo(a.position),k.project(a),e.setFromCamera(k,a),r.set($,Z.sub($).normalize());const K=e.intersectObjects(n.children,!0),Q=r.intersectObjects(n.children,!0);Q.length>0&&Q[0].object!==b?C.element.style.visibility="hidden":C.element.style.visibility="initial",K.length==0?h.element.style.visibility="initial":K[0].distance<pa?h.element.style.visibility="hidden":h.element.style.visibility="initial",s.render(n,a),o.render(n,a),requestAnimationFrame(Y)}Y()}la(()=>{_(),L(),I()});const J={ray:f,init:_,voxelRef:m,initVoxel:L,curve:p,initCurve:I,ref:P,onMounted:la,get THREE(){return ya},get OrbitControls(){return X},get CSS2DRenderer(){return ta},get CSS2DObject(){return H}};return Object.defineProperty(J,"__isScriptSetup",{enumerable:!1,value:!0}),J}},fa={ref:"voxelRef"},Aa={ref:"ray"},ga={class:"curve",ref:"curve"};function wa(oa,t,f,_,m,L){return Ca(),ba("div",null,[t[0]||(t[0]=q(`<h2 id="raycaster" tabindex="-1" data-v-561ad4e2><a class="header-anchor" href="#raycaster" data-v-561ad4e2><span data-v-561ad4e2>Raycaster</span></a></h2><ul data-v-561ad4e2><li data-v-561ad4e2><p data-v-561ad4e2><code data-v-561ad4e2>Raycaster( origin : Vector3, direction : Vector3, near : Float, far : Float )</code></p><ul data-v-561ad4e2><li data-v-561ad4e2>origin —— 光线投射的原点向量。</li><li data-v-561ad4e2>direction —— 向射线提供方向的方向向量，应当被标准化。</li><li data-v-561ad4e2>near —— 返回的所有结果比near远。near不能为负值，其默认值为0。</li><li data-v-561ad4e2>far —— 返回的所有结果都比far近。far不能小于near，其默认值为Infinity（正无穷。）</li></ul><p data-v-561ad4e2>这将创建一个新的raycaster对象。</p></li><li data-v-561ad4e2><p data-v-561ad4e2><code data-v-561ad4e2>.setFromCamera ( coords : Vector2, camera : Camera ) : undefined</code></p><ul data-v-561ad4e2><li data-v-561ad4e2>coords —— 在标准化设备坐标中鼠标的二维坐标 —— X分量与Y分量应当在-1到1之间。</li><li data-v-561ad4e2>camera —— 射线所来源的摄像机。</li></ul><p data-v-561ad4e2>使用一个新的原点和方向来更新射线。</p></li><li data-v-561ad4e2><p data-v-561ad4e2><code data-v-561ad4e2>.intersectObject ( object : Object3D, recursive : Boolean, optionalTarget : Array ) : Array</code></p><ul data-v-561ad4e2><li data-v-561ad4e2>object —— 检查与射线相交的物体。</li><li data-v-561ad4e2>recursive —— 若为true，则同时也会检查所有的后代。否则将只会检查对象本身。默认值为true。</li><li data-v-561ad4e2>optionalTarget — （可选）设置结果的目标数组。如果不设置这个值，则一个新的Array会被实例化；如果设置了这个值，则在每次调用之前必须清空这个数组（例如：array.length = 0;）。</li></ul><p data-v-561ad4e2>检测所有在射线与物体之间，包括或不包括后代的相交部分。返回结果时，相交部分将按距离进行排序，最近的位于第一个。 该方法返回一个包含有交叉部分的数组:</p></li></ul><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#282A36;color:#F8F8F2;" data-v-561ad4e2><pre class="shiki dracula vp-code" data-v-561ad4e2><code data-v-561ad4e2><span class="line" data-v-561ad4e2><span style="color:#FF79C6;" data-v-561ad4e2>const</span><span style="color:#F8F8F2;" data-v-561ad4e2> raycaster </span><span style="color:#FF79C6;" data-v-561ad4e2>=</span><span style="color:#FF79C6;font-weight:bold;" data-v-561ad4e2> new</span><span style="color:#BD93F9;" data-v-561ad4e2> THREE</span><span style="color:#F8F8F2;" data-v-561ad4e2>.</span><span style="color:#50FA7B;" data-v-561ad4e2>Raycaster</span><span style="color:#F8F8F2;" data-v-561ad4e2>();</span></span>
<span class="line" data-v-561ad4e2><span style="color:#FF79C6;" data-v-561ad4e2>const</span><span style="color:#F8F8F2;" data-v-561ad4e2> pointer </span><span style="color:#FF79C6;" data-v-561ad4e2>=</span><span style="color:#FF79C6;font-weight:bold;" data-v-561ad4e2> new</span><span style="color:#BD93F9;" data-v-561ad4e2> THREE</span><span style="color:#F8F8F2;" data-v-561ad4e2>.</span><span style="color:#50FA7B;" data-v-561ad4e2>Vector2</span><span style="color:#F8F8F2;" data-v-561ad4e2>()</span></span>
<span class="line" data-v-561ad4e2><span style="color:#FF79C6;" data-v-561ad4e2>function</span><span style="color:#50FA7B;" data-v-561ad4e2> render</span><span style="color:#F8F8F2;" data-v-561ad4e2>() {</span></span>
<span class="line" data-v-561ad4e2><span style="color:#6272A4;" data-v-561ad4e2> // 通过摄像机和鼠标位置更新射线</span></span>
<span class="line" data-v-561ad4e2><span style="color:#F8F8F2;" data-v-561ad4e2> raycaster.</span><span style="color:#50FA7B;" data-v-561ad4e2>setFromCamera</span><span style="color:#F8F8F2;" data-v-561ad4e2>( pointer, camera );</span></span>
<span class="line" data-v-561ad4e2><span style="color:#6272A4;" data-v-561ad4e2> // 计算物体和射线的焦点</span></span>
<span class="line" data-v-561ad4e2><span style="color:#FF79C6;" data-v-561ad4e2> const</span><span style="color:#F8F8F2;" data-v-561ad4e2> intersects </span><span style="color:#FF79C6;" data-v-561ad4e2>=</span><span style="color:#F8F8F2;" data-v-561ad4e2> raycaster.</span><span style="color:#50FA7B;" data-v-561ad4e2>intersectObjects</span><span style="color:#F8F8F2;" data-v-561ad4e2>( scene.children );</span></span>
<span class="line" data-v-561ad4e2><span style="color:#FF79C6;" data-v-561ad4e2> for</span><span style="color:#F8F8F2;" data-v-561ad4e2> ( </span><span style="color:#FF79C6;" data-v-561ad4e2>let</span><span style="color:#F8F8F2;" data-v-561ad4e2> i </span><span style="color:#FF79C6;" data-v-561ad4e2>=</span><span style="color:#BD93F9;" data-v-561ad4e2> 0</span><span style="color:#F8F8F2;" data-v-561ad4e2>; i </span><span style="color:#FF79C6;" data-v-561ad4e2>&lt;</span><span style="color:#F8F8F2;" data-v-561ad4e2> intersects.length; i </span><span style="color:#FF79C6;" data-v-561ad4e2>++</span><span style="color:#F8F8F2;" data-v-561ad4e2> ) {</span></span>
<span class="line" data-v-561ad4e2><span style="color:#F8F8F2;" data-v-561ad4e2>  intersects[ i ].object.material.color.</span><span style="color:#50FA7B;" data-v-561ad4e2>set</span><span style="color:#F8F8F2;" data-v-561ad4e2>( </span><span style="color:#BD93F9;" data-v-561ad4e2>0xff0000</span><span style="color:#F8F8F2;" data-v-561ad4e2> );</span></span>
<span class="line" data-v-561ad4e2><span style="color:#F8F8F2;" data-v-561ad4e2> }</span></span>
<span class="line" data-v-561ad4e2><span style="color:#F8F8F2;" data-v-561ad4e2> renderer.</span><span style="color:#50FA7B;" data-v-561ad4e2>render</span><span style="color:#F8F8F2;" data-v-561ad4e2>( scene, camera );</span></span>
<span class="line" data-v-561ad4e2><span style="color:#F8F8F2;" data-v-561ad4e2>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;" data-v-561ad4e2><div class="line-number" data-v-561ad4e2></div><div class="line-number" data-v-561ad4e2></div><div class="line-number" data-v-561ad4e2></div><div class="line-number" data-v-561ad4e2></div><div class="line-number" data-v-561ad4e2></div><div class="line-number" data-v-561ad4e2></div><div class="line-number" data-v-561ad4e2></div><div class="line-number" data-v-561ad4e2></div><div class="line-number" data-v-561ad4e2></div><div class="line-number" data-v-561ad4e2></div><div class="line-number" data-v-561ad4e2></div><div class="line-number" data-v-561ad4e2></div></div></div><h2 id="demo" tabindex="-1" data-v-561ad4e2><a class="header-anchor" href="#demo" data-v-561ad4e2><span data-v-561ad4e2>demo</span></a></h2><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#282A36;color:#F8F8F2;" data-v-561ad4e2><pre class="shiki dracula vp-code" data-v-561ad4e2><code data-v-561ad4e2><span class="line" data-v-561ad4e2><span style="color:#6272A4;" data-v-561ad4e2>// 创建一个红色的半透明方块</span></span>
<span class="line" data-v-561ad4e2><span style="color:#FF79C6;" data-v-561ad4e2>const</span><span style="color:#F8F8F2;" data-v-561ad4e2> rollOverGeo </span><span style="color:#FF79C6;" data-v-561ad4e2>=</span><span style="color:#FF79C6;font-weight:bold;" data-v-561ad4e2> new</span><span style="color:#BD93F9;" data-v-561ad4e2> THREE</span><span style="color:#F8F8F2;" data-v-561ad4e2>.</span><span style="color:#50FA7B;" data-v-561ad4e2>BoxGeometry</span><span style="color:#F8F8F2;" data-v-561ad4e2>( </span><span style="color:#BD93F9;" data-v-561ad4e2>50</span><span style="color:#F8F8F2;" data-v-561ad4e2>, </span><span style="color:#BD93F9;" data-v-561ad4e2>50</span><span style="color:#F8F8F2;" data-v-561ad4e2>, </span><span style="color:#BD93F9;" data-v-561ad4e2>50</span><span style="color:#F8F8F2;" data-v-561ad4e2> );</span></span>
<span class="line" data-v-561ad4e2><span style="color:#FF79C6;" data-v-561ad4e2>const</span><span style="color:#F8F8F2;" data-v-561ad4e2> rollOverMaterial </span><span style="color:#FF79C6;" data-v-561ad4e2>=</span><span style="color:#FF79C6;font-weight:bold;" data-v-561ad4e2> new</span><span style="color:#BD93F9;" data-v-561ad4e2> THREE</span><span style="color:#F8F8F2;" data-v-561ad4e2>.</span><span style="color:#50FA7B;" data-v-561ad4e2>MeshBasicMaterial</span><span style="color:#F8F8F2;" data-v-561ad4e2>( { color</span><span style="color:#FF79C6;" data-v-561ad4e2>:</span><span style="color:#BD93F9;" data-v-561ad4e2> 0xff0000</span><span style="color:#F8F8F2;" data-v-561ad4e2>, opacity</span><span style="color:#FF79C6;" data-v-561ad4e2>:</span><span style="color:#BD93F9;" data-v-561ad4e2> 0.5</span><span style="color:#F8F8F2;" data-v-561ad4e2>, transparent</span><span style="color:#FF79C6;" data-v-561ad4e2>:</span><span style="color:#BD93F9;" data-v-561ad4e2> true</span><span style="color:#F8F8F2;" data-v-561ad4e2> } );</span></span>
<span class="line" data-v-561ad4e2><span style="color:#FF79C6;" data-v-561ad4e2>const</span><span style="color:#F8F8F2;" data-v-561ad4e2> rollOverMesh </span><span style="color:#FF79C6;" data-v-561ad4e2>=</span><span style="color:#FF79C6;font-weight:bold;" data-v-561ad4e2> new</span><span style="color:#BD93F9;" data-v-561ad4e2> THREE</span><span style="color:#F8F8F2;" data-v-561ad4e2>.</span><span style="color:#50FA7B;" data-v-561ad4e2>Mesh</span><span style="color:#F8F8F2;" data-v-561ad4e2>( rollOverGeo, rollOverMaterial );</span></span>
<span class="line" data-v-561ad4e2><span style="color:#F8F8F2;" data-v-561ad4e2>scene.</span><span style="color:#50FA7B;" data-v-561ad4e2>add</span><span style="color:#F8F8F2;" data-v-561ad4e2>( rollOverMesh );</span></span>
<span class="line" data-v-561ad4e2></span>
<span class="line" data-v-561ad4e2><span style="color:#6272A4;" data-v-561ad4e2>// 创建一个黄色的方块，准备用于添加到场景中</span></span>
<span class="line" data-v-561ad4e2><span style="color:#FF79C6;" data-v-561ad4e2>const</span><span style="color:#F8F8F2;" data-v-561ad4e2> cubeGeo </span><span style="color:#FF79C6;" data-v-561ad4e2>=</span><span style="color:#FF79C6;font-weight:bold;" data-v-561ad4e2> new</span><span style="color:#BD93F9;" data-v-561ad4e2> THREE</span><span style="color:#F8F8F2;" data-v-561ad4e2>.</span><span style="color:#50FA7B;" data-v-561ad4e2>BoxGeometry</span><span style="color:#F8F8F2;" data-v-561ad4e2>( </span><span style="color:#BD93F9;" data-v-561ad4e2>50</span><span style="color:#F8F8F2;" data-v-561ad4e2>, </span><span style="color:#BD93F9;" data-v-561ad4e2>50</span><span style="color:#F8F8F2;" data-v-561ad4e2>, </span><span style="color:#BD93F9;" data-v-561ad4e2>50</span><span style="color:#F8F8F2;" data-v-561ad4e2> );</span></span>
<span class="line" data-v-561ad4e2><span style="color:#FF79C6;" data-v-561ad4e2>const</span><span style="color:#F8F8F2;" data-v-561ad4e2> cubeMaterial </span><span style="color:#FF79C6;" data-v-561ad4e2>=</span><span style="color:#FF79C6;font-weight:bold;" data-v-561ad4e2> new</span><span style="color:#BD93F9;" data-v-561ad4e2> THREE</span><span style="color:#F8F8F2;" data-v-561ad4e2>.</span><span style="color:#50FA7B;" data-v-561ad4e2>MeshLambertMaterial</span><span style="color:#F8F8F2;" data-v-561ad4e2>( { color</span><span style="color:#FF79C6;" data-v-561ad4e2>:</span><span style="color:#BD93F9;" data-v-561ad4e2> 0xfeb74c</span><span style="color:#F8F8F2;" data-v-561ad4e2>, map</span><span style="color:#FF79C6;" data-v-561ad4e2>:</span><span style="color:#FF79C6;font-weight:bold;" data-v-561ad4e2> new</span><span style="color:#BD93F9;" data-v-561ad4e2> THREE</span><span style="color:#F8F8F2;" data-v-561ad4e2>.</span><span style="color:#50FA7B;" data-v-561ad4e2>TextureLoader</span><span style="color:#F8F8F2;" data-v-561ad4e2>().</span><span style="color:#50FA7B;" data-v-561ad4e2>load</span><span style="color:#F8F8F2;" data-v-561ad4e2>( </span><span style="color:#E9F284;" data-v-561ad4e2>&#39;</span><span style="color:#F1FA8C;" data-v-561ad4e2>/assets/textures/square-outline-textured.png</span><span style="color:#E9F284;" data-v-561ad4e2>&#39;</span><span style="color:#F8F8F2;" data-v-561ad4e2> ) } );</span></span>
<span class="line" data-v-561ad4e2></span>
<span class="line" data-v-561ad4e2><span style="color:#6272A4;" data-v-561ad4e2>// 创建网格辅助线</span></span>
<span class="line" data-v-561ad4e2><span style="color:#FF79C6;" data-v-561ad4e2>const</span><span style="color:#F8F8F2;" data-v-561ad4e2> gridHelper </span><span style="color:#FF79C6;" data-v-561ad4e2>=</span><span style="color:#FF79C6;font-weight:bold;" data-v-561ad4e2> new</span><span style="color:#BD93F9;" data-v-561ad4e2> THREE</span><span style="color:#F8F8F2;" data-v-561ad4e2>.</span><span style="color:#50FA7B;" data-v-561ad4e2>GridHelper</span><span style="color:#F8F8F2;" data-v-561ad4e2>( </span><span style="color:#BD93F9;" data-v-561ad4e2>1000</span><span style="color:#F8F8F2;" data-v-561ad4e2>, </span><span style="color:#BD93F9;" data-v-561ad4e2>20</span><span style="color:#F8F8F2;" data-v-561ad4e2> );</span></span>
<span class="line" data-v-561ad4e2><span style="color:#F8F8F2;" data-v-561ad4e2>scene.</span><span style="color:#50FA7B;" data-v-561ad4e2>add</span><span style="color:#F8F8F2;" data-v-561ad4e2>( gridHelper );</span></span>
<span class="line" data-v-561ad4e2></span>
<span class="line" data-v-561ad4e2><span style="color:#6272A4;" data-v-561ad4e2>// 创建一个平面面板</span></span>
<span class="line" data-v-561ad4e2><span style="color:#F8F8F2;" data-v-561ad4e2>raycaster </span><span style="color:#FF79C6;" data-v-561ad4e2>=</span><span style="color:#FF79C6;font-weight:bold;" data-v-561ad4e2> new</span><span style="color:#BD93F9;" data-v-561ad4e2> THREE</span><span style="color:#F8F8F2;" data-v-561ad4e2>.</span><span style="color:#50FA7B;" data-v-561ad4e2>Raycaster</span><span style="color:#F8F8F2;" data-v-561ad4e2>();</span></span>
<span class="line" data-v-561ad4e2><span style="color:#F8F8F2;" data-v-561ad4e2>pointer </span><span style="color:#FF79C6;" data-v-561ad4e2>=</span><span style="color:#FF79C6;font-weight:bold;" data-v-561ad4e2> new</span><span style="color:#BD93F9;" data-v-561ad4e2> THREE</span><span style="color:#F8F8F2;" data-v-561ad4e2>.</span><span style="color:#50FA7B;" data-v-561ad4e2>Vector2</span><span style="color:#F8F8F2;" data-v-561ad4e2>();</span></span>
<span class="line" data-v-561ad4e2><span style="color:#FF79C6;" data-v-561ad4e2>const</span><span style="color:#F8F8F2;" data-v-561ad4e2> geometry </span><span style="color:#FF79C6;" data-v-561ad4e2>=</span><span style="color:#FF79C6;font-weight:bold;" data-v-561ad4e2> new</span><span style="color:#BD93F9;" data-v-561ad4e2> THREE</span><span style="color:#F8F8F2;" data-v-561ad4e2>.</span><span style="color:#50FA7B;" data-v-561ad4e2>PlaneGeometry</span><span style="color:#F8F8F2;" data-v-561ad4e2>( </span><span style="color:#BD93F9;" data-v-561ad4e2>1000</span><span style="color:#F8F8F2;" data-v-561ad4e2>, </span><span style="color:#BD93F9;" data-v-561ad4e2>1000</span><span style="color:#F8F8F2;" data-v-561ad4e2> );</span></span>
<span class="line" data-v-561ad4e2><span style="color:#F8F8F2;" data-v-561ad4e2>geometry.</span><span style="color:#50FA7B;" data-v-561ad4e2>rotateX</span><span style="color:#F8F8F2;" data-v-561ad4e2>( </span><span style="color:#FF79C6;" data-v-561ad4e2>-</span><span style="color:#F8F8F2;" data-v-561ad4e2> Math.</span><span style="color:#BD93F9;" data-v-561ad4e2>PI</span><span style="color:#FF79C6;" data-v-561ad4e2> /</span><span style="color:#BD93F9;" data-v-561ad4e2> 2</span><span style="color:#F8F8F2;" data-v-561ad4e2> );</span></span>
<span class="line" data-v-561ad4e2><span style="color:#FF79C6;" data-v-561ad4e2>const</span><span style="color:#F8F8F2;" data-v-561ad4e2> plane </span><span style="color:#FF79C6;" data-v-561ad4e2>=</span><span style="color:#FF79C6;font-weight:bold;" data-v-561ad4e2> new</span><span style="color:#BD93F9;" data-v-561ad4e2> THREE</span><span style="color:#F8F8F2;" data-v-561ad4e2>.</span><span style="color:#50FA7B;" data-v-561ad4e2>Mesh</span><span style="color:#F8F8F2;" data-v-561ad4e2>( geometry, </span><span style="color:#FF79C6;font-weight:bold;" data-v-561ad4e2>new</span><span style="color:#BD93F9;" data-v-561ad4e2> THREE</span><span style="color:#F8F8F2;" data-v-561ad4e2>.</span><span style="color:#50FA7B;" data-v-561ad4e2>MeshBasicMaterial</span><span style="color:#F8F8F2;" data-v-561ad4e2>( { visible</span><span style="color:#FF79C6;" data-v-561ad4e2>:</span><span style="color:#BD93F9;" data-v-561ad4e2> false</span><span style="color:#F8F8F2;" data-v-561ad4e2> } ) );</span></span>
<span class="line" data-v-561ad4e2><span style="color:#F8F8F2;" data-v-561ad4e2>scene.</span><span style="color:#50FA7B;" data-v-561ad4e2>add</span><span style="color:#F8F8F2;" data-v-561ad4e2>( plane );</span></span>
<span class="line" data-v-561ad4e2></span>
<span class="line" data-v-561ad4e2><span style="color:#6272A4;" data-v-561ad4e2>// 用于射线检测</span></span>
<span class="line" data-v-561ad4e2><span style="color:#F8F8F2;" data-v-561ad4e2>objects.</span><span style="color:#50FA7B;" data-v-561ad4e2>push</span><span style="color:#F8F8F2;" data-v-561ad4e2>( plane ); </span><span style="color:#6272A4;" data-v-561ad4e2>// 加入物体数组</span></span>
<span class="line" data-v-561ad4e2></span>
<span class="line" data-v-561ad4e2><span style="color:#6272A4;" data-v-561ad4e2>// 事件处理函数</span></span>
<span class="line" data-v-561ad4e2><span style="color:#FF79C6;" data-v-561ad4e2>function</span><span style="color:#50FA7B;" data-v-561ad4e2> onPointerMove</span><span style="color:#F8F8F2;" data-v-561ad4e2>(</span><span style="color:#FFB86C;font-style:italic;" data-v-561ad4e2>event</span><span style="color:#F8F8F2;" data-v-561ad4e2>){</span></span>
<span class="line" data-v-561ad4e2><span style="color:#F8F8F2;" data-v-561ad4e2> pointer.</span><span style="color:#50FA7B;" data-v-561ad4e2>set</span><span style="color:#F8F8F2;" data-v-561ad4e2>( ( event.clientX </span><span style="color:#FF79C6;" data-v-561ad4e2>/</span><span style="color:#F8F8F2;" data-v-561ad4e2> window.innerWidth ) </span><span style="color:#FF79C6;" data-v-561ad4e2>*</span><span style="color:#BD93F9;" data-v-561ad4e2> 2</span><span style="color:#FF79C6;" data-v-561ad4e2> -</span><span style="color:#BD93F9;" data-v-561ad4e2> 1</span><span style="color:#F8F8F2;" data-v-561ad4e2>, </span><span style="color:#FF79C6;" data-v-561ad4e2>-</span><span style="color:#F8F8F2;" data-v-561ad4e2> ( event.clientY </span><span style="color:#FF79C6;" data-v-561ad4e2>/</span><span style="color:#F8F8F2;" data-v-561ad4e2> window.innerHeight ) </span><span style="color:#FF79C6;" data-v-561ad4e2>*</span><span style="color:#BD93F9;" data-v-561ad4e2> 2</span><span style="color:#FF79C6;" data-v-561ad4e2> +</span><span style="color:#BD93F9;" data-v-561ad4e2> 1</span><span style="color:#F8F8F2;" data-v-561ad4e2> );</span></span>
<span class="line" data-v-561ad4e2><span style="color:#F8F8F2;" data-v-561ad4e2> raycaster.</span><span style="color:#50FA7B;" data-v-561ad4e2>setFromCamera</span><span style="color:#F8F8F2;" data-v-561ad4e2>( pointer, camera );</span></span>
<span class="line" data-v-561ad4e2><span style="color:#FF79C6;" data-v-561ad4e2> const</span><span style="color:#F8F8F2;" data-v-561ad4e2> intersects </span><span style="color:#FF79C6;" data-v-561ad4e2>=</span><span style="color:#F8F8F2;" data-v-561ad4e2> raycaster.</span><span style="color:#50FA7B;" data-v-561ad4e2>intersectObjects</span><span style="color:#F8F8F2;" data-v-561ad4e2>( objects, </span><span style="color:#BD93F9;" data-v-561ad4e2>false</span><span style="color:#F8F8F2;" data-v-561ad4e2> );</span></span>
<span class="line" data-v-561ad4e2><span style="color:#FF79C6;" data-v-561ad4e2> if</span><span style="color:#F8F8F2;" data-v-561ad4e2> ( intersects.length </span><span style="color:#FF79C6;" data-v-561ad4e2>&gt;</span><span style="color:#BD93F9;" data-v-561ad4e2> 0</span><span style="color:#F8F8F2;" data-v-561ad4e2> ) {</span></span>
<span class="line" data-v-561ad4e2><span style="color:#FF79C6;" data-v-561ad4e2>  const</span><span style="color:#F8F8F2;" data-v-561ad4e2> intersect </span><span style="color:#FF79C6;" data-v-561ad4e2>=</span><span style="color:#F8F8F2;" data-v-561ad4e2> intersects[ </span><span style="color:#BD93F9;" data-v-561ad4e2>0</span><span style="color:#F8F8F2;" data-v-561ad4e2> ];</span></span>
<span class="line" data-v-561ad4e2><span style="color:#6272A4;" data-v-561ad4e2>  // 将红色半透明方块移动到鼠标所在的位置</span></span>
<span class="line" data-v-561ad4e2><span style="color:#6272A4;" data-v-561ad4e2>    // intersect.point 鼠标悬停点在场景中的位置</span></span>
<span class="line" data-v-561ad4e2><span style="color:#6272A4;" data-v-561ad4e2>    // intersect.face.normal 三维模型子网格（intersect.face）的法向量（normal）</span></span>
<span class="line" data-v-561ad4e2><span style="color:#F8F8F2;" data-v-561ad4e2>  rollOverMesh.position.</span><span style="color:#50FA7B;" data-v-561ad4e2>copy</span><span style="color:#F8F8F2;" data-v-561ad4e2>( intersect.point ).</span><span style="color:#50FA7B;" data-v-561ad4e2>add</span><span style="color:#F8F8F2;" data-v-561ad4e2>( intersect.face.normal );</span></span>
<span class="line" data-v-561ad4e2><span style="color:#6272A4;" data-v-561ad4e2>    // 将方块对准到悬停点的中心位置</span></span>
<span class="line" data-v-561ad4e2><span style="color:#6272A4;" data-v-561ad4e2>    /*</span></span>
<span class="line" data-v-561ad4e2><span style="color:#6272A4;" data-v-561ad4e2>    divideScalar( 50 )：将向量坐标除以 50，这是为了将位置信息进行规范化，使每个方块的位置都对应网格的中心点，避免出现半个方块的情况。</span></span>
<span class="line" data-v-561ad4e2><span style="color:#6272A4;" data-v-561ad4e2>    floor()：将向量的每个坐标值按照四舍五入的方式转换成整数，这是确保每个网格的中心点都是整数。</span></span>
<span class="line" data-v-561ad4e2><span style="color:#6272A4;" data-v-561ad4e2>    multiplyScalar( 50 )：将向量坐标乘以 50，把网格中心点的位置重新还原成一个完整的坐标系。这一步的作用是反向处理前面的操作，确保位置信息没有改变。</span></span>
<span class="line" data-v-561ad4e2><span style="color:#6272A4;" data-v-561ad4e2>    addScalar( 25 )：最后加上 25，是为了让方块更好地显示在屏幕上，因为像素的起始点是在网格左上角，而不是中心点。</span></span>
<span class="line" data-v-561ad4e2><span style="color:#6272A4;" data-v-561ad4e2>    </span></span>
<span class="line" data-v-561ad4e2><span style="color:#6272A4;" data-v-561ad4e2>    */</span><span style="color:#F8F8F2;" data-v-561ad4e2> </span></span>
<span class="line" data-v-561ad4e2><span style="color:#F8F8F2;" data-v-561ad4e2>  rollOverMesh.position.</span><span style="color:#50FA7B;" data-v-561ad4e2>divideScalar</span><span style="color:#F8F8F2;" data-v-561ad4e2>( </span><span style="color:#BD93F9;" data-v-561ad4e2>50</span><span style="color:#F8F8F2;" data-v-561ad4e2> ).</span><span style="color:#50FA7B;" data-v-561ad4e2>floor</span><span style="color:#F8F8F2;" data-v-561ad4e2>().</span><span style="color:#50FA7B;" data-v-561ad4e2>multiplyScalar</span><span style="color:#F8F8F2;" data-v-561ad4e2>( </span><span style="color:#BD93F9;" data-v-561ad4e2>50</span><span style="color:#F8F8F2;" data-v-561ad4e2> ).</span><span style="color:#50FA7B;" data-v-561ad4e2>addScalar</span><span style="color:#F8F8F2;" data-v-561ad4e2>( </span><span style="color:#BD93F9;" data-v-561ad4e2>25</span><span style="color:#F8F8F2;" data-v-561ad4e2> );</span></span>
<span class="line" data-v-561ad4e2><span style="color:#50FA7B;" data-v-561ad4e2>  render</span><span style="color:#F8F8F2;" data-v-561ad4e2>();</span></span>
<span class="line" data-v-561ad4e2><span style="color:#F8F8F2;" data-v-561ad4e2> }      </span></span>
<span class="line" data-v-561ad4e2><span style="color:#F8F8F2;" data-v-561ad4e2>}</span></span>
<span class="line" data-v-561ad4e2></span>
<span class="line" data-v-561ad4e2><span style="color:#FF79C6;" data-v-561ad4e2>function</span><span style="color:#50FA7B;" data-v-561ad4e2> onPointerDown</span><span style="color:#F8F8F2;" data-v-561ad4e2>(</span><span style="color:#FFB86C;font-style:italic;" data-v-561ad4e2>event</span><span style="color:#F8F8F2;" data-v-561ad4e2>){</span></span>
<span class="line" data-v-561ad4e2><span style="color:#F8F8F2;" data-v-561ad4e2> pointer.</span><span style="color:#50FA7B;" data-v-561ad4e2>set</span><span style="color:#F8F8F2;" data-v-561ad4e2>( ( event.clientX </span><span style="color:#FF79C6;" data-v-561ad4e2>/</span><span style="color:#F8F8F2;" data-v-561ad4e2> window.innerWidth ) </span><span style="color:#FF79C6;" data-v-561ad4e2>*</span><span style="color:#BD93F9;" data-v-561ad4e2> 2</span><span style="color:#FF79C6;" data-v-561ad4e2> -</span><span style="color:#BD93F9;" data-v-561ad4e2> 1</span><span style="color:#F8F8F2;" data-v-561ad4e2>, </span><span style="color:#FF79C6;" data-v-561ad4e2>-</span><span style="color:#F8F8F2;" data-v-561ad4e2> ( event.clientY </span><span style="color:#FF79C6;" data-v-561ad4e2>/</span><span style="color:#F8F8F2;" data-v-561ad4e2> window.innerHeight ) </span><span style="color:#FF79C6;" data-v-561ad4e2>*</span><span style="color:#BD93F9;" data-v-561ad4e2> 2</span><span style="color:#FF79C6;" data-v-561ad4e2> +</span><span style="color:#BD93F9;" data-v-561ad4e2> 1</span><span style="color:#F8F8F2;" data-v-561ad4e2> );</span></span>
<span class="line" data-v-561ad4e2><span style="color:#F8F8F2;" data-v-561ad4e2> raycaster.</span><span style="color:#50FA7B;" data-v-561ad4e2>setFromCamera</span><span style="color:#F8F8F2;" data-v-561ad4e2>( pointer, camera );</span></span>
<span class="line" data-v-561ad4e2><span style="color:#FF79C6;" data-v-561ad4e2> const</span><span style="color:#F8F8F2;" data-v-561ad4e2> intersects </span><span style="color:#FF79C6;" data-v-561ad4e2>=</span><span style="color:#F8F8F2;" data-v-561ad4e2> raycaster.</span><span style="color:#50FA7B;" data-v-561ad4e2>intersectObjects</span><span style="color:#F8F8F2;" data-v-561ad4e2>( objects, </span><span style="color:#BD93F9;" data-v-561ad4e2>false</span><span style="color:#F8F8F2;" data-v-561ad4e2> );</span></span>
<span class="line" data-v-561ad4e2><span style="color:#FF79C6;" data-v-561ad4e2> if</span><span style="color:#F8F8F2;" data-v-561ad4e2> ( intersects.length </span><span style="color:#FF79C6;" data-v-561ad4e2>&gt;</span><span style="color:#BD93F9;" data-v-561ad4e2> 0</span><span style="color:#F8F8F2;" data-v-561ad4e2> ) {</span></span>
<span class="line" data-v-561ad4e2><span style="color:#FF79C6;" data-v-561ad4e2>  const</span><span style="color:#F8F8F2;" data-v-561ad4e2> intersect </span><span style="color:#FF79C6;" data-v-561ad4e2>=</span><span style="color:#F8F8F2;" data-v-561ad4e2> intersects[ </span><span style="color:#BD93F9;" data-v-561ad4e2>0</span><span style="color:#F8F8F2;" data-v-561ad4e2> ];</span></span>
<span class="line" data-v-561ad4e2><span style="color:#6272A4;" data-v-561ad4e2>  // 删除方块</span></span>
<span class="line" data-v-561ad4e2><span style="color:#FF79C6;" data-v-561ad4e2>  if</span><span style="color:#F8F8F2;" data-v-561ad4e2> ( isShiftDown ) {</span></span>
<span class="line" data-v-561ad4e2><span style="color:#FF79C6;" data-v-561ad4e2>   if</span><span style="color:#F8F8F2;" data-v-561ad4e2> ( intersect.object </span><span style="color:#FF79C6;" data-v-561ad4e2>!==</span><span style="color:#F8F8F2;" data-v-561ad4e2> plane ) {</span></span>
<span class="line" data-v-561ad4e2><span style="color:#F8F8F2;" data-v-561ad4e2>    scene.</span><span style="color:#50FA7B;" data-v-561ad4e2>remove</span><span style="color:#F8F8F2;" data-v-561ad4e2>( intersect.object );</span></span>
<span class="line" data-v-561ad4e2><span style="color:#F8F8F2;" data-v-561ad4e2>    objects.</span><span style="color:#50FA7B;" data-v-561ad4e2>splice</span><span style="color:#F8F8F2;" data-v-561ad4e2>( objects.</span><span style="color:#50FA7B;" data-v-561ad4e2>indexOf</span><span style="color:#F8F8F2;" data-v-561ad4e2>( intersect.object ), </span><span style="color:#BD93F9;" data-v-561ad4e2>1</span><span style="color:#F8F8F2;" data-v-561ad4e2> );</span></span>
<span class="line" data-v-561ad4e2><span style="color:#F8F8F2;" data-v-561ad4e2>   }</span></span>
<span class="line" data-v-561ad4e2><span style="color:#6272A4;" data-v-561ad4e2>  // 添加方块</span></span>
<span class="line" data-v-561ad4e2><span style="color:#F8F8F2;" data-v-561ad4e2>  } </span><span style="color:#FF79C6;" data-v-561ad4e2>else</span><span style="color:#F8F8F2;" data-v-561ad4e2> {</span></span>
<span class="line" data-v-561ad4e2><span style="color:#FF79C6;" data-v-561ad4e2>   const</span><span style="color:#F8F8F2;" data-v-561ad4e2> voxel </span><span style="color:#FF79C6;" data-v-561ad4e2>=</span><span style="color:#FF79C6;font-weight:bold;" data-v-561ad4e2> new</span><span style="color:#BD93F9;" data-v-561ad4e2> THREE</span><span style="color:#F8F8F2;" data-v-561ad4e2>.</span><span style="color:#50FA7B;" data-v-561ad4e2>Mesh</span><span style="color:#F8F8F2;" data-v-561ad4e2>( cubeGeo, cubeMaterial );</span></span>
<span class="line" data-v-561ad4e2><span style="color:#F8F8F2;" data-v-561ad4e2>   voxel.position.</span><span style="color:#50FA7B;" data-v-561ad4e2>copy</span><span style="color:#F8F8F2;" data-v-561ad4e2>( intersect.point ).</span><span style="color:#50FA7B;" data-v-561ad4e2>add</span><span style="color:#F8F8F2;" data-v-561ad4e2>( intersect.face.normal );</span></span>
<span class="line" data-v-561ad4e2><span style="color:#F8F8F2;" data-v-561ad4e2>   voxel.position.</span><span style="color:#50FA7B;" data-v-561ad4e2>divideScalar</span><span style="color:#F8F8F2;" data-v-561ad4e2>( </span><span style="color:#BD93F9;" data-v-561ad4e2>50</span><span style="color:#F8F8F2;" data-v-561ad4e2> ).</span><span style="color:#50FA7B;" data-v-561ad4e2>floor</span><span style="color:#F8F8F2;" data-v-561ad4e2>().</span><span style="color:#50FA7B;" data-v-561ad4e2>multiplyScalar</span><span style="color:#F8F8F2;" data-v-561ad4e2>( </span><span style="color:#BD93F9;" data-v-561ad4e2>50</span><span style="color:#F8F8F2;" data-v-561ad4e2> ).</span><span style="color:#50FA7B;" data-v-561ad4e2>addScalar</span><span style="color:#F8F8F2;" data-v-561ad4e2>( </span><span style="color:#BD93F9;" data-v-561ad4e2>25</span><span style="color:#F8F8F2;" data-v-561ad4e2> );</span></span>
<span class="line" data-v-561ad4e2><span style="color:#F8F8F2;" data-v-561ad4e2>   scene.</span><span style="color:#50FA7B;" data-v-561ad4e2>add</span><span style="color:#F8F8F2;" data-v-561ad4e2>( voxel );</span></span>
<span class="line" data-v-561ad4e2><span style="color:#F8F8F2;" data-v-561ad4e2>   objects.</span><span style="color:#50FA7B;" data-v-561ad4e2>push</span><span style="color:#F8F8F2;" data-v-561ad4e2>( voxel );</span></span>
<span class="line" data-v-561ad4e2><span style="color:#F8F8F2;" data-v-561ad4e2>  }</span></span>
<span class="line" data-v-561ad4e2><span style="color:#50FA7B;" data-v-561ad4e2>  render</span><span style="color:#F8F8F2;" data-v-561ad4e2>();</span></span>
<span class="line" data-v-561ad4e2><span style="color:#F8F8F2;" data-v-561ad4e2> }</span></span>
<span class="line" data-v-561ad4e2><span style="color:#F8F8F2;" data-v-561ad4e2>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;" data-v-561ad4e2><div class="line-number" data-v-561ad4e2></div><div class="line-number" data-v-561ad4e2></div><div class="line-number" data-v-561ad4e2></div><div class="line-number" data-v-561ad4e2></div><div class="line-number" data-v-561ad4e2></div><div class="line-number" data-v-561ad4e2></div><div class="line-number" data-v-561ad4e2></div><div class="line-number" data-v-561ad4e2></div><div class="line-number" data-v-561ad4e2></div><div class="line-number" data-v-561ad4e2></div><div class="line-number" data-v-561ad4e2></div><div class="line-number" data-v-561ad4e2></div><div class="line-number" data-v-561ad4e2></div><div class="line-number" data-v-561ad4e2></div><div class="line-number" data-v-561ad4e2></div><div class="line-number" data-v-561ad4e2></div><div class="line-number" data-v-561ad4e2></div><div class="line-number" data-v-561ad4e2></div><div class="line-number" data-v-561ad4e2></div><div class="line-number" data-v-561ad4e2></div><div class="line-number" data-v-561ad4e2></div><div class="line-number" data-v-561ad4e2></div><div class="line-number" data-v-561ad4e2></div><div class="line-number" data-v-561ad4e2></div><div class="line-number" data-v-561ad4e2></div><div class="line-number" data-v-561ad4e2></div><div class="line-number" data-v-561ad4e2></div><div class="line-number" data-v-561ad4e2></div><div class="line-number" data-v-561ad4e2></div><div class="line-number" data-v-561ad4e2></div><div class="line-number" data-v-561ad4e2></div><div class="line-number" data-v-561ad4e2></div><div class="line-number" data-v-561ad4e2></div><div class="line-number" data-v-561ad4e2></div><div class="line-number" data-v-561ad4e2></div><div class="line-number" data-v-561ad4e2></div><div class="line-number" data-v-561ad4e2></div><div class="line-number" data-v-561ad4e2></div><div class="line-number" data-v-561ad4e2></div><div class="line-number" data-v-561ad4e2></div><div class="line-number" data-v-561ad4e2></div><div class="line-number" data-v-561ad4e2></div><div class="line-number" data-v-561ad4e2></div><div class="line-number" data-v-561ad4e2></div><div class="line-number" data-v-561ad4e2></div><div class="line-number" data-v-561ad4e2></div><div class="line-number" data-v-561ad4e2></div><div class="line-number" data-v-561ad4e2></div><div class="line-number" data-v-561ad4e2></div><div class="line-number" data-v-561ad4e2></div><div class="line-number" data-v-561ad4e2></div><div class="line-number" data-v-561ad4e2></div><div class="line-number" data-v-561ad4e2></div><div class="line-number" data-v-561ad4e2></div><div class="line-number" data-v-561ad4e2></div><div class="line-number" data-v-561ad4e2></div><div class="line-number" data-v-561ad4e2></div><div class="line-number" data-v-561ad4e2></div><div class="line-number" data-v-561ad4e2></div><div class="line-number" data-v-561ad4e2></div><div class="line-number" data-v-561ad4e2></div><div class="line-number" data-v-561ad4e2></div><div class="line-number" data-v-561ad4e2></div><div class="line-number" data-v-561ad4e2></div><div class="line-number" data-v-561ad4e2></div><div class="line-number" data-v-561ad4e2></div><div class="line-number" data-v-561ad4e2></div><div class="line-number" data-v-561ad4e2></div><div class="line-number" data-v-561ad4e2></div><div class="line-number" data-v-561ad4e2></div><div class="line-number" data-v-561ad4e2></div><div class="line-number" data-v-561ad4e2></div></div></div>`,5)),B("div",fa,null,512),t[1]||(t[1]=q(`<div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#282A36;color:#F8F8F2;" data-v-561ad4e2><pre class="shiki dracula vp-code" data-v-561ad4e2><code data-v-561ad4e2><span class="line" data-v-561ad4e2><span style="color:#FF79C6;" data-v-561ad4e2>const</span><span style="color:#F8F8F2;" data-v-561ad4e2> material </span><span style="color:#FF79C6;" data-v-561ad4e2>=</span><span style="color:#FF79C6;font-weight:bold;" data-v-561ad4e2> new</span><span style="color:#BD93F9;" data-v-561ad4e2> THREE</span><span style="color:#F8F8F2;" data-v-561ad4e2>.</span><span style="color:#50FA7B;" data-v-561ad4e2>MeshBasicMaterial</span><span style="color:#F8F8F2;" data-v-561ad4e2>({ </span><span style="color:#6272A4;" data-v-561ad4e2>// 创建网格基本材质</span></span>
<span class="line" data-v-561ad4e2><span style="color:#F8F8F2;" data-v-561ad4e2>    wireframe</span><span style="color:#FF79C6;" data-v-561ad4e2>:</span><span style="color:#BD93F9;" data-v-561ad4e2> true</span><span style="color:#6272A4;" data-v-561ad4e2>  // wireframe 为 true 时，表示显示为线框模式，否则就是默认表示实心的</span></span>
<span class="line" data-v-561ad4e2><span style="color:#F8F8F2;" data-v-561ad4e2>})</span></span>
<span class="line" data-v-561ad4e2><span style="color:#FF79C6;" data-v-561ad4e2>const</span><span style="color:#F8F8F2;" data-v-561ad4e2> redMaterial </span><span style="color:#FF79C6;" data-v-561ad4e2>=</span><span style="color:#FF79C6;font-weight:bold;" data-v-561ad4e2> new</span><span style="color:#BD93F9;" data-v-561ad4e2> THREE</span><span style="color:#F8F8F2;" data-v-561ad4e2>.</span><span style="color:#50FA7B;" data-v-561ad4e2>MeshBasicMaterial</span><span style="color:#F8F8F2;" data-v-561ad4e2>({ </span><span style="color:#6272A4;" data-v-561ad4e2>// 创建颜色材质，设置为红色 </span></span>
<span class="line" data-v-561ad4e2><span style="color:#F8F8F2;" data-v-561ad4e2>    color</span><span style="color:#FF79C6;" data-v-561ad4e2>:</span><span style="color:#E9F284;" data-v-561ad4e2>&#39;</span><span style="color:#F1FA8C;" data-v-561ad4e2>#ff0000</span><span style="color:#E9F284;" data-v-561ad4e2>&#39;</span></span>
<span class="line" data-v-561ad4e2><span style="color:#F8F8F2;" data-v-561ad4e2>})</span></span>
<span class="line" data-v-561ad4e2></span>
<span class="line" data-v-561ad4e2><span style="color:#FF79C6;" data-v-561ad4e2>let</span><span style="color:#F8F8F2;" data-v-561ad4e2> cubeArr </span><span style="color:#FF79C6;" data-v-561ad4e2>=</span><span style="color:#F8F8F2;" data-v-561ad4e2> []</span></span>
<span class="line" data-v-561ad4e2><span style="color:#FF79C6;" data-v-561ad4e2>for</span><span style="color:#F8F8F2;" data-v-561ad4e2>(</span><span style="color:#FF79C6;" data-v-561ad4e2>let</span><span style="color:#F8F8F2;" data-v-561ad4e2> i </span><span style="color:#FF79C6;" data-v-561ad4e2>=</span><span style="color:#FF79C6;" data-v-561ad4e2> -</span><span style="color:#BD93F9;" data-v-561ad4e2>5</span><span style="color:#F8F8F2;" data-v-561ad4e2>;i</span><span style="color:#FF79C6;" data-v-561ad4e2>&lt;</span><span style="color:#BD93F9;" data-v-561ad4e2>5</span><span style="color:#F8F8F2;" data-v-561ad4e2>;i</span><span style="color:#FF79C6;" data-v-561ad4e2>++</span><span style="color:#F8F8F2;" data-v-561ad4e2>) { </span><span style="color:#6272A4;" data-v-561ad4e2>// 创建多个立方体</span></span>
<span class="line" data-v-561ad4e2><span style="color:#FF79C6;" data-v-561ad4e2>    for</span><span style="color:#F8F8F2;" data-v-561ad4e2>(</span><span style="color:#FF79C6;" data-v-561ad4e2>let</span><span style="color:#F8F8F2;" data-v-561ad4e2> j </span><span style="color:#FF79C6;" data-v-561ad4e2>=</span><span style="color:#FF79C6;" data-v-561ad4e2>  -</span><span style="color:#BD93F9;" data-v-561ad4e2>5</span><span style="color:#F8F8F2;" data-v-561ad4e2>;j </span><span style="color:#FF79C6;" data-v-561ad4e2>&lt;</span><span style="color:#BD93F9;" data-v-561ad4e2>5</span><span style="color:#F8F8F2;" data-v-561ad4e2>;j</span><span style="color:#FF79C6;" data-v-561ad4e2>++</span><span style="color:#F8F8F2;" data-v-561ad4e2>) {</span></span>
<span class="line" data-v-561ad4e2><span style="color:#FF79C6;" data-v-561ad4e2>        for</span><span style="color:#F8F8F2;" data-v-561ad4e2>(</span><span style="color:#FF79C6;" data-v-561ad4e2>let</span><span style="color:#F8F8F2;" data-v-561ad4e2> z </span><span style="color:#FF79C6;" data-v-561ad4e2>=</span><span style="color:#FF79C6;" data-v-561ad4e2> -</span><span style="color:#BD93F9;" data-v-561ad4e2>5</span><span style="color:#F8F8F2;" data-v-561ad4e2>;z</span><span style="color:#FF79C6;" data-v-561ad4e2>&lt;</span><span style="color:#BD93F9;" data-v-561ad4e2>5</span><span style="color:#F8F8F2;" data-v-561ad4e2>;z</span><span style="color:#FF79C6;" data-v-561ad4e2>++</span><span style="color:#F8F8F2;" data-v-561ad4e2>) {</span></span>
<span class="line" data-v-561ad4e2><span style="color:#FF79C6;" data-v-561ad4e2>            const</span><span style="color:#F8F8F2;" data-v-561ad4e2> cube </span><span style="color:#FF79C6;" data-v-561ad4e2>=</span><span style="color:#FF79C6;font-weight:bold;" data-v-561ad4e2> new</span><span style="color:#BD93F9;" data-v-561ad4e2> THREE</span><span style="color:#F8F8F2;" data-v-561ad4e2>.</span><span style="color:#50FA7B;" data-v-561ad4e2>Mesh</span><span style="color:#F8F8F2;" data-v-561ad4e2>(cubeGeometry,material); </span><span style="color:#6272A4;" data-v-561ad4e2>// 创建立方体网格</span></span>
<span class="line" data-v-561ad4e2><span style="color:#F8F8F2;" data-v-561ad4e2>            cube.position.</span><span style="color:#50FA7B;" data-v-561ad4e2>set</span><span style="color:#F8F8F2;" data-v-561ad4e2>(i,j,z); </span><span style="color:#6272A4;" data-v-561ad4e2>// 设置立方体网格的位置</span></span>
<span class="line" data-v-561ad4e2><span style="color:#F8F8F2;" data-v-561ad4e2>            scene.</span><span style="color:#50FA7B;" data-v-561ad4e2>add</span><span style="color:#F8F8F2;" data-v-561ad4e2>(cube); </span><span style="color:#6272A4;" data-v-561ad4e2>// 将立方体网格添加到场景中</span></span>
<span class="line" data-v-561ad4e2><span style="color:#F8F8F2;" data-v-561ad4e2>            cubeArr.</span><span style="color:#50FA7B;" data-v-561ad4e2>push</span><span style="color:#F8F8F2;" data-v-561ad4e2>(cube) </span><span style="color:#6272A4;" data-v-561ad4e2>// 将立方体放入 cubeArr 数组中</span></span>
<span class="line" data-v-561ad4e2><span style="color:#F8F8F2;" data-v-561ad4e2>        }</span></span>
<span class="line" data-v-561ad4e2><span style="color:#F8F8F2;" data-v-561ad4e2>    }</span></span>
<span class="line" data-v-561ad4e2><span style="color:#F8F8F2;" data-v-561ad4e2>}</span></span>
<span class="line" data-v-561ad4e2></span>
<span class="line" data-v-561ad4e2><span style="color:#FF79C6;" data-v-561ad4e2>function</span><span style="color:#50FA7B;" data-v-561ad4e2> onPointerMove</span><span style="color:#F8F8F2;" data-v-561ad4e2>(</span><span style="color:#FFB86C;font-style:italic;" data-v-561ad4e2>event</span><span style="color:#F8F8F2;" data-v-561ad4e2>) {</span></span>
<span class="line" data-v-561ad4e2><span style="color:#F8F8F2;" data-v-561ad4e2>    mouse.x </span><span style="color:#FF79C6;" data-v-561ad4e2>=</span><span style="color:#F8F8F2;" data-v-561ad4e2> (event.clientX </span><span style="color:#FF79C6;" data-v-561ad4e2>/</span><span style="color:#F8F8F2;" data-v-561ad4e2> window.innerWidth) </span><span style="color:#FF79C6;" data-v-561ad4e2>*</span><span style="color:#BD93F9;" data-v-561ad4e2>2</span><span style="color:#FF79C6;" data-v-561ad4e2> -</span><span style="color:#BD93F9;" data-v-561ad4e2> 1</span><span style="color:#F8F8F2;" data-v-561ad4e2>; </span><span style="color:#6272A4;" data-v-561ad4e2>// 计算鼠标在屏幕上的位置，转换为 Three.js 坐标系的位置</span></span>
<span class="line" data-v-561ad4e2><span style="color:#F8F8F2;" data-v-561ad4e2>    mouse.y </span><span style="color:#FF79C6;" data-v-561ad4e2>=</span><span style="color:#FF79C6;" data-v-561ad4e2> -</span><span style="color:#F8F8F2;" data-v-561ad4e2>((event.clientY </span><span style="color:#FF79C6;" data-v-561ad4e2>/</span><span style="color:#F8F8F2;" data-v-561ad4e2> window.innerHeight)</span><span style="color:#FF79C6;" data-v-561ad4e2>*</span><span style="color:#BD93F9;" data-v-561ad4e2> 2</span><span style="color:#FF79C6;" data-v-561ad4e2> -</span><span style="color:#BD93F9;" data-v-561ad4e2> 1</span><span style="color:#F8F8F2;" data-v-561ad4e2>);</span></span>
<span class="line" data-v-561ad4e2><span style="color:#F8F8F2;" data-v-561ad4e2>    raycaster.</span><span style="color:#50FA7B;" data-v-561ad4e2>setFromCamera</span><span style="color:#F8F8F2;" data-v-561ad4e2>(mouse, camera); </span><span style="color:#6272A4;" data-v-561ad4e2>// 从相机透视投影的位置发射一个射线，并求出射线经过的物体</span></span>
<span class="line" data-v-561ad4e2><span style="color:#FF79C6;" data-v-561ad4e2>    let</span><span style="color:#F8F8F2;" data-v-561ad4e2> result </span><span style="color:#FF79C6;" data-v-561ad4e2>=</span><span style="color:#F8F8F2;" data-v-561ad4e2> raycaster.</span><span style="color:#50FA7B;" data-v-561ad4e2>intersectObjects</span><span style="color:#F8F8F2;" data-v-561ad4e2>(cubeArr); </span><span style="color:#6272A4;" data-v-561ad4e2>// 射线选择器与立方体数组作为参数，返回一个对象数组 result，其中包含射线经过的物体</span></span>
<span class="line" data-v-561ad4e2><span style="color:#F8F8F2;" data-v-561ad4e2>    result.</span><span style="color:#50FA7B;" data-v-561ad4e2>forEach</span><span style="color:#F8F8F2;" data-v-561ad4e2>((</span><span style="color:#FFB86C;font-style:italic;" data-v-561ad4e2>item</span><span style="color:#F8F8F2;" data-v-561ad4e2>) </span><span style="color:#FF79C6;" data-v-561ad4e2>=&gt;</span><span style="color:#F8F8F2;" data-v-561ad4e2> { </span><span style="color:#6272A4;" data-v-561ad4e2>// 遍历射线碰撞得到的所有物体，将它们的材质改为红色</span></span>
<span class="line" data-v-561ad4e2><span style="color:#F8F8F2;" data-v-561ad4e2>      item.object.material </span><span style="color:#FF79C6;" data-v-561ad4e2>=</span><span style="color:#F8F8F2;" data-v-561ad4e2> redMaterial;</span></span>
<span class="line" data-v-561ad4e2><span style="color:#F8F8F2;" data-v-561ad4e2>    });</span></span>
<span class="line" data-v-561ad4e2><span style="color:#F8F8F2;" data-v-561ad4e2>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;" data-v-561ad4e2><div class="line-number" data-v-561ad4e2></div><div class="line-number" data-v-561ad4e2></div><div class="line-number" data-v-561ad4e2></div><div class="line-number" data-v-561ad4e2></div><div class="line-number" data-v-561ad4e2></div><div class="line-number" data-v-561ad4e2></div><div class="line-number" data-v-561ad4e2></div><div class="line-number" data-v-561ad4e2></div><div class="line-number" data-v-561ad4e2></div><div class="line-number" data-v-561ad4e2></div><div class="line-number" data-v-561ad4e2></div><div class="line-number" data-v-561ad4e2></div><div class="line-number" data-v-561ad4e2></div><div class="line-number" data-v-561ad4e2></div><div class="line-number" data-v-561ad4e2></div><div class="line-number" data-v-561ad4e2></div><div class="line-number" data-v-561ad4e2></div><div class="line-number" data-v-561ad4e2></div><div class="line-number" data-v-561ad4e2></div><div class="line-number" data-v-561ad4e2></div><div class="line-number" data-v-561ad4e2></div><div class="line-number" data-v-561ad4e2></div><div class="line-number" data-v-561ad4e2></div><div class="line-number" data-v-561ad4e2></div><div class="line-number" data-v-561ad4e2></div><div class="line-number" data-v-561ad4e2></div><div class="line-number" data-v-561ad4e2></div><div class="line-number" data-v-561ad4e2></div></div></div>`,1)),B("div",Aa,null,512),t[2]||(t[2]=q(`<h2 id="文字显示隐藏" tabindex="-1" data-v-561ad4e2><a class="header-anchor" href="#文字显示隐藏" data-v-561ad4e2><span data-v-561ad4e2>文字显示隐藏</span></a></h2><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#282A36;color:#F8F8F2;" data-v-561ad4e2><pre class="shiki dracula vp-code" data-v-561ad4e2><code data-v-561ad4e2><span class="line" data-v-561ad4e2><span style="color:#6272A4;" data-v-561ad4e2>// 月亮Label隐藏</span></span>
<span class="line" data-v-561ad4e2><span style="color:#FF79C6;" data-v-561ad4e2>const</span><span style="color:#F8F8F2;" data-v-561ad4e2> elapsed </span><span style="color:#FF79C6;" data-v-561ad4e2>=</span><span style="color:#F8F8F2;" data-v-561ad4e2> clock.</span><span style="color:#50FA7B;" data-v-561ad4e2>getElapsedTime</span><span style="color:#F8F8F2;" data-v-561ad4e2>();</span></span>
<span class="line" data-v-561ad4e2><span style="color:#F8F8F2;" data-v-561ad4e2>moon.position.</span><span style="color:#50FA7B;" data-v-561ad4e2>set</span><span style="color:#F8F8F2;" data-v-561ad4e2>(Math.</span><span style="color:#50FA7B;" data-v-561ad4e2>sin</span><span style="color:#F8F8F2;" data-v-561ad4e2>(elapsed) </span><span style="color:#FF79C6;" data-v-561ad4e2>*</span><span style="color:#BD93F9;" data-v-561ad4e2> 8</span><span style="color:#F8F8F2;" data-v-561ad4e2>, </span><span style="color:#BD93F9;" data-v-561ad4e2>0</span><span style="color:#F8F8F2;" data-v-561ad4e2>, Math.</span><span style="color:#50FA7B;" data-v-561ad4e2>cos</span><span style="color:#F8F8F2;" data-v-561ad4e2>(elapsed) </span><span style="color:#FF79C6;" data-v-561ad4e2>*</span><span style="color:#BD93F9;" data-v-561ad4e2> 8</span><span style="color:#F8F8F2;" data-v-561ad4e2>);</span></span>
<span class="line" data-v-561ad4e2></span>
<span class="line" data-v-561ad4e2><span style="color:#FF79C6;" data-v-561ad4e2>const</span><span style="color:#F8F8F2;" data-v-561ad4e2> moonPosition </span><span style="color:#FF79C6;" data-v-561ad4e2>=</span><span style="color:#F8F8F2;" data-v-561ad4e2> moon.position.</span><span style="color:#50FA7B;" data-v-561ad4e2>clone</span><span style="color:#F8F8F2;" data-v-561ad4e2>();</span></span>
<span class="line" data-v-561ad4e2><span style="color:#FF79C6;" data-v-561ad4e2>const</span><span style="color:#F8F8F2;" data-v-561ad4e2> cameraPos </span><span style="color:#FF79C6;" data-v-561ad4e2>=</span><span style="color:#F8F8F2;" data-v-561ad4e2> camera.position.</span><span style="color:#50FA7B;" data-v-561ad4e2>clone</span><span style="color:#F8F8F2;" data-v-561ad4e2>()</span></span>
<span class="line" data-v-561ad4e2><span style="color:#6272A4;" data-v-561ad4e2>/*</span></span>
<span class="line" data-v-561ad4e2><span style="color:#6272A4;" data-v-561ad4e2>通过 moonPosition.clone() 和 camera.position.clone() 克隆 moon 的位置和摄像机的位置，避免直接修改 moonPosition 和 cameraPos 对象的值。</span></span>
<span class="line" data-v-561ad4e2><span style="color:#6272A4;" data-v-561ad4e2>通过 moonPosition.sub(cameraPos) 计算出从摄像机指向 moon 的向量。</span></span>
<span class="line" data-v-561ad4e2><span style="color:#6272A4;" data-v-561ad4e2>通过 .normalize() 将向量转换为单位向量，即长度为 1 的向量，方便后续的计算。这样得到的向量就是一个方向，指向摄像机位置和 moon 位置之间的向量。</span></span>
<span class="line" data-v-561ad4e2><span style="color:#6272A4;" data-v-561ad4e2>*/</span></span>
<span class="line" data-v-561ad4e2><span style="color:#F8F8F2;" data-v-561ad4e2>rayCasterMoon.</span><span style="color:#50FA7B;" data-v-561ad4e2>set</span><span style="color:#F8F8F2;" data-v-561ad4e2>(cameraPos,moonPosition.</span><span style="color:#50FA7B;" data-v-561ad4e2>sub</span><span style="color:#F8F8F2;" data-v-561ad4e2>(cameraPos).</span><span style="color:#50FA7B;" data-v-561ad4e2>normalize</span><span style="color:#F8F8F2;" data-v-561ad4e2>())</span></span>
<span class="line" data-v-561ad4e2><span style="color:#FF79C6;" data-v-561ad4e2>const</span><span style="color:#F8F8F2;" data-v-561ad4e2> intersectsMoon </span><span style="color:#FF79C6;" data-v-561ad4e2>=</span><span style="color:#F8F8F2;" data-v-561ad4e2> rayCasterMoon.</span><span style="color:#50FA7B;" data-v-561ad4e2>intersectObjects</span><span style="color:#F8F8F2;" data-v-561ad4e2>(scene.children,</span><span style="color:#BD93F9;" data-v-561ad4e2>true</span><span style="color:#F8F8F2;" data-v-561ad4e2>)</span></span>
<span class="line" data-v-561ad4e2><span style="color:#FF79C6;" data-v-561ad4e2>if</span><span style="color:#F8F8F2;" data-v-561ad4e2>(intersectsMoon.length </span><span style="color:#FF79C6;" data-v-561ad4e2>&gt;</span><span style="color:#BD93F9;" data-v-561ad4e2>0</span><span style="color:#FF79C6;" data-v-561ad4e2> &amp;&amp;</span><span style="color:#F8F8F2;" data-v-561ad4e2> intersectsMoon[</span><span style="color:#BD93F9;" data-v-561ad4e2>0</span><span style="color:#F8F8F2;" data-v-561ad4e2>].object </span><span style="color:#FF79C6;" data-v-561ad4e2>!==</span><span style="color:#F8F8F2;" data-v-561ad4e2> moon) {</span></span>
<span class="line" data-v-561ad4e2><span style="color:#F8F8F2;" data-v-561ad4e2>    moonLabel.element.style.visibility </span><span style="color:#FF79C6;" data-v-561ad4e2>=</span><span style="color:#E9F284;" data-v-561ad4e2> &#39;</span><span style="color:#F1FA8C;" data-v-561ad4e2>hidden</span><span style="color:#E9F284;" data-v-561ad4e2>&#39;</span></span>
<span class="line" data-v-561ad4e2><span style="color:#F8F8F2;" data-v-561ad4e2>}</span><span style="color:#FF79C6;" data-v-561ad4e2>else</span><span style="color:#F8F8F2;" data-v-561ad4e2>{</span></span>
<span class="line" data-v-561ad4e2><span style="color:#F8F8F2;" data-v-561ad4e2>    moonLabel.element.style.visibility </span><span style="color:#FF79C6;" data-v-561ad4e2>=</span><span style="color:#E9F284;" data-v-561ad4e2> &#39;</span><span style="color:#F1FA8C;" data-v-561ad4e2>initial</span><span style="color:#E9F284;" data-v-561ad4e2>&#39;</span></span>
<span class="line" data-v-561ad4e2><span style="color:#F8F8F2;" data-v-561ad4e2>}</span></span>
<span class="line" data-v-561ad4e2></span>
<span class="line" data-v-561ad4e2></span>
<span class="line" data-v-561ad4e2><span style="color:#6272A4;" data-v-561ad4e2>// 中国Label隐藏</span></span>
<span class="line" data-v-561ad4e2></span>
<span class="line" data-v-561ad4e2><span style="color:#FF79C6;" data-v-561ad4e2>const</span><span style="color:#F8F8F2;" data-v-561ad4e2> chinaPosition </span><span style="color:#FF79C6;" data-v-561ad4e2>=</span><span style="color:#F8F8F2;" data-v-561ad4e2> chinaLabel.position.</span><span style="color:#50FA7B;" data-v-561ad4e2>clone</span><span style="color:#F8F8F2;" data-v-561ad4e2>();</span></span>
<span class="line" data-v-561ad4e2></span>
<span class="line" data-v-561ad4e2><span style="color:#6272A4;" data-v-561ad4e2>// 计算出标签跟摄像机的距离</span></span>
<span class="line" data-v-561ad4e2><span style="color:#FF79C6;" data-v-561ad4e2>const</span><span style="color:#F8F8F2;" data-v-561ad4e2> labelDistance </span><span style="color:#FF79C6;" data-v-561ad4e2>=</span><span style="color:#F8F8F2;" data-v-561ad4e2> chinaPosition.</span><span style="color:#50FA7B;" data-v-561ad4e2>distanceTo</span><span style="color:#F8F8F2;" data-v-561ad4e2>(camera.position);</span></span>
<span class="line" data-v-561ad4e2><span style="color:#6272A4;" data-v-561ad4e2>// 检测射线的碰撞</span></span>
<span class="line" data-v-561ad4e2><span style="color:#6272A4;" data-v-561ad4e2>// 向量(坐标)从世界空间投影到相机的标准化设备坐标 (NDC) 空间。</span></span>
<span class="line" data-v-561ad4e2><span style="color:#6272A4;" data-v-561ad4e2>/*</span></span>
<span class="line" data-v-561ad4e2><span style="color:#6272A4;" data-v-561ad4e2>project() 方法是 Object3D 类的一个方法，用于将三维坐标转换为屏幕上的二维坐标。</span></span>
<span class="line" data-v-561ad4e2><span style="color:#6272A4;" data-v-561ad4e2>它需要传入一个参数 camera，表示用于投影计算的相机</span></span>
<span class="line" data-v-561ad4e2><span style="color:#6272A4;" data-v-561ad4e2>*/</span></span>
<span class="line" data-v-561ad4e2><span style="color:#F8F8F2;" data-v-561ad4e2>chinaPosition.</span><span style="color:#50FA7B;" data-v-561ad4e2>project</span><span style="color:#F8F8F2;" data-v-561ad4e2>(camera);</span></span>
<span class="line" data-v-561ad4e2></span>
<span class="line" data-v-561ad4e2><span style="color:#F8F8F2;" data-v-561ad4e2>raycaster.</span><span style="color:#50FA7B;" data-v-561ad4e2>setFromCamera</span><span style="color:#F8F8F2;" data-v-561ad4e2>(chinaPosition,camera);</span></span>
<span class="line" data-v-561ad4e2><span style="color:#F8F8F2;" data-v-561ad4e2>       </span></span>
<span class="line" data-v-561ad4e2><span style="color:#FF79C6;" data-v-561ad4e2>const</span><span style="color:#F8F8F2;" data-v-561ad4e2> intersects </span><span style="color:#FF79C6;" data-v-561ad4e2>=</span><span style="color:#F8F8F2;" data-v-561ad4e2> raycaster.</span><span style="color:#50FA7B;" data-v-561ad4e2>intersectObjects</span><span style="color:#F8F8F2;" data-v-561ad4e2>(scene.children,</span><span style="color:#BD93F9;" data-v-561ad4e2>true</span><span style="color:#F8F8F2;" data-v-561ad4e2>)</span></span>
<span class="line" data-v-561ad4e2></span>
<span class="line" data-v-561ad4e2><span style="color:#FF79C6;" data-v-561ad4e2>if</span><span style="color:#F8F8F2;" data-v-561ad4e2>(intersects.length </span><span style="color:#FF79C6;" data-v-561ad4e2>==</span><span style="color:#BD93F9;" data-v-561ad4e2> 0</span><span style="color:#F8F8F2;" data-v-561ad4e2>){</span></span>
<span class="line" data-v-561ad4e2><span style="color:#F8F8F2;" data-v-561ad4e2>  chinaLabel.element.style.visibility </span><span style="color:#FF79C6;" data-v-561ad4e2>=</span><span style="color:#E9F284;" data-v-561ad4e2> &#39;</span><span style="color:#F1FA8C;" data-v-561ad4e2>initial</span><span style="color:#E9F284;" data-v-561ad4e2>&#39;</span></span>
<span class="line" data-v-561ad4e2><span style="color:#F8F8F2;" data-v-561ad4e2>}</span><span style="color:#FF79C6;" data-v-561ad4e2>else</span><span style="color:#F8F8F2;" data-v-561ad4e2>{</span></span>
<span class="line" data-v-561ad4e2><span style="color:#FF79C6;" data-v-561ad4e2>  const</span><span style="color:#F8F8F2;" data-v-561ad4e2> minDistance </span><span style="color:#FF79C6;" data-v-561ad4e2>=</span><span style="color:#F8F8F2;" data-v-561ad4e2> intersects[</span><span style="color:#BD93F9;" data-v-561ad4e2>0</span><span style="color:#F8F8F2;" data-v-561ad4e2>].distance;</span></span>
<span class="line" data-v-561ad4e2><span style="color:#FF79C6;" data-v-561ad4e2>  if</span><span style="color:#F8F8F2;" data-v-561ad4e2>(minDistance</span><span style="color:#FF79C6;" data-v-561ad4e2>&lt;</span><span style="color:#F8F8F2;" data-v-561ad4e2>labelDistance){</span></span>
<span class="line" data-v-561ad4e2><span style="color:#F8F8F2;" data-v-561ad4e2>    chinaLabel.element.style.visibility </span><span style="color:#FF79C6;" data-v-561ad4e2>=</span><span style="color:#E9F284;" data-v-561ad4e2> &#39;</span><span style="color:#F1FA8C;" data-v-561ad4e2>hidden</span><span style="color:#E9F284;" data-v-561ad4e2>&#39;</span></span>
<span class="line" data-v-561ad4e2><span style="color:#F8F8F2;" data-v-561ad4e2>  }</span><span style="color:#FF79C6;" data-v-561ad4e2>else</span><span style="color:#F8F8F2;" data-v-561ad4e2>{</span></span>
<span class="line" data-v-561ad4e2><span style="color:#F8F8F2;" data-v-561ad4e2>    chinaLabel.element.style.visibility </span><span style="color:#FF79C6;" data-v-561ad4e2>=</span><span style="color:#E9F284;" data-v-561ad4e2> &#39;</span><span style="color:#F1FA8C;" data-v-561ad4e2>initial</span><span style="color:#E9F284;" data-v-561ad4e2>&#39;</span></span>
<span class="line" data-v-561ad4e2><span style="color:#F8F8F2;" data-v-561ad4e2>  }</span></span>
<span class="line" data-v-561ad4e2><span style="color:#F8F8F2;" data-v-561ad4e2>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;" data-v-561ad4e2><div class="line-number" data-v-561ad4e2></div><div class="line-number" data-v-561ad4e2></div><div class="line-number" data-v-561ad4e2></div><div class="line-number" data-v-561ad4e2></div><div class="line-number" data-v-561ad4e2></div><div class="line-number" data-v-561ad4e2></div><div class="line-number" data-v-561ad4e2></div><div class="line-number" data-v-561ad4e2></div><div class="line-number" data-v-561ad4e2></div><div class="line-number" data-v-561ad4e2></div><div class="line-number" data-v-561ad4e2></div><div class="line-number" data-v-561ad4e2></div><div class="line-number" data-v-561ad4e2></div><div class="line-number" data-v-561ad4e2></div><div class="line-number" data-v-561ad4e2></div><div class="line-number" data-v-561ad4e2></div><div class="line-number" data-v-561ad4e2></div><div class="line-number" data-v-561ad4e2></div><div class="line-number" data-v-561ad4e2></div><div class="line-number" data-v-561ad4e2></div><div class="line-number" data-v-561ad4e2></div><div class="line-number" data-v-561ad4e2></div><div class="line-number" data-v-561ad4e2></div><div class="line-number" data-v-561ad4e2></div><div class="line-number" data-v-561ad4e2></div><div class="line-number" data-v-561ad4e2></div><div class="line-number" data-v-561ad4e2></div><div class="line-number" data-v-561ad4e2></div><div class="line-number" data-v-561ad4e2></div><div class="line-number" data-v-561ad4e2></div><div class="line-number" data-v-561ad4e2></div><div class="line-number" data-v-561ad4e2></div><div class="line-number" data-v-561ad4e2></div><div class="line-number" data-v-561ad4e2></div><div class="line-number" data-v-561ad4e2></div><div class="line-number" data-v-561ad4e2></div><div class="line-number" data-v-561ad4e2></div><div class="line-number" data-v-561ad4e2></div><div class="line-number" data-v-561ad4e2></div><div class="line-number" data-v-561ad4e2></div><div class="line-number" data-v-561ad4e2></div><div class="line-number" data-v-561ad4e2></div><div class="line-number" data-v-561ad4e2></div><div class="line-number" data-v-561ad4e2></div><div class="line-number" data-v-561ad4e2></div><div class="line-number" data-v-561ad4e2></div><div class="line-number" data-v-561ad4e2></div><div class="line-number" data-v-561ad4e2></div></div></div>`,2)),B("div",ga,null,512),t[3]||(t[3]=B("h1",{id:"参考",tabindex:"-1"},[B("a",{class:"header-anchor",href:"#参考"},[B("span",null,"参考")])],-1)),t[4]||(t[4]=B("p",null,[ha("参考："),B("a",{href:"https://threejs.org/",target:"_blank",rel:"noopener noreferrer"},"https://threejs.org/")],-1))])}const Ta=ua(Ba,[["render",wa],["__scopeId","data-v-561ad4e2"],["__file","threejs-raycaster.html.vue"]]),Sa=JSON.parse('{"path":"/threejs/threejs-raycaster.html","title":"ThreeJS中的射线检测","lang":"en-US","frontmatter":{"title":"ThreeJS中的射线检测","category":["ThreeJS"],"date":"2022-01-24T00:00:00.000Z","description":"Raycaster Raycaster( origin : Vector3, direction : Vector3, near : Float, far : Float ) origin —— 光线投射的原点向量。 direction —— 向射线提供方向的方向向量，应当被标准化。 near —— 返回的所有结果比near远。near不能为负值，其默...","head":[["meta",{"property":"og:url","content":"https://luxiag.github.io/luxiag/blog/threejs/threejs-raycaster.html"}],["meta",{"property":"og:title","content":"ThreeJS中的射线检测"}],["meta",{"property":"og:description","content":"Raycaster Raycaster( origin : Vector3, direction : Vector3, near : Float, far : Float ) origin —— 光线投射的原点向量。 direction —— 向射线提供方向的方向向量，应当被标准化。 near —— 返回的所有结果比near远。near不能为负值，其默..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2024-11-10T14:15:12.000Z"}],["meta",{"property":"article:published_time","content":"2022-01-24T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-11-10T14:15:12.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"ThreeJS中的射线检测\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-01-24T00:00:00.000Z\\",\\"dateModified\\":\\"2024-11-10T14:15:12.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"luxiag\\",\\"url\\":\\"https://luxiag.github.io/luxiag\\"}]}"]]},"git":{"createdTime":1681717941000,"updatedTime":1731248112000,"contributors":[{"name":"luxiag","username":"luxiag","email":"luxiag@qq.com","commits":9,"url":"https://github.com/luxiag"},{"name":"卢祥","username":"卢祥","email":"example@qq.com","commits":2,"url":"https://github.com/卢祥"}]},"readingTime":{"minutes":8.51,"words":2552},"filePathRelative":"threejs/threejs-raycaster.md","localizedDate":"January 24, 2022","excerpt":"<h2>Raycaster</h2>\\n<ul>\\n<li>\\n<p><code>Raycaster( origin : Vector3, direction : Vector3, near : Float, far : Float )</code></p>\\n<ul>\\n<li>origin —— 光线投射的原点向量。</li>\\n<li>direction —— 向射线提供方向的方向向量，应当被标准化。</li>\\n<li>near —— 返回的所有结果比near远。near不能为负值，其默认值为0。</li>\\n<li>far —— 返回的所有结果都比far近。far不能小于near，其默认值为Infinity（正无穷。）</li>\\n</ul>\\n<p>这将创建一个新的raycaster对象。</p>\\n</li>\\n<li>\\n<p><code>.setFromCamera ( coords : Vector2, camera : Camera ) : undefined</code></p>\\n<ul>\\n<li>coords —— 在标准化设备坐标中鼠标的二维坐标 —— X分量与Y分量应当在-1到1之间。</li>\\n<li>camera —— 射线所来源的摄像机。</li>\\n</ul>\\n<p>使用一个新的原点和方向来更新射线。</p>\\n</li>\\n<li>\\n<p><code>.intersectObject ( object : Object3D, recursive : Boolean, optionalTarget : Array ) : Array</code></p>\\n<ul>\\n<li>object —— 检查与射线相交的物体。</li>\\n<li>recursive —— 若为true，则同时也会检查所有的后代。否则将只会检查对象本身。默认值为true。</li>\\n<li>optionalTarget — （可选）设置结果的目标数组。如果不设置这个值，则一个新的Array会被实例化；如果设置了这个值，则在每次调用之前必须清空这个数组（例如：array.length = 0;）。</li>\\n</ul>\\n<p>检测所有在射线与物体之间，包括或不包括后代的相交部分。返回结果时，相交部分将按距离进行排序，最近的位于第一个。\\n该方法返回一个包含有交叉部分的数组:</p>\\n</li>\\n</ul>","autoDesc":true}');export{Ta as comp,Sa as data};
