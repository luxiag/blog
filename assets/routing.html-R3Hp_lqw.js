import{_ as n,e as a,g as l,o}from"./app-Dt3FNJM0.js";const e={};function p(t,s){return o(),a("div",null,s[0]||(s[0]=[l(`<p>用户请求哪个 URL 时，应该由哪个代码逻辑（控制器/页面/处理方法）来处理这个请求。</p><ul><li><p>通俗点说，路由就是个“导航系统”或“地址指引”：</p></li><li><p>用户访问一个网址（例如 /products/1）</p></li><li><p>ASP.NET Core 就用“路由规则”找到对应的控制器、方法或页面，去处理这个请求</p></li></ul><p>浏览器发请求 --&gt; UseRouting() --&gt; 路由匹配 --&gt; UseAuthorization() --&gt; UseEndpoints() 执行方法</p><p>路由是通过UseRouting和UseEndpoints两个中间件配合在一起来完成注册的：</p><h2 id="userouting" tabindex="-1"><a class="header-anchor" href="#userouting"><span>UseRouting</span></a></h2><p>启用路由功能，并根据 URL 匹配到具体的路由终结点（endpoint）</p><ul><li>读取请求 URL 和 HTTP 方法</li><li>匹配已经注册的路由（比如控制器或 endpoint）</li><li>把匹配结果存到 HttpContext 中，供后面的中间件使用（例如授权、执行控制器等）</li></ul><blockquote><p>在调用UseRouting之前，你可以注册一些用于修改路由操作的数据，比如UseRewriter、UseHttpMethodOverride、UsePathBase等。</p></blockquote><div class="language-csharp line-numbers-mode" data-highlighter="shiki" data-ext="csharp" data-title="csharp" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">var</span><span style="color:#F8F8F2;"> app </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> builder.</span><span style="color:#50FA7B;">Build</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">app.</span><span style="color:#50FA7B;">UseRouting</span><span style="color:#F8F8F2;">();              </span><span style="color:#6272A4;">// 开启路由匹配</span></span>
<span class="line"><span style="color:#F8F8F2;">app.</span><span style="color:#50FA7B;">UseAuthentication</span><span style="color:#F8F8F2;">();       </span><span style="color:#6272A4;">// 认证（可选）</span></span>
<span class="line"><span style="color:#F8F8F2;">app.</span><span style="color:#50FA7B;">UseAuthorization</span><span style="color:#F8F8F2;">();        </span><span style="color:#6272A4;">// 授权（可选）</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">app.</span><span style="color:#50FA7B;">UseEndpoints</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">endpoints</span><span style="color:#FF79C6;"> =&gt;</span><span style="color:#6272A4;">  // 注册终结点</span></span>
<span class="line"><span style="color:#F8F8F2;">{</span></span>
<span class="line"><span style="color:#F8F8F2;">    endpoints.</span><span style="color:#50FA7B;">MapControllers</span><span style="color:#F8F8F2;">();    </span><span style="color:#6272A4;">// 启用 Controller 路由</span></span>
<span class="line"><span style="color:#F8F8F2;">    endpoints.</span><span style="color:#50FA7B;">MapRazorPages</span><span style="color:#F8F8F2;">();     </span><span style="color:#6272A4;">// 启用 Razor 页面路由</span></span>
<span class="line"><span style="color:#F8F8F2;">});</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="endpoints" tabindex="-1"><a class="header-anchor" href="#endpoints"><span>Endpoints</span></a></h2><p>ASP.NET Core 中负责“执行匹配到的路由终结点（Endpoint）”的中间件。</p><ul><li><p>从 UseRouting() 那边“拿到”已匹配的 endpoint（比如 Controller 方法、页面等）</p></li><li><p>执行这个 endpoint 对应的处理逻辑</p></li><li><p>调用控制器、Razor 页面、最小 API、gRPC 方法等等</p></li><li><p>完成整个请求处理过程</p></li></ul><div class="language-csharp line-numbers-mode" data-highlighter="shiki" data-ext="csharp" data-title="csharp" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#F8F8F2;">[</span><span style="color:#8BE9FD;font-style:italic;">ApiController</span><span style="color:#F8F8F2;">]</span></span>
<span class="line"><span style="color:#F8F8F2;">[</span><span style="color:#8BE9FD;font-style:italic;">Route</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">api/[controller]</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">)]</span></span>
<span class="line"><span style="color:#FF79C6;">public</span><span style="color:#FF79C6;"> class</span><span style="color:#8BE9FD;"> ProductsController</span><span style="color:#F8F8F2;"> : </span><span style="color:#8BE9FD;font-style:italic;">ControllerBase</span></span>
<span class="line"><span style="color:#F8F8F2;">{</span></span>
<span class="line"><span style="color:#F8F8F2;">    [</span><span style="color:#8BE9FD;font-style:italic;">HttpGet</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">{id}</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">)]</span></span>
<span class="line"><span style="color:#FF79C6;">    public</span><span style="color:#8BE9FD;font-style:italic;"> IActionResult</span><span style="color:#50FA7B;"> Get</span><span style="color:#F8F8F2;">(</span><span style="color:#FF79C6;">int</span><span style="color:#FFB86C;font-style:italic;"> id</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#50FA7B;"> Ok</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">$&quot;</span><span style="color:#F1FA8C;">Product </span><span style="color:#FF79C6;">{</span><span style="color:#F8F8F2;">id</span><span style="color:#FF79C6;">}</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>请求 /api/products/5 时：</p><ul><li><p>UseRouting()：匹配到 ProductsController.Get(int id)</p></li><li><p>UseAuthorization()：检查是否有权限执行</p></li><li><p>UseEndpoints()：执行这个方法，返回 Product 5</p></li></ul><blockquote><p>在调用UseRouting和UseEndpoints之间，可以注册一些用于提前处理路由结果的中间件，如UseAuthentication、UseAuthorization、UseCors等</p></blockquote><div class="language-csharp line-numbers-mode" data-highlighter="shiki" data-ext="csharp" data-title="csharp" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">public</span><span style="color:#FF79C6;"> void</span><span style="color:#50FA7B;"> Configure</span><span style="color:#F8F8F2;">(</span><span style="color:#8BE9FD;font-style:italic;">IApplicationBuilder</span><span style="color:#FFB86C;font-style:italic;"> app</span><span style="color:#F8F8F2;">, </span><span style="color:#8BE9FD;font-style:italic;">IWebHostEnvironment</span><span style="color:#FFB86C;font-style:italic;"> env</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">{</span></span>
<span class="line"><span style="color:#F8F8F2;">    app.</span><span style="color:#50FA7B;">Use</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">next</span><span style="color:#FF79C6;"> =&gt;</span><span style="color:#FFB86C;font-style:italic;"> context</span><span style="color:#FF79C6;"> =&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">    {</span></span>
<span class="line"><span style="color:#6272A4;">        // 在 UseRouting 调用前，始终为 null</span></span>
<span class="line"><span style="color:#F8F8F2;">        Console.</span><span style="color:#50FA7B;">WriteLine</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">$&quot;</span><span style="color:#F1FA8C;">1. Endpoint: </span><span style="color:#FF79C6;">{</span><span style="color:#F8F8F2;">context</span><span style="color:#F1FA8C;">.</span><span style="color:#50FA7B;">GetEndpoint</span><span style="color:#F1FA8C;">()</span><span style="color:#FF79C6;">?</span><span style="color:#F1FA8C;">.</span><span style="color:#F8F8F2;">DisplayName</span><span style="color:#FF79C6;"> ??</span><span style="color:#E9F284;"> &quot;</span><span style="color:#F1FA8C;">null</span><span style="color:#E9F284;">&quot;</span><span style="color:#FF79C6;">}</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#FF79C6;">        return</span><span style="color:#50FA7B;"> next</span><span style="color:#F8F8F2;">(context);</span></span>
<span class="line"><span style="color:#F8F8F2;">    });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">    // EndpointRoutingMiddleware 调用 SetEndpoint 来设置终结点</span></span>
<span class="line"><span style="color:#F8F8F2;">    app.</span><span style="color:#50FA7B;">UseRouting</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">    app.</span><span style="color:#50FA7B;">Use</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">next</span><span style="color:#FF79C6;"> =&gt;</span><span style="color:#FFB86C;font-style:italic;"> context</span><span style="color:#FF79C6;"> =&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">    {</span></span>
<span class="line"><span style="color:#6272A4;">        // 如果路由匹配到了终结点，那么此处就不为 null，否则，还是 null</span></span>
<span class="line"><span style="color:#F8F8F2;">        Console.</span><span style="color:#50FA7B;">WriteLine</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">$&quot;</span><span style="color:#F1FA8C;">2. Endpoint: </span><span style="color:#FF79C6;">{</span><span style="color:#F8F8F2;">context</span><span style="color:#F1FA8C;">.</span><span style="color:#50FA7B;">GetEndpoint</span><span style="color:#F1FA8C;">()</span><span style="color:#FF79C6;">?</span><span style="color:#F1FA8C;">.</span><span style="color:#F8F8F2;">DisplayName</span><span style="color:#FF79C6;"> ??</span><span style="color:#E9F284;"> &quot;</span><span style="color:#F1FA8C;">null</span><span style="color:#E9F284;">&quot;</span><span style="color:#FF79C6;">}</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#FF79C6;">        return</span><span style="color:#50FA7B;"> next</span><span style="color:#F8F8F2;">(context);</span></span>
<span class="line"><span style="color:#F8F8F2;">    });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">    // EndpointMiddleware 通过 GetEndpoint 方法获取终结点，</span></span>
<span class="line"><span style="color:#6272A4;">    // 然后执行该终结点的 RequestDelegate 委托</span></span>
<span class="line"><span style="color:#F8F8F2;">    app.</span><span style="color:#50FA7B;">UseEndpoints</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">endpoints</span><span style="color:#FF79C6;"> =&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">    {</span></span>
<span class="line"><span style="color:#F8F8F2;">        endpoints.</span><span style="color:#50FA7B;">MapGet</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">/</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">context</span><span style="color:#FF79C6;"> =&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">        {</span></span>
<span class="line"><span style="color:#6272A4;">            // 匹配到了终结点，肯定不是 null</span></span>
<span class="line"><span style="color:#F8F8F2;">            Console.</span><span style="color:#50FA7B;">WriteLine</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">$&quot;</span><span style="color:#F1FA8C;">3. Endpoint: </span><span style="color:#FF79C6;">{</span><span style="color:#F8F8F2;">context</span><span style="color:#F1FA8C;">.</span><span style="color:#50FA7B;">GetEndpoint</span><span style="color:#F1FA8C;">()</span><span style="color:#FF79C6;">?</span><span style="color:#F1FA8C;">.</span><span style="color:#F8F8F2;">DisplayName</span><span style="color:#FF79C6;"> ??</span><span style="color:#E9F284;"> &quot;</span><span style="color:#F1FA8C;">null</span><span style="color:#E9F284;">&quot;</span><span style="color:#FF79C6;">}</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#FF79C6;">            return</span><span style="color:#F8F8F2;"> Task.CompletedTask;</span></span>
<span class="line"><span style="color:#F8F8F2;">        }).</span><span style="color:#50FA7B;">WithDisplayName</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">Custom Display Name</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">);  </span><span style="color:#6272A4;">// 自定义终结点名称</span></span>
<span class="line"><span style="color:#F8F8F2;">    });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">    app.</span><span style="color:#50FA7B;">Use</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">next</span><span style="color:#FF79C6;"> =&gt;</span><span style="color:#FFB86C;font-style:italic;"> context</span><span style="color:#FF79C6;"> =&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">    {</span></span>
<span class="line"><span style="color:#6272A4;">        // 只有当路由没有匹配到终结点时，才会执行这里</span></span>
<span class="line"><span style="color:#F8F8F2;">        Console.</span><span style="color:#50FA7B;">WriteLine</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">$&quot;</span><span style="color:#F1FA8C;">4. Endpoint: </span><span style="color:#FF79C6;">{</span><span style="color:#F8F8F2;">context</span><span style="color:#F1FA8C;">.</span><span style="color:#50FA7B;">GetEndpoint</span><span style="color:#F1FA8C;">()</span><span style="color:#FF79C6;">?</span><span style="color:#F1FA8C;">.</span><span style="color:#F8F8F2;">DisplayName</span><span style="color:#FF79C6;"> ??</span><span style="color:#E9F284;"> &quot;</span><span style="color:#F1FA8C;">null</span><span style="color:#E9F284;">&quot;</span><span style="color:#FF79C6;">}</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#FF79C6;">        return</span><span style="color:#50FA7B;"> next</span><span style="color:#F8F8F2;">(context);</span></span>
<span class="line"><span style="color:#F8F8F2;">    });</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="minimal-api" tabindex="-1"><a class="header-anchor" href="#minimal-api"><span>Minimal API</span></a></h2><p>ASP.NET Core 中用于注册路由并直接处理请求的简洁方式,用于将 HTTP 请求（GET、POST 等）直接映射到一个处理函数，不用写控制器！</p><table><thead><tr><th>方法名</th><th>对应的 HTTP 动作</th><th>用途示例</th></tr></thead><tbody><tr><td>MapGet</td><td>GET</td><td>获取数据</td></tr><tr><td>MapPost</td><td>POST</td><td>创建资源</td></tr><tr><td>MapPut</td><td>PUT</td><td>更新资源</td></tr><tr><td>MapDelete</td><td>DELETE</td><td>删除资源</td></tr><tr><td>MapPatch</td><td>PATCH</td><td>局部更新</td></tr></tbody></table><p>方法是挂在 IEndpointRouteBuilder 上的，比如 WebApplication（var app = builder.Build() 之后的那个 app）。</p><div class="language-csharp line-numbers-mode" data-highlighter="shiki" data-ext="csharp" data-title="csharp" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">var</span><span style="color:#F8F8F2;"> builder </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> WebApplication.</span><span style="color:#50FA7B;">CreateBuilder</span><span style="color:#F8F8F2;">(args);</span></span>
<span class="line"><span style="color:#FF79C6;">var</span><span style="color:#F8F8F2;"> app </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> builder.</span><span style="color:#50FA7B;">Build</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">// GET 路由：返回 Hello 字符串</span></span>
<span class="line"><span style="color:#F8F8F2;">app.</span><span style="color:#50FA7B;">MapGet</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">/</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">, () </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#E9F284;"> &quot;</span><span style="color:#F1FA8C;">Hello, world!</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">// POST 路由：接受表单或 JSON 数据</span></span>
<span class="line"><span style="color:#F8F8F2;">app.</span><span style="color:#50FA7B;">MapPost</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">/submit</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">, (</span><span style="color:#8BE9FD;font-style:italic;">UserData</span><span style="color:#FFB86C;font-style:italic;"> data</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">=&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">{</span></span>
<span class="line"><span style="color:#FF79C6;">    return</span><span style="color:#E9F284;"> $&quot;</span><span style="color:#F1FA8C;">Hi </span><span style="color:#FF79C6;">{</span><span style="color:#F8F8F2;">data</span><span style="color:#F1FA8C;">.</span><span style="color:#F8F8F2;">Name</span><span style="color:#FF79C6;">}</span><span style="color:#F1FA8C;">, age </span><span style="color:#FF79C6;">{</span><span style="color:#F8F8F2;">data</span><span style="color:#F1FA8C;">.</span><span style="color:#F8F8F2;">Age</span><span style="color:#FF79C6;">}</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">app.</span><span style="color:#50FA7B;">Run</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">record</span><span style="color:#8BE9FD;"> UserData</span><span style="color:#F8F8F2;">(</span><span style="color:#FF79C6;">string</span><span style="color:#FFB86C;font-style:italic;"> Name</span><span style="color:#F8F8F2;">, </span><span style="color:#FF79C6;">int</span><span style="color:#FFB86C;font-style:italic;"> Age</span><span style="color:#F8F8F2;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="参数绑定" tabindex="-1"><a class="header-anchor" href="#参数绑定"><span>参数绑定</span></a></h3><p>Minimal API 支持直接从请求中自动绑定参数（包括 query、body、route、service 等）。</p><div class="language-csharp line-numbers-mode" data-highlighter="shiki" data-ext="csharp" data-title="csharp" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#6272A4;">// GET 路由：从 query 中获取参数</span></span>
<span class="line"><span style="color:#F8F8F2;">app.</span><span style="color:#50FA7B;">MapGet</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">/query</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">, (</span><span style="color:#FF79C6;">int</span><span style="color:#FFB86C;font-style:italic;"> id</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#E9F284;"> $&quot;</span><span style="color:#F1FA8C;">Id: </span><span style="color:#FF79C6;">{</span><span style="color:#F8F8F2;">id</span><span style="color:#FF79C6;">}</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">// POST 路由：从 body 中获取参数</span></span>
<span class="line"><span style="color:#F8F8F2;">app.</span><span style="color:#50FA7B;">MapPost</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">/body</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">, (</span><span style="color:#8BE9FD;font-style:italic;">UserData</span><span style="color:#FFB86C;font-style:italic;"> data</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#E9F284;"> $&quot;</span><span style="color:#F1FA8C;">Hi </span><span style="color:#FF79C6;">{</span><span style="color:#F8F8F2;">data</span><span style="color:#F1FA8C;">.</span><span style="color:#F8F8F2;">Name</span><span style="color:#FF79C6;">}</span><span style="color:#F1FA8C;">, age </span><span style="color:#FF79C6;">{</span><span style="color:#F8F8F2;">data</span><span style="color:#F1FA8C;">.</span><span style="color:#F8F8F2;">Age</span><span style="color:#FF79C6;">}</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">// GET 路由：从 route 中获取参数</span></span>
<span class="line"><span style="color:#F8F8F2;">app.</span><span style="color:#50FA7B;">MapGet</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">/route/{id}</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">, (</span><span style="color:#FF79C6;">int</span><span style="color:#FFB86C;font-style:italic;"> id</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#E9F284;"> $&quot;</span><span style="color:#F1FA8C;">Id: </span><span style="color:#FF79C6;">{</span><span style="color:#F8F8F2;">id</span><span style="color:#FF79C6;">}</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">// GET 路由：从 service 中获取参数</span></span>
<span class="line"><span style="color:#F8F8F2;">app.</span><span style="color:#50FA7B;">MapGet</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">/service</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">, (</span><span style="color:#8BE9FD;font-style:italic;">MyService</span><span style="color:#FFB86C;font-style:italic;"> service</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#E9F284;"> $&quot;</span><span style="color:#F1FA8C;">Service: </span><span style="color:#FF79C6;">{</span><span style="color:#F8F8F2;">service</span><span style="color:#F1FA8C;">.</span><span style="color:#F8F8F2;">Name</span><span style="color:#FF79C6;">}</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="路由种类" tabindex="-1"><a class="header-anchor" href="#路由种类"><span>路由种类</span></a></h2><table><thead><tr><th>路由方式</th><th>说明</th><th>示例</th></tr></thead><tbody><tr><td>属性路由（Attribute Routing）</td><td>路由信息写在控制器或方法的特性中</td><td>[Route(&quot;api/items/{id}&quot;)]</td></tr><tr><td>约定路由（Conventional Routing）</td><td>统一在 UseEndpoints 中写一套规则</td><td>&quot;controller/action/id?&quot;</td></tr></tbody></table><p><strong>属性路由</strong></p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#F8F8F2;">[</span><span style="color:#50FA7B;">Route</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">api/users</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">)]</span></span>
<span class="line"><span style="color:#F8F8F2;">public </span><span style="color:#FF79C6;">class</span><span style="color:#8BE9FD;"> UsersController</span><span style="color:#F8F8F2;"> : </span><span style="color:#8BE9FD;">Controller</span></span>
<span class="line"><span style="color:#F8F8F2;">{</span></span>
<span class="line"><span style="color:#F8F8F2;">    [</span><span style="color:#50FA7B;">HttpGet</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">{id}</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">)]</span></span>
<span class="line"><span style="color:#FF79C6;">    public</span><span style="color:#F8F8F2;"> IActionResult </span><span style="color:#50FA7B;">Get</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">int</span><span style="color:#FFB86C;font-style:italic;"> id</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#8BE9FD;font-style:italic;"> Ok</span><span style="color:#F8F8F2;">(</span><span style="color:#8BE9FD;font-style:italic;">$</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">User {id}</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>约定路由</strong></p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#F8F8F2;">app.</span><span style="color:#50FA7B;">UseEndpoints</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">endpoints</span><span style="color:#FF79C6;"> =&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">{</span></span>
<span class="line"><span style="color:#F8F8F2;">    endpoints.</span><span style="color:#50FA7B;">MapControllerRoute</span><span style="color:#F8F8F2;">(</span></span>
<span class="line"><span style="color:#F8F8F2;">        name: </span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">default</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">        pattern: </span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">{controller=Home}/{action=Index}/{id?}</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">});</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="路由模板" tabindex="-1"><a class="header-anchor" href="#路由模板"><span>路由模板</span></a></h2><p>ASP.NET Core 中用来定义 URL 路径结构的语法规则，主要用于控制器路由和 Minimal API 中的 URL 匹配。</p><ul><li><p>路由是 大小写不敏感（默认）</p></li><li><p>参数名与方法参数要 匹配</p></li><li><p>多个路由不能冲突（例如两个路由都匹配 /product/1，但含义不一样）</p></li><li><p>越具体的路由应该放前面，越“模糊”（带 *）的放后面</p></li></ul><table><thead><tr><th>模板片段</th><th>说明</th><th>示例</th></tr></thead><tbody><tr><td>固定路径</td><td>精确匹配</td><td><code>/home/index</code></td></tr><tr><td><code>{参数名}</code></td><td>匹配路径中的变量</td><td><code>/product/{id}</code></td></tr><tr><td><code>{参数名?}</code></td><td>可选参数</td><td><code>/product/{id?}</code></td></tr><tr><td><code>{参数名=默认值}</code></td><td>可选参数 + 默认值</td><td><code>{lang=en}</code></td></tr><tr><td><code>{*参数名}</code></td><td>匹配剩余路径（catch-all）</td><td><code>/files/{*filepath}</code></td></tr><tr><td><code>[Route(&quot;api/[controller]&quot;)]</code></td><td>占位符，会自动替换成控制器名</td><td><code>[controller] =&gt; Product</code></td></tr><tr><td><code>[action]</code></td><td>替换为方法名</td><td><code>[action] =&gt; GetById</code></td></tr></tbody></table><h3 id="catch-all" tabindex="-1"><a class="header-anchor" href="#catch-all"><span>Catch-all</span></a></h3><p>路由模板中的星号<code>*</code>和双星号<code>**</code>被称为catch-all参数，该参数可以作为路由参数的前缀，如/Book/{*id}、/Book/{**id}，可以匹配以/Book开头的任意Url，如/Book、/Book/、/Book/abc、/Book/abc/def等。 <code>*</code>和<code>**</code>在一般使用上没有什么区别，它们仅仅在使用LinkGenerator时会有不同，如id = abc/def，当使用/Book/{*id}模板时，会生成<code>/Book/abc%2Fdef</code>，当使用/Book/{**id}模板时，会生成/Book/abc/def。</p><h1 id="参考" tabindex="-1"><a class="header-anchor" href="#参考"><span>参考</span></a></h1><ul><li><a href="https://docs.microsoft.com/zh-cn/aspnet/core/fundamentals/routing?view=aspnetcore-6.0" target="_blank" rel="noopener noreferrer">ASP.NET Core 路由</a></li><li><a href="https://docs.microsoft.com/zh-cn/aspnet/core/fundamentals/minimal-apis?view=aspnetcore-6.0" target="_blank" rel="noopener noreferrer">Minimal API</a></li><li><a href="https://docs.microsoft.com/zh-cn/aspnet/core/fundamentals/routing?view=aspnetcore-6.0#route-template-syntax" target="_blank" rel="noopener noreferrer">ASP.NET Core 路由模板</a></li><li><a href="https://docs.microsoft.com/zh-cn/aspnet/core/fundamentals/routing?view=aspnetcore-6.0#route-types" target="_blank" rel="noopener noreferrer">ASP.NET Core 路由种类</a></li><li><a href="https://www.cnblogs.com/xiaoxiaotank/p/15468491.html" target="_blank" rel="noopener noreferrer">理解ASP.NET Core - 路由(Routing)</a></li></ul>`,39)]))}const c=n(e,[["render",p],["__file","routing.html.vue"]]),F=JSON.parse('{"path":"/dotnet/routing.html","title":"路由 Routing","lang":"en-US","frontmatter":{"title":"路由 Routing","date":"2025-04-16T00:00:00.000Z","category":["DotNet"],"description":"用户请求哪个 URL 时，应该由哪个代码逻辑（控制器/页面/处理方法）来处理这个请求。 通俗点说，路由就是个“导航系统”或“地址指引”： 用户访问一个网址（例如 /products/1） ASP.NET Core 就用“路由规则”找到对应的控制器、方法或页面，去处理这个请求 浏览器发请求 --> UseRouting() --> 路由匹配 --> Us...","head":[["meta",{"property":"og:url","content":"https://luxiag.github.io/luxiag/blog/dotnet/routing.html"}],["meta",{"property":"og:title","content":"路由 Routing"}],["meta",{"property":"og:description","content":"用户请求哪个 URL 时，应该由哪个代码逻辑（控制器/页面/处理方法）来处理这个请求。 通俗点说，路由就是个“导航系统”或“地址指引”： 用户访问一个网址（例如 /products/1） ASP.NET Core 就用“路由规则”找到对应的控制器、方法或页面，去处理这个请求 浏览器发请求 --> UseRouting() --> 路由匹配 --> Us..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2025-04-23T08:18:43.000Z"}],["meta",{"property":"article:published_time","content":"2025-04-16T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-04-23T08:18:43.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"路由 Routing\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2025-04-16T00:00:00.000Z\\",\\"dateModified\\":\\"2025-04-23T08:18:43.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"luxiag\\",\\"url\\":\\"https://luxiag.github.io/luxiag\\"}]}"]]},"git":{"createdTime":1745396323000,"updatedTime":1745396323000,"contributors":[{"name":"luxiag","username":"luxiag","email":"luxiag@qq.com","commits":1,"url":"https://github.com/luxiag"}]},"readingTime":{"minutes":4.53,"words":1358},"filePathRelative":"dotnet/routing.md","localizedDate":"April 16, 2025","excerpt":"<p>用户请求哪个 URL 时，应该由哪个代码逻辑（控制器/页面/处理方法）来处理这个请求。</p>\\n<ul>\\n<li>\\n<p>通俗点说，路由就是个“导航系统”或“地址指引”：</p>\\n</li>\\n<li>\\n<p>用户访问一个网址（例如 /products/1）</p>\\n</li>\\n<li>\\n<p>ASP.NET Core 就用“路由规则”找到对应的控制器、方法或页面，去处理这个请求</p>\\n</li>\\n</ul>","autoDesc":true}');export{c as comp,F as data};
