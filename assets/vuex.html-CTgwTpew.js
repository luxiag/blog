import{_ as n,c as a,b as l,o as e}from"./app-C453UOYb.js";const p={};function o(F,s){return e(),a("div",null,s[0]||(s[0]=[l(`<div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">import</span><span style="color:#F8F8F2;"> { createApp } </span><span style="color:#FF79C6;">from</span><span style="color:#E9F284;"> &#39;</span><span style="color:#F1FA8C;">vue</span><span style="color:#E9F284;">&#39;</span></span>
<span class="line"><span style="color:#FF79C6;">import</span><span style="color:#F8F8F2;"> { createStore } </span><span style="color:#FF79C6;">from</span><span style="color:#E9F284;"> &#39;</span><span style="color:#F1FA8C;">vuex</span><span style="color:#E9F284;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">// Create a new store instance.</span></span>
<span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> store </span><span style="color:#FF79C6;">=</span><span style="color:#50FA7B;"> createStore</span><span style="color:#F8F8F2;">({</span></span>
<span class="line"><span style="color:#50FA7B;">  state</span><span style="color:#F8F8F2;"> () {</span></span>
<span class="line"><span style="color:#FF79C6;">    return</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">      count</span><span style="color:#FF79C6;">:</span><span style="color:#BD93F9;"> 0</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">  },</span></span>
<span class="line"><span style="color:#F8F8F2;">  mutations</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#50FA7B;">    increment</span><span style="color:#F8F8F2;"> (</span><span style="color:#FFB86C;font-style:italic;">state</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">      state.count</span><span style="color:#FF79C6;">++</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> app </span><span style="color:#FF79C6;">=</span><span style="color:#50FA7B;"> createApp</span><span style="color:#F8F8F2;">({ </span><span style="color:#6272A4;">/* your root component */</span><span style="color:#F8F8F2;"> })</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">// Install the store instance as a plugin</span></span>
<span class="line"><span style="color:#F8F8F2;">app.</span><span style="color:#50FA7B;">use</span><span style="color:#F8F8F2;">(store)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">export</span><span style="color:#FF79C6;"> function</span><span style="color:#50FA7B;"> createStore</span><span style="color:#F8F8F2;"> (</span><span style="color:#FFB86C;font-style:italic;">options</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#FF79C6;">  return</span><span style="color:#FF79C6;font-weight:bold;"> new</span><span style="color:#50FA7B;"> Store</span><span style="color:#F8F8F2;">(options)</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">export</span><span style="color:#FF79C6;"> class</span><span style="color:#8BE9FD;"> Store</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span></span>
<span class="line"><span style="color:#6272A4;">  // ...</span></span>
<span class="line"><span style="color:#50FA7B;">    install</span><span style="color:#F8F8F2;"> (</span><span style="color:#FFB86C;font-style:italic;">app</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">injectKey</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#6272A4;">    // export const storeKey = &#39;store&#39;</span></span>
<span class="line"><span style="color:#F8F8F2;">    app.</span><span style="color:#50FA7B;">provide</span><span style="color:#F8F8F2;">(injectKey </span><span style="color:#FF79C6;">||</span><span style="color:#F8F8F2;"> storeKey, </span><span style="color:#BD93F9;font-style:italic;">this</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">    app.config.globalProperties.$store </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;font-style:italic;"> this</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">    const</span><span style="color:#F8F8F2;"> useDevtools </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;font-style:italic;"> this</span><span style="color:#F8F8F2;">._devtools </span><span style="color:#FF79C6;">!==</span><span style="color:#BD93F9;"> undefined</span></span>
<span class="line"><span style="color:#FF79C6;">      ?</span><span style="color:#BD93F9;font-style:italic;"> this</span><span style="color:#F8F8F2;">._devtools</span></span>
<span class="line"><span style="color:#FF79C6;">      :</span><span style="color:#F8F8F2;"> __DEV__ </span><span style="color:#FF79C6;">||</span><span style="color:#F8F8F2;"> __VUE_PROD_DEVTOOLS__</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">    if</span><span style="color:#F8F8F2;"> (useDevtools) {</span></span>
<span class="line"><span style="color:#50FA7B;">      addDevtools</span><span style="color:#F8F8F2;">(app, </span><span style="color:#BD93F9;font-style:italic;">this</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>app.use</code></p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#50FA7B;">use</span><span style="color:#F8F8F2;">(plugin: Plugin, </span><span style="color:#FF79C6;">...</span><span style="color:#F8F8F2;">options: any[]) {</span></span>
<span class="line"><span style="color:#FF79C6;">  if</span><span style="color:#F8F8F2;"> (installedPlugins.</span><span style="color:#50FA7B;">has</span><span style="color:#F8F8F2;">(plugin)) {</span></span>
<span class="line"><span style="color:#F8F8F2;">    __DEV__ </span><span style="color:#FF79C6;">&amp;&amp;</span><span style="color:#50FA7B;"> warn</span><span style="color:#F8F8F2;">(</span><span style="color:#F1FA8C;">\`Plugin has already been applied to target app.\`</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">  } </span><span style="color:#FF79C6;">else</span><span style="color:#FF79C6;"> if</span><span style="color:#F8F8F2;"> (plugin </span><span style="color:#FF79C6;">&amp;&amp;</span><span style="color:#50FA7B;"> isFunction</span><span style="color:#F8F8F2;">(plugin.install)) {</span></span>
<span class="line"><span style="color:#F8F8F2;">    installedPlugins.</span><span style="color:#50FA7B;">add</span><span style="color:#F8F8F2;">(plugin)</span></span>
<span class="line"><span style="color:#F8F8F2;">    plugin.</span><span style="color:#50FA7B;">install</span><span style="color:#F8F8F2;">(app, </span><span style="color:#FF79C6;">...</span><span style="color:#F8F8F2;">options)</span></span>
<span class="line"><span style="color:#F8F8F2;">  } </span><span style="color:#FF79C6;">else</span><span style="color:#FF79C6;"> if</span><span style="color:#F8F8F2;"> (</span><span style="color:#50FA7B;">isFunction</span><span style="color:#F8F8F2;">(plugin)) {</span></span>
<span class="line"><span style="color:#F8F8F2;">    installedPlugins.</span><span style="color:#50FA7B;">add</span><span style="color:#F8F8F2;">(plugin)</span></span>
<span class="line"><span style="color:#50FA7B;">    plugin</span><span style="color:#F8F8F2;">(app, </span><span style="color:#FF79C6;">...</span><span style="color:#F8F8F2;">options)</span></span>
<span class="line"><span style="color:#F8F8F2;">  } </span><span style="color:#FF79C6;">else</span><span style="color:#FF79C6;"> if</span><span style="color:#F8F8F2;"> (__DEV__) {</span></span>
<span class="line"><span style="color:#50FA7B;">    warn</span><span style="color:#F8F8F2;">(</span></span>
<span class="line"><span style="color:#F1FA8C;">      \`A plugin must either be a function or an object with an &quot;install&quot; \`</span><span style="color:#FF79C6;"> +</span></span>
<span class="line"><span style="color:#F1FA8C;">        \`function.\`</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">    )</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#FF79C6;">  return</span><span style="color:#F8F8F2;"> app</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">export</span><span style="color:#FF79C6;"> function</span><span style="color:#50FA7B;"> createAppAPI</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#FFB86C;font-style:italic;">HostElement</span><span style="color:#F8F8F2;">&gt;(</span></span>
<span class="line"><span style="color:#FFB86C;font-style:italic;">  render</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> RootRenderFunction</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#FFB86C;font-style:italic;">HostElement</span><span style="color:#F8F8F2;">&gt;,</span></span>
<span class="line"><span style="color:#FFB86C;font-style:italic;">  hydrate</span><span style="color:#FF79C6;">?:</span><span style="color:#8BE9FD;font-style:italic;"> RootHydrateFunction</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">)</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> CreateAppFunction</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#FFB86C;font-style:italic;">HostElement</span><span style="color:#F8F8F2;">&gt; {</span></span>
<span class="line"><span style="color:#FF79C6;">      const</span><span style="color:#F8F8F2;"> context </span><span style="color:#FF79C6;">=</span><span style="color:#50FA7B;"> createAppContext</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"><span style="color:#50FA7B;">      provide</span><span style="color:#F8F8F2;">(key, value) {</span></span>
<span class="line"><span style="color:#F8F8F2;">        context.provides[key </span><span style="color:#FF79C6;">as</span><span style="color:#8BE9FD;font-style:italic;"> string</span><span style="color:#FF79C6;"> |</span><span style="color:#8BE9FD;font-style:italic;"> symbol</span><span style="color:#F8F8F2;">] </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> value</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">        return</span><span style="color:#F8F8F2;"> app</span></span>
<span class="line"><span style="color:#F8F8F2;">      }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#FF79C6;">export</span><span style="color:#FF79C6;"> function</span><span style="color:#50FA7B;"> createAppContext</span><span style="color:#F8F8F2;">()</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> AppContext</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#FF79C6;">  return</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">    app</span><span style="color:#FF79C6;">:</span><span style="color:#BD93F9;"> null</span><span style="color:#FF79C6;"> as</span><span style="color:#8BE9FD;font-style:italic;"> any</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">    config</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">      isNativeTag</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> NO,</span></span>
<span class="line"><span style="color:#F8F8F2;">      performance</span><span style="color:#FF79C6;">:</span><span style="color:#BD93F9;"> false</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">      globalProperties</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> {},</span></span>
<span class="line"><span style="color:#F8F8F2;">      optionMergeStrategies</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> {},</span></span>
<span class="line"><span style="color:#F8F8F2;">      errorHandler</span><span style="color:#FF79C6;">:</span><span style="color:#BD93F9;"> undefined</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">      warnHandler</span><span style="color:#FF79C6;">:</span><span style="color:#BD93F9;"> undefined</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">      compilerOptions</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> {},</span></span>
<span class="line"><span style="color:#F8F8F2;">    },</span></span>
<span class="line"><span style="color:#F8F8F2;">    mixins</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> [],</span></span>
<span class="line"><span style="color:#F8F8F2;">    components</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> {},</span></span>
<span class="line"><span style="color:#F8F8F2;">    directives</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> {},</span></span>
<span class="line"><span style="color:#F8F8F2;">    provides</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> Object.</span><span style="color:#50FA7B;">create</span><span style="color:#F8F8F2;">(</span><span style="color:#BD93F9;">null</span><span style="color:#F8F8F2;">),</span></span>
<span class="line"><span style="color:#F8F8F2;">    optionsCache</span><span style="color:#FF79C6;">:</span><span style="color:#FF79C6;font-weight:bold;"> new</span><span style="color:#50FA7B;"> WeakMap</span><span style="color:#F8F8F2;">(),</span></span>
<span class="line"><span style="color:#F8F8F2;">    propsCache</span><span style="color:#FF79C6;">:</span><span style="color:#FF79C6;font-weight:bold;"> new</span><span style="color:#50FA7B;"> WeakMap</span><span style="color:#F8F8F2;">(),</span></span>
<span class="line"><span style="color:#F8F8F2;">    emitsCache</span><span style="color:#FF79C6;">:</span><span style="color:#FF79C6;font-weight:bold;"> new</span><span style="color:#50FA7B;"> WeakMap</span><span style="color:#F8F8F2;">(),</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">export</span><span style="color:#FF79C6;"> function</span><span style="color:#50FA7B;"> createComponentInstance</span><span style="color:#F8F8F2;">(</span></span>
<span class="line"><span style="color:#FFB86C;font-style:italic;">  vnode</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> VNode</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#FFB86C;font-style:italic;">  parent</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> ComponentInternalInstance</span><span style="color:#FF79C6;"> |</span><span style="color:#8BE9FD;font-style:italic;"> null</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#FFB86C;font-style:italic;">  suspense</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> SuspenseBoundary</span><span style="color:#FF79C6;"> |</span><span style="color:#8BE9FD;font-style:italic;"> null</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">)</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> ComponentInternalInstance</span><span style="color:#F8F8F2;"> { </span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">  const</span><span style="color:#F8F8F2;"> appContext </span><span style="color:#FF79C6;">=</span></span>
<span class="line"><span style="color:#F8F8F2;">    (parent </span><span style="color:#FF79C6;">?</span><span style="color:#F8F8F2;"> parent.appContext </span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> vnode.appContext) </span><span style="color:#FF79C6;">||</span><span style="color:#F8F8F2;"> emptyAppContext</span></span>
<span class="line"><span style="color:#6272A4;">  // ...</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">  const</span><span style="color:#F8F8F2;"> instance</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> ComponentInternalInstance</span><span style="color:#FF79C6;"> =</span><span style="color:#F8F8F2;"> { </span></span>
<span class="line"><span style="color:#6272A4;">    // ...</span></span>
<span class="line"><span style="color:#F8F8F2;">      provides</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> parent </span><span style="color:#FF79C6;">?</span><span style="color:#F8F8F2;"> parent.provides </span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> Object.</span><span style="color:#50FA7B;">create</span><span style="color:#F8F8F2;">(appContext.provides),</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#6272A4;">  // ...</span></span>
<span class="line"><span style="color:#F8F8F2;">  instance.root </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> parent </span><span style="color:#FF79C6;">?</span><span style="color:#F8F8F2;"> parent.root </span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> instance</span></span>
<span class="line"><span style="color:#F8F8F2;">  instance.emit </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> emit.</span><span style="color:#50FA7B;">bind</span><span style="color:#F8F8F2;">(</span><span style="color:#BD93F9;">null</span><span style="color:#F8F8F2;">, instance)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">  // apply custom element special handling</span></span>
<span class="line"><span style="color:#FF79C6;">  if</span><span style="color:#F8F8F2;"> (vnode.ce) {</span></span>
<span class="line"><span style="color:#F8F8F2;">    vnode.</span><span style="color:#50FA7B;">ce</span><span style="color:#F8F8F2;">(instance)</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">  return</span><span style="color:#F8F8F2;"> instance</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">import</span><span style="color:#F8F8F2;"> { computed } </span><span style="color:#FF79C6;">from</span><span style="color:#E9F284;"> &#39;</span><span style="color:#F1FA8C;">vue</span><span style="color:#E9F284;">&#39;</span></span>
<span class="line"><span style="color:#FF79C6;">import</span><span style="color:#F8F8F2;"> { useStore } </span><span style="color:#FF79C6;">from</span><span style="color:#E9F284;"> &#39;</span><span style="color:#F1FA8C;">vuex</span><span style="color:#E9F284;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">export</span><span style="color:#FF79C6;"> default</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#50FA7B;">  setup</span><span style="color:#F8F8F2;"> () {</span></span>
<span class="line"><span style="color:#FF79C6;">    const</span><span style="color:#F8F8F2;"> store </span><span style="color:#FF79C6;">=</span><span style="color:#50FA7B;"> useStore</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">    return</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#6272A4;">      // access a state in computed function</span></span>
<span class="line"><span style="color:#F8F8F2;">      count</span><span style="color:#FF79C6;">:</span><span style="color:#50FA7B;"> computed</span><span style="color:#F8F8F2;">(() </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> store.state.count),</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">      // access a getter in computed function</span></span>
<span class="line"><span style="color:#F8F8F2;">      double</span><span style="color:#FF79C6;">:</span><span style="color:#50FA7B;"> computed</span><span style="color:#F8F8F2;">(() </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> store.getters.double)</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">export</span><span style="color:#FF79C6;"> const</span><span style="color:#F8F8F2;"> storeKey </span><span style="color:#FF79C6;">=</span><span style="color:#E9F284;"> &#39;</span><span style="color:#F1FA8C;">store</span><span style="color:#E9F284;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">export</span><span style="color:#FF79C6;"> function</span><span style="color:#50FA7B;"> useStore</span><span style="color:#F8F8F2;"> (</span><span style="color:#FFB86C;font-style:italic;">key</span><span style="color:#FF79C6;"> =</span><span style="color:#BD93F9;"> null</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#FF79C6;">  return</span><span style="color:#50FA7B;"> inject</span><span style="color:#F8F8F2;">(key </span><span style="color:#FF79C6;">!==</span><span style="color:#BD93F9;"> null</span><span style="color:#FF79C6;"> ?</span><span style="color:#F8F8F2;"> key </span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> storeKey)</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">export</span><span style="color:#FF79C6;"> function</span><span style="color:#50FA7B;"> inject</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#FFB86C;font-style:italic;">T</span><span style="color:#F8F8F2;">&gt;(</span><span style="color:#FFB86C;font-style:italic;">key</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> InjectionKey</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#FFB86C;font-style:italic;">T</span><span style="color:#F8F8F2;">&gt; </span><span style="color:#FF79C6;">|</span><span style="color:#8BE9FD;font-style:italic;"> string</span><span style="color:#F8F8F2;">)</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> T</span><span style="color:#FF79C6;"> |</span><span style="color:#8BE9FD;font-style:italic;"> undefined</span></span>
<span class="line"><span style="color:#FF79C6;">export</span><span style="color:#FF79C6;"> function</span><span style="color:#50FA7B;"> inject</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#FFB86C;font-style:italic;">T</span><span style="color:#F8F8F2;">&gt;(</span></span>
<span class="line"><span style="color:#FFB86C;font-style:italic;">  key</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> InjectionKey</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#FFB86C;font-style:italic;">T</span><span style="color:#F8F8F2;">&gt; </span><span style="color:#FF79C6;">|</span><span style="color:#8BE9FD;font-style:italic;"> string</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#FFB86C;font-style:italic;">  defaultValue</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> T</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#FFB86C;font-style:italic;">  treatDefaultAsFactory</span><span style="color:#FF79C6;">?:</span><span style="color:#8BE9FD;font-style:italic;"> false</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">)</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> T</span></span>
<span class="line"><span style="color:#FF79C6;">export</span><span style="color:#FF79C6;"> function</span><span style="color:#50FA7B;"> inject</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#FFB86C;font-style:italic;">T</span><span style="color:#F8F8F2;">&gt;(</span></span>
<span class="line"><span style="color:#FFB86C;font-style:italic;">  key</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> InjectionKey</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#FFB86C;font-style:italic;">T</span><span style="color:#F8F8F2;">&gt; </span><span style="color:#FF79C6;">|</span><span style="color:#8BE9FD;font-style:italic;"> string</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#FFB86C;font-style:italic;">  defaultValue</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> T</span><span style="color:#FF79C6;"> |</span><span style="color:#F8F8F2;"> (() </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#8BE9FD;font-style:italic;"> T</span><span style="color:#F8F8F2;">),</span></span>
<span class="line"><span style="color:#FFB86C;font-style:italic;">  treatDefaultAsFactory</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> true</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">)</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> T</span></span>
<span class="line"><span style="color:#FF79C6;">export</span><span style="color:#FF79C6;"> function</span><span style="color:#50FA7B;"> inject</span><span style="color:#F8F8F2;">(</span></span>
<span class="line"><span style="color:#FFB86C;font-style:italic;">  key</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> InjectionKey</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#8BE9FD;font-style:italic;">any</span><span style="color:#F8F8F2;">&gt; </span><span style="color:#FF79C6;">|</span><span style="color:#8BE9FD;font-style:italic;"> string</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#FFB86C;font-style:italic;">  defaultValue</span><span style="color:#FF79C6;">?:</span><span style="color:#8BE9FD;font-style:italic;"> unknown</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#FFB86C;font-style:italic;">  treatDefaultAsFactory</span><span style="color:#FF79C6;"> =</span><span style="color:#BD93F9;"> false</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#6272A4;">  // fallback to \`currentRenderingInstance\` so that this can be called in</span></span>
<span class="line"><span style="color:#6272A4;">  // a functional component</span></span>
<span class="line"><span style="color:#FF79C6;">  const</span><span style="color:#F8F8F2;"> instance </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> currentInstance </span><span style="color:#FF79C6;">||</span><span style="color:#F8F8F2;"> currentRenderingInstance</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">  // also support looking up from app-level provides w/ \`app.runWithContext()\`</span></span>
<span class="line"><span style="color:#FF79C6;">  if</span><span style="color:#F8F8F2;"> (instance </span><span style="color:#FF79C6;">||</span><span style="color:#F8F8F2;"> currentApp) {</span></span>
<span class="line"><span style="color:#6272A4;">    // #2400</span></span>
<span class="line"><span style="color:#6272A4;">    // to support \`app.use\` plugins,</span></span>
<span class="line"><span style="color:#6272A4;">    // fallback to appContext&#39;s \`provides\` if the instance is at root</span></span>
<span class="line"><span style="color:#6272A4;">    // #11488, in a nested createApp, prioritize using the provides from currentApp</span></span>
<span class="line"><span style="color:#6272A4;">    //// 如果intance位于根目录下，则返回到appContext的provides，否则就返回父组件的provides</span></span>
<span class="line"><span style="color:#FF79C6;">    const</span><span style="color:#F8F8F2;"> provides </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> currentApp</span></span>
<span class="line"><span style="color:#FF79C6;">      ?</span><span style="color:#F8F8F2;"> currentApp._context.provides</span></span>
<span class="line"><span style="color:#FF79C6;">      :</span><span style="color:#F8F8F2;"> instance</span></span>
<span class="line"><span style="color:#FF79C6;">        ?</span><span style="color:#F8F8F2;"> instance.parent </span><span style="color:#FF79C6;">==</span><span style="color:#BD93F9;"> null</span></span>
<span class="line"><span style="color:#FF79C6;">          ?</span><span style="color:#F8F8F2;"> instance.vnode.appContext </span><span style="color:#FF79C6;">&amp;&amp;</span><span style="color:#F8F8F2;"> instance.vnode.appContext.provides</span></span>
<span class="line"><span style="color:#FF79C6;">          :</span><span style="color:#F8F8F2;"> instance.parent.provides</span></span>
<span class="line"><span style="color:#FF79C6;">        :</span><span style="color:#BD93F9;"> undefined</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">    if</span><span style="color:#F8F8F2;"> (provides </span><span style="color:#FF79C6;">&amp;&amp;</span><span style="color:#F8F8F2;"> (key </span><span style="color:#FF79C6;">as</span><span style="color:#8BE9FD;font-style:italic;"> string</span><span style="color:#FF79C6;"> |</span><span style="color:#8BE9FD;font-style:italic;"> symbol</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">in</span><span style="color:#F8F8F2;"> provides) {</span></span>
<span class="line"><span style="color:#6272A4;">      // TS doesn&#39;t allow symbol as index type</span></span>
<span class="line"><span style="color:#FF79C6;">      return</span><span style="color:#F8F8F2;"> provides[key </span><span style="color:#FF79C6;">as</span><span style="color:#8BE9FD;font-style:italic;"> string</span><span style="color:#F8F8F2;">]</span></span>
<span class="line"><span style="color:#F8F8F2;">    } </span><span style="color:#FF79C6;">else</span><span style="color:#FF79C6;"> if</span><span style="color:#F8F8F2;"> (</span><span style="color:#BD93F9;font-style:italic;">arguments</span><span style="color:#F8F8F2;">.length </span><span style="color:#FF79C6;">&gt;</span><span style="color:#BD93F9;"> 1</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#FF79C6;">      return</span><span style="color:#F8F8F2;"> treatDefaultAsFactory </span><span style="color:#FF79C6;">&amp;&amp;</span><span style="color:#50FA7B;"> isFunction</span><span style="color:#F8F8F2;">(defaultValue)</span></span>
<span class="line"><span style="color:#FF79C6;">        ?</span><span style="color:#F8F8F2;"> defaultValue.</span><span style="color:#50FA7B;">call</span><span style="color:#F8F8F2;">(instance </span><span style="color:#FF79C6;">&amp;&amp;</span><span style="color:#F8F8F2;"> instance.proxy)</span></span>
<span class="line"><span style="color:#FF79C6;">        :</span><span style="color:#F8F8F2;"> defaultValue</span></span>
<span class="line"><span style="color:#F8F8F2;">    } </span><span style="color:#FF79C6;">else</span><span style="color:#FF79C6;"> if</span><span style="color:#F8F8F2;"> (__DEV__) {</span></span>
<span class="line"><span style="color:#50FA7B;">      warn</span><span style="color:#F8F8F2;">(</span><span style="color:#F1FA8C;">\`injection &quot;</span><span style="color:#FF79C6;">\${</span><span style="color:#50FA7B;">String</span><span style="color:#F8F8F2;">(key)</span><span style="color:#FF79C6;">}</span><span style="color:#F1FA8C;">&quot; not found.\`</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">  } </span><span style="color:#FF79C6;">else</span><span style="color:#FF79C6;"> if</span><span style="color:#F8F8F2;"> (__DEV__) {</span></span>
<span class="line"><span style="color:#50FA7B;">    warn</span><span style="color:#F8F8F2;">(</span><span style="color:#F1FA8C;">\`inject() can only be used inside setup() or functional components.\`</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,8)]))}const c=n(p,[["render",o],["__file","vuex.html.vue"]]),i=JSON.parse(`{"path":"/vue3/vuex.html","title":"","lang":"en-US","frontmatter":{"description":"app.use","head":[["meta",{"property":"og:url","content":"https://luxiag.github.io/luxiag/blog/vue3/vuex.html"}],["meta",{"property":"og:description","content":"app.use"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2024-11-01T09:28:13.000Z"}],["meta",{"property":"article:modified_time","content":"2024-11-01T09:28:13.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-11-01T09:28:13.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"luxiag\\",\\"url\\":\\"https://luxiag.github.io/luxiag\\"}]}"]]},"headers":[],"git":{"createdTime":1730453293000,"updatedTime":1730453293000,"contributors":[{"name":"luxiag","email":"luxiag@qq.com","commits":1}]},"readingTime":{"minutes":1.73,"words":518},"filePathRelative":"vue3/vuex.md","localizedDate":"November 1, 2024","excerpt":"<div class=\\"language-js line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"js\\" data-title=\\"js\\" style=\\"background-color:#282A36;color:#F8F8F2\\"><pre class=\\"shiki dracula vp-code\\"><code><span class=\\"line\\"><span style=\\"color:#FF79C6\\">import</span><span style=\\"color:#F8F8F2\\"> { createApp } </span><span style=\\"color:#FF79C6\\">from</span><span style=\\"color:#E9F284\\"> '</span><span style=\\"color:#F1FA8C\\">vue</span><span style=\\"color:#E9F284\\">'</span></span>\\n<span class=\\"line\\"><span style=\\"color:#FF79C6\\">import</span><span style=\\"color:#F8F8F2\\"> { createStore } </span><span style=\\"color:#FF79C6\\">from</span><span style=\\"color:#E9F284\\"> '</span><span style=\\"color:#F1FA8C\\">vuex</span><span style=\\"color:#E9F284\\">'</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color:#6272A4\\">// Create a new store instance.</span></span>\\n<span class=\\"line\\"><span style=\\"color:#FF79C6\\">const</span><span style=\\"color:#F8F8F2\\"> store </span><span style=\\"color:#FF79C6\\">=</span><span style=\\"color:#50FA7B\\"> createStore</span><span style=\\"color:#F8F8F2\\">({</span></span>\\n<span class=\\"line\\"><span style=\\"color:#50FA7B\\">  state</span><span style=\\"color:#F8F8F2\\"> () {</span></span>\\n<span class=\\"line\\"><span style=\\"color:#FF79C6\\">    return</span><span style=\\"color:#F8F8F2\\"> {</span></span>\\n<span class=\\"line\\"><span style=\\"color:#F8F8F2\\">      count</span><span style=\\"color:#FF79C6\\">:</span><span style=\\"color:#BD93F9\\"> 0</span></span>\\n<span class=\\"line\\"><span style=\\"color:#F8F8F2\\">    }</span></span>\\n<span class=\\"line\\"><span style=\\"color:#F8F8F2\\">  },</span></span>\\n<span class=\\"line\\"><span style=\\"color:#F8F8F2\\">  mutations</span><span style=\\"color:#FF79C6\\">:</span><span style=\\"color:#F8F8F2\\"> {</span></span>\\n<span class=\\"line\\"><span style=\\"color:#50FA7B\\">    increment</span><span style=\\"color:#F8F8F2\\"> (</span><span style=\\"color:#FFB86C;font-style:italic\\">state</span><span style=\\"color:#F8F8F2\\">) {</span></span>\\n<span class=\\"line\\"><span style=\\"color:#F8F8F2\\">      state.count</span><span style=\\"color:#FF79C6\\">++</span></span>\\n<span class=\\"line\\"><span style=\\"color:#F8F8F2\\">    }</span></span>\\n<span class=\\"line\\"><span style=\\"color:#F8F8F2\\">  }</span></span>\\n<span class=\\"line\\"><span style=\\"color:#F8F8F2\\">})</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color:#FF79C6\\">const</span><span style=\\"color:#F8F8F2\\"> app </span><span style=\\"color:#FF79C6\\">=</span><span style=\\"color:#50FA7B\\"> createApp</span><span style=\\"color:#F8F8F2\\">({ </span><span style=\\"color:#6272A4\\">/* your root component */</span><span style=\\"color:#F8F8F2\\"> })</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color:#6272A4\\">// Install the store instance as a plugin</span></span>\\n<span class=\\"line\\"><span style=\\"color:#F8F8F2\\">app.</span><span style=\\"color:#50FA7B\\">use</span><span style=\\"color:#F8F8F2\\">(store)</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}`);export{c as comp,i as data};
