import{_ as n,e as a,g as l,o as p}from"./app-BcLUFOMF.js";const e="/blog/assets/0411071739167441527-BhfLj7WE.png",o="/blog/assets/0411071739168192617-miSgwUur.png",F="/blog/assets/0411071739168304970-ocieCdXg.png",t="/blog/assets/0411071739167599390-DsFIkXkH.png",c={};function r(i,s){return p(),a("div",null,s[0]||(s[0]=[l('<p><img src="'+e+'" alt="" loading="lazy"><img src="'+o+'" alt="" loading="lazy"><img src="'+F+'" alt="" loading="lazy"></p><h1 id="web-vitals" tabindex="-1"><a class="header-anchor" href="#web-vitals"><span>Web Vitals</span></a></h1><p>什么是 Web Vitals，Google给的定义是一个良好网站的基本指标 (Essential metrics for a healthy site)。由于过去要衡量一个好的网站，需要使用的指标太多，于是推出了 Web Vitals ，也是为了简化学习的曲线，开发者只需要关注 Web Vitals 指标表现即可。</p><p>而在 Web Vitals 指标中，Core Web Vitals 是其中的核心，目前包含三个指标：</p><ul><li>LCP：(Largest Contentful Paint) 从页面加载开始到最大文本块或图像元素在屏幕上完成渲染的时间（衡量网站初次载入速度）</li><li>FID：（First Input Delay） 首次输入延迟时间 (衡量网站互动顺畅程度)</li><li>CLS：(Cumulative Layout Shift)，从页面加载开始和其生命周期状态变为隐藏期间发生的所有意外布局偏移的累积分数（衡量视觉稳定性）</li></ul><figure><img src="'+t+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h1 id="首屏渲染时间" tabindex="-1"><a class="header-anchor" href="#首屏渲染时间"><span>首屏渲染时间</span></a></h1><p>首屏这个概念目前来说没有一个官方的定义，一般来说都以约定俗成的说法为准即 从输入 URL 开始到第一屏（可视区域）的内容加载完毕的时间。根据业务场景的不同，也有不同的指标和规范。</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">class</span><span style="color:#8BE9FD;"> FCP</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#FF79C6;">  static</span><span style="color:#F8F8F2;"> details </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> [];</span></span>
<span class="line"><span style="color:#FF79C6;">  static</span><span style="color:#F8F8F2;"> ignoreEleList </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> [</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">script</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">, </span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">style</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">, </span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">link</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">, </span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">br</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">];</span></span>
<span class="line"><span style="color:#FF79C6;">  constructor</span><span style="color:#F8F8F2;">() {}</span></span>
<span class="line"><span style="color:#FF79C6;">  static</span><span style="color:#50FA7B;"> isEleInArray</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">target</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">arr</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#FF79C6;">    if</span><span style="color:#F8F8F2;"> (</span><span style="color:#FF79C6;">!</span><span style="color:#F8F8F2;">target </span><span style="color:#FF79C6;">||</span><span style="color:#F8F8F2;"> target </span><span style="color:#FF79C6;">===</span><span style="color:#F8F8F2;"> document.documentElement) {</span></span>
<span class="line"><span style="color:#FF79C6;">      return</span><span style="color:#BD93F9;"> false</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">    } </span><span style="color:#FF79C6;">else</span><span style="color:#FF79C6;"> if</span><span style="color:#F8F8F2;"> (arr.</span><span style="color:#50FA7B;">indexOf</span><span style="color:#F8F8F2;">(target) </span><span style="color:#FF79C6;">!==</span><span style="color:#FF79C6;"> -</span><span style="color:#BD93F9;">1</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#FF79C6;">      return</span><span style="color:#BD93F9;"> true</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">    } </span><span style="color:#FF79C6;">else</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#FF79C6;">      return</span><span style="color:#BD93F9;font-style:italic;"> this</span><span style="color:#F8F8F2;">.</span><span style="color:#50FA7B;">isEleInArray</span><span style="color:#F8F8F2;">(target.parentElement, arr);</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#6272A4;">  // 判断元素是否在首屏内</span></span>
<span class="line"><span style="color:#FF79C6;">  static</span><span style="color:#50FA7B;"> isInFirstScreen</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">target</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#FF79C6;">    if</span><span style="color:#F8F8F2;"> (</span><span style="color:#FF79C6;">!</span><span style="color:#F8F8F2;">target </span><span style="color:#FF79C6;">||</span><span style="color:#FF79C6;"> !</span><span style="color:#F8F8F2;">target.getBoundingClientRect) </span><span style="color:#FF79C6;">return</span><span style="color:#BD93F9;"> false</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#FF79C6;">    var</span><span style="color:#F8F8F2;"> rect </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> target.</span><span style="color:#50FA7B;">getBoundingClientRect</span><span style="color:#F8F8F2;">(),</span></span>
<span class="line"><span style="color:#F8F8F2;">      screenHeight </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> window.innerHeight,</span></span>
<span class="line"><span style="color:#F8F8F2;">      screenWidth </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> window.innerWidth;</span></span>
<span class="line"><span style="color:#FF79C6;">    return</span><span style="color:#F8F8F2;"> (</span></span>
<span class="line"><span style="color:#F8F8F2;">      rect.left </span><span style="color:#FF79C6;">&gt;=</span><span style="color:#BD93F9;"> 0</span><span style="color:#FF79C6;"> &amp;&amp;</span></span>
<span class="line"><span style="color:#F8F8F2;">      rect.left </span><span style="color:#FF79C6;">&lt;</span><span style="color:#F8F8F2;"> screenWidth </span><span style="color:#FF79C6;">&amp;&amp;</span></span>
<span class="line"><span style="color:#F8F8F2;">      rect.top </span><span style="color:#FF79C6;">&gt;=</span><span style="color:#BD93F9;"> 0</span><span style="color:#FF79C6;"> &amp;&amp;</span></span>
<span class="line"><span style="color:#F8F8F2;">      rect.top </span><span style="color:#FF79C6;">&lt;</span><span style="color:#FFB86C;font-style:italic;"> screenHeight</span></span>
<span class="line"><span style="color:#F8F8F2;">    );</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">  static</span><span style="color:#50FA7B;"> getFCP</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#FF79C6;">    return</span><span style="color:#FF79C6;font-weight:bold;"> new</span><span style="color:#8BE9FD;font-style:italic;"> Promise</span><span style="color:#F8F8F2;">((</span><span style="color:#FFB86C;font-style:italic;">resolve</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">reject</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#6272A4;">      // 5s之内先收集所有的dom变化，并以key（时间戳）、value（dom list）的结构存起来。</span></span>
<span class="line"><span style="color:#FF79C6;">      var</span><span style="color:#F8F8F2;"> observeDom </span><span style="color:#FF79C6;">=</span><span style="color:#FF79C6;font-weight:bold;"> new</span><span style="color:#50FA7B;"> MutationObserver</span><span style="color:#F8F8F2;">((</span><span style="color:#FFB86C;font-style:italic;">mutations</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#FF79C6;">        if</span><span style="color:#F8F8F2;"> (</span><span style="color:#FF79C6;">!</span><span style="color:#F8F8F2;">mutations </span><span style="color:#FF79C6;">||</span><span style="color:#FF79C6;"> !</span><span style="color:#F8F8F2;">mutations.forEach) </span><span style="color:#FF79C6;">return</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#FF79C6;">        var</span><span style="color:#F8F8F2;"> detail </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">          time</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> performance.</span><span style="color:#50FA7B;">now</span><span style="color:#F8F8F2;">(),</span></span>
<span class="line"><span style="color:#F8F8F2;">          roots</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> [],</span></span>
<span class="line"><span style="color:#F8F8F2;">        };</span></span>
<span class="line"><span style="color:#F8F8F2;">        mutations.</span><span style="color:#50FA7B;">forEach</span><span style="color:#F8F8F2;">((</span><span style="color:#FFB86C;font-style:italic;">mutation</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#FF79C6;">          if</span><span style="color:#F8F8F2;"> (</span><span style="color:#FF79C6;">!</span><span style="color:#F8F8F2;">mutation </span><span style="color:#FF79C6;">||</span><span style="color:#FF79C6;"> !</span><span style="color:#F8F8F2;">mutation.addedNodes </span><span style="color:#FF79C6;">||</span><span style="color:#FF79C6;"> !</span><span style="color:#F8F8F2;">mutation.addedNodes.forEach)</span></span>
<span class="line"><span style="color:#FF79C6;">            return</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">          mutation.addedNodes.</span><span style="color:#50FA7B;">forEach</span><span style="color:#F8F8F2;">((</span><span style="color:#FFB86C;font-style:italic;">ele</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#FF79C6;">            if</span><span style="color:#F8F8F2;"> (</span></span>
<span class="line"><span style="color:#6272A4;">              // nodeType = 1 代表元素节点</span></span>
<span class="line"><span style="color:#F8F8F2;">              ele.nodeType </span><span style="color:#FF79C6;">===</span><span style="color:#BD93F9;"> 1</span><span style="color:#FF79C6;"> &amp;&amp;</span></span>
<span class="line"><span style="color:#BD93F9;font-style:italic;">              this</span><span style="color:#F8F8F2;">.ignoreEleList.</span><span style="color:#50FA7B;">indexOf</span><span style="color:#F8F8F2;">(ele.nodeName.</span><span style="color:#50FA7B;">toLocaleLowerCase</span><span style="color:#F8F8F2;">()) </span><span style="color:#FF79C6;">===</span></span>
<span class="line"><span style="color:#FF79C6;">                -</span><span style="color:#BD93F9;">1</span></span>
<span class="line"><span style="color:#F8F8F2;">            ) {</span></span>
<span class="line"><span style="color:#FF79C6;">              if</span><span style="color:#F8F8F2;"> (</span><span style="color:#FF79C6;">!</span><span style="color:#BD93F9;font-style:italic;">this</span><span style="color:#F8F8F2;">.</span><span style="color:#50FA7B;">isEleInArray</span><span style="color:#F8F8F2;">(ele, detail.roots)) {</span></span>
<span class="line"><span style="color:#F8F8F2;">                detail.roots.</span><span style="color:#50FA7B;">push</span><span style="color:#F8F8F2;">(ele);</span></span>
<span class="line"><span style="color:#F8F8F2;">              }</span></span>
<span class="line"><span style="color:#F8F8F2;">            }</span></span>
<span class="line"><span style="color:#F8F8F2;">          });</span></span>
<span class="line"><span style="color:#F8F8F2;">        });</span></span>
<span class="line"><span style="color:#FF79C6;">        if</span><span style="color:#F8F8F2;"> (detail.roots.length) {</span></span>
<span class="line"><span style="color:#BD93F9;font-style:italic;">          this</span><span style="color:#F8F8F2;">.details.</span><span style="color:#50FA7B;">push</span><span style="color:#F8F8F2;">(detail);</span></span>
<span class="line"><span style="color:#F8F8F2;">        }</span></span>
<span class="line"><span style="color:#F8F8F2;">      });</span></span>
<span class="line"><span style="color:#F8F8F2;">      observeDom.</span><span style="color:#50FA7B;">observe</span><span style="color:#F8F8F2;">(document, {</span></span>
<span class="line"><span style="color:#F8F8F2;">        childList</span><span style="color:#FF79C6;">:</span><span style="color:#BD93F9;"> true</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">        subtree</span><span style="color:#FF79C6;">:</span><span style="color:#BD93F9;"> true</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">      });</span></span>
<span class="line"><span style="color:#50FA7B;">      setTimeout</span><span style="color:#F8F8F2;">(() </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">        observeDom.</span><span style="color:#50FA7B;">disconnect</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#50FA7B;">        resolve</span><span style="color:#F8F8F2;">(</span><span style="color:#BD93F9;font-style:italic;">this</span><span style="color:#F8F8F2;">.details);</span></span>
<span class="line"><span style="color:#F8F8F2;">      }, </span><span style="color:#BD93F9;">5000</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">    }).</span><span style="color:#50FA7B;">then</span><span style="color:#F8F8F2;">((</span><span style="color:#FFB86C;font-style:italic;">details</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#6272A4;">      // 分析上面收集到的数据，返回最终的结果</span></span>
<span class="line"><span style="color:#FF79C6;">      var</span><span style="color:#F8F8F2;"> result;</span></span>
<span class="line"><span style="color:#F8F8F2;">      details.</span><span style="color:#50FA7B;">forEach</span><span style="color:#F8F8F2;">((</span><span style="color:#FFB86C;font-style:italic;">detail</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#FF79C6;">        for</span><span style="color:#F8F8F2;"> (</span><span style="color:#FF79C6;">var</span><span style="color:#F8F8F2;"> i </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> 0</span><span style="color:#F8F8F2;">; i </span><span style="color:#FF79C6;">&lt;</span><span style="color:#F8F8F2;"> detail.roots.length; i</span><span style="color:#FF79C6;">++</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#FF79C6;">          if</span><span style="color:#F8F8F2;"> (</span><span style="color:#BD93F9;font-style:italic;">this</span><span style="color:#F8F8F2;">.</span><span style="color:#50FA7B;">isInFirstScreen</span><span style="color:#F8F8F2;">(detail.roots[i])) {</span></span>
<span class="line"><span style="color:#F8F8F2;">            result </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> detail.time;</span></span>
<span class="line"><span style="color:#FF79C6;">            break</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">          }</span></span>
<span class="line"><span style="color:#F8F8F2;">        }</span></span>
<span class="line"><span style="color:#F8F8F2;">      });</span></span>
<span class="line"><span style="color:#6272A4;">      // 遍历当前请求的图片中，如果有开始请求时间在首屏dom渲染期间的，则表明该图片是首屏渲染中的一部分，</span></span>
<span class="line"><span style="color:#6272A4;">      // 所以dom渲染时间和图片返回时间中大的为首屏渲染时间</span></span>
<span class="line"><span style="color:#F8F8F2;">      window.performance</span></span>
<span class="line"><span style="color:#F8F8F2;">        .</span><span style="color:#50FA7B;">getEntriesByType</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">resource</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">        .</span><span style="color:#50FA7B;">forEach</span><span style="color:#F8F8F2;">(</span><span style="color:#FF79C6;">function</span><span style="color:#F8F8F2;"> (</span><span style="color:#FFB86C;font-style:italic;">resource</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#FF79C6;">          if</span><span style="color:#F8F8F2;"> (</span></span>
<span class="line"><span style="color:#F8F8F2;">            resource.initiatorType </span><span style="color:#FF79C6;">===</span><span style="color:#E9F284;"> &quot;</span><span style="color:#F1FA8C;">img</span><span style="color:#E9F284;">&quot;</span><span style="color:#FF79C6;"> &amp;&amp;</span></span>
<span class="line"><span style="color:#F8F8F2;">            (resource.fetchStart </span><span style="color:#FF79C6;">&lt;</span><span style="color:#F8F8F2;"> result </span><span style="color:#FF79C6;">||</span><span style="color:#F8F8F2;"> resource.startTime </span><span style="color:#FF79C6;">&lt;</span><span style="color:#F8F8F2;"> result) </span><span style="color:#FF79C6;">&amp;&amp;</span></span>
<span class="line"><span style="color:#F8F8F2;">            resource.responseEnd </span><span style="color:#FF79C6;">&gt;</span><span style="color:#F8F8F2;"> result</span></span>
<span class="line"><span style="color:#F8F8F2;">          ) {</span></span>
<span class="line"><span style="color:#F8F8F2;">            result </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> resource.responseEnd;</span></span>
<span class="line"><span style="color:#F8F8F2;">          }</span></span>
<span class="line"><span style="color:#F8F8F2;">        });</span></span>
<span class="line"><span style="color:#FF79C6;">      return</span><span style="color:#F8F8F2;"> result;</span></span>
<span class="line"><span style="color:#F8F8F2;">    });</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="白屏时间" tabindex="-1"><a class="header-anchor" href="#白屏时间"><span>白屏时间</span></a></h1><p>白屏会在页面加载之前触发，在这段时间里，不会呈现任何内容和信息给用户。虽然背景色会很快完成绘制，但是实际的内容和交互可能要花很长的时间去加载，因此，白屏时间过长，会让用户认为我们的页面不能用或可用性差。</p><p>通常认为浏览器开始渲染<code> &lt;body&gt;</code> 标签或者解析完<code> &lt;head&gt;</code> 标签的时刻就是页面白屏结束的时间点。</p><div class="language-html line-numbers-mode" data-highlighter="shiki" data-ext="html" data-title="html" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#F8F8F2;">&lt;!</span><span style="color:#FF79C6;">DOCTYPE</span><span style="color:#50FA7B;font-style:italic;"> html</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">&lt;</span><span style="color:#FF79C6;">html</span><span style="color:#50FA7B;font-style:italic;"> lang</span><span style="color:#FF79C6;">=</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">en</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">&lt;</span><span style="color:#FF79C6;">head</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">  &lt;</span><span style="color:#FF79C6;">meta</span><span style="color:#50FA7B;font-style:italic;"> charset</span><span style="color:#FF79C6;">=</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">UTF-8</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">  &lt;</span><span style="color:#FF79C6;">title</span><span style="color:#F8F8F2;">&gt;白屏&lt;/</span><span style="color:#FF79C6;">title</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">  &lt;</span><span style="color:#FF79C6;">script</span><span style="color:#50FA7B;font-style:italic;"> type</span><span style="color:#FF79C6;">=</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">text/javascript</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"><span style="color:#6272A4;">    // 不兼容performance.timing 的浏览器，如IE8</span></span>
<span class="line"><span style="color:#F8F8F2;">    window.pageStartTime </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> Date.</span><span style="color:#50FA7B;">now</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#F8F8F2;">  &lt;/</span><span style="color:#FF79C6;">script</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"><span style="color:#6272A4;">  &lt;!-- 页面 CSS 资源 --&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">  &lt;</span><span style="color:#FF79C6;">link</span><span style="color:#50FA7B;font-style:italic;"> rel</span><span style="color:#FF79C6;">=</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">stylesheet</span><span style="color:#E9F284;">&quot;</span><span style="color:#50FA7B;font-style:italic;"> href</span><span style="color:#FF79C6;">=</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">common.css</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">  &lt;</span><span style="color:#FF79C6;">link</span><span style="color:#50FA7B;font-style:italic;"> rel</span><span style="color:#FF79C6;">=</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">stylesheet</span><span style="color:#E9F284;">&quot;</span><span style="color:#50FA7B;font-style:italic;"> href</span><span style="color:#FF79C6;">=</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">page.css</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">  &lt;</span><span style="color:#FF79C6;">script</span><span style="color:#50FA7B;font-style:italic;"> type</span><span style="color:#FF79C6;">=</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">text/javascript</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"><span style="color:#6272A4;">    // 白屏时间结束点</span></span>
<span class="line"><span style="color:#F8F8F2;">    window.firstPaint </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> Date.</span><span style="color:#50FA7B;">now</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#F8F8F2;">  &lt;/</span><span style="color:#FF79C6;">script</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">&lt;/</span><span style="color:#FF79C6;">head</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">&lt;</span><span style="color:#FF79C6;">body</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"><span style="color:#6272A4;">  &lt;!-- 页面内容 --&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">&lt;/</span><span style="color:#FF79C6;">body</span><span style="color:#F8F8F2;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>可使用 <code>Performance API</code> 时： <ul><li>白屏时间 = <code>firstPaint - performance.timing.navigationStart</code></li></ul></li><li>不可使用 Performance API 时 <ul><li>白屏时间 = <code>firstPaint - pageStartTime</code></li></ul></li></ul><h1 id="接口请求耗时" tabindex="-1"><a class="header-anchor" href="#接口请求耗时"><span>接口请求耗时</span></a></h1><p><strong>XMLHttpRequest</strong></p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> originalProto </span><span style="color:#FF79C6;">=</span><span style="color:#8BE9FD;font-style:italic;"> XMLHttpRequest</span><span style="color:#F8F8F2;">.prototype;</span></span>
<span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> originalOpen </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> originalProto.open;</span></span>
<span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> originalSend </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> originalProto.send;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">originalProto.</span><span style="color:#50FA7B;">open</span><span style="color:#FF79C6;"> =</span><span style="color:#FF79C6;"> function</span><span style="color:#50FA7B;"> newOpen</span><span style="color:#F8F8F2;">(</span><span style="color:#FF79C6;">...</span><span style="color:#FFB86C;font-style:italic;">args</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#6272A4;">  // ...省略</span></span>
<span class="line"><span style="color:#FF79C6;">  return</span><span style="color:#F8F8F2;"> originalOpen.</span><span style="color:#50FA7B;">call</span><span style="color:#F8F8F2;">(</span><span style="color:#BD93F9;font-style:italic;">this</span><span style="color:#F8F8F2;">, args);</span></span>
<span class="line"><span style="color:#F8F8F2;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">originalProto.</span><span style="color:#50FA7B;">send</span><span style="color:#FF79C6;"> =</span><span style="color:#FF79C6;"> function</span><span style="color:#50FA7B;"> newSend</span><span style="color:#F8F8F2;">(</span><span style="color:#FF79C6;">...</span><span style="color:#FFB86C;font-style:italic;">args</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#6272A4;">    // ...省略</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BD93F9;font-style:italic;">    this</span><span style="color:#F8F8F2;">.</span><span style="color:#50FA7B;">addEventListener</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">readystatechange</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">, </span><span style="color:#FF79C6;">function</span><span style="color:#F8F8F2;"> () {</span></span>
<span class="line"><span style="color:#FF79C6;">      if</span><span style="color:#F8F8F2;"> (</span><span style="color:#BD93F9;font-style:italic;">this</span><span style="color:#F8F8F2;">.readyState </span><span style="color:#FF79C6;">===</span><span style="color:#BD93F9;"> 4</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#FF79C6;">        if</span><span style="color:#F8F8F2;"> (</span><span style="color:#BD93F9;font-style:italic;">this</span><span style="color:#F8F8F2;">.status </span><span style="color:#FF79C6;">&gt;=</span><span style="color:#BD93F9;"> 200</span><span style="color:#FF79C6;"> &amp;&amp;</span><span style="color:#BD93F9;font-style:italic;"> this</span><span style="color:#F8F8F2;">.status </span><span style="color:#FF79C6;">&lt;</span><span style="color:#BD93F9;"> 300</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#6272A4;">          // ...省略</span></span>
<span class="line"><span style="color:#F8F8F2;">        } </span><span style="color:#FF79C6;">else</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#6272A4;">          // ...省略</span></span>
<span class="line"><span style="color:#F8F8F2;">        }</span></span>
<span class="line"><span style="color:#F8F8F2;">      }</span></span>
<span class="line"><span style="color:#F8F8F2;">    });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">    return</span><span style="color:#F8F8F2;"> originalSend.</span><span style="color:#50FA7B;">apply</span><span style="color:#F8F8F2;">(</span><span style="color:#BD93F9;font-style:italic;">this</span><span style="color:#F8F8F2;">, args);</span></span>
<span class="line"><span style="color:#F8F8F2;">  };</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>fetch</strong></p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> originalFetch </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> window.fetch;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">Object.</span><span style="color:#50FA7B;">defineProperty</span><span style="color:#F8F8F2;">(window, </span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">fetch</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">, {</span></span>
<span class="line"><span style="color:#F8F8F2;">  configurable</span><span style="color:#FF79C6;">:</span><span style="color:#BD93F9;"> true</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">  enumerable</span><span style="color:#FF79C6;">:</span><span style="color:#BD93F9;"> true</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#50FA7B;">  get</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#FF79C6;">    return</span><span style="color:#F8F8F2;"> (</span><span style="color:#FFB86C;font-style:italic;">url</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> string</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">options</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> any</span><span style="color:#FF79C6;"> =</span><span style="color:#F8F8F2;"> {}) </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#FF79C6;">      return</span><span style="color:#50FA7B;"> originalFetch</span><span style="color:#F8F8F2;">(url, options)</span></span>
<span class="line"><span style="color:#F8F8F2;">        .</span><span style="color:#50FA7B;">then</span><span style="color:#F8F8F2;">((</span><span style="color:#FFB86C;font-style:italic;">res</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#6272A4;">            // ...</span></span>
<span class="line"><span style="color:#F8F8F2;">        })</span></span>
<span class="line"><span style="color:#F8F8F2;">    };</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">});</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="帧率" tabindex="-1"><a class="header-anchor" href="#帧率"><span>帧率</span></a></h1><p><code>FPS</code>一般用来检测页面卡顿</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> next </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> window.requestAnimationFrame</span></span>
<span class="line"><span style="color:#FF79C6;">  ?</span><span style="color:#F8F8F2;"> requestAnimationFrame</span></span>
<span class="line"><span style="color:#FF79C6;">  :</span><span style="color:#F8F8F2;"> (</span><span style="color:#FFB86C;font-style:italic;">callback</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#50FA7B;">      setTimeout</span><span style="color:#F8F8F2;">(callback, </span><span style="color:#BD93F9;">1000</span><span style="color:#FF79C6;"> /</span><span style="color:#BD93F9;"> 60</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">    };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> frames </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> [];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">export</span><span style="color:#FF79C6;"> default</span><span style="color:#FF79C6;"> function</span><span style="color:#50FA7B;"> fps</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#FF79C6;">  let</span><span style="color:#F8F8F2;"> frame </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> 0</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#FF79C6;">  let</span><span style="color:#F8F8F2;"> lastTime </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> performance.</span><span style="color:#50FA7B;">now</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">  function</span><span style="color:#50FA7B;"> calculateFPS</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#F8F8F2;">    frame</span><span style="color:#FF79C6;">++</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#FF79C6;">    const</span><span style="color:#F8F8F2;"> now </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> performance.</span><span style="color:#50FA7B;">now</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#FF79C6;">    if</span><span style="color:#F8F8F2;"> (lastTime </span><span style="color:#FF79C6;">+</span><span style="color:#BD93F9;"> 1000</span><span style="color:#FF79C6;"> &lt;=</span><span style="color:#F8F8F2;"> now) {</span></span>
<span class="line"><span style="color:#FF79C6;">      const</span><span style="color:#F8F8F2;"> fps </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> Math.</span><span style="color:#50FA7B;">round</span><span style="color:#F8F8F2;">((frame </span><span style="color:#FF79C6;">*</span><span style="color:#BD93F9;"> 1000</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">/</span><span style="color:#F8F8F2;"> (now </span><span style="color:#FF79C6;">-</span><span style="color:#F8F8F2;"> lastTime));</span></span>
<span class="line"><span style="color:#F8F8F2;">      frames.</span><span style="color:#50FA7B;">push</span><span style="color:#F8F8F2;">(fps);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">      frame </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> 0</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">      lastTime </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> now;</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#50FA7B;">    next</span><span style="color:#F8F8F2;">(calculateFPS);</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#50FA7B;">  calculateFPS</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>一般当连续出现三个低于 20 的FPS时，就可断定页面出现了卡顿：</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">export</span><span style="color:#FF79C6;"> function</span><span style="color:#50FA7B;"> isBlocking</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">fpsList</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">below</span><span style="color:#FF79C6;"> =</span><span style="color:#BD93F9;"> 20</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">last</span><span style="color:#FF79C6;"> =</span><span style="color:#BD93F9;"> 3</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#FF79C6;">  let</span><span style="color:#F8F8F2;"> count </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> 0</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#FF79C6;">  for</span><span style="color:#F8F8F2;"> (</span><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> i </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> 0</span><span style="color:#F8F8F2;">; i </span><span style="color:#FF79C6;">&lt;</span><span style="color:#F8F8F2;"> fpsList.length; i</span><span style="color:#FF79C6;">++</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#FF79C6;">    if</span><span style="color:#F8F8F2;"> (fpsList[i] </span><span style="color:#FF79C6;">&amp;&amp;</span><span style="color:#F8F8F2;"> fpsList[i] </span><span style="color:#FF79C6;">&lt;</span><span style="color:#F8F8F2;"> below) {</span></span>
<span class="line"><span style="color:#F8F8F2;">      count</span><span style="color:#FF79C6;">++</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">    } </span><span style="color:#FF79C6;">else</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">      count </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> 0</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">    if</span><span style="color:#F8F8F2;"> (count </span><span style="color:#FF79C6;">&gt;=</span><span style="color:#F8F8F2;"> last) </span><span style="color:#FF79C6;">return</span><span style="color:#BD93F9;"> true</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">  return</span><span style="color:#BD93F9;"> false</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="资源加载时间" tabindex="-1"><a class="header-anchor" href="#资源加载时间"><span>资源加载时间</span></a></h1><p>通过 PerformanceObserver 可以监听 resource 和 navigation 事件，如果浏览器不支持 PerformanceObserver，还可以通过 performance.getEntriesByType(entryType) 来进行降级处理。</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> resourceList </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> []</span></span>
<span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> resource </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> performance.</span><span style="color:#50FA7B;">getEntriesByType</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">resource</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">resource</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, resource)</span></span>
<span class="line"><span style="color:#F8F8F2;">resource.</span><span style="color:#50FA7B;">forEach</span><span style="color:#F8F8F2;">((</span><span style="color:#FFB86C;font-style:italic;">item</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  resourceList.</span><span style="color:#50FA7B;">push</span><span style="color:#F8F8F2;">({</span></span>
<span class="line"><span style="color:#F8F8F2;">    type</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> item.initiatorType, </span><span style="color:#6272A4;">// 资源类型</span></span>
<span class="line"><span style="color:#F8F8F2;">    name</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> item.name, </span><span style="color:#6272A4;">// 资源名称</span></span>
<span class="line"><span style="color:#F8F8F2;">    loadTime</span><span style="color:#FF79C6;">:</span><span style="color:#F1FA8C;"> \`</span><span style="color:#FF79C6;">\${</span><span style="color:#F8F8F2;">(item.duration</span><span style="color:#FF79C6;"> /</span><span style="color:#BD93F9;"> 1000</span><span style="color:#F8F8F2;">).</span><span style="color:#50FA7B;">toFixed</span><span style="color:#F8F8F2;">(</span><span style="color:#BD93F9;">3</span><span style="color:#F8F8F2;">)</span><span style="color:#FF79C6;">}</span><span style="color:#F1FA8C;">s\`</span><span style="color:#F8F8F2;">, </span><span style="color:#6272A4;">// 资源加载时间</span></span>
<span class="line"><span style="color:#F8F8F2;">    size</span><span style="color:#FF79C6;">:</span><span style="color:#F1FA8C;"> \`</span><span style="color:#FF79C6;">\${</span><span style="color:#F8F8F2;">(item.transferSize</span><span style="color:#FF79C6;"> /</span><span style="color:#BD93F9;"> 1024</span><span style="color:#F8F8F2;">).</span><span style="color:#50FA7B;">toFixed</span><span style="color:#F8F8F2;">(</span><span style="color:#BD93F9;">0</span><span style="color:#F8F8F2;">)</span><span style="color:#FF79C6;">}</span><span style="color:#F1FA8C;">kb\`</span><span style="color:#F8F8F2;">, </span><span style="color:#6272A4;">// 资源大小</span></span>
<span class="line"><span style="color:#F8F8F2;">  })</span></span>
<span class="line"><span style="color:#F8F8F2;">})</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>动态资源加载</strong></p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;font-weight:bold;">new</span><span style="color:#50FA7B;"> PerformanceObserver</span><span style="color:#F8F8F2;">((</span><span style="color:#FFB86C;font-style:italic;">list</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  list</span></span>
<span class="line"><span style="color:#F8F8F2;">    .</span><span style="color:#50FA7B;">getEntries</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"><span style="color:#F8F8F2;">    .</span><span style="color:#50FA7B;">filter</span><span style="color:#F8F8F2;">(</span></span>
<span class="line"><span style="color:#6272A4;">      //  获取页面图片加载信息</span></span>
<span class="line"><span style="color:#F8F8F2;">    (</span><span style="color:#FFB86C;font-style:italic;">entry</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">=&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">    entry.initiatorType </span><span style="color:#FF79C6;">===</span><span style="color:#E9F284;"> &#39;</span><span style="color:#F1FA8C;">img</span><span style="color:#E9F284;">&#39;</span><span style="color:#FF79C6;"> ||</span><span style="color:#F8F8F2;"> entry.initiatorType </span><span style="color:#FF79C6;">===</span><span style="color:#E9F284;"> &#39;</span><span style="color:#F1FA8C;">css</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">  )</span></span>
<span class="line"><span style="color:#F8F8F2;">    .</span><span style="color:#50FA7B;">forEach</span><span style="color:#F8F8F2;">((</span><span style="color:#FFB86C;font-style:italic;">entry</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">    resourceList.</span><span style="color:#50FA7B;">push</span><span style="color:#F8F8F2;">({</span></span>
<span class="line"><span style="color:#F8F8F2;">      name</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> entry.name, </span><span style="color:#6272A4;">// 资源名称</span></span>
<span class="line"><span style="color:#F8F8F2;">      loadTime</span><span style="color:#FF79C6;">:</span><span style="color:#F1FA8C;"> \`</span><span style="color:#FF79C6;">\${</span><span style="color:#F8F8F2;">(entry.duration</span><span style="color:#FF79C6;"> /</span><span style="color:#BD93F9;"> 1000</span><span style="color:#F8F8F2;">).</span><span style="color:#50FA7B;">toFixed</span><span style="color:#F8F8F2;">(</span><span style="color:#BD93F9;">3</span><span style="color:#F8F8F2;">)</span><span style="color:#FF79C6;">}</span><span style="color:#F1FA8C;">s\`</span><span style="color:#F8F8F2;">, </span><span style="color:#6272A4;">// 资源加载时间</span></span>
<span class="line"><span style="color:#F8F8F2;">      type</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> entry.initiatorType, </span><span style="color:#6272A4;">// 资源类型</span></span>
<span class="line"><span style="color:#F8F8F2;">      size</span><span style="color:#FF79C6;">:</span><span style="color:#F1FA8C;"> \`</span><span style="color:#FF79C6;">\${</span><span style="color:#F8F8F2;">(entry.transferSize</span><span style="color:#FF79C6;"> /</span><span style="color:#BD93F9;"> 1024</span><span style="color:#F8F8F2;">).</span><span style="color:#50FA7B;">toFixed</span><span style="color:#F8F8F2;">(</span><span style="color:#BD93F9;">0</span><span style="color:#F8F8F2;">)</span><span style="color:#FF79C6;">}</span><span style="color:#F1FA8C;">kb\`</span><span style="color:#F8F8F2;">, </span><span style="color:#6272A4;">// 资源大小</span></span>
<span class="line"><span style="color:#F8F8F2;">    })</span></span>
<span class="line"><span style="color:#F8F8F2;">    console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">--</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, resourceList)</span></span>
<span class="line"><span style="color:#F8F8F2;">  })</span></span>
<span class="line"><span style="color:#F8F8F2;">}).</span><span style="color:#50FA7B;">observe</span><span style="color:#F8F8F2;">({ entryTypes</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> [</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">resource</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">] })</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="参考" tabindex="-1"><a class="header-anchor" href="#参考"><span>参考</span></a></h1><ul><li>https://cloud.tencent.com/developer/article/2190273</li></ul>`,31)]))}const d=n(c,[["render",r],["__file","monitor.html.vue"]]),v=JSON.parse('{"path":"/optimization/monitor.html","title":"性能监控","lang":"en-US","frontmatter":{"title":"性能监控","category":["Optimization"],"date":"2025-01-31T00:00:00.000Z","description":"Web Vitals 什么是 Web Vitals，Google给的定义是一个良好网站的基本指标 (Essential metrics for a healthy site)。由于过去要衡量一个好的网站，需要使用的指标太多，于是推出了 Web Vitals ，也是为了简化学习的曲线，开发者只需要关注 Web Vitals 指标表现即可。 而在 Web ...","head":[["meta",{"property":"og:url","content":"https://luxiag.github.io/luxiag/blog/optimization/monitor.html"}],["meta",{"property":"og:title","content":"性能监控"}],["meta",{"property":"og:description","content":"Web Vitals 什么是 Web Vitals，Google给的定义是一个良好网站的基本指标 (Essential metrics for a healthy site)。由于过去要衡量一个好的网站，需要使用的指标太多，于是推出了 Web Vitals ，也是为了简化学习的曲线，开发者只需要关注 Web Vitals 指标表现即可。 而在 Web ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2025-02-12T09:28:57.000Z"}],["meta",{"property":"article:published_time","content":"2025-01-31T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-02-12T09:28:57.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"性能监控\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2025-01-31T00:00:00.000Z\\",\\"dateModified\\":\\"2025-02-12T09:28:57.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"luxiag\\",\\"url\\":\\"https://luxiag.github.io/luxiag\\"}]}"]]},"git":{"createdTime":1739352537000,"updatedTime":1739352537000,"contributors":[{"name":"luxiag","username":"luxiag","email":"luxiag@qq.com","commits":1,"url":"https://github.com/luxiag"}]},"readingTime":{"minutes":4.09,"words":1226},"filePathRelative":"optimization/monitor.md","localizedDate":"January 31, 2025","excerpt":"<p>\\n\\n</p>\\n<h1>Web Vitals</h1>\\n<p>什么是 Web Vitals，Google给的定义是一个良好网站的基本指标 (Essential metrics for a healthy site)。由于过去要衡量一个好的网站，需要使用的指标太多，于是推出了 Web Vitals ，也是为了简化学习的曲线，开发者只需要关注 Web Vitals 指标表现即可。</p>","autoDesc":true}');export{d as comp,v as data};
