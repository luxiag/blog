import{_ as n,c as l,a,o as e}from"./app-Dlgm_vOi.js";const o={};function p(F,s){return e(),l("div",null,s[0]||(s[0]=[a(`<div class="language-jsx line-numbers-mode" data-highlighter="shiki" data-ext="jsx" data-title="jsx" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">for</span><span style="color:#F8F8F2;"> (</span><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> i </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> 1</span><span style="color:#F8F8F2;">; i </span><span style="color:#FF79C6;">&lt;=</span><span style="color:#BD93F9;"> 10</span><span style="color:#F8F8F2;">; </span><span style="color:#FF79C6;">++</span><span style="color:#F8F8F2;">i) {</span></span>
<span class="line"><span style="color:#F8F8F2;">  console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(i);</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>缺点：</strong></p><p><strong> 迭代之前需要事先知道如何使用数据结构。</strong></p><p>数组中的每一项都只能先通过引用取得数组对象， 然后再通过[]操作符取得特定索引位置上的项。这种情况并不适用于所有数据结构。</p><p><strong> 遍历顺序并不是数据结构固有的</strong></p><p>通过递增索引来访问数据是特定于数组类型的方式，并不适用于其他具有隐式顺序的数据结构。</p><p><strong>可迭代对象</strong>指的是任何具有专用迭代器方法，且该方法返回迭代器对象的对象。</p><p><strong>迭代器对象</strong>指的是任何具有 next()方法，且该方法返回迭代结果对象的对象。</p><p><strong>迭代结果对象</strong>是具有属性 value 和 done 的对象。</p><p>要迭代一个可迭代对象，首先要调用其迭代器方法获得一个迭代器对象。然后，重复调用这个迭代器对象的 next()方法，直至返回 done 属性为 true 的迭代结果对象。</p><div class="language-jsx line-numbers-mode" data-highlighter="shiki" data-ext="jsx" data-title="jsx" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> iterable </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> [</span><span style="color:#BD93F9;">99</span><span style="color:#F8F8F2;">];</span></span>
<span class="line"><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> iterator </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> iterable[Symbol.iterator]();</span></span>
<span class="line"><span style="color:#FF79C6;">for</span><span style="color:#F8F8F2;"> (</span><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> result </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> iterator.</span><span style="color:#50FA7B;">next</span><span style="color:#F8F8F2;">(); </span><span style="color:#FF79C6;">!</span><span style="color:#F8F8F2;">result.done; result </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> iterator.</span><span style="color:#50FA7B;">next</span><span style="color:#F8F8F2;">()) {</span></span>
<span class="line"><span style="color:#F8F8F2;">  console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(result.value); </span><span style="color:#6272A4;">//result.value == 99</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="symbol-iterator" tabindex="-1"><a class="header-anchor" href="#symbol-iterator"><span>Symbol.iterator</span></a></h3><p>内置可迭代数据类型的迭代器对象本身也是可迭代的（也就是说，它们有一个名为 Symbol.iterator 的方法，返回它们自己）</p><div class="language-jsx line-numbers-mode" data-highlighter="shiki" data-ext="jsx" data-title="jsx" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> list </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> [</span><span style="color:#BD93F9;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">3</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">4</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">5</span><span style="color:#F8F8F2;">];</span></span>
<span class="line"><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> iter </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> list[Symbol.iterator]();</span></span>
<span class="line"><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> head </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> iter.</span><span style="color:#50FA7B;">next</span><span style="color:#F8F8F2;">().value; </span><span style="color:#6272A4;">// head ==1</span></span>
<span class="line"><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> tail </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> [</span><span style="color:#FF79C6;">...</span><span style="color:#F8F8F2;">iter]; </span><span style="color:#6272A4;">// tail == [2,3,4,5]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="迭代器模式" tabindex="-1"><a class="header-anchor" href="#迭代器模式"><span>迭代器模式</span></a></h2><h3 id="可迭代协议" tabindex="-1"><a class="header-anchor" href="#可迭代协议"><span>可迭代协议</span></a></h3><p>实现 Iterable 接口（可迭代协议）要求同时具备两种能力：</p><p>支持迭代的自我识别能力和创建实现 Iterator 接口的对象的能力。</p><p>在 ECMAScript 中，这意味着必须暴露一个属性作为“默认迭代器”，而且这个属性必须使用特殊的 Symbol.iterator 作为键。这个默认迭代器属性必须引用一个迭代器工厂函数，调用这个工厂函数必须返回一个新迭代器。</p><p>实现 Iterable 接口的内置类型：</p><ul><li> 字符串</li><li> 数组</li><li> 映射</li><li> 集合</li><li> arguments 对象</li><li> NodeList 等 DOM 集合类型</li></ul><p>检查是否存在默认迭代器属性可以暴露这个工厂函数：</p><div class="language-jsx line-numbers-mode" data-highlighter="shiki" data-ext="jsx" data-title="jsx" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> num </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> 1</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> obj </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> {}; </span><span style="color:#6272A4;">// 这两种类型没有实现迭代器工厂函数</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(num[Symbol.iterator]); </span><span style="color:#6272A4;">// undefined</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(obj[Symbol.iterator]); </span><span style="color:#6272A4;">// undefined</span></span>
<span class="line"><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> str </span><span style="color:#FF79C6;">=</span><span style="color:#E9F284;"> &quot;</span><span style="color:#F1FA8C;">abc</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> arr </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> [</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">a</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">, </span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">b</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">, </span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">c</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">];</span></span>
<span class="line"><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> map </span><span style="color:#FF79C6;">=</span><span style="color:#FF79C6;font-weight:bold;"> new</span><span style="color:#50FA7B;"> Map</span><span style="color:#F8F8F2;">().</span><span style="color:#50FA7B;">set</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">a</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">1</span><span style="color:#F8F8F2;">).</span><span style="color:#50FA7B;">set</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">b</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">2</span><span style="color:#F8F8F2;">).</span><span style="color:#50FA7B;">set</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">c</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">3</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> set </span><span style="color:#FF79C6;">=</span><span style="color:#FF79C6;font-weight:bold;"> new</span><span style="color:#50FA7B;"> Set</span><span style="color:#F8F8F2;">().</span><span style="color:#50FA7B;">add</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">a</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">).</span><span style="color:#50FA7B;">add</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">b</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">).</span><span style="color:#50FA7B;">add</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">c</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> els </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> document.</span><span style="color:#50FA7B;">querySelectorAll</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">div</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">); </span><span style="color:#6272A4;">// 这些类型都实现了迭代器工厂函数</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(str[Symbol.iterator]); </span><span style="color:#6272A4;">// f values() { [native code] }</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(arr[Symbol.iterator]); </span><span style="color:#6272A4;">// f values() { [native code] }</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(map[Symbol.iterator]); </span><span style="color:#6272A4;">// f values() { [native code] }</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(set[Symbol.iterator]); </span><span style="color:#6272A4;">// f values() { [native code] }</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(els[Symbol.iterator]); </span><span style="color:#6272A4;">// f values() { [native code] } // 调用这个工厂函数会生成一个迭代器</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(str[Symbol.iterator]()); </span><span style="color:#6272A4;">// StringIterator {}</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(arr[Symbol.iterator]()); </span><span style="color:#6272A4;">// ArrayIterator {}</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(map[Symbol.iterator]()); </span><span style="color:#6272A4;">// MapIterator {}</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(set[Symbol.iterator]()); </span><span style="color:#6272A4;">// SetIterator {}</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(els[Symbol.iterator]()); </span><span style="color:#6272A4;">// ArrayIterator {}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接收可迭代对象的原生语言特性包括：</p><ul><li> for-of 循环</li><li> 数组解构</li><li> 扩展操作符</li><li> Array.from()</li><li> 创建集合</li><li> 创建映射</li><li> Promise.all()接收由期约组成的可迭代对象</li><li> Promise.race()接收由期约组成的可迭代对象</li><li> yield*操作符，在生成器中使用</li></ul><p>原生语言结构会在后台调用提供的可迭代对象的这个工厂函数，从而创建一个迭代器：</p><div class="language-jsx line-numbers-mode" data-highlighter="shiki" data-ext="jsx" data-title="jsx" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> arr </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> [</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">foo</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">, </span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">bar</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">, </span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">baz</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">]; </span><span style="color:#6272A4;">// for-of 循环</span></span>
<span class="line"><span style="color:#FF79C6;">for</span><span style="color:#F8F8F2;"> (</span><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> el </span><span style="color:#FF79C6;">of</span><span style="color:#F8F8F2;"> arr) {</span></span>
<span class="line"><span style="color:#F8F8F2;">  console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(el);</span></span>
<span class="line"><span style="color:#F8F8F2;">} </span><span style="color:#6272A4;">// foo // bar // baz // 数组解构</span></span>
<span class="line"><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> [a, b, c] </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> arr;</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(a, b, c); </span><span style="color:#6272A4;">// foo, bar, baz // 扩展操作符</span></span>
<span class="line"><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> arr2 </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> [</span><span style="color:#FF79C6;">...</span><span style="color:#F8F8F2;">arr];</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(arr2); </span><span style="color:#6272A4;">// [&#39;foo&#39;, &#39;bar&#39;, &#39;baz&#39;] // Array.from()</span></span>
<span class="line"><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> arr3 </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> Array.</span><span style="color:#50FA7B;">from</span><span style="color:#F8F8F2;">(arr);</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(arr3); </span><span style="color:#6272A4;">// [&#39;foo&#39;, &#39;bar&#39;, &#39;baz&#39;] // Set 构造函数</span></span>
<span class="line"><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> set </span><span style="color:#FF79C6;">=</span><span style="color:#FF79C6;font-weight:bold;"> new</span><span style="color:#50FA7B;"> Set</span><span style="color:#F8F8F2;">(arr);</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(set); </span><span style="color:#6272A4;">// Set(3) {&#39;foo&#39;, &#39;bar&#39;, &#39;baz&#39;} // Map 构造函数</span></span>
<span class="line"><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> pairs </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> arr.</span><span style="color:#50FA7B;">map</span><span style="color:#F8F8F2;">((</span><span style="color:#FFB86C;font-style:italic;">x</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">i</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> [x, i]);</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(pairs); </span><span style="color:#6272A4;">// [[&#39;foo&#39;, 0], [&#39;bar&#39;, 1], [&#39;baz&#39;, 2]]</span></span>
<span class="line"><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> map </span><span style="color:#FF79C6;">=</span><span style="color:#FF79C6;font-weight:bold;"> new</span><span style="color:#50FA7B;"> Map</span><span style="color:#F8F8F2;">(pairs);</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(map); </span><span style="color:#6272A4;">// Map(3) { &#39;foo&#39;=&gt;0, &#39;bar&#39;=&gt;1, &#39;baz&#39;=&gt;2 }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果对象原型链上的父类实现了 Iterable 接口，那这个对象也就实现了这个接口：</p><div class="language-jsx line-numbers-mode" data-highlighter="shiki" data-ext="jsx" data-title="jsx" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">class</span><span style="color:#8BE9FD;"> FooArray</span><span style="color:#FF79C6;"> extends</span><span style="color:#8BE9FD;font-style:italic;"> Array</span><span style="color:#F8F8F2;"> {}</span></span>
<span class="line"><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> fooArr </span><span style="color:#FF79C6;">=</span><span style="color:#FF79C6;font-weight:bold;"> new</span><span style="color:#50FA7B;"> FooArray</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">foo</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">, </span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">bar</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">, </span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">baz</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#FF79C6;">for</span><span style="color:#F8F8F2;"> (</span><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> el </span><span style="color:#FF79C6;">of</span><span style="color:#F8F8F2;"> fooArr) {</span></span>
<span class="line"><span style="color:#F8F8F2;">  console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(el);</span></span>
<span class="line"><span style="color:#F8F8F2;">} </span><span style="color:#6272A4;">// foo // bar // baz</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="实现可迭代对象" tabindex="-1"><a class="header-anchor" href="#实现可迭代对象"><span>实现可迭代对象</span></a></h3><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">class</span><span style="color:#8BE9FD;"> Range</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#FF79C6;">  constructor</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">from</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">to</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#BD93F9;font-style:italic;">    this</span><span style="color:#F8F8F2;">.from </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> from;</span></span>
<span class="line"><span style="color:#BD93F9;font-style:italic;">    this</span><span style="color:#F8F8F2;">.to </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> to;</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#50FA7B;">  has</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">x</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#FF79C6;">    return</span><span style="color:#FF79C6;"> typeof</span><span style="color:#F8F8F2;"> x </span><span style="color:#FF79C6;">===</span><span style="color:#E9F284;"> &quot;</span><span style="color:#F1FA8C;">number</span><span style="color:#E9F284;">&quot;</span><span style="color:#FF79C6;"> &amp;&amp;</span><span style="color:#BD93F9;font-style:italic;"> this</span><span style="color:#F8F8F2;">.from </span><span style="color:#FF79C6;">&lt;=</span><span style="color:#F8F8F2;"> x </span><span style="color:#FF79C6;">&amp;&amp;</span><span style="color:#F8F8F2;"> x </span><span style="color:#FF79C6;">&lt;=</span><span style="color:#BD93F9;font-style:italic;"> this</span><span style="color:#F8F8F2;">.to;</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#50FA7B;">  toString</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#FF79C6;">    return</span><span style="color:#F1FA8C;"> \`{x | </span><span style="color:#FF79C6;">\${</span><span style="color:#BD93F9;font-style:italic;">this</span><span style="color:#F8F8F2;">.from</span><span style="color:#FF79C6;">}</span><span style="color:#F1FA8C;"> &lt;= x &lt;= </span><span style="color:#FF79C6;">\${</span><span style="color:#BD93F9;font-style:italic;">this</span><span style="color:#F8F8F2;">.to</span><span style="color:#FF79C6;">}</span><span style="color:#F1FA8C;">}\`</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">  [Symbol.iterator]() {</span></span>
<span class="line"><span style="color:#FF79C6;">    let</span><span style="color:#F8F8F2;"> next </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> Math.</span><span style="color:#50FA7B;">ceil</span><span style="color:#F8F8F2;">(</span><span style="color:#BD93F9;font-style:italic;">this</span><span style="color:#F8F8F2;">.from);</span></span>
<span class="line"><span style="color:#FF79C6;">    let</span><span style="color:#F8F8F2;"> last </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;font-style:italic;"> this</span><span style="color:#F8F8F2;">.to;</span></span>
<span class="line"><span style="color:#FF79C6;">    return</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#50FA7B;">      next</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#FF79C6;">        return</span><span style="color:#F8F8F2;"> next </span><span style="color:#FF79C6;">&lt;=</span><span style="color:#F8F8F2;"> last </span><span style="color:#FF79C6;">?</span><span style="color:#F8F8F2;"> { value</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> next</span><span style="color:#FF79C6;">++</span><span style="color:#F8F8F2;"> } </span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> { done</span><span style="color:#FF79C6;">:</span><span style="color:#BD93F9;"> true</span><span style="color:#F8F8F2;"> };</span></span>
<span class="line"><span style="color:#F8F8F2;">      },</span></span>
<span class="line"><span style="color:#F8F8F2;">      [Symbol.iterator]() {</span></span>
<span class="line"><span style="color:#FF79C6;">        return</span><span style="color:#BD93F9;font-style:italic;"> this</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">      },</span></span>
<span class="line"><span style="color:#F8F8F2;">    };</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#FF79C6;">for</span><span style="color:#F8F8F2;"> (</span><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> x </span><span style="color:#FF79C6;">of</span><span style="color:#FF79C6;font-weight:bold;"> new</span><span style="color:#50FA7B;"> Range</span><span style="color:#F8F8F2;">(</span><span style="color:#BD93F9;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">10</span><span style="color:#F8F8F2;">)) {</span></span>
<span class="line"><span style="color:#6272A4;">  // 打印 1 到10</span></span>
<span class="line"><span style="color:#F8F8F2;">  console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(x);</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="迭代器协议" tabindex="-1"><a class="header-anchor" href="#迭代器协议"><span>迭代器协议</span></a></h3><p>迭代器是一种一次性使用的对象，用于迭代与其关联的可迭代对象。</p><p>迭代器 API 使用 next()方法在可迭代对象中遍历数据。每次成功调用 next()，都会返回一个 IteratorResult 对象，其中包含迭代器返回的下一个值。若不调用 next()，则无法知道迭代器的当前位置。</p><p><code>next()</code></p><p>方法返回的迭代器对象 IteratorResult 包含两个属性：done 和 value。</p><p>done 是一个布尔值，表示是否还可以再次调用 next()取得下一个值(遍历是否结束)</p><p>value 包含可迭代对象的下一个值（done 为 false），或者 undefined（done 为 true）。done: true 状态称为“耗尽”。</p><p>Iterator 的遍历过程是这样的。</p><p>（1）创建一个指针对象，指向当前数据结构的起始位置。也就是说，遍历器对象本质上，就是一个指针对象。</p><p>（2）第一次调用指针对象的<code>next</code>方法，可以将指针指向数据结构的第一个成员。</p><p>（3）第二次调用指针对象的<code>next</code>方法，指针就指向数据结构的第二个成员。</p><p>（4）不断调用指针对象的<code>next</code>方法，直到它指向数据结构的结束位置。</p><div class="language-jsx line-numbers-mode" data-highlighter="shiki" data-ext="jsx" data-title="jsx" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#6272A4;">// 可迭代对象</span></span>
<span class="line"><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> arr </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> [</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">foo</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">, </span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">bar</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">]; </span><span style="color:#6272A4;">// 迭代器工厂函数</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(arr[Symbol.iterator]); </span><span style="color:#6272A4;">// f values() { [native code] } // 迭代器</span></span>
<span class="line"><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> iter </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> arr[Symbol.iterator]();</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(iter); </span><span style="color:#6272A4;">// ArrayIterator {} // 执行迭代</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(iter.</span><span style="color:#50FA7B;">next</span><span style="color:#F8F8F2;">()); </span><span style="color:#6272A4;">// { done: false, value: &#39;foo&#39; }</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(iter.</span><span style="color:#50FA7B;">next</span><span style="color:#F8F8F2;">()); </span><span style="color:#6272A4;">// { done: false, value: &#39;bar&#39; }</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(iter.</span><span style="color:#50FA7B;">next</span><span style="color:#F8F8F2;">()); </span><span style="color:#6272A4;">// { done: true, value: undefined }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过创建迭代器并调用 next()方法按顺序迭代了数组，直至不再产生新值。</p><p>迭代器并不知道怎么从可迭代对象中取得下一个值，也不知道可迭代对象有多大。</p><p>只要迭代器到达 done: true 状态，后续调用 next()就一直返回同样的值了：</p><div class="language-jsx line-numbers-mode" data-highlighter="shiki" data-ext="jsx" data-title="jsx" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> arr </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> [</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">foo</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">];</span></span>
<span class="line"><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> iter </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> arr[Symbol.iterator]();</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(iter.</span><span style="color:#50FA7B;">next</span><span style="color:#F8F8F2;">()); </span><span style="color:#6272A4;">// { done: false, value: &#39;foo&#39; }</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(iter.</span><span style="color:#50FA7B;">next</span><span style="color:#F8F8F2;">()); </span><span style="color:#6272A4;">// { done: true, value: undefined }</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(iter.</span><span style="color:#50FA7B;">next</span><span style="color:#F8F8F2;">()); </span><span style="color:#6272A4;">// { done: true, value: undefined }</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(iter.</span><span style="color:#50FA7B;">next</span><span style="color:#F8F8F2;">()); </span><span style="color:#6272A4;">// { done: true, value: undefined }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="实现迭代器对象" tabindex="-1"><a class="header-anchor" href="#实现迭代器对象"><span>实现迭代器对象</span></a></h3><div class="language-jsx line-numbers-mode" data-highlighter="shiki" data-ext="jsx" data-title="jsx" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">class</span><span style="color:#8BE9FD;"> Counter</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#6272A4;">  // Counter 的实例应该迭代limit 次</span></span>
<span class="line"><span style="color:#FF79C6;">  constructor</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">limit</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#BD93F9;font-style:italic;">    this</span><span style="color:#F8F8F2;">.count </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> 1</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#BD93F9;font-style:italic;">    this</span><span style="color:#F8F8F2;">.limit </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> limit;</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#50FA7B;">  next</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#FF79C6;">    if</span><span style="color:#F8F8F2;"> (</span><span style="color:#BD93F9;font-style:italic;">this</span><span style="color:#F8F8F2;">.count </span><span style="color:#FF79C6;">&lt;=</span><span style="color:#BD93F9;font-style:italic;"> this</span><span style="color:#F8F8F2;">.limit) {</span></span>
<span class="line"><span style="color:#FF79C6;">      return</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">        done</span><span style="color:#FF79C6;">:</span><span style="color:#BD93F9;"> false</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">        value</span><span style="color:#FF79C6;">:</span><span style="color:#BD93F9;font-style:italic;"> this</span><span style="color:#F8F8F2;">.count</span><span style="color:#FF79C6;">++</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">      };</span></span>
<span class="line"><span style="color:#F8F8F2;">    } </span><span style="color:#FF79C6;">else</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#FF79C6;">      return</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">        done</span><span style="color:#FF79C6;">:</span><span style="color:#BD93F9;"> true</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">        value</span><span style="color:#FF79C6;">:</span><span style="color:#BD93F9;"> undefined</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">      };</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">  [Symbol.iterator]() {</span></span>
<span class="line"><span style="color:#FF79C6;">    return</span><span style="color:#BD93F9;font-style:italic;"> this</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> counter </span><span style="color:#FF79C6;">=</span><span style="color:#FF79C6;font-weight:bold;"> new</span><span style="color:#50FA7B;"> Counter</span><span style="color:#F8F8F2;">(</span><span style="color:#BD93F9;">3</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#FF79C6;">for</span><span style="color:#F8F8F2;"> (</span><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> i </span><span style="color:#FF79C6;">of</span><span style="color:#F8F8F2;"> counter) {</span></span>
<span class="line"><span style="color:#F8F8F2;">  console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(i);</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#6272A4;">// 1</span></span>
<span class="line"><span style="color:#6272A4;">// 2</span></span>
<span class="line"><span style="color:#6272A4;">// 3</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个类实现了 Iterator 接口，但不理想。这是因为它的每个实例只能被迭代一次：</p><div class="language-jsx line-numbers-mode" data-highlighter="shiki" data-ext="jsx" data-title="jsx" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">for</span><span style="color:#F8F8F2;"> (</span><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> i </span><span style="color:#FF79C6;">of</span><span style="color:#F8F8F2;"> counter) {</span></span>
<span class="line"><span style="color:#F8F8F2;">  console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(i);</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#6272A4;">// 1</span></span>
<span class="line"><span style="color:#6272A4;">// 2</span></span>
<span class="line"><span style="color:#6272A4;">// 3</span></span>
<span class="line"><span style="color:#FF79C6;">for</span><span style="color:#F8F8F2;"> (</span><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> i </span><span style="color:#FF79C6;">of</span><span style="color:#F8F8F2;"> counter) {</span></span>
<span class="line"><span style="color:#F8F8F2;">  console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(i);</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#6272A4;">// (nothing logged)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>为了让一个可迭代对象能够创建多个迭代器，必须每创建一个迭代器就对应一个新计数器。为此， 可以把计数器变量放到闭包里，然后通过闭包返回迭代器</strong>：</p><div class="language-jsx line-numbers-mode" data-highlighter="shiki" data-ext="jsx" data-title="jsx" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">class</span><span style="color:#8BE9FD;"> Counter</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#FF79C6;">  constructor</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">limit</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#BD93F9;font-style:italic;">    this</span><span style="color:#F8F8F2;">.limit </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> limit;</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">  [Symbol.iterator]() {</span></span>
<span class="line"><span style="color:#FF79C6;">    let</span><span style="color:#F8F8F2;"> count </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> 1</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">      limit </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;font-style:italic;"> this</span><span style="color:#F8F8F2;">.limit;</span></span>
<span class="line"><span style="color:#FF79C6;">    return</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#50FA7B;">      next</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#FF79C6;">        if</span><span style="color:#F8F8F2;"> (count </span><span style="color:#FF79C6;">&lt;=</span><span style="color:#F8F8F2;"> limit) {</span></span>
<span class="line"><span style="color:#FF79C6;">          return</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">            done</span><span style="color:#FF79C6;">:</span><span style="color:#BD93F9;"> false</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">            value</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> count</span><span style="color:#FF79C6;">++</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">          };</span></span>
<span class="line"><span style="color:#F8F8F2;">        } </span><span style="color:#FF79C6;">else</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#FF79C6;">          return</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">            done</span><span style="color:#FF79C6;">:</span><span style="color:#BD93F9;"> true</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">            value</span><span style="color:#FF79C6;">:</span><span style="color:#BD93F9;"> undefined</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">          };</span></span>
<span class="line"><span style="color:#F8F8F2;">        }</span></span>
<span class="line"><span style="color:#F8F8F2;">      },</span></span>
<span class="line"><span style="color:#F8F8F2;">    };</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> counter </span><span style="color:#FF79C6;">=</span><span style="color:#FF79C6;font-weight:bold;"> new</span><span style="color:#50FA7B;"> Counter</span><span style="color:#F8F8F2;">(</span><span style="color:#BD93F9;">3</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#FF79C6;">for</span><span style="color:#F8F8F2;"> (</span><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> i </span><span style="color:#FF79C6;">of</span><span style="color:#F8F8F2;"> counter) {</span></span>
<span class="line"><span style="color:#F8F8F2;">  console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(i);</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#6272A4;">// 1</span></span>
<span class="line"><span style="color:#6272A4;">// 2</span></span>
<span class="line"><span style="color:#6272A4;">// 3</span></span>
<span class="line"><span style="color:#FF79C6;">for</span><span style="color:#F8F8F2;"> (</span><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> i </span><span style="color:#FF79C6;">of</span><span style="color:#F8F8F2;"> counter) {</span></span>
<span class="line"><span style="color:#F8F8F2;">  console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(i);</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#6272A4;">// 1</span></span>
<span class="line"><span style="color:#6272A4;">// 2</span></span>
<span class="line"><span style="color:#6272A4;">// 3</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="生成器" tabindex="-1"><a class="header-anchor" href="#生成器"><span>生成器</span></a></h2><h3 id="生成器基础" tabindex="-1"><a class="header-anchor" href="#生成器基础"><span>生成器基础</span></a></h3><p>函数名称前面加一个星号（*）表示它是一个生成器</p><div class="language-jsx line-numbers-mode" data-highlighter="shiki" data-ext="jsx" data-title="jsx" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#6272A4;">// 生成器函数声明</span></span>
<span class="line"><span style="color:#FF79C6;">function*</span><span style="color:#50FA7B;"> generatorFn</span><span style="color:#F8F8F2;">() {} </span><span style="color:#6272A4;">// 生成器函数表达式</span></span>
<span class="line"><span style="color:#FF79C6;">let</span><span style="color:#50FA7B;"> generatorFn</span><span style="color:#FF79C6;"> =</span><span style="color:#FF79C6;"> function*</span><span style="color:#F8F8F2;"> () {}; </span><span style="color:#6272A4;">// 作为对象字面量方法的生成器函数</span></span>
<span class="line"><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> foo </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#FF79C6;">  *</span><span style="color:#50FA7B;">generatorFn</span><span style="color:#F8F8F2;">() {},</span></span>
<span class="line"><span style="color:#F8F8F2;">}; </span><span style="color:#6272A4;">// 作为类实例方法的生成器函数</span></span>
<span class="line"><span style="color:#FF79C6;">class</span><span style="color:#8BE9FD;"> Foo</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#FF79C6;">  *</span><span style="color:#50FA7B;">generatorFn</span><span style="color:#F8F8F2;">() {}</span></span>
<span class="line"><span style="color:#F8F8F2;">} </span><span style="color:#6272A4;">// 作为类静态方法的生成器函数</span></span>
<span class="line"><span style="color:#FF79C6;">class</span><span style="color:#8BE9FD;"> Bar</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#FF79C6;">  static</span><span style="color:#FF79C6;"> *</span><span style="color:#50FA7B;">generatorFn</span><span style="color:#F8F8F2;">() {}</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>箭头函数不能用来定义生成器函数。</p><p><strong>标识生成器函数的星号不受两侧空格的影响</strong></p><div class="language-jsx line-numbers-mode" data-highlighter="shiki" data-ext="jsx" data-title="jsx" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#6272A4;">// 等价的生成器函数：</span></span>
<span class="line"><span style="color:#FF79C6;">function*</span><span style="color:#50FA7B;"> generatorFnA</span><span style="color:#F8F8F2;">() {}</span></span>
<span class="line"><span style="color:#FF79C6;">function*</span><span style="color:#50FA7B;"> generatorFnB</span><span style="color:#F8F8F2;">() {}</span></span>
<span class="line"><span style="color:#FF79C6;">function*</span><span style="color:#50FA7B;"> generatorFnC</span><span style="color:#F8F8F2;">() {} </span><span style="color:#6272A4;">// 等价的生成器方法：</span></span>
<span class="line"><span style="color:#FF79C6;">class</span><span style="color:#8BE9FD;"> Foo</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#FF79C6;">  *</span><span style="color:#50FA7B;">generatorFnD</span><span style="color:#F8F8F2;">() {}</span></span>
<span class="line"><span style="color:#FF79C6;">  *</span><span style="color:#50FA7B;">generatorFnE</span><span style="color:#F8F8F2;">() {}</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>调用生成器函数会产生一个生成器对象。</p><p>生成器对象一开始处于暂停执行（suspended）的状态</p><p>调用 next()方法会让生成器开始或恢复执行。</p><div class="language-jsx line-numbers-mode" data-highlighter="shiki" data-ext="jsx" data-title="jsx" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">function*</span><span style="color:#50FA7B;"> generatorFn</span><span style="color:#F8F8F2;">() {}</span></span>
<span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> g </span><span style="color:#FF79C6;">=</span><span style="color:#50FA7B;"> generatorFn</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(g); </span><span style="color:#6272A4;">// generatorFn {&lt;suspended&gt;}</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(g.next); </span><span style="color:#6272A4;">// f next() { [native code] }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>next()方法的返回值类似于迭代器，有一个 done 属性和一个 value 属性。</p><div class="language-jsx line-numbers-mode" data-highlighter="shiki" data-ext="jsx" data-title="jsx" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">function*</span><span style="color:#50FA7B;"> generatorFn</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#FF79C6;">  return</span><span style="color:#E9F284;"> &quot;</span><span style="color:#F1FA8C;">foo</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> generatorObject </span><span style="color:#FF79C6;">=</span><span style="color:#50FA7B;"> generatorFn</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(generatorObject); </span><span style="color:#6272A4;">// generatorFn {&lt;suspended&gt;}</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(generatorObject.</span><span style="color:#50FA7B;">next</span><span style="color:#F8F8F2;">()); </span><span style="color:#6272A4;">// { done: true, value: &#39;foo&#39; }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>生成器函数只会在初次调用 next()方法后开始执行</strong></p><div class="language-jsx line-numbers-mode" data-highlighter="shiki" data-ext="jsx" data-title="jsx" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">function*</span><span style="color:#50FA7B;"> generatorFn</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#F8F8F2;">  console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">foobar</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">} </span><span style="color:#6272A4;">// 初次调用生成器函数并不会打印日志</span></span>
<span class="line"><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> generatorObject </span><span style="color:#FF79C6;">=</span><span style="color:#50FA7B;"> generatorFn</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#F8F8F2;">generatorObject.</span><span style="color:#50FA7B;">next</span><span style="color:#F8F8F2;">(); </span><span style="color:#6272A4;">// foobar</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="通过-yield-中断执行" tabindex="-1"><a class="header-anchor" href="#通过-yield-中断执行"><span>通过 yield 中断执行</span></a></h3><p>yield 关键字可以让生成器停止和开始执行，也是生成器最有用的地方。</p><p>生成器函数在遇到 yield 关键字之前会正常执行。遇到这个关键字后，执行会停止，函数作用域的状态会被保留。</p><p>停止执行的生成器函数只能通过在生成器对象上调用 next()方法来恢复执行：</p><div class="language-jsx line-numbers-mode" data-highlighter="shiki" data-ext="jsx" data-title="jsx" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">function*</span><span style="color:#50FA7B;"> generatorFn</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#FF79C6;">  yield</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> generatorObject </span><span style="color:#FF79C6;">=</span><span style="color:#50FA7B;"> generatorFn</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(generatorObject.</span><span style="color:#50FA7B;">next</span><span style="color:#F8F8F2;">()); </span><span style="color:#6272A4;">// { done: false, value: undefined }</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(generatorObject.</span><span style="color:#50FA7B;">next</span><span style="color:#F8F8F2;">()); </span><span style="color:#6272A4;">// { done: true, value: undefined }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此时的 yield 关键字有点像函数的中间返回语句，它生成的值会出现在 next()方法返回的对象里。</p><p>通过 yield 关键字退出的生成器函数会处在 done: false 状态；</p><p>通过 return 关键字退出的生成器函数会处于 done: true 状态。</p><div class="language-jsx line-numbers-mode" data-highlighter="shiki" data-ext="jsx" data-title="jsx" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">function*</span><span style="color:#50FA7B;"> generatorFn</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#FF79C6;">  yield</span><span style="color:#E9F284;"> &quot;</span><span style="color:#F1FA8C;">foo</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#FF79C6;">  yield</span><span style="color:#E9F284;"> &quot;</span><span style="color:#F1FA8C;">bar</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#FF79C6;">  return</span><span style="color:#E9F284;"> &quot;</span><span style="color:#F1FA8C;">baz</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> generatorObject </span><span style="color:#FF79C6;">=</span><span style="color:#50FA7B;"> generatorFn</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(generatorObject.</span><span style="color:#50FA7B;">next</span><span style="color:#F8F8F2;">()); </span><span style="color:#6272A4;">// { done: false, value: &#39;foo&#39; }</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(generatorObject.</span><span style="color:#50FA7B;">next</span><span style="color:#F8F8F2;">()); </span><span style="color:#6272A4;">// { done: false, value: &#39;bar&#39; }</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(generatorObject.</span><span style="color:#50FA7B;">next</span><span style="color:#F8F8F2;">()); </span><span style="color:#6272A4;">// { done: true, value: &#39;baz&#39; }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>yield 关键字只能在生成器函数内部使用，用在其他地方会抛出错误,类似于函数 return</p><div class="language-jsx line-numbers-mode" data-highlighter="shiki" data-ext="jsx" data-title="jsx" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#6272A4;">// 有效</span></span>
<span class="line"><span style="color:#FF79C6;">function*</span><span style="color:#50FA7B;"> validGeneratorFn</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#FF79C6;">  yield</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">// 无效</span></span>
<span class="line"><span style="color:#FF79C6;">function*</span><span style="color:#50FA7B;"> invalidGeneratorFnA</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#FF79C6;">  function</span><span style="color:#50FA7B;"> a</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#FF79C6;">    yield</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">// 无效</span></span>
<span class="line"><span style="color:#FF79C6;">function*</span><span style="color:#50FA7B;"> invalidGeneratorFnB</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#FF79C6;">  const</span><span style="color:#50FA7B;"> b</span><span style="color:#FF79C6;"> =</span><span style="color:#F8F8F2;"> () </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#FF79C6;">    yield</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">  };</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">// 无效</span></span>
<span class="line"><span style="color:#FF79C6;">function*</span><span style="color:#50FA7B;"> invalidGeneratorFnC</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#F8F8F2;">  (() </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#FF79C6;">    yield</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">  })();</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="生成器对象作为可迭代对象" tabindex="-1"><a class="header-anchor" href="#生成器对象作为可迭代对象"><span>生成器对象作为可迭代对象</span></a></h4><p>在生成器对象上显式调用 next()方法的用处并不大。其实，如果把生成器对象当成可迭代对象， 那么使用起来会更方便：</p><div class="language-jsx line-numbers-mode" data-highlighter="shiki" data-ext="jsx" data-title="jsx" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">function*</span><span style="color:#50FA7B;"> generatorFn</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#FF79C6;">  yield</span><span style="color:#BD93F9;"> 1</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#FF79C6;">  yield</span><span style="color:#BD93F9;"> 2</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#FF79C6;">  yield</span><span style="color:#BD93F9;"> 3</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#FF79C6;">for</span><span style="color:#F8F8F2;"> (</span><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> x </span><span style="color:#FF79C6;">of</span><span style="color:#50FA7B;"> generatorFn</span><span style="color:#F8F8F2;">()) {</span></span>
<span class="line"><span style="color:#F8F8F2;">  console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(x);</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#6272A4;">// 1</span></span>
<span class="line"><span style="color:#6272A4;">// 2</span></span>
<span class="line"><span style="color:#6272A4;">// 3</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-jsx line-numbers-mode" data-highlighter="shiki" data-ext="jsx" data-title="jsx" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">function*</span><span style="color:#50FA7B;"> nTimes</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">n</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#FF79C6;">  while</span><span style="color:#F8F8F2;"> (n</span><span style="color:#FF79C6;">--</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#FF79C6;">    yield</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#FF79C6;">for</span><span style="color:#F8F8F2;"> (</span><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> _ </span><span style="color:#FF79C6;">of</span><span style="color:#50FA7B;"> nTimes</span><span style="color:#F8F8F2;">(</span><span style="color:#BD93F9;">3</span><span style="color:#F8F8F2;">)) {</span></span>
<span class="line"><span style="color:#F8F8F2;">  console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">foo</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#6272A4;">// foo</span></span>
<span class="line"><span style="color:#6272A4;">// foo</span></span>
<span class="line"><span style="color:#6272A4;">// foo</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="使用-yield-实现输入和输出" tabindex="-1"><a class="header-anchor" href="#使用-yield-实现输入和输出"><span>使用 yield 实现输入和输出</span></a></h4><p>让生成器函数暂停的 yield 关键字会接收到传给 next()方法的第一个值</p><p>第一次调用 next()传入的值不会被使用，因为这一次调用是为了开始执行生成器函数：</p><div class="language-jsx line-numbers-mode" data-highlighter="shiki" data-ext="jsx" data-title="jsx" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">function*</span><span style="color:#50FA7B;"> generatorFn</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">initial</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">  console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(initial);</span></span>
<span class="line"><span style="color:#F8F8F2;">  console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#FF79C6;">yield</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">  console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#FF79C6;">yield</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> generatorObject </span><span style="color:#FF79C6;">=</span><span style="color:#50FA7B;"> generatorFn</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">foo</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">generatorObject.</span><span style="color:#50FA7B;">next</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">bar</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">); </span><span style="color:#6272A4;">// foo</span></span>
<span class="line"><span style="color:#F8F8F2;">generatorObject.</span><span style="color:#50FA7B;">next</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">baz</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">); </span><span style="color:#6272A4;">// baz</span></span>
<span class="line"><span style="color:#F8F8F2;">generatorObject.</span><span style="color:#50FA7B;">next</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">qux</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">); </span><span style="color:#6272A4;">// qux</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>函数必须对整个表达式求值才能确定要返回的值，所以它在遇到 yield 关键字时暂停执行并计算出要产生的值：&quot;foo&quot;。下一次调用 next()传入了&quot;bar&quot;，作为交给同一个 yield 的值。然后这个值被确定为本次生成器函数要返回的值。</p><div class="language-jsx line-numbers-mode" data-highlighter="shiki" data-ext="jsx" data-title="jsx" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">function*</span><span style="color:#50FA7B;"> generatorFn</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#FF79C6;">  return</span><span style="color:#FF79C6;"> yield</span><span style="color:#E9F284;"> &quot;</span><span style="color:#F1FA8C;">foo</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> generatorObject </span><span style="color:#FF79C6;">=</span><span style="color:#50FA7B;"> generatorFn</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(generatorObject.</span><span style="color:#50FA7B;">next</span><span style="color:#F8F8F2;">()); </span><span style="color:#6272A4;">// { done: false, value: &#39;foo&#39; }</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(generatorObject.</span><span style="color:#50FA7B;">next</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">bar</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">)); </span><span style="color:#6272A4;">// { done: true, value: &#39;bar&#39; }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-jsx line-numbers-mode" data-highlighter="shiki" data-ext="jsx" data-title="jsx" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">function*</span><span style="color:#50FA7B;"> generatorFn</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#FF79C6;">	for</span><span style="color:#F8F8F2;"> (</span><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> i </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> 0</span><span style="color:#F8F8F2;">;;</span><span style="color:#FF79C6;">++</span><span style="color:#F8F8F2;">i) {</span></span>
<span class="line"><span style="color:#FF79C6;">		yield</span><span style="color:#F8F8F2;"> i;</span></span>
<span class="line"><span style="color:#F8F8F2;">	}</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> generatorObject </span><span style="color:#FF79C6;">=</span><span style="color:#50FA7B;"> generatorFn</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(generatorObject.</span><span style="color:#50FA7B;">next</span><span style="color:#F8F8F2;">().value); </span><span style="color:#6272A4;">// 0</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(generatorObject.</span><span style="color:#50FA7B;">next</span><span style="color:#F8F8F2;">().value); </span><span style="color:#6272A4;">// 1</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(generatorObject.</span><span style="color:#50FA7B;">next</span><span style="color:#F8F8F2;">().value); </span><span style="color:#6272A4;">// 2</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(generatorObject.</span><span style="color:#50FA7B;">next</span><span style="color:#F8F8F2;">().value); </span><span style="color:#6272A4;">// 3</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(generatorObject.</span><span style="color:#50FA7B;">next</span><span style="color:#F8F8F2;">().value); </span><span style="color:#6272A4;">// 4</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(generatorObject.</span><span style="color:#50FA7B;">next</span><span style="color:#F8F8F2;">().value); </span><span style="color:#6272A4;">// 5</span></span>
<span class="line"><span style="color:#FF79C6;">...</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-jsx line-numbers-mode" data-highlighter="shiki" data-ext="jsx" data-title="jsx" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">function*</span><span style="color:#50FA7B;"> range</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">start</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">end</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#FF79C6;">  while</span><span style="color:#F8F8F2;"> (end </span><span style="color:#FF79C6;">&gt;</span><span style="color:#F8F8F2;"> start) {</span></span>
<span class="line"><span style="color:#FF79C6;">    yield</span><span style="color:#F8F8F2;"> start</span><span style="color:#FF79C6;">++</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#FF79C6;">for</span><span style="color:#F8F8F2;"> (</span><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> x </span><span style="color:#FF79C6;">of</span><span style="color:#50FA7B;"> range</span><span style="color:#F8F8F2;">(</span><span style="color:#BD93F9;">4</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">7</span><span style="color:#F8F8F2;">)) {</span></span>
<span class="line"><span style="color:#F8F8F2;">  console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(x);</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#6272A4;">// 4</span></span>
<span class="line"><span style="color:#6272A4;">// 5</span></span>
<span class="line"><span style="color:#6272A4;">// 6</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">function*</span><span style="color:#50FA7B;"> zeroes</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">n</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#FF79C6;">  while</span><span style="color:#F8F8F2;"> (n</span><span style="color:#FF79C6;">--</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#FF79C6;">    yield</span><span style="color:#BD93F9;"> 0</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(Array.</span><span style="color:#50FA7B;">from</span><span style="color:#F8F8F2;">(</span><span style="color:#50FA7B;">zeroes</span><span style="color:#F8F8F2;">(</span><span style="color:#BD93F9;">8</span><span style="color:#F8F8F2;">))); </span><span style="color:#6272A4;">// [0, 0, 0, 0, 0, 0, 0, 0]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="产生可迭代对象" tabindex="-1"><a class="header-anchor" href="#产生可迭代对象"><span>产生可迭代对象</span></a></h4><p>使用星号增强 yield 的行为，让它能够迭代一个可迭代对象，从而一次产出一个值：</p><div class="language-jsx line-numbers-mode" data-highlighter="shiki" data-ext="jsx" data-title="jsx" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#6272A4;">// 等价的generatorFn：</span></span>
<span class="line"><span style="color:#6272A4;">// function* generatorFn() {</span></span>
<span class="line"><span style="color:#6272A4;">//   for (const x of [1, 2, 3]) {</span></span>
<span class="line"><span style="color:#6272A4;">//     yield x;</span></span>
<span class="line"><span style="color:#6272A4;">//   }</span></span>
<span class="line"><span style="color:#6272A4;">// }</span></span>
<span class="line"><span style="color:#FF79C6;">function*</span><span style="color:#50FA7B;"> generatorFn</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#FF79C6;">  yield*</span><span style="color:#F8F8F2;"> [</span><span style="color:#BD93F9;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">3</span><span style="color:#F8F8F2;">];</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> generatorObject </span><span style="color:#FF79C6;">=</span><span style="color:#50FA7B;"> generatorFn</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#FF79C6;">for</span><span style="color:#F8F8F2;"> (</span><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> x </span><span style="color:#FF79C6;">of</span><span style="color:#50FA7B;"> generatorFn</span><span style="color:#F8F8F2;">()) {</span></span>
<span class="line"><span style="color:#F8F8F2;">  console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(x);</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#6272A4;">// 1</span></span>
<span class="line"><span style="color:#6272A4;">// 2</span></span>
<span class="line"><span style="color:#6272A4;">// 3</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="生成器作为默认迭代器" tabindex="-1"><a class="header-anchor" href="#生成器作为默认迭代器"><span>生成器作为默认迭代器</span></a></h3><p>生成器对象实现了 Iterable 接口，而且生成器函数和默认迭代器被调用之后都产生迭代器，所以生成器格外适合作为默认迭代器。</p><div class="language-jsx line-numbers-mode" data-highlighter="shiki" data-ext="jsx" data-title="jsx" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">class</span><span style="color:#8BE9FD;"> Foo</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#FF79C6;">  constructor</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#BD93F9;font-style:italic;">    this</span><span style="color:#F8F8F2;">.values </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> [</span><span style="color:#BD93F9;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">3</span><span style="color:#F8F8F2;">];</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#FF79C6;">  *</span><span style="color:#F8F8F2;">[Symbol.iterator]() {</span></span>
<span class="line"><span style="color:#FF79C6;">    yield*</span><span style="color:#BD93F9;font-style:italic;"> this</span><span style="color:#F8F8F2;">.values;</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> f </span><span style="color:#FF79C6;">=</span><span style="color:#FF79C6;font-weight:bold;"> new</span><span style="color:#50FA7B;"> Foo</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#FF79C6;">for</span><span style="color:#F8F8F2;"> (</span><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> x </span><span style="color:#FF79C6;">of</span><span style="color:#F8F8F2;"> f) {</span></span>
<span class="line"><span style="color:#F8F8F2;">  console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(x);</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#6272A4;">// 1</span></span>
<span class="line"><span style="color:#6272A4;">// 2</span></span>
<span class="line"><span style="color:#6272A4;">// 3</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="提前终止生成器" tabindex="-1"><a class="header-anchor" href="#提前终止生成器"><span>提前终止生成器</span></a></h3><p><strong>return()</strong></p><p>强制生成器进入关闭状态</p><div class="language-jsx line-numbers-mode" data-highlighter="shiki" data-ext="jsx" data-title="jsx" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">function*</span><span style="color:#50FA7B;"> generatorFn</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#FF79C6;">  for</span><span style="color:#F8F8F2;"> (</span><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> x </span><span style="color:#FF79C6;">of</span><span style="color:#F8F8F2;"> [</span><span style="color:#BD93F9;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">3</span><span style="color:#F8F8F2;">]) {</span></span>
<span class="line"><span style="color:#FF79C6;">    yield</span><span style="color:#F8F8F2;"> x;</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> g </span><span style="color:#FF79C6;">=</span><span style="color:#50FA7B;"> generatorFn</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(g); </span><span style="color:#6272A4;">// generatorFn {&lt;suspended&gt;}</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(g.</span><span style="color:#50FA7B;">return</span><span style="color:#F8F8F2;">(</span><span style="color:#BD93F9;">4</span><span style="color:#F8F8F2;">)); </span><span style="color:#6272A4;">// { done: true, value: 4 }</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(g); </span><span style="color:#6272A4;">// generatorFn {&lt;closed&gt;}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>与迭代器不同，所有生成器对象都有 return()方法，只要通过它进入关闭状态，就无法恢复了。</p><div class="language-jsx line-numbers-mode" data-highlighter="shiki" data-ext="jsx" data-title="jsx" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">function*</span><span style="color:#50FA7B;"> generatorFn</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#FF79C6;">  for</span><span style="color:#F8F8F2;"> (</span><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> x </span><span style="color:#FF79C6;">of</span><span style="color:#F8F8F2;"> [</span><span style="color:#BD93F9;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">3</span><span style="color:#F8F8F2;">]) {</span></span>
<span class="line"><span style="color:#FF79C6;">    yield</span><span style="color:#F8F8F2;"> x;</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> g </span><span style="color:#FF79C6;">=</span><span style="color:#50FA7B;"> generatorFn</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(g.</span><span style="color:#50FA7B;">next</span><span style="color:#F8F8F2;">()); </span><span style="color:#6272A4;">// { done: false, value: 1 }</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(g.</span><span style="color:#50FA7B;">return</span><span style="color:#F8F8F2;">(</span><span style="color:#BD93F9;">4</span><span style="color:#F8F8F2;">)); </span><span style="color:#6272A4;">// { done: true, value: 4 }</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(g.</span><span style="color:#50FA7B;">next</span><span style="color:#F8F8F2;">()); </span><span style="color:#6272A4;">// { done: true, value: undefined }</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(g.</span><span style="color:#50FA7B;">next</span><span style="color:#F8F8F2;">()); </span><span style="color:#6272A4;">// { done: true, value: undefined }</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(g.</span><span style="color:#50FA7B;">next</span><span style="color:#F8F8F2;">()); </span><span style="color:#6272A4;">// { done: true, value: undefined }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>throw()</strong></p><p>会在暂停的时候将一个提供的错误注入到生成器对象中。如果错误未被处理，生成器就会关闭：</p><div class="language-jsx line-numbers-mode" data-highlighter="shiki" data-ext="jsx" data-title="jsx" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">function*</span><span style="color:#50FA7B;"> generatorFn</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#FF79C6;">  for</span><span style="color:#F8F8F2;"> (</span><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> x </span><span style="color:#FF79C6;">of</span><span style="color:#F8F8F2;"> [</span><span style="color:#BD93F9;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">3</span><span style="color:#F8F8F2;">]) {</span></span>
<span class="line"><span style="color:#FF79C6;">    yield</span><span style="color:#F8F8F2;"> x;</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> g </span><span style="color:#FF79C6;">=</span><span style="color:#50FA7B;"> generatorFn</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(g); </span><span style="color:#6272A4;">// generatorFn {&lt;suspended&gt;}</span></span>
<span class="line"><span style="color:#FF79C6;">try</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  g.</span><span style="color:#50FA7B;">throw</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">foo</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">} </span><span style="color:#FF79C6;">catch</span><span style="color:#F8F8F2;"> (e) {</span></span>
<span class="line"><span style="color:#F8F8F2;">  console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(e); </span><span style="color:#6272A4;">// foo</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(g); </span><span style="color:#6272A4;">// generatorFn {&lt;closed&gt;}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>假如生成器函数内部处理了这个错误，那么生成器就不会关闭，而且还可以恢复执行。错误处理会跳过对应的 yield</strong></p><div class="language-jsx line-numbers-mode" data-highlighter="shiki" data-ext="jsx" data-title="jsx" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">function*</span><span style="color:#50FA7B;"> generatorFn</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#FF79C6;">  for</span><span style="color:#F8F8F2;"> (</span><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> x </span><span style="color:#FF79C6;">of</span><span style="color:#F8F8F2;"> [</span><span style="color:#BD93F9;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">3</span><span style="color:#F8F8F2;">]) {</span></span>
<span class="line"><span style="color:#FF79C6;">    try</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#FF79C6;">      yield</span><span style="color:#F8F8F2;"> x;</span></span>
<span class="line"><span style="color:#F8F8F2;">    } </span><span style="color:#FF79C6;">catch</span><span style="color:#F8F8F2;"> (e) {}</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> g </span><span style="color:#FF79C6;">=</span><span style="color:#50FA7B;"> generatorFn</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(g.</span><span style="color:#50FA7B;">next</span><span style="color:#F8F8F2;">()); </span><span style="color:#6272A4;">// { done: false, value: 1}</span></span>
<span class="line"><span style="color:#F8F8F2;">g.</span><span style="color:#50FA7B;">throw</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">foo</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(g.</span><span style="color:#50FA7B;">next</span><span style="color:#F8F8F2;">()); </span><span style="color:#6272A4;">// { done: false, value: 3}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,109)]))}const c=n(o,[["render",p],["__file","iterators-and-generators.html.vue"]]),t=JSON.parse('{"path":"/javascript/iterators-and-generators.html","title":"迭代器与生成器","lang":"en-US","frontmatter":{"title":"迭代器与生成器","category":["JavaScript"],"date":"2020-09-16T00:00:00.000Z","description":"缺点：  迭代之前需要事先知道如何使用数据结构。 数组中的每一项都只能先通过引用取得数组对象， 然后再通过[]操作符取得特定索引位置上的项。这种情况并不适用于所有数据结构。  遍历顺序并不是数据结构固有的 通过递增索引来访问数据是特定于数组类型的方式，并不适用于其他具有隐式顺序的数据结构。 可迭代对象指的是任何具有专用迭代器方法，且该方法返回迭代器...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/javascript/iterators-and-generators.html"}],["meta",{"property":"og:title","content":"迭代器与生成器"}],["meta",{"property":"og:description","content":"缺点：  迭代之前需要事先知道如何使用数据结构。 数组中的每一项都只能先通过引用取得数组对象， 然后再通过[]操作符取得特定索引位置上的项。这种情况并不适用于所有数据结构。  遍历顺序并不是数据结构固有的 通过递增索引来访问数据是特定于数组类型的方式，并不适用于其他具有隐式顺序的数据结构。 可迭代对象指的是任何具有专用迭代器方法，且该方法返回迭代器..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2023-01-15T10:46:26.000Z"}],["meta",{"property":"article:published_time","content":"2020-09-16T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-01-15T10:46:26.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"迭代器与生成器\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2020-09-16T00:00:00.000Z\\",\\"dateModified\\":\\"2023-01-15T10:46:26.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"luxiag\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":3,"title":"Symbol.iterator","slug":"symbol-iterator","link":"#symbol-iterator","children":[]},{"level":2,"title":"迭代器模式","slug":"迭代器模式","link":"#迭代器模式","children":[{"level":3,"title":"可迭代协议","slug":"可迭代协议","link":"#可迭代协议","children":[]},{"level":3,"title":"实现可迭代对象","slug":"实现可迭代对象","link":"#实现可迭代对象","children":[]},{"level":3,"title":"迭代器协议","slug":"迭代器协议","link":"#迭代器协议","children":[]},{"level":3,"title":"实现迭代器对象","slug":"实现迭代器对象","link":"#实现迭代器对象","children":[]}]},{"level":2,"title":"生成器","slug":"生成器","link":"#生成器","children":[{"level":3,"title":"生成器基础","slug":"生成器基础","link":"#生成器基础","children":[]},{"level":3,"title":"通过 yield 中断执行","slug":"通过-yield-中断执行","link":"#通过-yield-中断执行","children":[]},{"level":3,"title":"生成器作为默认迭代器","slug":"生成器作为默认迭代器","link":"#生成器作为默认迭代器","children":[]},{"level":3,"title":"提前终止生成器","slug":"提前终止生成器","link":"#提前终止生成器","children":[]}]}],"git":{"createdTime":1668330726000,"updatedTime":1673779586000,"contributors":[{"name":"luxiag","email":"luxiag@qq.com","commits":1},{"name":"luxiang","email":"luxiag@qq.com","commits":1}]},"readingTime":{"minutes":11.19,"words":3356},"filePathRelative":"javascript/iterators-and-generators.md","localizedDate":"September 16, 2020","excerpt":"<div class=\\"language-jsx line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"jsx\\" data-title=\\"jsx\\" style=\\"background-color:#282A36;color:#F8F8F2\\"><pre class=\\"shiki dracula vp-code\\"><code><span class=\\"line\\"><span style=\\"color:#FF79C6\\">for</span><span style=\\"color:#F8F8F2\\"> (</span><span style=\\"color:#FF79C6\\">let</span><span style=\\"color:#F8F8F2\\"> i </span><span style=\\"color:#FF79C6\\">=</span><span style=\\"color:#BD93F9\\"> 1</span><span style=\\"color:#F8F8F2\\">; i </span><span style=\\"color:#FF79C6\\">&lt;=</span><span style=\\"color:#BD93F9\\"> 10</span><span style=\\"color:#F8F8F2\\">; </span><span style=\\"color:#FF79C6\\">++</span><span style=\\"color:#F8F8F2\\">i) {</span></span>\\n<span class=\\"line\\"><span style=\\"color:#F8F8F2\\">  console.</span><span style=\\"color:#50FA7B\\">log</span><span style=\\"color:#F8F8F2\\">(i);</span></span>\\n<span class=\\"line\\"><span style=\\"color:#F8F8F2\\">}</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{c as comp,t as data};
