import{_ as i,c as e,a,o as n}from"./app-DADNOUiR.js";const l="/blog/assets/Untitled-D0dTG4rS.png",s="/blog/assets/Untitled-1-DcFjrd6u.png",p="/blog/assets/Untitled-2-CKrV2uZo.png",r="/blog/assets/Untitled-3-DT2FVQuG.png",o="/blog/assets/Untitled-4-Q8XkgiNT.png",d="/blog/assets/Untitled-5-B-OCWJ_U.png",c="/blog/assets/Untitled-6-DMWoIkic.png",g="/blog/assets/Untitled-7-DqQFNYq_.png",h="/blog/assets/Untitled-8-DXk1APN4.png",f="/blog/assets/Untitled-9-BQFhO-2d.png",u="/blog/assets/Untitled-10-CYWSs9SK.png",m="/blog/assets/Untitled-11-Dqf7irIU.png",b="/blog/assets/Untitled-12-CXKe1K_L.png",U="/blog/assets/Untitled-13-Dw1K0Anw.png",k="/blog/assets/Untitled-14-DrQXAPUJ.png",x="/blog/assets/Untitled-15-CZMjMlyx.png",_="/blog/assets/Untitled-16-BR8PaRBs.png",P="/blog/assets/Untitled-17-D7NMCOi0.png",C="/blog/assets/Untitled-18-GA3BzJ3A.png",y="/blog/assets/Untitled-19-CKKbynXB.png",A="/blog/assets/Untitled-20-CNI6-Xy5.png",T="/blog/assets/Untitled-21-BxYPObGR.png",v="/blog/assets/Untitled-22-B5GhAcYh.png",I={};function z(K,t){return n(),e("div",null,t[0]||(t[0]=[a('<h2 id="创建嵌套字" tabindex="-1"><a class="header-anchor" href="#创建嵌套字"><span>创建嵌套字</span></a></h2><h3 id="协议栈的内部结构" tabindex="-1"><a class="header-anchor" href="#协议栈的内部结构"><span>协议栈的内部结构</span></a></h3><p><strong>浏览器、邮件等一般应用程序收发数据时用TCP； DNS 查询等收发较短的控制数据时用UDP。</strong></p><figure><img src="'+l+'" alt="Untitled" tabindex="0" loading="lazy"><figcaption>Untitled</figcaption></figure><h3 id="套接字的实体就是通信控制信息" tabindex="-1"><a class="header-anchor" href="#套接字的实体就是通信控制信息"><span>套接字的实体就是通信控制信息</span></a></h3><p>在协议栈内部有一块用于存放控制信息的内存空间，这里记录了用于控制通信操作的控制信息，例如通信对象的IP 地址、端口号、通信操作的进行状态等</p><p><strong>协议栈是根据套接字中记录的控制信息来工作的。</strong></p><figure><img src="'+s+'" alt="Untitled" tabindex="0" loading="lazy"><figcaption>Untitled</figcaption></figure><h3 id="调用socket时的操作" tabindex="-1"><a class="header-anchor" href="#调用socket时的操作"><span>调用socket时的操作</span></a></h3><p>创建套接字时，首先分配一个套接字所需的内存空间，然后向其中写入初始状态。</p><figure><img src="'+p+'" alt="Untitled" tabindex="0" loading="lazy"><figcaption>Untitled</figcaption></figure><h2 id="连接服务器" tabindex="-1"><a class="header-anchor" href="#连接服务器"><span>连接服务器</span></a></h2><p>创建套接字之后，应用程序（浏览器）就会调用connect，随后协议栈会将本地的套接字与服务器的套接字进行连接。</p><h3 id="保存控制信息的头部" tabindex="-1"><a class="header-anchor" href="#保存控制信息的头部"><span>保存控制信息的头部</span></a></h3><p>客户端和服务器在通信中会将必要的信息记录在头部并相互确认</p><p>控制信息大体上分为两类。</p><p>第一类是客户端和服务器相互联络时交换的控制信息。</p><p>另外一类，那就是保存在套接字中，用来控制协议栈操作的信息</p><figure><img src="'+r+'" alt="Untitled" tabindex="0" loading="lazy"><figcaption>Untitled</figcaption></figure><p>通信操作中使用的控制信息分为两类。 （1） 头部中记录的信息 （2） 套接字（协议栈中的内存空间）中记录的信息</p><h3 id="连接操作的实际过程" tabindex="-1"><a class="header-anchor" href="#连接操作的实际过程"><span>连接操作的实际过程</span></a></h3><p>连接操作的第一步是在TCP 模块处创建表示连接控制信息的头部。</p><p>通过TCP 头部中的发送方和接收方端口号可以找到要连接的套接字。</p><h2 id="收发数据" tabindex="-1"><a class="header-anchor" href="#收发数据"><span>收发数据</span></a></h2><h3 id="将http-请求消息交给协议栈" tabindex="-1"><a class="header-anchor" href="#将http-请求消息交给协议栈"><span>将HTTP 请求消息交给协议栈</span></a></h3><h3 id="对较大的数据进行拆分" tabindex="-1"><a class="header-anchor" href="#对较大的数据进行拆分"><span>对较大的数据进行拆分</span></a></h3><figure><img src="'+o+'" alt="Untitled" tabindex="0" loading="lazy"><figcaption>Untitled</figcaption></figure><h3 id="使用ack号确认网络包已收到" tabindex="-1"><a class="header-anchor" href="#使用ack号确认网络包已收到"><span>使用ACK号确认网络包已收到</span></a></h3><figure><img src="'+d+'" alt="Untitled" tabindex="0" loading="lazy"><figcaption>Untitled</figcaption></figure><figure><img src="'+c+'" alt="Untitled" tabindex="0" loading="lazy"><figcaption>Untitled</figcaption></figure><figure><img src="'+g+'" alt="Untitled" tabindex="0" loading="lazy"><figcaption>Untitled</figcaption></figure><h3 id="根据网络包平均往返时间调整ack-号等待时间" tabindex="-1"><a class="header-anchor" href="#根据网络包平均往返时间调整ack-号等待时间"><span>根据网络包平均往返时间调整ACK 号等待时间</span></a></h3><p>这个等待时间叫超时时间</p><h3 id="使用窗口有效管理ack号" tabindex="-1"><a class="header-anchor" href="#使用窗口有效管理ack号"><span>使用窗口有效管理ACK号</span></a></h3><p>能够接收的最大数据量称为窗口大小</p><figure><img src="'+h+'" alt="Untitled" tabindex="0" loading="lazy"><figcaption>Untitled</figcaption></figure><p>当接收方的TCP 收到包后，会先将数据存放到接收缓冲区中。</p><figure><img src="'+f+'" alt="Untitled" tabindex="0" loading="lazy"><figcaption>Untitled</figcaption></figure><h3 id="ack与窗口的合并" tabindex="-1"><a class="header-anchor" href="#ack与窗口的合并"><span>ACK与窗口的合并</span></a></h3><p>返回ACK号和更新窗口的时机？</p><p>其实没必要每次都向发送方更新窗口大小，因为只要发送方在每次发送数据时减掉已发送的数据长度就可以自行计算出当前窗口的剩余长度。</p><p><strong>接收方在发送ACK 号和窗口更新时，并不会马上把包发送出去，而是会等待一段时间</strong></p><p>因为ACK 号表示的是已收到的数据量，也就是说，它是告诉发送方目前已接收的数据的最后位置在哪里，因此当需要连续发送ACK 号时，只要发送最后一个ACK 号就可以了</p><h3 id="接受http响应消息" tabindex="-1"><a class="header-anchor" href="#接受http响应消息"><span>接受HTTP响应消息</span></a></h3><p>协议栈会检查收到的数据块和TCP 头部的内容，判断是否有数据丢失，如果没有问题则返回ACK 号</p><p>协议栈将数据块暂存到接收缓冲区中，并将数据块按顺序连接起来还原出原始的数据，最后将数据交给应用程序</p><p>协议栈会将接收到的数据复制到应用程序指定的内存地址中，然后将控制流程交回应用程序</p><h2 id="从服务器断开并删除嵌套字" tabindex="-1"><a class="header-anchor" href="#从服务器断开并删除嵌套字"><span>从服务器断开并删除嵌套字</span></a></h2><h3 id="数据发送完毕后断开连接" tabindex="-1"><a class="header-anchor" href="#数据发送完毕后断开连接"><span>数据发送完毕后断开连接</span></a></h3><figure><img src="'+u+'" alt="Untitled" tabindex="0" loading="lazy"><figcaption>Untitled</figcaption></figure><h3 id="删除套接字" tabindex="-1"><a class="header-anchor" href="#删除套接字"><span>删除套接字</span></a></h3><p>（1）客户端发送FIN （2）服务器返回ACK 号 （3）服务器发送FIN （4）客户端返回ACK 号</p><h3 id="数据收发操作小结" tabindex="-1"><a class="header-anchor" href="#数据收发操作小结"><span>数据收发操作小结</span></a></h3><p>创建套接字之后，客户端会向服务器发起连接操作。</p><p>客户端会生成一个SYN 为1 的TCP 包并发送给服务器</p><figure><img src="'+m+'" alt="Untitled" tabindex="0" loading="lazy"><figcaption>Untitled</figcaption></figure><h2 id="ip与以太网的包收发操" tabindex="-1"><a class="header-anchor" href="#ip与以太网的包收发操"><span>ip与以太网的包收发操</span></a></h2><h3 id="包的基本知识" tabindex="-1"><a class="header-anchor" href="#包的基本知识"><span>包的基本知识</span></a></h3><p>TCP 模块在执行连接、收发、断开等各阶段操作时，都需要委托IP 模块将数据封装成包发送给通信对象。</p><figure><img src="'+b+'" alt="Untitled" tabindex="0" loading="lazy"><figcaption>Untitled</figcaption></figure><figure><img src="'+U+'" alt="Untitled" tabindex="0" loading="lazy"><figcaption>Untitled</figcaption></figure><p>（1）路由器根据目标地址判断下一个路由器的位置 （2）集线器在子网中将网络包传输到下一个路由</p><p>（1）IP 协议根据目标地址判断下一个IP 转发设备的位置 （2）子网中的以太网协议将包传输到下一个转发设备</p><figure><img src="'+k+'" alt="Untitled" tabindex="0" loading="lazy"><figcaption>Untitled</figcaption></figure><h3 id="包收发操作概览" tabindex="-1"><a class="header-anchor" href="#包收发操作概览"><span>包收发操作概览</span></a></h3><figure><img src="'+x+'" alt="Untitled" tabindex="0" loading="lazy"><figcaption>Untitled</figcaption></figure><p><strong>包收发操作的起点是TCP 模块委托IP 模块发送包的操作</strong></p><p>这个委托的过程就是TCP 模块在数据块的前面加上TCP头部，然后整个传递给IP 模块，这部分就是网络包的内容。</p><p>收到委托后，IP 模块会将包的内容当作一整块数据，在前面加上包含制信息的头部</p><blockquote><p>IP 模块负责添加如下两个头部。 （1） MAC 头部：以太网用的头部，包含MAC 地址 （2） IP 头部：IP 用的头部，包含IP 地址</p></blockquote><h3 id="生成包含接收方ip地址的ip头部" tabindex="-1"><a class="header-anchor" href="#生成包含接收方ip地址的ip头部"><span>生成包含接收方IP地址的IP头部</span></a></h3><figure><img src="'+_+'" alt="Untitled" tabindex="0" loading="lazy"><figcaption>Untitled</figcaption></figure><h3 id="生成以太网用的mac头部" tabindex="-1"><a class="header-anchor" href="#生成以太网用的mac头部"><span>生成以太网用的MAC头部</span></a></h3><h3 id="通过arp查询目标路由器的mac地址" tabindex="-1"><a class="header-anchor" href="#通过arp查询目标路由器的mac地址"><span>通过ARP查询目标路由器的MAC地址</span></a></h3><p><strong>查询MAC 地址需要使用ARP。</strong></p><h3 id="以太网的基本知识" tabindex="-1"><a class="header-anchor" href="#以太网的基本知识"><span>以太网的基本知识</span></a></h3><p>以太网是一种为多台计算机能够彼此自由和廉价地相互通信而设计的通信技术</p><figure><img src="'+P+'" alt="Untitled" tabindex="0" loading="lazy"><figcaption>Untitled</figcaption></figure><h3 id="将ip包转换为电或光信号发送出去" tabindex="-1"><a class="header-anchor" href="#将ip包转换为电或光信号发送出去"><span>将IP包转换为电或光信号发送出去</span></a></h3><p>生成的网络包只是存放在内存中的一串数字信息，没有办法直接发送给对方。因此，我们需要将数字信息转换为电或光信号，才能在网线上传输，也就是说，这才是真正的数据发送过程。负责执行这一操作的是网卡</p><figure><img src="'+C+'" alt="Untitled" tabindex="0" loading="lazy"><figcaption>Untitled</figcaption></figure><p><strong>网卡的ROM 中保存着全世界唯一的MAC 地址，这是在生产网卡时写入的</strong></p><p><strong>网卡中保存的MAC 地址会由网卡驱动程序读取并分配给MAC模块。</strong></p><h3 id="给网络包加3个控制数据" tabindex="-1"><a class="header-anchor" href="#给网络包加3个控制数据"><span>给网络包加3个控制数据</span></a></h3><p>网卡驱动从IP 模块获取包之后，会将其复制到网卡内的缓冲区中，然后向MAC 模块发送发送包的命令</p><p>MAC 模块会将包从缓冲区中取出，并在开头加上报头和起始帧分界符，在末尾加上用于检测错误的帧校验序列</p><figure><img src="'+y+'" alt="Untitled" tabindex="0" loading="lazy"><figcaption>Untitled</figcaption></figure><figure><img src="'+A+'" alt="Untitled" tabindex="0" loading="lazy"><figcaption>Untitled</figcaption></figure><p>用电信号来表达数字信息时，我们需要让0 和1 两种比特分别对应特定的电压和电流</p><p>在数据信号之外再发送一组用来区分比特间隔的时钟信号</p><figure><img src="'+T+'" alt="Untitled" tabindex="0" loading="lazy"><figcaption>Untitled</figcaption></figure><h2 id="向集线器发送网络包" tabindex="-1"><a class="header-anchor" href="#向集线器发送网络包"><span>向集线器发送网络包</span></a></h2><figure><img src="'+v+'" alt="Untitled" tabindex="0" loading="lazy"><figcaption>Untitled</figcaption></figure><p><strong>网卡的MAC 模块生成通用信号，然后由PHY（MAU）模块转换成可在网线中传输的格式，并通过网线发送出去。</strong></p>',94)]))}const D=i(I,[["render",z],["__file","how-networks-work-part2.html.vue"]]),M=JSON.parse('{"path":"/network/how-networks-work-part2.html","title":"电信号传输TCP/IP数据","lang":"en-US","frontmatter":{"title":"电信号传输TCP/IP数据","category":["Network"],"tag":["网络是怎样连接的"],"date":"2021-11-15T00:00:00.000Z","description":"创建嵌套字 协议栈的内部结构 浏览器、邮件等一般应用程序收发数据时用TCP； DNS 查询等收发较短的控制数据时用UDP。 UntitledUntitled 套接字的实体就是通信控制信息 在协议栈内部有一块用于存放控制信息的内存空间，这里记录了用于控制通信操作的控制信息，例如通信对象的IP 地址、端口号、通信操作的进行状态等 协议栈是根据套接字中记录的...","head":[["meta",{"property":"og:url","content":"https://luxiag.github.io/luxiag/blog/network/how-networks-work-part2.html"}],["meta",{"property":"og:title","content":"电信号传输TCP/IP数据"}],["meta",{"property":"og:description","content":"创建嵌套字 协议栈的内部结构 浏览器、邮件等一般应用程序收发数据时用TCP； DNS 查询等收发较短的控制数据时用UDP。 UntitledUntitled 套接字的实体就是通信控制信息 在协议栈内部有一块用于存放控制信息的内存空间，这里记录了用于控制通信操作的控制信息，例如通信对象的IP 地址、端口号、通信操作的进行状态等 协议栈是根据套接字中记录的..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2023-01-08T13:32:53.000Z"}],["meta",{"property":"article:tag","content":"网络是怎样连接的"}],["meta",{"property":"article:published_time","content":"2021-11-15T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-01-08T13:32:53.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"电信号传输TCP/IP数据\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2021-11-15T00:00:00.000Z\\",\\"dateModified\\":\\"2023-01-08T13:32:53.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"luxiag\\",\\"url\\":\\"https://luxiag.github.io/luxiag\\"}]}"]]},"headers":[{"level":2,"title":"创建嵌套字","slug":"创建嵌套字","link":"#创建嵌套字","children":[{"level":3,"title":"协议栈的内部结构","slug":"协议栈的内部结构","link":"#协议栈的内部结构","children":[]},{"level":3,"title":"套接字的实体就是通信控制信息","slug":"套接字的实体就是通信控制信息","link":"#套接字的实体就是通信控制信息","children":[]},{"level":3,"title":"调用socket时的操作","slug":"调用socket时的操作","link":"#调用socket时的操作","children":[]}]},{"level":2,"title":"连接服务器","slug":"连接服务器","link":"#连接服务器","children":[{"level":3,"title":"保存控制信息的头部","slug":"保存控制信息的头部","link":"#保存控制信息的头部","children":[]},{"level":3,"title":"连接操作的实际过程","slug":"连接操作的实际过程","link":"#连接操作的实际过程","children":[]}]},{"level":2,"title":"收发数据","slug":"收发数据","link":"#收发数据","children":[{"level":3,"title":"将HTTP 请求消息交给协议栈","slug":"将http-请求消息交给协议栈","link":"#将http-请求消息交给协议栈","children":[]},{"level":3,"title":"对较大的数据进行拆分","slug":"对较大的数据进行拆分","link":"#对较大的数据进行拆分","children":[]},{"level":3,"title":"使用ACK号确认网络包已收到","slug":"使用ack号确认网络包已收到","link":"#使用ack号确认网络包已收到","children":[]},{"level":3,"title":"根据网络包平均往返时间调整ACK 号等待时间","slug":"根据网络包平均往返时间调整ack-号等待时间","link":"#根据网络包平均往返时间调整ack-号等待时间","children":[]},{"level":3,"title":"使用窗口有效管理ACK号","slug":"使用窗口有效管理ack号","link":"#使用窗口有效管理ack号","children":[]},{"level":3,"title":"ACK与窗口的合并","slug":"ack与窗口的合并","link":"#ack与窗口的合并","children":[]},{"level":3,"title":"接受HTTP响应消息","slug":"接受http响应消息","link":"#接受http响应消息","children":[]}]},{"level":2,"title":"从服务器断开并删除嵌套字","slug":"从服务器断开并删除嵌套字","link":"#从服务器断开并删除嵌套字","children":[{"level":3,"title":"数据发送完毕后断开连接","slug":"数据发送完毕后断开连接","link":"#数据发送完毕后断开连接","children":[]},{"level":3,"title":"删除套接字","slug":"删除套接字","link":"#删除套接字","children":[]},{"level":3,"title":"数据收发操作小结","slug":"数据收发操作小结","link":"#数据收发操作小结","children":[]}]},{"level":2,"title":"ip与以太网的包收发操","slug":"ip与以太网的包收发操","link":"#ip与以太网的包收发操","children":[{"level":3,"title":"包的基本知识","slug":"包的基本知识","link":"#包的基本知识","children":[]},{"level":3,"title":"包收发操作概览","slug":"包收发操作概览","link":"#包收发操作概览","children":[]},{"level":3,"title":"生成包含接收方IP地址的IP头部","slug":"生成包含接收方ip地址的ip头部","link":"#生成包含接收方ip地址的ip头部","children":[]},{"level":3,"title":"生成以太网用的MAC头部","slug":"生成以太网用的mac头部","link":"#生成以太网用的mac头部","children":[]},{"level":3,"title":"通过ARP查询目标路由器的MAC地址","slug":"通过arp查询目标路由器的mac地址","link":"#通过arp查询目标路由器的mac地址","children":[]},{"level":3,"title":"以太网的基本知识","slug":"以太网的基本知识","link":"#以太网的基本知识","children":[]},{"level":3,"title":"将IP包转换为电或光信号发送出去","slug":"将ip包转换为电或光信号发送出去","link":"#将ip包转换为电或光信号发送出去","children":[]},{"level":3,"title":"给网络包加3个控制数据","slug":"给网络包加3个控制数据","link":"#给网络包加3个控制数据","children":[]}]},{"level":2,"title":"向集线器发送网络包","slug":"向集线器发送网络包","link":"#向集线器发送网络包","children":[]}],"git":{"createdTime":1673184773000,"updatedTime":1673184773000,"contributors":[{"name":"luxiag","email":"luxiag@qq.com","commits":1}]},"readingTime":{"minutes":6.06,"words":1819},"filePathRelative":"network/how-networks-work-part2.md","localizedDate":"November 15, 2021","excerpt":"<h2>创建嵌套字</h2>\\n<h3>协议栈的内部结构</h3>\\n<p><strong>浏览器、邮件等一般应用程序收发数据时用TCP；\\nDNS 查询等收发较短的控制数据时用UDP。</strong></p>","autoDesc":true}');export{D as comp,M as data};
