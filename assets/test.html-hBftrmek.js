import{_ as n,c as a,a as e,o as l}from"./app-sHEEJrqx.js";const t={};function o(p,s){return l(),a("div",null,s[0]||(s[0]=[e(`<h2 id="单元测试" tabindex="-1"><a class="header-anchor" href="#单元测试"><span>单元测试</span></a></h2><p>在计算机编程中，单元测试（英语：Unit Testing）又称为模块测试 [来源请求] ，是针对程序模块（软件设计的最小单位）来进行正确性检验的测试工作。</p><h3 id="意义" tabindex="-1"><a class="header-anchor" href="#意义"><span>意义</span></a></h3><ul><li>避免线上 bug,问题可以很快的被发现</li><li>提高代码的质量,一段编写良好的代码一定是“可方便测试”的</li><li>快速定位bug，每个测试用例可以关联某个模块</li><li>放心重构，加功能，再也不用担心“把代码改坏&#39;</li><li>单元测试的质量也占据了评判代码质量的极大比重</li></ul><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> assert </span><span style="color:#FF79C6;">=</span><span style="color:#50FA7B;"> require</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">assert</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">function</span><span style="color:#50FA7B;"> addTwo</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">a</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#FF79C6;">    return</span><span style="color:#F8F8F2;"> a </span><span style="color:#FF79C6;">+</span><span style="color:#BD93F9;">2</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">function</span><span style="color:#50FA7B;"> testAddTow</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#FF79C6;">     const</span><span style="color:#F8F8F2;"> x </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;">5</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#FF79C6;">     const</span><span style="color:#F8F8F2;"> y1 </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> x </span><span style="color:#FF79C6;">+</span><span style="color:#BD93F9;">2</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#FF79C6;">     const</span><span style="color:#F8F8F2;"> y2 </span><span style="color:#FF79C6;">=</span><span style="color:#50FA7B;"> addTwo</span><span style="color:#F8F8F2;">(x);</span></span>
<span class="line"><span style="color:#FF79C6;">     try</span><span style="color:#F8F8F2;">{</span></span>
<span class="line"><span style="color:#F8F8F2;">        assert.</span><span style="color:#50FA7B;">equal</span><span style="color:#F8F8F2;">(y1,y2)</span></span>
<span class="line"><span style="color:#F8F8F2;">     }</span><span style="color:#FF79C6;">catch</span><span style="color:#F8F8F2;">(err) {</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span></span>
<span class="line"><span style="color:#F8F8F2;">     }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="mocha" tabindex="-1"><a class="header-anchor" href="#mocha"><span>Mocha</span></a></h2>`,6)]))}const c=n(t,[["render",o],["__file","test.html.vue"]]),r=JSON.parse('{"path":"/nodejs/test.html","title":"NodeJS中的测试","lang":"en-US","frontmatter":{"title":"NodeJS中的测试","description":"单元测试 在计算机编程中，单元测试（英语：Unit Testing）又称为模块测试 [来源请求] ，是针对程序模块（软件设计的最小单位）来进行正确性检验的测试工作。 意义 避免线上 bug,问题可以很快的被发现 提高代码的质量,一段编写良好的代码一定是“可方便测试”的 快速定位bug，每个测试用例可以关联某个模块 放心重构，加功能，再也不用担心“把代码...","head":[["meta",{"property":"og:url","content":"https://luxiag.github.io/luxiag/blog/nodejs/test.html"}],["meta",{"property":"og:title","content":"NodeJS中的测试"}],["meta",{"property":"og:description","content":"单元测试 在计算机编程中，单元测试（英语：Unit Testing）又称为模块测试 [来源请求] ，是针对程序模块（软件设计的最小单位）来进行正确性检验的测试工作。 意义 避免线上 bug,问题可以很快的被发现 提高代码的质量,一段编写良好的代码一定是“可方便测试”的 快速定位bug，每个测试用例可以关联某个模块 放心重构，加功能，再也不用担心“把代码..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2023-06-21T03:33:01.000Z"}],["meta",{"property":"article:modified_time","content":"2023-06-21T03:33:01.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"NodeJS中的测试\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-06-21T03:33:01.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"luxiag\\",\\"url\\":\\"https://luxiag.github.io/luxiag\\"}]}"]]},"headers":[{"level":2,"title":"单元测试","slug":"单元测试","link":"#单元测试","children":[{"level":3,"title":"意义","slug":"意义","link":"#意义","children":[]}]},{"level":2,"title":"Mocha","slug":"mocha","link":"#mocha","children":[]}],"git":{"createdTime":1687318381000,"updatedTime":1687318381000,"contributors":[{"name":"卢祥","email":"example@qq.com","commits":1}]},"readingTime":{"minutes":0.66,"words":197},"filePathRelative":"nodejs/test.md","localizedDate":"June 21, 2023","excerpt":"<h2>单元测试</h2>\\n<p>在计算机编程中，单元测试（英语：Unit Testing）又称为模块测试 [来源请求] ，是针对程序模块（软件设计的最小单位）来进行正确性检验的测试工作。</p>\\n<h3>意义</h3>","autoDesc":true}');export{c as comp,r as data};
