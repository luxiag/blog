import{_ as n,c as a,b as l,o as e}from"./app-Bcs0tJax.js";const p="/blog/assets/1680123400817160800-CSC3f_XS.png",o={};function c(i,s){return e(),a("div",null,s[0]||(s[0]=[l(`<h2 id="开始" tabindex="-1"><a class="header-anchor" href="#开始"><span>开始</span></a></h2><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">import</span><span style="color:#F8F8F2;"> Vue </span><span style="color:#FF79C6;">from</span><span style="color:#E9F284;"> &quot;</span><span style="color:#F1FA8C;">vue</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#FF79C6;">import</span><span style="color:#F8F8F2;"> App </span><span style="color:#FF79C6;">from</span><span style="color:#E9F284;"> &quot;</span><span style="color:#F1FA8C;">./App.vue</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;font-weight:bold;">new</span><span style="color:#50FA7B;"> Vue</span><span style="color:#F8F8F2;">({</span></span>
<span class="line"><span style="color:#F8F8F2;">  el</span><span style="color:#FF79C6;">:</span><span style="color:#E9F284;"> &quot;</span><span style="color:#F1FA8C;">#app</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#6272A4;">  // h =&gt; createElement()</span></span>
<span class="line"><span style="color:#6272A4;">  // _init =&gt; vm._renderProxy = vm</span></span>
<span class="line"><span style="color:#6272A4;">  //  render.call(vm._renderProxy,vm.$createElement)</span></span>
<span class="line"><span style="color:#50FA7B;">  render</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> (</span><span style="color:#FFB86C;font-style:italic;">h</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#50FA7B;"> h</span><span style="color:#F8F8F2;">(App),</span></span>
<span class="line"><span style="color:#F8F8F2;">});</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="vue-loader" tabindex="-1"><a class="header-anchor" href="#vue-loader"><span>vue-loader</span></a></h3><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">import</span><span style="color:#F8F8F2;"> App </span><span style="color:#FF79C6;">from</span><span style="color:#E9F284;"> &quot;</span><span style="color:#F1FA8C;">./App.vue</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(App, </span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">App</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+p+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="entry" tabindex="-1"><a class="header-anchor" href="#entry"><span>entry</span></a></h3><details class="hint-container details"><summary>Vue 入口</summary><p><code>platforms/web/entry-runtime.ts</code></p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">import</span><span style="color:#F8F8F2;"> Vue </span><span style="color:#FF79C6;">from</span><span style="color:#E9F284;"> &quot;</span><span style="color:#F1FA8C;">./runtime/index</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#FF79C6;">import</span><span style="color:#BD93F9;"> *</span><span style="color:#FF79C6;"> as</span><span style="color:#F8F8F2;"> vca </span><span style="color:#FF79C6;">from</span><span style="color:#E9F284;"> &quot;</span><span style="color:#F1FA8C;">v3</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#FF79C6;">import</span><span style="color:#F8F8F2;"> { extend } </span><span style="color:#FF79C6;">from</span><span style="color:#E9F284;"> &quot;</span><span style="color:#F1FA8C;">shared/util</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#50FA7B;">extend</span><span style="color:#F8F8F2;">(Vue, vca);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">export</span><span style="color:#FF79C6;"> default</span><span style="color:#F8F8F2;"> Vue;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><p><code>platforms/runtime/index</code></p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">import</span><span style="color:#F8F8F2;"> Vue </span><span style="color:#FF79C6;">from</span><span style="color:#E9F284;"> &quot;</span><span style="color:#F1FA8C;">core/index</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#FF79C6;">import</span><span style="color:#F8F8F2;"> config </span><span style="color:#FF79C6;">from</span><span style="color:#E9F284;"> &quot;</span><span style="color:#F1FA8C;">core/config</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#6272A4;">// 省略</span></span>
<span class="line"><span style="color:#FF79C6;">import</span><span style="color:#F8F8F2;"> platformDirectives </span><span style="color:#FF79C6;">from</span><span style="color:#E9F284;"> &quot;</span><span style="color:#F1FA8C;">./directives/index</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#FF79C6;">import</span><span style="color:#F8F8F2;"> platformComponents </span><span style="color:#FF79C6;">from</span><span style="color:#E9F284;"> &quot;</span><span style="color:#F1FA8C;">./components/index</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#6272A4;">//这里都是web平台相关的一些配置</span></span>
<span class="line"><span style="color:#6272A4;">// install platform specific utils</span></span>
<span class="line"><span style="color:#F8F8F2;">Vue.config.mustUseProp </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> mustUseProp;</span></span>
<span class="line"><span style="color:#6272A4;">// 省略</span></span>
<span class="line"><span style="color:#6272A4;">// 注册指令和组件，这里的 directives 和 components 也是web平台上的，是内置的指令和组件，其实很少</span></span>
<span class="line"><span style="color:#6272A4;">// install platform runtime directives &amp; components</span></span>
<span class="line"><span style="color:#50FA7B;">extend</span><span style="color:#F8F8F2;">(Vue.options.directives, platformDirectives); </span><span style="color:#6272A4;">// 内置的directives只有两个，\`v-show\` 和 \`v-model\`</span></span>
<span class="line"><span style="color:#50FA7B;">extend</span><span style="color:#F8F8F2;">(Vue.options.components, platformComponents); </span><span style="color:#6272A4;">// 内置的组件也很少，只有\`keepAlive\`, \`transition\`和 \`transitionGroup\`</span></span>
<span class="line"><span style="color:#6272A4;">// 如果不是浏览器，就不进行 \`patch\` 操作了</span></span>
<span class="line"><span style="color:#6272A4;">// install platform patch function</span></span>
<span class="line"><span style="color:#8BE9FD;font-style:italic;">Vue</span><span style="color:#F8F8F2;">.prototype.__patch__ </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> inBrowser </span><span style="color:#FF79C6;">?</span><span style="color:#F8F8F2;"> patch </span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> noop;</span></span>
<span class="line"><span style="color:#6272A4;">// 如果有 \`el\` 且在浏览器中，则进行 \`mount\` 操作</span></span>
<span class="line"><span style="color:#6272A4;">// public mount method</span></span>
<span class="line"><span style="color:#8BE9FD;font-style:italic;">Vue</span><span style="color:#F8F8F2;">.prototype.</span><span style="color:#50FA7B;">$mount</span><span style="color:#FF79C6;"> =</span><span style="color:#FF79C6;"> function</span><span style="color:#F8F8F2;"> (</span></span>
<span class="line"><span style="color:#FFB86C;font-style:italic;">  el</span><span style="color:#FF79C6;">?:</span><span style="color:#8BE9FD;font-style:italic;"> string</span><span style="color:#FF79C6;"> |</span><span style="color:#8BE9FD;font-style:italic;"> Element</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#FFB86C;font-style:italic;">  hydrating</span><span style="color:#FF79C6;">?:</span><span style="color:#8BE9FD;font-style:italic;"> boolean</span></span>
<span class="line"><span style="color:#F8F8F2;">)</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> Component</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  el </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> el </span><span style="color:#FF79C6;">&amp;&amp;</span><span style="color:#F8F8F2;"> inBrowser </span><span style="color:#FF79C6;">?</span><span style="color:#50FA7B;"> query</span><span style="color:#F8F8F2;">(el) </span><span style="color:#FF79C6;">:</span><span style="color:#BD93F9;"> undefined</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#FF79C6;">  return</span><span style="color:#50FA7B;"> mountComponent</span><span style="color:#F8F8F2;">(</span><span style="color:#BD93F9;font-style:italic;">this</span><span style="color:#F8F8F2;">, el, hydrating);</span></span>
<span class="line"><span style="color:#F8F8F2;">};</span></span>
<span class="line"><span style="color:#6272A4;">// 省略devtool相关代码</span></span>
<span class="line"><span style="color:#FF79C6;">export</span><span style="color:#FF79C6;"> default</span><span style="color:#F8F8F2;"> Vue;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h3 id="vue" tabindex="-1"><a class="header-anchor" href="#vue"><span>vue</span></a></h3><p><code>core/index</code></p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">import</span><span style="color:#F8F8F2;"> Vue </span><span style="color:#FF79C6;">from</span><span style="color:#E9F284;"> &quot;</span><span style="color:#F1FA8C;">./instance/index</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#FF79C6;">import</span><span style="color:#F8F8F2;"> { initGlobalAPI } </span><span style="color:#FF79C6;">from</span><span style="color:#E9F284;"> &quot;</span><span style="color:#F1FA8C;">./global-api/index</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#50FA7B;">initGlobalAPI</span><span style="color:#F8F8F2;">(Vue); </span><span style="color:#6272A4;">// 这个函数添加了一些类方法属性</span></span>
<span class="line"><span style="color:#6272A4;">// 省略一些ssr相关的内容</span></span>
<span class="line"><span style="color:#6272A4;">// 省略</span></span>
<span class="line"><span style="color:#F8F8F2;">Vue.version </span><span style="color:#FF79C6;">=</span><span style="color:#E9F284;"> &quot;</span><span style="color:#F1FA8C;">__VERSION__</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#FF79C6;">export</span><span style="color:#FF79C6;"> default</span><span style="color:#F8F8F2;"> Vue;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="initglobalapi" tabindex="-1"><a class="header-anchor" href="#initglobalapi"><span>initGlobalAPI</span></a></h3><details class="hint-container details"><summary>initGlobalAPI</summary><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">export</span><span style="color:#FF79C6;"> function</span><span style="color:#50FA7B;"> initGlobalAPI</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">Vue</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> GlobalAPI</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#6272A4;">  // config</span></span>
<span class="line"><span style="color:#FF79C6;">  const</span><span style="color:#F8F8F2;"> configDef </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> {};</span></span>
<span class="line"><span style="color:#F8F8F2;">  configDef.</span><span style="color:#50FA7B;">get</span><span style="color:#FF79C6;"> =</span><span style="color:#F8F8F2;"> () </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> config;</span></span>
<span class="line"><span style="color:#6272A4;">  // 省略</span></span>
<span class="line"><span style="color:#6272A4;">  // 这里添加了一个\`Vue.config\` 对象，至于在哪里会用到，后面会讲</span></span>
<span class="line"><span style="color:#F8F8F2;">  Object.</span><span style="color:#50FA7B;">defineProperty</span><span style="color:#F8F8F2;">(Vue, </span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">config</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">, configDef);</span></span>
<span class="line"><span style="color:#6272A4;">  // exposed util methods.</span></span>
<span class="line"><span style="color:#6272A4;">  // NOTE: these are not considered part of the public API - avoid relying on</span></span>
<span class="line"><span style="color:#6272A4;">  // them unless you are aware of the risk.</span></span>
<span class="line"><span style="color:#F8F8F2;">  Vue.util </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">    warn,</span></span>
<span class="line"><span style="color:#F8F8F2;">    extend,</span></span>
<span class="line"><span style="color:#F8F8F2;">    mergeOptions,</span></span>
<span class="line"><span style="color:#F8F8F2;">    defineReactive,</span></span>
<span class="line"><span style="color:#F8F8F2;">  };</span></span>
<span class="line"><span style="color:#6272A4;">  //一般我们用实例方法而不是这三个类方法</span></span>
<span class="line"><span style="color:#F8F8F2;">  Vue.set </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> set;</span></span>
<span class="line"><span style="color:#F8F8F2;">  Vue.delete </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> del;</span></span>
<span class="line"><span style="color:#F8F8F2;">  Vue.nextTick </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> nextTick;</span></span>
<span class="line"><span style="color:#6272A4;">  // 注意这里，循环出来的结果其实是三个 \`components\`,\`directives\`, \`filters\`，这里先创建了空对象作为容器，后面如果有对应的插件就会放进来。</span></span>
<span class="line"><span style="color:#F8F8F2;">  Vue.options </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> Object.</span><span style="color:#50FA7B;">create</span><span style="color:#F8F8F2;">(</span><span style="color:#BD93F9;">null</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#BD93F9;">  ASSET_TYPES</span><span style="color:#F8F8F2;">.</span><span style="color:#50FA7B;">forEach</span><span style="color:#F8F8F2;">((</span><span style="color:#FFB86C;font-style:italic;">type</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">    Vue.options[type </span><span style="color:#FF79C6;">+</span><span style="color:#E9F284;"> &quot;</span><span style="color:#F1FA8C;">s</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">] </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> Object.</span><span style="color:#50FA7B;">create</span><span style="color:#F8F8F2;">(</span><span style="color:#BD93F9;">null</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">  });</span></span>
<span class="line"><span style="color:#6272A4;">  // this is used to identify the &quot;base&quot; constructor to extend all plain-object</span></span>
<span class="line"><span style="color:#6272A4;">  // components with in Weex&#39;s multi-instance scenarios.</span></span>
<span class="line"><span style="color:#F8F8F2;">  Vue.options._base </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> Vue;</span></span>
<span class="line"><span style="color:#6272A4;">  // 内置组件只有一个，就是 \`keepAlive\`</span></span>
<span class="line"><span style="color:#50FA7B;">  extend</span><span style="color:#F8F8F2;">(Vue.options.components, builtInComponents);</span></span>
<span class="line"><span style="color:#50FA7B;">  initUse</span><span style="color:#F8F8F2;">(Vue); </span><span style="color:#6272A4;">// 添加了 Vue.use 方法，可以注册插件</span></span>
<span class="line"><span style="color:#50FA7B;">  initMixin</span><span style="color:#F8F8F2;">(Vue); </span><span style="color:#6272A4;">//添加了Vue.mixin 方法</span></span>
<span class="line"><span style="color:#50FA7B;">  initExtend</span><span style="color:#F8F8F2;">(Vue); </span><span style="color:#6272A4;">// 添加了 Vue.extend 方法</span></span>
<span class="line"><span style="color:#6272A4;">  // 这一步是注册了 \`Vue.component\` ,\`Vue.directive\` 和 \`Vue.filter\` 三个方法，上面不是有 \`Vue.options.components\` 等空对象吗，这三个方法的作用就是把注册的组件放入对应的容器中。</span></span>
<span class="line"><span style="color:#50FA7B;">  initAssetRegisters</span><span style="color:#F8F8F2;">(Vue);</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h3 id="instance" tabindex="-1"><a class="header-anchor" href="#instance"><span>instance</span></a></h3><details class="hint-container details"><summary>instance</summary><p><code>core/instance/index</code></p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#6272A4;">//  省略import语句</span></span>
<span class="line"><span style="color:#FF79C6;">function</span><span style="color:#50FA7B;"> Vue</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">options</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#FF79C6;">  if</span><span style="color:#F8F8F2;"> (process.env.</span><span style="color:#BD93F9;">NODE_ENV</span><span style="color:#FF79C6;"> !==</span><span style="color:#E9F284;"> &quot;</span><span style="color:#F1FA8C;">production</span><span style="color:#E9F284;">&quot;</span><span style="color:#FF79C6;"> &amp;&amp;</span><span style="color:#FF79C6;"> !</span><span style="color:#F8F8F2;">(</span><span style="color:#BD93F9;font-style:italic;">this</span><span style="color:#FF79C6;"> instanceof</span><span style="color:#8BE9FD;font-style:italic;"> Vue</span><span style="color:#F8F8F2;">)) {</span></span>
<span class="line"><span style="color:#50FA7B;">    warn</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">Vue is a constructor and should be called with the \`new\` keyword</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#BD93F9;font-style:italic;">  this</span><span style="color:#F8F8F2;">.</span><span style="color:#50FA7B;">_init</span><span style="color:#F8F8F2;">(options);</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#FF79C6;">import</span><span style="color:#F8F8F2;"> { initMixin } </span><span style="color:#FF79C6;">from</span><span style="color:#E9F284;"> &quot;</span><span style="color:#F1FA8C;">./init</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#FF79C6;">import</span><span style="color:#F8F8F2;"> { stateMixin } </span><span style="color:#FF79C6;">from</span><span style="color:#E9F284;"> &quot;</span><span style="color:#F1FA8C;">./state</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#FF79C6;">import</span><span style="color:#F8F8F2;"> { renderMixin } </span><span style="color:#FF79C6;">from</span><span style="color:#E9F284;"> &quot;</span><span style="color:#F1FA8C;">./render</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#FF79C6;">import</span><span style="color:#F8F8F2;"> { eventsMixin } </span><span style="color:#FF79C6;">from</span><span style="color:#E9F284;"> &quot;</span><span style="color:#F1FA8C;">./events</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#FF79C6;">import</span><span style="color:#F8F8F2;"> { lifecycleMixin } </span><span style="color:#FF79C6;">from</span><span style="color:#E9F284;"> &quot;</span><span style="color:#F1FA8C;">./lifecycle</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#6272A4;">//添加 _init方法</span></span>
<span class="line"><span style="color:#50FA7B;">initMixin</span><span style="color:#F8F8F2;">(Vue);</span></span>
<span class="line"><span style="color:#6272A4;">//添加了 $data,$props,$watch,$set,$delete 几个属性和方法</span></span>
<span class="line"><span style="color:#50FA7B;">stateMixin</span><span style="color:#F8F8F2;">(Vue);</span></span>
<span class="line"><span style="color:#6272A4;">//添加了 $on,$off,$once,$emit 三个方法</span></span>
<span class="line"><span style="color:#50FA7B;">eventsMixin</span><span style="color:#F8F8F2;">(Vue);</span></span>
<span class="line"><span style="color:#6272A4;">//添加了 _update, $forceUpdate, $destroy 三个方法</span></span>
<span class="line"><span style="color:#50FA7B;">lifecycleMixin</span><span style="color:#F8F8F2;">(Vue);</span></span>
<span class="line"><span style="color:#6272A4;">//添加了 $nextTick 和 _render 两个方法以及一大堆renderHelpers</span></span>
<span class="line"><span style="color:#50FA7B;">renderMixin</span><span style="color:#F8F8F2;">(Vue);</span></span>
<span class="line"><span style="color:#FF79C6;">export</span><span style="color:#FF79C6;"> default</span><span style="color:#F8F8F2;"> Vue;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>执行方法后添加的属性</code></p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#6272A4;">//构造函数</span></span>
<span class="line"><span style="color:#FF79C6;">function</span><span style="color:#50FA7B;"> Vue</span><span style="color:#F8F8F2;"> () {</span></span>
<span class="line"><span style="color:#BD93F9;font-style:italic;">  this</span><span style="color:#F8F8F2;">.</span><span style="color:#50FA7B;">_init</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#6272A4;">//全局config对象，我们几乎不会用到</span></span>
<span class="line"><span style="color:#F8F8F2;">Vue.config </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  keyCodes,</span></span>
<span class="line"><span style="color:#F8F8F2;">  _lifecycleHooks</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> [</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">beforeCreate</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">created</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#FF79C6;">...</span><span style="color:#F8F8F2;">]</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#6272A4;">// 默认的options配置，我们每个组件都会继承这个配置。</span></span>
<span class="line"><span style="color:#F8F8F2;">Vue.options </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  beforeCreate, </span><span style="color:#6272A4;">// 比如 vue-router 就会注册这个回调，因此会每一个组件继承</span></span>
<span class="line"><span style="color:#F8F8F2;">  components, </span><span style="color:#6272A4;">// 前面提到了，默认组件有三个 \`KeepAlive\`,\`transition\`, \`transitionGroup\`，这里注册的组件就是全局组件，因为任何一个组件中不用声明就能用了。所以全局组件的原理就是这么简单</span></span>
<span class="line"><span style="color:#F8F8F2;">  directives, </span><span style="color:#6272A4;">// 默认只有 \`v-show\` 和 \`v-model\`</span></span>
<span class="line"><span style="color:#F8F8F2;">  filters </span><span style="color:#6272A4;">// 不推荐使用了</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#6272A4;">//一些全局方法</span></span>
<span class="line"><span style="color:#F8F8F2;">Vue.use </span><span style="color:#6272A4;">// 注册插件</span></span>
<span class="line"><span style="color:#F8F8F2;">Vue.component </span><span style="color:#6272A4;">// 注册组件</span></span>
<span class="line"><span style="color:#F8F8F2;">Vue.directive </span><span style="color:#6272A4;">// 注册指令</span></span>
<span class="line"><span style="color:#F8F8F2;">Vue.nextTick </span><span style="color:#6272A4;">//下一个tick执行函数</span></span>
<span class="line"><span style="color:#F8F8F2;">Vue.set</span><span style="color:#FF79C6;">/delete</span><span style="color:#6272A4;"> // 数据的修改操作</span></span>
<span class="line"><span style="color:#F8F8F2;">Vue.mixin </span><span style="color:#6272A4;">// 混入mixin用的</span></span>
<span class="line"><span style="color:#6272A4;">//Vue.prototype 上有几种不同作用的方法</span></span>
<span class="line"><span style="color:#6272A4;">//由initMixin 添加的 \`_init\` 方法，是Vue实例初始化的入口方法，会调用其他的功能初始话函数</span></span>
<span class="line"><span style="color:#8BE9FD;font-style:italic;">Vue</span><span style="color:#F8F8F2;">.prototype._init</span></span>
<span class="line"><span style="color:#6272A4;">// 由 initState 添加的三个用来进行数据操作的方法</span></span>
<span class="line"><span style="color:#8BE9FD;font-style:italic;">Vue</span><span style="color:#F8F8F2;">.prototype.$data</span></span>
<span class="line"><span style="color:#8BE9FD;font-style:italic;">Vue</span><span style="color:#F8F8F2;">.prototype.$props</span></span>
<span class="line"><span style="color:#8BE9FD;font-style:italic;">Vue</span><span style="color:#F8F8F2;">.prototype.$watch</span></span>
<span class="line"><span style="color:#6272A4;">// 由initEvents添加的事件方法</span></span>
<span class="line"><span style="color:#8BE9FD;font-style:italic;">Vue</span><span style="color:#F8F8F2;">.prototype.$on</span></span>
<span class="line"><span style="color:#8BE9FD;font-style:italic;">Vue</span><span style="color:#F8F8F2;">.prototype.$off</span></span>
<span class="line"><span style="color:#8BE9FD;font-style:italic;">Vue</span><span style="color:#F8F8F2;">.prototype.$one</span></span>
<span class="line"><span style="color:#8BE9FD;font-style:italic;">Vue</span><span style="color:#F8F8F2;">.prototype.$emit</span></span>
<span class="line"><span style="color:#6272A4;">// 由 lifecycle添加的生命周期相关的方法</span></span>
<span class="line"><span style="color:#8BE9FD;font-style:italic;">Vue</span><span style="color:#F8F8F2;">.prototype._update</span></span>
<span class="line"><span style="color:#8BE9FD;font-style:italic;">Vue</span><span style="color:#F8F8F2;">.prototype.$forceUpdate</span></span>
<span class="line"><span style="color:#8BE9FD;font-style:italic;">Vue</span><span style="color:#F8F8F2;">.prototype.$destroy</span></span>
<span class="line"><span style="color:#6272A4;">//在 platform 中添加的生命周期方法</span></span>
<span class="line"><span style="color:#8BE9FD;font-style:italic;">Vue</span><span style="color:#F8F8F2;">.prototype.$mount</span></span>
<span class="line"><span style="color:#6272A4;">// 由renderMixin添加的\`$nextTick\` 和 \`_render\` 以及一堆renderHelper</span></span>
<span class="line"><span style="color:#8BE9FD;font-style:italic;">Vue</span><span style="color:#F8F8F2;">.prototype.$nextTick</span></span>
<span class="line"><span style="color:#8BE9FD;font-style:italic;">Vue</span><span style="color:#F8F8F2;">.prototype._render</span></span>
<span class="line"><span style="color:#8BE9FD;font-style:italic;">Vue</span><span style="color:#F8F8F2;">.prototype._b</span></span>
<span class="line"><span style="color:#8BE9FD;font-style:italic;">Vue</span><span style="color:#F8F8F2;">.prototype._e</span></span>
<span class="line"><span style="color:#6272A4;">//...</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h2 id="init" tabindex="-1"><a class="header-anchor" href="#init"><span>_init</span></a></h2><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">function</span><span style="color:#50FA7B;"> Vue</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">options</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#BD93F9;font-style:italic;">  this</span><span style="color:#F8F8F2;">.</span><span style="color:#50FA7B;">_init</span><span style="color:#F8F8F2;">(options);</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><details class="hint-container details"><summary>Vue._init()</summary><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#8BE9FD;font-style:italic;">  Vue</span><span style="color:#F8F8F2;">.prototype.</span><span style="color:#50FA7B;">_init</span><span style="color:#FF79C6;"> =</span><span style="color:#FF79C6;"> function</span><span style="color:#F8F8F2;"> (</span><span style="color:#FFB86C;font-style:italic;">options</span><span style="color:#FF79C6;">?:</span><span style="color:#8BE9FD;font-style:italic;"> Record</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#8BE9FD;font-style:italic;">string</span><span style="color:#F8F8F2;">, </span><span style="color:#8BE9FD;font-style:italic;">any</span><span style="color:#F8F8F2;">&gt;) {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">    // vm this 的别名</span></span>
<span class="line"><span style="color:#FF79C6;">    const</span><span style="color:#F8F8F2;"> vm</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> Component</span><span style="color:#FF79C6;"> =</span><span style="color:#BD93F9;font-style:italic;"> this</span></span>
<span class="line"><span style="color:#6272A4;">    // a uid</span></span>
<span class="line"><span style="color:#F8F8F2;">    vm._uid </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> uid</span><span style="color:#FF79C6;">++</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">    let</span><span style="color:#F8F8F2;"> startTag, endTag</span></span>
<span class="line"><span style="color:#6272A4;">    /* istanbul ignore if */</span></span>
<span class="line"><span style="color:#FF79C6;">    if</span><span style="color:#F8F8F2;"> (__DEV__ </span><span style="color:#FF79C6;">&amp;&amp;</span><span style="color:#F8F8F2;"> config.performance </span><span style="color:#FF79C6;">&amp;&amp;</span><span style="color:#F8F8F2;"> mark) {</span></span>
<span class="line"><span style="color:#F8F8F2;">      startTag </span><span style="color:#FF79C6;">=</span><span style="color:#F1FA8C;"> \`vue-perf-start:</span><span style="color:#FF79C6;">\${</span><span style="color:#F8F8F2;">vm._uid</span><span style="color:#FF79C6;">}</span><span style="color:#F1FA8C;">\`</span></span>
<span class="line"><span style="color:#F8F8F2;">      endTag </span><span style="color:#FF79C6;">=</span><span style="color:#F1FA8C;"> \`vue-perf-end:</span><span style="color:#FF79C6;">\${</span><span style="color:#F8F8F2;">vm._uid</span><span style="color:#FF79C6;">}</span><span style="color:#F1FA8C;">\`</span></span>
<span class="line"><span style="color:#50FA7B;">      mark</span><span style="color:#F8F8F2;">(startTag)</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">    // a flag to mark this as a Vue instance without having to do instanceof</span></span>
<span class="line"><span style="color:#6272A4;">    // check</span></span>
<span class="line"><span style="color:#F8F8F2;">    vm._isVue </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> true</span></span>
<span class="line"><span style="color:#6272A4;">    // avoid instances from being observed</span></span>
<span class="line"><span style="color:#F8F8F2;">    vm.__v_skip </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> true</span></span>
<span class="line"><span style="color:#6272A4;">    // effect scope</span></span>
<span class="line"><span style="color:#F8F8F2;">    vm._scope </span><span style="color:#FF79C6;">=</span><span style="color:#FF79C6;font-weight:bold;"> new</span><span style="color:#50FA7B;"> EffectScope</span><span style="color:#F8F8F2;">(</span><span style="color:#BD93F9;">true</span><span style="color:#6272A4;"> /* detached */</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#6272A4;">    // merge options</span></span>
<span class="line"><span style="color:#FF79C6;">    if</span><span style="color:#F8F8F2;"> (options </span><span style="color:#FF79C6;">&amp;&amp;</span><span style="color:#F8F8F2;"> options._isComponent) {</span></span>
<span class="line"><span style="color:#6272A4;">      // optimize internal component instantiation</span></span>
<span class="line"><span style="color:#6272A4;">      // since dynamic options merging is pretty slow, and none of the</span></span>
<span class="line"><span style="color:#6272A4;">      // internal component options needs special treatment.</span></span>
<span class="line"><span style="color:#50FA7B;">      initInternalComponent</span><span style="color:#F8F8F2;">(vm, options </span><span style="color:#FF79C6;">as</span><span style="color:#8BE9FD;font-style:italic;"> any</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">    } </span><span style="color:#FF79C6;">else</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">      vm.$options </span><span style="color:#FF79C6;">=</span><span style="color:#50FA7B;"> mergeOptions</span><span style="color:#F8F8F2;">(</span></span>
<span class="line"><span style="color:#50FA7B;">        resolveConstructorOptions</span><span style="color:#F8F8F2;">(vm.constructor </span><span style="color:#FF79C6;">as</span><span style="color:#8BE9FD;font-style:italic;"> any</span><span style="color:#F8F8F2;">),</span></span>
<span class="line"><span style="color:#F8F8F2;">        options </span><span style="color:#FF79C6;">||</span><span style="color:#F8F8F2;"> {},</span></span>
<span class="line"><span style="color:#F8F8F2;">        vm</span></span>
<span class="line"><span style="color:#F8F8F2;">      )</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#6272A4;">    /* istanbul ignore else */</span></span>
<span class="line"><span style="color:#FF79C6;">    if</span><span style="color:#F8F8F2;"> (__DEV__) {</span></span>
<span class="line"><span style="color:#50FA7B;">      initProxy</span><span style="color:#F8F8F2;">(vm)</span></span>
<span class="line"><span style="color:#F8F8F2;">    } </span><span style="color:#FF79C6;">else</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">      vm._renderProxy </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> vm</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#6272A4;">    // expose real self</span></span>
<span class="line"><span style="color:#F8F8F2;">    vm._self </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> vm</span></span>
<span class="line"><span style="color:#6272A4;">    // // 做了一些生命周期的初始化工作，初始化了很多变量，最主要是设置了父子组件的引用关系，也就是设置了 \`$parent\` 和 \`$children\`的值</span></span>
<span class="line"><span style="color:#50FA7B;">    initLifecycle</span><span style="color:#F8F8F2;">(vm)</span></span>
<span class="line"><span style="color:#6272A4;">    // 注册事件，注意这里注册的不是自己的，而是父组件的。因为很明显父组件的监听器才会注册到孩子身上。</span></span>
<span class="line"><span style="color:#50FA7B;">    initEvents</span><span style="color:#F8F8F2;">(vm)</span></span>
<span class="line"><span style="color:#6272A4;">    // 做一些 render 的准备工作，比如处理父子继承关系等，并没有真的开始 render</span></span>
<span class="line"><span style="color:#50FA7B;">    initRender</span><span style="color:#F8F8F2;">(vm)</span></span>
<span class="line"><span style="color:#6272A4;">    // 准备工作完成，接下来进入 \`create\` 阶段</span></span>
<span class="line"><span style="color:#50FA7B;">    callHook</span><span style="color:#F8F8F2;">(vm, </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">beforeCreate</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#50FA7B;">    initInjections</span><span style="color:#F8F8F2;">(vm) </span><span style="color:#6272A4;">// resolve injections before data/props</span></span>
<span class="line"><span style="color:#6272A4;">    // \`data\`, \`props\`, \`computed\` 等都是在这里初始化的，常见的面试考点比如\`Vue是如何实现数据响应化的\` 答案就在这个函数中寻找</span></span>
<span class="line"><span style="color:#50FA7B;">    initState</span><span style="color:#F8F8F2;">(vm)</span></span>
<span class="line"><span style="color:#50FA7B;">    initProvide</span><span style="color:#F8F8F2;">(vm) </span><span style="color:#6272A4;">// resolve provide after data/props</span></span>
<span class="line"><span style="color:#50FA7B;">    callHook</span><span style="color:#F8F8F2;">(vm, </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">created</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">    /* istanbul ignore if */</span></span>
<span class="line"><span style="color:#FF79C6;">    if</span><span style="color:#F8F8F2;"> (__DEV__ </span><span style="color:#FF79C6;">&amp;&amp;</span><span style="color:#F8F8F2;"> config.performance </span><span style="color:#FF79C6;">&amp;&amp;</span><span style="color:#F8F8F2;"> mark) {</span></span>
<span class="line"><span style="color:#F8F8F2;">      vm._name </span><span style="color:#FF79C6;">=</span><span style="color:#50FA7B;"> formatComponentName</span><span style="color:#F8F8F2;">(vm, </span><span style="color:#BD93F9;">false</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#50FA7B;">      mark</span><span style="color:#F8F8F2;">(endTag)</span></span>
<span class="line"><span style="color:#50FA7B;">      measure</span><span style="color:#F8F8F2;">(</span><span style="color:#F1FA8C;">\`vue </span><span style="color:#FF79C6;">\${</span><span style="color:#F8F8F2;">vm._name</span><span style="color:#FF79C6;">}</span><span style="color:#F1FA8C;"> init\`</span><span style="color:#F8F8F2;">, startTag, endTag)</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">    if</span><span style="color:#F8F8F2;"> (vm.$options.el) {</span></span>
<span class="line"><span style="color:#F8F8F2;">      vm.</span><span style="color:#50FA7B;">$mount</span><span style="color:#F8F8F2;">(vm.$options.el)</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h3 id="vm-options-处理" tabindex="-1"><a class="header-anchor" href="#vm-options-处理"><span>vm.$options 处理</span></a></h3><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#F8F8F2;">vm.$options </span><span style="color:#FF79C6;">=</span><span style="color:#50FA7B;"> mergeOptions</span><span style="color:#F8F8F2;">(</span></span>
<span class="line"><span style="color:#50FA7B;">    resolveConstructorOptions</span><span style="color:#F8F8F2;">(vm.constructor </span><span style="color:#FF79C6;">as</span><span style="color:#8BE9FD;font-style:italic;"> any</span><span style="color:#F8F8F2;">),</span></span>
<span class="line"><span style="color:#F8F8F2;">    options </span><span style="color:#FF79C6;">||</span><span style="color:#F8F8F2;"> {},</span></span>
<span class="line"><span style="color:#F8F8F2;">    vm</span></span>
<span class="line"><span style="color:#F8F8F2;">  )</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="resolveconstructoroptions" tabindex="-1"><a class="header-anchor" href="#resolveconstructoroptions"><span>resolveConstructorOptions</span></a></h4><p>解析对象的 options 并且合并 Sub 上的 options</p><details class="hint-container details"><summary>resolveConstructorOptions</summary><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">export</span><span style="color:#FF79C6;"> function</span><span style="color:#50FA7B;"> resolveConstructorOptions</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">Ctor</span><span style="color:#FF79C6;">:</span><span style="color:#FF79C6;"> typeof</span><span style="color:#F8F8F2;"> Component) {</span></span>
<span class="line"><span style="color:#FF79C6;">  let</span><span style="color:#F8F8F2;"> options </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> Ctor.options;</span></span>
<span class="line"><span style="color:#6272A4;">  // super  Vue.extend时 return Sub =&gt; Sub.super = this = Vue</span></span>
<span class="line"><span style="color:#6272A4;">  //</span></span>
<span class="line"><span style="color:#FF79C6;">  if</span><span style="color:#F8F8F2;"> (Ctor.super) {</span></span>
<span class="line"><span style="color:#6272A4;">    // 获取父类身上options</span></span>
<span class="line"><span style="color:#FF79C6;">    const</span><span style="color:#F8F8F2;"> superOptions </span><span style="color:#FF79C6;">=</span><span style="color:#50FA7B;"> resolveConstructorOptions</span><span style="color:#F8F8F2;">(Ctor.super);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">    const</span><span style="color:#F8F8F2;"> cachedSuperOptions </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> Ctor.superOptions;</span></span>
<span class="line"><span style="color:#6272A4;">    // 如果父类有，进行合并</span></span>
<span class="line"><span style="color:#FF79C6;">    if</span><span style="color:#F8F8F2;"> (superOptions </span><span style="color:#FF79C6;">!==</span><span style="color:#F8F8F2;"> cachedSuperOptions) {</span></span>
<span class="line"><span style="color:#6272A4;">      // super option changed,</span></span>
<span class="line"><span style="color:#6272A4;">      // need to resolve new options.</span></span>
<span class="line"><span style="color:#F8F8F2;">      Ctor.superOptions </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> superOptions;</span></span>
<span class="line"><span style="color:#6272A4;">      // check if there are any late-modified/attached options (#4976)</span></span>
<span class="line"><span style="color:#FF79C6;">      const</span><span style="color:#F8F8F2;"> modifiedOptions </span><span style="color:#FF79C6;">=</span><span style="color:#50FA7B;"> resolveModifiedOptions</span><span style="color:#F8F8F2;">(Ctor);</span></span>
<span class="line"><span style="color:#6272A4;">      // update base extend options</span></span>
<span class="line"><span style="color:#FF79C6;">      if</span><span style="color:#F8F8F2;"> (modifiedOptions) {</span></span>
<span class="line"><span style="color:#50FA7B;">        extend</span><span style="color:#F8F8F2;">(Ctor.extendOptions, modifiedOptions);</span></span>
<span class="line"><span style="color:#F8F8F2;">      }</span></span>
<span class="line"><span style="color:#F8F8F2;">      options </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> Ctor.options </span><span style="color:#FF79C6;">=</span><span style="color:#50FA7B;"> mergeOptions</span><span style="color:#F8F8F2;">(superOptions, Ctor.extendOptions);</span></span>
<span class="line"><span style="color:#FF79C6;">      if</span><span style="color:#F8F8F2;"> (options.name) {</span></span>
<span class="line"><span style="color:#F8F8F2;">        options.components[options.name] </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> Ctor;</span></span>
<span class="line"><span style="color:#F8F8F2;">      }</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#FF79C6;">  return</span><span style="color:#F8F8F2;"> options;</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h4 id="mergeoptions" tabindex="-1"><a class="header-anchor" href="#mergeoptions"><span>mergeOptions</span></a></h4><details class="hint-container details"><summary>mergeOptions</summary><p>合并两个选项，出现相同配置项时，子选项会覆盖父选项的配置</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">export</span><span style="color:#FF79C6;"> function</span><span style="color:#50FA7B;"> mergeOptions</span><span style="color:#F8F8F2;">(</span></span>
<span class="line"><span style="color:#FFB86C;font-style:italic;">  parent</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> Record</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#8BE9FD;font-style:italic;">string</span><span style="color:#F8F8F2;">, </span><span style="color:#8BE9FD;font-style:italic;">any</span><span style="color:#F8F8F2;">&gt;,</span></span>
<span class="line"><span style="color:#FFB86C;font-style:italic;">  child</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> Record</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#8BE9FD;font-style:italic;">string</span><span style="color:#F8F8F2;">, </span><span style="color:#8BE9FD;font-style:italic;">any</span><span style="color:#F8F8F2;">&gt;,</span></span>
<span class="line"><span style="color:#FFB86C;font-style:italic;">  vm</span><span style="color:#FF79C6;">?:</span><span style="color:#8BE9FD;font-style:italic;"> Component</span><span style="color:#FF79C6;"> |</span><span style="color:#8BE9FD;font-style:italic;"> null</span></span>
<span class="line"><span style="color:#F8F8F2;">)</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> ComponentOptions</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">  if</span><span style="color:#F8F8F2;"> (</span><span style="color:#50FA7B;">isFunction</span><span style="color:#F8F8F2;">(child)) {</span></span>
<span class="line"><span style="color:#6272A4;">    // @ts-expect-error</span></span>
<span class="line"><span style="color:#F8F8F2;">    child </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> child.options</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#50FA7B;">  normalizeProps</span><span style="color:#F8F8F2;">(child, vm)</span></span>
<span class="line"><span style="color:#50FA7B;">  normalizeInject</span><span style="color:#F8F8F2;">(child, vm)</span></span>
<span class="line"><span style="color:#50FA7B;">  normalizeDirectives</span><span style="color:#F8F8F2;">(child)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">  // Apply extends and mixins on the child options,</span></span>
<span class="line"><span style="color:#6272A4;">  // but only if it is a raw options object that isn&#39;t</span></span>
<span class="line"><span style="color:#6272A4;">  // the result of another mergeOptions call.</span></span>
<span class="line"><span style="color:#6272A4;">  // Only merged options has the _base property.</span></span>
<span class="line"><span style="color:#FF79C6;">  if</span><span style="color:#F8F8F2;"> (</span><span style="color:#FF79C6;">!</span><span style="color:#F8F8F2;">child._base) {</span></span>
<span class="line"><span style="color:#FF79C6;">    if</span><span style="color:#F8F8F2;"> (child.extends) {</span></span>
<span class="line"><span style="color:#F8F8F2;">      parent </span><span style="color:#FF79C6;">=</span><span style="color:#50FA7B;"> mergeOptions</span><span style="color:#F8F8F2;">(parent, child.extends, vm)</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#FF79C6;">    if</span><span style="color:#F8F8F2;"> (child.mixins) {</span></span>
<span class="line"><span style="color:#FF79C6;">      for</span><span style="color:#F8F8F2;"> (</span><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> i </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> 0</span><span style="color:#F8F8F2;">, l </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> child.mixins.length; i </span><span style="color:#FF79C6;">&lt;</span><span style="color:#F8F8F2;"> l; i</span><span style="color:#FF79C6;">++</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">        parent </span><span style="color:#FF79C6;">=</span><span style="color:#50FA7B;"> mergeOptions</span><span style="color:#F8F8F2;">(parent, child.mixins[i], vm)</span></span>
<span class="line"><span style="color:#F8F8F2;">      }</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">  const</span><span style="color:#F8F8F2;"> options</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> ComponentOptions</span><span style="color:#FF79C6;"> =</span><span style="color:#F8F8F2;"> {} </span><span style="color:#FF79C6;">as</span><span style="color:#8BE9FD;font-style:italic;"> any</span></span>
<span class="line"><span style="color:#FF79C6;">  let</span><span style="color:#F8F8F2;"> key</span></span>
<span class="line"><span style="color:#FF79C6;">  for</span><span style="color:#F8F8F2;"> (key </span><span style="color:#FF79C6;">in</span><span style="color:#F8F8F2;"> parent) {</span></span>
<span class="line"><span style="color:#50FA7B;">    mergeField</span><span style="color:#F8F8F2;">(key)</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#FF79C6;">  for</span><span style="color:#F8F8F2;"> (key </span><span style="color:#FF79C6;">in</span><span style="color:#F8F8F2;"> child) {</span></span>
<span class="line"><span style="color:#FF79C6;">    if</span><span style="color:#F8F8F2;"> (</span><span style="color:#FF79C6;">!</span><span style="color:#50FA7B;">hasOwn</span><span style="color:#F8F8F2;">(parent, key)) {</span></span>
<span class="line"><span style="color:#50FA7B;">      mergeField</span><span style="color:#F8F8F2;">(key)</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#FF79C6;">  function</span><span style="color:#50FA7B;"> mergeField</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">key</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> any</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#FF79C6;">    const</span><span style="color:#F8F8F2;"> strat </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> strats[key] </span><span style="color:#FF79C6;">||</span><span style="color:#F8F8F2;"> defaultStrat</span></span>
<span class="line"><span style="color:#F8F8F2;">    options[key] </span><span style="color:#FF79C6;">=</span><span style="color:#50FA7B;"> strat</span><span style="color:#F8F8F2;">(parent[key], child[key], vm, key)</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#FF79C6;">  return</span><span style="color:#F8F8F2;"> options</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><details class="hint-container details"><summary>resolveConstructorOptions</summary><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">export</span><span style="color:#FF79C6;"> function</span><span style="color:#50FA7B;"> resolveConstructorOptions</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">Ctor</span><span style="color:#FF79C6;">:</span><span style="color:#FF79C6;"> typeof</span><span style="color:#F8F8F2;"> Component) {</span></span>
<span class="line"><span style="color:#FF79C6;">  let</span><span style="color:#F8F8F2;"> options </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> Ctor.options;</span></span>
<span class="line"><span style="color:#FF79C6;">  if</span><span style="color:#F8F8F2;"> (Ctor.super) {</span></span>
<span class="line"><span style="color:#FF79C6;">    const</span><span style="color:#F8F8F2;"> superOptions </span><span style="color:#FF79C6;">=</span><span style="color:#50FA7B;"> resolveConstructorOptions</span><span style="color:#F8F8F2;">(Ctor.super);</span></span>
<span class="line"><span style="color:#FF79C6;">    const</span><span style="color:#F8F8F2;"> cachedSuperOptions </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> Ctor.superOptions;</span></span>
<span class="line"><span style="color:#FF79C6;">    if</span><span style="color:#F8F8F2;"> (superOptions </span><span style="color:#FF79C6;">!==</span><span style="color:#F8F8F2;"> cachedSuperOptions) {</span></span>
<span class="line"><span style="color:#6272A4;">      // super option changed,</span></span>
<span class="line"><span style="color:#6272A4;">      // need to resolve new options.</span></span>
<span class="line"><span style="color:#F8F8F2;">      Ctor.superOptions </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> superOptions;</span></span>
<span class="line"><span style="color:#6272A4;">      // check if there are any late-modified/attached options (#4976)</span></span>
<span class="line"><span style="color:#FF79C6;">      const</span><span style="color:#F8F8F2;"> modifiedOptions </span><span style="color:#FF79C6;">=</span><span style="color:#50FA7B;"> resolveModifiedOptions</span><span style="color:#F8F8F2;">(Ctor);</span></span>
<span class="line"><span style="color:#6272A4;">      // update base extend options</span></span>
<span class="line"><span style="color:#FF79C6;">      if</span><span style="color:#F8F8F2;"> (modifiedOptions) {</span></span>
<span class="line"><span style="color:#50FA7B;">        extend</span><span style="color:#F8F8F2;">(Ctor.extendOptions, modifiedOptions);</span></span>
<span class="line"><span style="color:#F8F8F2;">      }</span></span>
<span class="line"><span style="color:#F8F8F2;">      options </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> Ctor.options </span><span style="color:#FF79C6;">=</span><span style="color:#50FA7B;"> mergeOptions</span><span style="color:#F8F8F2;">(superOptions, Ctor.extendOptions);</span></span>
<span class="line"><span style="color:#FF79C6;">      if</span><span style="color:#F8F8F2;"> (options.name) {</span></span>
<span class="line"><span style="color:#F8F8F2;">        options.components[options.name] </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> Ctor;</span></span>
<span class="line"><span style="color:#F8F8F2;">      }</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#FF79C6;">  return</span><span style="color:#F8F8F2;"> options;</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><p><code>props</code>在 <code>mergeOptions</code>时调用<code>normalizeProps</code>方法进行处理</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#F8F8F2;">props: [</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">name</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">];</span></span>
<span class="line"><span style="color:#F8F8F2;">props: {</span></span>
<span class="line"><span style="color:#F8F8F2;">  name: String;</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#F8F8F2;">props: {</span></span>
<span class="line"><span style="color:#F8F8F2;">  name: {</span></span>
<span class="line"><span style="color:#F8F8F2;">    type: String;</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>normalizeProps</code></p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">function</span><span style="color:#50FA7B;"> normalizeProps</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">options</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> Record</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#8BE9FD;font-style:italic;">string</span><span style="color:#F8F8F2;">, </span><span style="color:#8BE9FD;font-style:italic;">any</span><span style="color:#F8F8F2;">&gt;, </span><span style="color:#FFB86C;font-style:italic;">vm</span><span style="color:#FF79C6;">?:</span><span style="color:#8BE9FD;font-style:italic;"> Component</span><span style="color:#FF79C6;"> |</span><span style="color:#8BE9FD;font-style:italic;"> null</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#FF79C6;">  const</span><span style="color:#F8F8F2;"> props </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> options.props;</span></span>
<span class="line"><span style="color:#FF79C6;">  if</span><span style="color:#F8F8F2;"> (</span><span style="color:#FF79C6;">!</span><span style="color:#F8F8F2;">props) </span><span style="color:#FF79C6;">return</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#FF79C6;">  const</span><span style="color:#F8F8F2;"> res</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> Record</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#8BE9FD;font-style:italic;">string</span><span style="color:#F8F8F2;">, </span><span style="color:#8BE9FD;font-style:italic;">any</span><span style="color:#F8F8F2;">&gt; </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> {};</span></span>
<span class="line"><span style="color:#FF79C6;">  let</span><span style="color:#F8F8F2;"> i, val, name;</span></span>
<span class="line"><span style="color:#FF79C6;">  if</span><span style="color:#F8F8F2;"> (</span><span style="color:#50FA7B;">isArray</span><span style="color:#F8F8F2;">(props)) {</span></span>
<span class="line"><span style="color:#F8F8F2;">    i </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> props.length;</span></span>
<span class="line"><span style="color:#FF79C6;">    while</span><span style="color:#F8F8F2;"> (i</span><span style="color:#FF79C6;">--</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">      val </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> props[i];</span></span>
<span class="line"><span style="color:#FF79C6;">      if</span><span style="color:#F8F8F2;"> (</span><span style="color:#FF79C6;">typeof</span><span style="color:#F8F8F2;"> val </span><span style="color:#FF79C6;">===</span><span style="color:#E9F284;"> &quot;</span><span style="color:#F1FA8C;">string</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#6272A4;">        // 转化成驼峰式命名</span></span>
<span class="line"><span style="color:#F8F8F2;">        name </span><span style="color:#FF79C6;">=</span><span style="color:#50FA7B;"> camelize</span><span style="color:#F8F8F2;">(val);</span></span>
<span class="line"><span style="color:#F8F8F2;">        res[name] </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> { type</span><span style="color:#FF79C6;">:</span><span style="color:#BD93F9;"> null</span><span style="color:#F8F8F2;"> };</span></span>
<span class="line"><span style="color:#F8F8F2;">      }</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">  } </span><span style="color:#FF79C6;">else</span><span style="color:#FF79C6;"> if</span><span style="color:#F8F8F2;"> (</span><span style="color:#50FA7B;">isPlainObject</span><span style="color:#F8F8F2;">(props)) {</span></span>
<span class="line"><span style="color:#FF79C6;">    for</span><span style="color:#F8F8F2;"> (</span><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> key </span><span style="color:#FF79C6;">in</span><span style="color:#F8F8F2;"> props) {</span></span>
<span class="line"><span style="color:#F8F8F2;">      val </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> props[key];</span></span>
<span class="line"><span style="color:#F8F8F2;">      name </span><span style="color:#FF79C6;">=</span><span style="color:#50FA7B;"> camelize</span><span style="color:#F8F8F2;">(key);</span></span>
<span class="line"><span style="color:#F8F8F2;">      res[name] </span><span style="color:#FF79C6;">=</span><span style="color:#50FA7B;"> isPlainObject</span><span style="color:#F8F8F2;">(val) </span><span style="color:#FF79C6;">?</span><span style="color:#F8F8F2;"> val </span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> { type</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> val };</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">  options.props </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> res;</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="callhook" tabindex="-1"><a class="header-anchor" href="#callhook"><span>callHook</span></a></h3><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">export</span><span style="color:#FF79C6;"> function</span><span style="color:#50FA7B;"> callHook</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">vm</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> Component</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">hook</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> string</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">args</span><span style="color:#FF79C6;">?:</span><span style="color:#8BE9FD;font-style:italic;"> any</span><span style="color:#F8F8F2;">[]) {</span></span>
<span class="line"><span style="color:#6272A4;">  // #7573 disable dep collection when invoking lifecycle hooks</span></span>
<span class="line"><span style="color:#50FA7B;">  pushTarget</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#FF79C6;">  const</span><span style="color:#F8F8F2;"> prev </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> currentInstance;</span></span>
<span class="line"><span style="color:#50FA7B;">  setCurrentInstance</span><span style="color:#F8F8F2;">(vm);</span></span>
<span class="line"><span style="color:#FF79C6;">  const</span><span style="color:#F8F8F2;"> handlers </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> vm.$options[hook];</span></span>
<span class="line"><span style="color:#FF79C6;">  const</span><span style="color:#F8F8F2;"> info </span><span style="color:#FF79C6;">=</span><span style="color:#F1FA8C;"> \`</span><span style="color:#FF79C6;">\${</span><span style="color:#F8F8F2;">hook</span><span style="color:#FF79C6;">}</span><span style="color:#F1FA8C;"> hook\`</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#FF79C6;">  if</span><span style="color:#F8F8F2;"> (handlers) {</span></span>
<span class="line"><span style="color:#FF79C6;">    for</span><span style="color:#F8F8F2;"> (</span><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> i </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> 0</span><span style="color:#F8F8F2;">, j </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> handlers.length; i </span><span style="color:#FF79C6;">&lt;</span><span style="color:#F8F8F2;"> j; i</span><span style="color:#FF79C6;">++</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#50FA7B;">      invokeWithErrorHandling</span><span style="color:#F8F8F2;">(handlers[i], vm, args </span><span style="color:#FF79C6;">||</span><span style="color:#BD93F9;"> null</span><span style="color:#F8F8F2;">, vm, info);</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#FF79C6;">  if</span><span style="color:#F8F8F2;"> (vm._hasHookEvent) {</span></span>
<span class="line"><span style="color:#F8F8F2;">    vm.</span><span style="color:#50FA7B;">$emit</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">hook:</span><span style="color:#E9F284;">&quot;</span><span style="color:#FF79C6;"> +</span><span style="color:#F8F8F2;"> hook);</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#50FA7B;">  setCurrentInstance</span><span style="color:#F8F8F2;">(prev);</span></span>
<span class="line"><span style="color:#50FA7B;">  popTarget</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="initstate" tabindex="-1"><a class="header-anchor" href="#initstate"><span>initState</span></a></h2><p><strong>数据响应式的入口：分别处理 props、methods、data、computed、watch</strong><strong>优先级：props、methods、data、computed 对象中的属性不能出现重复，优先级和列出顺序一致</strong><strong>其中 computed 中的 key 不能和 props、data 中的 key 重复，methods 不影响</strong></p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">export</span><span style="color:#FF79C6;"> function</span><span style="color:#50FA7B;"> initState</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">vm</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> Component</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#6272A4;">  // $option 会将 vue.constructor 和new Vue({}) 里的对象进行合并</span></span>
<span class="line"><span style="color:#FF79C6;">  const</span><span style="color:#F8F8F2;"> opts </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> vm.$options;</span></span>
<span class="line"><span style="color:#FF79C6;">  if</span><span style="color:#F8F8F2;"> (opts.props) </span><span style="color:#50FA7B;">initProps</span><span style="color:#F8F8F2;">(vm, opts.props);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">  // Composition API</span></span>
<span class="line"><span style="color:#50FA7B;">  initSetup</span><span style="color:#F8F8F2;">(vm);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">  if</span><span style="color:#F8F8F2;"> (opts.methods) </span><span style="color:#50FA7B;">initMethods</span><span style="color:#F8F8F2;">(vm, opts.methods);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">  if</span><span style="color:#F8F8F2;"> (opts.data) {</span></span>
<span class="line"><span style="color:#50FA7B;">    initData</span><span style="color:#F8F8F2;">(vm);</span></span>
<span class="line"><span style="color:#F8F8F2;">  } </span><span style="color:#FF79C6;">else</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#FF79C6;">    const</span><span style="color:#F8F8F2;"> ob </span><span style="color:#FF79C6;">=</span><span style="color:#50FA7B;"> observe</span><span style="color:#F8F8F2;">((vm._data </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> {}));</span></span>
<span class="line"><span style="color:#F8F8F2;">    ob </span><span style="color:#FF79C6;">&amp;&amp;</span><span style="color:#F8F8F2;"> ob.vmCount</span><span style="color:#FF79C6;">++</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#FF79C6;">  if</span><span style="color:#F8F8F2;"> (opts.computed) </span><span style="color:#50FA7B;">initComputed</span><span style="color:#F8F8F2;">(vm, opts.computed);</span></span>
<span class="line"><span style="color:#FF79C6;">  if</span><span style="color:#F8F8F2;"> (opts.watch </span><span style="color:#FF79C6;">&amp;&amp;</span><span style="color:#F8F8F2;"> opts.watch </span><span style="color:#FF79C6;">!==</span><span style="color:#F8F8F2;"> nativeWatch) {</span></span>
<span class="line"><span style="color:#50FA7B;">    initWatch</span><span style="color:#F8F8F2;">(vm, opts.watch);</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="proxy" tabindex="-1"><a class="header-anchor" href="#proxy"><span>proxy</span></a></h3><p>把 props 和 data 上的属性代理到 vm 实例上</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> sharedPropertyDefinition </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  enumerable</span><span style="color:#FF79C6;">:</span><span style="color:#BD93F9;"> true</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">  configurable</span><span style="color:#FF79C6;">:</span><span style="color:#BD93F9;"> true</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">  get</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> noop,</span></span>
<span class="line"><span style="color:#F8F8F2;">  set</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> noop,</span></span>
<span class="line"><span style="color:#F8F8F2;">};</span></span>
<span class="line"><span style="color:#FF79C6;">export</span><span style="color:#FF79C6;"> function</span><span style="color:#50FA7B;"> proxy</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">target</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> Object</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">sourceKey</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> string</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">key</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> string</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">  sharedPropertyDefinition.</span><span style="color:#50FA7B;">get</span><span style="color:#FF79C6;"> =</span><span style="color:#FF79C6;"> function</span><span style="color:#50FA7B;"> proxyGetter</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#FF79C6;">    return</span><span style="color:#BD93F9;font-style:italic;"> this</span><span style="color:#F8F8F2;">[sourceKey][key];</span></span>
<span class="line"><span style="color:#F8F8F2;">  };</span></span>
<span class="line"><span style="color:#F8F8F2;">  sharedPropertyDefinition.</span><span style="color:#50FA7B;">set</span><span style="color:#FF79C6;"> =</span><span style="color:#FF79C6;"> function</span><span style="color:#50FA7B;"> proxySetter</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">val</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#BD93F9;font-style:italic;">    this</span><span style="color:#F8F8F2;">[sourceKey][key] </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> val;</span></span>
<span class="line"><span style="color:#F8F8F2;">  };</span></span>
<span class="line"><span style="color:#F8F8F2;">  Object.</span><span style="color:#50FA7B;">defineProperty</span><span style="color:#F8F8F2;">(target, key, sharedPropertyDefinition);</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="initprops" tabindex="-1"><a class="header-anchor" href="#initprops"><span>initProps</span></a></h3><p>处理 props 对象，将 props 对象的每个属性设置为响应式，代理到 vm 上 =&gt; vm.props.xx = vm.xx</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#6272A4;">//</span></span>
<span class="line"><span style="color:#FF79C6;">function</span><span style="color:#50FA7B;"> initProps</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">vm</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> Component</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">propsOptions</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> Object</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#FF79C6;">  const</span><span style="color:#F8F8F2;"> propsData </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> vm.$options.propsData </span><span style="color:#FF79C6;">||</span><span style="color:#F8F8F2;"> {};</span></span>
<span class="line"><span style="color:#FF79C6;">  const</span><span style="color:#F8F8F2;"> props </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> (vm._props </span><span style="color:#FF79C6;">=</span><span style="color:#50FA7B;"> shallowReactive</span><span style="color:#F8F8F2;">({}));</span></span>
<span class="line"><span style="color:#6272A4;">  // cache prop keys so that future props updates can iterate using Array</span></span>
<span class="line"><span style="color:#6272A4;">  // instead of dynamic object key enumeration.</span></span>
<span class="line"><span style="color:#FF79C6;">  const</span><span style="color:#F8F8F2;"> keys</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> string</span><span style="color:#F8F8F2;">[] </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> (vm.$options._propKeys </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> []);</span></span>
<span class="line"><span style="color:#FF79C6;">  const</span><span style="color:#F8F8F2;"> isRoot </span><span style="color:#FF79C6;">=</span><span style="color:#FF79C6;"> !</span><span style="color:#F8F8F2;">vm.$parent;</span></span>
<span class="line"><span style="color:#6272A4;">  // root instance props should be converted</span></span>
<span class="line"><span style="color:#FF79C6;">  if</span><span style="color:#F8F8F2;"> (</span><span style="color:#FF79C6;">!</span><span style="color:#F8F8F2;">isRoot) {</span></span>
<span class="line"><span style="color:#50FA7B;">    toggleObserving</span><span style="color:#F8F8F2;">(</span><span style="color:#BD93F9;">false</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#6272A4;">  // 遍历 props 对象</span></span>
<span class="line"><span style="color:#FF79C6;">  for</span><span style="color:#F8F8F2;"> (</span><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> key </span><span style="color:#FF79C6;">in</span><span style="color:#F8F8F2;"> propsOptions) {</span></span>
<span class="line"><span style="color:#F8F8F2;">    keys.</span><span style="color:#50FA7B;">push</span><span style="color:#F8F8F2;">(key);</span></span>
<span class="line"><span style="color:#6272A4;">    // 获取 props[key] 的默认值</span></span>
<span class="line"><span style="color:#FF79C6;">    const</span><span style="color:#F8F8F2;"> value </span><span style="color:#FF79C6;">=</span><span style="color:#50FA7B;"> validateProp</span><span style="color:#F8F8F2;">(key, propsOptions, propsData, vm);</span></span>
<span class="line"><span style="color:#6272A4;">    // 为 props 的每个 key 是设置数据响应式</span></span>
<span class="line"><span style="color:#50FA7B;">    defineReactive</span><span style="color:#F8F8F2;">(props, key, value);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">    // static props are already proxied on the component&#39;s prototype</span></span>
<span class="line"><span style="color:#6272A4;">    // during Vue.extend(). We only need to proxy props defined at</span></span>
<span class="line"><span style="color:#6272A4;">    // instantiation here.</span></span>
<span class="line"><span style="color:#FF79C6;">    if</span><span style="color:#F8F8F2;"> (</span><span style="color:#FF79C6;">!</span><span style="color:#F8F8F2;">(key </span><span style="color:#FF79C6;">in</span><span style="color:#F8F8F2;"> vm)) {</span></span>
<span class="line"><span style="color:#6272A4;">      // 代理 key 到 vm 对象上</span></span>
<span class="line"><span style="color:#50FA7B;">      proxy</span><span style="color:#F8F8F2;">(vm, </span><span style="color:#F1FA8C;">\`_props\`</span><span style="color:#F8F8F2;">, key);</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#50FA7B;">  toggleObserving</span><span style="color:#F8F8F2;">(</span><span style="color:#BD93F9;">true</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="initmethods" tabindex="-1"><a class="header-anchor" href="#initmethods"><span>initMethods</span></a></h3><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">function</span><span style="color:#50FA7B;"> initMethods</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">vm</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> Component</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">methods</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> Object</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#FF79C6;">  const</span><span style="color:#F8F8F2;"> props </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> vm.$options.props;</span></span>
<span class="line"><span style="color:#FF79C6;">  for</span><span style="color:#F8F8F2;"> (</span><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> key </span><span style="color:#FF79C6;">in</span><span style="color:#F8F8F2;"> methods) {</span></span>
<span class="line"><span style="color:#6272A4;">    // bind() 方法创建一个新的函数，在 bind() 被调用时，这个新函数的 this 被指定为 bind() 的第一个参数，而其余参数将作为新函数的参数，供调用时使用。</span></span>
<span class="line"><span style="color:#6272A4;">    // (fn,ctx) =&gt; fn.bind(ctx)</span></span>
<span class="line"><span style="color:#F8F8F2;">    vm[key] </span><span style="color:#FF79C6;">=</span></span>
<span class="line"><span style="color:#FF79C6;">      typeof</span><span style="color:#F8F8F2;"> methods[key] </span><span style="color:#FF79C6;">!==</span><span style="color:#E9F284;"> &quot;</span><span style="color:#F1FA8C;">function</span><span style="color:#E9F284;">&quot;</span><span style="color:#FF79C6;"> ?</span><span style="color:#F8F8F2;"> noop </span><span style="color:#FF79C6;">:</span><span style="color:#50FA7B;"> bind</span><span style="color:#F8F8F2;">(methods[key], vm);</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="initdata" tabindex="-1"><a class="header-anchor" href="#initdata"><span>initData</span></a></h3><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">function</span><span style="color:#50FA7B;"> initData</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">vm</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> Component</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#FF79C6;">  let</span><span style="color:#F8F8F2;"> data</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> any</span><span style="color:#FF79C6;"> =</span><span style="color:#F8F8F2;"> vm.$options.data;</span></span>
<span class="line"><span style="color:#F8F8F2;">  data </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> vm._data </span><span style="color:#FF79C6;">=</span><span style="color:#50FA7B;"> isFunction</span><span style="color:#F8F8F2;">(data) </span><span style="color:#FF79C6;">?</span><span style="color:#50FA7B;"> getData</span><span style="color:#F8F8F2;">(data, vm) </span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> data </span><span style="color:#FF79C6;">||</span><span style="color:#F8F8F2;"> {};</span></span>
<span class="line"><span style="color:#FF79C6;">  if</span><span style="color:#F8F8F2;"> (</span><span style="color:#FF79C6;">!</span><span style="color:#50FA7B;">isPlainObject</span><span style="color:#F8F8F2;">(data)) {</span></span>
<span class="line"><span style="color:#F8F8F2;">    data </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> {};</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#6272A4;">  // proxy data on instance</span></span>
<span class="line"><span style="color:#FF79C6;">  const</span><span style="color:#F8F8F2;"> keys </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> Object.</span><span style="color:#50FA7B;">keys</span><span style="color:#F8F8F2;">(data);</span></span>
<span class="line"><span style="color:#FF79C6;">  const</span><span style="color:#F8F8F2;"> props </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> vm.$options.props;</span></span>
<span class="line"><span style="color:#FF79C6;">  const</span><span style="color:#F8F8F2;"> methods </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> vm.$options.methods;</span></span>
<span class="line"><span style="color:#FF79C6;">  let</span><span style="color:#F8F8F2;"> i </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> keys.length;</span></span>
<span class="line"><span style="color:#FF79C6;">  while</span><span style="color:#F8F8F2;"> (i</span><span style="color:#FF79C6;">--</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#FF79C6;">    const</span><span style="color:#F8F8F2;"> key </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> keys[i];</span></span>
<span class="line"><span style="color:#FF79C6;">    if</span><span style="color:#F8F8F2;"> (</span><span style="color:#FF79C6;">!</span><span style="color:#50FA7B;">isReserved</span><span style="color:#F8F8F2;">(key)) {</span></span>
<span class="line"><span style="color:#50FA7B;">      proxy</span><span style="color:#F8F8F2;">(vm, </span><span style="color:#F1FA8C;">\`_data\`</span><span style="color:#F8F8F2;">, key);</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#6272A4;">  // observe data</span></span>
<span class="line"><span style="color:#FF79C6;">  const</span><span style="color:#F8F8F2;"> ob </span><span style="color:#FF79C6;">=</span><span style="color:#50FA7B;"> observe</span><span style="color:#F8F8F2;">(data);</span></span>
<span class="line"><span style="color:#F8F8F2;">  ob </span><span style="color:#FF79C6;">&amp;&amp;</span><span style="color:#F8F8F2;"> ob.vmCount</span><span style="color:#FF79C6;">++</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="initcomputed" tabindex="-1"><a class="header-anchor" href="#initcomputed"><span>initComputed</span></a></h3><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">function</span><span style="color:#50FA7B;"> initComputed</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">vm</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> Component</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">computed</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> Object</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#6272A4;">  // $flow-disable-line</span></span>
<span class="line"><span style="color:#FF79C6;">  const</span><span style="color:#F8F8F2;"> watchers </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> (vm._computedWatchers </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> Object.</span><span style="color:#50FA7B;">create</span><span style="color:#F8F8F2;">(</span><span style="color:#BD93F9;">null</span><span style="color:#F8F8F2;">));</span></span>
<span class="line"><span style="color:#6272A4;">  // computed properties are just getters during SSR</span></span>
<span class="line"><span style="color:#FF79C6;">  const</span><span style="color:#F8F8F2;"> isSSR </span><span style="color:#FF79C6;">=</span><span style="color:#50FA7B;"> isServerRendering</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">  for</span><span style="color:#F8F8F2;"> (</span><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> key </span><span style="color:#FF79C6;">in</span><span style="color:#F8F8F2;"> computed) {</span></span>
<span class="line"><span style="color:#FF79C6;">    const</span><span style="color:#F8F8F2;"> userDef </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> computed[key];</span></span>
<span class="line"><span style="color:#FF79C6;">    const</span><span style="color:#F8F8F2;"> getter </span><span style="color:#FF79C6;">=</span><span style="color:#50FA7B;"> isFunction</span><span style="color:#F8F8F2;">(userDef) </span><span style="color:#FF79C6;">?</span><span style="color:#F8F8F2;"> userDef </span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> userDef.get;</span></span>
<span class="line"><span style="color:#FF79C6;">    if</span><span style="color:#F8F8F2;"> (</span><span style="color:#FF79C6;">!</span><span style="color:#F8F8F2;">isSSR) {</span></span>
<span class="line"><span style="color:#6272A4;">      // create internal watcher for the computed property.</span></span>
<span class="line"><span style="color:#6272A4;">      // 这是一个computer watcher</span></span>
<span class="line"><span style="color:#F8F8F2;">      watchers[key] </span><span style="color:#FF79C6;">=</span><span style="color:#FF79C6;font-weight:bold;"> new</span><span style="color:#50FA7B;"> Watcher</span><span style="color:#F8F8F2;">(</span></span>
<span class="line"><span style="color:#F8F8F2;">        vm,</span></span>
<span class="line"><span style="color:#F8F8F2;">        getter </span><span style="color:#FF79C6;">||</span><span style="color:#F8F8F2;"> noop,</span></span>
<span class="line"><span style="color:#F8F8F2;">        noop,</span></span>
<span class="line"><span style="color:#F8F8F2;">        computedWatcherOptions</span></span>
<span class="line"><span style="color:#F8F8F2;">      );</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#6272A4;">    // component-defined computed properties are already defined on the</span></span>
<span class="line"><span style="color:#6272A4;">    // component prototype. We only need to define computed properties defined</span></span>
<span class="line"><span style="color:#6272A4;">    // at instantiation here.</span></span>
<span class="line"><span style="color:#6272A4;">    // 代理 computed 对象中的属性到 vm 实例</span></span>
<span class="line"><span style="color:#6272A4;">    // 这样就可以使用 vm.computedKey 访问计算属性了</span></span>
<span class="line"><span style="color:#FF79C6;">    if</span><span style="color:#F8F8F2;"> (</span><span style="color:#FF79C6;">!</span><span style="color:#F8F8F2;">(key </span><span style="color:#FF79C6;">in</span><span style="color:#F8F8F2;"> vm)) {</span></span>
<span class="line"><span style="color:#50FA7B;">      defineComputed</span><span style="color:#F8F8F2;">(vm, key, userDef);</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#FF79C6;">export</span><span style="color:#FF79C6;"> function</span><span style="color:#50FA7B;"> defineComputed</span><span style="color:#F8F8F2;">(</span></span>
<span class="line"><span style="color:#FFB86C;font-style:italic;">  target</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> any</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#FFB86C;font-style:italic;">  key</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> string</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#FFB86C;font-style:italic;">  userDef</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> Record</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#8BE9FD;font-style:italic;">string</span><span style="color:#F8F8F2;">, </span><span style="color:#8BE9FD;font-style:italic;">any</span><span style="color:#F8F8F2;">&gt; </span><span style="color:#FF79C6;">|</span><span style="color:#F8F8F2;"> (() </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#8BE9FD;font-style:italic;"> any</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#FF79C6;">  const</span><span style="color:#F8F8F2;"> shouldCache </span><span style="color:#FF79C6;">=</span><span style="color:#FF79C6;"> !</span><span style="color:#50FA7B;">isServerRendering</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#FF79C6;">  if</span><span style="color:#F8F8F2;"> (</span><span style="color:#50FA7B;">isFunction</span><span style="color:#F8F8F2;">(userDef)) {</span></span>
<span class="line"><span style="color:#F8F8F2;">    sharedPropertyDefinition.get </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> shouldCache</span></span>
<span class="line"><span style="color:#FF79C6;">      ?</span><span style="color:#50FA7B;"> createComputedGetter</span><span style="color:#F8F8F2;">(key)</span></span>
<span class="line"><span style="color:#FF79C6;">      :</span><span style="color:#50FA7B;"> createGetterInvoker</span><span style="color:#F8F8F2;">(userDef);</span></span>
<span class="line"><span style="color:#F8F8F2;">    sharedPropertyDefinition.set </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> noop;</span></span>
<span class="line"><span style="color:#F8F8F2;">  } </span><span style="color:#FF79C6;">else</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">    sharedPropertyDefinition.get </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> userDef.get</span></span>
<span class="line"><span style="color:#FF79C6;">      ?</span><span style="color:#F8F8F2;"> shouldCache </span><span style="color:#FF79C6;">&amp;&amp;</span><span style="color:#F8F8F2;"> userDef.cache </span><span style="color:#FF79C6;">!==</span><span style="color:#BD93F9;"> false</span></span>
<span class="line"><span style="color:#FF79C6;">        ?</span><span style="color:#50FA7B;"> createComputedGetter</span><span style="color:#F8F8F2;">(key)</span></span>
<span class="line"><span style="color:#FF79C6;">        :</span><span style="color:#50FA7B;"> createGetterInvoker</span><span style="color:#F8F8F2;">(userDef.get)</span></span>
<span class="line"><span style="color:#FF79C6;">      :</span><span style="color:#F8F8F2;"> noop;</span></span>
<span class="line"><span style="color:#F8F8F2;">    sharedPropertyDefinition.set </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> userDef.set </span><span style="color:#FF79C6;">||</span><span style="color:#F8F8F2;"> noop;</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">  Object.</span><span style="color:#50FA7B;">defineProperty</span><span style="color:#F8F8F2;">(target, key, sharedPropertyDefinition);</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">function</span><span style="color:#50FA7B;"> createComputedGetter</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">key</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#FF79C6;">  return</span><span style="color:#FF79C6;"> function</span><span style="color:#50FA7B;"> computedGetter</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#6272A4;">    // 得到当前 key 对应的 watcher</span></span>
<span class="line"><span style="color:#FF79C6;">    const</span><span style="color:#F8F8F2;"> watcher </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;font-style:italic;"> this</span><span style="color:#F8F8F2;">._computedWatchers </span><span style="color:#FF79C6;">&amp;&amp;</span><span style="color:#BD93F9;font-style:italic;"> this</span><span style="color:#F8F8F2;">._computedWatchers[key];</span></span>
<span class="line"><span style="color:#FF79C6;">    if</span><span style="color:#F8F8F2;"> (watcher) {</span></span>
<span class="line"><span style="color:#6272A4;">      // 计算 key 对应的值，通过执行 computed.key 的回调函数来得到</span></span>
<span class="line"><span style="color:#6272A4;">      // watcher.dirty 属性就是大家常说的 computed 计算结果会缓存的原理</span></span>
<span class="line"><span style="color:#6272A4;">      // &lt;template&gt;</span></span>
<span class="line"><span style="color:#6272A4;">      //   &lt;div&gt;{{ computedProperty }}&lt;/div&gt;</span></span>
<span class="line"><span style="color:#6272A4;">      //   &lt;div&gt;{{ computedProperty }}&lt;/div&gt;</span></span>
<span class="line"><span style="color:#6272A4;">      // &lt;/template&gt;</span></span>
<span class="line"><span style="color:#6272A4;">      // 像这种情况下，在页面的一次渲染中，两个 dom 中的 computedProperty 只有第一个</span></span>
<span class="line"><span style="color:#6272A4;">      // 会执行 computed.computedProperty 的回调函数计算实际的值，</span></span>
<span class="line"><span style="color:#6272A4;">      // 即执行 watcher.evalaute，而第二个就不走计算过程了，</span></span>
<span class="line"><span style="color:#6272A4;">      // 因为上一次执行 watcher.evalute 时把 watcher.dirty 置为了 false，</span></span>
<span class="line"><span style="color:#6272A4;">      // 待页面更新后，wathcer.update 方法会将 watcher.dirty 重新置为 true，</span></span>
<span class="line"><span style="color:#6272A4;">      // 供下次页面更新时重新计算 computed.key 的结果</span></span>
<span class="line"><span style="color:#FF79C6;">      if</span><span style="color:#F8F8F2;"> (watcher.dirty) {</span></span>
<span class="line"><span style="color:#F8F8F2;">        watcher.</span><span style="color:#50FA7B;">evaluate</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#F8F8F2;">      }</span></span>
<span class="line"><span style="color:#FF79C6;">      if</span><span style="color:#F8F8F2;"> (Dep.target) {</span></span>
<span class="line"><span style="color:#6272A4;">        // watcher.depend =&gt; Dep.depend =&gt; 将Dep.target = 当前watcher</span></span>
<span class="line"><span style="color:#F8F8F2;">        watcher.</span><span style="color:#50FA7B;">depend</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#F8F8F2;">      }</span></span>
<span class="line"><span style="color:#6272A4;">      // watcher.value =&gt; this.get() 会读取data的响应式数据，触发data中的getter将当前的watcher收集</span></span>
<span class="line"><span style="color:#6272A4;">      //</span></span>
<span class="line"><span style="color:#FF79C6;">      return</span><span style="color:#F8F8F2;"> watcher.value;</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">  };</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="initwatch" tabindex="-1"><a class="header-anchor" href="#initwatch"><span>initWatch</span></a></h3><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#F8F8F2;">  watch: {</span></span>
<span class="line"><span style="color:#6272A4;">    // 写法1 string, 即执行this.foo()</span></span>
<span class="line"><span style="color:#F8F8F2;">    count: </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">foo</span><span style="color:#E9F284;">&#39;</span></span>
<span class="line"><span style="color:#6272A4;">    // 写法2 函数</span></span>
<span class="line"><span style="color:#50FA7B;">    count</span><span style="color:#F8F8F2;">(v) {</span></span>
<span class="line"><span style="color:#F8F8F2;">      console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(v)</span></span>
<span class="line"><span style="color:#F8F8F2;">    },</span></span>
<span class="line"><span style="color:#6272A4;">    // 写法3 普通对象</span></span>
<span class="line"><span style="color:#F8F8F2;">    count: {</span></span>
<span class="line"><span style="color:#50FA7B;">      handler</span><span style="color:#F8F8F2;">(v) {</span></span>
<span class="line"><span style="color:#F8F8F2;">        console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(v)</span></span>
<span class="line"><span style="color:#F8F8F2;">      },</span></span>
<span class="line"><span style="color:#F8F8F2;">      deep: </span><span style="color:#BD93F9;">true</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">      immediate: </span><span style="color:#BD93F9;">true</span></span>
<span class="line"><span style="color:#F8F8F2;">    },</span></span>
<span class="line"><span style="color:#6272A4;">    // 写法4 数组里面放stirng，即执行 this.foo(),this.bar()</span></span>
<span class="line"><span style="color:#F8F8F2;">    count: [</span></span>
<span class="line"><span style="color:#E9F284;">      &#39;</span><span style="color:#F1FA8C;">foo</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#E9F284;">      &#39;</span><span style="color:#F1FA8C;">bar</span><span style="color:#E9F284;">&#39;</span></span>
<span class="line"><span style="color:#F8F8F2;">    ],</span></span>
<span class="line"><span style="color:#6272A4;">    // 写法5 数组里面放普通对象或者stirng,自由组合</span></span>
<span class="line"><span style="color:#F8F8F2;">    count: [</span></span>
<span class="line"><span style="color:#F8F8F2;">      {</span></span>
<span class="line"><span style="color:#50FA7B;">        handler</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">v</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">          console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(v)</span></span>
<span class="line"><span style="color:#F8F8F2;">        },</span></span>
<span class="line"><span style="color:#F8F8F2;">        deep</span><span style="color:#FF79C6;">:</span><span style="color:#BD93F9;"> true</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">        immediate</span><span style="color:#FF79C6;">:</span><span style="color:#BD93F9;"> true</span></span>
<span class="line"><span style="color:#F8F8F2;">      },</span></span>
<span class="line"><span style="color:#F8F8F2;">      {</span></span>
<span class="line"><span style="color:#F8F8F2;">        handler</span><span style="color:#FF79C6;">:</span><span style="color:#E9F284;"> &#39;</span><span style="color:#F1FA8C;">foo</span><span style="color:#E9F284;">&#39;</span></span>
<span class="line"><span style="color:#F8F8F2;">      }</span></span>
<span class="line"><span style="color:#F8F8F2;">    ]</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">function</span><span style="color:#50FA7B;"> initWatch</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">vm</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> Component</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">watch</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> Object</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#FF79C6;">  for</span><span style="color:#F8F8F2;"> (</span><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> key </span><span style="color:#FF79C6;">in</span><span style="color:#F8F8F2;"> watch) {</span></span>
<span class="line"><span style="color:#FF79C6;">    const</span><span style="color:#F8F8F2;"> handler </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> watch[key];</span></span>
<span class="line"><span style="color:#FF79C6;">    if</span><span style="color:#F8F8F2;"> (</span><span style="color:#50FA7B;">isArray</span><span style="color:#F8F8F2;">(handler)) {</span></span>
<span class="line"><span style="color:#FF79C6;">      for</span><span style="color:#F8F8F2;"> (</span><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> i </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> 0</span><span style="color:#F8F8F2;">; i </span><span style="color:#FF79C6;">&lt;</span><span style="color:#F8F8F2;"> handler.length; i</span><span style="color:#FF79C6;">++</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#50FA7B;">        createWatcher</span><span style="color:#F8F8F2;">(vm, key, handler[i]);</span></span>
<span class="line"><span style="color:#F8F8F2;">      }</span></span>
<span class="line"><span style="color:#F8F8F2;">    } </span><span style="color:#FF79C6;">else</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#50FA7B;">      createWatcher</span><span style="color:#F8F8F2;">(vm, key, handler);</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#6272A4;">// 1、兼容性处理，保证 handler 肯定是一个函数</span></span>
<span class="line"><span style="color:#6272A4;">// 2、调用 $watch</span></span>
<span class="line"><span style="color:#FF79C6;">function</span><span style="color:#50FA7B;"> createWatcher</span><span style="color:#F8F8F2;">(</span></span>
<span class="line"><span style="color:#FFB86C;font-style:italic;">  vm</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> Component</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#FFB86C;font-style:italic;">  expOrFn</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> string</span><span style="color:#FF79C6;"> |</span><span style="color:#F8F8F2;"> (() </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#8BE9FD;font-style:italic;"> any</span><span style="color:#F8F8F2;">),</span></span>
<span class="line"><span style="color:#FFB86C;font-style:italic;">  handler</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> any</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#FFB86C;font-style:italic;">  options</span><span style="color:#FF79C6;">?:</span><span style="color:#8BE9FD;font-style:italic;"> Object</span></span>
<span class="line"><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#6272A4;">  // 如果 handler 为对象，则获取其中的 handler 选项的值</span></span>
<span class="line"><span style="color:#FF79C6;">  if</span><span style="color:#F8F8F2;"> (</span><span style="color:#50FA7B;">isPlainObject</span><span style="color:#F8F8F2;">(handler)) {</span></span>
<span class="line"><span style="color:#F8F8F2;">    options </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> handler;</span></span>
<span class="line"><span style="color:#F8F8F2;">    handler </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> handler.handler;</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#6272A4;">  // 如果 hander 为字符串，则说明是一个 methods 方法，获取 vm[handler]</span></span>
<span class="line"><span style="color:#FF79C6;">  if</span><span style="color:#F8F8F2;"> (</span><span style="color:#FF79C6;">typeof</span><span style="color:#F8F8F2;"> handler </span><span style="color:#FF79C6;">===</span><span style="color:#E9F284;"> &quot;</span><span style="color:#F1FA8C;">string</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">    handler </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> vm[handler];</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#FF79C6;">  return</span><span style="color:#F8F8F2;"> vm.</span><span style="color:#50FA7B;">$watch</span><span style="color:#F8F8F2;">(expOrFn, handler, options);</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#8BE9FD;font-style:italic;">Vue</span><span style="color:#F8F8F2;">.prototype.</span><span style="color:#50FA7B;">$watch</span><span style="color:#FF79C6;"> =</span><span style="color:#FF79C6;"> function</span><span style="color:#F8F8F2;"> (</span></span>
<span class="line"><span style="color:#FFB86C;font-style:italic;">  expOrFn</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> string</span><span style="color:#FF79C6;"> |</span><span style="color:#F8F8F2;"> (() </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#8BE9FD;font-style:italic;"> any</span><span style="color:#F8F8F2;">),</span></span>
<span class="line"><span style="color:#FFB86C;font-style:italic;">  cb</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> any</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#FFB86C;font-style:italic;">  options</span><span style="color:#FF79C6;">?:</span><span style="color:#8BE9FD;font-style:italic;"> Record</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#8BE9FD;font-style:italic;">string</span><span style="color:#F8F8F2;">, </span><span style="color:#8BE9FD;font-style:italic;">any</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">)</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> Function</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#FF79C6;">  const</span><span style="color:#F8F8F2;"> vm</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> Component</span><span style="color:#FF79C6;"> =</span><span style="color:#BD93F9;font-style:italic;"> this</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#6272A4;">  // 兼容性处理，因为用户调用 vm.$watch 时设置的 cb 可能是对象</span></span>
<span class="line"><span style="color:#FF79C6;">  if</span><span style="color:#F8F8F2;"> (</span><span style="color:#50FA7B;">isPlainObject</span><span style="color:#F8F8F2;">(cb)) {</span></span>
<span class="line"><span style="color:#FF79C6;">    return</span><span style="color:#50FA7B;"> createWatcher</span><span style="color:#F8F8F2;">(vm, expOrFn, cb, options);</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">  options </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> options </span><span style="color:#FF79C6;">||</span><span style="color:#F8F8F2;"> {};</span></span>
<span class="line"><span style="color:#6272A4;">  //user = true, watcher.run =&gt; this.cb()</span></span>
<span class="line"><span style="color:#6272A4;">  // user时 watcher run方法逻辑不同</span></span>
<span class="line"><span style="color:#F8F8F2;">  options.user </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> true</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#FF79C6;">  const</span><span style="color:#F8F8F2;"> watcher </span><span style="color:#FF79C6;">=</span><span style="color:#FF79C6;font-weight:bold;"> new</span><span style="color:#50FA7B;"> Watcher</span><span style="color:#F8F8F2;">(vm, expOrFn, cb, options);</span></span>
<span class="line"><span style="color:#6272A4;">  // 如果用户设置了 immediate 为 true，则立即执行一次回调函数</span></span>
<span class="line"><span style="color:#FF79C6;">  if</span><span style="color:#F8F8F2;"> (options.immediate) {</span></span>
<span class="line"><span style="color:#FF79C6;">    const</span><span style="color:#F8F8F2;"> info </span><span style="color:#FF79C6;">=</span><span style="color:#F1FA8C;"> \`callback for immediate watcher &quot;</span><span style="color:#FF79C6;">\${</span><span style="color:#F8F8F2;">watcher.expression</span><span style="color:#FF79C6;">}</span><span style="color:#F1FA8C;">&quot;\`</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#50FA7B;">    pushTarget</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#50FA7B;">    invokeWithErrorHandling</span><span style="color:#F8F8F2;">(cb, vm, [watcher.value], vm, info);</span></span>
<span class="line"><span style="color:#50FA7B;">    popTarget</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#FF79C6;">  return</span><span style="color:#FF79C6;"> function</span><span style="color:#50FA7B;"> unwatchFn</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#F8F8F2;">    watcher.</span><span style="color:#50FA7B;">teardown</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#F8F8F2;">  };</span></span>
<span class="line"><span style="color:#F8F8F2;">};</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="响应式原理" tabindex="-1"><a class="header-anchor" href="#响应式原理"><span>响应式原理</span></a></h2><p>利用<code>defineProperty</code>对数据进行拦截,在<code>initState()</code>对 data 和 props 进行拦截，</p><p>initState =&gt; initData =&gt; observe =&gt; Observer =&gt; defineReactive =&gt; initProps</p><p>defineReactive 利用<code>Object.defineProperty</code>对数据的 get 和 set 进行拦截操作</p><p>当组件挂载时<code>new Watcher</code>里的 <code>this.get()</code> 方法中进行<code>pushTarget()</code>将当前 Watcher 赋值给 Dep.target</p><p>对数据进行 <code>get</code>时，触发 get 拦截器，将定义的<code>Dep</code>对象添加进入<code>Watcher</code>中的<code>newDeps</code>数组中,同时将<code>Watcher</code>添加进入<code>Dep</code>中的<code>subs</code>中</p><p>new Watcher =&gt; Dep.target = Watcher this.get() =&gt; new Dep =&gt; dep.depend() = Watcher.addDep(dep) = watcher.newDeps.push(dep) &amp;&amp; dep.subs.push(watcher)</p><p>对数据进行 <code>set</code>时，触发 set 拦截器，触发<code>dep.notify()</code>遍历 subs 数组执行<code>sub.update</code>即<code>watcher.update()</code>将 watcher 加入更新<code>queue</code>队列,执行<code>nextTick</code>更新队列,批量执行<code>queue</code>队列执行<code>watcher.run()</code>在方法中会执行<code>this.get()</code>获取值进行对比，<code>this.get</code>会在次触发<code>updateComponent</code></p><p>this.set() =&gt; dep.notify() =&gt; watcher.update() =&gt; queueWatcher(watcher) =&gt; nextTick(flushSchedulerQueue) =&gt; watcher.run() =&gt; this.get() =&gt; vm._render() =&gt;vm._update() =&gt; patch() =&gt; 更新</p><h3 id="更新过程" tabindex="-1"><a class="header-anchor" href="#更新过程"><span>更新过程</span></a></h3><details class="hint-container details"><summary>更新过程</summary><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#6272A4;">// 1.set()</span></span>
<span class="line"><span style="color:#F8F8F2;">dep.</span><span style="color:#50FA7B;">notify</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#6272A4;">// 2.notify()</span></span>
<span class="line"><span style="color:#50FA7B;">notify</span><span style="color:#F8F8F2;">(info</span><span style="color:#FF79C6;">?:</span><span style="color:#F8F8F2;"> DebuggerEventExtraInfo) {</span></span>
<span class="line"><span style="color:#FF79C6;">  const</span><span style="color:#F8F8F2;"> subs </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;font-style:italic;"> this</span><span style="color:#F8F8F2;">.subs.</span><span style="color:#50FA7B;">slice</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"><span style="color:#FF79C6;">  for</span><span style="color:#F8F8F2;"> (</span><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> i </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> 0</span><span style="color:#F8F8F2;">, l </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> subs.length; i </span><span style="color:#FF79C6;">&lt;</span><span style="color:#F8F8F2;"> l; i</span><span style="color:#FF79C6;">++</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#6272A4;">    //  watcher 类的update方法</span></span>
<span class="line"><span style="color:#F8F8F2;">    subs[i].</span><span style="color:#50FA7B;">update</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#6272A4;">// 3. Watcher update</span></span>
<span class="line"><span style="color:#50FA7B;">update</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#6272A4;">  /* istanbul ignore else */</span></span>
<span class="line"><span style="color:#FF79C6;">  if</span><span style="color:#F8F8F2;"> (</span><span style="color:#BD93F9;font-style:italic;">this</span><span style="color:#F8F8F2;">.lazy) {</span></span>
<span class="line"><span style="color:#BD93F9;font-style:italic;">    this</span><span style="color:#F8F8F2;">.dirty </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> true</span></span>
<span class="line"><span style="color:#F8F8F2;">  } </span><span style="color:#FF79C6;">else</span><span style="color:#FF79C6;"> if</span><span style="color:#F8F8F2;"> (</span><span style="color:#BD93F9;font-style:italic;">this</span><span style="color:#F8F8F2;">.sync) {</span></span>
<span class="line"><span style="color:#BD93F9;font-style:italic;">    this</span><span style="color:#F8F8F2;">.</span><span style="color:#50FA7B;">run</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"><span style="color:#F8F8F2;">  } </span><span style="color:#FF79C6;">else</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#50FA7B;">    queueWatcher</span><span style="color:#F8F8F2;">(</span><span style="color:#BD93F9;font-style:italic;">this</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#6272A4;">// 4. queueWatcher</span></span>
<span class="line"><span style="color:#6272A4;">// flushing</span></span>
<span class="line"><span style="color:#6272A4;">//  false =&gt; flushSchedulerQueue: flushing= true =&gt; resetSchedulerState：flushing = false</span></span>
<span class="line"><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> flushing </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> false</span></span>
<span class="line"><span style="color:#FF79C6;">export</span><span style="color:#FF79C6;"> function</span><span style="color:#50FA7B;"> queueWatcher</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">watcher</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> Watcher</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#FF79C6;">  const</span><span style="color:#F8F8F2;"> id </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> watcher.id</span></span>
<span class="line"><span style="color:#6272A4;">  // 如果 watcher 已经存在，则跳过，不会重复入队</span></span>
<span class="line"><span style="color:#FF79C6;">  if</span><span style="color:#F8F8F2;"> (has[id] </span><span style="color:#FF79C6;">!=</span><span style="color:#BD93F9;"> null</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#FF79C6;">    return</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#FF79C6;">  if</span><span style="color:#F8F8F2;"> (watcher </span><span style="color:#FF79C6;">===</span><span style="color:#F8F8F2;"> Dep.target </span><span style="color:#FF79C6;">&amp;&amp;</span><span style="color:#F8F8F2;"> watcher.noRecurse) {</span></span>
<span class="line"><span style="color:#FF79C6;">    return</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#6272A4;">  // 缓存 watcher.id，用于判断 watcher 是否已经入队</span></span>
<span class="line"><span style="color:#F8F8F2;">  has[id] </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> true</span></span>
<span class="line"><span style="color:#FF79C6;">  if</span><span style="color:#F8F8F2;"> (</span><span style="color:#FF79C6;">!</span><span style="color:#F8F8F2;">flushing) {</span></span>
<span class="line"><span style="color:#6272A4;">    // 当前没有处于刷新队列状态，watcher 直接入队</span></span>
<span class="line"><span style="color:#F8F8F2;">    queue.</span><span style="color:#50FA7B;">push</span><span style="color:#F8F8F2;">(watcher)</span></span>
<span class="line"><span style="color:#F8F8F2;">  } </span><span style="color:#FF79C6;">else</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#6272A4;">    // if already flushing, splice the watcher based on its id</span></span>
<span class="line"><span style="color:#6272A4;">    // if already past its id, it will be run next immediately.</span></span>
<span class="line"><span style="color:#6272A4;">    // 已经在刷新队列了</span></span>
<span class="line"><span style="color:#6272A4;">    // 从队列末尾开始倒序遍历，根据当前 watcher.id 找到它大于的 watcher.id 的位置，然后将自己插入到该位置之后的下一个位置</span></span>
<span class="line"><span style="color:#6272A4;">    // 即将当前 watcher 放入已排序的队列中，且队列仍是有序的</span></span>
<span class="line"><span style="color:#FF79C6;">    let</span><span style="color:#F8F8F2;"> i </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> queue.length </span><span style="color:#FF79C6;">-</span><span style="color:#BD93F9;"> 1</span></span>
<span class="line"><span style="color:#FF79C6;">    while</span><span style="color:#F8F8F2;"> (i </span><span style="color:#FF79C6;">&gt;</span><span style="color:#F8F8F2;"> index </span><span style="color:#FF79C6;">&amp;&amp;</span><span style="color:#F8F8F2;"> queue[i].id </span><span style="color:#FF79C6;">&gt;</span><span style="color:#F8F8F2;"> watcher.id) {</span></span>
<span class="line"><span style="color:#F8F8F2;">      i</span><span style="color:#FF79C6;">--</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">    queue.</span><span style="color:#50FA7B;">splice</span><span style="color:#F8F8F2;">(i </span><span style="color:#FF79C6;">+</span><span style="color:#BD93F9;"> 1</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">0</span><span style="color:#F8F8F2;">, watcher)</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#6272A4;">  // queue the flush</span></span>
<span class="line"><span style="color:#FF79C6;">  if</span><span style="color:#F8F8F2;"> (</span><span style="color:#FF79C6;">!</span><span style="color:#F8F8F2;">waiting) {</span></span>
<span class="line"><span style="color:#F8F8F2;">    waiting </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> true</span></span>
<span class="line"><span style="color:#50FA7B;">    nextTick</span><span style="color:#F8F8F2;">(flushSchedulerQueue)</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#6272A4;">  // 5.nextTick</span></span>
<span class="line"><span style="color:#6272A4;">  // 6.flushSchedulerQueue</span></span>
<span class="line"><span style="color:#6272A4;">  // 7.watcher.run</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="flushschedulerqueue" tabindex="-1"><a class="header-anchor" href="#flushschedulerqueue"><span>flushSchedulerQueue</span></a></h4><ul><li>Flush both queues and run the watchers.</li><li>刷新队列，由 flushCallbacks 函数负责调用，主要做了如下两件事：</li><li>1、更新 flushing 为 ture，表示正在刷新队列，在此期间往队列中 push 新的 watcher 时需要特殊处理（将其放在队列的合适位置）</li><li>2、按照队列中的 watcher.id 从小到大排序，保证先创建的 watcher 先执行，也配合 第一步</li><li>3、遍历 watcher 队列，依次执行 watcher.before、watcher.run，并清除缓存的 watcher</li></ul><details class="hint-container details"><summary>flushSchedulerQueue</summary><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#6272A4;">// 会存入 nextTick的callbacks数组中，当浏览器没有执行队列才会执行</span></span>
<span class="line"><span style="color:#FF79C6;">function</span><span style="color:#50FA7B;"> flushSchedulerQueue</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#F8F8F2;">  currentFlushTimestamp </span><span style="color:#FF79C6;">=</span><span style="color:#50FA7B;"> getNow</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#F8F8F2;">  flushing </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> true</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#FF79C6;">  let</span><span style="color:#F8F8F2;"> watcher, id;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">  // Sort queue before flush.</span></span>
<span class="line"><span style="color:#6272A4;">  // This ensures that:</span></span>
<span class="line"><span style="color:#6272A4;">  // 1. Components are updated from parent to child. (because parent is always</span></span>
<span class="line"><span style="color:#6272A4;">  //    created before the child)</span></span>
<span class="line"><span style="color:#6272A4;">  // 2. A component&#39;s user watchers are run before its render watcher (because</span></span>
<span class="line"><span style="color:#6272A4;">  //    user watchers are created before the render watcher)</span></span>
<span class="line"><span style="color:#6272A4;">  // 3. If a component is destroyed during a parent component&#39;s watcher run,</span></span>
<span class="line"><span style="color:#6272A4;">  //    its watchers can be skipped.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">  queue.</span><span style="color:#50FA7B;">sort</span><span style="color:#F8F8F2;">((</span><span style="color:#FFB86C;font-style:italic;">a</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">b</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> a.id </span><span style="color:#FF79C6;">-</span><span style="color:#F8F8F2;"> b.id);</span></span>
<span class="line"><span style="color:#6272A4;">  /**</span></span>
<span class="line"><span style="color:#6272A4;">   * 刷新队列之前先给队列排序（升序），可以保证：</span></span>
<span class="line"><span style="color:#6272A4;">   *   1、组件的更新顺序为从父级到子级，因为父组件总是在子组件之前被创建</span></span>
<span class="line"><span style="color:#6272A4;">   *   2、一个组件的用户 watcher 在其渲染 watcher 之前被执行，因为用户 watcher 先于 渲染 watcher 创建</span></span>
<span class="line"><span style="color:#6272A4;">   *   3、如果一个组件在其父组件的 watcher 执行期间被销毁，则它的 watcher 可以被跳过</span></span>
<span class="line"><span style="color:#6272A4;">   * 排序以后在刷新队列期间新进来的 watcher 也会按顺序放入队列的合适位置</span></span>
<span class="line"><span style="color:#6272A4;">   */</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">  for</span><span style="color:#F8F8F2;"> (index </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> 0</span><span style="color:#F8F8F2;">; index </span><span style="color:#FF79C6;">&lt;</span><span style="color:#F8F8F2;"> queue.length; index</span><span style="color:#FF79C6;">++</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">    watcher </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> queue[index];</span></span>
<span class="line"><span style="color:#FF79C6;">    if</span><span style="color:#F8F8F2;"> (watcher.before) {</span></span>
<span class="line"><span style="color:#6272A4;">      // 执行 before 钩子，在使用 vm.$watch 或者 watch 选项时可以通过配置项（options.before）传递</span></span>
<span class="line"><span style="color:#F8F8F2;">      watcher.</span><span style="color:#50FA7B;">before</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#6272A4;">    // 将缓存的 watcher 清除</span></span>
<span class="line"><span style="color:#F8F8F2;">    id </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> watcher.id;</span></span>
<span class="line"><span style="color:#F8F8F2;">    has[id] </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> null</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#6272A4;">    //执行 watcher.run，最终触发更新函数，比如 updateComponent 或者 获取 this.xx（xx 为用户 watch 的第二个参数），当然第二个参数也有可能是一个函数，那就直接执行</span></span>
<span class="line"><span style="color:#F8F8F2;">    watcher.</span><span style="color:#50FA7B;">run</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">  // keep copies of post queues before resetting state</span></span>
<span class="line"><span style="color:#FF79C6;">  const</span><span style="color:#F8F8F2;"> activatedQueue </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> activatedChildren.</span><span style="color:#50FA7B;">slice</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#FF79C6;">  const</span><span style="color:#F8F8F2;"> updatedQueue </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> queue.</span><span style="color:#50FA7B;">slice</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#6272A4;">  /**</span></span>
<span class="line"><span style="color:#6272A4;">   * 重置调度状态：</span></span>
<span class="line"><span style="color:#6272A4;">   *   1、重置 has 缓存对象，has = {}</span></span>
<span class="line"><span style="color:#6272A4;">   *   2、waiting = flushing = false，表示刷新队列结束</span></span>
<span class="line"><span style="color:#6272A4;">   *     waiting = flushing = false，表示可以像 callbacks 数组中放入新的 flushSchedulerQueue 函数，并且可以向浏览器的任务队列放入下一个 flushCallbacks 函数了</span></span>
<span class="line"><span style="color:#6272A4;">   */</span></span>
<span class="line"><span style="color:#50FA7B;">  resetSchedulerState</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">  // call component updated and activated hooks</span></span>
<span class="line"><span style="color:#50FA7B;">  callActivatedHooks</span><span style="color:#F8F8F2;">(activatedQueue);</span></span>
<span class="line"><span style="color:#50FA7B;">  callUpdatedHooks</span><span style="color:#F8F8F2;">(updatedQueue);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">  // devtool hook</span></span>
<span class="line"><span style="color:#6272A4;">  /* istanbul ignore if */</span></span>
<span class="line"><span style="color:#FF79C6;">  if</span><span style="color:#F8F8F2;"> (devtools </span><span style="color:#FF79C6;">&amp;&amp;</span><span style="color:#F8F8F2;"> config.devtools) {</span></span>
<span class="line"><span style="color:#F8F8F2;">    devtools.</span><span style="color:#50FA7B;">emit</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">flush</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details></details><details class="hint-container details"><summary>resetSchedulerState</summary><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#6272A4;">// 重置更新队列</span></span>
<span class="line"><span style="color:#FF79C6;">function</span><span style="color:#50FA7B;"> resetSchedulerState</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#F8F8F2;">  index </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> queue.length </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> activatedChildren.length </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> 0</span></span>
<span class="line"><span style="color:#F8F8F2;">  has </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> {}</span></span>
<span class="line"><span style="color:#F8F8F2;">  waiting </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> flushing </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> false</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h5 id="watcher-run" tabindex="-1"><a class="header-anchor" href="#watcher-run"><span>watcher.run</span></a></h5><details class="hint-container details"><summary>watcher.run</summary><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#6272A4;">/*</span></span>
<span class="line"><span style="color:#6272A4;"> * 由 刷新队列函数 flushSchedulerQueue 调用，如果是同步 watch，则由 this.update 直接调用，完成如下几件事：</span></span>
<span class="line"><span style="color:#6272A4;"> *   1、执行实例化 watcher 传递的第二个参数，updateComponent 或者 获取 this.xx 的一个函数(parsePath 返回的函数)</span></span>
<span class="line"><span style="color:#6272A4;"> *   2、更新旧值为新值</span></span>
<span class="line"><span style="color:#6272A4;"> *   3、执行实例化 watcher 时传递的第三个参数，比如用户 watcher 的回调函数</span></span>
<span class="line"><span style="color:#6272A4;">*/</span></span>
<span class="line"><span style="color:#50FA7B;">  run</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#FF79C6;">    if</span><span style="color:#F8F8F2;"> (</span><span style="color:#BD93F9;font-style:italic;">this</span><span style="color:#F8F8F2;">.active) {</span></span>
<span class="line"><span style="color:#6272A4;">       // 调用 this.get 方法</span></span>
<span class="line"><span style="color:#FF79C6;">      const</span><span style="color:#F8F8F2;"> value </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;font-style:italic;"> this</span><span style="color:#F8F8F2;">.</span><span style="color:#50FA7B;">get</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"><span style="color:#FF79C6;">      if</span><span style="color:#F8F8F2;"> (</span></span>
<span class="line"><span style="color:#F8F8F2;">        value </span><span style="color:#FF79C6;">!==</span><span style="color:#BD93F9;font-style:italic;"> this</span><span style="color:#F8F8F2;">.value </span><span style="color:#FF79C6;">||</span></span>
<span class="line"><span style="color:#6272A4;">        // Deep watchers and watchers on Object/Arrays should fire even</span></span>
<span class="line"><span style="color:#6272A4;">        // when the value is the same, because the value may</span></span>
<span class="line"><span style="color:#6272A4;">        // have mutated.</span></span>
<span class="line"><span style="color:#50FA7B;">        isObject</span><span style="color:#F8F8F2;">(value) </span><span style="color:#FF79C6;">||</span></span>
<span class="line"><span style="color:#BD93F9;font-style:italic;">        this</span><span style="color:#F8F8F2;">.deep</span></span>
<span class="line"><span style="color:#F8F8F2;">      ) {</span></span>
<span class="line"><span style="color:#6272A4;">        // set new value</span></span>
<span class="line"><span style="color:#6272A4;">        // 更新旧值为新值</span></span>
<span class="line"><span style="color:#FF79C6;">        const</span><span style="color:#F8F8F2;"> oldValue </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;font-style:italic;"> this</span><span style="color:#F8F8F2;">.value</span></span>
<span class="line"><span style="color:#BD93F9;font-style:italic;">        this</span><span style="color:#F8F8F2;">.value </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> value</span></span>
<span class="line"><span style="color:#FF79C6;">        if</span><span style="color:#F8F8F2;"> (</span><span style="color:#BD93F9;font-style:italic;">this</span><span style="color:#F8F8F2;">.user) {</span></span>
<span class="line"><span style="color:#6272A4;">          // 如果是用户 watcher，则执行用户传递的第三个参数 —— 回调函数，参数为 val 和 oldVal</span></span>
<span class="line"><span style="color:#FF79C6;">          const</span><span style="color:#F8F8F2;"> info </span><span style="color:#FF79C6;">=</span><span style="color:#F1FA8C;"> \`callback for watcher &quot;</span><span style="color:#FF79C6;">\${</span><span style="color:#BD93F9;font-style:italic;">this</span><span style="color:#F8F8F2;">.expression</span><span style="color:#FF79C6;">}</span><span style="color:#F1FA8C;">&quot;\`</span></span>
<span class="line"><span style="color:#50FA7B;">          invokeWithErrorHandling</span><span style="color:#F8F8F2;">(</span></span>
<span class="line"><span style="color:#BD93F9;font-style:italic;">            this</span><span style="color:#F8F8F2;">.cb,</span></span>
<span class="line"><span style="color:#BD93F9;font-style:italic;">            this</span><span style="color:#F8F8F2;">.vm,</span></span>
<span class="line"><span style="color:#F8F8F2;">            [value, oldValue],</span></span>
<span class="line"><span style="color:#BD93F9;font-style:italic;">            this</span><span style="color:#F8F8F2;">.vm,</span></span>
<span class="line"><span style="color:#F8F8F2;">            info</span></span>
<span class="line"><span style="color:#F8F8F2;">          )</span></span>
<span class="line"><span style="color:#F8F8F2;">        } </span><span style="color:#FF79C6;">else</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#6272A4;">           // 渲染 watcher，this.cb = noop，一个空函数</span></span>
<span class="line"><span style="color:#BD93F9;font-style:italic;">          this</span><span style="color:#F8F8F2;">.cb.</span><span style="color:#50FA7B;">call</span><span style="color:#F8F8F2;">(</span><span style="color:#BD93F9;font-style:italic;">this</span><span style="color:#F8F8F2;">.vm, value, oldValue)</span></span>
<span class="line"><span style="color:#F8F8F2;">        }</span></span>
<span class="line"><span style="color:#F8F8F2;">      }</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><p>Object.defineProperty() 方法会直接在一个对象上定义一个新属性，或者修改一个对象的现有属性，并返回此对象。</p><details class="hint-container details"><summary>defineProperty</summary><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> car </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> {};</span></span>
<span class="line"><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> val </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> 3000</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">Object.</span><span style="color:#50FA7B;">defineProperty</span><span style="color:#F8F8F2;">(car, </span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">price</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">, {</span></span>
<span class="line"><span style="color:#F8F8F2;">  enumerable</span><span style="color:#FF79C6;">:</span><span style="color:#BD93F9;"> true</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">  configurable</span><span style="color:#FF79C6;">:</span><span style="color:#BD93F9;"> true</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#50FA7B;">  get</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#F8F8F2;">    console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">price属性被读取了</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#FF79C6;">    return</span><span style="color:#F8F8F2;"> val;</span></span>
<span class="line"><span style="color:#F8F8F2;">  },</span></span>
<span class="line"><span style="color:#50FA7B;">  set</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">newVal</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">    console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">price属性被修改了</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">    val </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> newVal;</span></span>
<span class="line"><span style="color:#F8F8F2;">  },</span></span>
<span class="line"><span style="color:#F8F8F2;">});</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h3 id="observe" tabindex="-1"><a class="header-anchor" href="#observe"><span>observe</span></a></h3><p><code>initState()</code>--&gt;<code>observe(data)</code>--&gt;<code>new Observer()</code> 监测数据 为对象创建观察者实例，如果对象已经被观察过，则返回已有的观察者实例，否则创建新的观察者实例</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#6272A4;">// initData</span></span>
<span class="line"><span style="color:#FF79C6;">function</span><span style="color:#50FA7B;"> initData</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">vm</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> Component</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#FF79C6;">  let</span><span style="color:#F8F8F2;"> data</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> any</span><span style="color:#FF79C6;"> =</span><span style="color:#F8F8F2;"> vm.$options.data;</span></span>
<span class="line"><span style="color:#F8F8F2;">  data </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> vm._data </span><span style="color:#FF79C6;">=</span><span style="color:#50FA7B;"> isFunction</span><span style="color:#F8F8F2;">(data) </span><span style="color:#FF79C6;">?</span><span style="color:#50FA7B;"> getData</span><span style="color:#F8F8F2;">(data, vm) </span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> data </span><span style="color:#FF79C6;">||</span><span style="color:#F8F8F2;"> {};</span></span>
<span class="line"><span style="color:#6272A4;">  // ...</span></span>
<span class="line"><span style="color:#6272A4;">  // observe data</span></span>
<span class="line"><span style="color:#FF79C6;">  const</span><span style="color:#F8F8F2;"> ob </span><span style="color:#FF79C6;">=</span><span style="color:#50FA7B;"> observe</span><span style="color:#F8F8F2;">(data);</span></span>
<span class="line"><span style="color:#F8F8F2;">  ob </span><span style="color:#FF79C6;">&amp;&amp;</span><span style="color:#F8F8F2;"> ob.vmCount</span><span style="color:#FF79C6;">++</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><details class="hint-container details"><summary>observe</summary><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#6272A4;">// 给非 VNode 的对象类型数据添加一个 Observer，如果已经添加过则直接返回</span></span>
<span class="line"><span style="color:#FF79C6;">export</span><span style="color:#FF79C6;"> function</span><span style="color:#50FA7B;"> observe</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">value</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> any</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">shallow</span><span style="color:#FF79C6;">?:</span><span style="color:#8BE9FD;font-style:italic;"> boolean</span><span style="color:#F8F8F2;">)</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> Observer</span><span style="color:#FF79C6;"> |</span><span style="color:#8BE9FD;font-style:italic;"> void</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#FF79C6;">  if</span><span style="color:#F8F8F2;"> (</span><span style="color:#FF79C6;">!</span><span style="color:#50FA7B;">isObject</span><span style="color:#F8F8F2;">(value) </span><span style="color:#FF79C6;">||</span><span style="color:#50FA7B;"> isRef</span><span style="color:#F8F8F2;">(value) </span><span style="color:#FF79C6;">||</span><span style="color:#F8F8F2;"> value </span><span style="color:#FF79C6;">instanceof</span><span style="color:#8BE9FD;font-style:italic;"> VNode</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#FF79C6;">    return</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#FF79C6;">  let</span><span style="color:#F8F8F2;"> ob</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> Observer</span><span style="color:#FF79C6;"> |</span><span style="color:#8BE9FD;font-style:italic;"> void</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#FF79C6;">  if</span><span style="color:#F8F8F2;"> (</span><span style="color:#50FA7B;">hasOwn</span><span style="color:#F8F8F2;">(value, </span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">__ob__</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">&amp;&amp;</span><span style="color:#F8F8F2;"> value.__ob__ </span><span style="color:#FF79C6;">instanceof</span><span style="color:#8BE9FD;font-style:italic;"> Observer</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#6272A4;">    // 如果 value 对象上存在 __ob__ 属性，则表示已经做过观察了，直接返回 __ob__ 属性</span></span>
<span class="line"><span style="color:#F8F8F2;">    ob </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> value.__ob__;</span></span>
<span class="line"><span style="color:#F8F8F2;">  } </span><span style="color:#FF79C6;">else</span><span style="color:#FF79C6;"> if</span><span style="color:#F8F8F2;"> (</span></span>
<span class="line"><span style="color:#F8F8F2;">    shouldObserve </span><span style="color:#FF79C6;">&amp;&amp;</span></span>
<span class="line"><span style="color:#FF79C6;">    !</span><span style="color:#50FA7B;">isServerRendering</span><span style="color:#F8F8F2;">() </span><span style="color:#FF79C6;">&amp;&amp;</span></span>
<span class="line"><span style="color:#F8F8F2;">    (</span><span style="color:#50FA7B;">isArray</span><span style="color:#F8F8F2;">(value) </span><span style="color:#FF79C6;">||</span><span style="color:#50FA7B;"> isPlainObject</span><span style="color:#F8F8F2;">(value)) </span><span style="color:#FF79C6;">&amp;&amp;</span></span>
<span class="line"><span style="color:#F8F8F2;">    Object.</span><span style="color:#50FA7B;">isExtensible</span><span style="color:#F8F8F2;">(value) </span><span style="color:#FF79C6;">&amp;&amp;</span></span>
<span class="line"><span style="color:#FF79C6;">    !</span><span style="color:#F8F8F2;">value.__v_skip</span></span>
<span class="line"><span style="color:#F8F8F2;">  ) {</span></span>
<span class="line"><span style="color:#F8F8F2;">    ob </span><span style="color:#FF79C6;">=</span><span style="color:#FF79C6;font-weight:bold;"> new</span><span style="color:#50FA7B;"> Observer</span><span style="color:#F8F8F2;">(value, shallow);</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#FF79C6;">  return</span><span style="color:#F8F8F2;"> ob;</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h3 id="observer" tabindex="-1"><a class="header-anchor" href="#observer"><span>Observer</span></a></h3><p>对象的属性添加 getter 和 setter，用于依赖收集和派发更新：</p><details class="hint-container details"><summary>Observer</summary><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">export</span><span style="color:#FF79C6;"> class</span><span style="color:#8BE9FD;"> Observer</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  dep</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> Dep</span></span>
<span class="line"><span style="color:#F8F8F2;">  vmCount</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> number</span><span style="color:#6272A4;"> // number of vms that have this object as root $data</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">  constructor</span><span style="color:#F8F8F2;">(</span><span style="color:#FF79C6;">public</span><span style="color:#FFB86C;font-style:italic;"> value</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> any</span><span style="color:#F8F8F2;">, </span><span style="color:#FF79C6;">public</span><span style="color:#FFB86C;font-style:italic;"> shallow</span><span style="color:#FF79C6;"> =</span><span style="color:#BD93F9;"> false</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#6272A4;">    // this.value = value</span></span>
<span class="line"><span style="color:#BD93F9;font-style:italic;">    this</span><span style="color:#F8F8F2;">.dep </span><span style="color:#FF79C6;">=</span><span style="color:#FF79C6;font-weight:bold;"> new</span><span style="color:#50FA7B;"> Dep</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"><span style="color:#BD93F9;font-style:italic;">    this</span><span style="color:#F8F8F2;">.vmCount </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> 0</span></span>
<span class="line"><span style="color:#6272A4;">    // 给value新增一个__ob__属性，值为该value的Observer实例</span></span>
<span class="line"><span style="color:#6272A4;">    // 相当于为value打上标记，表示它已经被转化成响应式了，避免重复操作</span></span>
<span class="line"><span style="color:#50FA7B;">    def</span><span style="color:#F8F8F2;">(value, </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">__ob__</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;font-style:italic;">this</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#FF79C6;">    if</span><span style="color:#F8F8F2;"> (</span><span style="color:#50FA7B;">isArray</span><span style="color:#F8F8F2;">(value)) {</span></span>
<span class="line"><span style="color:#6272A4;">        /**</span></span>
<span class="line"><span style="color:#6272A4;">       * value 为数组</span></span>
<span class="line"><span style="color:#6272A4;">       * hasProto = &#39;__proto__&#39; in {}</span></span>
<span class="line"><span style="color:#6272A4;">       * 用于判断对象是否存在 __proto__ 属性，通过 obj.__proto__ 可以访问对象的原型链</span></span>
<span class="line"><span style="color:#6272A4;">       * 但由于 __proto__ 不是标准属性，所以有些浏览器不支持，比如 IE6-10，Opera10.1</span></span>
<span class="line"><span style="color:#6272A4;">       * 为什么要判断，是因为一会儿要通过 __proto__ 操作数据的原型链</span></span>
<span class="line"><span style="color:#6272A4;">       * 覆盖数组默认的七个原型方法，以实现数组响应式</span></span>
<span class="line"><span style="color:#6272A4;">       * https://juejin.cn/post/6950826293923414047</span></span>
<span class="line"><span style="color:#6272A4;">       */</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">      if</span><span style="color:#F8F8F2;"> (hasProto) {</span></span>
<span class="line"><span style="color:#6272A4;">        // 如果数组有_proto_属性 则将_proto_指向 数组的七个方法</span></span>
<span class="line"><span style="color:#6272A4;">        // value.__proto__ = arrayMathods</span></span>
<span class="line"><span style="color:#50FA7B;">        protoAugment</span><span style="color:#F8F8F2;">(value, arrayMethods)</span></span>
<span class="line"><span style="color:#F8F8F2;">      } </span><span style="color:#FF79C6;">else</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#6272A4;">        // 数组不支持_proto_</span></span>
<span class="line"><span style="color:#6272A4;">        // 循环遍历arrayKeys 通过defineProperty给数组添加方法</span></span>
<span class="line"><span style="color:#50FA7B;">        copyAugment</span><span style="color:#F8F8F2;">(value, arrayMethods, arrayKeys)</span></span>
<span class="line"><span style="color:#F8F8F2;">      }</span></span>
<span class="line"><span style="color:#FF79C6;">      if</span><span style="color:#F8F8F2;"> (</span><span style="color:#FF79C6;">!</span><span style="color:#F8F8F2;">shallow) {</span></span>
<span class="line"><span style="color:#BD93F9;font-style:italic;">        this</span><span style="color:#F8F8F2;">.</span><span style="color:#50FA7B;">observeArray</span><span style="color:#F8F8F2;">(value)</span></span>
<span class="line"><span style="color:#F8F8F2;">      }</span></span>
<span class="line"><span style="color:#F8F8F2;">    } </span><span style="color:#FF79C6;">else</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#BD93F9;font-style:italic;">      this</span><span style="color:#F8F8F2;">.</span><span style="color:#50FA7B;">walk</span><span style="color:#F8F8F2;">(value, shallow)</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">  /**</span></span>
<span class="line"><span style="color:#6272A4;">   * Walk through all properties and convert them into</span></span>
<span class="line"><span style="color:#6272A4;">   * getter/setters. This method should only be called when</span></span>
<span class="line"><span style="color:#6272A4;">   * value type is Object.</span></span>
<span class="line"><span style="color:#6272A4;">   * 遍历对象上的每个 key，为每个 key 设置响应式</span></span>
<span class="line"><span style="color:#6272A4;">   * 仅当值为对象时才会走这里</span></span>
<span class="line"><span style="color:#6272A4;">   */</span></span>
<span class="line"><span style="color:#6272A4;">  // 使一个对象转化成可观测对象</span></span>
<span class="line"><span style="color:#50FA7B;">  walk</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">obj</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> object</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">shallow</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> boolean</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#FF79C6;">    const</span><span style="color:#F8F8F2;"> keys </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> Object.</span><span style="color:#50FA7B;">keys</span><span style="color:#F8F8F2;">(obj)</span></span>
<span class="line"><span style="color:#FF79C6;">    for</span><span style="color:#F8F8F2;"> (</span><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> i </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> 0</span><span style="color:#F8F8F2;">; i </span><span style="color:#FF79C6;">&lt;</span><span style="color:#F8F8F2;"> keys.length; i</span><span style="color:#FF79C6;">++</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#FF79C6;">      const</span><span style="color:#F8F8F2;"> key </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> keys[i]</span></span>
<span class="line"><span style="color:#50FA7B;">      defineReactive</span><span style="color:#F8F8F2;">(obj, key, NO_INIITIAL_VALUE, </span><span style="color:#BD93F9;">undefined</span><span style="color:#F8F8F2;">, shallow)</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">  /**</span></span>
<span class="line"><span style="color:#6272A4;">   * Observe a list of Array items.</span></span>
<span class="line"><span style="color:#6272A4;">    遍历数组，为数组的每一项设置观察，处理数组元素为对象的情况</span></span>
<span class="line"><span style="color:#6272A4;">   */</span></span>
<span class="line"><span style="color:#50FA7B;">  observeArray</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">items</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> Array</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#8BE9FD;font-style:italic;">any</span><span style="color:#F8F8F2;">&gt;) {</span></span>
<span class="line"><span style="color:#FF79C6;">    for</span><span style="color:#F8F8F2;"> (</span><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> i </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> 0</span><span style="color:#F8F8F2;">, l </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> items.length; i </span><span style="color:#FF79C6;">&lt;</span><span style="color:#F8F8F2;"> l; i</span><span style="color:#FF79C6;">++</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#50FA7B;">      observe</span><span style="color:#F8F8F2;">(items[i])</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h4 id="arraymethods" tabindex="-1"><a class="header-anchor" href="#arraymethods"><span>arrayMethods</span></a></h4><details class="hint-container details"><summary>arrayMethods</summary><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> arrayProto </span><span style="color:#FF79C6;">=</span><span style="color:#8BE9FD;font-style:italic;"> Array</span><span style="color:#F8F8F2;">.prototype;</span></span>
<span class="line"><span style="color:#FF79C6;">export</span><span style="color:#FF79C6;"> const</span><span style="color:#F8F8F2;"> arrayMethods </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> Object.</span><span style="color:#50FA7B;">create</span><span style="color:#F8F8F2;">(arrayProto);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> methodsToPatch </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> [</span></span>
<span class="line"><span style="color:#E9F284;">  &quot;</span><span style="color:#F1FA8C;">push</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#E9F284;">  &quot;</span><span style="color:#F1FA8C;">pop</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#E9F284;">  &quot;</span><span style="color:#F1FA8C;">shift</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#E9F284;">  &quot;</span><span style="color:#F1FA8C;">unshift</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#E9F284;">  &quot;</span><span style="color:#F1FA8C;">splice</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#E9F284;">  &quot;</span><span style="color:#F1FA8C;">sort</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#E9F284;">  &quot;</span><span style="color:#F1FA8C;">reverse</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">/**</span></span>
<span class="line"><span style="color:#6272A4;"> * Intercept mutating methods and emit events</span></span>
<span class="line"><span style="color:#6272A4;"> */</span></span>
<span class="line"><span style="color:#F8F8F2;">methodsToPatch.</span><span style="color:#50FA7B;">forEach</span><span style="color:#F8F8F2;">(</span><span style="color:#FF79C6;">function</span><span style="color:#F8F8F2;"> (</span><span style="color:#FFB86C;font-style:italic;">method</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#6272A4;">  // cache original method</span></span>
<span class="line"><span style="color:#FF79C6;">  const</span><span style="color:#F8F8F2;"> original </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> arrayProto[method];</span></span>
<span class="line"><span style="color:#50FA7B;">  def</span><span style="color:#F8F8F2;">(arrayMethods, method, </span><span style="color:#FF79C6;">function</span><span style="color:#50FA7B;"> mutator</span><span style="color:#F8F8F2;">(</span><span style="color:#FF79C6;">...</span><span style="color:#FFB86C;font-style:italic;">args</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#FF79C6;">    const</span><span style="color:#F8F8F2;"> result </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> original.</span><span style="color:#50FA7B;">apply</span><span style="color:#F8F8F2;">(</span><span style="color:#BD93F9;font-style:italic;">this</span><span style="color:#F8F8F2;">, args);</span></span>
<span class="line"><span style="color:#FF79C6;">    const</span><span style="color:#F8F8F2;"> ob </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;font-style:italic;"> this</span><span style="color:#F8F8F2;">.__ob__;</span></span>
<span class="line"><span style="color:#FF79C6;">    let</span><span style="color:#F8F8F2;"> inserted;</span></span>
<span class="line"><span style="color:#FF79C6;">    switch</span><span style="color:#F8F8F2;"> (method) {</span></span>
<span class="line"><span style="color:#FF79C6;">      case</span><span style="color:#E9F284;"> &quot;</span><span style="color:#F1FA8C;">push</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#FF79C6;">      case</span><span style="color:#E9F284;"> &quot;</span><span style="color:#F1FA8C;">unshift</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#F8F8F2;">        inserted </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> args;</span></span>
<span class="line"><span style="color:#FF79C6;">        break</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#FF79C6;">      case</span><span style="color:#E9F284;"> &quot;</span><span style="color:#F1FA8C;">splice</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#F8F8F2;">        inserted </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> args.</span><span style="color:#50FA7B;">slice</span><span style="color:#F8F8F2;">(</span><span style="color:#BD93F9;">2</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#FF79C6;">        break</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#FF79C6;">    if</span><span style="color:#F8F8F2;"> (inserted) ob.</span><span style="color:#50FA7B;">observeArray</span><span style="color:#F8F8F2;">(inserted);</span></span>
<span class="line"><span style="color:#6272A4;">    // notify change</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">    ob.dep.</span><span style="color:#50FA7B;">notify</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">    return</span><span style="color:#F8F8F2;"> result;</span></span>
<span class="line"><span style="color:#F8F8F2;">  });</span></span>
<span class="line"><span style="color:#F8F8F2;">});</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h4 id="definereactive" tabindex="-1"><a class="header-anchor" href="#definereactive"><span>defineReactive</span></a></h4><ul><li>拦截 obj[key] 的读取和设置操作：</li><li>1、在第一次读取时收集依赖，比如执行 render 函数生成虚拟 DOM 时会有读取操作</li><li>2、在更新时设置新值并通知依赖更新</li></ul><details class="hint-container details"><summary>defineReactive</summary><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">export</span><span style="color:#FF79C6;"> function</span><span style="color:#50FA7B;"> defineReactive</span><span style="color:#F8F8F2;">(</span></span>
<span class="line"><span style="color:#FFB86C;font-style:italic;">  obj</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> object</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#FFB86C;font-style:italic;">  key</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> string</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#FFB86C;font-style:italic;">  val</span><span style="color:#FF79C6;">?:</span><span style="color:#8BE9FD;font-style:italic;"> any</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#50FA7B;">  customSetter</span><span style="color:#FF79C6;">?:</span><span style="color:#8BE9FD;font-style:italic;"> Function</span><span style="color:#FF79C6;"> |</span><span style="color:#8BE9FD;font-style:italic;"> null</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#FFB86C;font-style:italic;">  shallow</span><span style="color:#FF79C6;">?:</span><span style="color:#8BE9FD;font-style:italic;"> boolean</span></span>
<span class="line"><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#FF79C6;">  const</span><span style="color:#F8F8F2;"> dep </span><span style="color:#FF79C6;">=</span><span style="color:#FF79C6;font-weight:bold;"> new</span><span style="color:#50FA7B;"> Dep</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#6272A4;">  // 获取 obj[key] 的属性描述符，发现它是不可配置对象的话直接 return</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">  /*</span></span>
<span class="line"><span style="color:#6272A4;">  Object.getOwnPropertyDescriptor() 方法返回指定对象上一个自有属性对应的属性描述符。</span></span>
<span class="line"><span style="color:#6272A4;">  */</span></span>
<span class="line"><span style="color:#FF79C6;">  const</span><span style="color:#F8F8F2;"> property </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> Object.</span><span style="color:#50FA7B;">getOwnPropertyDescriptor</span><span style="color:#F8F8F2;">(obj, key);</span></span>
<span class="line"><span style="color:#FF79C6;">  if</span><span style="color:#F8F8F2;"> (property </span><span style="color:#FF79C6;">&amp;&amp;</span><span style="color:#F8F8F2;"> property.configurable </span><span style="color:#FF79C6;">===</span><span style="color:#BD93F9;"> false</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#FF79C6;">    return</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">  // cater for pre-defined getter/setters</span></span>
<span class="line"><span style="color:#FF79C6;">  const</span><span style="color:#F8F8F2;"> getter </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> property </span><span style="color:#FF79C6;">&amp;&amp;</span><span style="color:#F8F8F2;"> property.get;</span></span>
<span class="line"><span style="color:#FF79C6;">  const</span><span style="color:#F8F8F2;"> setter </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> property </span><span style="color:#FF79C6;">&amp;&amp;</span><span style="color:#F8F8F2;"> property.set;</span></span>
<span class="line"><span style="color:#FF79C6;">  if</span><span style="color:#F8F8F2;"> (</span></span>
<span class="line"><span style="color:#F8F8F2;">    (</span><span style="color:#FF79C6;">!</span><span style="color:#F8F8F2;">getter </span><span style="color:#FF79C6;">||</span><span style="color:#F8F8F2;"> setter) </span><span style="color:#FF79C6;">&amp;&amp;</span></span>
<span class="line"><span style="color:#F8F8F2;">    (val </span><span style="color:#FF79C6;">===</span><span style="color:#F8F8F2;"> NO_INIITIAL_VALUE </span><span style="color:#FF79C6;">||</span><span style="color:#BD93F9;font-style:italic;"> arguments</span><span style="color:#F8F8F2;">.length </span><span style="color:#FF79C6;">===</span><span style="color:#BD93F9;"> 2</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">  ) {</span></span>
<span class="line"><span style="color:#F8F8F2;">    val </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> obj[key];</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">  // 只有对象</span></span>
<span class="line"><span style="color:#6272A4;">  // 递归调用，处理 val 即 obj[key] 的值为对象的情况，保证对象中的所有 key 都被观察</span></span>
<span class="line"><span style="color:#6272A4;">  // observe 放回一个Observer对象</span></span>
<span class="line"><span style="color:#FF79C6;">  let</span><span style="color:#F8F8F2;"> childOb </span><span style="color:#FF79C6;">=</span><span style="color:#FF79C6;"> !</span><span style="color:#F8F8F2;">shallow </span><span style="color:#FF79C6;">&amp;&amp;</span><span style="color:#50FA7B;"> observe</span><span style="color:#F8F8F2;">(val);</span></span>
<span class="line"><span style="color:#F8F8F2;">  Object.</span><span style="color:#50FA7B;">defineProperty</span><span style="color:#F8F8F2;">(obj, key, {</span></span>
<span class="line"><span style="color:#F8F8F2;">    enumerable</span><span style="color:#FF79C6;">:</span><span style="color:#BD93F9;"> true</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">    configurable</span><span style="color:#FF79C6;">:</span><span style="color:#BD93F9;"> true</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#50FA7B;">    get</span><span style="color:#FF79C6;">:</span><span style="color:#FF79C6;"> function</span><span style="color:#50FA7B;"> reactiveGetter</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#FF79C6;">      const</span><span style="color:#F8F8F2;"> value </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> getter </span><span style="color:#FF79C6;">?</span><span style="color:#F8F8F2;"> getter.</span><span style="color:#50FA7B;">call</span><span style="color:#F8F8F2;">(obj) </span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> val;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">      /**</span></span>
<span class="line"><span style="color:#6272A4;">       * Dep.target 为 Dep 类的一个静态属性，值为 watcher，在实例化 Watcher 时会被设置</span></span>
<span class="line"><span style="color:#6272A4;">       * 实例化 Watcher 时会执行 new Watcher 时传递的回调函数（computed 除外，因为它懒执行）</span></span>
<span class="line"><span style="color:#6272A4;">       * 而回调函数中如果有 vm.key 的读取行为，则会触发这里的 读取 拦截，进行依赖收集</span></span>
<span class="line"><span style="color:#6272A4;">       * 回调函数执行完以后又会将 Dep.target 设置为 null，避免这里重复收集依赖</span></span>
<span class="line"><span style="color:#6272A4;">       */</span></span>
<span class="line"><span style="color:#FF79C6;">      if</span><span style="color:#F8F8F2;"> (Dep.target) {</span></span>
<span class="line"><span style="color:#6272A4;">        // 在 dep 的subs数组中添加watcher</span></span>
<span class="line"><span style="color:#F8F8F2;">        dep.</span><span style="color:#50FA7B;">depend</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#6272A4;">        // childOb 表示对象中嵌套对象的观察者对象，如果存在也对其进行依赖收集</span></span>
<span class="line"><span style="color:#FF79C6;">        if</span><span style="color:#F8F8F2;"> (childOb) {</span></span>
<span class="line"><span style="color:#F8F8F2;">          childOb.dep.</span><span style="color:#50FA7B;">depend</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#FF79C6;">          if</span><span style="color:#F8F8F2;"> (</span><span style="color:#50FA7B;">isArray</span><span style="color:#F8F8F2;">(value)) {</span></span>
<span class="line"><span style="color:#50FA7B;">            dependArray</span><span style="color:#F8F8F2;">(value);</span></span>
<span class="line"><span style="color:#6272A4;">            /*</span></span>
<span class="line"><span style="color:#6272A4;">            function dependArray(value: Array&lt;any&gt;) {</span></span>
<span class="line"><span style="color:#6272A4;">              for (let e, i = 0, l = value.length; i &lt; l; i++) {</span></span>
<span class="line"><span style="color:#6272A4;">                e = value[i]</span></span>
<span class="line"><span style="color:#6272A4;">                if (e &amp;&amp; e.__ob__) {</span></span>
<span class="line"><span style="color:#6272A4;">                  e.__ob__.dep.depend()</span></span>
<span class="line"><span style="color:#6272A4;">                }</span></span>
<span class="line"><span style="color:#6272A4;">                if (isArray(e)) {</span></span>
<span class="line"><span style="color:#6272A4;">                  dependArray(e)</span></span>
<span class="line"><span style="color:#6272A4;">                }</span></span>
<span class="line"><span style="color:#6272A4;">              }</span></span>
<span class="line"><span style="color:#6272A4;">            }         </span></span>
<span class="line"><span style="color:#6272A4;">            */</span></span>
<span class="line"><span style="color:#F8F8F2;">          }</span></span>
<span class="line"><span style="color:#F8F8F2;">        }</span></span>
<span class="line"><span style="color:#F8F8F2;">      }</span></span>
<span class="line"><span style="color:#FF79C6;">      return</span><span style="color:#50FA7B;"> isRef</span><span style="color:#F8F8F2;">(value) </span><span style="color:#FF79C6;">?</span><span style="color:#F8F8F2;"> value.value </span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> value;</span></span>
<span class="line"><span style="color:#F8F8F2;">    },</span></span>
<span class="line"><span style="color:#50FA7B;">    set</span><span style="color:#FF79C6;">:</span><span style="color:#FF79C6;"> function</span><span style="color:#50FA7B;"> reactiveSetter</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">newVal</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#FF79C6;">      const</span><span style="color:#F8F8F2;"> value </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> getter </span><span style="color:#FF79C6;">?</span><span style="color:#F8F8F2;"> getter.</span><span style="color:#50FA7B;">call</span><span style="color:#F8F8F2;">(obj) </span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> val;</span></span>
<span class="line"><span style="color:#6272A4;">      // 如果新老值一样，则直接 return，不跟新更不触发响应式更新过程</span></span>
<span class="line"><span style="color:#FF79C6;">      if</span><span style="color:#F8F8F2;"> (</span><span style="color:#FF79C6;">!</span><span style="color:#50FA7B;">hasChanged</span><span style="color:#F8F8F2;">(value, newVal)) {</span></span>
<span class="line"><span style="color:#FF79C6;">        return</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">      }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">      if</span><span style="color:#F8F8F2;"> (setter) {</span></span>
<span class="line"><span style="color:#F8F8F2;">        setter.</span><span style="color:#50FA7B;">call</span><span style="color:#F8F8F2;">(obj, newVal);</span></span>
<span class="line"><span style="color:#F8F8F2;">      } </span><span style="color:#FF79C6;">else</span><span style="color:#FF79C6;"> if</span><span style="color:#F8F8F2;"> (getter) {</span></span>
<span class="line"><span style="color:#6272A4;">        // #7981: for accessor properties without setter</span></span>
<span class="line"><span style="color:#FF79C6;">        return</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">      } </span><span style="color:#FF79C6;">else</span><span style="color:#FF79C6;"> if</span><span style="color:#F8F8F2;"> (</span><span style="color:#50FA7B;">isRef</span><span style="color:#F8F8F2;">(value) </span><span style="color:#FF79C6;">&amp;&amp;</span><span style="color:#FF79C6;"> !</span><span style="color:#50FA7B;">isRef</span><span style="color:#F8F8F2;">(newVal)) {</span></span>
<span class="line"><span style="color:#F8F8F2;">        value.value </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> newVal;</span></span>
<span class="line"><span style="color:#FF79C6;">        return</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">      } </span><span style="color:#FF79C6;">else</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">        val </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> newVal;</span></span>
<span class="line"><span style="color:#F8F8F2;">      }</span></span>
<span class="line"><span style="color:#6272A4;">      // 对新值进行观察，让新值也是响应式的</span></span>
<span class="line"><span style="color:#F8F8F2;">      childOb </span><span style="color:#FF79C6;">=</span><span style="color:#FF79C6;"> !</span><span style="color:#F8F8F2;">shallow </span><span style="color:#FF79C6;">&amp;&amp;</span><span style="color:#50FA7B;"> observe</span><span style="color:#F8F8F2;">(newVal);</span></span>
<span class="line"><span style="color:#F8F8F2;">      dep.</span><span style="color:#50FA7B;">notify</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#F8F8F2;">    },</span></span>
<span class="line"><span style="color:#F8F8F2;">  });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">  return</span><span style="color:#F8F8F2;"> dep;</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><details class="hint-container details"><summary>Dep.target</summary><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#F8F8F2;">Dep.target </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> null</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> targetStack</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> Array</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#FFB86C;font-style:italic;">DepTarget</span><span style="color:#FF79C6;"> |</span><span style="color:#8BE9FD;font-style:italic;"> null</span><span style="color:#FF79C6;"> |</span><span style="color:#8BE9FD;font-style:italic;"> undefined</span><span style="color:#F8F8F2;">&gt; </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> [];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">export</span><span style="color:#FF79C6;"> function</span><span style="color:#50FA7B;"> pushTarget</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">target</span><span style="color:#FF79C6;">?:</span><span style="color:#8BE9FD;font-style:italic;"> DepTarget</span><span style="color:#FF79C6;"> |</span><span style="color:#8BE9FD;font-style:italic;"> null</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">  targetStack.</span><span style="color:#50FA7B;">push</span><span style="color:#F8F8F2;">(target);</span></span>
<span class="line"><span style="color:#F8F8F2;">  Dep.target </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> target;</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">export</span><span style="color:#FF79C6;"> function</span><span style="color:#50FA7B;"> popTarget</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#F8F8F2;">  targetStack.</span><span style="color:#50FA7B;">pop</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#F8F8F2;">  Dep.target </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> targetStack[targetStack.length </span><span style="color:#FF79C6;">-</span><span style="color:#BD93F9;"> 1</span><span style="color:#F8F8F2;">];</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h3 id="dep" tabindex="-1"><a class="header-anchor" href="#dep"><span>Dep</span></a></h3><p>依赖收集</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">export</span><span style="color:#FF79C6;"> default</span><span style="color:#FF79C6;"> class</span><span style="color:#8BE9FD;"> Dep</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#FF79C6;">  static</span><span style="color:#F8F8F2;"> target</span><span style="color:#FF79C6;">?:</span><span style="color:#8BE9FD;font-style:italic;"> DepTarget</span><span style="color:#FF79C6;"> |</span><span style="color:#8BE9FD;font-style:italic;"> null</span></span>
<span class="line"><span style="color:#F8F8F2;">  id</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> number</span></span>
<span class="line"><span style="color:#F8F8F2;">  subs</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> Array</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#FFB86C;font-style:italic;">DepTarget</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"><span style="color:#FF79C6;">  constructor</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#BD93F9;font-style:italic;">    this</span><span style="color:#F8F8F2;">.id </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> uid</span><span style="color:#FF79C6;">++</span></span>
<span class="line"><span style="color:#BD93F9;font-style:italic;">    this</span><span style="color:#F8F8F2;">.subs </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> []</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#50FA7B;">  addSub</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">sub</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> DepTarget</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#BD93F9;font-style:italic;">    this</span><span style="color:#F8F8F2;">.subs.</span><span style="color:#50FA7B;">push</span><span style="color:#F8F8F2;">(sub)</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#50FA7B;">  removeSub</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">sub</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> DepTarget</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#50FA7B;">    remove</span><span style="color:#F8F8F2;">(</span><span style="color:#BD93F9;font-style:italic;">this</span><span style="color:#F8F8F2;">.subs, sub)</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#50FA7B;">  depend</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">info</span><span style="color:#FF79C6;">?:</span><span style="color:#8BE9FD;font-style:italic;"> DebuggerEventExtraInfo</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#6272A4;">    // this =&gt; watcher</span></span>
<span class="line"><span style="color:#6272A4;">    // new Watcher 执行 this.get()方法 =》 pushTarget(this)</span></span>
<span class="line"><span style="color:#6272A4;">    // 将watcher定义为 Dep.target</span></span>
<span class="line"><span style="color:#FF79C6;">    if</span><span style="color:#F8F8F2;"> (Dep.target) {</span></span>
<span class="line"><span style="color:#F8F8F2;">      Dep.target.</span><span style="color:#50FA7B;">addDep</span><span style="color:#F8F8F2;">(</span><span style="color:#BD93F9;font-style:italic;">this</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#50FA7B;">  notify</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">info</span><span style="color:#FF79C6;">?:</span><span style="color:#8BE9FD;font-style:italic;"> DebuggerEventExtraInfo</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#FF79C6;">    const</span><span style="color:#F8F8F2;"> subs </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;font-style:italic;"> this</span><span style="color:#F8F8F2;">.subs.</span><span style="color:#50FA7B;">slice</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"><span style="color:#FF79C6;">    for</span><span style="color:#F8F8F2;"> (</span><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> i </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> 0</span><span style="color:#F8F8F2;">, l </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> subs.length; i </span><span style="color:#FF79C6;">&lt;</span><span style="color:#F8F8F2;"> l; i</span><span style="color:#FF79C6;">++</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#6272A4;">      //  watcher 类的update方法</span></span>
<span class="line"><span style="color:#F8F8F2;">      subs[i].</span><span style="color:#50FA7B;">update</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="watcher" tabindex="-1"><a class="header-anchor" href="#watcher"><span>Watcher</span></a></h3><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">export</span><span style="color:#FF79C6;"> default</span><span style="color:#FF79C6;"> class</span><span style="color:#8BE9FD;"> Watcher</span><span style="color:#FF79C6;"> implements</span><span style="color:#8BE9FD;font-style:italic;"> DepTarget</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  vm</span><span style="color:#FF79C6;">?:</span><span style="color:#8BE9FD;font-style:italic;"> Component</span><span style="color:#FF79C6;"> |</span><span style="color:#8BE9FD;font-style:italic;"> null</span></span>
<span class="line"><span style="color:#F8F8F2;">  expression</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> string</span></span>
<span class="line"><span style="color:#50FA7B;">  cb</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> Function</span></span>
<span class="line"><span style="color:#F8F8F2;">  id</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> number</span></span>
<span class="line"><span style="color:#F8F8F2;">  deep</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> boolean</span></span>
<span class="line"><span style="color:#F8F8F2;">  user</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> boolean</span></span>
<span class="line"><span style="color:#F8F8F2;">  lazy</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> boolean</span></span>
<span class="line"><span style="color:#F8F8F2;">  sync</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> boolean</span></span>
<span class="line"><span style="color:#F8F8F2;">  dirty</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> boolean</span></span>
<span class="line"><span style="color:#F8F8F2;">  active</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> boolean</span></span>
<span class="line"><span style="color:#F8F8F2;">  deps</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> Array</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#FFB86C;font-style:italic;">Dep</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">  newDeps</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> Array</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#FFB86C;font-style:italic;">Dep</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">  depIds</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> SimpleSet</span></span>
<span class="line"><span style="color:#F8F8F2;">  newDepIds</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> SimpleSet</span></span>
<span class="line"><span style="color:#50FA7B;">  before</span><span style="color:#FF79C6;">?:</span><span style="color:#8BE9FD;font-style:italic;"> Function</span></span>
<span class="line"><span style="color:#50FA7B;">  onStop</span><span style="color:#FF79C6;">?:</span><span style="color:#8BE9FD;font-style:italic;"> Function</span></span>
<span class="line"><span style="color:#F8F8F2;">  noRecurse</span><span style="color:#FF79C6;">?:</span><span style="color:#8BE9FD;font-style:italic;"> boolean</span></span>
<span class="line"><span style="color:#50FA7B;">  getter</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> Function</span></span>
<span class="line"><span style="color:#F8F8F2;">  value</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> any</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">  // dev only</span></span>
<span class="line"><span style="color:#F8F8F2;">  onTrack</span><span style="color:#FF79C6;">?:</span><span style="color:#F8F8F2;"> ((</span><span style="color:#FFB86C;font-style:italic;">event</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> DebuggerEvent</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#8BE9FD;font-style:italic;"> void</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">|</span><span style="color:#8BE9FD;font-style:italic;"> undefined</span></span>
<span class="line"><span style="color:#F8F8F2;">  onTrigger</span><span style="color:#FF79C6;">?:</span><span style="color:#F8F8F2;"> ((</span><span style="color:#FFB86C;font-style:italic;">event</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> DebuggerEvent</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#8BE9FD;font-style:italic;"> void</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">|</span><span style="color:#8BE9FD;font-style:italic;"> undefined</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">  constructor</span><span style="color:#F8F8F2;">(</span></span>
<span class="line"><span style="color:#FFB86C;font-style:italic;">    vm</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> Component</span><span style="color:#FF79C6;"> |</span><span style="color:#8BE9FD;font-style:italic;"> null</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#FFB86C;font-style:italic;">    expOrFn</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> string</span><span style="color:#FF79C6;"> |</span><span style="color:#F8F8F2;"> (() </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#8BE9FD;font-style:italic;"> any</span><span style="color:#F8F8F2;">),</span></span>
<span class="line"><span style="color:#50FA7B;">    cb</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> Function</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#FFB86C;font-style:italic;">    options</span><span style="color:#FF79C6;">?:</span><span style="color:#8BE9FD;font-style:italic;"> WatcherOptions</span><span style="color:#FF79C6;"> |</span><span style="color:#8BE9FD;font-style:italic;"> null</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#FFB86C;font-style:italic;">    isRenderWatcher</span><span style="color:#FF79C6;">?:</span><span style="color:#8BE9FD;font-style:italic;"> boolean</span></span>
<span class="line"><span style="color:#F8F8F2;">  ) {</span></span>
<span class="line"><span style="color:#50FA7B;">    recordEffectScope</span><span style="color:#F8F8F2;">(</span><span style="color:#BD93F9;font-style:italic;">this</span><span style="color:#F8F8F2;">, activeEffectScope </span><span style="color:#FF79C6;">||</span><span style="color:#F8F8F2;"> (vm </span><span style="color:#FF79C6;">?</span><span style="color:#F8F8F2;"> vm._scope </span><span style="color:#FF79C6;">:</span><span style="color:#BD93F9;"> undefined</span><span style="color:#F8F8F2;">))</span></span>
<span class="line"><span style="color:#FF79C6;">    if</span><span style="color:#F8F8F2;"> ((</span><span style="color:#BD93F9;font-style:italic;">this</span><span style="color:#F8F8F2;">.vm </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> vm)) {</span></span>
<span class="line"><span style="color:#FF79C6;">      if</span><span style="color:#F8F8F2;"> (isRenderWatcher) {</span></span>
<span class="line"><span style="color:#F8F8F2;">        vm._watcher </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;font-style:italic;"> this</span></span>
<span class="line"><span style="color:#F8F8F2;">      }</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#6272A4;">    // options</span></span>
<span class="line"><span style="color:#FF79C6;">    if</span><span style="color:#F8F8F2;"> (options) {</span></span>
<span class="line"><span style="color:#BD93F9;font-style:italic;">      this</span><span style="color:#F8F8F2;">.deep </span><span style="color:#FF79C6;">=</span><span style="color:#FF79C6;"> !!</span><span style="color:#F8F8F2;">options.deep</span></span>
<span class="line"><span style="color:#BD93F9;font-style:italic;">      this</span><span style="color:#F8F8F2;">.user </span><span style="color:#FF79C6;">=</span><span style="color:#FF79C6;"> !!</span><span style="color:#F8F8F2;">options.user</span></span>
<span class="line"><span style="color:#BD93F9;font-style:italic;">      this</span><span style="color:#F8F8F2;">.lazy </span><span style="color:#FF79C6;">=</span><span style="color:#FF79C6;"> !!</span><span style="color:#F8F8F2;">options.lazy</span></span>
<span class="line"><span style="color:#BD93F9;font-style:italic;">      this</span><span style="color:#F8F8F2;">.sync </span><span style="color:#FF79C6;">=</span><span style="color:#FF79C6;"> !!</span><span style="color:#F8F8F2;">options.sync</span></span>
<span class="line"><span style="color:#BD93F9;font-style:italic;">      this</span><span style="color:#F8F8F2;">.before </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> options.before</span></span>
<span class="line"><span style="color:#FF79C6;">      if</span><span style="color:#F8F8F2;"> (__DEV__) {</span></span>
<span class="line"><span style="color:#BD93F9;font-style:italic;">        this</span><span style="color:#F8F8F2;">.onTrack </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> options.onTrack</span></span>
<span class="line"><span style="color:#BD93F9;font-style:italic;">        this</span><span style="color:#F8F8F2;">.onTrigger </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> options.onTrigger</span></span>
<span class="line"><span style="color:#F8F8F2;">      }</span></span>
<span class="line"><span style="color:#F8F8F2;">    } </span><span style="color:#FF79C6;">else</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#BD93F9;font-style:italic;">      this</span><span style="color:#F8F8F2;">.deep </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;font-style:italic;"> this</span><span style="color:#F8F8F2;">.user </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;font-style:italic;"> this</span><span style="color:#F8F8F2;">.lazy </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;font-style:italic;"> this</span><span style="color:#F8F8F2;">.sync </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> false</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#BD93F9;font-style:italic;">    this</span><span style="color:#F8F8F2;">.cb </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> cb</span></span>
<span class="line"><span style="color:#BD93F9;font-style:italic;">    this</span><span style="color:#F8F8F2;">.id </span><span style="color:#FF79C6;">=</span><span style="color:#FF79C6;"> ++</span><span style="color:#F8F8F2;">uid </span><span style="color:#6272A4;">// uid for batching</span></span>
<span class="line"><span style="color:#BD93F9;font-style:italic;">    this</span><span style="color:#F8F8F2;">.active </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> true</span></span>
<span class="line"><span style="color:#BD93F9;font-style:italic;">    this</span><span style="color:#F8F8F2;">.dirty </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;font-style:italic;"> this</span><span style="color:#F8F8F2;">.lazy </span><span style="color:#6272A4;">// for lazy watchers</span></span>
<span class="line"><span style="color:#BD93F9;font-style:italic;">    this</span><span style="color:#F8F8F2;">.deps </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> []</span></span>
<span class="line"><span style="color:#BD93F9;font-style:italic;">    this</span><span style="color:#F8F8F2;">.newDeps </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> []</span></span>
<span class="line"><span style="color:#BD93F9;font-style:italic;">    this</span><span style="color:#F8F8F2;">.depIds </span><span style="color:#FF79C6;">=</span><span style="color:#FF79C6;font-weight:bold;"> new</span><span style="color:#50FA7B;"> Set</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"><span style="color:#BD93F9;font-style:italic;">    this</span><span style="color:#F8F8F2;">.newDepIds </span><span style="color:#FF79C6;">=</span><span style="color:#FF79C6;font-weight:bold;"> new</span><span style="color:#50FA7B;"> Set</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"><span style="color:#BD93F9;font-style:italic;">    this</span><span style="color:#F8F8F2;">.expression </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> __DEV__ </span><span style="color:#FF79C6;">?</span><span style="color:#F8F8F2;"> expOrFn.</span><span style="color:#50FA7B;">toString</span><span style="color:#F8F8F2;">() </span><span style="color:#FF79C6;">:</span><span style="color:#E9F284;"> &#39;&#39;</span></span>
<span class="line"><span style="color:#6272A4;">    // parse expression for getter</span></span>
<span class="line"><span style="color:#FF79C6;">    if</span><span style="color:#F8F8F2;"> (</span><span style="color:#50FA7B;">isFunction</span><span style="color:#F8F8F2;">(expOrFn)) {</span></span>
<span class="line"><span style="color:#BD93F9;font-style:italic;">      this</span><span style="color:#F8F8F2;">.getter </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> expOrFn</span></span>
<span class="line"><span style="color:#F8F8F2;">    } </span><span style="color:#FF79C6;">else</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#BD93F9;font-style:italic;">      this</span><span style="color:#F8F8F2;">.getter </span><span style="color:#FF79C6;">=</span><span style="color:#50FA7B;"> parsePath</span><span style="color:#F8F8F2;">(expOrFn)</span></span>
<span class="line"><span style="color:#FF79C6;">      if</span><span style="color:#F8F8F2;"> (</span><span style="color:#FF79C6;">!</span><span style="color:#BD93F9;font-style:italic;">this</span><span style="color:#F8F8F2;">.getter) {</span></span>
<span class="line"><span style="color:#BD93F9;font-style:italic;">        this</span><span style="color:#F8F8F2;">.getter </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> noop</span></span>
<span class="line"><span style="color:#F8F8F2;">      }</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#BD93F9;font-style:italic;">    this</span><span style="color:#F8F8F2;">.value </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;font-style:italic;"> this</span><span style="color:#F8F8F2;">.lazy </span><span style="color:#FF79C6;">?</span><span style="color:#BD93F9;"> undefined</span><span style="color:#FF79C6;"> :</span><span style="color:#BD93F9;font-style:italic;"> this</span><span style="color:#F8F8F2;">.</span><span style="color:#50FA7B;">get</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">  /**</span></span>
<span class="line"><span style="color:#6272A4;">   * Evaluate the getter, and re-collect dependencies.</span></span>
<span class="line"><span style="color:#6272A4;">   */</span></span>
<span class="line"><span style="color:#50FA7B;">  get</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#50FA7B;">    pushTarget</span><span style="color:#F8F8F2;">(</span><span style="color:#BD93F9;font-style:italic;">this</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#FF79C6;">    let</span><span style="color:#F8F8F2;"> value</span></span>
<span class="line"><span style="color:#FF79C6;">    const</span><span style="color:#F8F8F2;"> vm </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;font-style:italic;"> this</span><span style="color:#F8F8F2;">.vm</span></span>
<span class="line"><span style="color:#FF79C6;">    try</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">      value </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;font-style:italic;"> this</span><span style="color:#F8F8F2;">.getter.</span><span style="color:#50FA7B;">call</span><span style="color:#F8F8F2;">(vm, vm)</span></span>
<span class="line"><span style="color:#F8F8F2;">    } </span><span style="color:#FF79C6;">catch</span><span style="color:#F8F8F2;"> (</span><span style="color:#FFB86C;font-style:italic;">e</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> any</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#FF79C6;">      if</span><span style="color:#F8F8F2;"> (</span><span style="color:#BD93F9;font-style:italic;">this</span><span style="color:#F8F8F2;">.user) {</span></span>
<span class="line"><span style="color:#50FA7B;">        handleError</span><span style="color:#F8F8F2;">(e, vm, </span><span style="color:#F1FA8C;">\`getter for watcher &quot;</span><span style="color:#FF79C6;">\${</span><span style="color:#BD93F9;font-style:italic;">this</span><span style="color:#F8F8F2;">.expression</span><span style="color:#FF79C6;">}</span><span style="color:#F1FA8C;">&quot;\`</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">      } </span><span style="color:#FF79C6;">else</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#FF79C6;">        throw</span><span style="color:#F8F8F2;"> e</span></span>
<span class="line"><span style="color:#F8F8F2;">      }</span></span>
<span class="line"><span style="color:#F8F8F2;">    } </span><span style="color:#FF79C6;">finally</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#6272A4;">      // &quot;touch&quot; every property so they are all tracked as</span></span>
<span class="line"><span style="color:#6272A4;">      // dependencies for deep watching</span></span>
<span class="line"><span style="color:#FF79C6;">      if</span><span style="color:#F8F8F2;"> (</span><span style="color:#BD93F9;font-style:italic;">this</span><span style="color:#F8F8F2;">.deep) {</span></span>
<span class="line"><span style="color:#50FA7B;">        traverse</span><span style="color:#F8F8F2;">(value)</span></span>
<span class="line"><span style="color:#F8F8F2;">      }</span></span>
<span class="line"><span style="color:#50FA7B;">      popTarget</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"><span style="color:#BD93F9;font-style:italic;">      this</span><span style="color:#F8F8F2;">.</span><span style="color:#50FA7B;">cleanupDeps</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#FF79C6;">    return</span><span style="color:#F8F8F2;"> value</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">  /**</span></span>
<span class="line"><span style="color:#6272A4;">   * Add a dependency to this directive.</span></span>
<span class="line"><span style="color:#6272A4;">   */</span></span>
<span class="line"><span style="color:#50FA7B;">  addDep</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">dep</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> Dep</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#FF79C6;">    const</span><span style="color:#F8F8F2;"> id </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> dep.id</span></span>
<span class="line"><span style="color:#FF79C6;">    if</span><span style="color:#F8F8F2;"> (</span><span style="color:#FF79C6;">!</span><span style="color:#BD93F9;font-style:italic;">this</span><span style="color:#F8F8F2;">.newDepIds.</span><span style="color:#50FA7B;">has</span><span style="color:#F8F8F2;">(id)) {</span></span>
<span class="line"><span style="color:#BD93F9;font-style:italic;">      this</span><span style="color:#F8F8F2;">.newDepIds.</span><span style="color:#50FA7B;">add</span><span style="color:#F8F8F2;">(id)</span></span>
<span class="line"><span style="color:#BD93F9;font-style:italic;">      this</span><span style="color:#F8F8F2;">.newDeps.</span><span style="color:#50FA7B;">push</span><span style="color:#F8F8F2;">(dep)</span></span>
<span class="line"><span style="color:#FF79C6;">      if</span><span style="color:#F8F8F2;"> (</span><span style="color:#FF79C6;">!</span><span style="color:#BD93F9;font-style:italic;">this</span><span style="color:#F8F8F2;">.depIds.</span><span style="color:#50FA7B;">has</span><span style="color:#F8F8F2;">(id)) {</span></span>
<span class="line"><span style="color:#F8F8F2;">        dep.</span><span style="color:#50FA7B;">addSub</span><span style="color:#F8F8F2;">(</span><span style="color:#BD93F9;font-style:italic;">this</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">      }</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">  /**</span></span>
<span class="line"><span style="color:#6272A4;">   * Clean up for dependency collection.</span></span>
<span class="line"><span style="color:#6272A4;">   */</span></span>
<span class="line"><span style="color:#50FA7B;">  cleanupDeps</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#FF79C6;">    let</span><span style="color:#F8F8F2;"> i </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;font-style:italic;"> this</span><span style="color:#F8F8F2;">.deps.length</span></span>
<span class="line"><span style="color:#FF79C6;">    while</span><span style="color:#F8F8F2;"> (i</span><span style="color:#FF79C6;">--</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#FF79C6;">      const</span><span style="color:#F8F8F2;"> dep </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;font-style:italic;"> this</span><span style="color:#F8F8F2;">.deps[i]</span></span>
<span class="line"><span style="color:#FF79C6;">      if</span><span style="color:#F8F8F2;"> (</span><span style="color:#FF79C6;">!</span><span style="color:#BD93F9;font-style:italic;">this</span><span style="color:#F8F8F2;">.newDepIds.</span><span style="color:#50FA7B;">has</span><span style="color:#F8F8F2;">(dep.id)) {</span></span>
<span class="line"><span style="color:#F8F8F2;">        dep.</span><span style="color:#50FA7B;">removeSub</span><span style="color:#F8F8F2;">(</span><span style="color:#BD93F9;font-style:italic;">this</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">      }</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#FF79C6;">    let</span><span style="color:#F8F8F2;"> tmp</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> any</span><span style="color:#FF79C6;"> =</span><span style="color:#BD93F9;font-style:italic;"> this</span><span style="color:#F8F8F2;">.depIds</span></span>
<span class="line"><span style="color:#BD93F9;font-style:italic;">    this</span><span style="color:#F8F8F2;">.depIds </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;font-style:italic;"> this</span><span style="color:#F8F8F2;">.newDepIds</span></span>
<span class="line"><span style="color:#BD93F9;font-style:italic;">    this</span><span style="color:#F8F8F2;">.newDepIds </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> tmp</span></span>
<span class="line"><span style="color:#BD93F9;font-style:italic;">    this</span><span style="color:#F8F8F2;">.newDepIds.</span><span style="color:#50FA7B;">clear</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"><span style="color:#F8F8F2;">    tmp </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;font-style:italic;"> this</span><span style="color:#F8F8F2;">.deps</span></span>
<span class="line"><span style="color:#BD93F9;font-style:italic;">    this</span><span style="color:#F8F8F2;">.deps </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;font-style:italic;"> this</span><span style="color:#F8F8F2;">.newDeps</span></span>
<span class="line"><span style="color:#BD93F9;font-style:italic;">    this</span><span style="color:#F8F8F2;">.newDeps </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> tmp</span></span>
<span class="line"><span style="color:#BD93F9;font-style:italic;">    this</span><span style="color:#F8F8F2;">.newDeps.length </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> 0</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">  /**</span></span>
<span class="line"><span style="color:#6272A4;">   * Subscriber interface.</span></span>
<span class="line"><span style="color:#6272A4;">   * Will be called when a dependency changes.</span></span>
<span class="line"><span style="color:#6272A4;">   */</span></span>
<span class="line"><span style="color:#50FA7B;">  update</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#6272A4;">    /* istanbul ignore else */</span></span>
<span class="line"><span style="color:#FF79C6;">    if</span><span style="color:#F8F8F2;"> (</span><span style="color:#BD93F9;font-style:italic;">this</span><span style="color:#F8F8F2;">.lazy) {</span></span>
<span class="line"><span style="color:#BD93F9;font-style:italic;">      this</span><span style="color:#F8F8F2;">.dirty </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> true</span></span>
<span class="line"><span style="color:#F8F8F2;">    } </span><span style="color:#FF79C6;">else</span><span style="color:#FF79C6;"> if</span><span style="color:#F8F8F2;"> (</span><span style="color:#BD93F9;font-style:italic;">this</span><span style="color:#F8F8F2;">.sync) {</span></span>
<span class="line"><span style="color:#BD93F9;font-style:italic;">      this</span><span style="color:#F8F8F2;">.</span><span style="color:#50FA7B;">run</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"><span style="color:#F8F8F2;">    } </span><span style="color:#FF79C6;">else</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#50FA7B;">      queueWatcher</span><span style="color:#F8F8F2;">(</span><span style="color:#BD93F9;font-style:italic;">this</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">  /**</span></span>
<span class="line"><span style="color:#6272A4;">   * Scheduler job interface.</span></span>
<span class="line"><span style="color:#6272A4;">   * Will be called by the scheduler.</span></span>
<span class="line"><span style="color:#6272A4;">   */</span></span>
<span class="line"><span style="color:#50FA7B;">  run</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#FF79C6;">    if</span><span style="color:#F8F8F2;"> (</span><span style="color:#BD93F9;font-style:italic;">this</span><span style="color:#F8F8F2;">.active) {</span></span>
<span class="line"><span style="color:#FF79C6;">      const</span><span style="color:#F8F8F2;"> value </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;font-style:italic;"> this</span><span style="color:#F8F8F2;">.</span><span style="color:#50FA7B;">get</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"><span style="color:#FF79C6;">      if</span><span style="color:#F8F8F2;"> (</span></span>
<span class="line"><span style="color:#F8F8F2;">        value </span><span style="color:#FF79C6;">!==</span><span style="color:#BD93F9;font-style:italic;"> this</span><span style="color:#F8F8F2;">.value </span><span style="color:#FF79C6;">||</span></span>
<span class="line"><span style="color:#6272A4;">        // Deep watchers and watchers on Object/Arrays should fire even</span></span>
<span class="line"><span style="color:#6272A4;">        // when the value is the same, because the value may</span></span>
<span class="line"><span style="color:#6272A4;">        // have mutated.</span></span>
<span class="line"><span style="color:#50FA7B;">        isObject</span><span style="color:#F8F8F2;">(value) </span><span style="color:#FF79C6;">||</span></span>
<span class="line"><span style="color:#BD93F9;font-style:italic;">        this</span><span style="color:#F8F8F2;">.deep</span></span>
<span class="line"><span style="color:#F8F8F2;">      ) {</span></span>
<span class="line"><span style="color:#6272A4;">        // set new value</span></span>
<span class="line"><span style="color:#FF79C6;">        const</span><span style="color:#F8F8F2;"> oldValue </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;font-style:italic;"> this</span><span style="color:#F8F8F2;">.value</span></span>
<span class="line"><span style="color:#BD93F9;font-style:italic;">        this</span><span style="color:#F8F8F2;">.value </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> value</span></span>
<span class="line"><span style="color:#FF79C6;">        if</span><span style="color:#F8F8F2;"> (</span><span style="color:#BD93F9;font-style:italic;">this</span><span style="color:#F8F8F2;">.user) {</span></span>
<span class="line"><span style="color:#FF79C6;">          const</span><span style="color:#F8F8F2;"> info </span><span style="color:#FF79C6;">=</span><span style="color:#F1FA8C;"> \`callback for watcher &quot;</span><span style="color:#FF79C6;">\${</span><span style="color:#BD93F9;font-style:italic;">this</span><span style="color:#F8F8F2;">.expression</span><span style="color:#FF79C6;">}</span><span style="color:#F1FA8C;">&quot;\`</span></span>
<span class="line"><span style="color:#50FA7B;">          invokeWithErrorHandling</span><span style="color:#F8F8F2;">(</span></span>
<span class="line"><span style="color:#BD93F9;font-style:italic;">            this</span><span style="color:#F8F8F2;">.cb,</span></span>
<span class="line"><span style="color:#BD93F9;font-style:italic;">            this</span><span style="color:#F8F8F2;">.vm,</span></span>
<span class="line"><span style="color:#F8F8F2;">            [value, oldValue],</span></span>
<span class="line"><span style="color:#BD93F9;font-style:italic;">            this</span><span style="color:#F8F8F2;">.vm,</span></span>
<span class="line"><span style="color:#F8F8F2;">            info</span></span>
<span class="line"><span style="color:#F8F8F2;">          )</span></span>
<span class="line"><span style="color:#F8F8F2;">        } </span><span style="color:#FF79C6;">else</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#BD93F9;font-style:italic;">          this</span><span style="color:#F8F8F2;">.cb.</span><span style="color:#50FA7B;">call</span><span style="color:#F8F8F2;">(</span><span style="color:#BD93F9;font-style:italic;">this</span><span style="color:#F8F8F2;">.vm, value, oldValue)</span></span>
<span class="line"><span style="color:#F8F8F2;">        }</span></span>
<span class="line"><span style="color:#F8F8F2;">      }</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">  /**</span></span>
<span class="line"><span style="color:#6272A4;">   * Evaluate the value of the watcher.</span></span>
<span class="line"><span style="color:#6272A4;">   * This only gets called for lazy watchers.</span></span>
<span class="line"><span style="color:#6272A4;">   */</span></span>
<span class="line"><span style="color:#50FA7B;">  evaluate</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#BD93F9;font-style:italic;">    this</span><span style="color:#F8F8F2;">.value </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;font-style:italic;"> this</span><span style="color:#F8F8F2;">.</span><span style="color:#50FA7B;">get</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"><span style="color:#BD93F9;font-style:italic;">    this</span><span style="color:#F8F8F2;">.dirty </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> false</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">  /**</span></span>
<span class="line"><span style="color:#6272A4;">   * Depend on all deps collected by this watcher.</span></span>
<span class="line"><span style="color:#6272A4;">   */</span></span>
<span class="line"><span style="color:#50FA7B;">  depend</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#FF79C6;">    let</span><span style="color:#F8F8F2;"> i </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;font-style:italic;"> this</span><span style="color:#F8F8F2;">.deps.length</span></span>
<span class="line"><span style="color:#FF79C6;">    while</span><span style="color:#F8F8F2;"> (i</span><span style="color:#FF79C6;">--</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#BD93F9;font-style:italic;">      this</span><span style="color:#F8F8F2;">.deps[i].</span><span style="color:#50FA7B;">depend</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">  /**</span></span>
<span class="line"><span style="color:#6272A4;">   * Remove self from all dependencies&#39; subscriber list.</span></span>
<span class="line"><span style="color:#6272A4;">   */</span></span>
<span class="line"><span style="color:#50FA7B;">  teardown</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#FF79C6;">    if</span><span style="color:#F8F8F2;"> (</span><span style="color:#BD93F9;font-style:italic;">this</span><span style="color:#F8F8F2;">.vm </span><span style="color:#FF79C6;">&amp;&amp;</span><span style="color:#FF79C6;"> !</span><span style="color:#BD93F9;font-style:italic;">this</span><span style="color:#F8F8F2;">.vm._isBeingDestroyed) {</span></span>
<span class="line"><span style="color:#50FA7B;">      remove</span><span style="color:#F8F8F2;">(</span><span style="color:#BD93F9;font-style:italic;">this</span><span style="color:#F8F8F2;">.vm._scope.effects, </span><span style="color:#BD93F9;font-style:italic;">this</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#FF79C6;">    if</span><span style="color:#F8F8F2;"> (</span><span style="color:#BD93F9;font-style:italic;">this</span><span style="color:#F8F8F2;">.active) {</span></span>
<span class="line"><span style="color:#FF79C6;">      let</span><span style="color:#F8F8F2;"> i </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;font-style:italic;"> this</span><span style="color:#F8F8F2;">.deps.length</span></span>
<span class="line"><span style="color:#FF79C6;">      while</span><span style="color:#F8F8F2;"> (i</span><span style="color:#FF79C6;">--</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#BD93F9;font-style:italic;">        this</span><span style="color:#F8F8F2;">.deps[i].</span><span style="color:#50FA7B;">removeSub</span><span style="color:#F8F8F2;">(</span><span style="color:#BD93F9;font-style:italic;">this</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">      }</span></span>
<span class="line"><span style="color:#BD93F9;font-style:italic;">      this</span><span style="color:#F8F8F2;">.active </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> false</span></span>
<span class="line"><span style="color:#FF79C6;">      if</span><span style="color:#F8F8F2;"> (</span><span style="color:#BD93F9;font-style:italic;">this</span><span style="color:#F8F8F2;">.onStop) {</span></span>
<span class="line"><span style="color:#BD93F9;font-style:italic;">        this</span><span style="color:#F8F8F2;">.</span><span style="color:#50FA7B;">onStop</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"><span style="color:#F8F8F2;">      }</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="初始化过程分析" tabindex="-1"><a class="header-anchor" href="#初始化过程分析"><span>初始化过程分析</span></a></h2><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#6272A4;">//1. vue._init()</span></span>
<span class="line"><span style="color:#FF79C6;">if</span><span style="color:#F8F8F2;"> (vm.$options.el) {</span></span>
<span class="line"><span style="color:#6272A4;">  // 先定义只包含运行时版本的$mount方法，再定义完整版本的$mount 方法</span></span>
<span class="line"><span style="color:#F8F8F2;">  vm.</span><span style="color:#50FA7B;">$mount</span><span style="color:#F8F8F2;">(vm.$options.el);</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">//2. vm.$mount</span></span>
<span class="line"><span style="color:#8BE9FD;font-style:italic;">Vue</span><span style="color:#F8F8F2;">.prototype.</span><span style="color:#50FA7B;">$mount</span><span style="color:#FF79C6;"> =</span><span style="color:#FF79C6;"> function</span><span style="color:#F8F8F2;"> (</span></span>
<span class="line"><span style="color:#FFB86C;font-style:italic;">  el</span><span style="color:#FF79C6;">?:</span><span style="color:#8BE9FD;font-style:italic;"> string</span><span style="color:#FF79C6;"> |</span><span style="color:#8BE9FD;font-style:italic;"> Element</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#FFB86C;font-style:italic;">  hydrating</span><span style="color:#FF79C6;">?:</span><span style="color:#8BE9FD;font-style:italic;"> boolean</span></span>
<span class="line"><span style="color:#F8F8F2;">)</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> Component</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  el </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> el </span><span style="color:#FF79C6;">&amp;&amp;</span><span style="color:#F8F8F2;"> inBrowser </span><span style="color:#FF79C6;">?</span><span style="color:#50FA7B;"> query</span><span style="color:#F8F8F2;">(el) </span><span style="color:#FF79C6;">:</span><span style="color:#BD93F9;"> undefined</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#FF79C6;">  return</span><span style="color:#50FA7B;"> mountComponent</span><span style="color:#F8F8F2;">(</span><span style="color:#BD93F9;font-style:italic;">this</span><span style="color:#F8F8F2;">, el, hydrating);</span></span>
<span class="line"><span style="color:#F8F8F2;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">//3. mountComponent</span></span>
<span class="line"><span style="color:#FF79C6;">export</span><span style="color:#FF79C6;"> function</span><span style="color:#50FA7B;"> mountComponent</span><span style="color:#F8F8F2;">(</span></span>
<span class="line"><span style="color:#FFB86C;font-style:italic;">  vm</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> Component</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#FFB86C;font-style:italic;">  el</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> Element</span><span style="color:#FF79C6;"> |</span><span style="color:#8BE9FD;font-style:italic;"> null</span><span style="color:#FF79C6;"> |</span><span style="color:#8BE9FD;font-style:italic;"> undefined</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#FFB86C;font-style:italic;">  hydrating</span><span style="color:#FF79C6;">?:</span><span style="color:#8BE9FD;font-style:italic;"> boolean</span></span>
<span class="line"><span style="color:#F8F8F2;">)</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> Component</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#FF79C6;">  let</span><span style="color:#F8F8F2;"> updateComponent;</span></span>
<span class="line"><span style="color:#50FA7B;">  updateComponent</span><span style="color:#FF79C6;"> =</span><span style="color:#F8F8F2;"> () </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">    vm.</span><span style="color:#50FA7B;">_update</span><span style="color:#F8F8F2;">(vm.</span><span style="color:#50FA7B;">_render</span><span style="color:#F8F8F2;">(), hydrating);</span></span>
<span class="line"><span style="color:#F8F8F2;">  };</span></span>
<span class="line"><span style="color:#FF79C6;font-weight:bold;">  new</span><span style="color:#50FA7B;"> Watcher</span><span style="color:#F8F8F2;">(</span></span>
<span class="line"><span style="color:#F8F8F2;">    vm,</span></span>
<span class="line"><span style="color:#F8F8F2;">    updateComponent,</span></span>
<span class="line"><span style="color:#F8F8F2;">    noop,</span></span>
<span class="line"><span style="color:#F8F8F2;">    watcherOptions,</span></span>
<span class="line"><span style="color:#BD93F9;">    true</span><span style="color:#6272A4;"> /* isRenderWatcher */</span></span>
<span class="line"><span style="color:#F8F8F2;">  );</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#6272A4;">//4.  new Watcher()</span></span>
<span class="line"><span style="color:#6272A4;">// 调用 updateComponent()</span></span>
<span class="line"><span style="color:#FF79C6;">export</span><span style="color:#FF79C6;"> default</span><span style="color:#FF79C6;"> class</span><span style="color:#8BE9FD;"> Watcher</span><span style="color:#FF79C6;"> implements</span><span style="color:#8BE9FD;font-style:italic;"> DepTarget</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#FF79C6;">  constructor</span><span style="color:#F8F8F2;">(</span></span>
<span class="line"><span style="color:#FFB86C;font-style:italic;">    vm</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> Component</span><span style="color:#FF79C6;"> |</span><span style="color:#8BE9FD;font-style:italic;"> null</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#6272A4;">    // updateComponent</span></span>
<span class="line"><span style="color:#FFB86C;font-style:italic;">    expOrFn</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> string</span><span style="color:#FF79C6;"> |</span><span style="color:#F8F8F2;"> (() </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#8BE9FD;font-style:italic;"> any</span><span style="color:#F8F8F2;">),</span></span>
<span class="line"><span style="color:#50FA7B;">    cb</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> Function</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#FFB86C;font-style:italic;">    options</span><span style="color:#FF79C6;">?:</span><span style="color:#8BE9FD;font-style:italic;"> WatcherOptions</span><span style="color:#FF79C6;"> |</span><span style="color:#8BE9FD;font-style:italic;"> null</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#FFB86C;font-style:italic;">    isRenderWatcher</span><span style="color:#FF79C6;">?:</span><span style="color:#8BE9FD;font-style:italic;"> boolean</span></span>
<span class="line"><span style="color:#F8F8F2;">  ) {</span></span>
<span class="line"><span style="color:#6272A4;">    // ...</span></span>
<span class="line"><span style="color:#FF79C6;">    if</span><span style="color:#F8F8F2;"> (</span><span style="color:#50FA7B;">isFunction</span><span style="color:#F8F8F2;">(expOrFn)) {</span></span>
<span class="line"><span style="color:#6272A4;">      // this.getter = updateComponent</span></span>
<span class="line"><span style="color:#BD93F9;font-style:italic;">      this</span><span style="color:#F8F8F2;">.getter </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> expOrFn;</span></span>
<span class="line"><span style="color:#F8F8F2;">    } </span><span style="color:#FF79C6;">else</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#BD93F9;font-style:italic;">      this</span><span style="color:#F8F8F2;">.getter </span><span style="color:#FF79C6;">=</span><span style="color:#50FA7B;"> parsePath</span><span style="color:#F8F8F2;">(expOrFn);</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#6272A4;">    //  this.get() 调用 updateComponent</span></span>
<span class="line"><span style="color:#BD93F9;font-style:italic;">    this</span><span style="color:#F8F8F2;">.value </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;font-style:italic;"> this</span><span style="color:#F8F8F2;">.lazy </span><span style="color:#FF79C6;">?</span><span style="color:#BD93F9;"> undefined</span><span style="color:#FF79C6;"> :</span><span style="color:#BD93F9;font-style:italic;"> this</span><span style="color:#F8F8F2;">.</span><span style="color:#50FA7B;">get</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#50FA7B;">  get</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#50FA7B;">    pushTarget</span><span style="color:#F8F8F2;">(</span><span style="color:#BD93F9;font-style:italic;">this</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#FF79C6;">    let</span><span style="color:#F8F8F2;"> value;</span></span>
<span class="line"><span style="color:#FF79C6;">    const</span><span style="color:#F8F8F2;"> vm </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;font-style:italic;"> this</span><span style="color:#F8F8F2;">.vm;</span></span>
<span class="line"><span style="color:#FF79C6;">    try</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">      value </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;font-style:italic;"> this</span><span style="color:#F8F8F2;">.getter.</span><span style="color:#50FA7B;">call</span><span style="color:#F8F8F2;">(vm, vm);</span></span>
<span class="line"><span style="color:#F8F8F2;">    } </span><span style="color:#FF79C6;">finally</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#FF79C6;">      if</span><span style="color:#F8F8F2;"> (</span><span style="color:#BD93F9;font-style:italic;">this</span><span style="color:#F8F8F2;">.deep) {</span></span>
<span class="line"><span style="color:#50FA7B;">        traverse</span><span style="color:#F8F8F2;">(value);</span></span>
<span class="line"><span style="color:#F8F8F2;">      }</span></span>
<span class="line"><span style="color:#6272A4;">      // 将 Dep.target 复原</span></span>
<span class="line"><span style="color:#50FA7B;">      popTarget</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#BD93F9;font-style:italic;">      this</span><span style="color:#F8F8F2;">.</span><span style="color:#50FA7B;">cleanupDeps</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#FF79C6;">    return</span><span style="color:#F8F8F2;"> value;</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#6272A4;">//5. _render()</span></span>
<span class="line"><span style="color:#6272A4;">//vm._update(vm._render(), hydrating);</span></span>
<span class="line"><span style="color:#8BE9FD;font-style:italic;">Vue</span><span style="color:#F8F8F2;">.prototype.</span><span style="color:#50FA7B;">_render</span><span style="color:#FF79C6;"> =</span><span style="color:#FF79C6;"> function</span><span style="color:#F8F8F2;"> ()</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> VNode</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#6272A4;">  // ...</span></span>
<span class="line"><span style="color:#FF79C6;">  const</span><span style="color:#F8F8F2;"> { render, _parentVnode } </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> vm.$options;</span></span>
<span class="line"><span style="color:#F8F8F2;">  vnode </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> render.</span><span style="color:#50FA7B;">call</span><span style="color:#F8F8F2;">(vm._renderProxy, vm.$createElement);</span></span>
<span class="line"><span style="color:#F8F8F2;">};</span></span>
<span class="line"><span style="color:#6272A4;">// 6. render() 每个组件的render方法</span></span>
<span class="line"><span style="color:#6272A4;">// 触发 this.get()</span></span>
<span class="line"><span style="color:#6272A4;">// app</span></span>
<span class="line"><span style="color:#FF79C6;">const</span><span style="color:#50FA7B;"> render</span><span style="color:#FF79C6;"> =</span><span style="color:#FF79C6;"> function</span><span style="color:#F8F8F2;"> () {</span></span>
<span class="line"><span style="color:#FF79C6;">  var</span><span style="color:#F8F8F2;"> _vm </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;font-style:italic;"> this</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#FF79C6;">  var</span><span style="color:#F8F8F2;"> _h </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> _vm.$createElement;</span></span>
<span class="line"><span style="color:#FF79C6;">  var</span><span style="color:#F8F8F2;"> _c </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> _vm._self._c </span><span style="color:#FF79C6;">||</span><span style="color:#F8F8F2;"> _h;</span></span>
<span class="line"><span style="color:#FF79C6;">    return</span><span style="color:#50FA7B;"> _c</span><span style="color:#F8F8F2;">(</span></span>
<span class="line"><span style="color:#E9F284;">    &quot;</span><span style="color:#F1FA8C;">div</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">    { attrs</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> { id</span><span style="color:#FF79C6;">:</span><span style="color:#E9F284;"> &quot;</span><span style="color:#F1FA8C;">app</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;"> } },</span></span>
<span class="line"><span style="color:#F8F8F2;">    [</span></span>
<span class="line"><span style="color:#6272A4;">    //  获取_vm里面的数据 在次触发 get()</span></span>
<span class="line"><span style="color:#F8F8F2;">    ],</span></span>
<span class="line"><span style="color:#BD93F9;">    1</span></span>
<span class="line"><span style="color:#F8F8F2;">  )</span></span>
<span class="line"><span style="color:#F8F8F2;">};</span></span>
<span class="line"><span style="color:#6272A4;">//</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="nexttick" tabindex="-1"><a class="header-anchor" href="#nexttick"><span>nextTick</span></a></h2><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#6272A4;">// 存放要执行的队列 当 pending为false 才遍历执行</span></span>
<span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> callbacks</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> Array</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#FFB86C;font-style:italic;">Function</span><span style="color:#F8F8F2;">&gt; </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> []</span></span>
<span class="line"><span style="color:#6272A4;">/*</span></span>
<span class="line"><span style="color:#6272A4;">如果 pending 为 false，表示现在浏览器的任务队列中没有 flushCallbacks 函数</span></span>
<span class="line"><span style="color:#6272A4;">如果 pending 为 true，则表示浏览器的任务队列中已经被放入了 flushCallbacks 函数，</span></span>
<span class="line"><span style="color:#6272A4;">当 pending为 false callbacks才会被调用执行</span></span>
<span class="line"><span style="color:#6272A4;">待执行 flushCallbacks 函数时，pending 会被再次置为 false，表示下一个 flushCallbacks 函数可以进入浏览器的任务队列了</span></span>
<span class="line"><span style="color:#6272A4;">*/</span></span>
<span class="line"><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> pending </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> false</span></span>
<span class="line"><span style="color:#FF79C6;">export</span><span style="color:#FF79C6;"> function</span><span style="color:#50FA7B;"> nextTick</span><span style="color:#F8F8F2;">(</span><span style="color:#50FA7B;">cb</span><span style="color:#FF79C6;">?:</span><span style="color:#F8F8F2;"> (</span><span style="color:#FF79C6;">...</span><span style="color:#FFB86C;font-style:italic;">args</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> any</span><span style="color:#F8F8F2;">[]) </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#8BE9FD;font-style:italic;"> any</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">ctx</span><span style="color:#FF79C6;">?:</span><span style="color:#8BE9FD;font-style:italic;"> object</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#FF79C6;">  let</span><span style="color:#F8F8F2;"> _resolve</span></span>
<span class="line"><span style="color:#F8F8F2;">  callbacks.</span><span style="color:#50FA7B;">push</span><span style="color:#F8F8F2;">(() </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#FF79C6;">    if</span><span style="color:#F8F8F2;"> (cb) {</span></span>
<span class="line"><span style="color:#FF79C6;">      try</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">        cb.</span><span style="color:#50FA7B;">call</span><span style="color:#F8F8F2;">(ctx)</span></span>
<span class="line"><span style="color:#F8F8F2;">      } </span><span style="color:#FF79C6;">catch</span><span style="color:#F8F8F2;"> (</span><span style="color:#FFB86C;font-style:italic;">e</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> any</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#50FA7B;">        handleError</span><span style="color:#F8F8F2;">(e, ctx, </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">nextTick</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">      }</span></span>
<span class="line"><span style="color:#F8F8F2;">    } </span><span style="color:#FF79C6;">else</span><span style="color:#FF79C6;"> if</span><span style="color:#F8F8F2;"> (_resolve) {</span></span>
<span class="line"><span style="color:#50FA7B;">      _resolve</span><span style="color:#F8F8F2;">(ctx)</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">  })</span></span>
<span class="line"><span style="color:#FF79C6;">  if</span><span style="color:#F8F8F2;"> (</span><span style="color:#FF79C6;">!</span><span style="color:#F8F8F2;">pending) {</span></span>
<span class="line"><span style="color:#F8F8F2;">    pending </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> true</span></span>
<span class="line"><span style="color:#6272A4;">    // 判断浏览器是否支持 promise 等判断来选择对应的浏览器任务队列</span></span>
<span class="line"><span style="color:#6272A4;">    // 同步任务 &gt; 微任务 &gt; requestAnimationFrame &gt; DOM渲染 &gt; 宏任务</span></span>
<span class="line"><span style="color:#6272A4;">    //  在选择的对应任务队列中（首选微任务队列）放入 flushCallbacks 函数</span></span>
<span class="line"><span style="color:#6272A4;">    //  flushCallbacks 在执行 callback队列</span></span>
<span class="line"><span style="color:#6272A4;">    //</span></span>
<span class="line"><span style="color:#50FA7B;">    timerFunc</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#6272A4;">  // $flow-disable-line</span></span>
<span class="line"><span style="color:#FF79C6;">  if</span><span style="color:#F8F8F2;"> (</span><span style="color:#FF79C6;">!</span><span style="color:#F8F8F2;">cb </span><span style="color:#FF79C6;">&amp;&amp;</span><span style="color:#FF79C6;"> typeof</span><span style="color:#8BE9FD;font-style:italic;"> Promise</span><span style="color:#FF79C6;"> !==</span><span style="color:#E9F284;"> &#39;</span><span style="color:#F1FA8C;">undefined</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#FF79C6;">    return</span><span style="color:#FF79C6;font-weight:bold;"> new</span><span style="color:#8BE9FD;font-style:italic;"> Promise</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">resolve</span><span style="color:#FF79C6;"> =&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">      _resolve </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> resolve</span></span>
<span class="line"><span style="color:#F8F8F2;">    })</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="timerfunc" tabindex="-1"><a class="header-anchor" href="#timerfunc"><span>timerFunc</span></a></h3><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#6272A4;">/**</span></span>
<span class="line"><span style="color:#6272A4;"> *</span></span>
<span class="line"><span style="color:#6272A4;"> *  callbacks 数组就是 watcher对象集合</span></span>
<span class="line"><span style="color:#6272A4;"> *   1、将 pending 置为 false</span></span>
<span class="line"><span style="color:#6272A4;"> *   2、清空 callbacks 数组</span></span>
<span class="line"><span style="color:#6272A4;"> *   3、执行 callbacks 数组中的每一个函数（比如 flushSchedulerQueue、用户调用 nextTick 传递的回调函数）</span></span>
<span class="line"><span style="color:#6272A4;"> */</span></span>
<span class="line"><span style="color:#FF79C6;">function</span><span style="color:#50FA7B;"> flushCallbacks</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#F8F8F2;">  pending </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> false</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#FF79C6;">  const</span><span style="color:#F8F8F2;"> copies </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> callbacks.</span><span style="color:#50FA7B;">slice</span><span style="color:#F8F8F2;">(</span><span style="color:#BD93F9;">0</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">  callbacks.length </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> 0</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#FF79C6;">  for</span><span style="color:#F8F8F2;"> (</span><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> i </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> 0</span><span style="color:#F8F8F2;">; i </span><span style="color:#FF79C6;">&lt;</span><span style="color:#F8F8F2;"> copies.length; i</span><span style="color:#FF79C6;">++</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">    copies[i]();</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#6272A4;">// timerFunc 的作用很简单，就是将 flushCallbacks 函数放入浏览器的异步任务队列中</span></span>
<span class="line"><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> timerFunc;</span></span>
<span class="line"><span style="color:#FF79C6;">if</span><span style="color:#F8F8F2;"> (</span><span style="color:#FF79C6;">typeof</span><span style="color:#8BE9FD;font-style:italic;"> Promise</span><span style="color:#FF79C6;"> !==</span><span style="color:#E9F284;"> &quot;</span><span style="color:#F1FA8C;">undefined</span><span style="color:#E9F284;">&quot;</span><span style="color:#FF79C6;"> &amp;&amp;</span><span style="color:#50FA7B;"> isNative</span><span style="color:#F8F8F2;">(</span><span style="color:#8BE9FD;font-style:italic;">Promise</span><span style="color:#F8F8F2;">)) {</span></span>
<span class="line"><span style="color:#FF79C6;">  const</span><span style="color:#F8F8F2;"> p </span><span style="color:#FF79C6;">=</span><span style="color:#8BE9FD;font-style:italic;"> Promise</span><span style="color:#F8F8F2;">.</span><span style="color:#50FA7B;">resolve</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#50FA7B;">  timerFunc</span><span style="color:#FF79C6;"> =</span><span style="color:#F8F8F2;"> () </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">    p.</span><span style="color:#50FA7B;">then</span><span style="color:#F8F8F2;">(flushCallbacks);</span></span>
<span class="line"><span style="color:#6272A4;">    /**</span></span>
<span class="line"><span style="color:#6272A4;">     * 在有问题的UIWebViews中，Promise.then不会完全中断，但是它可能会陷入怪异的状态，</span></span>
<span class="line"><span style="color:#6272A4;">     * 在这种状态下，回调被推入微任务队列，但队列没有被刷新，直到浏览器需要执行其他工作，例如处理一个计时器。</span></span>
<span class="line"><span style="color:#6272A4;">     * 因此，我们可以通过添加空计时器来“强制”刷新微任务队列。</span></span>
<span class="line"><span style="color:#6272A4;">     */</span></span>
<span class="line"><span style="color:#FF79C6;">    if</span><span style="color:#F8F8F2;"> (isIOS) </span><span style="color:#50FA7B;">setTimeout</span><span style="color:#F8F8F2;">(noop);</span></span>
<span class="line"><span style="color:#F8F8F2;">  };</span></span>
<span class="line"><span style="color:#F8F8F2;">  isUsingMicroTask </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> true</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">} </span><span style="color:#FF79C6;">else</span><span style="color:#FF79C6;"> if</span><span style="color:#F8F8F2;"> (</span></span>
<span class="line"><span style="color:#FF79C6;">  !</span><span style="color:#F8F8F2;">isIE </span><span style="color:#FF79C6;">&amp;&amp;</span></span>
<span class="line"><span style="color:#FF79C6;">  typeof</span><span style="color:#F8F8F2;"> MutationObserver </span><span style="color:#FF79C6;">!==</span><span style="color:#E9F284;"> &quot;</span><span style="color:#F1FA8C;">undefined</span><span style="color:#E9F284;">&quot;</span><span style="color:#FF79C6;"> &amp;&amp;</span></span>
<span class="line"><span style="color:#F8F8F2;">  (</span><span style="color:#50FA7B;">isNative</span><span style="color:#F8F8F2;">(MutationObserver) </span><span style="color:#FF79C6;">||</span></span>
<span class="line"><span style="color:#6272A4;">    // PhantomJS and iOS 7.x</span></span>
<span class="line"><span style="color:#F8F8F2;">    MutationObserver.</span><span style="color:#50FA7B;">toString</span><span style="color:#F8F8F2;">() </span><span style="color:#FF79C6;">===</span><span style="color:#E9F284;"> &quot;</span><span style="color:#F1FA8C;">[object MutationObserverConstructor]</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#FF79C6;">  let</span><span style="color:#F8F8F2;"> counter </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> 1</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#6272A4;">  // MutationObserver()创建并返回一个新的观察器，它会在触发指定 DOM 事件时，调用指定的回调函数</span></span>
<span class="line"><span style="color:#FF79C6;">  const</span><span style="color:#F8F8F2;"> observer </span><span style="color:#FF79C6;">=</span><span style="color:#FF79C6;font-weight:bold;"> new</span><span style="color:#50FA7B;"> MutationObserver</span><span style="color:#F8F8F2;">(flushCallbacks);</span></span>
<span class="line"><span style="color:#FF79C6;">  const</span><span style="color:#F8F8F2;"> textNode </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> document.</span><span style="color:#50FA7B;">createTextNode</span><span style="color:#F8F8F2;">(</span><span style="color:#50FA7B;">String</span><span style="color:#F8F8F2;">(counter));</span></span>
<span class="line"><span style="color:#F8F8F2;">  observer.</span><span style="color:#50FA7B;">observe</span><span style="color:#F8F8F2;">(textNode, {</span></span>
<span class="line"><span style="color:#F8F8F2;">    characterData</span><span style="color:#FF79C6;">:</span><span style="color:#BD93F9;"> true</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">  });</span></span>
<span class="line"><span style="color:#50FA7B;">  timerFunc</span><span style="color:#FF79C6;"> =</span><span style="color:#F8F8F2;"> () </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">    counter </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> (counter </span><span style="color:#FF79C6;">+</span><span style="color:#BD93F9;"> 1</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">%</span><span style="color:#BD93F9;"> 2</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">    textNode.data </span><span style="color:#FF79C6;">=</span><span style="color:#50FA7B;"> String</span><span style="color:#F8F8F2;">(counter);</span></span>
<span class="line"><span style="color:#F8F8F2;">  };</span></span>
<span class="line"><span style="color:#F8F8F2;">  isUsingMicroTask </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> true</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">} </span><span style="color:#FF79C6;">else</span><span style="color:#FF79C6;"> if</span><span style="color:#F8F8F2;"> (</span><span style="color:#FF79C6;">typeof</span><span style="color:#F8F8F2;"> setImmediate </span><span style="color:#FF79C6;">!==</span><span style="color:#E9F284;"> &quot;</span><span style="color:#F1FA8C;">undefined</span><span style="color:#E9F284;">&quot;</span><span style="color:#FF79C6;"> &amp;&amp;</span><span style="color:#50FA7B;"> isNative</span><span style="color:#F8F8F2;">(setImmediate)) {</span></span>
<span class="line"><span style="color:#6272A4;">  // 在浏览器完成后面的其他语句后，就立刻执行这个回调函数。</span></span>
<span class="line"><span style="color:#50FA7B;">  timerFunc</span><span style="color:#FF79C6;"> =</span><span style="color:#F8F8F2;"> () </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#50FA7B;">    setImmediate</span><span style="color:#F8F8F2;">(flushCallbacks);</span></span>
<span class="line"><span style="color:#F8F8F2;">  };</span></span>
<span class="line"><span style="color:#F8F8F2;">} </span><span style="color:#FF79C6;">else</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#6272A4;">  // Fallback to setTimeout.</span></span>
<span class="line"><span style="color:#50FA7B;">  timerFunc</span><span style="color:#FF79C6;"> =</span><span style="color:#F8F8F2;"> () </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#50FA7B;">    setTimeout</span><span style="color:#F8F8F2;">(flushCallbacks, </span><span style="color:#BD93F9;">0</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">  };</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,90)]))}const t=n(o,[["render",c],["__file","init.html.vue"]]),r=JSON.parse('{"path":"/vue2/init.html","title":"Vue2.x框架原理分析-初始化、响应式原理","lang":"en-US","frontmatter":{"title":"Vue2.x框架原理分析-初始化、响应式原理","date":"2021-07-22T00:00:00.000Z","next":"mounted","category":["Vue"],"type":["vue2"],"description":"开始 vue-loader entry Vue 入口 platforms/web/entry-runtime.ts platforms/runtime/index vue core/index initGlobalAPI initGlobalAPI instance instance core/instance/index 执行方法后添加的属性 _in...","head":[["meta",{"property":"og:url","content":"https://luxiag.github.io/luxiag/blog/vue2/init.html"}],["meta",{"property":"og:title","content":"Vue2.x框架原理分析-初始化、响应式原理"}],["meta",{"property":"og:description","content":"开始 vue-loader entry Vue 入口 platforms/web/entry-runtime.ts platforms/runtime/index vue core/index initGlobalAPI initGlobalAPI instance instance core/instance/index 执行方法后添加的属性 _in..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2022-12-30T06:28:03.000Z"}],["meta",{"property":"article:published_time","content":"2021-07-22T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2022-12-30T06:28:03.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Vue2.x框架原理分析-初始化、响应式原理\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2021-07-22T00:00:00.000Z\\",\\"dateModified\\":\\"2022-12-30T06:28:03.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"luxiag\\",\\"url\\":\\"https://luxiag.github.io/luxiag\\"}]}"]]},"headers":[{"level":2,"title":"开始","slug":"开始","link":"#开始","children":[{"level":3,"title":"vue-loader","slug":"vue-loader","link":"#vue-loader","children":[]},{"level":3,"title":"entry","slug":"entry","link":"#entry","children":[]},{"level":3,"title":"vue","slug":"vue","link":"#vue","children":[]},{"level":3,"title":"initGlobalAPI","slug":"initglobalapi","link":"#initglobalapi","children":[]},{"level":3,"title":"instance","slug":"instance","link":"#instance","children":[]}]},{"level":2,"title":"_init","slug":"init","link":"#init","children":[{"level":3,"title":"vm.$options 处理","slug":"vm-options-处理","link":"#vm-options-处理","children":[]},{"level":3,"title":"callHook","slug":"callhook","link":"#callhook","children":[]}]},{"level":2,"title":"initState","slug":"initstate","link":"#initstate","children":[{"level":3,"title":"proxy","slug":"proxy","link":"#proxy","children":[]},{"level":3,"title":"initProps","slug":"initprops","link":"#initprops","children":[]},{"level":3,"title":"initMethods","slug":"initmethods","link":"#initmethods","children":[]},{"level":3,"title":"initData","slug":"initdata","link":"#initdata","children":[]},{"level":3,"title":"initComputed","slug":"initcomputed","link":"#initcomputed","children":[]},{"level":3,"title":"initWatch","slug":"initwatch","link":"#initwatch","children":[]}]},{"level":2,"title":"响应式原理","slug":"响应式原理","link":"#响应式原理","children":[{"level":3,"title":"更新过程","slug":"更新过程","link":"#更新过程","children":[]},{"level":3,"title":"observe","slug":"observe","link":"#observe","children":[]},{"level":3,"title":"Observer","slug":"observer","link":"#observer","children":[]},{"level":3,"title":"Dep","slug":"dep","link":"#dep","children":[]},{"level":3,"title":"Watcher","slug":"watcher","link":"#watcher","children":[]}]},{"level":2,"title":"初始化过程分析","slug":"初始化过程分析","link":"#初始化过程分析","children":[]},{"level":2,"title":"nextTick","slug":"nexttick","link":"#nexttick","children":[{"level":3,"title":"timerFunc","slug":"timerfunc","link":"#timerfunc","children":[]}]}],"git":{"createdTime":1663833246000,"updatedTime":1672381683000,"contributors":[{"name":"卢祥","email":"example@gmail.com","commits":7},{"name":"luxiang","email":"luxiag@qq.com","commits":2},{"name":"卢祥","email":"example@qq.com","commits":2},{"name":"luxiag","email":"luxiag@qq.com","commits":1}]},"readingTime":{"minutes":24.58,"words":7374},"filePathRelative":"vue2/init.md","localizedDate":"July 22, 2021","excerpt":"<h2>开始</h2>\\n<div class=\\"language-js line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"js\\" data-title=\\"js\\" style=\\"background-color:#282A36;color:#F8F8F2\\"><pre class=\\"shiki dracula vp-code\\"><code><span class=\\"line\\"><span style=\\"color:#FF79C6\\">import</span><span style=\\"color:#F8F8F2\\"> Vue </span><span style=\\"color:#FF79C6\\">from</span><span style=\\"color:#E9F284\\"> \\"</span><span style=\\"color:#F1FA8C\\">vue</span><span style=\\"color:#E9F284\\">\\"</span><span style=\\"color:#F8F8F2\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color:#FF79C6\\">import</span><span style=\\"color:#F8F8F2\\"> App </span><span style=\\"color:#FF79C6\\">from</span><span style=\\"color:#E9F284\\"> \\"</span><span style=\\"color:#F1FA8C\\">./App.vue</span><span style=\\"color:#E9F284\\">\\"</span><span style=\\"color:#F8F8F2\\">;</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color:#FF79C6;font-weight:bold\\">new</span><span style=\\"color:#50FA7B\\"> Vue</span><span style=\\"color:#F8F8F2\\">({</span></span>\\n<span class=\\"line\\"><span style=\\"color:#F8F8F2\\">  el</span><span style=\\"color:#FF79C6\\">:</span><span style=\\"color:#E9F284\\"> \\"</span><span style=\\"color:#F1FA8C\\">#app</span><span style=\\"color:#E9F284\\">\\"</span><span style=\\"color:#F8F8F2\\">,</span></span>\\n<span class=\\"line\\"><span style=\\"color:#6272A4\\">  // h =&gt; createElement()</span></span>\\n<span class=\\"line\\"><span style=\\"color:#6272A4\\">  // _init =&gt; vm._renderProxy = vm</span></span>\\n<span class=\\"line\\"><span style=\\"color:#6272A4\\">  //  render.call(vm._renderProxy,vm.$createElement)</span></span>\\n<span class=\\"line\\"><span style=\\"color:#50FA7B\\">  render</span><span style=\\"color:#FF79C6\\">:</span><span style=\\"color:#F8F8F2\\"> (</span><span style=\\"color:#FFB86C;font-style:italic\\">h</span><span style=\\"color:#F8F8F2\\">) </span><span style=\\"color:#FF79C6\\">=&gt;</span><span style=\\"color:#50FA7B\\"> h</span><span style=\\"color:#F8F8F2\\">(App),</span></span>\\n<span class=\\"line\\"><span style=\\"color:#F8F8F2\\">});</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{t as comp,r as data};
