import{_ as ya,e as ga,g as aa,f as _,j as ba,r as I,i as sa,x as Ca,o as xa}from"./app-Dt3FNJM0.js";import{p as N,ad as Ba,B as Ta,aT as ea,n as m,aA as H,a as c,az as C,H as T,b0 as Z,s as da,i as w,V as R,au as pa,a5 as V,b1 as wa,o as ta,b2 as Ma,k as Sa,l as na,m as la,aH as Aa,aD as Da,a4 as ra,b3 as Pa,W as oa,b4 as ia,b5 as Ea,aC as _a,aJ as Ra,b6 as ka,r as Oa}from"./three.module-_5Kft3IB.js";import{O as K}from"./OrbitControls-86TszHm5.js";import{D as La}from"./DRACOLoader-PzY48gyw.js";import{G as Ua}from"./GLTFLoader--m4klZzU.js";import{R as za}from"./RGBELoader-DKsNqSAJ.js";const J={name:"CopyShader",uniforms:{tDiffuse:{value:null},opacity:{value:1}},vertexShader:`

		varying vec2 vUv;

		void main() {

			vUv = uv;
			gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );

		}`,fragmentShader:`

		uniform float opacity;

		uniform sampler2D tDiffuse;

		varying vec2 vUv;

		void main() {

			vec4 texel = texture2D( tDiffuse, vUv );
			gl_FragColor = opacity * texel;


		}`};class U{constructor(){this.isPass=!0,this.enabled=!0,this.needsSwap=!0,this.clear=!1,this.renderToScreen=!1}setSize(){}render(){console.error("THREE.Pass: .render() must be implemented in derived pass.")}dispose(){}}const ja=new Ba(-1,1,1,-1,0,1);class Na extends Ta{constructor(){super(),this.setAttribute("position",new ea([-1,3,0,-1,-1,0,3,-1,0],3)),this.setAttribute("uv",new ea([0,2,0,0,2,0],2))}}const Va=new Na;class q{constructor(a){this._mesh=new N(Va,a)}dispose(){this._mesh.geometry.dispose()}render(a){a.render(this._mesh,ja)}get material(){return this._mesh.material}set material(a){this._mesh.material=a}}class Y extends U{constructor(a,t){super(),this.textureID=t!==void 0?t:"tDiffuse",a instanceof m?(this.uniforms=a.uniforms,this.material=a):a&&(this.uniforms=H.clone(a.uniforms),this.material=new m({name:a.name!==void 0?a.name:"unspecified",defines:Object.assign({},a.defines),uniforms:this.uniforms,vertexShader:a.vertexShader,fragmentShader:a.fragmentShader})),this.fsQuad=new q(this.material)}render(a,t,e){this.uniforms[this.textureID]&&(this.uniforms[this.textureID].value=e.texture),this.fsQuad.material=this.material,this.renderToScreen?(a.setRenderTarget(null),this.fsQuad.render(a)):(a.setRenderTarget(t),this.clear&&a.clear(a.autoClearColor,a.autoClearDepth,a.autoClearStencil),this.fsQuad.render(a))}dispose(){this.material.dispose(),this.fsQuad.dispose()}}class ca extends U{constructor(a,t){super(),this.scene=a,this.camera=t,this.clear=!0,this.needsSwap=!1,this.inverse=!1}render(a,t,e){const n=a.getContext(),s=a.state;s.buffers.color.setMask(!1),s.buffers.depth.setMask(!1),s.buffers.color.setLocked(!0),s.buffers.depth.setLocked(!0);let l,d;this.inverse?(l=0,d=1):(l=1,d=0),s.buffers.stencil.setTest(!0),s.buffers.stencil.setOp(n.REPLACE,n.REPLACE,n.REPLACE),s.buffers.stencil.setFunc(n.ALWAYS,l,4294967295),s.buffers.stencil.setClear(d),s.buffers.stencil.setLocked(!0),a.setRenderTarget(e),this.clear&&a.clear(),a.render(this.scene,this.camera),a.setRenderTarget(t),this.clear&&a.clear(),a.render(this.scene,this.camera),s.buffers.color.setLocked(!1),s.buffers.depth.setLocked(!1),s.buffers.color.setMask(!0),s.buffers.depth.setMask(!0),s.buffers.stencil.setLocked(!1),s.buffers.stencil.setFunc(n.EQUAL,1,4294967295),s.buffers.stencil.setOp(n.KEEP,n.KEEP,n.KEEP),s.buffers.stencil.setLocked(!0)}}class Wa extends U{constructor(){super(),this.needsSwap=!1}render(a){a.state.buffers.stencil.setLocked(!1),a.state.buffers.stencil.setTest(!1)}}class G{constructor(a,t){if(this.renderer=a,this._pixelRatio=a.getPixelRatio(),t===void 0){const e=a.getSize(new c);this._width=e.width,this._height=e.height,t=new C(this._width*this._pixelRatio,this._height*this._pixelRatio,{type:T}),t.texture.name="EffectComposer.rt1"}else this._width=t.width,this._height=t.height;this.renderTarget1=t,this.renderTarget2=t.clone(),this.renderTarget2.texture.name="EffectComposer.rt2",this.writeBuffer=this.renderTarget1,this.readBuffer=this.renderTarget2,this.renderToScreen=!0,this.passes=[],this.copyPass=new Y(J),this.copyPass.material.blending=Z,this.clock=new da}swapBuffers(){const a=this.readBuffer;this.readBuffer=this.writeBuffer,this.writeBuffer=a}addPass(a){this.passes.push(a),a.setSize(this._width*this._pixelRatio,this._height*this._pixelRatio)}insertPass(a,t){this.passes.splice(t,0,a),a.setSize(this._width*this._pixelRatio,this._height*this._pixelRatio)}removePass(a){const t=this.passes.indexOf(a);t!==-1&&this.passes.splice(t,1)}isLastEnabledPass(a){for(let t=a+1;t<this.passes.length;t++)if(this.passes[t].enabled)return!1;return!0}render(a){a===void 0&&(a=this.clock.getDelta());const t=this.renderer.getRenderTarget();let e=!1;for(let n=0,s=this.passes.length;n<s;n++){const l=this.passes[n];if(l.enabled!==!1){if(l.renderToScreen=this.renderToScreen&&this.isLastEnabledPass(n),l.render(this.renderer,this.writeBuffer,this.readBuffer,a,e),l.needsSwap){if(e){const d=this.renderer.getContext(),o=this.renderer.state.buffers.stencil;o.setFunc(d.NOTEQUAL,1,4294967295),this.copyPass.render(this.renderer,this.writeBuffer,this.readBuffer,a),o.setFunc(d.EQUAL,1,4294967295)}this.swapBuffers()}ca!==void 0&&(l instanceof ca?e=!0:l instanceof Wa&&(e=!1))}}this.renderer.setRenderTarget(t)}reset(a){if(a===void 0){const t=this.renderer.getSize(new c);this._pixelRatio=this.renderer.getPixelRatio(),this._width=t.width,this._height=t.height,a=this.renderTarget1.clone(),a.setSize(this._width*this._pixelRatio,this._height*this._pixelRatio)}this.renderTarget1.dispose(),this.renderTarget2.dispose(),this.renderTarget1=a,this.renderTarget2=a.clone(),this.writeBuffer=this.renderTarget1,this.readBuffer=this.renderTarget2}setSize(a,t){this._width=a,this._height=t;const e=this._width*this._pixelRatio,n=this._height*this._pixelRatio;this.renderTarget1.setSize(e,n),this.renderTarget2.setSize(e,n);for(let s=0;s<this.passes.length;s++)this.passes[s].setSize(e,n)}setPixelRatio(a){this._pixelRatio=a,this.setSize(this._width,this._height)}dispose(){this.renderTarget1.dispose(),this.renderTarget2.dispose(),this.copyPass.dispose()}}class X extends U{constructor(a,t,e=null,n=null,s=null){super(),this.scene=a,this.camera=t,this.overrideMaterial=e,this.clearColor=n,this.clearAlpha=s,this.clear=!0,this.clearDepth=!1,this.needsSwap=!1,this._oldClearColor=new w}render(a,t,e){const n=a.autoClear;a.autoClear=!1;let s,l;this.overrideMaterial!==null&&(l=this.scene.overrideMaterial,this.scene.overrideMaterial=this.overrideMaterial),this.clearColor!==null&&(a.getClearColor(this._oldClearColor),a.setClearColor(this.clearColor,a.getClearAlpha())),this.clearAlpha!==null&&(s=a.getClearAlpha(),a.setClearAlpha(this.clearAlpha)),this.clearDepth==!0&&a.clearDepth(),a.setRenderTarget(this.renderToScreen?null:e),this.clear===!0&&a.clear(a.autoClearColor,a.autoClearDepth,a.autoClearStencil),a.render(this.scene,this.camera),this.clearColor!==null&&a.setClearColor(this._oldClearColor),this.clearAlpha!==null&&a.setClearAlpha(s),this.overrideMaterial!==null&&(this.scene.overrideMaterial=l),a.autoClear=n}}const Ga={uniforms:{tDiffuse:{value:null},luminosityThreshold:{value:1},smoothWidth:{value:1},defaultColor:{value:new w(0)},defaultOpacity:{value:0}},vertexShader:`

		varying vec2 vUv;

		void main() {

			vUv = uv;

			gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );

		}`,fragmentShader:`

		uniform sampler2D tDiffuse;
		uniform vec3 defaultColor;
		uniform float defaultOpacity;
		uniform float luminosityThreshold;
		uniform float smoothWidth;

		varying vec2 vUv;

		void main() {

			vec4 texel = texture2D( tDiffuse, vUv );

			float v = luminance( texel.xyz );

			vec4 outputColor = vec4( defaultColor.rgb, defaultOpacity );

			float alpha = smoothstep( luminosityThreshold, luminosityThreshold + smoothWidth, v );

			gl_FragColor = mix( outputColor, texel, alpha );

		}`};class k extends U{constructor(a,t,e,n){super(),this.strength=t!==void 0?t:1,this.radius=e,this.threshold=n,this.resolution=a!==void 0?new c(a.x,a.y):new c(256,256),this.clearColor=new w(0,0,0),this.renderTargetsHorizontal=[],this.renderTargetsVertical=[],this.nMips=5;let s=Math.round(this.resolution.x/2),l=Math.round(this.resolution.y/2);this.renderTargetBright=new C(s,l,{type:T}),this.renderTargetBright.texture.name="UnrealBloomPass.bright",this.renderTargetBright.texture.generateMipmaps=!1;for(let i=0;i<this.nMips;i++){const y=new C(s,l,{type:T});y.texture.name="UnrealBloomPass.h"+i,y.texture.generateMipmaps=!1,this.renderTargetsHorizontal.push(y);const F=new C(s,l,{type:T});F.texture.name="UnrealBloomPass.v"+i,F.texture.generateMipmaps=!1,this.renderTargetsVertical.push(F),s=Math.round(s/2),l=Math.round(l/2)}const d=Ga;this.highPassUniforms=H.clone(d.uniforms),this.highPassUniforms.luminosityThreshold.value=n,this.highPassUniforms.smoothWidth.value=.01,this.materialHighPassFilter=new m({uniforms:this.highPassUniforms,vertexShader:d.vertexShader,fragmentShader:d.fragmentShader}),this.separableBlurMaterials=[];const o=[3,5,7,9,11];s=Math.round(this.resolution.x/2),l=Math.round(this.resolution.y/2);for(let i=0;i<this.nMips;i++)this.separableBlurMaterials.push(this.getSeperableBlurMaterial(o[i])),this.separableBlurMaterials[i].uniforms.invSize.value=new c(1/s,1/l),s=Math.round(s/2),l=Math.round(l/2);this.compositeMaterial=this.getCompositeMaterial(this.nMips),this.compositeMaterial.uniforms.blurTexture1.value=this.renderTargetsVertical[0].texture,this.compositeMaterial.uniforms.blurTexture2.value=this.renderTargetsVertical[1].texture,this.compositeMaterial.uniforms.blurTexture3.value=this.renderTargetsVertical[2].texture,this.compositeMaterial.uniforms.blurTexture4.value=this.renderTargetsVertical[3].texture,this.compositeMaterial.uniforms.blurTexture5.value=this.renderTargetsVertical[4].texture,this.compositeMaterial.uniforms.bloomStrength.value=t,this.compositeMaterial.uniforms.bloomRadius.value=.1;const v=[1,.8,.6,.4,.2];this.compositeMaterial.uniforms.bloomFactors.value=v,this.bloomTintColors=[new R(1,1,1),new R(1,1,1),new R(1,1,1),new R(1,1,1),new R(1,1,1)],this.compositeMaterial.uniforms.bloomTintColors.value=this.bloomTintColors;const x=J;this.copyUniforms=H.clone(x.uniforms),this.blendMaterial=new m({uniforms:this.copyUniforms,vertexShader:x.vertexShader,fragmentShader:x.fragmentShader,blending:pa,depthTest:!1,depthWrite:!1,transparent:!0}),this.enabled=!0,this.needsSwap=!1,this._oldClearColor=new w,this.oldClearAlpha=1,this.basic=new V,this.fsQuad=new q(null)}dispose(){for(let a=0;a<this.renderTargetsHorizontal.length;a++)this.renderTargetsHorizontal[a].dispose();for(let a=0;a<this.renderTargetsVertical.length;a++)this.renderTargetsVertical[a].dispose();this.renderTargetBright.dispose();for(let a=0;a<this.separableBlurMaterials.length;a++)this.separableBlurMaterials[a].dispose();this.compositeMaterial.dispose(),this.blendMaterial.dispose(),this.basic.dispose(),this.fsQuad.dispose()}setSize(a,t){let e=Math.round(a/2),n=Math.round(t/2);this.renderTargetBright.setSize(e,n);for(let s=0;s<this.nMips;s++)this.renderTargetsHorizontal[s].setSize(e,n),this.renderTargetsVertical[s].setSize(e,n),this.separableBlurMaterials[s].uniforms.invSize.value=new c(1/e,1/n),e=Math.round(e/2),n=Math.round(n/2)}render(a,t,e,n,s){a.getClearColor(this._oldClearColor),this.oldClearAlpha=a.getClearAlpha();const l=a.autoClear;a.autoClear=!1,a.setClearColor(this.clearColor,0),s&&a.state.buffers.stencil.setTest(!1),this.renderToScreen&&(this.fsQuad.material=this.basic,this.basic.map=e.texture,a.setRenderTarget(null),a.clear(),this.fsQuad.render(a)),this.highPassUniforms.tDiffuse.value=e.texture,this.highPassUniforms.luminosityThreshold.value=this.threshold,this.fsQuad.material=this.materialHighPassFilter,a.setRenderTarget(this.renderTargetBright),a.clear(),this.fsQuad.render(a);let d=this.renderTargetBright;for(let o=0;o<this.nMips;o++)this.fsQuad.material=this.separableBlurMaterials[o],this.separableBlurMaterials[o].uniforms.colorTexture.value=d.texture,this.separableBlurMaterials[o].uniforms.direction.value=k.BlurDirectionX,a.setRenderTarget(this.renderTargetsHorizontal[o]),a.clear(),this.fsQuad.render(a),this.separableBlurMaterials[o].uniforms.colorTexture.value=this.renderTargetsHorizontal[o].texture,this.separableBlurMaterials[o].uniforms.direction.value=k.BlurDirectionY,a.setRenderTarget(this.renderTargetsVertical[o]),a.clear(),this.fsQuad.render(a),d=this.renderTargetsVertical[o];this.fsQuad.material=this.compositeMaterial,this.compositeMaterial.uniforms.bloomStrength.value=this.strength,this.compositeMaterial.uniforms.bloomRadius.value=this.radius,this.compositeMaterial.uniforms.bloomTintColors.value=this.bloomTintColors,a.setRenderTarget(this.renderTargetsHorizontal[0]),a.clear(),this.fsQuad.render(a),this.fsQuad.material=this.blendMaterial,this.copyUniforms.tDiffuse.value=this.renderTargetsHorizontal[0].texture,s&&a.state.buffers.stencil.setTest(!0),this.renderToScreen?(a.setRenderTarget(null),this.fsQuad.render(a)):(a.setRenderTarget(e),this.fsQuad.render(a)),a.setClearColor(this._oldClearColor,this.oldClearAlpha),a.autoClear=l}getSeperableBlurMaterial(a){const t=[];for(let e=0;e<a;e++)t.push(.39894*Math.exp(-.5*e*e/(a*a))/a);return new m({defines:{KERNEL_RADIUS:a},uniforms:{colorTexture:{value:null},invSize:{value:new c(.5,.5)},direction:{value:new c(.5,.5)},gaussianCoefficients:{value:t}},vertexShader:`varying vec2 vUv;
				void main() {
					vUv = uv;
					gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );
				}`,fragmentShader:`#include <common>
				varying vec2 vUv;
				uniform sampler2D colorTexture;
				uniform vec2 invSize;
				uniform vec2 direction;
				uniform float gaussianCoefficients[KERNEL_RADIUS];

				void main() {
					float weightSum = gaussianCoefficients[0];
					vec3 diffuseSum = texture2D( colorTexture, vUv ).rgb * weightSum;
					for( int i = 1; i < KERNEL_RADIUS; i ++ ) {
						float x = float(i);
						float w = gaussianCoefficients[i];
						vec2 uvOffset = direction * invSize * x;
						vec3 sample1 = texture2D( colorTexture, vUv + uvOffset ).rgb;
						vec3 sample2 = texture2D( colorTexture, vUv - uvOffset ).rgb;
						diffuseSum += (sample1 + sample2) * w;
						weightSum += 2.0 * w;
					}
					gl_FragColor = vec4(diffuseSum/weightSum, 1.0);
				}`})}getCompositeMaterial(a){return new m({defines:{NUM_MIPS:a},uniforms:{blurTexture1:{value:null},blurTexture2:{value:null},blurTexture3:{value:null},blurTexture4:{value:null},blurTexture5:{value:null},bloomStrength:{value:1},bloomFactors:{value:null},bloomTintColors:{value:null},bloomRadius:{value:0}},vertexShader:`varying vec2 vUv;
				void main() {
					vUv = uv;
					gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );
				}`,fragmentShader:`varying vec2 vUv;
				uniform sampler2D blurTexture1;
				uniform sampler2D blurTexture2;
				uniform sampler2D blurTexture3;
				uniform sampler2D blurTexture4;
				uniform sampler2D blurTexture5;
				uniform float bloomStrength;
				uniform float bloomRadius;
				uniform float bloomFactors[NUM_MIPS];
				uniform vec3 bloomTintColors[NUM_MIPS];

				float lerpBloomFactor(const in float factor) {
					float mirrorFactor = 1.2 - factor;
					return mix(factor, mirrorFactor, bloomRadius);
				}

				void main() {
					gl_FragColor = bloomStrength * ( lerpBloomFactor(bloomFactors[0]) * vec4(bloomTintColors[0], 1.0) * texture2D(blurTexture1, vUv) +
						lerpBloomFactor(bloomFactors[1]) * vec4(bloomTintColors[1], 1.0) * texture2D(blurTexture2, vUv) +
						lerpBloomFactor(bloomFactors[2]) * vec4(bloomTintColors[2], 1.0) * texture2D(blurTexture3, vUv) +
						lerpBloomFactor(bloomFactors[3]) * vec4(bloomTintColors[3], 1.0) * texture2D(blurTexture4, vUv) +
						lerpBloomFactor(bloomFactors[4]) * vec4(bloomTintColors[4], 1.0) * texture2D(blurTexture5, vUv) );
				}`})}}k.BlurDirectionX=new c(1,0);k.BlurDirectionY=new c(0,1);class A extends U{constructor(a,t,e,n){super(),this.renderScene=t,this.renderCamera=e,this.selectedObjects=n!==void 0?n:[],this.visibleEdgeColor=new w(1,1,1),this.hiddenEdgeColor=new w(.1,.04,.02),this.edgeGlow=0,this.usePatternTexture=!1,this.edgeThickness=1,this.edgeStrength=3,this.downSampleRatio=2,this.pulsePeriod=0,this._visibilityCache=new Map,this._selectionCache=new Set,this.resolution=a!==void 0?new c(a.x,a.y):new c(256,256);const s=Math.round(this.resolution.x/this.downSampleRatio),l=Math.round(this.resolution.y/this.downSampleRatio);this.renderTargetMaskBuffer=new C(this.resolution.x,this.resolution.y),this.renderTargetMaskBuffer.texture.name="OutlinePass.mask",this.renderTargetMaskBuffer.texture.generateMipmaps=!1,this.depthMaterial=new wa,this.depthMaterial.side=ta,this.depthMaterial.depthPacking=Ma,this.depthMaterial.blending=Z,this.prepareMaskMaterial=this.getPrepareMaskMaterial(),this.prepareMaskMaterial.side=ta,this.prepareMaskMaterial.fragmentShader=x(this.prepareMaskMaterial.fragmentShader,this.renderCamera),this.renderTargetDepthBuffer=new C(this.resolution.x,this.resolution.y,{type:T}),this.renderTargetDepthBuffer.texture.name="OutlinePass.depth",this.renderTargetDepthBuffer.texture.generateMipmaps=!1,this.renderTargetMaskDownSampleBuffer=new C(s,l,{type:T}),this.renderTargetMaskDownSampleBuffer.texture.name="OutlinePass.depthDownSample",this.renderTargetMaskDownSampleBuffer.texture.generateMipmaps=!1,this.renderTargetBlurBuffer1=new C(s,l,{type:T}),this.renderTargetBlurBuffer1.texture.name="OutlinePass.blur1",this.renderTargetBlurBuffer1.texture.generateMipmaps=!1,this.renderTargetBlurBuffer2=new C(Math.round(s/2),Math.round(l/2),{type:T}),this.renderTargetBlurBuffer2.texture.name="OutlinePass.blur2",this.renderTargetBlurBuffer2.texture.generateMipmaps=!1,this.edgeDetectionMaterial=this.getEdgeDetectionMaterial(),this.renderTargetEdgeBuffer1=new C(s,l,{type:T}),this.renderTargetEdgeBuffer1.texture.name="OutlinePass.edge1",this.renderTargetEdgeBuffer1.texture.generateMipmaps=!1,this.renderTargetEdgeBuffer2=new C(Math.round(s/2),Math.round(l/2),{type:T}),this.renderTargetEdgeBuffer2.texture.name="OutlinePass.edge2",this.renderTargetEdgeBuffer2.texture.generateMipmaps=!1;const d=4,o=4;this.separableBlurMaterial1=this.getSeperableBlurMaterial(d),this.separableBlurMaterial1.uniforms.texSize.value.set(s,l),this.separableBlurMaterial1.uniforms.kernelRadius.value=1,this.separableBlurMaterial2=this.getSeperableBlurMaterial(o),this.separableBlurMaterial2.uniforms.texSize.value.set(Math.round(s/2),Math.round(l/2)),this.separableBlurMaterial2.uniforms.kernelRadius.value=o,this.overlayMaterial=this.getOverlayMaterial();const v=J;this.copyUniforms=H.clone(v.uniforms),this.materialCopy=new m({uniforms:this.copyUniforms,vertexShader:v.vertexShader,fragmentShader:v.fragmentShader,blending:Z,depthTest:!1,depthWrite:!1}),this.enabled=!0,this.needsSwap=!1,this._oldClearColor=new w,this.oldClearAlpha=1,this.fsQuad=new q(null),this.tempPulseColor1=new w,this.tempPulseColor2=new w,this.textureMatrix=new Sa;function x(i,y){const F=y.isPerspectiveCamera?"perspective":"orthographic";return i.replace(/DEPTH_TO_VIEW_Z/g,F+"DepthToViewZ")}}dispose(){this.renderTargetMaskBuffer.dispose(),this.renderTargetDepthBuffer.dispose(),this.renderTargetMaskDownSampleBuffer.dispose(),this.renderTargetBlurBuffer1.dispose(),this.renderTargetBlurBuffer2.dispose(),this.renderTargetEdgeBuffer1.dispose(),this.renderTargetEdgeBuffer2.dispose(),this.depthMaterial.dispose(),this.prepareMaskMaterial.dispose(),this.edgeDetectionMaterial.dispose(),this.separableBlurMaterial1.dispose(),this.separableBlurMaterial2.dispose(),this.overlayMaterial.dispose(),this.materialCopy.dispose(),this.fsQuad.dispose()}setSize(a,t){this.renderTargetMaskBuffer.setSize(a,t),this.renderTargetDepthBuffer.setSize(a,t);let e=Math.round(a/this.downSampleRatio),n=Math.round(t/this.downSampleRatio);this.renderTargetMaskDownSampleBuffer.setSize(e,n),this.renderTargetBlurBuffer1.setSize(e,n),this.renderTargetEdgeBuffer1.setSize(e,n),this.separableBlurMaterial1.uniforms.texSize.value.set(e,n),e=Math.round(e/2),n=Math.round(n/2),this.renderTargetBlurBuffer2.setSize(e,n),this.renderTargetEdgeBuffer2.setSize(e,n),this.separableBlurMaterial2.uniforms.texSize.value.set(e,n)}updateSelectionCache(){const a=this._selectionCache;function t(e){e.isMesh&&a.add(e)}a.clear();for(let e=0;e<this.selectedObjects.length;e++)this.selectedObjects[e].traverse(t)}changeVisibilityOfSelectedObjects(a){const t=this._visibilityCache;for(const e of this._selectionCache)a===!0?e.visible=t.get(e):(t.set(e,e.visible),e.visible=a)}changeVisibilityOfNonSelectedObjects(a){const t=this._visibilityCache,e=this._selectionCache;function n(s){if(s.isMesh||s.isSprite){if(!e.has(s)){const l=s.visible;(a===!1||t.get(s)===!0)&&(s.visible=a),t.set(s,l)}}else(s.isPoints||s.isLine)&&(a===!0?s.visible=t.get(s):(t.set(s,s.visible),s.visible=a))}this.renderScene.traverse(n)}updateTextureMatrix(){this.textureMatrix.set(.5,0,0,.5,0,.5,0,.5,0,0,.5,.5,0,0,0,1),this.textureMatrix.multiply(this.renderCamera.projectionMatrix),this.textureMatrix.multiply(this.renderCamera.matrixWorldInverse)}render(a,t,e,n,s){if(this.selectedObjects.length>0){a.getClearColor(this._oldClearColor),this.oldClearAlpha=a.getClearAlpha();const l=a.autoClear;a.autoClear=!1,s&&a.state.buffers.stencil.setTest(!1),a.setClearColor(16777215,1),this.updateSelectionCache(),this.changeVisibilityOfSelectedObjects(!1);const d=this.renderScene.background;if(this.renderScene.background=null,this.renderScene.overrideMaterial=this.depthMaterial,a.setRenderTarget(this.renderTargetDepthBuffer),a.clear(),a.render(this.renderScene,this.renderCamera),this.changeVisibilityOfSelectedObjects(!0),this._visibilityCache.clear(),this.updateTextureMatrix(),this.changeVisibilityOfNonSelectedObjects(!1),this.renderScene.overrideMaterial=this.prepareMaskMaterial,this.prepareMaskMaterial.uniforms.cameraNearFar.value.set(this.renderCamera.near,this.renderCamera.far),this.prepareMaskMaterial.uniforms.depthTexture.value=this.renderTargetDepthBuffer.texture,this.prepareMaskMaterial.uniforms.textureMatrix.value=this.textureMatrix,a.setRenderTarget(this.renderTargetMaskBuffer),a.clear(),a.render(this.renderScene,this.renderCamera),this.renderScene.overrideMaterial=null,this.changeVisibilityOfNonSelectedObjects(!0),this._visibilityCache.clear(),this._selectionCache.clear(),this.renderScene.background=d,this.fsQuad.material=this.materialCopy,this.copyUniforms.tDiffuse.value=this.renderTargetMaskBuffer.texture,a.setRenderTarget(this.renderTargetMaskDownSampleBuffer),a.clear(),this.fsQuad.render(a),this.tempPulseColor1.copy(this.visibleEdgeColor),this.tempPulseColor2.copy(this.hiddenEdgeColor),this.pulsePeriod>0){const o=.625+Math.cos(performance.now()*.01/this.pulsePeriod)*.75/2;this.tempPulseColor1.multiplyScalar(o),this.tempPulseColor2.multiplyScalar(o)}this.fsQuad.material=this.edgeDetectionMaterial,this.edgeDetectionMaterial.uniforms.maskTexture.value=this.renderTargetMaskDownSampleBuffer.texture,this.edgeDetectionMaterial.uniforms.texSize.value.set(this.renderTargetMaskDownSampleBuffer.width,this.renderTargetMaskDownSampleBuffer.height),this.edgeDetectionMaterial.uniforms.visibleEdgeColor.value=this.tempPulseColor1,this.edgeDetectionMaterial.uniforms.hiddenEdgeColor.value=this.tempPulseColor2,a.setRenderTarget(this.renderTargetEdgeBuffer1),a.clear(),this.fsQuad.render(a),this.fsQuad.material=this.separableBlurMaterial1,this.separableBlurMaterial1.uniforms.colorTexture.value=this.renderTargetEdgeBuffer1.texture,this.separableBlurMaterial1.uniforms.direction.value=A.BlurDirectionX,this.separableBlurMaterial1.uniforms.kernelRadius.value=this.edgeThickness,a.setRenderTarget(this.renderTargetBlurBuffer1),a.clear(),this.fsQuad.render(a),this.separableBlurMaterial1.uniforms.colorTexture.value=this.renderTargetBlurBuffer1.texture,this.separableBlurMaterial1.uniforms.direction.value=A.BlurDirectionY,a.setRenderTarget(this.renderTargetEdgeBuffer1),a.clear(),this.fsQuad.render(a),this.fsQuad.material=this.separableBlurMaterial2,this.separableBlurMaterial2.uniforms.colorTexture.value=this.renderTargetEdgeBuffer1.texture,this.separableBlurMaterial2.uniforms.direction.value=A.BlurDirectionX,a.setRenderTarget(this.renderTargetBlurBuffer2),a.clear(),this.fsQuad.render(a),this.separableBlurMaterial2.uniforms.colorTexture.value=this.renderTargetBlurBuffer2.texture,this.separableBlurMaterial2.uniforms.direction.value=A.BlurDirectionY,a.setRenderTarget(this.renderTargetEdgeBuffer2),a.clear(),this.fsQuad.render(a),this.fsQuad.material=this.overlayMaterial,this.overlayMaterial.uniforms.maskTexture.value=this.renderTargetMaskBuffer.texture,this.overlayMaterial.uniforms.edgeTexture1.value=this.renderTargetEdgeBuffer1.texture,this.overlayMaterial.uniforms.edgeTexture2.value=this.renderTargetEdgeBuffer2.texture,this.overlayMaterial.uniforms.patternTexture.value=this.patternTexture,this.overlayMaterial.uniforms.edgeStrength.value=this.edgeStrength,this.overlayMaterial.uniforms.edgeGlow.value=this.edgeGlow,this.overlayMaterial.uniforms.usePatternTexture.value=this.usePatternTexture,s&&a.state.buffers.stencil.setTest(!0),a.setRenderTarget(e),this.fsQuad.render(a),a.setClearColor(this._oldClearColor,this.oldClearAlpha),a.autoClear=l}this.renderToScreen&&(this.fsQuad.material=this.materialCopy,this.copyUniforms.tDiffuse.value=e.texture,a.setRenderTarget(null),this.fsQuad.render(a))}getPrepareMaskMaterial(){return new m({uniforms:{depthTexture:{value:null},cameraNearFar:{value:new c(.5,.5)},textureMatrix:{value:null}},vertexShader:`#include <morphtarget_pars_vertex>
				#include <skinning_pars_vertex>

				varying vec4 projTexCoord;
				varying vec4 vPosition;
				uniform mat4 textureMatrix;

				void main() {

					#include <skinbase_vertex>
					#include <begin_vertex>
					#include <morphtarget_vertex>
					#include <skinning_vertex>
					#include <project_vertex>

					vPosition = mvPosition;

					vec4 worldPosition = vec4( transformed, 1.0 );

					#ifdef USE_INSTANCING

						worldPosition = instanceMatrix * worldPosition;

					#endif

					worldPosition = modelMatrix * worldPosition;

					projTexCoord = textureMatrix * worldPosition;

				}`,fragmentShader:`#include <packing>
				varying vec4 vPosition;
				varying vec4 projTexCoord;
				uniform sampler2D depthTexture;
				uniform vec2 cameraNearFar;

				void main() {

					float depth = unpackRGBAToDepth(texture2DProj( depthTexture, projTexCoord ));
					float viewZ = - DEPTH_TO_VIEW_Z( depth, cameraNearFar.x, cameraNearFar.y );
					float depthTest = (-vPosition.z > viewZ) ? 1.0 : 0.0;
					gl_FragColor = vec4(0.0, depthTest, 1.0, 1.0);

				}`})}getEdgeDetectionMaterial(){return new m({uniforms:{maskTexture:{value:null},texSize:{value:new c(.5,.5)},visibleEdgeColor:{value:new R(1,1,1)},hiddenEdgeColor:{value:new R(1,1,1)}},vertexShader:`varying vec2 vUv;

				void main() {
					vUv = uv;
					gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );
				}`,fragmentShader:`varying vec2 vUv;

				uniform sampler2D maskTexture;
				uniform vec2 texSize;
				uniform vec3 visibleEdgeColor;
				uniform vec3 hiddenEdgeColor;

				void main() {
					vec2 invSize = 1.0 / texSize;
					vec4 uvOffset = vec4(1.0, 0.0, 0.0, 1.0) * vec4(invSize, invSize);
					vec4 c1 = texture2D( maskTexture, vUv + uvOffset.xy);
					vec4 c2 = texture2D( maskTexture, vUv - uvOffset.xy);
					vec4 c3 = texture2D( maskTexture, vUv + uvOffset.yw);
					vec4 c4 = texture2D( maskTexture, vUv - uvOffset.yw);
					float diff1 = (c1.r - c2.r)*0.5;
					float diff2 = (c3.r - c4.r)*0.5;
					float d = length( vec2(diff1, diff2) );
					float a1 = min(c1.g, c2.g);
					float a2 = min(c3.g, c4.g);
					float visibilityFactor = min(a1, a2);
					vec3 edgeColor = 1.0 - visibilityFactor > 0.001 ? visibleEdgeColor : hiddenEdgeColor;
					gl_FragColor = vec4(edgeColor, 1.0) * vec4(d);
				}`})}getSeperableBlurMaterial(a){return new m({defines:{MAX_RADIUS:a},uniforms:{colorTexture:{value:null},texSize:{value:new c(.5,.5)},direction:{value:new c(.5,.5)},kernelRadius:{value:1}},vertexShader:`varying vec2 vUv;

				void main() {
					vUv = uv;
					gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );
				}`,fragmentShader:`#include <common>
				varying vec2 vUv;
				uniform sampler2D colorTexture;
				uniform vec2 texSize;
				uniform vec2 direction;
				uniform float kernelRadius;

				float gaussianPdf(in float x, in float sigma) {
					return 0.39894 * exp( -0.5 * x * x/( sigma * sigma))/sigma;
				}

				void main() {
					vec2 invSize = 1.0 / texSize;
					float sigma = kernelRadius/2.0;
					float weightSum = gaussianPdf(0.0, sigma);
					vec4 diffuseSum = texture2D( colorTexture, vUv) * weightSum;
					vec2 delta = direction * invSize * kernelRadius/float(MAX_RADIUS);
					vec2 uvOffset = delta;
					for( int i = 1; i <= MAX_RADIUS; i ++ ) {
						float x = kernelRadius * float(i) / float(MAX_RADIUS);
						float w = gaussianPdf(x, sigma);
						vec4 sample1 = texture2D( colorTexture, vUv + uvOffset);
						vec4 sample2 = texture2D( colorTexture, vUv - uvOffset);
						diffuseSum += ((sample1 + sample2) * w);
						weightSum += (2.0 * w);
						uvOffset += delta;
					}
					gl_FragColor = diffuseSum/weightSum;
				}`})}getOverlayMaterial(){return new m({uniforms:{maskTexture:{value:null},edgeTexture1:{value:null},edgeTexture2:{value:null},patternTexture:{value:null},edgeStrength:{value:1},edgeGlow:{value:1},usePatternTexture:{value:0}},vertexShader:`varying vec2 vUv;

				void main() {
					vUv = uv;
					gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );
				}`,fragmentShader:`varying vec2 vUv;

				uniform sampler2D maskTexture;
				uniform sampler2D edgeTexture1;
				uniform sampler2D edgeTexture2;
				uniform sampler2D patternTexture;
				uniform float edgeStrength;
				uniform float edgeGlow;
				uniform bool usePatternTexture;

				void main() {
					vec4 edgeValue1 = texture2D(edgeTexture1, vUv);
					vec4 edgeValue2 = texture2D(edgeTexture2, vUv);
					vec4 maskColor = texture2D(maskTexture, vUv);
					vec4 patternColor = texture2D(patternTexture, 6.0 * vUv);
					float visibilityFactor = 1.0 - maskColor.g > 0.0 ? 1.0 : 0.5;
					vec4 edgeValue = edgeValue1 + edgeValue2 * edgeGlow;
					vec4 finalColor = edgeStrength * maskColor.r * edgeValue;
					if(usePatternTexture)
						finalColor += + visibilityFactor * (1.0 - maskColor.r) * (1.0 - patternColor.r);
					gl_FragColor = finalColor;
				}`,blending:pa,depthTest:!1,depthWrite:!1,transparent:!0})}}A.BlurDirectionX=new c(1,0);A.BlurDirectionY=new c(0,1);const Ha={__name:"threejs-luminous.html",setup(M,{expose:a}){a();let t;const e=I(),n=()=>{const o=new na,v=new la(75,2,.1,100);v.position.set(0,0,20),o.add(v);const x=new Aa(1,32,32),i=new V({color:"#ffaa33"}),y=new N(x,i);y.position.set(-5,0,0),y.layers.set(1),o.add(y);const F=new Da(1,1,1),g=new ra({emissive:3407667}),u=new N(F,g);u.position.set(5,0,0),o.add(u);const h=new Pa(1,.3,100,16),O=new ra({emissive:3407667}),L=new N(h,O);L.position.set(0,0,0),o.add(L);const p=new oa;p.setSize(e.value.offsetWidth,e.value.offsetWidth/2),p.shadowMap.enabled=!0,p.physicallyCorrectLights=!0,p.autoClear=!1;const f=new G(p);f.setSize(e.value.offsetWidth,e.value.offsetWidth/2);const W=new X(o,v);f.addPass(W);const b=new A(new c(e.value.offsetWidth,e.value.offsetWidth/2),o,v);b.edgeStrength=3,b.edgeGlow=2,b.edgeThickness=3,b.pulsePeriod=2,b.selectedObjects=[L],f.addPass(b),e.value.appendChild(p.domElement);const z=new K(v,p.domElement);z.enableDamping=!0;const j=new da;new V({color:"black"}),new ia().set(0);function P(){j.getDelta(),z.update(),p.clear(),v.layers.set(0),f.render(),p.clearDepth(),v.layers.set(1),p.render(o,v),requestAnimationFrame(P)}P(),window.addEventListener("resize",()=>{p.setSize(e.value.offsetWidth,e.value.offsetWidth/2),p.setPixelRatio(window.devicePixelRatio)}),e.value.addEventListener("click",()=>{u.layers.set(1)})},s=I(),l=()=>{const x=new ia;x.set(1);const i={exposure:1,bloomStrength:5,bloomThreshold:0,bloomRadius:0,scene:"Scene with Glow"},y=new V({color:"black"}),F={},g=new oa({antialias:!0});g.setSize(s.value.offsetWidth,s.value.offsetWidth/2),g.toneMapping=Ea,s.value.appendChild(g.domElement);const u=new na,h=new la(40,2,1,200);h.position.set(0,0,20),h.lookAt(0,0,0);const O=new K(h,g.domElement);O.maxPolarAngle=Math.PI*.5,O.minDistance=1,O.maxDistance=100,O.addEventListener("change",S),u.add(new _a(4210752));const L=new X(u,h),p=new k(new c(window.innerWidth,window.innerHeight),1.5,.4,.85);p.threshold=i.bloomThreshold,p.strength=i.bloomStrength,p.radius=i.bloomRadius;const f=new G(g);f.renderToScreen=!1,f.addPass(L),f.addPass(p);const W=new Y(new m({uniforms:{baseTexture:{value:null},bloomTexture:{value:f.renderTarget2.texture}},vertexShader:`
         varying vec2 vUv;

         void main() {

          vUv = uv;

          gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );

         }
          `,fragmentShader:`
         uniform sampler2D baseTexture;
         uniform sampler2D bloomTexture;

         varying vec2 vUv;

         void main() {

          gl_FragColor = ( texture2D( baseTexture, vUv ) + vec4( 1.0 ) * texture2D( bloomTexture, vUv ) );

         }
          `,defines:{}}),"baseTexture");W.needsSwap=!0;const b=new G(g);b.addPass(L),b.addPass(W);const z=new Ra,j=new c;s.value.addEventListener("pointerdown",va);const D=new t.GUI;D.domElement.style.position="absolute",D.domElement.style.top="0px",D.domElement.style.right="0px",s.value.appendChild(D.domElement),D.add(i,"scene",["Scene with Glow","Glow only","Scene only"]).onChange(function(r){switch(r){case"Scene with Glow":f.renderToScreen=!1;break;case"Glow only":f.renderToScreen=!0;break}S()});const P=D.addFolder("Bloom Parameters");P.add(i,"exposure",.1,2).onChange(function(r){g.toneMappingExposure=Math.pow(r,4),S()}),P.add(i,"bloomThreshold",0,1).onChange(function(r){p.threshold=Number(r),S()}),P.add(i,"bloomStrength",0,10).onChange(function(r){p.strength=Number(r),S()}),P.add(i,"bloomRadius",0,1).step(.01).onChange(function(r){p.radius=Number(r),S()}),fa();function va(r){j.x=r.clientX/window.innerWidth*2-1,j.y=-(r.clientY/window.innerHeight)*2+1,z.setFromCamera(j,h);const B=z.intersectObjects(u.children,!1);B.length>0&&(B[0].object.layers.toggle(1),S())}window.onresize=function(){const r=s.value.offsetWidth,B=s.value.offsetWidth/2;h.aspect=r/B,h.updateProjectionMatrix(),g.setSize(r,B),f.setSize(r,B),b.setSize(r,B),S()};function fa(){u.traverse(ua),u.children.length=0;const r=new ka(1,15);for(let B=0;B<50;B++){const Q=new w;Q.setHSL(Math.random(),.7,Math.random()*.2+.05);const ma=new V({color:Q}),E=new N(r,ma);E.position.x=Math.random()*10-5,E.position.y=Math.random()*10-5,E.position.z=Math.random()*10-5,E.position.normalize().multiplyScalar(Math.random()*4+2),E.scale.setScalar(Math.random()*Math.random()+.5),u.add(E),Math.random()<.25&&E.layers.enable(1)}S()}function ua(r){r.material&&r.material.dispose()}function S(){switch(i.scene){case"Scene only":g.render(u,h);break;case"Glow only":$(!1);break;case"Scene with Glow":default:$(!0),b.render();break}}function $(r){r===!0?(u.traverse(Fa),f.render(),u.traverse(ha)):(h.layers.set(1),f.render(),h.layers.set(0))}function Fa(r){r.isMesh&&x.test(r.layers)===!1&&(F[r.uuid]=r.material,r.material=y)}function ha(r){F[r.uuid]&&(r.material=F[r.uuid],delete F[r.uuid])}};sa(async()=>{t=await Ca(()=>import("./dat.gui.module-DNo137I2.js"),[]),n(),l()});const d={get dat(){return t},set dat(o){t=o},outLine:e,initPoint:n,bloomRef:s,initBloom:l,ref:I,onMounted:sa,get THREE(){return Oa},get OrbitControls(){return K},get DRACOLoader(){return La},get GLTFLoader(){return Ua},get RGBELoader(){return za},get EffectComposer(){return G},get RenderPass(){return X},get UnrealBloomPass(){return k},get OutlinePass(){return A},get ShaderPass(){return Y}};return Object.defineProperty(d,"__isScriptSetup",{enumerable:!1,value:!0}),d}},Qa={ref:"outLine"},Ia={ref:"bloomRef",class:"bloom"};function Ka(M,a,t,e,n,s){return xa(),ga("div",null,[a[0]||(a[0]=aa(`<div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#282A36;color:#F8F8F2;" data-v-1af1c385><pre class="shiki dracula vp-code" data-v-1af1c385><code data-v-1af1c385><span class="line" data-v-1af1c385><span style="color:#6272A4;" data-v-1af1c385>//outline pass 创建高亮轮廓</span></span>
<span class="line" data-v-1af1c385><span style="color:#6272A4;" data-v-1af1c385>// 创建 Outline Pass，传入轮廓边框的大小，场景以及相机</span></span>
<span class="line" data-v-1af1c385><span style="color:#FF79C6;" data-v-1af1c385>const</span><span style="color:#F8F8F2;" data-v-1af1c385> outLinePass </span><span style="color:#FF79C6;" data-v-1af1c385>=</span><span style="color:#FF79C6;font-weight:bold;" data-v-1af1c385> new</span><span style="color:#50FA7B;" data-v-1af1c385> OutlinePass</span><span style="color:#F8F8F2;" data-v-1af1c385>(</span></span>
<span class="line" data-v-1af1c385><span style="color:#FF79C6;font-weight:bold;" data-v-1af1c385>  new</span><span style="color:#BD93F9;" data-v-1af1c385> THREE</span><span style="color:#F8F8F2;" data-v-1af1c385>.</span><span style="color:#50FA7B;" data-v-1af1c385>Vector2</span><span style="color:#F8F8F2;" data-v-1af1c385>(outLine.value.offsetWidth,outLine.value.offsetWidth</span><span style="color:#FF79C6;" data-v-1af1c385>/</span><span style="color:#BD93F9;" data-v-1af1c385>2</span><span style="color:#F8F8F2;" data-v-1af1c385>), </span><span style="color:#6272A4;" data-v-1af1c385>// 轮廓边框大小</span></span>
<span class="line" data-v-1af1c385><span style="color:#F8F8F2;" data-v-1af1c385>  scene, </span><span style="color:#6272A4;" data-v-1af1c385>// 场景</span></span>
<span class="line" data-v-1af1c385><span style="color:#F8F8F2;" data-v-1af1c385>  camera </span><span style="color:#6272A4;" data-v-1af1c385>// 相机</span></span>
<span class="line" data-v-1af1c385><span style="color:#F8F8F2;" data-v-1af1c385>);</span></span>
<span class="line" data-v-1af1c385></span>
<span class="line" data-v-1af1c385><span style="color:#6272A4;" data-v-1af1c385>// 设置轮廓边框的强度</span></span>
<span class="line" data-v-1af1c385><span style="color:#F8F8F2;" data-v-1af1c385>outLinePass.edgeStrength </span><span style="color:#FF79C6;" data-v-1af1c385>=</span><span style="color:#BD93F9;" data-v-1af1c385> 3</span><span style="color:#F8F8F2;" data-v-1af1c385>;</span></span>
<span class="line" data-v-1af1c385></span>
<span class="line" data-v-1af1c385><span style="color:#6272A4;" data-v-1af1c385>// 设置轮廓边框的炫光强度</span></span>
<span class="line" data-v-1af1c385><span style="color:#F8F8F2;" data-v-1af1c385>outLinePass.edgeGlow </span><span style="color:#FF79C6;" data-v-1af1c385>=</span><span style="color:#BD93F9;" data-v-1af1c385> 2</span><span style="color:#F8F8F2;" data-v-1af1c385>;</span></span>
<span class="line" data-v-1af1c385></span>
<span class="line" data-v-1af1c385><span style="color:#6272A4;" data-v-1af1c385>// 设置轮廓边框的粗细</span></span>
<span class="line" data-v-1af1c385><span style="color:#F8F8F2;" data-v-1af1c385>outLinePass.edgeThickness </span><span style="color:#FF79C6;" data-v-1af1c385>=</span><span style="color:#BD93F9;" data-v-1af1c385> 3</span><span style="color:#F8F8F2;" data-v-1af1c385>;</span></span>
<span class="line" data-v-1af1c385></span>
<span class="line" data-v-1af1c385><span style="color:#6272A4;" data-v-1af1c385>// 设置轮廓边框的动画效果周期（单位为秒）</span></span>
<span class="line" data-v-1af1c385><span style="color:#F8F8F2;" data-v-1af1c385>outLinePass.pulsePeriod </span><span style="color:#FF79C6;" data-v-1af1c385>=</span><span style="color:#BD93F9;" data-v-1af1c385> 2</span><span style="color:#F8F8F2;" data-v-1af1c385>;</span></span>
<span class="line" data-v-1af1c385></span>
<span class="line" data-v-1af1c385><span style="color:#6272A4;" data-v-1af1c385>// 设置需要进行轮廓边框高亮的物体，这里只选择了一个 torusKnot</span></span>
<span class="line" data-v-1af1c385><span style="color:#F8F8F2;" data-v-1af1c385>outLinePass.selectedObjects </span><span style="color:#FF79C6;" data-v-1af1c385>=</span><span style="color:#F8F8F2;" data-v-1af1c385> [torusKnot];</span></span>
<span class="line" data-v-1af1c385></span>
<span class="line" data-v-1af1c385><span style="color:#6272A4;" data-v-1af1c385>// 将 Outline Pass 添加到渲染的 Pass 中</span></span>
<span class="line" data-v-1af1c385><span style="color:#F8F8F2;" data-v-1af1c385>composer.</span><span style="color:#50FA7B;" data-v-1af1c385>addPass</span><span style="color:#F8F8F2;" data-v-1af1c385>(outLinePass);</span></span>
<span class="line" data-v-1af1c385></span>
<span class="line" data-v-1af1c385><span style="color:#6272A4;" data-v-1af1c385>// renderPass</span></span>
<span class="line" data-v-1af1c385><span style="color:#6272A4;" data-v-1af1c385>/*</span></span>
<span class="line" data-v-1af1c385><span style="color:#6272A4;" data-v-1af1c385>RenderPass 是 Three.js 中的一个渲染器通道，它用于将场景中的一部分物体单独渲染到屏幕上。RenderPass 可以用于实现多种效果，</span></span>
<span class="line" data-v-1af1c385><span style="color:#6272A4;" data-v-1af1c385>例如描边（Outline）、后期处理（Post-processing）、阴影等。</span></span>
<span class="line" data-v-1af1c385></span>
<span class="line" data-v-1af1c385><span style="color:#6272A4;" data-v-1af1c385>Renderer 是 Three.js 中的渲染器，它是实现 Three.js 渲染功能的核心组件。</span></span>
<span class="line" data-v-1af1c385><span style="color:#6272A4;" data-v-1af1c385>Renderer 主要负责将场景中的对象转换成可视图像，并输出到屏幕或者图片等媒介上。它支持多种渲染方式，例如 Canvas、WebGL、SVG等。</span></span>
<span class="line" data-v-1af1c385></span>
<span class="line" data-v-1af1c385><span style="color:#6272A4;" data-v-1af1c385>简单来讲，RenderPass 是 Renderer 的一种子组件，它主要用于实现某些特殊效果的渲染流程，</span></span>
<span class="line" data-v-1af1c385><span style="color:#6272A4;" data-v-1af1c385>而 Renderer 则是 Three.js 的主渲染器，它负责将所有物体渲染到屏幕上或其他媒介上。</span></span>
<span class="line" data-v-1af1c385><span style="color:#6272A4;" data-v-1af1c385>*/</span></span>
<span class="line" data-v-1af1c385><span style="color:#6272A4;" data-v-1af1c385>//EffectComposer</span></span>
<span class="line" data-v-1af1c385><span style="color:#6272A4;" data-v-1af1c385>/*</span></span>
<span class="line" data-v-1af1c385><span style="color:#6272A4;" data-v-1af1c385>EffectComposer 是 Three.js 中用于实现后期处理（post-processing）效果的函数。</span></span>
<span class="line" data-v-1af1c385><span style="color:#6272A4;" data-v-1af1c385>它可以将场景、相机和渲染器作为参数，并且可以将不同的 RenderPass 串联起来，形成连续的后期处理效果。</span></span>
<span class="line" data-v-1af1c385><span style="color:#6272A4;" data-v-1af1c385>具体来说，EffectComposer 中会包含多个用于控制后期处理流程的渲染通道，如 RenderPass、ShaderPass 等。</span></span>
<span class="line" data-v-1af1c385></span>
<span class="line" data-v-1af1c385><span style="color:#6272A4;" data-v-1af1c385>实现后期处理效果一般需要多次渲染，其中第一次是将场景渲染到纹理（render-to-texture）中，然后应用渲染通道，最终将结果渲染到屏幕上。</span></span>
<span class="line" data-v-1af1c385></span>
<span class="line" data-v-1af1c385><span style="color:#6272A4;" data-v-1af1c385>*/</span></span>
<span class="line" data-v-1af1c385><span style="color:#FF79C6;" data-v-1af1c385>const</span><span style="color:#F8F8F2;" data-v-1af1c385> composer </span><span style="color:#FF79C6;" data-v-1af1c385>=</span><span style="color:#FF79C6;font-weight:bold;" data-v-1af1c385> new</span><span style="color:#50FA7B;" data-v-1af1c385> EffectComposer</span><span style="color:#F8F8F2;" data-v-1af1c385>(renderer);</span></span>
<span class="line" data-v-1af1c385><span style="color:#F8F8F2;" data-v-1af1c385>composer.</span><span style="color:#50FA7B;" data-v-1af1c385>setSize</span><span style="color:#F8F8F2;" data-v-1af1c385>(outLine.value.offsetWidth,outLine.value.offsetWidth</span><span style="color:#FF79C6;" data-v-1af1c385>/</span><span style="color:#BD93F9;" data-v-1af1c385>2</span><span style="color:#F8F8F2;" data-v-1af1c385>);</span></span>
<span class="line" data-v-1af1c385><span style="color:#FF79C6;" data-v-1af1c385>const</span><span style="color:#F8F8F2;" data-v-1af1c385> renderPass </span><span style="color:#FF79C6;" data-v-1af1c385>=</span><span style="color:#FF79C6;font-weight:bold;" data-v-1af1c385> new</span><span style="color:#50FA7B;" data-v-1af1c385> RenderPass</span><span style="color:#F8F8F2;" data-v-1af1c385>(scene, camera);</span></span>
<span class="line" data-v-1af1c385><span style="color:#F8F8F2;" data-v-1af1c385>composer.</span><span style="color:#50FA7B;" data-v-1af1c385>addPass</span><span style="color:#F8F8F2;" data-v-1af1c385>(renderPass);</span></span>
<span class="line" data-v-1af1c385><span style="color:#F8F8F2;" data-v-1af1c385>composer.</span><span style="color:#50FA7B;" data-v-1af1c385>render</span><span style="color:#F8F8F2;" data-v-1af1c385>();</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;" data-v-1af1c385><div class="line-number" data-v-1af1c385></div><div class="line-number" data-v-1af1c385></div><div class="line-number" data-v-1af1c385></div><div class="line-number" data-v-1af1c385></div><div class="line-number" data-v-1af1c385></div><div class="line-number" data-v-1af1c385></div><div class="line-number" data-v-1af1c385></div><div class="line-number" data-v-1af1c385></div><div class="line-number" data-v-1af1c385></div><div class="line-number" data-v-1af1c385></div><div class="line-number" data-v-1af1c385></div><div class="line-number" data-v-1af1c385></div><div class="line-number" data-v-1af1c385></div><div class="line-number" data-v-1af1c385></div><div class="line-number" data-v-1af1c385></div><div class="line-number" data-v-1af1c385></div><div class="line-number" data-v-1af1c385></div><div class="line-number" data-v-1af1c385></div><div class="line-number" data-v-1af1c385></div><div class="line-number" data-v-1af1c385></div><div class="line-number" data-v-1af1c385></div><div class="line-number" data-v-1af1c385></div><div class="line-number" data-v-1af1c385></div><div class="line-number" data-v-1af1c385></div><div class="line-number" data-v-1af1c385></div><div class="line-number" data-v-1af1c385></div><div class="line-number" data-v-1af1c385></div><div class="line-number" data-v-1af1c385></div><div class="line-number" data-v-1af1c385></div><div class="line-number" data-v-1af1c385></div><div class="line-number" data-v-1af1c385></div><div class="line-number" data-v-1af1c385></div><div class="line-number" data-v-1af1c385></div><div class="line-number" data-v-1af1c385></div><div class="line-number" data-v-1af1c385></div><div class="line-number" data-v-1af1c385></div><div class="line-number" data-v-1af1c385></div><div class="line-number" data-v-1af1c385></div><div class="line-number" data-v-1af1c385></div><div class="line-number" data-v-1af1c385></div><div class="line-number" data-v-1af1c385></div><div class="line-number" data-v-1af1c385></div><div class="line-number" data-v-1af1c385></div><div class="line-number" data-v-1af1c385></div><div class="line-number" data-v-1af1c385></div><div class="line-number" data-v-1af1c385></div><div class="line-number" data-v-1af1c385></div><div class="line-number" data-v-1af1c385></div><div class="line-number" data-v-1af1c385></div><div class="line-number" data-v-1af1c385></div><div class="line-number" data-v-1af1c385></div></div></div>`,1)),_("div",Qa,null,512),a[1]||(a[1]=aa(`<p data-v-1af1c385><code data-v-1af1c385>UnrealBloomPass</code> 实现逼真的bloom（即景物周围余晖）效果</p><ul data-v-1af1c385><li data-v-1af1c385><code data-v-1af1c385>new THREE.Vector2( window.innerWidth, window.innerHeight )</code>：表示渲染的分辨率大小。</li><li data-v-1af1c385><code data-v-1af1c385>strength</code>：效果强度，默认值为1。</li><li data-v-1af1c385><code data-v-1af1c385>radius</code>：半径大小，默认值为0。</li><li data-v-1af1c385><code data-v-1af1c385>threshold</code>：阈值大小，影响只有高于这个值的颜色才会产生bloom效果，默认值为0。</li></ul><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#282A36;color:#F8F8F2;" data-v-1af1c385><pre class="shiki dracula vp-code" data-v-1af1c385><code data-v-1af1c385><span class="line" data-v-1af1c385><span style="color:#6272A4;" data-v-1af1c385>// 定义两个场景用于渲染全屏普通场景和只有发光效果的场景</span></span>
<span class="line" data-v-1af1c385><span style="color:#FF79C6;" data-v-1af1c385>const</span><span style="color:#F8F8F2;" data-v-1af1c385> ENTIRE_SCENE </span><span style="color:#FF79C6;" data-v-1af1c385>=</span><span style="color:#BD93F9;" data-v-1af1c385> 0</span><span style="color:#F8F8F2;" data-v-1af1c385>, BLOOM_SCENE </span><span style="color:#FF79C6;" data-v-1af1c385>=</span><span style="color:#BD93F9;" data-v-1af1c385> 1</span><span style="color:#F8F8F2;" data-v-1af1c385>;</span></span>
<span class="line" data-v-1af1c385><span style="color:#6272A4;" data-v-1af1c385>// 定义一个全局变量，用于标识需要渲染发光效果的物体</span></span>
<span class="line" data-v-1af1c385><span style="color:#FF79C6;" data-v-1af1c385>const</span><span style="color:#F8F8F2;" data-v-1af1c385> bloomLayer </span><span style="color:#FF79C6;" data-v-1af1c385>=</span><span style="color:#FF79C6;font-weight:bold;" data-v-1af1c385> new</span><span style="color:#BD93F9;" data-v-1af1c385> THREE</span><span style="color:#F8F8F2;" data-v-1af1c385>.</span><span style="color:#50FA7B;" data-v-1af1c385>Layers</span><span style="color:#F8F8F2;" data-v-1af1c385>();</span></span>
<span class="line" data-v-1af1c385><span style="color:#F8F8F2;" data-v-1af1c385>bloomLayer.</span><span style="color:#50FA7B;" data-v-1af1c385>set</span><span style="color:#F8F8F2;" data-v-1af1c385>( BLOOM_SCENE );</span></span>
<span class="line" data-v-1af1c385></span>
<span class="line" data-v-1af1c385><span style="color:#6272A4;" data-v-1af1c385>// 定义一个黑色材质，用于替换发光物体原来的材质</span></span>
<span class="line" data-v-1af1c385><span style="color:#FF79C6;" data-v-1af1c385>const</span><span style="color:#F8F8F2;" data-v-1af1c385> darkMaterial </span><span style="color:#FF79C6;" data-v-1af1c385>=</span><span style="color:#FF79C6;font-weight:bold;" data-v-1af1c385> new</span><span style="color:#BD93F9;" data-v-1af1c385> THREE</span><span style="color:#F8F8F2;" data-v-1af1c385>.</span><span style="color:#50FA7B;" data-v-1af1c385>MeshBasicMaterial</span><span style="color:#F8F8F2;" data-v-1af1c385>( { color</span><span style="color:#FF79C6;" data-v-1af1c385>:</span><span style="color:#E9F284;" data-v-1af1c385> &#39;</span><span style="color:#F1FA8C;" data-v-1af1c385>black</span><span style="color:#E9F284;" data-v-1af1c385>&#39;</span><span style="color:#F8F8F2;" data-v-1af1c385> } );</span></span>
<span class="line" data-v-1af1c385><span style="color:#FF79C6;" data-v-1af1c385>const</span><span style="color:#F8F8F2;" data-v-1af1c385> materials </span><span style="color:#FF79C6;" data-v-1af1c385>=</span><span style="color:#F8F8F2;" data-v-1af1c385> {};</span></span>
<span class="line" data-v-1af1c385></span>
<span class="line" data-v-1af1c385><span style="color:#6272A4;" data-v-1af1c385>// 定义后期处理参数</span></span>
<span class="line" data-v-1af1c385><span style="color:#FF79C6;" data-v-1af1c385>const</span><span style="color:#F8F8F2;" data-v-1af1c385> params </span><span style="color:#FF79C6;" data-v-1af1c385>=</span><span style="color:#F8F8F2;" data-v-1af1c385> {</span></span>
<span class="line" data-v-1af1c385><span style="color:#F8F8F2;" data-v-1af1c385> exposure</span><span style="color:#FF79C6;" data-v-1af1c385>:</span><span style="color:#BD93F9;" data-v-1af1c385> 1</span><span style="color:#F8F8F2;" data-v-1af1c385>, </span><span style="color:#6272A4;" data-v-1af1c385>// 曝光度</span></span>
<span class="line" data-v-1af1c385><span style="color:#F8F8F2;" data-v-1af1c385> bloomStrength</span><span style="color:#FF79C6;" data-v-1af1c385>:</span><span style="color:#BD93F9;" data-v-1af1c385> 5</span><span style="color:#F8F8F2;" data-v-1af1c385>, </span><span style="color:#6272A4;" data-v-1af1c385>// 发光强度</span></span>
<span class="line" data-v-1af1c385><span style="color:#F8F8F2;" data-v-1af1c385> bloomThreshold</span><span style="color:#FF79C6;" data-v-1af1c385>:</span><span style="color:#BD93F9;" data-v-1af1c385> 0</span><span style="color:#F8F8F2;" data-v-1af1c385>, </span><span style="color:#6272A4;" data-v-1af1c385>// 亮度阈值，用于发光对象的选择</span></span>
<span class="line" data-v-1af1c385><span style="color:#F8F8F2;" data-v-1af1c385> bloomRadius</span><span style="color:#FF79C6;" data-v-1af1c385>:</span><span style="color:#BD93F9;" data-v-1af1c385> 0</span><span style="color:#F8F8F2;" data-v-1af1c385>, </span><span style="color:#6272A4;" data-v-1af1c385>// 发光的扩散半径</span></span>
<span class="line" data-v-1af1c385><span style="color:#F8F8F2;" data-v-1af1c385> scene</span><span style="color:#FF79C6;" data-v-1af1c385>:</span><span style="color:#E9F284;" data-v-1af1c385> &#39;</span><span style="color:#F1FA8C;" data-v-1af1c385>Scene with Glow</span><span style="color:#E9F284;" data-v-1af1c385>&#39;</span><span style="color:#6272A4;" data-v-1af1c385> // 默认场景类型</span></span>
<span class="line" data-v-1af1c385><span style="color:#F8F8F2;" data-v-1af1c385>};</span></span>
<span class="line" data-v-1af1c385><span style="color:#6272A4;" data-v-1af1c385>// 创建 UnrealBloomPass 后期处理器，用于实现物体发光效果</span></span>
<span class="line" data-v-1af1c385><span style="color:#FF79C6;" data-v-1af1c385>const</span><span style="color:#F8F8F2;" data-v-1af1c385> bloomPass </span><span style="color:#FF79C6;" data-v-1af1c385>=</span><span style="color:#FF79C6;font-weight:bold;" data-v-1af1c385> new</span><span style="color:#50FA7B;" data-v-1af1c385> UnrealBloomPass</span><span style="color:#F8F8F2;" data-v-1af1c385>( </span><span style="color:#FF79C6;font-weight:bold;" data-v-1af1c385>new</span><span style="color:#BD93F9;" data-v-1af1c385> THREE</span><span style="color:#F8F8F2;" data-v-1af1c385>.</span><span style="color:#50FA7B;" data-v-1af1c385>Vector2</span><span style="color:#F8F8F2;" data-v-1af1c385>( window.innerWidth, window.innerHeight ), </span><span style="color:#BD93F9;" data-v-1af1c385>1.5</span><span style="color:#F8F8F2;" data-v-1af1c385>, </span><span style="color:#BD93F9;" data-v-1af1c385>0.4</span><span style="color:#F8F8F2;" data-v-1af1c385>, </span><span style="color:#BD93F9;" data-v-1af1c385>0.85</span><span style="color:#F8F8F2;" data-v-1af1c385> );</span></span>
<span class="line" data-v-1af1c385><span style="color:#F8F8F2;" data-v-1af1c385>bloomPass.threshold </span><span style="color:#FF79C6;" data-v-1af1c385>=</span><span style="color:#F8F8F2;" data-v-1af1c385> params.bloomThreshold;</span></span>
<span class="line" data-v-1af1c385><span style="color:#F8F8F2;" data-v-1af1c385>bloomPass.strength </span><span style="color:#FF79C6;" data-v-1af1c385>=</span><span style="color:#F8F8F2;" data-v-1af1c385> params.bloomStrength;</span></span>
<span class="line" data-v-1af1c385><span style="color:#F8F8F2;" data-v-1af1c385>bloomPass.radius </span><span style="color:#FF79C6;" data-v-1af1c385>=</span><span style="color:#F8F8F2;" data-v-1af1c385> params.bloomRadius;</span></span>
<span class="line" data-v-1af1c385></span>
<span class="line" data-v-1af1c385><span style="color:#6272A4;" data-v-1af1c385>// 创建一个普通场景渲染器</span></span>
<span class="line" data-v-1af1c385><span style="color:#FF79C6;" data-v-1af1c385>const</span><span style="color:#F8F8F2;" data-v-1af1c385> renderScene </span><span style="color:#FF79C6;" data-v-1af1c385>=</span><span style="color:#FF79C6;font-weight:bold;" data-v-1af1c385> new</span><span style="color:#50FA7B;" data-v-1af1c385> RenderPass</span><span style="color:#F8F8F2;" data-v-1af1c385>( scene, camera );</span></span>
<span class="line" data-v-1af1c385></span>
<span class="line" data-v-1af1c385><span style="color:#6272A4;" data-v-1af1c385>// 创建渲染器，用于渲染只有发光效果的场景</span></span>
<span class="line" data-v-1af1c385><span style="color:#FF79C6;" data-v-1af1c385>const</span><span style="color:#F8F8F2;" data-v-1af1c385> bloomComposer </span><span style="color:#FF79C6;" data-v-1af1c385>=</span><span style="color:#FF79C6;font-weight:bold;" data-v-1af1c385> new</span><span style="color:#50FA7B;" data-v-1af1c385> EffectComposer</span><span style="color:#F8F8F2;" data-v-1af1c385>( renderer );</span></span>
<span class="line" data-v-1af1c385><span style="color:#F8F8F2;" data-v-1af1c385>bloomComposer.renderToScreen </span><span style="color:#FF79C6;" data-v-1af1c385>=</span><span style="color:#BD93F9;" data-v-1af1c385> false</span><span style="color:#F8F8F2;" data-v-1af1c385>;</span></span>
<span class="line" data-v-1af1c385><span style="color:#F8F8F2;" data-v-1af1c385>bloomComposer.</span><span style="color:#50FA7B;" data-v-1af1c385>addPass</span><span style="color:#F8F8F2;" data-v-1af1c385>( renderScene );</span></span>
<span class="line" data-v-1af1c385><span style="color:#F8F8F2;" data-v-1af1c385>bloomComposer.</span><span style="color:#50FA7B;" data-v-1af1c385>addPass</span><span style="color:#F8F8F2;" data-v-1af1c385>( bloomPass );</span></span>
<span class="line" data-v-1af1c385></span>
<span class="line" data-v-1af1c385><span style="color:#6272A4;" data-v-1af1c385>// 初始化场景</span></span>
<span class="line" data-v-1af1c385><span style="color:#FF79C6;" data-v-1af1c385>function</span><span style="color:#50FA7B;" data-v-1af1c385> setupScene</span><span style="color:#F8F8F2;" data-v-1af1c385>() {</span></span>
<span class="line" data-v-1af1c385><span style="color:#F8F8F2;" data-v-1af1c385> scene.</span><span style="color:#50FA7B;" data-v-1af1c385>traverse</span><span style="color:#F8F8F2;" data-v-1af1c385>( disposeMaterial );</span></span>
<span class="line" data-v-1af1c385><span style="color:#F8F8F2;" data-v-1af1c385> scene.children.length </span><span style="color:#FF79C6;" data-v-1af1c385>=</span><span style="color:#BD93F9;" data-v-1af1c385> 0</span><span style="color:#F8F8F2;" data-v-1af1c385>;</span></span>
<span class="line" data-v-1af1c385></span>
<span class="line" data-v-1af1c385><span style="color:#FF79C6;" data-v-1af1c385> const</span><span style="color:#F8F8F2;" data-v-1af1c385> geometry </span><span style="color:#FF79C6;" data-v-1af1c385>=</span><span style="color:#FF79C6;font-weight:bold;" data-v-1af1c385> new</span><span style="color:#BD93F9;" data-v-1af1c385> THREE</span><span style="color:#F8F8F2;" data-v-1af1c385>.</span><span style="color:#50FA7B;" data-v-1af1c385>IcosahedronGeometry</span><span style="color:#F8F8F2;" data-v-1af1c385>( </span><span style="color:#BD93F9;" data-v-1af1c385>1</span><span style="color:#F8F8F2;" data-v-1af1c385>, </span><span style="color:#BD93F9;" data-v-1af1c385>15</span><span style="color:#F8F8F2;" data-v-1af1c385> );</span></span>
<span class="line" data-v-1af1c385></span>
<span class="line" data-v-1af1c385><span style="color:#FF79C6;" data-v-1af1c385> for</span><span style="color:#F8F8F2;" data-v-1af1c385> ( </span><span style="color:#FF79C6;" data-v-1af1c385>let</span><span style="color:#F8F8F2;" data-v-1af1c385> i </span><span style="color:#FF79C6;" data-v-1af1c385>=</span><span style="color:#BD93F9;" data-v-1af1c385> 0</span><span style="color:#F8F8F2;" data-v-1af1c385>; i </span><span style="color:#FF79C6;" data-v-1af1c385>&lt;</span><span style="color:#BD93F9;" data-v-1af1c385> 50</span><span style="color:#F8F8F2;" data-v-1af1c385>; i </span><span style="color:#FF79C6;" data-v-1af1c385>++</span><span style="color:#F8F8F2;" data-v-1af1c385> ) {</span></span>
<span class="line" data-v-1af1c385><span style="color:#FF79C6;" data-v-1af1c385>  const</span><span style="color:#F8F8F2;" data-v-1af1c385> color </span><span style="color:#FF79C6;" data-v-1af1c385>=</span><span style="color:#FF79C6;font-weight:bold;" data-v-1af1c385> new</span><span style="color:#BD93F9;" data-v-1af1c385> THREE</span><span style="color:#F8F8F2;" data-v-1af1c385>.</span><span style="color:#50FA7B;" data-v-1af1c385>Color</span><span style="color:#F8F8F2;" data-v-1af1c385>();</span></span>
<span class="line" data-v-1af1c385><span style="color:#F8F8F2;" data-v-1af1c385>  color.</span><span style="color:#50FA7B;" data-v-1af1c385>setHSL</span><span style="color:#F8F8F2;" data-v-1af1c385>( Math.</span><span style="color:#50FA7B;" data-v-1af1c385>random</span><span style="color:#F8F8F2;" data-v-1af1c385>(), </span><span style="color:#BD93F9;" data-v-1af1c385>0.7</span><span style="color:#F8F8F2;" data-v-1af1c385>, Math.</span><span style="color:#50FA7B;" data-v-1af1c385>random</span><span style="color:#F8F8F2;" data-v-1af1c385>() </span><span style="color:#FF79C6;" data-v-1af1c385>*</span><span style="color:#BD93F9;" data-v-1af1c385> 0.2</span><span style="color:#FF79C6;" data-v-1af1c385> +</span><span style="color:#BD93F9;" data-v-1af1c385> 0.05</span><span style="color:#F8F8F2;" data-v-1af1c385> );</span></span>
<span class="line" data-v-1af1c385></span>
<span class="line" data-v-1af1c385><span style="color:#FF79C6;" data-v-1af1c385>  const</span><span style="color:#F8F8F2;" data-v-1af1c385> material </span><span style="color:#FF79C6;" data-v-1af1c385>=</span><span style="color:#FF79C6;font-weight:bold;" data-v-1af1c385> new</span><span style="color:#BD93F9;" data-v-1af1c385> THREE</span><span style="color:#F8F8F2;" data-v-1af1c385>.</span><span style="color:#50FA7B;" data-v-1af1c385>MeshBasicMaterial</span><span style="color:#F8F8F2;" data-v-1af1c385>( { color</span><span style="color:#FF79C6;" data-v-1af1c385>:</span><span style="color:#F8F8F2;" data-v-1af1c385> color } );</span></span>
<span class="line" data-v-1af1c385><span style="color:#FF79C6;" data-v-1af1c385>  const</span><span style="color:#F8F8F2;" data-v-1af1c385> sphere </span><span style="color:#FF79C6;" data-v-1af1c385>=</span><span style="color:#FF79C6;font-weight:bold;" data-v-1af1c385> new</span><span style="color:#BD93F9;" data-v-1af1c385> THREE</span><span style="color:#F8F8F2;" data-v-1af1c385>.</span><span style="color:#50FA7B;" data-v-1af1c385>Mesh</span><span style="color:#F8F8F2;" data-v-1af1c385>( geometry, material );</span></span>
<span class="line" data-v-1af1c385><span style="color:#F8F8F2;" data-v-1af1c385>  sphere.position.x </span><span style="color:#FF79C6;" data-v-1af1c385>=</span><span style="color:#F8F8F2;" data-v-1af1c385> Math.</span><span style="color:#50FA7B;" data-v-1af1c385>random</span><span style="color:#F8F8F2;" data-v-1af1c385>() </span><span style="color:#FF79C6;" data-v-1af1c385>*</span><span style="color:#BD93F9;" data-v-1af1c385> 10</span><span style="color:#FF79C6;" data-v-1af1c385> -</span><span style="color:#BD93F9;" data-v-1af1c385> 5</span><span style="color:#F8F8F2;" data-v-1af1c385>;</span></span>
<span class="line" data-v-1af1c385><span style="color:#F8F8F2;" data-v-1af1c385>  sphere.position.y </span><span style="color:#FF79C6;" data-v-1af1c385>=</span><span style="color:#F8F8F2;" data-v-1af1c385> Math.</span><span style="color:#50FA7B;" data-v-1af1c385>random</span><span style="color:#F8F8F2;" data-v-1af1c385>() </span><span style="color:#FF79C6;" data-v-1af1c385>*</span><span style="color:#BD93F9;" data-v-1af1c385> 10</span><span style="color:#FF79C6;" data-v-1af1c385> -</span><span style="color:#BD93F9;" data-v-1af1c385> 5</span><span style="color:#F8F8F2;" data-v-1af1c385>;</span></span>
<span class="line" data-v-1af1c385><span style="color:#F8F8F2;" data-v-1af1c385>  sphere.position.z </span><span style="color:#FF79C6;" data-v-1af1c385>=</span><span style="color:#F8F8F2;" data-v-1af1c385> Math.</span><span style="color:#50FA7B;" data-v-1af1c385>random</span><span style="color:#F8F8F2;" data-v-1af1c385>() </span><span style="color:#FF79C6;" data-v-1af1c385>*</span><span style="color:#BD93F9;" data-v-1af1c385> 10</span><span style="color:#FF79C6;" data-v-1af1c385> -</span><span style="color:#BD93F9;" data-v-1af1c385> 5</span><span style="color:#F8F8F2;" data-v-1af1c385>;</span></span>
<span class="line" data-v-1af1c385><span style="color:#F8F8F2;" data-v-1af1c385>  sphere.position.</span><span style="color:#50FA7B;" data-v-1af1c385>normalize</span><span style="color:#F8F8F2;" data-v-1af1c385>().</span><span style="color:#50FA7B;" data-v-1af1c385>multiplyScalar</span><span style="color:#F8F8F2;" data-v-1af1c385>( Math.</span><span style="color:#50FA7B;" data-v-1af1c385>random</span><span style="color:#F8F8F2;" data-v-1af1c385>() </span><span style="color:#FF79C6;" data-v-1af1c385>*</span><span style="color:#BD93F9;" data-v-1af1c385> 4.0</span><span style="color:#FF79C6;" data-v-1af1c385> +</span><span style="color:#BD93F9;" data-v-1af1c385> 2.0</span><span style="color:#F8F8F2;" data-v-1af1c385> );</span></span>
<span class="line" data-v-1af1c385><span style="color:#F8F8F2;" data-v-1af1c385>  sphere.scale.</span><span style="color:#50FA7B;" data-v-1af1c385>setScalar</span><span style="color:#F8F8F2;" data-v-1af1c385>( Math.</span><span style="color:#50FA7B;" data-v-1af1c385>random</span><span style="color:#F8F8F2;" data-v-1af1c385>() </span><span style="color:#FF79C6;" data-v-1af1c385>*</span><span style="color:#F8F8F2;" data-v-1af1c385> Math.</span><span style="color:#50FA7B;" data-v-1af1c385>random</span><span style="color:#F8F8F2;" data-v-1af1c385>() </span><span style="color:#FF79C6;" data-v-1af1c385>+</span><span style="color:#BD93F9;" data-v-1af1c385> 0.5</span><span style="color:#F8F8F2;" data-v-1af1c385> );</span></span>
<span class="line" data-v-1af1c385><span style="color:#F8F8F2;" data-v-1af1c385>  scene.</span><span style="color:#50FA7B;" data-v-1af1c385>add</span><span style="color:#F8F8F2;" data-v-1af1c385>( sphere );</span></span>
<span class="line" data-v-1af1c385><span style="color:#FF79C6;" data-v-1af1c385>  if</span><span style="color:#F8F8F2;" data-v-1af1c385> ( Math.</span><span style="color:#50FA7B;" data-v-1af1c385>random</span><span style="color:#F8F8F2;" data-v-1af1c385>() </span><span style="color:#FF79C6;" data-v-1af1c385>&lt;</span><span style="color:#BD93F9;" data-v-1af1c385> 0.25</span><span style="color:#F8F8F2;" data-v-1af1c385> ) sphere.layers.</span><span style="color:#50FA7B;" data-v-1af1c385>enable</span><span style="color:#F8F8F2;" data-v-1af1c385>( BLOOM_SCENE );</span></span>
<span class="line" data-v-1af1c385><span style="color:#F8F8F2;" data-v-1af1c385> }</span></span>
<span class="line" data-v-1af1c385></span>
<span class="line" data-v-1af1c385><span style="color:#50FA7B;" data-v-1af1c385> render</span><span style="color:#F8F8F2;" data-v-1af1c385>();</span></span>
<span class="line" data-v-1af1c385><span style="color:#F8F8F2;" data-v-1af1c385>}</span></span>
<span class="line" data-v-1af1c385></span>
<span class="line" data-v-1af1c385><span style="color:#6272A4;" data-v-1af1c385>// 渲染发光效果</span></span>
<span class="line" data-v-1af1c385><span style="color:#FF79C6;" data-v-1af1c385>function</span><span style="color:#50FA7B;" data-v-1af1c385> render</span><span style="color:#F8F8F2;" data-v-1af1c385>(  ) {</span></span>
<span class="line" data-v-1af1c385><span style="color:#F8F8F2;" data-v-1af1c385>  camera.layers.</span><span style="color:#50FA7B;" data-v-1af1c385>set</span><span style="color:#F8F8F2;" data-v-1af1c385>( BLOOM_SCENE );</span></span>
<span class="line" data-v-1af1c385><span style="color:#F8F8F2;" data-v-1af1c385>  bloomComposer.</span><span style="color:#50FA7B;" data-v-1af1c385>render</span><span style="color:#F8F8F2;" data-v-1af1c385>();</span></span>
<span class="line" data-v-1af1c385><span style="color:#F8F8F2;" data-v-1af1c385>  camera.layers.</span><span style="color:#50FA7B;" data-v-1af1c385>set</span><span style="color:#F8F8F2;" data-v-1af1c385>( ENTIRE_SCENE );</span></span>
<span class="line" data-v-1af1c385><span style="color:#F8F8F2;" data-v-1af1c385>}</span></span>
<span class="line" data-v-1af1c385><span style="color:#FF79C6;" data-v-1af1c385>function</span><span style="color:#50FA7B;" data-v-1af1c385> onPointerDown</span><span style="color:#F8F8F2;" data-v-1af1c385>( </span><span style="color:#FFB86C;font-style:italic;" data-v-1af1c385>event</span><span style="color:#F8F8F2;" data-v-1af1c385> ) {</span></span>
<span class="line" data-v-1af1c385><span style="color:#F8F8F2;" data-v-1af1c385> mouse.x </span><span style="color:#FF79C6;" data-v-1af1c385>=</span><span style="color:#F8F8F2;" data-v-1af1c385> ( event.clientX </span><span style="color:#FF79C6;" data-v-1af1c385>/</span><span style="color:#F8F8F2;" data-v-1af1c385> window.innerWidth ) </span><span style="color:#FF79C6;" data-v-1af1c385>*</span><span style="color:#BD93F9;" data-v-1af1c385> 2</span><span style="color:#FF79C6;" data-v-1af1c385> -</span><span style="color:#BD93F9;" data-v-1af1c385> 1</span><span style="color:#F8F8F2;" data-v-1af1c385>;</span></span>
<span class="line" data-v-1af1c385><span style="color:#F8F8F2;" data-v-1af1c385> mouse.y </span><span style="color:#FF79C6;" data-v-1af1c385>=</span><span style="color:#FF79C6;" data-v-1af1c385> -</span><span style="color:#F8F8F2;" data-v-1af1c385> ( event.clientY </span><span style="color:#FF79C6;" data-v-1af1c385>/</span><span style="color:#F8F8F2;" data-v-1af1c385> window.innerHeight ) </span><span style="color:#FF79C6;" data-v-1af1c385>*</span><span style="color:#BD93F9;" data-v-1af1c385> 2</span><span style="color:#FF79C6;" data-v-1af1c385> +</span><span style="color:#BD93F9;" data-v-1af1c385> 1</span><span style="color:#F8F8F2;" data-v-1af1c385>;</span></span>
<span class="line" data-v-1af1c385><span style="color:#F8F8F2;" data-v-1af1c385> raycaster.</span><span style="color:#50FA7B;" data-v-1af1c385>setFromCamera</span><span style="color:#F8F8F2;" data-v-1af1c385>( mouse, camera );</span></span>
<span class="line" data-v-1af1c385><span style="color:#FF79C6;" data-v-1af1c385> const</span><span style="color:#F8F8F2;" data-v-1af1c385> intersects </span><span style="color:#FF79C6;" data-v-1af1c385>=</span><span style="color:#F8F8F2;" data-v-1af1c385> raycaster.</span><span style="color:#50FA7B;" data-v-1af1c385>intersectObjects</span><span style="color:#F8F8F2;" data-v-1af1c385>( scene.children, </span><span style="color:#BD93F9;" data-v-1af1c385>false</span><span style="color:#F8F8F2;" data-v-1af1c385> );</span></span>
<span class="line" data-v-1af1c385><span style="color:#FF79C6;" data-v-1af1c385> if</span><span style="color:#F8F8F2;" data-v-1af1c385> ( intersects.length </span><span style="color:#FF79C6;" data-v-1af1c385>&gt;</span><span style="color:#BD93F9;" data-v-1af1c385> 0</span><span style="color:#F8F8F2;" data-v-1af1c385> ) {</span></span>
<span class="line" data-v-1af1c385><span style="color:#FF79C6;" data-v-1af1c385>  const</span><span style="color:#F8F8F2;" data-v-1af1c385> object </span><span style="color:#FF79C6;" data-v-1af1c385>=</span><span style="color:#F8F8F2;" data-v-1af1c385> intersects[ </span><span style="color:#BD93F9;" data-v-1af1c385>0</span><span style="color:#F8F8F2;" data-v-1af1c385> ].object;</span></span>
<span class="line" data-v-1af1c385><span style="color:#F8F8F2;" data-v-1af1c385>  object.layers.</span><span style="color:#50FA7B;" data-v-1af1c385>toggle</span><span style="color:#F8F8F2;" data-v-1af1c385>( BLOOM_SCENE );</span></span>
<span class="line" data-v-1af1c385><span style="color:#50FA7B;" data-v-1af1c385>  render</span><span style="color:#F8F8F2;" data-v-1af1c385>();</span></span>
<span class="line" data-v-1af1c385><span style="color:#F8F8F2;" data-v-1af1c385> }</span></span>
<span class="line" data-v-1af1c385><span style="color:#F8F8F2;" data-v-1af1c385>}</span></span>
<span class="line" data-v-1af1c385><span style="color:#6272A4;" data-v-1af1c385>//渲染不同的场景</span></span>
<span class="line" data-v-1af1c385><span style="color:#6272A4;" data-v-1af1c385>//</span></span>
<span class="line" data-v-1af1c385><span style="color:#6272A4;" data-v-1af1c385>// 渲染函数，根据 params 中定义的场景类型选择不同的渲染方式</span></span>
<span class="line" data-v-1af1c385><span style="color:#FF79C6;" data-v-1af1c385>function</span><span style="color:#50FA7B;" data-v-1af1c385> render</span><span style="color:#F8F8F2;" data-v-1af1c385>() {</span></span>
<span class="line" data-v-1af1c385><span style="color:#FF79C6;" data-v-1af1c385> switch</span><span style="color:#F8F8F2;" data-v-1af1c385> ( params.scene ) {</span></span>
<span class="line" data-v-1af1c385><span style="color:#FF79C6;" data-v-1af1c385>  case</span><span style="color:#E9F284;" data-v-1af1c385> &#39;</span><span style="color:#F1FA8C;" data-v-1af1c385>Scene only</span><span style="color:#E9F284;" data-v-1af1c385>&#39;</span><span style="color:#F8F8F2;" data-v-1af1c385>:</span></span>
<span class="line" data-v-1af1c385><span style="color:#F8F8F2;" data-v-1af1c385>   renderer.</span><span style="color:#50FA7B;" data-v-1af1c385>render</span><span style="color:#F8F8F2;" data-v-1af1c385>( scene, camera );</span></span>
<span class="line" data-v-1af1c385><span style="color:#FF79C6;" data-v-1af1c385>   break</span><span style="color:#F8F8F2;" data-v-1af1c385>;</span></span>
<span class="line" data-v-1af1c385><span style="color:#FF79C6;" data-v-1af1c385>  case</span><span style="color:#E9F284;" data-v-1af1c385> &#39;</span><span style="color:#F1FA8C;" data-v-1af1c385>Glow only</span><span style="color:#E9F284;" data-v-1af1c385>&#39;</span><span style="color:#F8F8F2;" data-v-1af1c385>:</span></span>
<span class="line" data-v-1af1c385><span style="color:#50FA7B;" data-v-1af1c385>   renderBloom</span><span style="color:#F8F8F2;" data-v-1af1c385>( </span><span style="color:#BD93F9;" data-v-1af1c385>false</span><span style="color:#F8F8F2;" data-v-1af1c385> );</span></span>
<span class="line" data-v-1af1c385><span style="color:#FF79C6;" data-v-1af1c385>   break</span><span style="color:#F8F8F2;" data-v-1af1c385>;</span></span>
<span class="line" data-v-1af1c385><span style="color:#FF79C6;" data-v-1af1c385>  case</span><span style="color:#E9F284;" data-v-1af1c385> &#39;</span><span style="color:#F1FA8C;" data-v-1af1c385>Scene with Glow</span><span style="color:#E9F284;" data-v-1af1c385>&#39;</span><span style="color:#F8F8F2;" data-v-1af1c385>:</span></span>
<span class="line" data-v-1af1c385><span style="color:#FF79C6;" data-v-1af1c385>  default</span><span style="color:#F8F8F2;" data-v-1af1c385>:</span></span>
<span class="line" data-v-1af1c385><span style="color:#6272A4;" data-v-1af1c385>   // render scene with bloom</span></span>
<span class="line" data-v-1af1c385><span style="color:#50FA7B;" data-v-1af1c385>   renderBloom</span><span style="color:#F8F8F2;" data-v-1af1c385>( </span><span style="color:#BD93F9;" data-v-1af1c385>true</span><span style="color:#F8F8F2;" data-v-1af1c385> );</span></span>
<span class="line" data-v-1af1c385></span>
<span class="line" data-v-1af1c385><span style="color:#6272A4;" data-v-1af1c385>   // render the entire scene, then render bloom scene on top</span></span>
<span class="line" data-v-1af1c385><span style="color:#F8F8F2;" data-v-1af1c385>   finalComposer.</span><span style="color:#50FA7B;" data-v-1af1c385>render</span><span style="color:#F8F8F2;" data-v-1af1c385>();</span></span>
<span class="line" data-v-1af1c385><span style="color:#FF79C6;" data-v-1af1c385>   break</span><span style="color:#F8F8F2;" data-v-1af1c385>;</span></span>
<span class="line" data-v-1af1c385><span style="color:#F8F8F2;" data-v-1af1c385> }</span></span>
<span class="line" data-v-1af1c385><span style="color:#F8F8F2;" data-v-1af1c385>}</span></span>
<span class="line" data-v-1af1c385><span style="color:#6272A4;" data-v-1af1c385>// 渲染发光效果</span></span>
<span class="line" data-v-1af1c385><span style="color:#FF79C6;" data-v-1af1c385>function</span><span style="color:#50FA7B;" data-v-1af1c385> renderBloom</span><span style="color:#F8F8F2;" data-v-1af1c385>( </span><span style="color:#FFB86C;font-style:italic;" data-v-1af1c385>mask</span><span style="color:#F8F8F2;" data-v-1af1c385> ) {</span></span>
<span class="line" data-v-1af1c385><span style="color:#FF79C6;" data-v-1af1c385> if</span><span style="color:#F8F8F2;" data-v-1af1c385> ( mask </span><span style="color:#FF79C6;" data-v-1af1c385>===</span><span style="color:#BD93F9;" data-v-1af1c385> true</span><span style="color:#F8F8F2;" data-v-1af1c385> ) { </span><span style="color:#6272A4;" data-v-1af1c385>// 只渲染发光物体</span></span>
<span class="line" data-v-1af1c385><span style="color:#F8F8F2;" data-v-1af1c385>  scene.</span><span style="color:#50FA7B;" data-v-1af1c385>traverse</span><span style="color:#F8F8F2;" data-v-1af1c385>( darkenNonBloomed );</span></span>
<span class="line" data-v-1af1c385><span style="color:#F8F8F2;" data-v-1af1c385>  bloomComposer.</span><span style="color:#50FA7B;" data-v-1af1c385>render</span><span style="color:#F8F8F2;" data-v-1af1c385>();</span></span>
<span class="line" data-v-1af1c385><span style="color:#F8F8F2;" data-v-1af1c385>  scene.</span><span style="color:#50FA7B;" data-v-1af1c385>traverse</span><span style="color:#F8F8F2;" data-v-1af1c385>( restoreMaterial );</span></span>
<span class="line" data-v-1af1c385><span style="color:#F8F8F2;" data-v-1af1c385> } </span><span style="color:#FF79C6;" data-v-1af1c385>else</span><span style="color:#F8F8F2;" data-v-1af1c385> { </span><span style="color:#6272A4;" data-v-1af1c385>// 渲染整个场景包括发光效果</span></span>
<span class="line" data-v-1af1c385><span style="color:#F8F8F2;" data-v-1af1c385>  camera.layers.</span><span style="color:#50FA7B;" data-v-1af1c385>set</span><span style="color:#F8F8F2;" data-v-1af1c385>( BLOOM_SCENE );</span></span>
<span class="line" data-v-1af1c385><span style="color:#F8F8F2;" data-v-1af1c385>  bloomComposer.</span><span style="color:#50FA7B;" data-v-1af1c385>render</span><span style="color:#F8F8F2;" data-v-1af1c385>();</span></span>
<span class="line" data-v-1af1c385><span style="color:#F8F8F2;" data-v-1af1c385>  camera.layers.</span><span style="color:#50FA7B;" data-v-1af1c385>set</span><span style="color:#F8F8F2;" data-v-1af1c385>( ENTIRE_SCENE );</span></span>
<span class="line" data-v-1af1c385><span style="color:#F8F8F2;" data-v-1af1c385> }</span></span>
<span class="line" data-v-1af1c385><span style="color:#F8F8F2;" data-v-1af1c385>}</span></span>
<span class="line" data-v-1af1c385><span style="color:#FF79C6;" data-v-1af1c385>function</span><span style="color:#50FA7B;" data-v-1af1c385> darkenNonBloomed</span><span style="color:#F8F8F2;" data-v-1af1c385>( </span><span style="color:#FFB86C;font-style:italic;" data-v-1af1c385>obj</span><span style="color:#F8F8F2;" data-v-1af1c385> ) {</span></span>
<span class="line" data-v-1af1c385><span style="color:#FF79C6;" data-v-1af1c385> if</span><span style="color:#F8F8F2;" data-v-1af1c385> ( obj.isMesh </span><span style="color:#FF79C6;" data-v-1af1c385>&amp;&amp;</span><span style="color:#F8F8F2;" data-v-1af1c385> bloomLayer.</span><span style="color:#50FA7B;" data-v-1af1c385>test</span><span style="color:#F8F8F2;" data-v-1af1c385>( obj.layers ) </span><span style="color:#FF79C6;" data-v-1af1c385>===</span><span style="color:#BD93F9;" data-v-1af1c385> false</span><span style="color:#F8F8F2;" data-v-1af1c385> ) {</span></span>
<span class="line" data-v-1af1c385><span style="color:#F8F8F2;" data-v-1af1c385>  materials[ obj.uuid ] </span><span style="color:#FF79C6;" data-v-1af1c385>=</span><span style="color:#F8F8F2;" data-v-1af1c385> obj.material;</span></span>
<span class="line" data-v-1af1c385><span style="color:#F8F8F2;" data-v-1af1c385>  obj.material </span><span style="color:#FF79C6;" data-v-1af1c385>=</span><span style="color:#F8F8F2;" data-v-1af1c385> darkMaterial;</span></span>
<span class="line" data-v-1af1c385><span style="color:#F8F8F2;" data-v-1af1c385> }</span></span>
<span class="line" data-v-1af1c385><span style="color:#F8F8F2;" data-v-1af1c385>}</span></span>
<span class="line" data-v-1af1c385><span style="color:#FF79C6;" data-v-1af1c385>function</span><span style="color:#50FA7B;" data-v-1af1c385> restoreMaterial</span><span style="color:#F8F8F2;" data-v-1af1c385>( </span><span style="color:#FFB86C;font-style:italic;" data-v-1af1c385>obj</span><span style="color:#F8F8F2;" data-v-1af1c385> ) {</span></span>
<span class="line" data-v-1af1c385><span style="color:#FF79C6;" data-v-1af1c385> if</span><span style="color:#F8F8F2;" data-v-1af1c385> ( materials[ obj.uuid ] ) {</span></span>
<span class="line" data-v-1af1c385><span style="color:#F8F8F2;" data-v-1af1c385>  obj.material </span><span style="color:#FF79C6;" data-v-1af1c385>=</span><span style="color:#F8F8F2;" data-v-1af1c385> materials[ obj.uuid ];</span></span>
<span class="line" data-v-1af1c385><span style="color:#FF79C6;" data-v-1af1c385>  delete</span><span style="color:#F8F8F2;" data-v-1af1c385> materials[ obj.uuid ];</span></span>
<span class="line" data-v-1af1c385><span style="color:#F8F8F2;" data-v-1af1c385> }</span></span>
<span class="line" data-v-1af1c385><span style="color:#F8F8F2;" data-v-1af1c385>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;" data-v-1af1c385><div class="line-number" data-v-1af1c385></div><div class="line-number" data-v-1af1c385></div><div class="line-number" data-v-1af1c385></div><div class="line-number" data-v-1af1c385></div><div class="line-number" data-v-1af1c385></div><div class="line-number" data-v-1af1c385></div><div class="line-number" data-v-1af1c385></div><div class="line-number" data-v-1af1c385></div><div class="line-number" data-v-1af1c385></div><div class="line-number" data-v-1af1c385></div><div class="line-number" data-v-1af1c385></div><div class="line-number" data-v-1af1c385></div><div class="line-number" data-v-1af1c385></div><div class="line-number" data-v-1af1c385></div><div class="line-number" data-v-1af1c385></div><div class="line-number" data-v-1af1c385></div><div class="line-number" data-v-1af1c385></div><div class="line-number" data-v-1af1c385></div><div class="line-number" data-v-1af1c385></div><div class="line-number" data-v-1af1c385></div><div class="line-number" data-v-1af1c385></div><div class="line-number" data-v-1af1c385></div><div class="line-number" data-v-1af1c385></div><div class="line-number" data-v-1af1c385></div><div class="line-number" data-v-1af1c385></div><div class="line-number" data-v-1af1c385></div><div class="line-number" data-v-1af1c385></div><div class="line-number" data-v-1af1c385></div><div class="line-number" data-v-1af1c385></div><div class="line-number" data-v-1af1c385></div><div class="line-number" data-v-1af1c385></div><div class="line-number" data-v-1af1c385></div><div class="line-number" data-v-1af1c385></div><div class="line-number" data-v-1af1c385></div><div class="line-number" data-v-1af1c385></div><div class="line-number" data-v-1af1c385></div><div class="line-number" data-v-1af1c385></div><div class="line-number" data-v-1af1c385></div><div class="line-number" data-v-1af1c385></div><div class="line-number" data-v-1af1c385></div><div class="line-number" data-v-1af1c385></div><div class="line-number" data-v-1af1c385></div><div class="line-number" data-v-1af1c385></div><div class="line-number" data-v-1af1c385></div><div class="line-number" data-v-1af1c385></div><div class="line-number" data-v-1af1c385></div><div class="line-number" data-v-1af1c385></div><div class="line-number" data-v-1af1c385></div><div class="line-number" data-v-1af1c385></div><div class="line-number" data-v-1af1c385></div><div class="line-number" data-v-1af1c385></div><div class="line-number" data-v-1af1c385></div><div class="line-number" data-v-1af1c385></div><div class="line-number" data-v-1af1c385></div><div class="line-number" data-v-1af1c385></div><div class="line-number" data-v-1af1c385></div><div class="line-number" data-v-1af1c385></div><div class="line-number" data-v-1af1c385></div><div class="line-number" data-v-1af1c385></div><div class="line-number" data-v-1af1c385></div><div class="line-number" data-v-1af1c385></div><div class="line-number" data-v-1af1c385></div><div class="line-number" data-v-1af1c385></div><div class="line-number" data-v-1af1c385></div><div class="line-number" data-v-1af1c385></div><div class="line-number" data-v-1af1c385></div><div class="line-number" data-v-1af1c385></div><div class="line-number" data-v-1af1c385></div><div class="line-number" data-v-1af1c385></div><div class="line-number" data-v-1af1c385></div><div class="line-number" data-v-1af1c385></div><div class="line-number" data-v-1af1c385></div><div class="line-number" data-v-1af1c385></div><div class="line-number" data-v-1af1c385></div><div class="line-number" data-v-1af1c385></div><div class="line-number" data-v-1af1c385></div><div class="line-number" data-v-1af1c385></div><div class="line-number" data-v-1af1c385></div><div class="line-number" data-v-1af1c385></div><div class="line-number" data-v-1af1c385></div><div class="line-number" data-v-1af1c385></div><div class="line-number" data-v-1af1c385></div><div class="line-number" data-v-1af1c385></div><div class="line-number" data-v-1af1c385></div><div class="line-number" data-v-1af1c385></div><div class="line-number" data-v-1af1c385></div><div class="line-number" data-v-1af1c385></div><div class="line-number" data-v-1af1c385></div><div class="line-number" data-v-1af1c385></div><div class="line-number" data-v-1af1c385></div><div class="line-number" data-v-1af1c385></div><div class="line-number" data-v-1af1c385></div><div class="line-number" data-v-1af1c385></div><div class="line-number" data-v-1af1c385></div><div class="line-number" data-v-1af1c385></div><div class="line-number" data-v-1af1c385></div><div class="line-number" data-v-1af1c385></div><div class="line-number" data-v-1af1c385></div><div class="line-number" data-v-1af1c385></div><div class="line-number" data-v-1af1c385></div><div class="line-number" data-v-1af1c385></div><div class="line-number" data-v-1af1c385></div><div class="line-number" data-v-1af1c385></div><div class="line-number" data-v-1af1c385></div><div class="line-number" data-v-1af1c385></div><div class="line-number" data-v-1af1c385></div><div class="line-number" data-v-1af1c385></div><div class="line-number" data-v-1af1c385></div><div class="line-number" data-v-1af1c385></div><div class="line-number" data-v-1af1c385></div><div class="line-number" data-v-1af1c385></div><div class="line-number" data-v-1af1c385></div><div class="line-number" data-v-1af1c385></div><div class="line-number" data-v-1af1c385></div><div class="line-number" data-v-1af1c385></div><div class="line-number" data-v-1af1c385></div><div class="line-number" data-v-1af1c385></div><div class="line-number" data-v-1af1c385></div><div class="line-number" data-v-1af1c385></div><div class="line-number" data-v-1af1c385></div></div></div>`,3)),_("div",Ia,null,512),a[2]||(a[2]=_("h1",{id:"参考",tabindex:"-1"},[_("a",{class:"header-anchor",href:"#参考"},[_("span",null,"参考")])],-1)),a[3]||(a[3]=_("p",null,[ba("参考："),_("a",{href:"https://threejs.org/",target:"_blank",rel:"noopener noreferrer"},"https://threejs.org/")],-1))])}const as=ya(Ha,[["render",Ka],["__scopeId","data-v-1af1c385"],["__file","threejs-luminous.html.vue"]]),ss=JSON.parse('{"path":"/threejs/threejs-luminous.html","title":"ThreeJS中的效果合成器","lang":"en-US","frontmatter":{"title":"ThreeJS中的效果合成器","category":["ThreeJS"],"date":"2022-03-02T00:00:00.000Z","description":"UnrealBloomPass 实现逼真的bloom（即景物周围余晖）效果 new THREE.Vector2( window.innerWidth, window.innerHeight )：表示渲染的分辨率大小。 strength：效果强度，默认值为1。 radius：半径大小，默认值为0。 threshold：阈值大小，影响只有高于这个值的颜色才...","head":[["meta",{"property":"og:url","content":"https://luxiag.github.io/luxiag/blog/threejs/threejs-luminous.html"}],["meta",{"property":"og:title","content":"ThreeJS中的效果合成器"}],["meta",{"property":"og:description","content":"UnrealBloomPass 实现逼真的bloom（即景物周围余晖）效果 new THREE.Vector2( window.innerWidth, window.innerHeight )：表示渲染的分辨率大小。 strength：效果强度，默认值为1。 radius：半径大小，默认值为0。 threshold：阈值大小，影响只有高于这个值的颜色才..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2024-11-10T14:15:12.000Z"}],["meta",{"property":"article:published_time","content":"2022-03-02T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-11-10T14:15:12.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"ThreeJS中的效果合成器\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-03-02T00:00:00.000Z\\",\\"dateModified\\":\\"2024-11-10T14:15:12.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"luxiag\\",\\"url\\":\\"https://luxiag.github.io/luxiag\\"}]}"]]},"git":{"createdTime":1681959670000,"updatedTime":1731248112000,"contributors":[{"name":"卢祥","username":"卢祥","email":"example@qq.com","commits":2,"url":"https://github.com/卢祥"},{"name":"luxiag","username":"luxiag","email":"luxiag@qq.com","commits":5,"url":"https://github.com/luxiag"}]},"readingTime":{"minutes":7.07,"words":2120},"filePathRelative":"threejs/threejs-luminous.md","localizedDate":"March 2, 2022","excerpt":"<div class=\\"language-js line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"js\\" data-title=\\"js\\" style=\\"background-color:#282A36;color:#F8F8F2\\"><pre class=\\"shiki dracula vp-code\\"><code><span class=\\"line\\"><span style=\\"color:#6272A4\\">//outline pass 创建高亮轮廓</span></span>\\n<span class=\\"line\\"><span style=\\"color:#6272A4\\">// 创建 Outline Pass，传入轮廓边框的大小，场景以及相机</span></span>\\n<span class=\\"line\\"><span style=\\"color:#FF79C6\\">const</span><span style=\\"color:#F8F8F2\\"> outLinePass </span><span style=\\"color:#FF79C6\\">=</span><span style=\\"color:#FF79C6;font-weight:bold\\"> new</span><span style=\\"color:#50FA7B\\"> OutlinePass</span><span style=\\"color:#F8F8F2\\">(</span></span>\\n<span class=\\"line\\"><span style=\\"color:#FF79C6;font-weight:bold\\">  new</span><span style=\\"color:#BD93F9\\"> THREE</span><span style=\\"color:#F8F8F2\\">.</span><span style=\\"color:#50FA7B\\">Vector2</span><span style=\\"color:#F8F8F2\\">(outLine.value.offsetWidth,outLine.value.offsetWidth</span><span style=\\"color:#FF79C6\\">/</span><span style=\\"color:#BD93F9\\">2</span><span style=\\"color:#F8F8F2\\">), </span><span style=\\"color:#6272A4\\">// 轮廓边框大小</span></span>\\n<span class=\\"line\\"><span style=\\"color:#F8F8F2\\">  scene, </span><span style=\\"color:#6272A4\\">// 场景</span></span>\\n<span class=\\"line\\"><span style=\\"color:#F8F8F2\\">  camera </span><span style=\\"color:#6272A4\\">// 相机</span></span>\\n<span class=\\"line\\"><span style=\\"color:#F8F8F2\\">);</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color:#6272A4\\">// 设置轮廓边框的强度</span></span>\\n<span class=\\"line\\"><span style=\\"color:#F8F8F2\\">outLinePass.edgeStrength </span><span style=\\"color:#FF79C6\\">=</span><span style=\\"color:#BD93F9\\"> 3</span><span style=\\"color:#F8F8F2\\">;</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color:#6272A4\\">// 设置轮廓边框的炫光强度</span></span>\\n<span class=\\"line\\"><span style=\\"color:#F8F8F2\\">outLinePass.edgeGlow </span><span style=\\"color:#FF79C6\\">=</span><span style=\\"color:#BD93F9\\"> 2</span><span style=\\"color:#F8F8F2\\">;</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color:#6272A4\\">// 设置轮廓边框的粗细</span></span>\\n<span class=\\"line\\"><span style=\\"color:#F8F8F2\\">outLinePass.edgeThickness </span><span style=\\"color:#FF79C6\\">=</span><span style=\\"color:#BD93F9\\"> 3</span><span style=\\"color:#F8F8F2\\">;</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color:#6272A4\\">// 设置轮廓边框的动画效果周期（单位为秒）</span></span>\\n<span class=\\"line\\"><span style=\\"color:#F8F8F2\\">outLinePass.pulsePeriod </span><span style=\\"color:#FF79C6\\">=</span><span style=\\"color:#BD93F9\\"> 2</span><span style=\\"color:#F8F8F2\\">;</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color:#6272A4\\">// 设置需要进行轮廓边框高亮的物体，这里只选择了一个 torusKnot</span></span>\\n<span class=\\"line\\"><span style=\\"color:#F8F8F2\\">outLinePass.selectedObjects </span><span style=\\"color:#FF79C6\\">=</span><span style=\\"color:#F8F8F2\\"> [torusKnot];</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color:#6272A4\\">// 将 Outline Pass 添加到渲染的 Pass 中</span></span>\\n<span class=\\"line\\"><span style=\\"color:#F8F8F2\\">composer.</span><span style=\\"color:#50FA7B\\">addPass</span><span style=\\"color:#F8F8F2\\">(outLinePass);</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color:#6272A4\\">// renderPass</span></span>\\n<span class=\\"line\\"><span style=\\"color:#6272A4\\">/*</span></span>\\n<span class=\\"line\\"><span style=\\"color:#6272A4\\">RenderPass 是 Three.js 中的一个渲染器通道，它用于将场景中的一部分物体单独渲染到屏幕上。RenderPass 可以用于实现多种效果，</span></span>\\n<span class=\\"line\\"><span style=\\"color:#6272A4\\">例如描边（Outline）、后期处理（Post-processing）、阴影等。</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color:#6272A4\\">Renderer 是 Three.js 中的渲染器，它是实现 Three.js 渲染功能的核心组件。</span></span>\\n<span class=\\"line\\"><span style=\\"color:#6272A4\\">Renderer 主要负责将场景中的对象转换成可视图像，并输出到屏幕或者图片等媒介上。它支持多种渲染方式，例如 Canvas、WebGL、SVG等。</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color:#6272A4\\">简单来讲，RenderPass 是 Renderer 的一种子组件，它主要用于实现某些特殊效果的渲染流程，</span></span>\\n<span class=\\"line\\"><span style=\\"color:#6272A4\\">而 Renderer 则是 Three.js 的主渲染器，它负责将所有物体渲染到屏幕上或其他媒介上。</span></span>\\n<span class=\\"line\\"><span style=\\"color:#6272A4\\">*/</span></span>\\n<span class=\\"line\\"><span style=\\"color:#6272A4\\">//EffectComposer</span></span>\\n<span class=\\"line\\"><span style=\\"color:#6272A4\\">/*</span></span>\\n<span class=\\"line\\"><span style=\\"color:#6272A4\\">EffectComposer 是 Three.js 中用于实现后期处理（post-processing）效果的函数。</span></span>\\n<span class=\\"line\\"><span style=\\"color:#6272A4\\">它可以将场景、相机和渲染器作为参数，并且可以将不同的 RenderPass 串联起来，形成连续的后期处理效果。</span></span>\\n<span class=\\"line\\"><span style=\\"color:#6272A4\\">具体来说，EffectComposer 中会包含多个用于控制后期处理流程的渲染通道，如 RenderPass、ShaderPass 等。</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color:#6272A4\\">实现后期处理效果一般需要多次渲染，其中第一次是将场景渲染到纹理（render-to-texture）中，然后应用渲染通道，最终将结果渲染到屏幕上。</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color:#6272A4\\">*/</span></span>\\n<span class=\\"line\\"><span style=\\"color:#FF79C6\\">const</span><span style=\\"color:#F8F8F2\\"> composer </span><span style=\\"color:#FF79C6\\">=</span><span style=\\"color:#FF79C6;font-weight:bold\\"> new</span><span style=\\"color:#50FA7B\\"> EffectComposer</span><span style=\\"color:#F8F8F2\\">(renderer);</span></span>\\n<span class=\\"line\\"><span style=\\"color:#F8F8F2\\">composer.</span><span style=\\"color:#50FA7B\\">setSize</span><span style=\\"color:#F8F8F2\\">(outLine.value.offsetWidth,outLine.value.offsetWidth</span><span style=\\"color:#FF79C6\\">/</span><span style=\\"color:#BD93F9\\">2</span><span style=\\"color:#F8F8F2\\">);</span></span>\\n<span class=\\"line\\"><span style=\\"color:#FF79C6\\">const</span><span style=\\"color:#F8F8F2\\"> renderPass </span><span style=\\"color:#FF79C6\\">=</span><span style=\\"color:#FF79C6;font-weight:bold\\"> new</span><span style=\\"color:#50FA7B\\"> RenderPass</span><span style=\\"color:#F8F8F2\\">(scene, camera);</span></span>\\n<span class=\\"line\\"><span style=\\"color:#F8F8F2\\">composer.</span><span style=\\"color:#50FA7B\\">addPass</span><span style=\\"color:#F8F8F2\\">(renderPass);</span></span>\\n<span class=\\"line\\"><span style=\\"color:#F8F8F2\\">composer.</span><span style=\\"color:#50FA7B\\">render</span><span style=\\"color:#F8F8F2\\">();</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{as as comp,ss as data};
