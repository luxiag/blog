import{_ as e,c as i,b as a,o}from"./app-Ogdo9Bdm.js";const n="/blog/assets/776000304051952323-DL3v-skT.png",r="/blog/assets/527000304051952323-BjnY2c_P.png",p="/blog/assets/199000304051952323-zucA8AK5.png",l="/blog/assets/240000304051952323-CpxzZKvD.png",g="/blog/assets/551000404051952323-D5EDX0gK.png",c="/blog/assets/580000404051952323-MbxGYgX6.png",s="/blog/assets/508001604051952323-Bg-cgbNp.png",m="/blog/assets/733001704051952323-D44Kum-w.png",d={};function f(h,t){return o(),i("div",null,t[0]||(t[0]=[a('<h2 id="chrome开发者工具" tabindex="-1"><a class="header-anchor" href="#chrome开发者工具"><span>Chrome开发者工具</span></a></h2><h3 id="网络面板" tabindex="-1"><a class="header-anchor" href="#网络面板"><span>网络面板</span></a></h3><figure><img src="'+n+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="'+r+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="'+p+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="'+l+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="'+g+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="'+c+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="dom树" tabindex="-1"><a class="header-anchor" href="#dom树"><span>DOM树</span></a></h2><p>从网络传给渲染引擎的 HTML 文件字节流是无法直接被渲染引擎理解的，所以要将其转化为渲染引擎能够理解的内部结构，这个结构就是 DOM。</p><ul><li>从页面的视角来看，DOM 是生成页面的基础数据结构。</li><li>从 JavaScript 脚本视角来看，DOM 提供给 JavaScript 脚本操作的接口，通过这套接口，JavaScript 可以对 DOM 结构进行访问，从而改变文档的结构、样式和内容。</li><li>从安全视角来看，DOM 是一道安全防护线，一些不安全的内容在 DOM 解析阶段就被拒之门外了。</li></ul><h3 id="dom树的生成" tabindex="-1"><a class="header-anchor" href="#dom树的生成"><span>DOM树的生成</span></a></h3><p>在渲染引擎内部，有一个叫HTML 解析器（HTMLParser）的模块，它的职责就是负责将 HTML 字节流转换为 DOM 结构。</p><p>HTML 解析器并不是等整个文档加载完成之后再解析的，而是网络进程加载了多少数据，HTML 解析器便解析多少数据。</p><p>网络进程接收到响应头之后，会根据响应头中的 content-type 字段来判断文件的类型，比如 content-type 的值是“text/html”，那么浏览器就会判断这是一个 HTML 类型的文件，然后为该请求选择或者创建一个渲染进程。渲染进程准备好之后，网络进程和渲染进程之间会建立一个共享数据的管道，网络进程接收到数据后就往这个管道里面放，而渲染进程则从管道的另外一端不断地读取数据，并同时将读取的数据“喂”给 HTML 解析器。你可以把这个管道想象成一个“水管”，网络进程接收到的字节流像水一样倒进这个“水管”，而“水管”的另外一端是渲染进程的 HTML 解析器，它会动态接收字节流，并将其解析为 DOM。</p><figure><img src="'+s+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>第一个阶段，通过分词器将字节流转换为 Token。</p><figure><img src="'+m+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>',18)]))}const M=e(d,[["render",f],["__file","page.html.vue"]]),b=JSON.parse('{"path":"/browse/page.html","title":"浏览器的页面","lang":"en-US","frontmatter":{"title":"浏览器的页面","description":"Chrome开发者工具 网络面板 DOM树 从网络传给渲染引擎的 HTML 文件字节流是无法直接被渲染引擎理解的，所以要将其转化为渲染引擎能够理解的内部结构，这个结构就是 DOM。 从页面的视角来看，DOM 是生成页面的基础数据结构。 从 JavaScript 脚本视角来看，DOM 提供给 JavaScript 脚本操作的接口，通过这套接口，JavaS...","head":[["meta",{"property":"og:url","content":"https://luxiag.github.io/luxiag/blog/browse/page.html"}],["meta",{"property":"og:title","content":"浏览器的页面"}],["meta",{"property":"og:description","content":"Chrome开发者工具 网络面板 DOM树 从网络传给渲染引擎的 HTML 文件字节流是无法直接被渲染引擎理解的，所以要将其转化为渲染引擎能够理解的内部结构，这个结构就是 DOM。 从页面的视角来看，DOM 是生成页面的基础数据结构。 从 JavaScript 脚本视角来看，DOM 提供给 JavaScript 脚本操作的接口，通过这套接口，JavaS..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2023-05-22T06:38:42.000Z"}],["meta",{"property":"article:modified_time","content":"2023-05-22T06:38:42.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"浏览器的页面\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-05-22T06:38:42.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"luxiag\\",\\"url\\":\\"https://luxiag.github.io/luxiag\\"}]}"]]},"headers":[{"level":2,"title":"Chrome开发者工具","slug":"chrome开发者工具","link":"#chrome开发者工具","children":[{"level":3,"title":"网络面板","slug":"网络面板","link":"#网络面板","children":[]}]},{"level":2,"title":"DOM树","slug":"dom树","link":"#dom树","children":[{"level":3,"title":"DOM树的生成","slug":"dom树的生成","link":"#dom树的生成","children":[]}]}],"git":{"createdTime":1684737522000,"updatedTime":1684737522000,"contributors":[{"name":"卢祥","email":"example@qq.com","commits":1}]},"readingTime":{"minutes":1.78,"words":534},"filePathRelative":"browse/page.md","localizedDate":"May 22, 2023","excerpt":"<h2>Chrome开发者工具</h2>\\n<h3>网络面板</h3>\\n<figure><figcaption></figcaption></figure>\\n<figure><figcaption></figcaption></figure>","autoDesc":true}');export{M as comp,b as data};
