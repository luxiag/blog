import{_ as i,c as e,a as n,o as l}from"./app-DS_HEYrV.js";const o={};function r(a,t){return l(),e("div",null,t[0]||(t[0]=[n('<h1 id="历史" tabindex="-1"><a class="header-anchor" href="#历史"><span>历史</span></a></h1><ul><li>90年代pc</li><li>2000年左右虚拟机</li><li>2010年的cloud</li><li>2013年docker</li></ul><h1 id="contaienr" tabindex="-1"><a class="header-anchor" href="#contaienr"><span>contaienr</span></a></h1><p>容器是一种虚拟化技术，用于将应用程序及其所有依赖项打包在一起，以便在不同的计算环境中进行移植和运行。容器提供了一种隔离的运行环境，使不同应用程序能够在独立的文件系统、网络和进程空间等独立运行环境中运行，提升了安全性和稳定性。容器技术的出现，使得应用程序的开发、测试、部署和管理变得更加便捷和高效。</p><ul><li>可移植性</li></ul><p>容器已经成为应用分发和交付的标准技术，将应用与底层运行环境进行解耦，使得应用程序可以在不同的计算环境中快速移植和运行。</p><ul><li>高效性</li></ul><p>相比于传统的虚拟机技术，容器更加轻量级，启动和停止速度更快，占用的资源更少。容器共享操作系统和硬件资源，提高了资源利用率，降低了运行成本。</p><p>环境隔离</p><p>容器提供了一种隔离的运行环境，每个容器都有自己的文件系统、网络和进程空间，保证了应用程序之间的相互隔离。这样可以提高应用程序的安全性和稳定性，避免了不同应用程序之间的冲突和干扰。</p><ul><li>可伸缩性</li></ul><p>容器可以根据需求进行水平和垂直扩展，快速实现应用程序的弹性伸缩。通过容器编排工具，可以自动管理和调度容器的部署和扩展，提高了应用程序的可伸缩性和可靠性。</p><h1 id="标准" tabindex="-1"><a class="header-anchor" href="#标准"><span>标准</span></a></h1><p>docker != container</p><p><strong>OCI （open container Initiative）组织</strong></p><p>OCI（Open Container Initiative）是一个开放治理结构，由 Linux 基金会在 2015 年 6 月成立，旨在创建围绕容器格式和运行时的开放行业标准。OCI 的成立是由 Docker 和其他容器行业的领导者共同推动的</p><p>OCI（Open Container Initiative）定义了几个关键规范，以确保容器格式和运行时的互操作性。以下是OCI的主要规范：</p><ol><li><strong>OCI 镜像规范（OCI Image Specification）</strong>： <ul><li><strong>目的</strong>：定义了容器镜像的格式，确保不同工具和平台之间的一致性。</li><li><strong>内容</strong>： <ul><li><strong>镜像层</strong>：容器镜像由一系列可叠加的文件系统层组成，每一层包含了对前一层的修改。</li><li><strong>配置文件</strong>：每个镜像包含一个配置文件，描述了如何运行容器，例如环境变量、入口点、卷挂载等。</li><li><strong>manifest</strong>：清单文件描述了镜像的内容和结构，包括各个层的顺序和配置文件的引用。</li><li><strong>索引</strong>：对于多架构镜像，索引文件列出了不同架构可用的镜像清单。</li></ul></li></ul></li><li><strong>OCI 运行时规范（OCI Runtime Specification）</strong>： <ul><li><strong>目的</strong>：定义了如何运行容器，包括容器的生命周期管理和底层操作系统之间的交互。</li><li><strong>内容</strong>： <ul><li><strong>运行时状态</strong>：描述了容器运行时的状态，包括进程、网络、文件系统挂载等。</li><li><strong>生命周期</strong>：定义了容器的创建、启动、停止和删除等操作。</li><li><strong>配置文件</strong>：运行时配置文件指定了容器的资源限制、环境变量、卷挂载等。</li><li><strong>标准输入/输出/错误</strong>：定义了容器如何处理标准输入、输出和错误流。</li></ul></li></ul></li><li><strong>OCI 分发规范（OCI Distribution Specification）</strong>： <ul><li><strong>目的</strong>：定义了如何分发容器镜像，确保不同镜像仓库之间的兼容性。</li><li><strong>内容</strong>： <ul><li><strong>API</strong>：定义了客户端和镜像仓库之间的交互API，包括认证、清单检索、层传输等。</li><li><strong>协议</strong>：规定了HTTP协议的使用，包括支持的内容协商和错误响应。</li><li><strong>清单和层</strong>：描述了如何从仓库中检索镜像清单和层。 这些规范共同确保了容器技术的互操作性，使得不同的容器工具和平台能够无缝地工作在一起。例如，使用OCI兼容的镜像，可以在任何实现了OCI运行时规范的容器引擎上运行，无论是Docker、containerd、Podman还是其他任何符合OCI标准的工具。 OCI规范是由社区驱动的，任何人都可以参与到规范的讨论、提议和改进中。这些规范会定期更新，以适应容器技术的最新发展。</li></ul></li></ul></li></ol><h1 id="docker" tabindex="-1"><a class="header-anchor" href="#docker"><span>docker</span></a></h1><ul><li>开源</li><li>容器</li><li>镜像</li><li>容器编排</li></ul>',20)]))}const c=i(o,[["render",r],["__file","guide.html.vue"]]),p=JSON.parse('{"path":"/docker/guide.html","title":"容器技术","lang":"en-US","frontmatter":{"title":"容器技术","date":"2024-11-24T00:00:00.000Z","category":["Docker"],"description":"历史 90年代pc 2000年左右虚拟机 2010年的cloud 2013年docker contaienr 容器是一种虚拟化技术，用于将应用程序及其所有依赖项打包在一起，以便在不同的计算环境中进行移植和运行。容器提供了一种隔离的运行环境，使不同应用程序能够在独立的文件系统、网络和进程空间等独立运行环境中运行，提升了安全性和稳定性。容器技术的出现，使得...","head":[["meta",{"property":"og:url","content":"https://luxiag.github.io/luxiag/blog/docker/guide.html"}],["meta",{"property":"og:title","content":"容器技术"}],["meta",{"property":"og:description","content":"历史 90年代pc 2000年左右虚拟机 2010年的cloud 2013年docker contaienr 容器是一种虚拟化技术，用于将应用程序及其所有依赖项打包在一起，以便在不同的计算环境中进行移植和运行。容器提供了一种隔离的运行环境，使不同应用程序能够在独立的文件系统、网络和进程空间等独立运行环境中运行，提升了安全性和稳定性。容器技术的出现，使得..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2024-11-24T12:22:33.000Z"}],["meta",{"property":"article:published_time","content":"2024-11-24T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-11-24T12:22:33.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"容器技术\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-11-24T00:00:00.000Z\\",\\"dateModified\\":\\"2024-11-24T12:22:33.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"luxiag\\",\\"url\\":\\"https://luxiag.github.io/luxiag\\"}]}"]]},"headers":[],"git":{"createdTime":1732450953000,"updatedTime":1732450953000,"contributors":[{"name":"luxiag","email":"luxiag@qq.com","commits":1}]},"readingTime":{"minutes":3.89,"words":1166},"filePathRelative":"docker/guide.md","localizedDate":"November 24, 2024","excerpt":"\\n<ul>\\n<li>90年代pc</li>\\n<li>2000年左右虚拟机</li>\\n<li>2010年的cloud</li>\\n<li>2013年docker</li>\\n</ul>\\n<h1>contaienr</h1>","autoDesc":true}');export{c as comp,p as data};
