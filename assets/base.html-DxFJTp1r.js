import{_ as n,c as l,a,o as e}from"./app-CBs_XKfp.js";const p={};function o(i,s){return e(),l("div",null,s[0]||(s[0]=[a(`<h1 id="概括" tabindex="-1"><a class="header-anchor" href="#概括"><span>概括</span></a></h1><div class="language-cs line-numbers-mode" data-highlighter="shiki" data-ext="cs" data-title="cs" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#6272A4;">// 命名空间</span></span>
<span class="line"><span style="color:#FF79C6;">using</span><span style="color:#8BE9FD;font-style:italic;"> System</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#6272A4;">// 命名空间</span></span>
<span class="line"><span style="color:#FF79C6;">namespace</span><span style="color:#8BE9FD;font-style:italic;"> Simple</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#6272A4;">  // 类</span></span>
<span class="line"><span style="color:#FF79C6;">  class</span><span style="color:#8BE9FD;"> Program</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#6272A4;">    // </span></span>
<span class="line"><span style="color:#FF79C6;">    static</span><span style="color:#FF79C6;"> void</span><span style="color:#50FA7B;"> Main</span><span style="color:#F8F8F2;">(){</span></span>
<span class="line"><span style="color:#F8F8F2;">      Console.</span><span style="color:#50FA7B;">WriteLine</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">Hello World!</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="net和c-的关系" tabindex="-1"><a class="header-anchor" href="#net和c-的关系"><span>.Net和C#的关系</span></a></h2><p>一、asp.net是一种用来快速创建动态Web网站的技术，不是语言，它使用C#(或者VB.net)为开发语言。C#是一种面向对象的编程语言；net只是一个框架，.net中所有的编程语言，比如c#、.net等编写的程序必须在.net framework框架下运行。</p><p>.NET 分成两个方面：WinForm和WebForm，ASP.NET就是属于WebForm，也就是平时说的B/S模式的开发。而WinForm就是属于C/S模式。</p><p>Asp.NET可以用C#或VB.NET来开发。编译后形成CLR，通过服务器的IIS+.NET&gt; FrameWork再次编译来运行。</p><p>二、.Net全称.NET Framework是一个开发和运行环境，该战略是微软的一项全新创意，它将使得“互联网行业进入一个更先进的阶段”，.NET不是一种编程语言。简单说就是一组类库框架。</p><p>.NET有很多种语言组成，比如C#、 VB.NET、J#、Jsript、Managed、C++，但是都是运行在.NET FrameWork Run Time底下的。其中，C#是主流。</p><p>三、C#是.NET Framework框架支持的一种主力开发语言，可用于开发ASP.NET网站,Windows程序，控制台程序，甚至于手机软件(Windows&gt; Phone)。</p><h2 id="标识符" tabindex="-1"><a class="header-anchor" href="#标识符"><span>标识符</span></a></h2><p>在C#中，标识符是用于表示变量、方法、类、接口、属性、事件等程序实体的名称。标识符可以由字母（A-Z，a-z）、数字（0-9）、下划线（_）和@符号组成，但是不能以数字开头。C#是区分大小写的，因此大写字母和小写字母被认为是不同的字符。标识符的命名应该遵循以下规则：</p><ol><li><strong>合法性</strong>：标识符必须以字母、下划线或@开头，后面可以跟任意数量的字母、数字、下划线或@符号。</li><li><strong>命名约定</strong>：C#有一套命名约定，虽然不是强制性的，但遵循这些约定可以提高代码的可读性和一致性。例如： <ul><li>类名和接口名应该使用帕斯卡命名法（PascalCase），即每个单词的首字母大写，如<code>MyClass</code>、<code>IDataService</code>。</li><li>方法和属性名也应该使用帕斯卡命名法，如<code>CalculateTotal</code>、<code>ProductName</code>。</li><li>变量和参数名应该使用骆驼命名法（camelCase），即第一个单词的首字母小写，后续单词的首字母大写，如<code>backgroundColor</code>、<code>indexOf</code>。</li><li>私有字段通常以一个下划线开头，如<code>_privateField</code>。</li><li>常量名应该使用全大写字母，单词之间可以用下划线分隔，如<code>MAX_HEIGHT</code>、<code>DEFAULT_TIMEOUT</code>。</li></ul></li><li><strong>关键字</strong>：C#中有一些关键字，这些关键字有特定的语言含义，不能用作标识符。例如<code>class</code>、<code>int</code>、<code>if</code>等。如果确实需要使用与关键字相同的名称，可以在名称前后添加@符号，如<code>@class</code>。</li><li><strong>作用域</strong>：标识符的作用域是指它们在代码中的可见性。在C#中，标识符可以在类、方法或代码块内部声明，其作用域限定在声明它们的区域。</li><li><strong>不推荐使用的字符</strong>：虽然@符号是合法的，但通常不推荐在标识符中使用，除非是为了解决与关键字冲突的情况。 遵循这些规则和约定可以帮助创建清晰、易于理解和维护的C#代码。</li></ol><h2 id="关键字" tabindex="-1"><a class="header-anchor" href="#关键字"><span>关键字</span></a></h2><p>C#中有一些关键字，这些关键字有特定的语言含义，不能用作标识符。例如<code>class</code>、<code>int</code>、<code>if</code>等。如果确实需要使用与关键字相同的名称，可以在名称前后添加@符号，如<code>@class</code>。</p><h2 id="main方法" tabindex="-1"><a class="header-anchor" href="#main方法"><span>Main方法</span></a></h2><p>在C#中，<code>Main</code>方法是程序的入口点。当程序启动时，CLR会调用<code>Main</code>方法。<code>Main</code>方法通常返回一个整数类型，表示程序的退出代码。<code>Main</code>方法可以接受一个字符串数组作为参数，该数组包含传递给程序的命令行参数。</p><div class="language-cs line-numbers-mode" data-highlighter="shiki" data-ext="cs" data-title="cs" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">class</span><span style="color:#8BE9FD;"> Program</span></span>
<span class="line"><span style="color:#F8F8F2;">{</span></span>
<span class="line"><span style="color:#FF79C6;">    static</span><span style="color:#FF79C6;"> void</span><span style="color:#50FA7B;"> Main</span><span style="color:#F8F8F2;">(</span><span style="color:#FF79C6;">string</span><span style="color:#F8F8F2;">[] </span><span style="color:#FFB86C;font-style:italic;">args</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">    {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="cli和clr" tabindex="-1"><a class="header-anchor" href="#cli和clr"><span>CLI和CLR</span></a></h2><h3 id="cli" tabindex="-1"><a class="header-anchor" href="#cli"><span>CLI</span></a></h3><p>CLI（Common Language Infrastructure）是微软为.NET框架开发的一种语言无关的、平台无关的虚拟机规范。CLI包括以下几个部分：</p><ol><li><strong>公共中间语言（Common Intermediate Language，CIL）</strong>：CIL是一种低级、平台无关的中间语言，它将源代码编译成CIL代码。CIL代码可以在任何支持CLI的平台上运行。</li><li><strong>元数据（Metadata）</strong>：元数据是CIL代码的一部分，它包含了关于代码的元数据信息，如类型信息、方法信息、字段信息等。元数据用于在运行时解析和执行代码。</li><li><strong>类型系统（Type System）</strong>：CLI定义了一个类型系统，它支持值类型和引用类型，以及它们的继承和接口实现。</li><li><strong>垃圾回收（Garbage Collection）</strong>：CLI提供了一个自动垃圾回收机制，用于管理内存的分配和释放。</li><li><strong>异常处理（Exception Handling）</strong>：CLI支持异常处理机制，用于处理运行时错误。</li></ol><p>CLI的全部体系结构，提供公共类型系统（CTS，Common Type System）、虚拟执行系统（VES，Virtual Execution System）和公共语言规范（CLS，Common Language Specification）的标准化描述，还提供对元数据（Metadata）的信息性描述。</p><p>通用类型系统（CTS）：规范.NET中数据的类型。</p><p>元数据系统（Metadata）：是.NET中描述数据的数据。</p><p>通用语言规范（CLS）：描述多语言之间进行交互的语言规范，.NET系统包括的语言有C#、C++、VB、J#，它们都遵守通用语言规范。</p><p>虚拟执行系统（VES）：是一个可运行受管理代码（Managed Code）的运行环境，它提供了运行受管理代码所需要的内置数据类型（data type），以及假定的机器型态与状态设置、流程控制与例外处理等参数。</p><h3 id="clr" tabindex="-1"><a class="header-anchor" href="#clr"><span>CLR</span></a></h3><p>CLR（Common Language Runtime，公共语言运行时）是CLI的实现，它是.NET框架的核心组件。CLR提供了运行CIL代码的环境，并提供了以下功能：</p><ol><li><strong>代码执行</strong>：CLR负责将CIL代码转换为机器代码，并在支持CLI的平台上执行。</li><li><strong>内存管理</strong>：CLR提供了自动垃圾回收机制，用于管理内存的分配和释放。</li><li><strong>类型检查</strong>：CLR在运行时检查类型信息，确保代码的正确性。</li><li><strong>异常处理</strong>：CLR支持异常处理机制，用于处理运行时错误。</li><li><strong>跨语言互操作性</strong>：CLR支持不同编程语言之间的互操作性，允许使用不同语言编写的代码相互调用。</li><li><strong>安全</strong>：CLR提供了安全机制，用于保护代码免受恶意攻击。</li></ol><h3 id="jit编译器" tabindex="-1"><a class="header-anchor" href="#jit编译器"><span>JIT编译器</span></a></h3><p>JIT编译器（Just-In-Time编译器）是一种在程序运行时将中间语言（如CIL）编译为机器代码的编译器。JIT编译器在程序运行时将CIL代码转换为机器代码，并在需要时执行。这种编译策略的优点是可以在运行时根据程序的实际需求进行优化，从而提高程序的执行效率。JIT编译器通常用于.NET框架中，它将CIL代码编译为机器代码，并在运行时执行。</p><h3 id="aot编译器" tabindex="-1"><a class="header-anchor" href="#aot编译器"><span>AOT编译器</span></a></h3><p>AOT编译器（Ahead-Of-Time编译器）是一种在程序编译时将中间语言（如CIL）编译为机器代码的编译器。AOT编译器在程序编译时将CIL代码转换为机器代码，并将机器代码嵌入到最终的可执行文件中。这种编译策略的优点是可以在程序运行时直接执行机器代码，而不需要再进行编译。AOT编译器通常用于移动平台和嵌入式系统，它将CIL代码编译为机器代码，并将机器代码嵌入到最终的可执行文件中。</p><h1 id="类型" tabindex="-1"><a class="header-anchor" href="#类型"><span>类型</span></a></h1><h2 id="命名空间" tabindex="-1"><a class="header-anchor" href="#命名空间"><span>命名空间</span></a></h2><p>命名空间是C#中用于组织代码的一种机制，它可以将相关的类、接口、结构体等组织在一起，避免命名冲突。命名空间可以嵌套，例如：</p><div class="language-cs line-numbers-mode" data-highlighter="shiki" data-ext="cs" data-title="cs" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">namespace</span><span style="color:#8BE9FD;font-style:italic;"> MyNamespace</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#FF79C6;">  namespace</span><span style="color:#8BE9FD;font-style:italic;"> SubNamespace</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#FF79C6;">    class</span><span style="color:#8BE9FD;"> MyClass</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#6272A4;">      // ...</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="using指令" tabindex="-1"><a class="header-anchor" href="#using指令"><span>using指令</span></a></h3><p><code>using</code>指令是C#中用于引入命名空间的一种机制，它可以将命名空间中的类型引入到当前代码文件中，从而可以直接使用这些类型，而不需要使用命名空间限定。例如：</p><div class="language-cs line-numbers-mode" data-highlighter="shiki" data-ext="cs" data-title="cs" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">using</span><span style="color:#8BE9FD;font-style:italic;"> System</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#FF79C6;">using</span><span style="color:#8BE9FD;font-style:italic;"> MyNamespace</span><span style="color:#F8F8F2;">.</span><span style="color:#8BE9FD;font-style:italic;">SubNamespace</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">class</span><span style="color:#8BE9FD;"> Program</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#FF79C6;">  static</span><span style="color:#FF79C6;"> void</span><span style="color:#50FA7B;"> Main</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#8BE9FD;font-style:italic;">    MyClass</span><span style="color:#F8F8F2;"> myClass </span><span style="color:#FF79C6;">=</span><span style="color:#FF79C6;"> new</span><span style="color:#8BE9FD;font-style:italic;"> MyClass</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#6272A4;">    // ...</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="结构" tabindex="-1"><a class="header-anchor" href="#结构"><span>结构</span></a></h2><p>结构（Struct）是一种值类型，用于封装数据和相关功能。系统在栈上分配内存，并存储实际的数据副本。</p><ol><li>不可继承：结构不能从其他结构或类继承，也不能被继承。</li><li>默认值：结构的所有字段在实例化时会自动初始化为该字段类型的默认值。</li><li>比类轻量：由于结构是值类型，通常在性能上比类更轻量。</li><li>构造函数：结构可以定义构造函数，但不能定义析构函数。</li><li>初始化：不允许使用实例属性和字段初始化语句</li></ol><div class="language-cs line-numbers-mode" data-highlighter="shiki" data-ext="cs" data-title="cs" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">public</span><span style="color:#FF79C6;"> struct</span><span style="color:#8BE9FD;font-style:italic;"> Point</span></span>
<span class="line"><span style="color:#F8F8F2;">{</span></span>
<span class="line"><span style="color:#FF79C6;">    public</span><span style="color:#FF79C6;"> int</span><span style="color:#F8F8F2;"> X { </span><span style="color:#FF79C6;">get</span><span style="color:#F8F8F2;">; </span><span style="color:#FF79C6;">set</span><span style="color:#F8F8F2;">; }</span></span>
<span class="line"><span style="color:#FF79C6;">    public</span><span style="color:#FF79C6;"> int</span><span style="color:#F8F8F2;"> Y { </span><span style="color:#FF79C6;">get</span><span style="color:#F8F8F2;">; </span><span style="color:#FF79C6;">set</span><span style="color:#F8F8F2;">; }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">    public</span><span style="color:#50FA7B;"> Point</span><span style="color:#F8F8F2;">(</span><span style="color:#FF79C6;">int</span><span style="color:#FFB86C;font-style:italic;"> x</span><span style="color:#F8F8F2;">, </span><span style="color:#FF79C6;">int</span><span style="color:#FFB86C;font-style:italic;"> y</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">    {</span></span>
<span class="line"><span style="color:#F8F8F2;">        X </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> x;</span></span>
<span class="line"><span style="color:#F8F8F2;">        Y </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> y;</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">    public</span><span style="color:#FF79C6;"> void</span><span style="color:#50FA7B;"> Display</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"><span style="color:#F8F8F2;">    {</span></span>
<span class="line"><span style="color:#F8F8F2;">        Console.</span><span style="color:#50FA7B;">WriteLine</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">$&quot;</span><span style="color:#F1FA8C;">Point(</span><span style="color:#FF79C6;">{</span><span style="color:#F8F8F2;">X</span><span style="color:#FF79C6;">}</span><span style="color:#F1FA8C;">, </span><span style="color:#FF79C6;">{</span><span style="color:#F8F8F2;">Y</span><span style="color:#FF79C6;">}</span><span style="color:#F1FA8C;">)</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">class</span><span style="color:#8BE9FD;"> Program</span></span>
<span class="line"><span style="color:#F8F8F2;">{</span></span>
<span class="line"><span style="color:#FF79C6;">    static</span><span style="color:#FF79C6;"> void</span><span style="color:#50FA7B;"> Main</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"><span style="color:#F8F8F2;">    {</span></span>
<span class="line"><span style="color:#8BE9FD;font-style:italic;">        Point</span><span style="color:#F8F8F2;"> p1 </span><span style="color:#FF79C6;">=</span><span style="color:#FF79C6;"> new</span><span style="color:#8BE9FD;font-style:italic;"> Point</span><span style="color:#F8F8F2;">(</span><span style="color:#BD93F9;">10</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">20</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">        p1.</span><span style="color:#50FA7B;">Display</span><span style="color:#F8F8F2;">(); </span><span style="color:#6272A4;">// 输出: Point(10, 20)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">        // 直接访问字段</span></span>
<span class="line"><span style="color:#F8F8F2;">        p1.X </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> 30</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">        p1.</span><span style="color:#50FA7B;">Display</span><span style="color:#F8F8F2;">(); </span><span style="color:#6272A4;">// 输出: Point(30, 20)</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="构造函数" tabindex="-1"><a class="header-anchor" href="#构造函数"><span>构造函数</span></a></h3><p>结构（struct）也可以定义构造函数，但不能定义析构函数。</p><ul><li>构造函数是一种特殊的方法，在创建对象时被调用，用于初始化对象的状态。构造函数的名称与类名相同，并且没有返回类型。</li><li>析构函数是一种特殊的方法，在对象被垃圾回收器（GC）回收之前调用，用于清理资源。析构函数的名称与类名相同，并以波浪号（~）开头。</li></ul><div class="language-cs line-numbers-mode" data-highlighter="shiki" data-ext="cs" data-title="cs" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">public</span><span style="color:#FF79C6;"> struct</span><span style="color:#8BE9FD;font-style:italic;"> Point</span></span>
<span class="line"><span style="color:#F8F8F2;">{</span></span>
<span class="line"><span style="color:#FF79C6;">    public</span><span style="color:#FF79C6;"> int</span><span style="color:#F8F8F2;"> X { </span><span style="color:#FF79C6;">get</span><span style="color:#F8F8F2;">; }</span></span>
<span class="line"><span style="color:#FF79C6;">    public</span><span style="color:#FF79C6;"> int</span><span style="color:#F8F8F2;"> Y { </span><span style="color:#FF79C6;">get</span><span style="color:#F8F8F2;">; }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">    // 带参数的构造函数</span></span>
<span class="line"><span style="color:#FF79C6;">    public</span><span style="color:#50FA7B;"> Point</span><span style="color:#F8F8F2;">(</span><span style="color:#FF79C6;">int</span><span style="color:#FFB86C;font-style:italic;"> x</span><span style="color:#F8F8F2;">, </span><span style="color:#FF79C6;">int</span><span style="color:#FFB86C;font-style:italic;"> y</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">    {</span></span>
<span class="line"><span style="color:#F8F8F2;">        X </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> x;</span></span>
<span class="line"><span style="color:#F8F8F2;">        Y </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> y;</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">    // 默认构造函数（可选，必须手动定义）</span></span>
<span class="line"><span style="color:#FF79C6;">    public</span><span style="color:#50FA7B;"> Point</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"><span style="color:#F8F8F2;">    {</span></span>
<span class="line"><span style="color:#F8F8F2;">        X </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> 0</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">        Y </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> 0</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">    public</span><span style="color:#FF79C6;"> void</span><span style="color:#50FA7B;"> Display</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"><span style="color:#F8F8F2;">    {</span></span>
<span class="line"><span style="color:#F8F8F2;">        Console.</span><span style="color:#50FA7B;">WriteLine</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">$&quot;</span><span style="color:#F1FA8C;">Point(</span><span style="color:#FF79C6;">{</span><span style="color:#F8F8F2;">X</span><span style="color:#FF79C6;">}</span><span style="color:#F1FA8C;">, </span><span style="color:#FF79C6;">{</span><span style="color:#F8F8F2;">Y</span><span style="color:#FF79C6;">}</span><span style="color:#F1FA8C;">)</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">class</span><span style="color:#8BE9FD;"> Program</span></span>
<span class="line"><span style="color:#F8F8F2;">{</span></span>
<span class="line"><span style="color:#FF79C6;">    static</span><span style="color:#FF79C6;"> void</span><span style="color:#50FA7B;"> Main</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"><span style="color:#F8F8F2;">    {</span></span>
<span class="line"><span style="color:#8BE9FD;font-style:italic;">        Point</span><span style="color:#F8F8F2;"> p1 </span><span style="color:#FF79C6;">=</span><span style="color:#FF79C6;"> new</span><span style="color:#8BE9FD;font-style:italic;"> Point</span><span style="color:#F8F8F2;">(</span><span style="color:#BD93F9;">5</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">10</span><span style="color:#F8F8F2;">); </span><span style="color:#6272A4;">// 使用带参数的构造函数</span></span>
<span class="line"><span style="color:#8BE9FD;font-style:italic;">        Point</span><span style="color:#F8F8F2;"> p2 </span><span style="color:#FF79C6;">=</span><span style="color:#FF79C6;"> new</span><span style="color:#8BE9FD;font-style:italic;"> Point</span><span style="color:#F8F8F2;">(); </span><span style="color:#6272A4;">// 使用默认构造函数</span></span>
<span class="line"><span style="color:#F8F8F2;">        p1.</span><span style="color:#50FA7B;">Display</span><span style="color:#F8F8F2;">(); </span><span style="color:#6272A4;">// 输出: Point(5, 10)</span></span>
<span class="line"><span style="color:#F8F8F2;">        p2.</span><span style="color:#50FA7B;">Display</span><span style="color:#F8F8F2;">(); </span><span style="color:#6272A4;">// 输出: Point(0, 0)</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="枚举" tabindex="-1"><a class="header-anchor" href="#枚举"><span>枚举</span></a></h2><p>枚举（enum）是一种特殊的值类型，用于定义一组命名的常数。枚举使得代码更加可读和可维护，通常用于表示状态、选项或一组相关的值。默认情况下，枚举的第一个成员从0开始，后续成员的值会依次递增。</p><div class="language-cs line-numbers-mode" data-highlighter="shiki" data-ext="cs" data-title="cs" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">public</span><span style="color:#FF79C6;"> enum</span><span style="color:#8BE9FD;font-style:italic;"> DaysOfWeek</span></span>
<span class="line"><span style="color:#F8F8F2;">{</span></span>
<span class="line"><span style="color:#F8F8F2;">    Sunday,    </span><span style="color:#6272A4;">// 0</span></span>
<span class="line"><span style="color:#F8F8F2;">    Monday,    </span><span style="color:#6272A4;">// 1</span></span>
<span class="line"><span style="color:#F8F8F2;">    Tuesday,   </span><span style="color:#6272A4;">// 2</span></span>
<span class="line"><span style="color:#F8F8F2;">    Wednesday, </span><span style="color:#6272A4;">// 3</span></span>
<span class="line"><span style="color:#F8F8F2;">    Thursday,  </span><span style="color:#6272A4;">// 4</span></span>
<span class="line"><span style="color:#F8F8F2;">    Friday,    </span><span style="color:#6272A4;">// 5</span></span>
<span class="line"><span style="color:#F8F8F2;">    Saturday   </span><span style="color:#6272A4;">// 6</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="指定枚举类型" tabindex="-1"><a class="header-anchor" href="#指定枚举类型"><span>指定枚举类型</span></a></h3><p>使用 : 来指定其他整型类型（如 byte、sbyte、short、ushort、int、uint、long、ulong）</p><div class="language-cs line-numbers-mode" data-highlighter="shiki" data-ext="cs" data-title="cs" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">public</span><span style="color:#FF79C6;"> enum</span><span style="color:#8BE9FD;font-style:italic;"> ErrorCode</span><span style="color:#F8F8F2;"> : </span><span style="color:#FF79C6;">byte</span></span>
<span class="line"><span style="color:#F8F8F2;">{</span></span>
<span class="line"><span style="color:#F8F8F2;">    None </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> 0</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">    NotFound </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> 1</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">    InvalidInput </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> 2</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">    ServerError </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> 3</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="枚举转换" tabindex="-1"><a class="header-anchor" href="#枚举转换"><span>枚举转换</span></a></h3><div class="language-cs line-numbers-mode" data-highlighter="shiki" data-ext="cs" data-title="cs" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#6272A4;">// 枚举转换为整型</span></span>
<span class="line"><span style="color:#FF79C6;">int</span><span style="color:#F8F8F2;"> dayValue </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> (</span><span style="color:#FF79C6;">int</span><span style="color:#F8F8F2;">)DaysOfWeek.Wednesday;</span></span>
<span class="line"><span style="color:#F8F8F2;">Console.</span><span style="color:#50FA7B;">WriteLine</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">$&quot;</span><span style="color:#F1FA8C;">Wednesday&#39;s value is: </span><span style="color:#FF79C6;">{</span><span style="color:#F8F8F2;">dayValue</span><span style="color:#FF79C6;">}</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">); </span><span style="color:#6272A4;">// 输出: 3</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">// 整型转换为枚举</span></span>
<span class="line"><span style="color:#8BE9FD;font-style:italic;">DaysOfWeek</span><span style="color:#F8F8F2;"> day </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> (</span><span style="color:#8BE9FD;font-style:italic;">DaysOfWeek</span><span style="color:#F8F8F2;">)</span><span style="color:#BD93F9;">4</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">Console.</span><span style="color:#50FA7B;">WriteLine</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">$&quot;</span><span style="color:#F1FA8C;">The day for value 4 is: </span><span style="color:#FF79C6;">{</span><span style="color:#F8F8F2;">day</span><span style="color:#FF79C6;">}</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">); </span><span style="color:#6272A4;">// 输出: Thursday</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="位标志" tabindex="-1"><a class="header-anchor" href="#位标志"><span>位标志</span></a></h3><div class="language-cs line-numbers-mode" data-highlighter="shiki" data-ext="cs" data-title="cs" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#F8F8F2;">[</span><span style="color:#8BE9FD;font-style:italic;">Flags</span><span style="color:#F8F8F2;">]</span></span>
<span class="line"><span style="color:#FF79C6;">public</span><span style="color:#FF79C6;"> enum</span><span style="color:#8BE9FD;font-style:italic;"> FileAccess</span></span>
<span class="line"><span style="color:#F8F8F2;">{</span></span>
<span class="line"><span style="color:#F8F8F2;">    None </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> 0</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">    Read </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> 1</span><span style="color:#F8F8F2;">,        </span><span style="color:#6272A4;">// 2^0</span></span>
<span class="line"><span style="color:#F8F8F2;">    Write </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> 2</span><span style="color:#F8F8F2;">,       </span><span style="color:#6272A4;">// 2^1</span></span>
<span class="line"><span style="color:#F8F8F2;">    Execute </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> 4</span><span style="color:#F8F8F2;">,     </span><span style="color:#6272A4;">// 2^2</span></span>
<span class="line"><span style="color:#F8F8F2;">    ReadWrite </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> Read </span><span style="color:#FF79C6;">|</span><span style="color:#F8F8F2;"> Write, </span><span style="color:#6272A4;">// 3 (1 + 2)</span></span>
<span class="line"><span style="color:#F8F8F2;">    FullControl </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> Read </span><span style="color:#FF79C6;">|</span><span style="color:#F8F8F2;"> Write </span><span style="color:#FF79C6;">|</span><span style="color:#F8F8F2;"> Execute </span><span style="color:#6272A4;">// 7 (1 + 2 + 4)</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">class</span><span style="color:#8BE9FD;"> Program</span></span>
<span class="line"><span style="color:#F8F8F2;">{</span></span>
<span class="line"><span style="color:#FF79C6;">    static</span><span style="color:#FF79C6;"> void</span><span style="color:#50FA7B;"> Main</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"><span style="color:#F8F8F2;">    {</span></span>
<span class="line"><span style="color:#6272A4;">        // 组合标志</span></span>
<span class="line"><span style="color:#8BE9FD;font-style:italic;">        FileAccess</span><span style="color:#F8F8F2;"> access </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> FileAccess.Read </span><span style="color:#FF79C6;">|</span><span style="color:#F8F8F2;"> FileAccess.Write;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">        // 检查标志</span></span>
<span class="line"><span style="color:#FF79C6;">        bool</span><span style="color:#F8F8F2;"> canRead </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> (access </span><span style="color:#FF79C6;">&amp;</span><span style="color:#F8F8F2;"> FileAccess.Read) </span><span style="color:#FF79C6;">==</span><span style="color:#F8F8F2;"> FileAccess.Read;</span></span>
<span class="line"><span style="color:#FF79C6;">        bool</span><span style="color:#F8F8F2;"> canWrite </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> (access </span><span style="color:#FF79C6;">&amp;</span><span style="color:#F8F8F2;"> FileAccess.Write) </span><span style="color:#FF79C6;">==</span><span style="color:#F8F8F2;"> FileAccess.Write;</span></span>
<span class="line"><span style="color:#FF79C6;">        bool</span><span style="color:#F8F8F2;"> canExecute </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> (access </span><span style="color:#FF79C6;">&amp;</span><span style="color:#F8F8F2;"> FileAccess.Execute) </span><span style="color:#FF79C6;">==</span><span style="color:#F8F8F2;"> FileAccess.Execute;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">        Console.</span><span style="color:#50FA7B;">WriteLine</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">$&quot;</span><span style="color:#F1FA8C;">Can Read: </span><span style="color:#FF79C6;">{</span><span style="color:#F8F8F2;">canRead</span><span style="color:#FF79C6;">}</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">);       </span><span style="color:#6272A4;">// 输出: Can Read: True</span></span>
<span class="line"><span style="color:#F8F8F2;">        Console.</span><span style="color:#50FA7B;">WriteLine</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">$&quot;</span><span style="color:#F1FA8C;">Can Write: </span><span style="color:#FF79C6;">{</span><span style="color:#F8F8F2;">canWrite</span><span style="color:#FF79C6;">}</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">);     </span><span style="color:#6272A4;">// 输出: Can Write: True</span></span>
<span class="line"><span style="color:#F8F8F2;">        Console.</span><span style="color:#50FA7B;">WriteLine</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">$&quot;</span><span style="color:#F1FA8C;">Can Execute: </span><span style="color:#FF79C6;">{</span><span style="color:#F8F8F2;">canExecute</span><span style="color:#FF79C6;">}</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">); </span><span style="color:#6272A4;">// 输出: Can Execute: False</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="数组" tabindex="-1"><a class="header-anchor" href="#数组"><span>数组</span></a></h2><p>数组（Array）是一种用于存储多个相同类型数据的集合。数组是一种固定大小的数据结构，可以通过索引访问其元素。</p><div class="language-cs line-numbers-mode" data-highlighter="shiki" data-ext="cs" data-title="cs" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#6272A4;">// 定义一个整数数组</span></span>
<span class="line"><span style="color:#FF79C6;">int</span><span style="color:#F8F8F2;">[] numbers </span><span style="color:#FF79C6;">=</span><span style="color:#FF79C6;"> new</span><span style="color:#FF79C6;"> int</span><span style="color:#F8F8F2;">[</span><span style="color:#BD93F9;">5</span><span style="color:#F8F8F2;">]; </span><span style="color:#6272A4;">// 创建一个长度为5的整型数组</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">// 直接初始化</span></span>
<span class="line"><span style="color:#FF79C6;">int</span><span style="color:#F8F8F2;">[] numbers </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> { </span><span style="color:#BD93F9;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">3</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">4</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">5</span><span style="color:#F8F8F2;"> };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">// 逐个赋值</span></span>
<span class="line"><span style="color:#FF79C6;">int</span><span style="color:#F8F8F2;">[] numbers2 </span><span style="color:#FF79C6;">=</span><span style="color:#FF79C6;"> new</span><span style="color:#FF79C6;"> int</span><span style="color:#F8F8F2;">[</span><span style="color:#BD93F9;">5</span><span style="color:#F8F8F2;">];</span></span>
<span class="line"><span style="color:#F8F8F2;">numbers2[</span><span style="color:#BD93F9;">0</span><span style="color:#F8F8F2;">] </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> 10</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">numbers2[</span><span style="color:#BD93F9;">1</span><span style="color:#F8F8F2;">] </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> 20</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#6272A4;">// 依此类推</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">int</span><span style="color:#F8F8F2;">[] numbers </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> { </span><span style="color:#BD93F9;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">3</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">4</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">5</span><span style="color:#F8F8F2;"> };</span></span>
<span class="line"><span style="color:#F8F8F2;">Console.</span><span style="color:#50FA7B;">WriteLine</span><span style="color:#F8F8F2;">(numbers[</span><span style="color:#BD93F9;">0</span><span style="color:#F8F8F2;">]); </span><span style="color:#6272A4;">// 输出: 1</span></span>
<span class="line"><span style="color:#F8F8F2;">Console.</span><span style="color:#50FA7B;">WriteLine</span><span style="color:#F8F8F2;">(numbers[</span><span style="color:#BD93F9;">4</span><span style="color:#F8F8F2;">]); </span><span style="color:#6272A4;">// 输出: 5</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">int</span><span style="color:#F8F8F2;">[] numbers </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> { </span><span style="color:#BD93F9;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">3</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">4</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">5</span><span style="color:#F8F8F2;"> };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">// 使用 for 循环</span></span>
<span class="line"><span style="color:#FF79C6;">for</span><span style="color:#F8F8F2;"> (</span><span style="color:#FF79C6;">int</span><span style="color:#F8F8F2;"> i </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> 0</span><span style="color:#F8F8F2;">; i </span><span style="color:#FF79C6;">&lt;</span><span style="color:#F8F8F2;"> numbers.Length; i</span><span style="color:#FF79C6;">++</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">{</span></span>
<span class="line"><span style="color:#F8F8F2;">    Console.</span><span style="color:#50FA7B;">WriteLine</span><span style="color:#F8F8F2;">(numbers[i]);</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">// 使用 foreach 循环</span></span>
<span class="line"><span style="color:#FF79C6;">foreach</span><span style="color:#F8F8F2;"> (</span><span style="color:#FF79C6;">int</span><span style="color:#F8F8F2;"> number </span><span style="color:#FF79C6;">in</span><span style="color:#F8F8F2;"> numbers)</span></span>
<span class="line"><span style="color:#F8F8F2;">{</span></span>
<span class="line"><span style="color:#F8F8F2;">    Console.</span><span style="color:#50FA7B;">WriteLine</span><span style="color:#F8F8F2;">(number);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="矩形数组" tabindex="-1"><a class="header-anchor" href="#矩形数组"><span>矩形数组</span></a></h3><p>矩形数组（Rectangular Array）是一种二维数组，其中每一行都具有相同的列数。</p><div class="language-cs line-numbers-mode" data-highlighter="shiki" data-ext="cs" data-title="cs" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#6272A4;">// 定义一个3行4列的矩形数组</span></span>
<span class="line"><span style="color:#FF79C6;">int</span><span style="color:#F8F8F2;">[,] matrix </span><span style="color:#FF79C6;">=</span><span style="color:#FF79C6;"> new</span><span style="color:#FF79C6;"> int</span><span style="color:#F8F8F2;">[</span><span style="color:#BD93F9;">3</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">4</span><span style="color:#F8F8F2;">];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">// 初始化一个3行4列的矩形数组</span></span>
<span class="line"><span style="color:#FF79C6;">int</span><span style="color:#F8F8F2;">[,] matrix </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">    { </span><span style="color:#BD93F9;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">3</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">4</span><span style="color:#F8F8F2;"> },</span></span>
<span class="line"><span style="color:#F8F8F2;">    { </span><span style="color:#BD93F9;">5</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">6</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">7</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">8</span><span style="color:#F8F8F2;"> },</span></span>
<span class="line"><span style="color:#F8F8F2;">    { </span><span style="color:#BD93F9;">9</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">10</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">11</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">12</span><span style="color:#F8F8F2;"> }</span></span>
<span class="line"><span style="color:#F8F8F2;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">// 访问元素</span></span>
<span class="line"><span style="color:#F8F8F2;">Console.</span><span style="color:#50FA7B;">WriteLine</span><span style="color:#F8F8F2;">(matrix[</span><span style="color:#BD93F9;">0</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">0</span><span style="color:#F8F8F2;">]); </span><span style="color:#6272A4;">// 输出: 1</span></span>
<span class="line"><span style="color:#F8F8F2;">Console.</span><span style="color:#50FA7B;">WriteLine</span><span style="color:#F8F8F2;">(matrix[</span><span style="color:#BD93F9;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">3</span><span style="color:#F8F8F2;">]); </span><span style="color:#6272A4;">// 输出: 12</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">// 使用嵌套 for 循环</span></span>
<span class="line"><span style="color:#FF79C6;">for</span><span style="color:#F8F8F2;"> (</span><span style="color:#FF79C6;">int</span><span style="color:#F8F8F2;"> i </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> 0</span><span style="color:#F8F8F2;">; i </span><span style="color:#FF79C6;">&lt;</span><span style="color:#F8F8F2;"> matrix.</span><span style="color:#50FA7B;">GetLength</span><span style="color:#F8F8F2;">(</span><span style="color:#BD93F9;">0</span><span style="color:#F8F8F2;">); i</span><span style="color:#FF79C6;">++</span><span style="color:#F8F8F2;">) </span><span style="color:#6272A4;">// 行数</span></span>
<span class="line"><span style="color:#F8F8F2;">{</span></span>
<span class="line"><span style="color:#FF79C6;">    for</span><span style="color:#F8F8F2;"> (</span><span style="color:#FF79C6;">int</span><span style="color:#F8F8F2;"> j </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> 0</span><span style="color:#F8F8F2;">; j </span><span style="color:#FF79C6;">&lt;</span><span style="color:#F8F8F2;"> matrix.</span><span style="color:#50FA7B;">GetLength</span><span style="color:#F8F8F2;">(</span><span style="color:#BD93F9;">1</span><span style="color:#F8F8F2;">); j</span><span style="color:#FF79C6;">++</span><span style="color:#F8F8F2;">) </span><span style="color:#6272A4;">// 列数</span></span>
<span class="line"><span style="color:#F8F8F2;">    {</span></span>
<span class="line"><span style="color:#F8F8F2;">        Console.</span><span style="color:#50FA7B;">Write</span><span style="color:#F8F8F2;">(matrix[i, j] </span><span style="color:#FF79C6;">+</span><span style="color:#E9F284;"> &quot;</span><span style="color:#E9F284;"> &quot;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">    Console.</span><span style="color:#50FA7B;">WriteLine</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="交错数组" tabindex="-1"><a class="header-anchor" href="#交错数组"><span>交错数组</span></a></h3><p>交错数组（Jagged Array）是一种数组的数组，即一个数组的元素是另一个数组。</p><h2 id="类" tabindex="-1"><a class="header-anchor" href="#类"><span>类</span></a></h2><p>类是C#中的一种基本数据类型，它是一种用户自定义的数据类型，可以包含字段、属性、方法、事件等成员。类可以继承自其他类，也可以实现接口。例如：</p><div class="language-cs line-numbers-mode" data-highlighter="shiki" data-ext="cs" data-title="cs" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">class</span><span style="color:#8BE9FD;"> Program</span></span>
<span class="line"><span style="color:#F8F8F2;">{</span></span>
<span class="line"><span style="color:#FF79C6;">    private</span><span style="color:#FF79C6;"> int</span><span style="color:#F8F8F2;"> age; </span><span style="color:#6272A4;">// 字段</span></span>
<span class="line"><span style="color:#FF79C6;">    public</span><span style="color:#FF79C6;"> int</span><span style="color:#F8F8F2;"> Age { </span><span style="color:#FF79C6;">get</span><span style="color:#F8F8F2;">; </span><span style="color:#FF79C6;">set</span><span style="color:#F8F8F2;">; }; </span><span style="color:#6272A4;">// 属性</span></span>
<span class="line"><span style="color:#FF79C6;">    public</span><span style="color:#50FA7B;"> Program</span><span style="color:#F8F8F2;"> (age) </span><span style="color:#6272A4;">// 构造函数</span></span>
<span class="line"><span style="color:#F8F8F2;">    {</span></span>
<span class="line"><span style="color:#BD93F9;font-style:italic;">      this</span><span style="color:#F8F8F2;">.age </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> age;</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span></span>
<span class="line"><span style="color:#FF79C6;">    public</span><span style="color:#FF79C6;"> int</span><span style="color:#50FA7B;"> Next</span><span style="color:#F8F8F2;">() </span><span style="color:#6272A4;">// 方法</span></span>
<span class="line"><span style="color:#F8F8F2;">    {  </span></span>
<span class="line"><span style="color:#FF79C6;">      return</span><span style="color:#F8F8F2;"> age </span><span style="color:#FF79C6;">+</span><span style="color:#BD93F9;"> 1</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;"> }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="成员" tabindex="-1"><a class="header-anchor" href="#成员"><span>成员</span></a></h3><div class="language-cs line-numbers-mode" data-highlighter="shiki" data-ext="cs" data-title="cs" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">using</span><span style="color:#8BE9FD;font-style:italic;"> System</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">// 1. 定义一个名为 SampleClass 的类</span></span>
<span class="line"><span style="color:#FF79C6;">public</span><span style="color:#FF79C6;"> class</span><span style="color:#8BE9FD;"> SampleClass</span></span>
<span class="line"><span style="color:#F8F8F2;">{</span></span>
<span class="line"><span style="color:#6272A4;">    // 常量 (Constant): 与类关联的常量值</span></span>
<span class="line"><span style="color:#FF79C6;">    public</span><span style="color:#FF79C6;"> const</span><span style="color:#FF79C6;"> double</span><span style="color:#F8F8F2;"> PI </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> 3.14159</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">    // 字段 (Field): 类的变量</span></span>
<span class="line"><span style="color:#FF79C6;">    private</span><span style="color:#FF79C6;"> string</span><span style="color:#F8F8F2;"> name;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">    // 属性 (Property): 与读取和写入类的已命名属性相关联的操作</span></span>
<span class="line"><span style="color:#FF79C6;">    public</span><span style="color:#FF79C6;"> string</span><span style="color:#F8F8F2;"> Name</span></span>
<span class="line"><span style="color:#F8F8F2;">    {</span></span>
<span class="line"><span style="color:#FF79C6;">        get</span><span style="color:#F8F8F2;"> { </span><span style="color:#FF79C6;">return</span><span style="color:#F8F8F2;"> name; }</span></span>
<span class="line"><span style="color:#FF79C6;">        set</span><span style="color:#F8F8F2;"> { name </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> value; }</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">    // 索引器 (Indexer): 与将类实例编入索引相关联的操作</span></span>
<span class="line"><span style="color:#FF79C6;">    private</span><span style="color:#FF79C6;"> string</span><span style="color:#F8F8F2;">[] elements </span><span style="color:#FF79C6;">=</span><span style="color:#FF79C6;"> new</span><span style="color:#FF79C6;"> string</span><span style="color:#F8F8F2;">[</span><span style="color:#BD93F9;">10</span><span style="color:#F8F8F2;">];</span></span>
<span class="line"><span style="color:#FF79C6;">    public</span><span style="color:#FF79C6;"> string</span><span style="color:#BD93F9;font-style:italic;"> this</span><span style="color:#F8F8F2;">[</span><span style="color:#FF79C6;">int</span><span style="color:#FFB86C;font-style:italic;"> index</span><span style="color:#F8F8F2;">]</span></span>
<span class="line"><span style="color:#F8F8F2;">    {</span></span>
<span class="line"><span style="color:#FF79C6;">        get</span><span style="color:#F8F8F2;"> { </span><span style="color:#FF79C6;">return</span><span style="color:#F8F8F2;"> elements[index]; }</span></span>
<span class="line"><span style="color:#FF79C6;">        set</span><span style="color:#F8F8F2;"> { elements[index] </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> value; }</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">    // 事件 (Event): 类可以生成的通知</span></span>
<span class="line"><span style="color:#FF79C6;">    public</span><span style="color:#FF79C6;"> event</span><span style="color:#8BE9FD;font-style:italic;"> EventHandler</span><span style="color:#F8F8F2;"> NameChanged;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">    // 运算符重载 (Operator Overloading): 类支持的运算符</span></span>
<span class="line"><span style="color:#FF79C6;">    public</span><span style="color:#FF79C6;"> static</span><span style="color:#8BE9FD;font-style:italic;"> SampleClass</span><span style="color:#FF79C6;"> operator</span><span style="color:#50FA7B;"> +</span><span style="color:#F8F8F2;">(</span><span style="color:#8BE9FD;font-style:italic;">SampleClass</span><span style="color:#FFB86C;font-style:italic;"> a</span><span style="color:#F8F8F2;">, </span><span style="color:#8BE9FD;font-style:italic;">SampleClass</span><span style="color:#FFB86C;font-style:italic;"> b</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">    {</span></span>
<span class="line"><span style="color:#FF79C6;">        return</span><span style="color:#FF79C6;"> new</span><span style="color:#8BE9FD;font-style:italic;"> SampleClass</span><span style="color:#F8F8F2;"> { Name </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> a.Name </span><span style="color:#FF79C6;">+</span><span style="color:#E9F284;"> &quot;</span><span style="color:#E9F284;"> &quot;</span><span style="color:#FF79C6;"> +</span><span style="color:#F8F8F2;"> b.Name };</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">    // 构造函数 (Constructor): 初始化实例或类本身所需的操作</span></span>
<span class="line"><span style="color:#FF79C6;">    public</span><span style="color:#50FA7B;"> SampleClass</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"><span style="color:#F8F8F2;">    {</span></span>
<span class="line"><span style="color:#F8F8F2;">        name </span><span style="color:#FF79C6;">=</span><span style="color:#E9F284;"> &quot;</span><span style="color:#F1FA8C;">Default Name</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">        Console.</span><span style="color:#50FA7B;">WriteLine</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">SampleClass Constructor called</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">    // 方法 (Method): 类可以执行的计算和操作</span></span>
<span class="line"><span style="color:#FF79C6;">    public</span><span style="color:#FF79C6;"> void</span><span style="color:#50FA7B;"> DisplayInfo</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"><span style="color:#F8F8F2;">    {</span></span>
<span class="line"><span style="color:#F8F8F2;">        Console.</span><span style="color:#50FA7B;">WriteLine</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">$&quot;</span><span style="color:#F1FA8C;">Name: </span><span style="color:#FF79C6;">{</span><span style="color:#F8F8F2;">Name</span><span style="color:#FF79C6;">}</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">    // 构造函数重载 (Constructor Overloading)</span></span>
<span class="line"><span style="color:#FF79C6;">    public</span><span style="color:#50FA7B;"> SampleClass</span><span style="color:#F8F8F2;">(</span><span style="color:#FF79C6;">string</span><span style="color:#FFB86C;font-style:italic;"> initialName</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">    {</span></span>
<span class="line"><span style="color:#F8F8F2;">        name </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> initialName;</span></span>
<span class="line"><span style="color:#F8F8F2;">        Console.</span><span style="color:#50FA7B;">WriteLine</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">$&quot;</span><span style="color:#F1FA8C;">SampleClass Constructor with parameter called, Name set to </span><span style="color:#FF79C6;">{</span><span style="color:#F8F8F2;">initialName</span><span style="color:#FF79C6;">}</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">    // 终结器 (Destructor): 永久放弃类实例前要执行的操作</span></span>
<span class="line"><span style="color:#F8F8F2;">    ~</span><span style="color:#50FA7B;">SampleClass</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"><span style="color:#F8F8F2;">    {</span></span>
<span class="line"><span style="color:#F8F8F2;">        Console.</span><span style="color:#50FA7B;">WriteLine</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">SampleClass Destructor called</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">    // 嵌套类型 (Nested Type): 类声明的嵌套类型</span></span>
<span class="line"><span style="color:#FF79C6;">    public</span><span style="color:#FF79C6;"> class</span><span style="color:#8BE9FD;"> NestedClass</span></span>
<span class="line"><span style="color:#F8F8F2;">    {</span></span>
<span class="line"><span style="color:#FF79C6;">        public</span><span style="color:#FF79C6;"> void</span><span style="color:#50FA7B;"> NestedMethod</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"><span style="color:#F8F8F2;">        {</span></span>
<span class="line"><span style="color:#F8F8F2;">            Console.</span><span style="color:#50FA7B;">WriteLine</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">Method inside NestedClass</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">        }</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">    // 引发事件的方法</span></span>
<span class="line"><span style="color:#FF79C6;">    protected</span><span style="color:#FF79C6;"> virtual</span><span style="color:#FF79C6;"> void</span><span style="color:#50FA7B;"> OnNameChanged</span><span style="color:#F8F8F2;">(</span><span style="color:#8BE9FD;font-style:italic;">EventArgs</span><span style="color:#FFB86C;font-style:italic;"> e</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">    {</span></span>
<span class="line"><span style="color:#F8F8F2;">        NameChanged</span><span style="color:#FF79C6;">?</span><span style="color:#F8F8F2;">.</span><span style="color:#50FA7B;">Invoke</span><span style="color:#F8F8F2;">(</span><span style="color:#BD93F9;font-style:italic;">this</span><span style="color:#F8F8F2;">, e);</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">    // 示例方法来更改名称并引发事件</span></span>
<span class="line"><span style="color:#FF79C6;">    public</span><span style="color:#FF79C6;"> void</span><span style="color:#50FA7B;"> ChangeName</span><span style="color:#F8F8F2;">(</span><span style="color:#FF79C6;">string</span><span style="color:#FFB86C;font-style:italic;"> newName</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">    {</span></span>
<span class="line"><span style="color:#FF79C6;">        if</span><span style="color:#F8F8F2;"> (name </span><span style="color:#FF79C6;">!=</span><span style="color:#F8F8F2;"> newName)</span></span>
<span class="line"><span style="color:#F8F8F2;">        {</span></span>
<span class="line"><span style="color:#F8F8F2;">            name </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> newName;</span></span>
<span class="line"><span style="color:#50FA7B;">            OnNameChanged</span><span style="color:#F8F8F2;">(EventArgs.Empty);</span></span>
<span class="line"><span style="color:#F8F8F2;">        }</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">class</span><span style="color:#8BE9FD;"> Program</span></span>
<span class="line"><span style="color:#F8F8F2;">{</span></span>
<span class="line"><span style="color:#FF79C6;">    static</span><span style="color:#FF79C6;"> void</span><span style="color:#50FA7B;"> Main</span><span style="color:#F8F8F2;">(</span><span style="color:#FF79C6;">string</span><span style="color:#F8F8F2;">[] </span><span style="color:#FFB86C;font-style:italic;">args</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">    {</span></span>
<span class="line"><span style="color:#6272A4;">        // 使用构造函数创建类的实例</span></span>
<span class="line"><span style="color:#8BE9FD;font-style:italic;">        SampleClass</span><span style="color:#F8F8F2;"> instance1 </span><span style="color:#FF79C6;">=</span><span style="color:#FF79C6;"> new</span><span style="color:#8BE9FD;font-style:italic;"> SampleClass</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#8BE9FD;font-style:italic;">        SampleClass</span><span style="color:#F8F8F2;"> instance2 </span><span style="color:#FF79C6;">=</span><span style="color:#FF79C6;"> new</span><span style="color:#8BE9FD;font-style:italic;"> SampleClass</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">Instance 2</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">        // 设置属性</span></span>
<span class="line"><span style="color:#F8F8F2;">        instance1.Name </span><span style="color:#FF79C6;">=</span><span style="color:#E9F284;"> &quot;</span><span style="color:#F1FA8C;">New Name</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">        Console.</span><span style="color:#50FA7B;">WriteLine</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">$&quot;</span><span style="color:#F1FA8C;">Instance1 Name: </span><span style="color:#FF79C6;">{</span><span style="color:#F8F8F2;">instance1</span><span style="color:#F1FA8C;">.</span><span style="color:#F8F8F2;">Name</span><span style="color:#FF79C6;">}</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">        // 使用方法</span></span>
<span class="line"><span style="color:#F8F8F2;">        instance1.</span><span style="color:#50FA7B;">DisplayInfo</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#F8F8F2;">        instance2.</span><span style="color:#50FA7B;">DisplayInfo</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">        // 使用索引器</span></span>
<span class="line"><span style="color:#F8F8F2;">        instance1[</span><span style="color:#BD93F9;">0</span><span style="color:#F8F8F2;">] </span><span style="color:#FF79C6;">=</span><span style="color:#E9F284;"> &quot;</span><span style="color:#F1FA8C;">Element 0</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">        Console.</span><span style="color:#50FA7B;">WriteLine</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">$&quot;</span><span style="color:#F1FA8C;">Index 0 of instance1: </span><span style="color:#FF79C6;">{</span><span style="color:#F8F8F2;">instance1</span><span style="color:#F1FA8C;">[</span><span style="color:#BD93F9;">0</span><span style="color:#F1FA8C;">]</span><span style="color:#FF79C6;">}</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">        // 事件处理</span></span>
<span class="line"><span style="color:#F8F8F2;">        instance1.NameChanged </span><span style="color:#FF79C6;">+=</span><span style="color:#F8F8F2;"> (</span><span style="color:#FFB86C;font-style:italic;">sender</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">e</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> Console.</span><span style="color:#50FA7B;">WriteLine</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">Name has changed.</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">        instance1.</span><span style="color:#50FA7B;">ChangeName</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">Another Name</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">        // 使用嵌套类</span></span>
<span class="line"><span style="color:#8BE9FD;font-style:italic;">        SampleClass</span><span style="color:#F8F8F2;">.</span><span style="color:#8BE9FD;font-style:italic;">NestedClass</span><span style="color:#F8F8F2;"> nestedInstance </span><span style="color:#FF79C6;">=</span><span style="color:#FF79C6;"> new</span><span style="color:#8BE9FD;font-style:italic;"> SampleClass</span><span style="color:#F8F8F2;">.</span><span style="color:#8BE9FD;font-style:italic;">NestedClass</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#F8F8F2;">        nestedInstance.</span><span style="color:#50FA7B;">NestedMethod</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">        // 运算符重载的使用</span></span>
<span class="line"><span style="color:#8BE9FD;font-style:italic;">        SampleClass</span><span style="color:#F8F8F2;"> combinedInstance </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> instance1 </span><span style="color:#FF79C6;">+</span><span style="color:#F8F8F2;"> instance2;</span></span>
<span class="line"><span style="color:#F8F8F2;">        combinedInstance.</span><span style="color:#50FA7B;">DisplayInfo</span><span style="color:#F8F8F2;">();        </span><span style="color:#6272A4;">// 程序结束时终结器被调用</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="字段" tabindex="-1"><a class="header-anchor" href="#字段"><span>字段</span></a></h4><p>在C#中，字段（field）是类或结构中的变量，用于存储数据。字段可以是公开的、私有的、保护的或内部的，具体取决于它们的访问修饰符。</p><div class="language-cs line-numbers-mode" data-highlighter="shiki" data-ext="cs" data-title="cs" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">public</span><span style="color:#FF79C6;"> class</span><span style="color:#8BE9FD;"> Person</span></span>
<span class="line"><span style="color:#F8F8F2;">{</span></span>
<span class="line"><span style="color:#6272A4;">    // 字段</span></span>
<span class="line"><span style="color:#FF79C6;">    private</span><span style="color:#FF79C6;"> string</span><span style="color:#F8F8F2;"> name;</span></span>
<span class="line"><span style="color:#FF79C6;">    private</span><span style="color:#FF79C6;"> int</span><span style="color:#F8F8F2;"> age;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">    // 公共字段</span></span>
<span class="line"><span style="color:#FF79C6;">    public</span><span style="color:#FF79C6;"> string</span><span style="color:#F8F8F2;"> Address;</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li>字段通常在类或结构的主体内声明。可以为字段指定数据类型和访问修饰符。</li><li>字段可以在声明时初始化，也可以在构造函数中进行初始化。</li><li>字段也可以声明为静态字段，属于类而不是类的实例。</li><li>访问修饰符决定了字段的可访问性，包括public、private、protected和internal。</li><li>字段通常用于存储对象的状态，但过多的公共字段可能会导致封装破坏。通常推荐使用属性（properties）来访问字段。</li></ol><p><strong>修饰符</strong></p><ul><li>public：可以在任何地方访问。</li><li>private：只能在声明它的类或结构内部访问。</li><li>protected：可以在声明它的类或结构及其派生类中访问。</li><li>internal：可以在同一程序集内访问。</li></ul><div class="language-cs line-numbers-mode" data-highlighter="shiki" data-ext="cs" data-title="cs" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">public</span><span style="color:#FF79C6;"> class</span><span style="color:#8BE9FD;"> Example</span></span>
<span class="line"><span style="color:#F8F8F2;">{</span></span>
<span class="line"><span style="color:#FF79C6;">    public</span><span style="color:#FF79C6;"> int</span><span style="color:#F8F8F2;"> PublicValue;           </span><span style="color:#6272A4;">// 公开成员</span></span>
<span class="line"><span style="color:#FF79C6;">    private</span><span style="color:#FF79C6;"> int</span><span style="color:#F8F8F2;"> PrivateValue;         </span><span style="color:#6272A4;">// 私有成员</span></span>
<span class="line"><span style="color:#FF79C6;">    protected</span><span style="color:#FF79C6;"> int</span><span style="color:#F8F8F2;"> ProtectedValue;     </span><span style="color:#6272A4;">// 受保护成员</span></span>
<span class="line"><span style="color:#FF79C6;">    internal</span><span style="color:#FF79C6;"> int</span><span style="color:#F8F8F2;"> InternalValue;       </span><span style="color:#6272A4;">// 内部成员</span></span>
<span class="line"><span style="color:#FF79C6;">    protected</span><span style="color:#FF79C6;"> internal</span><span style="color:#FF79C6;"> int</span><span style="color:#F8F8F2;"> ProtectedInternalValue; </span><span style="color:#6272A4;">// 受保护的内部成员</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="属性" tabindex="-1"><a class="header-anchor" href="#属性"><span>属性</span></a></h4><div class="language-cs line-numbers-mode" data-highlighter="shiki" data-ext="cs" data-title="cs" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">public</span><span style="color:#FF79C6;"> class</span><span style="color:#8BE9FD;"> Person</span></span>
<span class="line"><span style="color:#F8F8F2;">{</span></span>
<span class="line"><span style="color:#FF79C6;">    private</span><span style="color:#FF79C6;"> string</span><span style="color:#F8F8F2;"> name;  </span><span style="color:#6272A4;">// 私有字段</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">    // 属性</span></span>
<span class="line"><span style="color:#FF79C6;">    public</span><span style="color:#FF79C6;"> string</span><span style="color:#F8F8F2;"> Name</span></span>
<span class="line"><span style="color:#F8F8F2;">    {</span></span>
<span class="line"><span style="color:#FF79C6;">        get</span><span style="color:#F8F8F2;"> { </span><span style="color:#FF79C6;">return</span><span style="color:#F8F8F2;"> name; }  </span><span style="color:#6272A4;">// 读取 name 字段</span></span>
<span class="line"><span style="color:#FF79C6;">        set</span><span style="color:#F8F8F2;"> { name </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> value; } </span><span style="color:#6272A4;">// 修改 name 字段</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#6272A4;">    // 带有验证的属性示例</span></span>
<span class="line"><span style="color:#FF79C6;">    private</span><span style="color:#FF79C6;"> int</span><span style="color:#F8F8F2;"> score;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">    public</span><span style="color:#FF79C6;"> int</span><span style="color:#F8F8F2;"> Score</span></span>
<span class="line"><span style="color:#F8F8F2;">    {</span></span>
<span class="line"><span style="color:#FF79C6;">        get</span><span style="color:#F8F8F2;"> { </span><span style="color:#FF79C6;">return</span><span style="color:#F8F8F2;"> score; }</span></span>
<span class="line"><span style="color:#FF79C6;">        set</span></span>
<span class="line"><span style="color:#F8F8F2;">        {</span></span>
<span class="line"><span style="color:#FF79C6;">            if</span><span style="color:#F8F8F2;"> (value </span><span style="color:#FF79C6;">&lt;</span><span style="color:#BD93F9;"> 0</span><span style="color:#FF79C6;"> ||</span><span style="color:#F8F8F2;"> value </span><span style="color:#FF79C6;">&gt;</span><span style="color:#BD93F9;"> 100</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#FF79C6;">                throw</span><span style="color:#FF79C6;"> new</span><span style="color:#8BE9FD;font-style:italic;"> ArgumentOutOfRangeException</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">Score must be between 0 and 100.</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">            score </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> value;</span></span>
<span class="line"><span style="color:#F8F8F2;">        }</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">    // 自动属性</span></span>
<span class="line"><span style="color:#FF79C6;">    public</span><span style="color:#FF79C6;"> string</span><span style="color:#F8F8F2;"> Model { </span><span style="color:#FF79C6;">get</span><span style="color:#F8F8F2;">; </span><span style="color:#FF79C6;">set</span><span style="color:#F8F8F2;">; }</span></span>
<span class="line"><span style="color:#FF79C6;">    public</span><span style="color:#FF79C6;"> int</span><span style="color:#F8F8F2;"> Year { </span><span style="color:#FF79C6;">get</span><span style="color:#F8F8F2;">; </span><span style="color:#FF79C6;">set</span><span style="color:#F8F8F2;">; }</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">    public</span><span style="color:#FF79C6;"> double</span><span style="color:#F8F8F2;"> Radius</span></span>
<span class="line"><span style="color:#F8F8F2;">    {</span></span>
<span class="line"><span style="color:#FF79C6;">        get</span><span style="color:#F8F8F2;"> { </span><span style="color:#FF79C6;">return</span><span style="color:#F8F8F2;"> radius; } </span><span style="color:#6272A4;">// 只读属性</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">    public</span><span style="color:#FF79C6;"> double</span><span style="color:#F8F8F2;"> Area</span></span>
<span class="line"><span style="color:#F8F8F2;">    {</span></span>
<span class="line"><span style="color:#FF79C6;">        get</span><span style="color:#F8F8F2;"> { </span><span style="color:#FF79C6;">return</span><span style="color:#F8F8F2;"> Math.PI </span><span style="color:#FF79C6;">*</span><span style="color:#F8F8F2;"> radius </span><span style="color:#FF79C6;">*</span><span style="color:#F8F8F2;"> radius; } </span><span style="color:#6272A4;">// 计算面积</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">// 使用属性</span></span>
<span class="line"><span style="color:#8BE9FD;font-style:italic;">Person</span><span style="color:#F8F8F2;"> person </span><span style="color:#FF79C6;">=</span><span style="color:#FF79C6;"> new</span><span style="color:#8BE9FD;font-style:italic;"> Person</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#F8F8F2;">person.Name </span><span style="color:#FF79C6;">=</span><span style="color:#E9F284;"> &quot;</span><span style="color:#F1FA8C;">Alice</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">;  </span><span style="color:#6272A4;">// 调用 set 访问器</span></span>
<span class="line"><span style="color:#F8F8F2;">Console.</span><span style="color:#50FA7B;">WriteLine</span><span style="color:#F8F8F2;">(person.Name);  </span><span style="color:#6272A4;">// 调用 get 访问器，输出: Alice</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="索引器" tabindex="-1"><a class="header-anchor" href="#索引器"><span>索引器</span></a></h4><p>索引器让你能够通过索引（类似数组的方式）来访问类的内部数据。</p><div class="language-cs line-numbers-mode" data-highlighter="shiki" data-ext="cs" data-title="cs" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">public</span><span style="color:#FF79C6;"> class</span><span style="color:#8BE9FD;"> StringCollection</span></span>
<span class="line"><span style="color:#F8F8F2;">{</span></span>
<span class="line"><span style="color:#FF79C6;">    private</span><span style="color:#8BE9FD;font-style:italic;"> List</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#FF79C6;">string</span><span style="color:#F8F8F2;">&gt; _strings </span><span style="color:#FF79C6;">=</span><span style="color:#FF79C6;"> new</span><span style="color:#8BE9FD;font-style:italic;"> List</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#FF79C6;">string</span><span style="color:#F8F8F2;">&gt;();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">    // 定义索引器</span></span>
<span class="line"><span style="color:#FF79C6;">    public</span><span style="color:#FF79C6;"> string</span><span style="color:#BD93F9;font-style:italic;"> this</span><span style="color:#F8F8F2;">[</span><span style="color:#FF79C6;">int</span><span style="color:#FFB86C;font-style:italic;"> index</span><span style="color:#F8F8F2;">]</span></span>
<span class="line"><span style="color:#F8F8F2;">    {</span></span>
<span class="line"><span style="color:#FF79C6;">        get</span></span>
<span class="line"><span style="color:#F8F8F2;">        {</span></span>
<span class="line"><span style="color:#FF79C6;">            return</span><span style="color:#F8F8F2;"> _strings[index];  </span><span style="color:#6272A4;">// 返回指定索引的值</span></span>
<span class="line"><span style="color:#F8F8F2;">        }</span></span>
<span class="line"><span style="color:#FF79C6;">        set</span></span>
<span class="line"><span style="color:#F8F8F2;">        {</span></span>
<span class="line"><span style="color:#F8F8F2;">            _strings[index] </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> value;  </span><span style="color:#6272A4;">// 设置指定索引的值</span></span>
<span class="line"><span style="color:#F8F8F2;">        }</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">    public</span><span style="color:#FF79C6;"> void</span><span style="color:#50FA7B;"> Add</span><span style="color:#F8F8F2;">(</span><span style="color:#FF79C6;">string</span><span style="color:#FFB86C;font-style:italic;"> value</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">    {</span></span>
<span class="line"><span style="color:#F8F8F2;">        _strings.</span><span style="color:#50FA7B;">Add</span><span style="color:#F8F8F2;">(value); </span><span style="color:#6272A4;">// 向集合中添加一个字符串</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">    public</span><span style="color:#FF79C6;"> int</span><span style="color:#F8F8F2;"> Count </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> _strings.Count; </span><span style="color:#6272A4;">// 返回集合中元素的数量</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">var</span><span style="color:#F8F8F2;"> collection </span><span style="color:#FF79C6;">=</span><span style="color:#FF79C6;"> new</span><span style="color:#8BE9FD;font-style:italic;"> StringCollection</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#F8F8F2;">collection.</span><span style="color:#50FA7B;">Add</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">Hello</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">collection.</span><span style="color:#50FA7B;">Add</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">World</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">// 使用索引器访问元素</span></span>
<span class="line"><span style="color:#F8F8F2;">Console.</span><span style="color:#50FA7B;">WriteLine</span><span style="color:#F8F8F2;">(collection[</span><span style="color:#BD93F9;">0</span><span style="color:#F8F8F2;">]); </span><span style="color:#6272A4;">// 输出: Hello</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">// 使用索引器设置元素</span></span>
<span class="line"><span style="color:#F8F8F2;">collection[</span><span style="color:#BD93F9;">1</span><span style="color:#F8F8F2;">] </span><span style="color:#FF79C6;">=</span><span style="color:#E9F284;"> &quot;</span><span style="color:#F1FA8C;">C#</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">; </span></span>
<span class="line"><span style="color:#F8F8F2;">Console.</span><span style="color:#50FA7B;">WriteLine</span><span style="color:#F8F8F2;">(collection[</span><span style="color:#BD93F9;">1</span><span style="color:#F8F8F2;">]); </span><span style="color:#6272A4;">// 输出: C#</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="静态成员" tabindex="-1"><a class="header-anchor" href="#静态成员"><span>静态成员</span></a></h4><p>静态成员是属于类本身的，而不是类的实例。这意味着你可以不创建类的实例就可以访问静态成员。</p><ol><li>共享：静态成员在所有实例之间共享。</li><li>无需实例化：可以直接通过类名访问静态成员。</li><li>生命周期：静态成员的生命周期从类加载开始，直到程序结束。</li></ol><div class="language-cs line-numbers-mode" data-highlighter="shiki" data-ext="cs" data-title="cs" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">public</span><span style="color:#FF79C6;"> class</span><span style="color:#8BE9FD;"> MathHelper</span></span>
<span class="line"><span style="color:#F8F8F2;">{</span></span>
<span class="line"><span style="color:#6272A4;">    // 静态字段</span></span>
<span class="line"><span style="color:#FF79C6;">    public</span><span style="color:#FF79C6;"> static</span><span style="color:#FF79C6;"> double</span><span style="color:#F8F8F2;"> Pi </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> 3.14159</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">    // 静态方法</span></span>
<span class="line"><span style="color:#FF79C6;">    public</span><span style="color:#FF79C6;"> static</span><span style="color:#FF79C6;"> double</span><span style="color:#50FA7B;"> CalculateArea</span><span style="color:#F8F8F2;">(</span><span style="color:#FF79C6;">double</span><span style="color:#FFB86C;font-style:italic;"> radius</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">    {</span></span>
<span class="line"><span style="color:#FF79C6;">        return</span><span style="color:#F8F8F2;"> Pi </span><span style="color:#FF79C6;">*</span><span style="color:#F8F8F2;"> radius </span><span style="color:#FF79C6;">*</span><span style="color:#F8F8F2;"> radius;</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">// 使用静态成员</span></span>
<span class="line"><span style="color:#FF79C6;">double</span><span style="color:#F8F8F2;"> area </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> MathHelper.</span><span style="color:#50FA7B;">CalculateArea</span><span style="color:#F8F8F2;">(</span><span style="color:#BD93F9;">5.0</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">Console.</span><span style="color:#50FA7B;">WriteLine</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">Area: </span><span style="color:#E9F284;">&quot;</span><span style="color:#FF79C6;"> +</span><span style="color:#F8F8F2;"> area);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="构造函数-1" tabindex="-1"><a class="header-anchor" href="#构造函数-1"><span>构造函数</span></a></h4><div class="language-cs line-numbers-mode" data-highlighter="shiki" data-ext="cs" data-title="cs" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">using</span><span style="color:#8BE9FD;font-style:italic;"> System</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#FF79C6;">namespace</span><span style="color:#8BE9FD;font-style:italic;"> LineApplication</span></span>
<span class="line"><span style="color:#F8F8F2;">{</span></span>
<span class="line"><span style="color:#FF79C6;">   class</span><span style="color:#8BE9FD;"> Line</span></span>
<span class="line"><span style="color:#F8F8F2;">   {</span></span>
<span class="line"><span style="color:#FF79C6;">      private</span><span style="color:#FF79C6;"> double</span><span style="color:#F8F8F2;"> length;   </span><span style="color:#6272A4;">// 线条的长度</span></span>
<span class="line"><span style="color:#FF79C6;">      public</span><span style="color:#50FA7B;"> Line</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"><span style="color:#F8F8F2;">      {</span></span>
<span class="line"><span style="color:#F8F8F2;">         Console.</span><span style="color:#50FA7B;">WriteLine</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">对象已创建</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">      }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">      public</span><span style="color:#FF79C6;"> void</span><span style="color:#50FA7B;"> setLength</span><span style="color:#F8F8F2;">( </span><span style="color:#FF79C6;">double</span><span style="color:#FFB86C;font-style:italic;"> len</span><span style="color:#F8F8F2;"> )</span></span>
<span class="line"><span style="color:#F8F8F2;">      {</span></span>
<span class="line"><span style="color:#F8F8F2;">         length </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> len;</span></span>
<span class="line"><span style="color:#F8F8F2;">      }</span></span>
<span class="line"><span style="color:#FF79C6;">      public</span><span style="color:#FF79C6;"> double</span><span style="color:#50FA7B;"> getLength</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"><span style="color:#F8F8F2;">      {</span></span>
<span class="line"><span style="color:#FF79C6;">         return</span><span style="color:#F8F8F2;"> length;</span></span>
<span class="line"><span style="color:#F8F8F2;">      }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">      static</span><span style="color:#FF79C6;"> void</span><span style="color:#50FA7B;"> Main</span><span style="color:#F8F8F2;">(</span><span style="color:#FF79C6;">string</span><span style="color:#F8F8F2;">[] </span><span style="color:#FFB86C;font-style:italic;">args</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">      {</span></span>
<span class="line"><span style="color:#8BE9FD;font-style:italic;">         Line</span><span style="color:#F8F8F2;"> line </span><span style="color:#FF79C6;">=</span><span style="color:#FF79C6;"> new</span><span style="color:#8BE9FD;font-style:italic;"> Line</span><span style="color:#F8F8F2;">();    </span></span>
<span class="line"><span style="color:#6272A4;">         // 设置线条长度</span></span>
<span class="line"><span style="color:#F8F8F2;">         line.</span><span style="color:#50FA7B;">setLength</span><span style="color:#F8F8F2;">(</span><span style="color:#BD93F9;">6.0</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">         Console.</span><span style="color:#50FA7B;">WriteLine</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">线条的长度： {0}</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">, line.</span><span style="color:#50FA7B;">getLength</span><span style="color:#F8F8F2;">());</span></span>
<span class="line"><span style="color:#F8F8F2;">         Console.</span><span style="color:#50FA7B;">ReadKey</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#F8F8F2;">      }</span></span>
<span class="line"><span style="color:#F8F8F2;">   }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">// 输出：</span></span>
<span class="line"><span style="color:#6272A4;">// 对象已创建</span></span>
<span class="line"><span style="color:#6272A4;">// 线条的长度： 6</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="重载" tabindex="-1"><a class="header-anchor" href="#重载"><span>重载</span></a></h5><div class="language-cs line-numbers-mode" data-highlighter="shiki" data-ext="cs" data-title="cs" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">public</span><span style="color:#FF79C6;"> class</span><span style="color:#8BE9FD;"> Rectangle</span></span>
<span class="line"><span style="color:#F8F8F2;">{</span></span>
<span class="line"><span style="color:#FF79C6;">    public</span><span style="color:#FF79C6;"> double</span><span style="color:#F8F8F2;"> Width { </span><span style="color:#FF79C6;">get</span><span style="color:#F8F8F2;">; }</span></span>
<span class="line"><span style="color:#FF79C6;">    public</span><span style="color:#FF79C6;"> double</span><span style="color:#F8F8F2;"> Height { </span><span style="color:#FF79C6;">get</span><span style="color:#F8F8F2;">; }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">    // 默认构造函数</span></span>
<span class="line"><span style="color:#FF79C6;">    public</span><span style="color:#50FA7B;"> Rectangle</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"><span style="color:#F8F8F2;">    {</span></span>
<span class="line"><span style="color:#F8F8F2;">        Width </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> 1</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">        Height </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> 1</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">    // 带参数的构造函数</span></span>
<span class="line"><span style="color:#FF79C6;">    public</span><span style="color:#50FA7B;"> Rectangle</span><span style="color:#F8F8F2;">(</span><span style="color:#FF79C6;">double</span><span style="color:#FFB86C;font-style:italic;"> width</span><span style="color:#F8F8F2;">, </span><span style="color:#FF79C6;">double</span><span style="color:#FFB86C;font-style:italic;"> height</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">    {</span></span>
<span class="line"><span style="color:#F8F8F2;">        Width </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> width;</span></span>
<span class="line"><span style="color:#F8F8F2;">        Height </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> height;</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="继承" tabindex="-1"><a class="header-anchor" href="#继承"><span>继承</span></a></h3><p>使用 : 符号表示继承关系</p><ol><li>基类（Base Class）：被继承的类。</li><li>派生类（Derived Class）：从基类派生出来的类。</li><li>重写（Override）：在派生类中重新定义基类中已定义的方法。</li><li>隐藏（Hide）：在派生类中定义与基类同名的成员，但不使用重写。</li></ol><div class="language-cs line-numbers-mode" data-highlighter="shiki" data-ext="cs" data-title="cs" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#6272A4;">// 定义一个基类</span></span>
<span class="line"><span style="color:#FF79C6;">public</span><span style="color:#FF79C6;"> class</span><span style="color:#8BE9FD;"> Animal</span></span>
<span class="line"><span style="color:#F8F8F2;">{</span></span>
<span class="line"><span style="color:#FF79C6;">    public</span><span style="color:#FF79C6;"> void</span><span style="color:#50FA7B;"> Eat</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"><span style="color:#F8F8F2;">    {</span></span>
<span class="line"><span style="color:#F8F8F2;">        Console.</span><span style="color:#50FA7B;">WriteLine</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">Eating...</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">// 定义一个派生类</span></span>
<span class="line"><span style="color:#FF79C6;">public</span><span style="color:#FF79C6;"> class</span><span style="color:#8BE9FD;"> Dog</span><span style="color:#F8F8F2;"> : </span><span style="color:#8BE9FD;font-style:italic;">Animal</span></span>
<span class="line"><span style="color:#F8F8F2;">{</span></span>
<span class="line"><span style="color:#FF79C6;">    public</span><span style="color:#FF79C6;"> void</span><span style="color:#50FA7B;"> Bark</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"><span style="color:#F8F8F2;">    {</span></span>
<span class="line"><span style="color:#F8F8F2;">        Console.</span><span style="color:#50FA7B;">WriteLine</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">Barking...</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">class</span><span style="color:#8BE9FD;"> Program</span></span>
<span class="line"><span style="color:#F8F8F2;">{</span></span>
<span class="line"><span style="color:#FF79C6;">    static</span><span style="color:#FF79C6;"> void</span><span style="color:#50FA7B;"> Main</span><span style="color:#F8F8F2;">(</span><span style="color:#FF79C6;">string</span><span style="color:#F8F8F2;">[] </span><span style="color:#FFB86C;font-style:italic;">args</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">    {</span></span>
<span class="line"><span style="color:#8BE9FD;font-style:italic;">        Dog</span><span style="color:#F8F8F2;"> myDog </span><span style="color:#FF79C6;">=</span><span style="color:#FF79C6;"> new</span><span style="color:#8BE9FD;font-style:italic;"> Dog</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#F8F8F2;">        myDog.</span><span style="color:#50FA7B;">Eat</span><span style="color:#F8F8F2;">();  </span><span style="color:#6272A4;">// 输出: Eating...</span></span>
<span class="line"><span style="color:#F8F8F2;">        myDog.</span><span style="color:#50FA7B;">Bark</span><span style="color:#F8F8F2;">(); </span><span style="color:#6272A4;">// 输出: Barking...</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-cs line-numbers-mode" data-highlighter="shiki" data-ext="cs" data-title="cs" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">public</span><span style="color:#FF79C6;"> class</span><span style="color:#8BE9FD;"> Animal</span></span>
<span class="line"><span style="color:#F8F8F2;">{</span></span>
<span class="line"><span style="color:#FF79C6;">    public</span><span style="color:#FF79C6;"> virtual</span><span style="color:#FF79C6;"> void</span><span style="color:#50FA7B;"> MakeSound</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"><span style="color:#F8F8F2;">    {</span></span>
<span class="line"><span style="color:#F8F8F2;">        Console.</span><span style="color:#50FA7B;">WriteLine</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">Some generic animal sound</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#FF79C6;">    public</span><span style="color:#FF79C6;"> void</span><span style="color:#50FA7B;"> Speak</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"><span style="color:#F8F8F2;">    {</span></span>
<span class="line"><span style="color:#F8F8F2;">        Console.</span><span style="color:#50FA7B;">WriteLine</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">Animal makes a sound.</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">public</span><span style="color:#FF79C6;"> class</span><span style="color:#8BE9FD;"> Dog</span><span style="color:#F8F8F2;"> : </span><span style="color:#8BE9FD;font-style:italic;">Animal</span></span>
<span class="line"><span style="color:#F8F8F2;">{   </span></span>
<span class="line"><span style="color:#6272A4;">    // 方法屏蔽</span></span>
<span class="line"><span style="color:#FF79C6;">    public</span><span style="color:#FF79C6;"> new</span><span style="color:#FF79C6;"> void</span><span style="color:#50FA7B;"> Speak</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"><span style="color:#F8F8F2;">    {</span></span>
<span class="line"><span style="color:#F8F8F2;">        Console.</span><span style="color:#50FA7B;">WriteLine</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">Dog barks.</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#6272A4;">    // 当派生类重写基类的方法时，这个行为被称为覆盖。</span></span>
<span class="line"><span style="color:#6272A4;">    //覆盖的目的是提供基类方法的新实现。使用 virtual 和 override 关键字来实现。</span></span>
<span class="line"><span style="color:#FF79C6;">    public</span><span style="color:#FF79C6;"> override</span><span style="color:#FF79C6;"> void</span><span style="color:#50FA7B;"> MakeSound</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"><span style="color:#F8F8F2;">    {</span></span>
<span class="line"><span style="color:#F8F8F2;">        Console.</span><span style="color:#50FA7B;">WriteLine</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">Barking...</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="记录" tabindex="-1"><a class="header-anchor" href="#记录"><span>记录</span></a></h2><p>使用 record 关键字定义，与类类似，但它默认支持不可变性和值比较。</p><div class="language-cs line-numbers-mode" data-highlighter="shiki" data-ext="cs" data-title="cs" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">public</span><span style="color:#FF79C6;"> record</span><span style="color:#8BE9FD;"> Person</span><span style="color:#F8F8F2;">(</span><span style="color:#FF79C6;">string</span><span style="color:#FFB86C;font-style:italic;"> FirstName</span><span style="color:#F8F8F2;">, </span><span style="color:#FF79C6;">string</span><span style="color:#FFB86C;font-style:italic;"> LastName</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#FF79C6;">var</span><span style="color:#F8F8F2;"> person </span><span style="color:#FF79C6;">=</span><span style="color:#FF79C6;"> new</span><span style="color:#8BE9FD;font-style:italic;"> Person</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">John</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">, </span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">Doe</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#6272A4;">// person.FirstName = &quot;Jane&quot;;  // 编译错误，因为 FirstName 是不可变的</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">// 记录的两个实例在值相等时被认为是相等的，而不是引用相等。</span></span>
<span class="line"><span style="color:#FF79C6;">var</span><span style="color:#F8F8F2;"> person1 </span><span style="color:#FF79C6;">=</span><span style="color:#FF79C6;"> new</span><span style="color:#8BE9FD;font-style:italic;"> Person</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">John</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">, </span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">Doe</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#FF79C6;">var</span><span style="color:#F8F8F2;"> person2 </span><span style="color:#FF79C6;">=</span><span style="color:#FF79C6;"> new</span><span style="color:#8BE9FD;font-style:italic;"> Person</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">John</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">, </span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">Doe</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">Console.</span><span style="color:#50FA7B;">WriteLine</span><span style="color:#F8F8F2;">(person1 </span><span style="color:#FF79C6;">==</span><span style="color:#F8F8F2;"> person2);  </span><span style="color:#6272A4;">// 输出: True</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">// 解构：记录支持解构，可以方便地提取属性值。</span></span>
<span class="line"><span style="color:#FF79C6;">var</span><span style="color:#F8F8F2;"> (firstName, lastName) </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> person1;</span></span>
<span class="line"><span style="color:#F8F8F2;">Console.</span><span style="color:#50FA7B;">WriteLine</span><span style="color:#F8F8F2;">(firstName);  </span><span style="color:#6272A4;">// 输出: John</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">// 记录是不可变的，但可以使用 with 表达式创建记录的副本，并在此过程中更改某些属性的值。</span></span>
<span class="line"><span style="color:#FF79C6;">var</span><span style="color:#F8F8F2;"> updatedPerson </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> person1 </span><span style="color:#FF79C6;">with</span><span style="color:#F8F8F2;"> { FirstName </span><span style="color:#FF79C6;">=</span><span style="color:#E9F284;"> &quot;</span><span style="color:#F1FA8C;">Jane</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;"> };</span></span>
<span class="line"><span style="color:#F8F8F2;">Console.</span><span style="color:#50FA7B;">WriteLine</span><span style="color:#F8F8F2;">(updatedPerson);  </span><span style="color:#6272A4;">// 输出: Person { FirstName = Jane, LastName = Doe }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="接口" tabindex="-1"><a class="header-anchor" href="#接口"><span>接口</span></a></h2><p>接口使用 interface 关键字定义，可以包含方法、属性、事件和索引器的声明，但不能包含实现。</p><div class="language-cs line-numbers-mode" data-highlighter="shiki" data-ext="cs" data-title="cs" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#6272A4;">// 定义</span></span>
<span class="line"><span style="color:#FF79C6;">public</span><span style="color:#FF79C6;"> interface</span><span style="color:#8BE9FD;font-style:italic;"> IAnimal</span></span>
<span class="line"><span style="color:#F8F8F2;">{</span></span>
<span class="line"><span style="color:#FF79C6;">    void</span><span style="color:#50FA7B;"> Speak</span><span style="color:#F8F8F2;">();  </span><span style="color:#6272A4;">// 方法声明</span></span>
<span class="line"><span style="color:#FF79C6;">    string</span><span style="color:#F8F8F2;"> Name { </span><span style="color:#FF79C6;">get</span><span style="color:#F8F8F2;">; }  </span><span style="color:#6272A4;">// 只读属性</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#6272A4;">// 实现</span></span>
<span class="line"><span style="color:#FF79C6;">public</span><span style="color:#FF79C6;"> class</span><span style="color:#8BE9FD;"> Dog</span><span style="color:#F8F8F2;"> : </span><span style="color:#8BE9FD;font-style:italic;">IAnimal</span></span>
<span class="line"><span style="color:#F8F8F2;">{</span></span>
<span class="line"><span style="color:#FF79C6;">    public</span><span style="color:#FF79C6;"> string</span><span style="color:#F8F8F2;"> Name { </span><span style="color:#FF79C6;">get</span><span style="color:#F8F8F2;">; </span><span style="color:#FF79C6;">private</span><span style="color:#FF79C6;"> set</span><span style="color:#F8F8F2;">; }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">    public</span><span style="color:#50FA7B;"> Dog</span><span style="color:#F8F8F2;">(</span><span style="color:#FF79C6;">string</span><span style="color:#FFB86C;font-style:italic;"> name</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">    {</span></span>
<span class="line"><span style="color:#F8F8F2;">        Name </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> name;</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">    public</span><span style="color:#FF79C6;"> void</span><span style="color:#50FA7B;"> Speak</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"><span style="color:#F8F8F2;">    {</span></span>
<span class="line"><span style="color:#F8F8F2;">        Console.</span><span style="color:#50FA7B;">WriteLine</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">Bark</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">public</span><span style="color:#FF79C6;"> class</span><span style="color:#8BE9FD;"> Cat</span><span style="color:#F8F8F2;"> : </span><span style="color:#8BE9FD;font-style:italic;">IAnimal</span></span>
<span class="line"><span style="color:#F8F8F2;">{</span></span>
<span class="line"><span style="color:#FF79C6;">    public</span><span style="color:#FF79C6;"> string</span><span style="color:#F8F8F2;"> Name { </span><span style="color:#FF79C6;">get</span><span style="color:#F8F8F2;">; </span><span style="color:#FF79C6;">private</span><span style="color:#FF79C6;"> set</span><span style="color:#F8F8F2;">; }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">    public</span><span style="color:#50FA7B;"> Cat</span><span style="color:#F8F8F2;">(</span><span style="color:#FF79C6;">string</span><span style="color:#FFB86C;font-style:italic;"> name</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">    {</span></span>
<span class="line"><span style="color:#F8F8F2;">        Name </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> name;</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">    public</span><span style="color:#FF79C6;"> void</span><span style="color:#50FA7B;"> Speak</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"><span style="color:#F8F8F2;">    {</span></span>
<span class="line"><span style="color:#F8F8F2;">        Console.</span><span style="color:#50FA7B;">WriteLine</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">Meow</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">// 多重实现</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">public</span><span style="color:#FF79C6;"> interface</span><span style="color:#8BE9FD;font-style:italic;"> IMammal</span></span>
<span class="line"><span style="color:#F8F8F2;">{</span></span>
<span class="line"><span style="color:#FF79C6;">    void</span><span style="color:#50FA7B;"> GiveBirth</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">public</span><span style="color:#FF79C6;"> class</span><span style="color:#8BE9FD;"> Dog</span><span style="color:#F8F8F2;"> : </span><span style="color:#8BE9FD;font-style:italic;">IAnimal</span><span style="color:#F8F8F2;">, </span><span style="color:#8BE9FD;font-style:italic;">IMammal</span></span>
<span class="line"><span style="color:#F8F8F2;">{</span></span>
<span class="line"><span style="color:#FF79C6;">    public</span><span style="color:#FF79C6;"> string</span><span style="color:#F8F8F2;"> Name { </span><span style="color:#FF79C6;">get</span><span style="color:#F8F8F2;">; </span><span style="color:#FF79C6;">private</span><span style="color:#FF79C6;"> set</span><span style="color:#F8F8F2;">; }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">    public</span><span style="color:#50FA7B;"> Dog</span><span style="color:#F8F8F2;">(</span><span style="color:#FF79C6;">string</span><span style="color:#FFB86C;font-style:italic;"> name</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">    {</span></span>
<span class="line"><span style="color:#F8F8F2;">        Name </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> name;</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">    public</span><span style="color:#FF79C6;"> void</span><span style="color:#50FA7B;"> Speak</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"><span style="color:#F8F8F2;">    {</span></span>
<span class="line"><span style="color:#F8F8F2;">        Console.</span><span style="color:#50FA7B;">WriteLine</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">Bark</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">    public</span><span style="color:#FF79C6;"> void</span><span style="color:#50FA7B;"> GiveBirth</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"><span style="color:#F8F8F2;">    {</span></span>
<span class="line"><span style="color:#F8F8F2;">        Console.</span><span style="color:#50FA7B;">WriteLine</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">Dog gives birth.</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="实现具有重复成员的接口" tabindex="-1"><a class="header-anchor" href="#实现具有重复成员的接口"><span>实现具有重复成员的接口</span></a></h3><div class="language-cs line-numbers-mode" data-highlighter="shiki" data-ext="cs" data-title="cs" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">public</span><span style="color:#FF79C6;"> interface</span><span style="color:#8BE9FD;font-style:italic;"> IAnimal</span></span>
<span class="line"><span style="color:#F8F8F2;">{</span></span>
<span class="line"><span style="color:#FF79C6;">    void</span><span style="color:#50FA7B;"> Speak</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">public</span><span style="color:#FF79C6;"> interface</span><span style="color:#8BE9FD;font-style:italic;"> IMammal</span></span>
<span class="line"><span style="color:#F8F8F2;">{</span></span>
<span class="line"><span style="color:#FF79C6;">    void</span><span style="color:#50FA7B;"> Speak</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">public</span><span style="color:#FF79C6;"> class</span><span style="color:#8BE9FD;"> Dog</span><span style="color:#F8F8F2;"> : </span><span style="color:#8BE9FD;font-style:italic;">IAnimal</span><span style="color:#F8F8F2;">, </span><span style="color:#8BE9FD;font-style:italic;">IMammal</span></span>
<span class="line"><span style="color:#F8F8F2;">{</span></span>
<span class="line"><span style="color:#6272A4;">    // 显式接口实现</span></span>
<span class="line"><span style="color:#FF79C6;">    void</span><span style="color:#8BE9FD;font-style:italic;"> IAnimal</span><span style="color:#F8F8F2;">.</span><span style="color:#50FA7B;">Speak</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"><span style="color:#F8F8F2;">    {</span></span>
<span class="line"><span style="color:#F8F8F2;">        Console.</span><span style="color:#50FA7B;">WriteLine</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">Dog barks (IAnimal).</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">    void</span><span style="color:#8BE9FD;font-style:italic;"> IMammal</span><span style="color:#F8F8F2;">.</span><span style="color:#50FA7B;">Speak</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"><span style="color:#F8F8F2;">    {</span></span>
<span class="line"><span style="color:#F8F8F2;">        Console.</span><span style="color:#50FA7B;">WriteLine</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">Dog barks (IMammal).</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">// 使用显式接口实现，可以避免重复成员的冲突。</span></span>
<span class="line"><span style="color:#FF79C6;">class</span><span style="color:#8BE9FD;"> Program</span></span>
<span class="line"><span style="color:#F8F8F2;">{</span></span>
<span class="line"><span style="color:#FF79C6;">    static</span><span style="color:#FF79C6;"> void</span><span style="color:#50FA7B;"> Main</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"><span style="color:#F8F8F2;">    {</span></span>
<span class="line"><span style="color:#8BE9FD;font-style:italic;">        Dog</span><span style="color:#F8F8F2;"> dog </span><span style="color:#FF79C6;">=</span><span style="color:#FF79C6;"> new</span><span style="color:#8BE9FD;font-style:italic;"> Dog</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#8BE9FD;font-style:italic;">        IAnimal</span><span style="color:#F8F8F2;"> animal </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> dog;</span></span>
<span class="line"><span style="color:#F8F8F2;">        animal.</span><span style="color:#50FA7B;">Speak</span><span style="color:#F8F8F2;">();  </span><span style="color:#6272A4;">// 输出: Dog barks (IAnimal).</span></span>
<span class="line"></span>
<span class="line"><span style="color:#8BE9FD;font-style:italic;">        IMammal</span><span style="color:#F8F8F2;"> mammal </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> dog;</span></span>
<span class="line"><span style="color:#F8F8F2;">        mammal.</span><span style="color:#50FA7B;">Speak</span><span style="color:#F8F8F2;">();  </span><span style="color:#6272A4;">// 输出: Dog barks (IMammal).</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="多个接口的引用" tabindex="-1"><a class="header-anchor" href="#多个接口的引用"><span>多个接口的引用</span></a></h3><div class="language-cs line-numbers-mode" data-highlighter="shiki" data-ext="cs" data-title="cs" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">public</span><span style="color:#FF79C6;"> interface</span><span style="color:#8BE9FD;font-style:italic;"> IFlyable</span></span>
<span class="line"><span style="color:#F8F8F2;">{</span></span>
<span class="line"><span style="color:#FF79C6;">    void</span><span style="color:#50FA7B;"> Fly</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">public</span><span style="color:#FF79C6;"> interface</span><span style="color:#8BE9FD;font-style:italic;"> ISwimmable</span></span>
<span class="line"><span style="color:#F8F8F2;">{</span></span>
<span class="line"><span style="color:#FF79C6;">    void</span><span style="color:#50FA7B;"> Swim</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">public</span><span style="color:#FF79C6;"> interface</span><span style="color:#8BE9FD;font-style:italic;"> IAnimal</span></span>
<span class="line"><span style="color:#F8F8F2;">{</span></span>
<span class="line"><span style="color:#FF79C6;">    void</span><span style="color:#50FA7B;"> Speak</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">// 实现</span></span>
<span class="line"><span style="color:#FF79C6;">public</span><span style="color:#FF79C6;"> class</span><span style="color:#8BE9FD;"> Duck</span><span style="color:#F8F8F2;"> : </span><span style="color:#8BE9FD;font-style:italic;">IFlyable</span><span style="color:#F8F8F2;">, </span><span style="color:#8BE9FD;font-style:italic;">ISwimmable</span><span style="color:#F8F8F2;">, </span><span style="color:#8BE9FD;font-style:italic;">IAnimal</span></span>
<span class="line"><span style="color:#F8F8F2;">{</span></span>
<span class="line"><span style="color:#FF79C6;">    public</span><span style="color:#FF79C6;"> void</span><span style="color:#50FA7B;"> Fly</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"><span style="color:#F8F8F2;">    {</span></span>
<span class="line"><span style="color:#F8F8F2;">        Console.</span><span style="color:#50FA7B;">WriteLine</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">Duck is flying.</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">    public</span><span style="color:#FF79C6;"> void</span><span style="color:#50FA7B;"> Swim</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"><span style="color:#F8F8F2;">    {</span></span>
<span class="line"><span style="color:#F8F8F2;">        Console.</span><span style="color:#50FA7B;">WriteLine</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">Duck is swimming.</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">    public</span><span style="color:#FF79C6;"> void</span><span style="color:#50FA7B;"> Speak</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"><span style="color:#F8F8F2;">    {</span></span>
<span class="line"><span style="color:#F8F8F2;">        Console.</span><span style="color:#50FA7B;">WriteLine</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">Duck quacks.</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#FF79C6;">class</span><span style="color:#8BE9FD;"> Program</span></span>
<span class="line"><span style="color:#F8F8F2;">{</span></span>
<span class="line"><span style="color:#FF79C6;">    static</span><span style="color:#FF79C6;"> void</span><span style="color:#50FA7B;"> Main</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"><span style="color:#F8F8F2;">    {</span></span>
<span class="line"><span style="color:#6272A4;">        // 创建一个 Duck 对象</span></span>
<span class="line"><span style="color:#8BE9FD;font-style:italic;">        Duck</span><span style="color:#F8F8F2;"> duck </span><span style="color:#FF79C6;">=</span><span style="color:#FF79C6;"> new</span><span style="color:#8BE9FD;font-style:italic;"> Duck</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">        // 通过 IFlyable 引用调用飞行方法</span></span>
<span class="line"><span style="color:#8BE9FD;font-style:italic;">        IFlyable</span><span style="color:#F8F8F2;"> flyableDuck </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> duck;</span></span>
<span class="line"><span style="color:#F8F8F2;">        flyableDuck.</span><span style="color:#50FA7B;">Fly</span><span style="color:#F8F8F2;">();  </span><span style="color:#6272A4;">// 输出: Duck is flying.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">        // 通过 ISwimmable 引用调用游泳方法</span></span>
<span class="line"><span style="color:#8BE9FD;font-style:italic;">        ISwimmable</span><span style="color:#F8F8F2;"> swimmableDuck </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> duck;</span></span>
<span class="line"><span style="color:#F8F8F2;">        swimmableDuck.</span><span style="color:#50FA7B;">Swim</span><span style="color:#F8F8F2;">();  </span><span style="color:#6272A4;">// 输出: Duck is swimming.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">        // 通过 IAnimal 引用调用说话方法</span></span>
<span class="line"><span style="color:#8BE9FD;font-style:italic;">        IAnimal</span><span style="color:#F8F8F2;"> animalDuck </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> duck;</span></span>
<span class="line"><span style="color:#F8F8F2;">        animalDuck.</span><span style="color:#50FA7B;">Speak</span><span style="color:#F8F8F2;">();  </span><span style="color:#6272A4;">// 输出: Duck quacks.</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>动态处理</p><div class="language-cs line-numbers-mode" data-highlighter="shiki" data-ext="cs" data-title="cs" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">public</span><span style="color:#FF79C6;"> class</span><span style="color:#8BE9FD;"> Fish</span><span style="color:#F8F8F2;"> : </span><span style="color:#8BE9FD;font-style:italic;">ISwimmable</span><span style="color:#F8F8F2;">, </span><span style="color:#8BE9FD;font-style:italic;">IAnimal</span></span>
<span class="line"><span style="color:#F8F8F2;">{</span></span>
<span class="line"><span style="color:#FF79C6;">    public</span><span style="color:#FF79C6;"> void</span><span style="color:#50FA7B;"> Swim</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"><span style="color:#F8F8F2;">    {</span></span>
<span class="line"><span style="color:#F8F8F2;">        Console.</span><span style="color:#50FA7B;">WriteLine</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">Fish is swimming.</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">    public</span><span style="color:#FF79C6;"> void</span><span style="color:#50FA7B;"> Speak</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"><span style="color:#F8F8F2;">    {</span></span>
<span class="line"><span style="color:#F8F8F2;">        Console.</span><span style="color:#50FA7B;">WriteLine</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">Fish makes bubbles.</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">class</span><span style="color:#8BE9FD;"> Program</span></span>
<span class="line"><span style="color:#F8F8F2;">{</span></span>
<span class="line"><span style="color:#FF79C6;">    static</span><span style="color:#FF79C6;"> void</span><span style="color:#50FA7B;"> MakeAnimalSpeak</span><span style="color:#F8F8F2;">(</span><span style="color:#8BE9FD;font-style:italic;">IAnimal</span><span style="color:#FFB86C;font-style:italic;"> animal</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">    {</span></span>
<span class="line"><span style="color:#F8F8F2;">        animal.</span><span style="color:#50FA7B;">Speak</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">    static</span><span style="color:#FF79C6;"> void</span><span style="color:#50FA7B;"> MakeAnimalSwim</span><span style="color:#F8F8F2;">(</span><span style="color:#8BE9FD;font-style:italic;">ISwimmable</span><span style="color:#FFB86C;font-style:italic;"> swimmable</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">    {</span></span>
<span class="line"><span style="color:#F8F8F2;">        swimmable.</span><span style="color:#50FA7B;">Swim</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">    static</span><span style="color:#FF79C6;"> void</span><span style="color:#50FA7B;"> Main</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"><span style="color:#F8F8F2;">    {</span></span>
<span class="line"><span style="color:#8BE9FD;font-style:italic;">        Duck</span><span style="color:#F8F8F2;"> duck </span><span style="color:#FF79C6;">=</span><span style="color:#FF79C6;"> new</span><span style="color:#8BE9FD;font-style:italic;"> Duck</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#8BE9FD;font-style:italic;">        Fish</span><span style="color:#F8F8F2;"> fish </span><span style="color:#FF79C6;">=</span><span style="color:#FF79C6;"> new</span><span style="color:#8BE9FD;font-style:italic;"> Fish</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#50FA7B;">        MakeAnimalSpeak</span><span style="color:#F8F8F2;">(duck);  </span><span style="color:#6272A4;">// 输出: Duck quacks.</span></span>
<span class="line"><span style="color:#50FA7B;">        MakeAnimalSpeak</span><span style="color:#F8F8F2;">(fish);  </span><span style="color:#6272A4;">// 输出: Fish makes bubbles.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#50FA7B;">        MakeAnimalSwim</span><span style="color:#F8F8F2;">(duck);   </span><span style="color:#6272A4;">// 输出: Duck is swimming.</span></span>
<span class="line"><span style="color:#50FA7B;">        MakeAnimalSwim</span><span style="color:#F8F8F2;">(fish);   </span><span style="color:#6272A4;">// 输出: Fish is swimming.</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="派生成员作为实现" tabindex="-1"><a class="header-anchor" href="#派生成员作为实现"><span>派生成员作为实现</span></a></h3><div class="language-cs line-numbers-mode" data-highlighter="shiki" data-ext="cs" data-title="cs" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"></span>
<span class="line"><span style="color:#FF79C6;">public</span><span style="color:#FF79C6;"> class</span><span style="color:#8BE9FD;"> Animal</span></span>
<span class="line"><span style="color:#F8F8F2;">{</span></span>
<span class="line"><span style="color:#FF79C6;">    public</span><span style="color:#FF79C6;"> virtual</span><span style="color:#FF79C6;"> void</span><span style="color:#50FA7B;"> Speak</span><span style="color:#F8F8F2;">()  </span><span style="color:#6272A4;">// 虚方法</span></span>
<span class="line"><span style="color:#F8F8F2;">    {</span></span>
<span class="line"><span style="color:#F8F8F2;">        Console.</span><span style="color:#50FA7B;">WriteLine</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">Animal makes a sound.</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">public</span><span style="color:#FF79C6;"> interface</span><span style="color:#8BE9FD;font-style:italic;"> IFlyable</span></span>
<span class="line"><span style="color:#F8F8F2;">{</span></span>
<span class="line"><span style="color:#FF79C6;">    void</span><span style="color:#50FA7B;"> Fly</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">public</span><span style="color:#FF79C6;"> interface</span><span style="color:#8BE9FD;font-style:italic;"> ISwimmable</span></span>
<span class="line"><span style="color:#F8F8F2;">{</span></span>
<span class="line"><span style="color:#FF79C6;">    void</span><span style="color:#50FA7B;"> Swim</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">public</span><span style="color:#FF79C6;"> class</span><span style="color:#8BE9FD;"> Duck</span><span style="color:#F8F8F2;"> : </span><span style="color:#8BE9FD;font-style:italic;">Animal</span><span style="color:#F8F8F2;">, </span><span style="color:#8BE9FD;font-style:italic;">IFlyable</span><span style="color:#F8F8F2;">, </span><span style="color:#8BE9FD;font-style:italic;">ISwimmable</span></span>
<span class="line"><span style="color:#F8F8F2;">{</span></span>
<span class="line"><span style="color:#FF79C6;">    public</span><span style="color:#FF79C6;"> override</span><span style="color:#FF79C6;"> void</span><span style="color:#50FA7B;"> Speak</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"><span style="color:#F8F8F2;">    {</span></span>
<span class="line"><span style="color:#F8F8F2;">        Console.</span><span style="color:#50FA7B;">WriteLine</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">Duck quacks.</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">    public</span><span style="color:#FF79C6;"> void</span><span style="color:#50FA7B;"> Fly</span><span style="color:#F8F8F2;">()  </span><span style="color:#6272A4;">// 实现 IFlyable</span></span>
<span class="line"><span style="color:#F8F8F2;">    {</span></span>
<span class="line"><span style="color:#F8F8F2;">        Console.</span><span style="color:#50FA7B;">WriteLine</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">Duck is flying.</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">    public</span><span style="color:#FF79C6;"> void</span><span style="color:#50FA7B;"> Swim</span><span style="color:#F8F8F2;">()  </span><span style="color:#6272A4;">// 实现 ISwimmable</span></span>
<span class="line"><span style="color:#F8F8F2;">    {</span></span>
<span class="line"><span style="color:#F8F8F2;">        Console.</span><span style="color:#50FA7B;">WriteLine</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">Duck is swimming.</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">class</span><span style="color:#8BE9FD;"> Program</span></span>
<span class="line"><span style="color:#F8F8F2;">{</span></span>
<span class="line"><span style="color:#FF79C6;">    static</span><span style="color:#FF79C6;"> void</span><span style="color:#50FA7B;"> Main</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"><span style="color:#F8F8F2;">    {</span></span>
<span class="line"><span style="color:#8BE9FD;font-style:italic;">        Duck</span><span style="color:#F8F8F2;"> duck </span><span style="color:#FF79C6;">=</span><span style="color:#FF79C6;"> new</span><span style="color:#8BE9FD;font-style:italic;"> Duck</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#F8F8F2;">        duck.</span><span style="color:#50FA7B;">Speak</span><span style="color:#F8F8F2;">();  </span><span style="color:#6272A4;">// 输出: Duck quacks.</span></span>
<span class="line"><span style="color:#F8F8F2;">        duck.</span><span style="color:#50FA7B;">Fly</span><span style="color:#F8F8F2;">();    </span><span style="color:#6272A4;">// 输出: Duck is flying.</span></span>
<span class="line"><span style="color:#F8F8F2;">        duck.</span><span style="color:#50FA7B;">Swim</span><span style="color:#F8F8F2;">();   </span><span style="color:#6272A4;">// 输出: Duck is swimming.</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="显示接口实现" tabindex="-1"><a class="header-anchor" href="#显示接口实现"><span>显示接口实现</span></a></h3><div class="language-cs line-numbers-mode" data-highlighter="shiki" data-ext="cs" data-title="cs" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">public</span><span style="color:#FF79C6;"> interface</span><span style="color:#8BE9FD;font-style:italic;"> IAnimal</span></span>
<span class="line"><span style="color:#F8F8F2;">{</span></span>
<span class="line"><span style="color:#FF79C6;">    void</span><span style="color:#50FA7B;"> Speak</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">public</span><span style="color:#FF79C6;"> interface</span><span style="color:#8BE9FD;font-style:italic;"> IMammal</span></span>
<span class="line"><span style="color:#F8F8F2;">{</span></span>
<span class="line"><span style="color:#FF79C6;">    void</span><span style="color:#50FA7B;"> Speak</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">public</span><span style="color:#FF79C6;"> class</span><span style="color:#8BE9FD;"> Dog</span><span style="color:#F8F8F2;"> : </span><span style="color:#8BE9FD;font-style:italic;">IAnimal</span><span style="color:#F8F8F2;">, </span><span style="color:#8BE9FD;font-style:italic;">IMammal</span></span>
<span class="line"><span style="color:#F8F8F2;">{</span></span>
<span class="line"><span style="color:#FF79C6;">    void</span><span style="color:#8BE9FD;font-style:italic;"> IAnimal</span><span style="color:#F8F8F2;">.</span><span style="color:#50FA7B;">Speak</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"><span style="color:#F8F8F2;">    {</span></span>
<span class="line"><span style="color:#F8F8F2;">        Console.</span><span style="color:#50FA7B;">WriteLine</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">Dog barks (IAnimal).</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">    void</span><span style="color:#8BE9FD;font-style:italic;"> IMammal</span><span style="color:#F8F8F2;">.</span><span style="color:#50FA7B;">Speak</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"><span style="color:#F8F8F2;">    {</span></span>
<span class="line"><span style="color:#F8F8F2;">        Console.</span><span style="color:#50FA7B;">WriteLine</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">Dog barks (IMammal).</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="接口继承接口" tabindex="-1"><a class="header-anchor" href="#接口继承接口"><span>接口继承接口</span></a></h3><div class="language-cs line-numbers-mode" data-highlighter="shiki" data-ext="cs" data-title="cs" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">public</span><span style="color:#FF79C6;"> interface</span><span style="color:#8BE9FD;font-style:italic;"> IAnimal</span></span>
<span class="line"><span style="color:#F8F8F2;">{</span></span>
<span class="line"><span style="color:#FF79C6;">    void</span><span style="color:#50FA7B;"> Speak</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">public</span><span style="color:#FF79C6;"> interface</span><span style="color:#8BE9FD;font-style:italic;"> IMammal</span><span style="color:#F8F8F2;"> : </span><span style="color:#8BE9FD;font-style:italic;">IAnimal</span><span style="color:#6272A4;">  // IMammal 继承 IAnimal</span></span>
<span class="line"><span style="color:#F8F8F2;">{</span></span>
<span class="line"><span style="color:#FF79C6;">    void</span><span style="color:#50FA7B;"> GiveBirth</span><span style="color:#F8F8F2;">();  </span><span style="color:#6272A4;">// 新方法</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">public</span><span style="color:#FF79C6;"> class</span><span style="color:#8BE9FD;"> Dog</span><span style="color:#F8F8F2;"> : </span><span style="color:#8BE9FD;font-style:italic;">IMammal</span></span>
<span class="line"><span style="color:#F8F8F2;">{</span></span>
<span class="line"><span style="color:#FF79C6;">    public</span><span style="color:#FF79C6;"> void</span><span style="color:#50FA7B;"> Speak</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"><span style="color:#F8F8F2;">    {</span></span>
<span class="line"><span style="color:#F8F8F2;">        Console.</span><span style="color:#50FA7B;">WriteLine</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">Dog barks.</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">    public</span><span style="color:#FF79C6;"> void</span><span style="color:#50FA7B;"> GiveBirth</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"><span style="color:#F8F8F2;">    {</span></span>
<span class="line"><span style="color:#F8F8F2;">        Console.</span><span style="color:#50FA7B;">WriteLine</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">Dog gives birth to puppies.</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">public</span><span style="color:#FF79C6;"> class</span><span style="color:#8BE9FD;"> Cat</span><span style="color:#F8F8F2;"> : </span><span style="color:#8BE9FD;font-style:italic;">IMammal</span></span>
<span class="line"><span style="color:#F8F8F2;">{</span></span>
<span class="line"><span style="color:#FF79C6;">    public</span><span style="color:#FF79C6;"> void</span><span style="color:#50FA7B;"> Speak</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"><span style="color:#F8F8F2;">    {</span></span>
<span class="line"><span style="color:#F8F8F2;">        Console.</span><span style="color:#50FA7B;">WriteLine</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">Cat meows.</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">    public</span><span style="color:#FF79C6;"> void</span><span style="color:#50FA7B;"> GiveBirth</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"><span style="color:#F8F8F2;">    {</span></span>
<span class="line"><span style="color:#F8F8F2;">        Console.</span><span style="color:#50FA7B;">WriteLine</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">Cat gives birth to kittens.</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">class</span><span style="color:#8BE9FD;"> Program</span></span>
<span class="line"><span style="color:#F8F8F2;">{</span></span>
<span class="line"><span style="color:#FF79C6;">    static</span><span style="color:#FF79C6;"> void</span><span style="color:#50FA7B;"> Main</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"><span style="color:#F8F8F2;">    {</span></span>
<span class="line"><span style="color:#8BE9FD;font-style:italic;">        IMammal</span><span style="color:#F8F8F2;"> dog </span><span style="color:#FF79C6;">=</span><span style="color:#FF79C6;"> new</span><span style="color:#8BE9FD;font-style:italic;"> Dog</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#F8F8F2;">        dog.</span><span style="color:#50FA7B;">Speak</span><span style="color:#F8F8F2;">();      </span><span style="color:#6272A4;">// 输出: Dog barks.</span></span>
<span class="line"><span style="color:#F8F8F2;">        dog.</span><span style="color:#50FA7B;">GiveBirth</span><span style="color:#F8F8F2;">();  </span><span style="color:#6272A4;">// 输出: Dog gives birth to puppies.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#8BE9FD;font-style:italic;">        IMammal</span><span style="color:#F8F8F2;"> cat </span><span style="color:#FF79C6;">=</span><span style="color:#FF79C6;"> new</span><span style="color:#8BE9FD;font-style:italic;"> Cat</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#F8F8F2;">        cat.</span><span style="color:#50FA7B;">Speak</span><span style="color:#F8F8F2;">();      </span><span style="color:#6272A4;">// 输出: Cat meows.</span></span>
<span class="line"><span style="color:#F8F8F2;">        cat.</span><span style="color:#50FA7B;">GiveBirth</span><span style="color:#F8F8F2;">();  </span><span style="color:#6272A4;">// 输出: Cat gives birth to kittens.</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>继承多个接口</p><div class="language-cs line-numbers-mode" data-highlighter="shiki" data-ext="cs" data-title="cs" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">public</span><span style="color:#FF79C6;"> interface</span><span style="color:#8BE9FD;font-style:italic;"> IFlyable</span></span>
<span class="line"><span style="color:#F8F8F2;">{</span></span>
<span class="line"><span style="color:#FF79C6;">    void</span><span style="color:#50FA7B;"> Fly</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">public</span><span style="color:#FF79C6;"> interface</span><span style="color:#8BE9FD;font-style:italic;"> ISwimmable</span></span>
<span class="line"><span style="color:#F8F8F2;">{</span></span>
<span class="line"><span style="color:#FF79C6;">    void</span><span style="color:#50FA7B;"> Swim</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">public</span><span style="color:#FF79C6;"> interface</span><span style="color:#8BE9FD;font-style:italic;"> IAnimal</span><span style="color:#F8F8F2;"> : </span><span style="color:#8BE9FD;font-style:italic;">IMammal</span><span style="color:#F8F8F2;">, </span><span style="color:#8BE9FD;font-style:italic;">IFlyable</span><span style="color:#F8F8F2;">, </span><span style="color:#8BE9FD;font-style:italic;">ISwimmable</span><span style="color:#6272A4;">  // 继承多个接口</span></span>
<span class="line"><span style="color:#F8F8F2;">{</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">public</span><span style="color:#FF79C6;"> class</span><span style="color:#8BE9FD;"> Duck</span><span style="color:#F8F8F2;"> : </span><span style="color:#8BE9FD;font-style:italic;">IAnimal</span></span>
<span class="line"><span style="color:#F8F8F2;">{</span></span>
<span class="line"><span style="color:#FF79C6;">    public</span><span style="color:#FF79C6;"> void</span><span style="color:#50FA7B;"> Speak</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"><span style="color:#F8F8F2;">    {</span></span>
<span class="line"><span style="color:#F8F8F2;">        Console.</span><span style="color:#50FA7B;">WriteLine</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">Duck quacks.</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">    public</span><span style="color:#FF79C6;"> void</span><span style="color:#50FA7B;"> GiveBirth</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"><span style="color:#F8F8F2;">    {</span></span>
<span class="line"><span style="color:#F8F8F2;">        Console.</span><span style="color:#50FA7B;">WriteLine</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">Duck lays eggs.</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">    public</span><span style="color:#FF79C6;"> void</span><span style="color:#50FA7B;"> Fly</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"><span style="color:#F8F8F2;">    {</span></span>
<span class="line"><span style="color:#F8F8F2;">        Console.</span><span style="color:#50FA7B;">WriteLine</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">Duck is flying.</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">    public</span><span style="color:#FF79C6;"> void</span><span style="color:#50FA7B;"> Swim</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"><span style="color:#F8F8F2;">    {</span></span>
<span class="line"><span style="color:#F8F8F2;">        Console.</span><span style="color:#50FA7B;">WriteLine</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">Duck is swimming.</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="泛型" tabindex="-1"><a class="header-anchor" href="#泛型"><span>泛型</span></a></h2><p>定义时指定，使用时再指定具体的类型。</p><h3 id="泛型类" tabindex="-1"><a class="header-anchor" href="#泛型类"><span>泛型类</span></a></h3><div class="language-cs line-numbers-mode" data-highlighter="shiki" data-ext="cs" data-title="cs" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">public</span><span style="color:#FF79C6;"> class</span><span style="color:#8BE9FD;"> GenericList</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#FFB86C;font-style:italic;">T</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">{</span></span>
<span class="line"><span style="color:#FF79C6;">    private</span><span style="color:#8BE9FD;font-style:italic;"> T</span><span style="color:#F8F8F2;">[] items;</span></span>
<span class="line"><span style="color:#FF79C6;">    private</span><span style="color:#FF79C6;"> int</span><span style="color:#F8F8F2;"> count;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">    public</span><span style="color:#50FA7B;"> GenericList</span><span style="color:#F8F8F2;">(</span><span style="color:#FF79C6;">int</span><span style="color:#FFB86C;font-style:italic;"> size</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">    {</span></span>
<span class="line"><span style="color:#F8F8F2;">        items </span><span style="color:#FF79C6;">=</span><span style="color:#FF79C6;"> new</span><span style="color:#8BE9FD;font-style:italic;"> T</span><span style="color:#F8F8F2;">[size];</span></span>
<span class="line"><span style="color:#F8F8F2;">        count </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> 0</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">    public</span><span style="color:#FF79C6;"> void</span><span style="color:#50FA7B;"> Add</span><span style="color:#F8F8F2;">(</span><span style="color:#8BE9FD;font-style:italic;">T</span><span style="color:#FFB86C;font-style:italic;"> item</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">    {</span></span>
<span class="line"><span style="color:#FF79C6;">        if</span><span style="color:#F8F8F2;"> (count </span><span style="color:#FF79C6;">&lt;</span><span style="color:#F8F8F2;"> items.Length)</span></span>
<span class="line"><span style="color:#F8F8F2;">        {</span></span>
<span class="line"><span style="color:#F8F8F2;">            items[count] </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> item;</span></span>
<span class="line"><span style="color:#F8F8F2;">            count</span><span style="color:#FF79C6;">++</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">        }</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">    public</span><span style="color:#8BE9FD;font-style:italic;"> T</span><span style="color:#50FA7B;"> Get</span><span style="color:#F8F8F2;">(</span><span style="color:#FF79C6;">int</span><span style="color:#FFB86C;font-style:italic;"> index</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">    {</span></span>
<span class="line"><span style="color:#FF79C6;">        if</span><span style="color:#F8F8F2;"> (index </span><span style="color:#FF79C6;">&gt;=</span><span style="color:#BD93F9;"> 0</span><span style="color:#FF79C6;"> &amp;&amp;</span><span style="color:#F8F8F2;"> index </span><span style="color:#FF79C6;">&lt;</span><span style="color:#F8F8F2;"> count)</span></span>
<span class="line"><span style="color:#F8F8F2;">        {</span></span>
<span class="line"><span style="color:#FF79C6;">            return</span><span style="color:#F8F8F2;"> items[index];</span></span>
<span class="line"><span style="color:#F8F8F2;">        }</span></span>
<span class="line"><span style="color:#FF79C6;">        throw</span><span style="color:#FF79C6;"> new</span><span style="color:#8BE9FD;font-style:italic;"> IndexOutOfRangeException</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">class</span><span style="color:#8BE9FD;"> Program</span></span>
<span class="line"><span style="color:#F8F8F2;">{</span></span>
<span class="line"><span style="color:#FF79C6;">    static</span><span style="color:#FF79C6;"> void</span><span style="color:#50FA7B;"> Main</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"><span style="color:#F8F8F2;">    {</span></span>
<span class="line"><span style="color:#FF79C6;">        var</span><span style="color:#F8F8F2;"> intList </span><span style="color:#FF79C6;">=</span><span style="color:#FF79C6;"> new</span><span style="color:#8BE9FD;font-style:italic;"> GenericList</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#FF79C6;">int</span><span style="color:#F8F8F2;">&gt;(</span><span style="color:#BD93F9;">5</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">        intList.</span><span style="color:#50FA7B;">Add</span><span style="color:#F8F8F2;">(</span><span style="color:#BD93F9;">1</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">        intList.</span><span style="color:#50FA7B;">Add</span><span style="color:#F8F8F2;">(</span><span style="color:#BD93F9;">2</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">        Console.</span><span style="color:#50FA7B;">WriteLine</span><span style="color:#F8F8F2;">(intList.</span><span style="color:#50FA7B;">Get</span><span style="color:#F8F8F2;">(</span><span style="color:#BD93F9;">0</span><span style="color:#F8F8F2;">)); </span><span style="color:#6272A4;">// 输出: 1</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">        var</span><span style="color:#F8F8F2;"> stringList </span><span style="color:#FF79C6;">=</span><span style="color:#FF79C6;"> new</span><span style="color:#8BE9FD;font-style:italic;"> GenericList</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#FF79C6;">string</span><span style="color:#F8F8F2;">&gt;(</span><span style="color:#BD93F9;">5</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">        stringList.</span><span style="color:#50FA7B;">Add</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">Hello</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">        stringList.</span><span style="color:#50FA7B;">Add</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">World</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">        Console.</span><span style="color:#50FA7B;">WriteLine</span><span style="color:#F8F8F2;">(stringList.</span><span style="color:#50FA7B;">Get</span><span style="color:#F8F8F2;">(</span><span style="color:#BD93F9;">1</span><span style="color:#F8F8F2;">)); </span><span style="color:#6272A4;">// 输出: World</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="参数约束" tabindex="-1"><a class="header-anchor" href="#参数约束"><span>参数约束</span></a></h3><div class="language-cs line-numbers-mode" data-highlighter="shiki" data-ext="cs" data-title="cs" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">public</span><span style="color:#FF79C6;"> class</span><span style="color:#8BE9FD;"> GenericList</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#FFB86C;font-style:italic;">T</span><span style="color:#F8F8F2;">&gt; </span><span style="color:#FF79C6;">where</span><span style="color:#FFB86C;font-style:italic;"> T</span><span style="color:#F8F8F2;"> : </span><span style="color:#8BE9FD;font-style:italic;">Animal</span><span style="color:#6272A4;">  // 约束T为Animal类或其派生类</span></span>
<span class="line"><span style="color:#F8F8F2;">{</span></span>
<span class="line"><span style="color:#6272A4;">    // 类实现</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">public</span><span style="color:#FF79C6;"> class</span><span style="color:#8BE9FD;"> Animal</span></span>
<span class="line"><span style="color:#F8F8F2;">{</span></span>
<span class="line"><span style="color:#FF79C6;">    public</span><span style="color:#FF79C6;"> string</span><span style="color:#F8F8F2;"> Name { </span><span style="color:#FF79C6;">get</span><span style="color:#F8F8F2;">; </span><span style="color:#FF79C6;">set</span><span style="color:#F8F8F2;">; }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">public</span><span style="color:#FF79C6;"> class</span><span style="color:#8BE9FD;"> Dog</span><span style="color:#F8F8F2;"> : </span><span style="color:#8BE9FD;font-style:italic;">Animal</span><span style="color:#F8F8F2;"> { }</span></span>
<span class="line"><span style="color:#FF79C6;">public</span><span style="color:#FF79C6;"> class</span><span style="color:#8BE9FD;"> Cat</span><span style="color:#F8F8F2;"> : </span><span style="color:#8BE9FD;font-style:italic;">Animal</span><span style="color:#F8F8F2;"> { }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">public</span><span style="color:#FF79C6;"> class</span><span style="color:#8BE9FD;"> GenericList</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#FFB86C;font-style:italic;">T</span><span style="color:#F8F8F2;">&gt; </span><span style="color:#FF79C6;">where</span><span style="color:#FFB86C;font-style:italic;"> T</span><span style="color:#F8F8F2;"> : </span><span style="color:#8BE9FD;font-style:italic;">Animal</span></span>
<span class="line"><span style="color:#F8F8F2;">{</span></span>
<span class="line"><span style="color:#FF79C6;">    private</span><span style="color:#8BE9FD;font-style:italic;"> List</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#8BE9FD;font-style:italic;">T</span><span style="color:#F8F8F2;">&gt; items </span><span style="color:#FF79C6;">=</span><span style="color:#FF79C6;"> new</span><span style="color:#8BE9FD;font-style:italic;"> List</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#8BE9FD;font-style:italic;">T</span><span style="color:#F8F8F2;">&gt;();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">    public</span><span style="color:#FF79C6;"> void</span><span style="color:#50FA7B;"> Add</span><span style="color:#F8F8F2;">(</span><span style="color:#8BE9FD;font-style:italic;">T</span><span style="color:#FFB86C;font-style:italic;"> item</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">    {</span></span>
<span class="line"><span style="color:#F8F8F2;">        items.</span><span style="color:#50FA7B;">Add</span><span style="color:#F8F8F2;">(item);</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">    public</span><span style="color:#8BE9FD;font-style:italic;"> T</span><span style="color:#50FA7B;"> Get</span><span style="color:#F8F8F2;">(</span><span style="color:#FF79C6;">int</span><span style="color:#FFB86C;font-style:italic;"> index</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">    {</span></span>
<span class="line"><span style="color:#FF79C6;">        return</span><span style="color:#F8F8F2;"> items[index];</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">class</span><span style="color:#8BE9FD;"> Program</span></span>
<span class="line"><span style="color:#F8F8F2;">{</span></span>
<span class="line"><span style="color:#FF79C6;">    static</span><span style="color:#FF79C6;"> void</span><span style="color:#50FA7B;"> Main</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"><span style="color:#F8F8F2;">    {</span></span>
<span class="line"><span style="color:#FF79C6;">        var</span><span style="color:#F8F8F2;"> dogList </span><span style="color:#FF79C6;">=</span><span style="color:#FF79C6;"> new</span><span style="color:#8BE9FD;font-style:italic;"> GenericList</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#8BE9FD;font-style:italic;">Dog</span><span style="color:#F8F8F2;">&gt;();</span></span>
<span class="line"><span style="color:#F8F8F2;">        dogList.</span><span style="color:#50FA7B;">Add</span><span style="color:#F8F8F2;">(</span><span style="color:#FF79C6;">new</span><span style="color:#8BE9FD;font-style:italic;"> Dog</span><span style="color:#F8F8F2;"> { Name </span><span style="color:#FF79C6;">=</span><span style="color:#E9F284;"> &quot;</span><span style="color:#F1FA8C;">Buddy</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;"> });</span></span>
<span class="line"><span style="color:#F8F8F2;">        </span></span>
<span class="line"><span style="color:#FF79C6;">        var</span><span style="color:#F8F8F2;"> catList </span><span style="color:#FF79C6;">=</span><span style="color:#FF79C6;"> new</span><span style="color:#8BE9FD;font-style:italic;"> GenericList</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#8BE9FD;font-style:italic;">Cat</span><span style="color:#F8F8F2;">&gt;();</span></span>
<span class="line"><span style="color:#F8F8F2;">        catList.</span><span style="color:#50FA7B;">Add</span><span style="color:#F8F8F2;">(</span><span style="color:#FF79C6;">new</span><span style="color:#8BE9FD;font-style:italic;"> Cat</span><span style="color:#F8F8F2;"> { Name </span><span style="color:#FF79C6;">=</span><span style="color:#E9F284;"> &quot;</span><span style="color:#F1FA8C;">Whiskers</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;"> });</span></span>
<span class="line"><span style="color:#F8F8F2;">        </span></span>
<span class="line"><span style="color:#F8F8F2;">        Console.</span><span style="color:#50FA7B;">WriteLine</span><span style="color:#F8F8F2;">(dogList.</span><span style="color:#50FA7B;">Get</span><span style="color:#F8F8F2;">(</span><span style="color:#BD93F9;">0</span><span style="color:#F8F8F2;">).Name);  </span><span style="color:#6272A4;">// 输出: Buddy</span></span>
<span class="line"><span style="color:#F8F8F2;">        Console.</span><span style="color:#50FA7B;">WriteLine</span><span style="color:#F8F8F2;">(catList.</span><span style="color:#50FA7B;">Get</span><span style="color:#F8F8F2;">(</span><span style="color:#BD93F9;">0</span><span style="color:#F8F8F2;">).Name);  </span><span style="color:#6272A4;">// 输出: Whiskers</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="泛型方法" tabindex="-1"><a class="header-anchor" href="#泛型方法"><span>泛型方法</span></a></h3><div class="language-cs line-numbers-mode" data-highlighter="shiki" data-ext="cs" data-title="cs" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">public</span><span style="color:#FF79C6;"> class</span><span style="color:#8BE9FD;"> GenericMethods</span></span>
<span class="line"><span style="color:#F8F8F2;">{</span></span>
<span class="line"><span style="color:#FF79C6;">    public</span><span style="color:#FF79C6;"> static</span><span style="color:#8BE9FD;font-style:italic;"> T</span><span style="color:#50FA7B;"> GetDefaultValue</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#FFB86C;font-style:italic;">T</span><span style="color:#F8F8F2;">&gt;()</span></span>
<span class="line"><span style="color:#F8F8F2;">    {</span></span>
<span class="line"><span style="color:#FF79C6;">        return</span><span style="color:#FF79C6;"> default</span><span style="color:#F8F8F2;">(</span><span style="color:#8BE9FD;font-style:italic;">T</span><span style="color:#F8F8F2;">);  </span><span style="color:#6272A4;">// 返回类型T的默认值</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">class</span><span style="color:#8BE9FD;"> Program</span></span>
<span class="line"><span style="color:#F8F8F2;">{</span></span>
<span class="line"><span style="color:#FF79C6;">    static</span><span style="color:#FF79C6;"> void</span><span style="color:#50FA7B;"> Main</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"><span style="color:#F8F8F2;">    {</span></span>
<span class="line"><span style="color:#FF79C6;">        int</span><span style="color:#F8F8F2;"> defaultInt </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> GenericMethods.</span><span style="color:#50FA7B;">GetDefaultValue</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#FF79C6;">int</span><span style="color:#F8F8F2;">&gt;(); </span><span style="color:#6272A4;">// 0</span></span>
<span class="line"><span style="color:#FF79C6;">        string</span><span style="color:#F8F8F2;"> defaultString </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> GenericMethods.</span><span style="color:#50FA7B;">GetDefaultValue</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#FF79C6;">string</span><span style="color:#F8F8F2;">&gt;(); </span><span style="color:#6272A4;">// null</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">        Console.</span><span style="color:#50FA7B;">WriteLine</span><span style="color:#F8F8F2;">(defaultInt);  </span><span style="color:#6272A4;">// 输出: 0</span></span>
<span class="line"><span style="color:#F8F8F2;">        Console.</span><span style="color:#50FA7B;">WriteLine</span><span style="color:#F8F8F2;">(defaultString);  </span><span style="color:#6272A4;">// 输出: </span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="泛型结构" tabindex="-1"><a class="header-anchor" href="#泛型结构"><span>泛型结构</span></a></h3><div class="language-cs line-numbers-mode" data-highlighter="shiki" data-ext="cs" data-title="cs" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">public</span><span style="color:#FF79C6;"> struct</span><span style="color:#8BE9FD;font-style:italic;"> GenericStruct</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#FFB86C;font-style:italic;">T</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">{</span></span>
<span class="line"><span style="color:#FF79C6;">    public</span><span style="color:#8BE9FD;font-style:italic;"> T</span><span style="color:#F8F8F2;"> Value;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">    public</span><span style="color:#50FA7B;"> GenericStruct</span><span style="color:#F8F8F2;">(</span><span style="color:#8BE9FD;font-style:italic;">T</span><span style="color:#FFB86C;font-style:italic;"> value</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">    {</span></span>
<span class="line"><span style="color:#F8F8F2;">        Value </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> value;</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">class</span><span style="color:#8BE9FD;"> Program</span></span>
<span class="line"><span style="color:#F8F8F2;">{</span></span>
<span class="line"><span style="color:#FF79C6;">    static</span><span style="color:#FF79C6;"> void</span><span style="color:#50FA7B;"> Main</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"><span style="color:#F8F8F2;">    {</span></span>
<span class="line"><span style="color:#FF79C6;">        var</span><span style="color:#F8F8F2;"> intStruct </span><span style="color:#FF79C6;">=</span><span style="color:#FF79C6;"> new</span><span style="color:#8BE9FD;font-style:italic;"> GenericStruct</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#FF79C6;">int</span><span style="color:#F8F8F2;">&gt;(</span><span style="color:#BD93F9;">42</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">        Console.</span><span style="color:#50FA7B;">WriteLine</span><span style="color:#F8F8F2;">(intStruct.Value);  </span><span style="color:#6272A4;">// 输出: 42</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">        var</span><span style="color:#F8F8F2;"> stringStruct </span><span style="color:#FF79C6;">=</span><span style="color:#FF79C6;"> new</span><span style="color:#8BE9FD;font-style:italic;"> GenericStruct</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#FF79C6;">string</span><span style="color:#F8F8F2;">&gt;(</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">Hello</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">        Console.</span><span style="color:#50FA7B;">WriteLine</span><span style="color:#F8F8F2;">(stringStruct.Value);  </span><span style="color:#6272A4;">// 输出: Hello</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="泛型委托" tabindex="-1"><a class="header-anchor" href="#泛型委托"><span>泛型委托</span></a></h3><div class="language-cs line-numbers-mode" data-highlighter="shiki" data-ext="cs" data-title="cs" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">public</span><span style="color:#FF79C6;"> delegate</span><span style="color:#8BE9FD;font-style:italic;"> T</span><span style="color:#8BE9FD;font-style:italic;"> MyDelegate</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#FFB86C;font-style:italic;">T</span><span style="color:#F8F8F2;">&gt;(</span><span style="color:#8BE9FD;font-style:italic;">T</span><span style="color:#FFB86C;font-style:italic;"> arg</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">public</span><span style="color:#FF79C6;"> class</span><span style="color:#8BE9FD;"> GenericDelegate</span></span>
<span class="line"><span style="color:#F8F8F2;">{</span></span>
<span class="line"><span style="color:#FF79C6;">    public</span><span style="color:#FF79C6;"> static</span><span style="color:#8BE9FD;font-style:italic;"> T</span><span style="color:#50FA7B;"> Process</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#FFB86C;font-style:italic;">T</span><span style="color:#F8F8F2;">&gt;(</span><span style="color:#8BE9FD;font-style:italic;">T</span><span style="color:#FFB86C;font-style:italic;"> arg</span><span style="color:#F8F8F2;">, </span><span style="color:#8BE9FD;font-style:italic;">MyDelegate</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#8BE9FD;font-style:italic;">T</span><span style="color:#F8F8F2;">&gt; </span><span style="color:#FFB86C;font-style:italic;">func</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">    {</span></span>
<span class="line"><span style="color:#FF79C6;">        return</span><span style="color:#50FA7B;"> func</span><span style="color:#F8F8F2;">(arg);</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">class</span><span style="color:#8BE9FD;"> Program</span></span>
<span class="line"><span style="color:#F8F8F2;">{</span></span>
<span class="line"><span style="color:#FF79C6;">    static</span><span style="color:#FF79C6;"> void</span><span style="color:#50FA7B;"> Main</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"><span style="color:#F8F8F2;">    {</span></span>
<span class="line"><span style="color:#FF79C6;">        int</span><span style="color:#F8F8F2;"> result </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> GenericDelegate.</span><span style="color:#50FA7B;">Process</span><span style="color:#F8F8F2;">(</span><span style="color:#BD93F9;">10</span><span style="color:#F8F8F2;">, (</span><span style="color:#FFB86C;font-style:italic;">x</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> x </span><span style="color:#FF79C6;">*</span><span style="color:#BD93F9;"> 2</span><span style="color:#F8F8F2;">);  </span><span style="color:#6272A4;">// 输出: 20</span></span>
<span class="line"><span style="color:#F8F8F2;">        Console.</span><span style="color:#50FA7B;">WriteLine</span><span style="color:#F8F8F2;">(result);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">        string</span><span style="color:#F8F8F2;"> result2 </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> GenericDelegate.</span><span style="color:#50FA7B;">Process</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">Hello</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">, (</span><span style="color:#FFB86C;font-style:italic;">x</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> x.</span><span style="color:#50FA7B;">ToUpper</span><span style="color:#F8F8F2;">());  </span><span style="color:#6272A4;">// 输出: HELLO</span></span>
<span class="line"><span style="color:#F8F8F2;">        Console.</span><span style="color:#50FA7B;">WriteLine</span><span style="color:#F8F8F2;">(result2);</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="泛型接口" tabindex="-1"><a class="header-anchor" href="#泛型接口"><span>泛型接口</span></a></h3><div class="language-cs line-numbers-mode" data-highlighter="shiki" data-ext="cs" data-title="cs" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">public</span><span style="color:#FF79C6;"> interface</span><span style="color:#8BE9FD;font-style:italic;"> IGenericInterface</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#FFB86C;font-style:italic;">T</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">{</span></span>
<span class="line"><span style="color:#8BE9FD;font-style:italic;">    T</span><span style="color:#50FA7B;"> GetItem</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">public</span><span style="color:#FF79C6;"> class</span><span style="color:#8BE9FD;"> GenericClass</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#FFB86C;font-style:italic;">T</span><span style="color:#F8F8F2;">&gt; : </span><span style="color:#8BE9FD;font-style:italic;">IGenericInterface</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#8BE9FD;font-style:italic;">T</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">{</span></span>
<span class="line"><span style="color:#FF79C6;">    private</span><span style="color:#8BE9FD;font-style:italic;"> T</span><span style="color:#F8F8F2;"> item;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">    public</span><span style="color:#50FA7B;"> GenericClass</span><span style="color:#F8F8F2;">(</span><span style="color:#8BE9FD;font-style:italic;">T</span><span style="color:#FFB86C;font-style:italic;"> item</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">    {</span></span>
<span class="line"><span style="color:#BD93F9;font-style:italic;">        this</span><span style="color:#F8F8F2;">.item </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> item;</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">    public</span><span style="color:#8BE9FD;font-style:italic;"> T</span><span style="color:#50FA7B;"> GetItem</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"><span style="color:#F8F8F2;">    {</span></span>
<span class="line"><span style="color:#FF79C6;">        return</span><span style="color:#F8F8F2;"> item;</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">class</span><span style="color:#8BE9FD;"> Program</span></span>
<span class="line"><span style="color:#F8F8F2;">{</span></span>
<span class="line"><span style="color:#FF79C6;">    static</span><span style="color:#FF79C6;"> void</span><span style="color:#50FA7B;"> Main</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"><span style="color:#F8F8F2;">    {</span></span>
<span class="line"><span style="color:#FF79C6;">        var</span><span style="color:#F8F8F2;"> intClass </span><span style="color:#FF79C6;">=</span><span style="color:#FF79C6;"> new</span><span style="color:#8BE9FD;font-style:italic;"> GenericClass</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#FF79C6;">int</span><span style="color:#F8F8F2;">&gt;(</span><span style="color:#BD93F9;">42</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">        Console.</span><span style="color:#50FA7B;">WriteLine</span><span style="color:#F8F8F2;">(intClass.</span><span style="color:#50FA7B;">GetItem</span><span style="color:#F8F8F2;">());  </span><span style="color:#6272A4;">// 输出: 42</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">        var</span><span style="color:#F8F8F2;"> stringClass </span><span style="color:#FF79C6;">=</span><span style="color:#FF79C6;"> new</span><span style="color:#8BE9FD;font-style:italic;"> GenericClass</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#FF79C6;">string</span><span style="color:#F8F8F2;">&gt;(</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">Hello</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">); </span><span style="color:#6272A4;">// 输出: Hello</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="协变" tabindex="-1"><a class="header-anchor" href="#协变"><span>协变</span></a></h3><p>协变允许你将某种类型的泛型参数替换为其派生类。这在输出（返回）类型的场景中非常有用。协变通常用于返回值的泛型接口和委托。协变通过 <code>out</code> 关键字来实现。</p><div class="language-cs line-numbers-mode" data-highlighter="shiki" data-ext="cs" data-title="cs" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">public</span><span style="color:#FF79C6;"> class</span><span style="color:#8BE9FD;"> Animal</span><span style="color:#F8F8F2;"> { }</span></span>
<span class="line"><span style="color:#FF79C6;">public</span><span style="color:#FF79C6;"> class</span><span style="color:#8BE9FD;"> Dog</span><span style="color:#F8F8F2;"> : </span><span style="color:#8BE9FD;font-style:italic;">Animal</span><span style="color:#F8F8F2;"> { }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">public</span><span style="color:#FF79C6;"> interface</span><span style="color:#8BE9FD;font-style:italic;"> IAnimalRepository</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#FF79C6;">out</span><span style="color:#FFB86C;font-style:italic;"> T</span><span style="color:#F8F8F2;">&gt; </span><span style="color:#FF79C6;">where</span><span style="color:#FFB86C;font-style:italic;"> T</span><span style="color:#F8F8F2;"> : </span><span style="color:#8BE9FD;font-style:italic;">Animal</span></span>
<span class="line"><span style="color:#F8F8F2;">{</span></span>
<span class="line"><span style="color:#8BE9FD;font-style:italic;">    T</span><span style="color:#50FA7B;"> GetAnimal</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">public</span><span style="color:#FF79C6;"> class</span><span style="color:#8BE9FD;"> AnimalRepository</span><span style="color:#F8F8F2;"> : </span><span style="color:#8BE9FD;font-style:italic;">IAnimalRepository</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#8BE9FD;font-style:italic;">Animal</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">{</span></span>
<span class="line"><span style="color:#FF79C6;">    public</span><span style="color:#8BE9FD;font-style:italic;"> Animal</span><span style="color:#50FA7B;"> GetAnimal</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"><span style="color:#F8F8F2;">    {</span></span>
<span class="line"><span style="color:#FF79C6;">        return</span><span style="color:#FF79C6;"> new</span><span style="color:#8BE9FD;font-style:italic;"> Animal</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">public</span><span style="color:#FF79C6;"> class</span><span style="color:#8BE9FD;"> DogRepository</span><span style="color:#F8F8F2;"> : </span><span style="color:#8BE9FD;font-style:italic;">IAnimalRepository</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#8BE9FD;font-style:italic;">Dog</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">{</span></span>
<span class="line"><span style="color:#FF79C6;">    public</span><span style="color:#8BE9FD;font-style:italic;"> Dog</span><span style="color:#50FA7B;"> GetAnimal</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"><span style="color:#F8F8F2;">    {</span></span>
<span class="line"><span style="color:#FF79C6;">        return</span><span style="color:#FF79C6;"> new</span><span style="color:#8BE9FD;font-style:italic;"> Dog</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">class</span><span style="color:#8BE9FD;"> Program</span></span>
<span class="line"><span style="color:#F8F8F2;">{</span></span>
<span class="line"><span style="color:#FF79C6;">    static</span><span style="color:#FF79C6;"> void</span><span style="color:#50FA7B;"> Main</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"><span style="color:#F8F8F2;">    {</span></span>
<span class="line"><span style="color:#8BE9FD;font-style:italic;">        IAnimalRepository</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#8BE9FD;font-style:italic;">Animal</span><span style="color:#F8F8F2;">&gt; animalRepo </span><span style="color:#FF79C6;">=</span><span style="color:#FF79C6;"> new</span><span style="color:#8BE9FD;font-style:italic;"> AnimalRepository</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#8BE9FD;font-style:italic;">        IAnimalRepository</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#8BE9FD;font-style:italic;">Dog</span><span style="color:#F8F8F2;">&gt; dogRepo </span><span style="color:#FF79C6;">=</span><span style="color:#FF79C6;"> new</span><span style="color:#8BE9FD;font-style:italic;"> DogRepository</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">        // 使用协变，dogRepo可以赋值给animalRepo</span></span>
<span class="line"><span style="color:#F8F8F2;">        animalRepo </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> dogRepo;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#8BE9FD;font-style:italic;">        Animal</span><span style="color:#F8F8F2;"> animal </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> animalRepo.</span><span style="color:#50FA7B;">GetAnimal</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#8BE9FD;font-style:italic;">        Dog</span><span style="color:#F8F8F2;"> dog </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> dogRepo.</span><span style="color:#50FA7B;">GetAnimal</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="逆变" tabindex="-1"><a class="header-anchor" href="#逆变"><span>逆变</span></a></h3><p>逆变允许你将某种类型的泛型参数替换为其基类。这在输入（参数）类型的场景中非常有用。逆变通常用于参数的泛型接口和委托。逆变通过 <code>in</code> 关键字来实现。</p><div class="language-cs line-numbers-mode" data-highlighter="shiki" data-ext="cs" data-title="cs" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">public</span><span style="color:#FF79C6;"> interface</span><span style="color:#8BE9FD;font-style:italic;"> IAnimalRepository</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#FF79C6;">in</span><span style="color:#FFB86C;font-style:italic;"> T</span><span style="color:#F8F8F2;">&gt; </span><span style="color:#FF79C6;">where</span><span style="color:#FFB86C;font-style:italic;"> T</span><span style="color:#F8F8F2;"> : </span><span style="color:#8BE9FD;font-style:italic;">Animal</span></span>
<span class="line"><span style="color:#F8F8F2;">{</span></span>
<span class="line"><span style="color:#FF79C6;">    void</span><span style="color:#50FA7B;"> AddAnimal</span><span style="color:#F8F8F2;">(</span><span style="color:#8BE9FD;font-style:italic;">T</span><span style="color:#FFB86C;font-style:italic;"> animal</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">public</span><span style="color:#FF79C6;"> class</span><span style="color:#8BE9FD;"> AnimalRepository</span><span style="color:#F8F8F2;"> : </span><span style="color:#8BE9FD;font-style:italic;">IAnimalRepository</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#8BE9FD;font-style:italic;">Animal</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">{</span></span>
<span class="line"><span style="color:#FF79C6;">    public</span><span style="color:#FF79C6;"> void</span><span style="color:#50FA7B;"> AddAnimal</span><span style="color:#F8F8F2;">(</span><span style="color:#8BE9FD;font-style:italic;">Animal</span><span style="color:#FFB86C;font-style:italic;"> animal</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">    {</span></span>
<span class="line"><span style="color:#6272A4;">        // 添加动物到仓库</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">public</span><span style="color:#FF79C6;"> class</span><span style="color:#8BE9FD;"> DogRepository</span><span style="color:#F8F8F2;"> : </span><span style="color:#8BE9FD;font-style:italic;">IAnimalRepository</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#8BE9FD;font-style:italic;">Dog</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">{</span></span>
<span class="line"><span style="color:#FF79C6;">    public</span><span style="color:#FF79C6;"> void</span><span style="color:#50FA7B;"> AddAnimal</span><span style="color:#F8F8F2;">(</span><span style="color:#8BE9FD;font-style:italic;">Dog</span><span style="color:#FFB86C;font-style:italic;"> dog</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">    {</span></span>
<span class="line"><span style="color:#6272A4;">        // 添加狗到仓库</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">class</span><span style="color:#8BE9FD;"> Program</span></span>
<span class="line"><span style="color:#F8F8F2;">{</span></span>
<span class="line"><span style="color:#FF79C6;">    static</span><span style="color:#FF79C6;"> void</span><span style="color:#50FA7B;"> Main</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"><span style="color:#F8F8F2;">    {</span></span>
<span class="line"><span style="color:#8BE9FD;font-style:italic;">        IAnimalRepository</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#8BE9FD;font-style:italic;">Dog</span><span style="color:#F8F8F2;">&gt; dogRepo </span><span style="color:#FF79C6;">=</span><span style="color:#FF79C6;"> new</span><span style="color:#8BE9FD;font-style:italic;"> DogRepository</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#8BE9FD;font-style:italic;">        IAnimalRepository</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#8BE9FD;font-style:italic;">Animal</span><span style="color:#F8F8F2;">&gt; animalRepo </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> dogRepo;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">        animalRepo.</span><span style="color:#50FA7B;">AddAnimal</span><span style="color:#F8F8F2;">(</span><span style="color:#FF79C6;">new</span><span style="color:#8BE9FD;font-style:italic;"> Dog</span><span style="color:#F8F8F2;">());</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="参考" tabindex="-1"><a class="header-anchor" href="#参考"><span>参考</span></a></h1><p><a href="https://blog.csdn.net/qq_51040417/article/details/141551584" target="_blank" rel="noopener noreferrer">https://blog.csdn.net/qq_51040417/article/details/141551584</a></p>`,138)]))}const F=n(p,[["render",o],["__file","base.html.vue"]]),r=JSON.parse('{"path":"/c-sharp/base.html","title":"C# 基础","lang":"en-US","frontmatter":{"title":"C# 基础","category":["c-sharp"],"date":"2024-01-02T00:00:00.000Z","description":"概括 .Net和C#的关系 一、asp.net是一种用来快速创建动态Web网站的技术，不是语言，它使用C#(或者VB.net)为开发语言。C#是一种面向对象的编程语言；net只是一个框架，.net中所有的编程语言，比如c#、.net等编写的程序必须在.net framework框架下运行。 .NET 分成两个方面：WinForm和WebForm，ASP...","head":[["meta",{"property":"og:url","content":"https://luxiag.github.io/luxiag/blog/c-sharp/base.html"}],["meta",{"property":"og:title","content":"C# 基础"}],["meta",{"property":"og:description","content":"概括 .Net和C#的关系 一、asp.net是一种用来快速创建动态Web网站的技术，不是语言，它使用C#(或者VB.net)为开发语言。C#是一种面向对象的编程语言；net只是一个框架，.net中所有的编程语言，比如c#、.net等编写的程序必须在.net framework框架下运行。 .NET 分成两个方面：WinForm和WebForm，ASP..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2024-11-03T14:28:14.000Z"}],["meta",{"property":"article:published_time","content":"2024-01-02T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-11-03T14:28:14.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"C# 基础\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-01-02T00:00:00.000Z\\",\\"dateModified\\":\\"2024-11-03T14:28:14.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"luxiag\\",\\"url\\":\\"https://luxiag.github.io/luxiag\\"}]}"]]},"headers":[{"level":2,"title":".Net和C#的关系","slug":"net和c-的关系","link":"#net和c-的关系","children":[]},{"level":2,"title":"标识符","slug":"标识符","link":"#标识符","children":[]},{"level":2,"title":"关键字","slug":"关键字","link":"#关键字","children":[]},{"level":2,"title":"Main方法","slug":"main方法","link":"#main方法","children":[]},{"level":2,"title":"CLI和CLR","slug":"cli和clr","link":"#cli和clr","children":[{"level":3,"title":"CLI","slug":"cli","link":"#cli","children":[]},{"level":3,"title":"CLR","slug":"clr","link":"#clr","children":[]},{"level":3,"title":"JIT编译器","slug":"jit编译器","link":"#jit编译器","children":[]},{"level":3,"title":"AOT编译器","slug":"aot编译器","link":"#aot编译器","children":[]}]},{"level":2,"title":"命名空间","slug":"命名空间","link":"#命名空间","children":[{"level":3,"title":"using指令","slug":"using指令","link":"#using指令","children":[]}]},{"level":2,"title":"结构","slug":"结构","link":"#结构","children":[{"level":3,"title":"构造函数","slug":"构造函数","link":"#构造函数","children":[]}]},{"level":2,"title":"枚举","slug":"枚举","link":"#枚举","children":[{"level":3,"title":"指定枚举类型","slug":"指定枚举类型","link":"#指定枚举类型","children":[]},{"level":3,"title":"枚举转换","slug":"枚举转换","link":"#枚举转换","children":[]},{"level":3,"title":"位标志","slug":"位标志","link":"#位标志","children":[]}]},{"level":2,"title":"数组","slug":"数组","link":"#数组","children":[{"level":3,"title":"矩形数组","slug":"矩形数组","link":"#矩形数组","children":[]},{"level":3,"title":"交错数组","slug":"交错数组","link":"#交错数组","children":[]}]},{"level":2,"title":"类","slug":"类","link":"#类","children":[{"level":3,"title":"成员","slug":"成员","link":"#成员","children":[]},{"level":3,"title":"继承","slug":"继承","link":"#继承","children":[]}]},{"level":2,"title":"记录","slug":"记录","link":"#记录","children":[]},{"level":2,"title":"接口","slug":"接口","link":"#接口","children":[{"level":3,"title":"实现具有重复成员的接口","slug":"实现具有重复成员的接口","link":"#实现具有重复成员的接口","children":[]},{"level":3,"title":"多个接口的引用","slug":"多个接口的引用","link":"#多个接口的引用","children":[]},{"level":3,"title":"派生成员作为实现","slug":"派生成员作为实现","link":"#派生成员作为实现","children":[]},{"level":3,"title":"显示接口实现","slug":"显示接口实现","link":"#显示接口实现","children":[]},{"level":3,"title":"接口继承接口","slug":"接口继承接口","link":"#接口继承接口","children":[]}]},{"level":2,"title":"泛型","slug":"泛型","link":"#泛型","children":[{"level":3,"title":"泛型类","slug":"泛型类","link":"#泛型类","children":[]},{"level":3,"title":"参数约束","slug":"参数约束","link":"#参数约束","children":[]},{"level":3,"title":"泛型方法","slug":"泛型方法","link":"#泛型方法","children":[]},{"level":3,"title":"泛型结构","slug":"泛型结构","link":"#泛型结构","children":[]},{"level":3,"title":"泛型委托","slug":"泛型委托","link":"#泛型委托","children":[]},{"level":3,"title":"泛型接口","slug":"泛型接口","link":"#泛型接口","children":[]},{"level":3,"title":"协变","slug":"协变","link":"#协变","children":[]},{"level":3,"title":"逆变","slug":"逆变","link":"#逆变","children":[]}]}],"git":{"createdTime":1730211338000,"updatedTime":1730644094000,"contributors":[{"name":"luxiag","email":"luxiag@qq.com","commits":2}]},"readingTime":{"minutes":22.16,"words":6648},"filePathRelative":"c-sharp/base.md","localizedDate":"January 2, 2024","excerpt":"\\n<div class=\\"language-cs line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"cs\\" data-title=\\"cs\\" style=\\"background-color:#282A36;color:#F8F8F2\\"><pre class=\\"shiki dracula vp-code\\"><code><span class=\\"line\\"><span style=\\"color:#6272A4\\">// 命名空间</span></span>\\n<span class=\\"line\\"><span style=\\"color:#FF79C6\\">using</span><span style=\\"color:#8BE9FD;font-style:italic\\"> System</span><span style=\\"color:#F8F8F2\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color:#6272A4\\">// 命名空间</span></span>\\n<span class=\\"line\\"><span style=\\"color:#FF79C6\\">namespace</span><span style=\\"color:#8BE9FD;font-style:italic\\"> Simple</span><span style=\\"color:#F8F8F2\\"> {</span></span>\\n<span class=\\"line\\"><span style=\\"color:#6272A4\\">  // 类</span></span>\\n<span class=\\"line\\"><span style=\\"color:#FF79C6\\">  class</span><span style=\\"color:#8BE9FD\\"> Program</span><span style=\\"color:#F8F8F2\\"> {</span></span>\\n<span class=\\"line\\"><span style=\\"color:#6272A4\\">    // </span></span>\\n<span class=\\"line\\"><span style=\\"color:#FF79C6\\">    static</span><span style=\\"color:#FF79C6\\"> void</span><span style=\\"color:#50FA7B\\"> Main</span><span style=\\"color:#F8F8F2\\">(){</span></span>\\n<span class=\\"line\\"><span style=\\"color:#F8F8F2\\">      Console.</span><span style=\\"color:#50FA7B\\">WriteLine</span><span style=\\"color:#F8F8F2\\">(</span><span style=\\"color:#E9F284\\">\\"</span><span style=\\"color:#F1FA8C\\">Hello World!</span><span style=\\"color:#E9F284\\">\\"</span><span style=\\"color:#F8F8F2\\">);</span></span>\\n<span class=\\"line\\"><span style=\\"color:#F8F8F2\\">    }</span></span>\\n<span class=\\"line\\"><span style=\\"color:#F8F8F2\\">  }</span></span>\\n<span class=\\"line\\"><span style=\\"color:#F8F8F2\\">}</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{F as comp,r as data};
