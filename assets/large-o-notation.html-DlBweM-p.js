import{_ as e,c as n,a,o as i}from"./app-DwrwhhBt.js";const o="/blog/assets/0407071739104462101-CdFw0TgV.png",l="/blog/assets/0407071739104476238-9TJ0lx2K.png",r="/blog/assets/0407071739104531958-Dy0cPkZ3.png",p="/blog/assets/0407071739104558034-Ctsm9kGU.png",g="/blog/assets/0407071739104577121-Bqn7p-YM.png",s="/blog/assets/0407071739104596762-BoFBnTWN.png",c="/blog/assets/0407071739104664776-CGxLu9L4.png",d="/blog/assets/0407071739104690104-IwK-nnQQ.png",h="/blog/assets/0407071739104798878-LudnhsDh.png",m="/blog/assets/0407071739104819509-C12-0hjQ.png",f={};function u(b,t){return i(),n("div",null,t[0]||(t[0]=[a('<p><strong>大 O 表示法是一种特殊的表示法，指出了算法的速度有多快。</strong> 将算法的所有步骤转换为代数项，然后排除不会对问题的整体复杂度产生较大影响的较低阶常数和系数</p><h2 id="时间复杂度" tabindex="-1"><a class="header-anchor" href="#时间复杂度"><span>时间复杂度</span></a></h2><p>用于评估执行程序所消耗的时间，可以估算出程序对处理器的使用程度。 时间复杂度的公式是：<code>T(n) = O( f(n) )</code>，其中f(n) 表示每行代码执行次数之和，而 O 表示正比例关系，这个公式的全称是：算法的渐进时间复杂度。</p><table><thead><tr><th>常见算法</th><th>时间复杂度</th></tr></thead><tbody><tr><td>简单查找</td><td>O(n)</td></tr><tr><td>二分查找</td><td>O($log_{}{n}$)</td></tr><tr><td>快速排序</td><td>O($nlog_{}{n}$)</td></tr><tr><td>选择排序</td><td>O($n^{2}$)</td></tr></tbody></table><h2 id="空间复杂度" tabindex="-1"><a class="header-anchor" href="#空间复杂度"><span>空间复杂度</span></a></h2><p>用于评估执行程序所占用的内存空间，可以估算出程序对计算机内存的使用程度。</p><h2 id="o-1-常数时间" tabindex="-1"><a class="header-anchor" href="#o-1-常数时间"><span>O(1) - 常数时间</span></a></h2><p>对于常数时间，不管多少人参加生日聚会，都只需要做一个蛋糕。因此制作蛋糕的时间是一个常量。</p><figure><img src="'+o+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>一个 O(1) 操作的例子是通过 index 访问数组的元素。从 10 个元素的数组检索一个元素和从 100 万个元素的数组里检索一个元素一样快。</p><figure><img src="'+l+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="o-log-n-对数时间" tabindex="-1"><a class="header-anchor" href="#o-log-n-对数时间"><span>O(log n) - 对数时间</span></a></h2><p>第一个到的人独享蛋糕，接下来到的两个人分一个蛋糕，在接着到的四个人分一个蛋糕，以此类推。</p><p>因此一个人聚会需要一个蛋糕。两人或者三人聚会需要两个蛋糕。4 - 7人聚会需要 3 个蛋糕。8 - 15 人聚会需要四个蛋糕。 ‘n’ 个人聚会需要 log_2_(n) 个蛋糕。</p><figure><img src="'+r+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>一个 O(log n) 操作的例子是有序数组的二分查找。</p><p>二分查找算法找到数组中间的元素，和要找的元素进行对比。因为数组是有序的，所以可以知道要找的值在数组的哪一半里面。</p><p>然后再一半的数组里面重复这一过程。对于 16 个元素的数组，第一次迭代将搜索范围缩小到 8，然后依次是 4、2、1。最多 4 次，也就是 log_2_(16) 次，迭代结束。</p><figure><img src="'+p+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="o-n-线性时间" tabindex="-1"><a class="header-anchor" href="#o-n-线性时间"><span>O(n) - 线性时间</span></a></h2><p>每个参会的人都有一个蛋糕。如果 ‘n’ 个人参会需要准备 ‘n’ 个蛋糕，因此花费的时间和参会的人数相关。</p><figure><img src="'+g+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>一个 O(n) 操作的例子是用最粗暴的方式在数组里遍历找到指定元素。在 10 个元素的数组里，最坏情况下需要找十次才能找到指定元素。在 100 万个元素的数组里，可能需要找 100 万次。</p><figure><img src="'+s+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="o-n-2-平方时间" tabindex="-1"><a class="header-anchor" href="#o-n-2-平方时间"><span>O(n^2) - 平方时间</span></a></h2><p>一人参会需要 1 个蛋糕和 1 个签名。两人参会需要 2 个蛋糕，每个蛋糕都需要 2 个名字（一共 4 个名字）。三人参会需要 3个蛋糕，每个蛋糕都有 3 个名字，一共 9 个名字。</p><figure><img src="'+c+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>O(n^2) 操作的一个例子是暴力搜索数组中的重复项。遍历数组中的所有元素，对于每一个元素，在遍历一遍数组看是否有和其相同的元素。 对于 10 个元素的数组，外部需要循环 10 次，每一次外部循环都需要内部循环 10 次，总共是 100 次。对于 100 万个元素的数组，需要 10000 亿次。</p><figure><img src="'+d+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="o-n-阶乘时间" tabindex="-1"><a class="header-anchor" href="#o-n-阶乘时间"><span>O(n!) - 阶乘时间</span></a></h2><p>阶乘时间，所有参会的人进行法式滚球比赛，赢的人拿走蛋糕。</p><p>还存在一个小问题，先投球的玩家会更劣势。为了解决这个问题，同时进行多场比赛，每组都会先手一次。所有比赛的排列都会写在蛋糕的奶油上。</p><p>这意味着两人参会会有两场比赛，每一个选手都会依次先手。三人参会会有 6 场比赛（假设选手为安娜 A、布莱恩 B 和克里斯 C，那么排列会是 ABC、ACB、BAC、BCA、CAB、CBA）。</p><figure><img src="'+h+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>n! 的计算是从 n 到 1 的所有数相乘， “n <em>(n - 1)</em> (n - 2) …… <em>2</em> 1”。对于两人聚会就是 2 <em>1 也就是 2。对于三人聚会就是 3</em> 2 * 1，也就是 6。</p><figure><img src="'+m+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h1 id="参考" tabindex="-1"><a class="header-anchor" href="#参考"><span>参考</span></a></h1><ul><li><a href="https://book.douban.com/subject/26616292/" target="_blank" rel="noopener noreferrer">算法图解</a></li><li><a href="https://www.freecodecamp.org/chinese/news/big-o-notation/" target="_blank" rel="noopener noreferrer">大O表示法</a></li></ul>',38)]))}const x=e(f,[["render",u],["__file","large-o-notation.html.vue"]]),O=JSON.parse('{"path":"/algorithm/large-o-notation.html","title":"大O表示法","lang":"en-US","frontmatter":{"title":"大O表示法","reference":"算法图解","date":"2022-09-15T00:00:00.000Z","category":["算法"],"tag":["算法图解"],"description":"大 O 表示法是一种特殊的表示法，指出了算法的速度有多快。 将算法的所有步骤转换为代数项，然后排除不会对问题的整体复杂度产生较大影响的较低阶常数和系数 时间复杂度 用于评估执行程序所消耗的时间，可以估算出程序对处理器的使用程度。 时间复杂度的公式是：T(n) = O( f(n) )，其中f(n) 表示每行代码执行次数之和，而 O 表示正比例关系，这个公...","head":[["meta",{"property":"og:url","content":"https://luxiag.github.io/luxiag/blog/algorithm/large-o-notation.html"}],["meta",{"property":"og:title","content":"大O表示法"}],["meta",{"property":"og:description","content":"大 O 表示法是一种特殊的表示法，指出了算法的速度有多快。 将算法的所有步骤转换为代数项，然后排除不会对问题的整体复杂度产生较大影响的较低阶常数和系数 时间复杂度 用于评估执行程序所消耗的时间，可以估算出程序对处理器的使用程度。 时间复杂度的公式是：T(n) = O( f(n) )，其中f(n) 表示每行代码执行次数之和，而 O 表示正比例关系，这个公..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2025-02-09T14:06:21.000Z"}],["meta",{"property":"article:tag","content":"算法图解"}],["meta",{"property":"article:published_time","content":"2022-09-15T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-02-09T14:06:21.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"大O表示法\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-09-15T00:00:00.000Z\\",\\"dateModified\\":\\"2025-02-09T14:06:21.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"luxiag\\",\\"url\\":\\"https://luxiag.github.io/luxiag\\"}]}"]]},"headers":[{"level":2,"title":"时间复杂度","slug":"时间复杂度","link":"#时间复杂度","children":[]},{"level":2,"title":"空间复杂度","slug":"空间复杂度","link":"#空间复杂度","children":[]},{"level":2,"title":"O(1) - 常数时间","slug":"o-1-常数时间","link":"#o-1-常数时间","children":[]},{"level":2,"title":"O(log n) - 对数时间","slug":"o-log-n-对数时间","link":"#o-log-n-对数时间","children":[]},{"level":2,"title":"O(n) - 线性时间","slug":"o-n-线性时间","link":"#o-n-线性时间","children":[]},{"level":2,"title":"O(n^2) - 平方时间","slug":"o-n-2-平方时间","link":"#o-n-2-平方时间","children":[]},{"level":2,"title":"O(n!) - 阶乘时间","slug":"o-n-阶乘时间","link":"#o-n-阶乘时间","children":[]}],"git":{"createdTime":1663833246000,"updatedTime":1739109981000,"contributors":[{"name":"卢祥","email":"example@gmail.com","commits":3},{"name":"luxiag","email":"luxiag@qq.com","commits":1},{"name":"luxiang","email":"luxiag@qq.com","commits":1}]},"readingTime":{"minutes":3.86,"words":1159},"filePathRelative":"algorithm/large-o-notation.md","localizedDate":"September 15, 2022","excerpt":"<p><strong>大 O 表示法是一种特殊的表示法，指出了算法的速度有多快。</strong>\\n将算法的所有步骤转换为代数项，然后排除不会对问题的整体复杂度产生较大影响的较低阶常数和系数</p>\\n","autoDesc":true}');export{x as comp,O as data};
