import{_ as n,c as l,a,o as e}from"./app-DS_HEYrV.js";const p={};function o(t,s){return e(),l("div",null,s[0]||(s[0]=[a(`<h1 id="高级类型" tabindex="-1"><a class="header-anchor" href="#高级类型"><span>高级类型</span></a></h1><h2 id="intersection-types-交叉类型" tabindex="-1"><a class="header-anchor" href="#intersection-types-交叉类型"><span>Intersection Types 交叉类型</span></a></h2><p>交叉类型是将多个类型合并为一个类型，表示同时具备多个类型的特性。</p><div class="language-ts line-numbers-mode" data-highlighter="shiki" data-ext="ts" data-title="ts" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">type</span><span style="color:#8BE9FD;font-style:italic;"> A</span><span style="color:#FF79C6;"> =</span><span style="color:#F8F8F2;"> { name</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> string</span><span style="color:#F8F8F2;"> };</span></span>
<span class="line"><span style="color:#FF79C6;">type</span><span style="color:#8BE9FD;font-style:italic;"> B</span><span style="color:#FF79C6;"> =</span><span style="color:#F8F8F2;"> { age</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> number</span><span style="color:#F8F8F2;"> };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">type</span><span style="color:#8BE9FD;font-style:italic;"> C</span><span style="color:#FF79C6;"> =</span><span style="color:#8BE9FD;font-style:italic;"> A</span><span style="color:#FF79C6;"> &amp;</span><span style="color:#8BE9FD;font-style:italic;"> B</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> c</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> C</span><span style="color:#FF79C6;"> =</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  name</span><span style="color:#FF79C6;">:</span><span style="color:#E9F284;"> &quot;</span><span style="color:#F1FA8C;">张三</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">  age</span><span style="color:#FF79C6;">:</span><span style="color:#BD93F9;"> 18</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">};</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="union-types-联合类型" tabindex="-1"><a class="header-anchor" href="#union-types-联合类型"><span>Union Types 联合类型</span></a></h2><p>联合类型表示一个值可以是几种类型之一。</p><div class="language-ts line-numbers-mode" data-highlighter="shiki" data-ext="ts" data-title="ts" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">type</span><span style="color:#8BE9FD;font-style:italic;"> A</span><span style="color:#FF79C6;"> =</span><span style="color:#8BE9FD;font-style:italic;"> string</span><span style="color:#FF79C6;"> |</span><span style="color:#8BE9FD;font-style:italic;"> number</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> a</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> A</span><span style="color:#FF79C6;"> =</span><span style="color:#E9F284;"> &quot;</span><span style="color:#F1FA8C;">hello</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> b</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> A</span><span style="color:#FF79C6;"> =</span><span style="color:#BD93F9;"> 123</span><span style="color:#F8F8F2;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="type-aliases-类型别名" tabindex="-1"><a class="header-anchor" href="#type-aliases-类型别名"><span>Type Aliases 类型别名</span></a></h2><p>类型别名用来给一个类型起一个新名字。</p><div class="language-ts line-numbers-mode" data-highlighter="shiki" data-ext="ts" data-title="ts" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">type</span><span style="color:#8BE9FD;font-style:italic;"> A</span><span style="color:#FF79C6;"> =</span><span style="color:#F8F8F2;"> { name</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> string</span><span style="color:#F8F8F2;"> };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> a</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> A</span><span style="color:#FF79C6;"> =</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  name</span><span style="color:#FF79C6;">:</span><span style="color:#E9F284;"> &quot;</span><span style="color:#F1FA8C;">张三</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">};</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="type-assertions-类型断言" tabindex="-1"><a class="header-anchor" href="#type-assertions-类型断言"><span>Type Assertions 类型断言</span></a></h2><p>类型断言可以用来告诉编译器变量的实际类型。</p><div class="language-ts line-numbers-mode" data-highlighter="shiki" data-ext="ts" data-title="ts" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> a </span><span style="color:#FF79C6;">=</span><span style="color:#E9F284;"> &quot;</span><span style="color:#F1FA8C;">hello</span><span style="color:#E9F284;">&quot;</span><span style="color:#FF79C6;"> as</span><span style="color:#8BE9FD;font-style:italic;"> string</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> b </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> &lt;</span><span style="color:#8BE9FD;font-style:italic;">string</span><span style="color:#F8F8F2;">&gt;</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">hello</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="type-index-类型索引" tabindex="-1"><a class="header-anchor" href="#type-index-类型索引"><span>Type Index 类型索引</span></a></h2><p>类型索引可以用来获取一个类型的某个属性的类型。</p><div class="language-ts line-numbers-mode" data-highlighter="shiki" data-ext="ts" data-title="ts" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">type</span><span style="color:#8BE9FD;font-style:italic;"> A</span><span style="color:#FF79C6;"> =</span><span style="color:#F8F8F2;"> { name</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> string</span><span style="color:#F8F8F2;">; age</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> number</span><span style="color:#F8F8F2;"> };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">type</span><span style="color:#8BE9FD;font-style:italic;"> B</span><span style="color:#FF79C6;"> =</span><span style="color:#8BE9FD;font-style:italic;"> A</span><span style="color:#F8F8F2;">[</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">name</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">]; </span><span style="color:#6272A4;">// B 的类型为 string</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">type</span><span style="color:#8BE9FD;font-style:italic;"> C</span><span style="color:#FF79C6;"> =</span><span style="color:#8BE9FD;font-style:italic;"> A</span><span style="color:#F8F8F2;">[</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">name</span><span style="color:#E9F284;">&quot;</span><span style="color:#FF79C6;"> |</span><span style="color:#E9F284;"> &quot;</span><span style="color:#F1FA8C;">age</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">]; </span><span style="color:#6272A4;">// C 的类型为 string | number</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">type</span><span style="color:#8BE9FD;font-style:italic;"> D</span><span style="color:#FF79C6;"> =</span><span style="color:#8BE9FD;font-style:italic;"> A</span><span style="color:#F8F8F2;">[</span><span style="color:#FF79C6;">keyof</span><span style="color:#8BE9FD;font-style:italic;"> A</span><span style="color:#F8F8F2;">]; </span><span style="color:#6272A4;">// D 的类型为 string | number</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="type-constraints-类型约束" tabindex="-1"><a class="header-anchor" href="#type-constraints-类型约束"><span>Type Constraints 类型约束</span></a></h2><p>类型约束可以用来限制一个类型的范围。</p><div class="language-ts line-numbers-mode" data-highlighter="shiki" data-ext="ts" data-title="ts" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#6272A4;">// extends 关键词不同于在 class 后使用 extends 的继承作用，泛型内使用的主要作用是对泛型加以约束。</span></span>
<span class="line"><span style="color:#FF79C6;">function</span><span style="color:#50FA7B;"> process</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#FFB86C;font-style:italic;">T</span><span style="color:#FF79C6;"> extends</span><span style="color:#8BE9FD;font-style:italic;"> number</span><span style="color:#FF79C6;"> |</span><span style="color:#8BE9FD;font-style:italic;"> string</span><span style="color:#F8F8F2;">&gt;(</span><span style="color:#FFB86C;font-style:italic;">value</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> T</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#FF79C6;">  if</span><span style="color:#F8F8F2;"> (</span><span style="color:#FF79C6;">typeof</span><span style="color:#F8F8F2;"> value </span><span style="color:#FF79C6;">===</span><span style="color:#E9F284;"> &quot;</span><span style="color:#F1FA8C;">number</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">    console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(value.</span><span style="color:#50FA7B;">toFixed</span><span style="color:#F8F8F2;">(</span><span style="color:#BD93F9;">2</span><span style="color:#F8F8F2;">));</span></span>
<span class="line"><span style="color:#F8F8F2;">  } </span><span style="color:#FF79C6;">else</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">    console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(value.</span><span style="color:#50FA7B;">toUpperCase</span><span style="color:#F8F8F2;">());</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="type-mapping-类型映射" tabindex="-1"><a class="header-anchor" href="#type-mapping-类型映射"><span>Type Mapping 类型映射</span></a></h2><p>类型映射可以用来创建一个新的类型，该类型是原类型的每个属性的类型都被替换为新的类型。</p><div class="language-ts line-numbers-mode" data-highlighter="shiki" data-ext="ts" data-title="ts" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">type</span><span style="color:#8BE9FD;font-style:italic;"> A</span><span style="color:#FF79C6;"> =</span><span style="color:#F8F8F2;"> { name</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> string</span><span style="color:#F8F8F2;">; age</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> number</span><span style="color:#F8F8F2;"> };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">type</span><span style="color:#8BE9FD;font-style:italic;"> B</span><span style="color:#FF79C6;"> =</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#6272A4;">  // in 关键词的作用主要是做类型的映射，遍历已有接口的 key 或者是遍历联合类型。</span></span>
<span class="line"><span style="color:#F8F8F2;">  [</span><span style="color:#FFB86C;font-style:italic;">K</span><span style="color:#FF79C6;"> in</span><span style="color:#FF79C6;"> keyof</span><span style="color:#FFB86C;font-style:italic;"> A</span><span style="color:#F8F8F2;">]</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> A</span><span style="color:#F8F8F2;">[</span><span style="color:#8BE9FD;font-style:italic;">K</span><span style="color:#F8F8F2;">] </span><span style="color:#FF79C6;">extends</span><span style="color:#8BE9FD;font-style:italic;"> number</span><span style="color:#FF79C6;"> ?</span><span style="color:#8BE9FD;font-style:italic;"> string</span><span style="color:#FF79C6;"> :</span><span style="color:#8BE9FD;font-style:italic;"> number</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> b</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> B</span><span style="color:#FF79C6;"> =</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  name</span><span style="color:#FF79C6;">:</span><span style="color:#BD93F9;"> 123</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">  age</span><span style="color:#FF79C6;">:</span><span style="color:#E9F284;"> &quot;</span><span style="color:#F1FA8C;">hello</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">};</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="type-inference-类型推断" tabindex="-1"><a class="header-anchor" href="#type-inference-类型推断"><span>Type Inference 类型推断</span></a></h2><p>类型推断是指在声明变量时，编译器会根据赋值的内容自动推断变量的类型。</p><div class="language-ts line-numbers-mode" data-highlighter="shiki" data-ext="ts" data-title="ts" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> a </span><span style="color:#FF79C6;">=</span><span style="color:#E9F284;"> &quot;</span><span style="color:#F1FA8C;">hello</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">; </span><span style="color:#6272A4;">// a 的类型为 string</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="type-guards-类型守卫" tabindex="-1"><a class="header-anchor" href="#type-guards-类型守卫"><span>Type Guards 类型守卫</span></a></h2><p>类型守卫是一种特殊的类型谓词，用于在运行时检查变量的类型。</p><h3 id="typeof" tabindex="-1"><a class="header-anchor" href="#typeof"><span>typeof</span></a></h3><p>typeof 类型守卫可以用来检查一个变量的类型是否为某个值。</p><div class="language-ts line-numbers-mode" data-highlighter="shiki" data-ext="ts" data-title="ts" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">function</span><span style="color:#50FA7B;"> isString</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">value</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> any</span><span style="color:#F8F8F2;">)</span><span style="color:#FF79C6;">:</span><span style="color:#FFB86C;font-style:italic;"> value</span><span style="color:#FF79C6;"> is</span><span style="color:#8BE9FD;font-style:italic;"> string</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#FF79C6;">  return</span><span style="color:#FF79C6;"> typeof</span><span style="color:#F8F8F2;"> value </span><span style="color:#FF79C6;">===</span><span style="color:#E9F284;"> &quot;</span><span style="color:#F1FA8C;">string</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">function</span><span style="color:#50FA7B;"> isNumber</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">value</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> any</span><span style="color:#F8F8F2;">)</span><span style="color:#FF79C6;">:</span><span style="color:#FFB86C;font-style:italic;"> value</span><span style="color:#FF79C6;"> is</span><span style="color:#8BE9FD;font-style:italic;"> number</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#FF79C6;">  return</span><span style="color:#FF79C6;"> typeof</span><span style="color:#F8F8F2;"> value </span><span style="color:#FF79C6;">===</span><span style="color:#E9F284;"> &quot;</span><span style="color:#F1FA8C;">number</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">function</span><span style="color:#50FA7B;"> process</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">value</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> any</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#FF79C6;">  if</span><span style="color:#F8F8F2;"> (</span><span style="color:#50FA7B;">isString</span><span style="color:#F8F8F2;">(value)) {</span></span>
<span class="line"><span style="color:#F8F8F2;">    console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(value.</span><span style="color:#50FA7B;">toUpperCase</span><span style="color:#F8F8F2;">());</span></span>
<span class="line"><span style="color:#F8F8F2;">  } </span><span style="color:#FF79C6;">else</span><span style="color:#FF79C6;"> if</span><span style="color:#F8F8F2;"> (</span><span style="color:#50FA7B;">isNumber</span><span style="color:#F8F8F2;">(value)) {</span></span>
<span class="line"><span style="color:#F8F8F2;">    console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(value.</span><span style="color:#50FA7B;">toFixed</span><span style="color:#F8F8F2;">(</span><span style="color:#BD93F9;">2</span><span style="color:#F8F8F2;">));</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="instanceof" tabindex="-1"><a class="header-anchor" href="#instanceof"><span>instanceof</span></a></h3><p>instanceof 类型守卫可以用来检查一个变量是否为某个类的实例。</p><div class="language-ts line-numbers-mode" data-highlighter="shiki" data-ext="ts" data-title="ts" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">class</span><span style="color:#8BE9FD;"> A</span><span style="color:#F8F8F2;"> {}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">function</span><span style="color:#50FA7B;"> isA</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">value</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> any</span><span style="color:#F8F8F2;">)</span><span style="color:#FF79C6;">:</span><span style="color:#FFB86C;font-style:italic;"> value</span><span style="color:#FF79C6;"> is</span><span style="color:#8BE9FD;font-style:italic;"> A</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#FF79C6;">  return</span><span style="color:#F8F8F2;"> value </span><span style="color:#FF79C6;">instanceof</span><span style="color:#8BE9FD;font-style:italic;"> A</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">function</span><span style="color:#50FA7B;"> process</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">value</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> any</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#FF79C6;">  if</span><span style="color:#F8F8F2;"> (</span><span style="color:#50FA7B;">isA</span><span style="color:#F8F8F2;">(value)) {</span></span>
<span class="line"><span style="color:#F8F8F2;">    console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(value.name);</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="in" tabindex="-1"><a class="header-anchor" href="#in"><span>in</span></a></h3><p>in 类型守卫可以用来检查一个变量是否具有某个属性。</p><div class="language-ts line-numbers-mode" data-highlighter="shiki" data-ext="ts" data-title="ts" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">interface</span><span style="color:#8BE9FD;font-style:italic;"> A</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  name</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> string</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">interface</span><span style="color:#8BE9FD;font-style:italic;"> B</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  age</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> number</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">function</span><span style="color:#50FA7B;"> isA</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">value</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> any</span><span style="color:#F8F8F2;">)</span><span style="color:#FF79C6;">:</span><span style="color:#FFB86C;font-style:italic;"> value</span><span style="color:#FF79C6;"> is</span><span style="color:#8BE9FD;font-style:italic;"> A</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#FF79C6;">  return</span><span style="color:#E9F284;"> &quot;</span><span style="color:#F1FA8C;">name</span><span style="color:#E9F284;">&quot;</span><span style="color:#FF79C6;"> in</span><span style="color:#F8F8F2;"> value;</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#FF79C6;">function</span><span style="color:#50FA7B;"> isB</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">value</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> any</span><span style="color:#F8F8F2;">)</span><span style="color:#FF79C6;">:</span><span style="color:#FFB86C;font-style:italic;"> value</span><span style="color:#FF79C6;"> is</span><span style="color:#8BE9FD;font-style:italic;"> B</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#FF79C6;">  return</span><span style="color:#E9F284;"> &quot;</span><span style="color:#F1FA8C;">age</span><span style="color:#E9F284;">&quot;</span><span style="color:#FF79C6;"> in</span><span style="color:#F8F8F2;"> value;</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">function</span><span style="color:#50FA7B;"> process</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">value</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> any</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#FF79C6;">  if</span><span style="color:#F8F8F2;"> (</span><span style="color:#50FA7B;">isA</span><span style="color:#F8F8F2;">(value)) {</span></span>
<span class="line"><span style="color:#F8F8F2;">    console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(value.name);</span></span>
<span class="line"><span style="color:#F8F8F2;">  } </span><span style="color:#FF79C6;">else</span><span style="color:#FF79C6;"> if</span><span style="color:#F8F8F2;"> (</span><span style="color:#50FA7B;">isB</span><span style="color:#F8F8F2;">(value)) {</span></span>
<span class="line"><span style="color:#F8F8F2;">    console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(value.age);</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="type-compatibility-类型兼容性" tabindex="-1"><a class="header-anchor" href="#type-compatibility-类型兼容性"><span>Type Compatibility 类型兼容性</span></a></h2><p>类型兼容性是指一个类型是否可以赋值给另一个类型。</p><div class="language-ts line-numbers-mode" data-highlighter="shiki" data-ext="ts" data-title="ts" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">interface</span><span style="color:#8BE9FD;font-style:italic;"> A</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  name</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> string</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">interface</span><span style="color:#8BE9FD;font-style:italic;"> B</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  name</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> string</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">  age</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> number</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> a</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> A</span><span style="color:#FF79C6;"> =</span><span style="color:#F8F8F2;"> { name</span><span style="color:#FF79C6;">:</span><span style="color:#E9F284;"> &quot;</span><span style="color:#F1FA8C;">张三</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;"> };</span></span>
<span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> b</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> B</span><span style="color:#FF79C6;"> =</span><span style="color:#F8F8F2;"> { name</span><span style="color:#FF79C6;">:</span><span style="color:#E9F284;"> &quot;</span><span style="color:#F1FA8C;">李四</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">, age</span><span style="color:#FF79C6;">:</span><span style="color:#BD93F9;"> 18</span><span style="color:#F8F8F2;"> };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">a </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> b; </span><span style="color:#6272A4;">// OK</span></span>
<span class="line"><span style="color:#F8F8F2;">b </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> a; </span><span style="color:#6272A4;">// Error</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="generic-types-泛型" tabindex="-1"><a class="header-anchor" href="#generic-types-泛型"><span>Generic Types 泛型</span></a></h1><p>泛型是指在定义函数、接口或类时不指定具体的类型，而是在使用时指定类型。</p><div class="language-ts line-numbers-mode" data-highlighter="shiki" data-ext="ts" data-title="ts" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">function</span><span style="color:#50FA7B;"> identity</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#FFB86C;font-style:italic;">T</span><span style="color:#F8F8F2;">&gt;(</span><span style="color:#FFB86C;font-style:italic;">value</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> T</span><span style="color:#F8F8F2;">)</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> T</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#FF79C6;">  return</span><span style="color:#F8F8F2;"> value;</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> a </span><span style="color:#FF79C6;">=</span><span style="color:#50FA7B;"> identity</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#8BE9FD;font-style:italic;">string</span><span style="color:#F8F8F2;">&gt;(</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">hello</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> b </span><span style="color:#FF79C6;">=</span><span style="color:#50FA7B;"> identity</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#8BE9FD;font-style:italic;">number</span><span style="color:#F8F8F2;">&gt;(</span><span style="color:#BD93F9;">123</span><span style="color:#F8F8F2;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="generic-function-泛型函数" tabindex="-1"><a class="header-anchor" href="#generic-function-泛型函数"><span>Generic Function 泛型函数</span></a></h2><p>泛型函数是指在定义函数时使用泛型参数。</p><div class="language-ts line-numbers-mode" data-highlighter="shiki" data-ext="ts" data-title="ts" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">function</span><span style="color:#50FA7B;"> identity</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#FFB86C;font-style:italic;">T</span><span style="color:#F8F8F2;">&gt;(</span><span style="color:#FFB86C;font-style:italic;">args</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> T</span><span style="color:#F8F8F2;">)</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> T</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#FF79C6;">  return</span><span style="color:#F8F8F2;"> args;</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">function</span><span style="color:#50FA7B;"> genericFunction</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#FFB86C;font-style:italic;">T</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">U</span><span style="color:#F8F8F2;">&gt;(</span><span style="color:#FFB86C;font-style:italic;">param1</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> T</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">param2</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> U</span><span style="color:#F8F8F2;">)</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> [</span><span style="color:#8BE9FD;font-style:italic;">T</span><span style="color:#F8F8F2;">, </span><span style="color:#8BE9FD;font-style:italic;">U</span><span style="color:#F8F8F2;">] {</span></span>
<span class="line"><span style="color:#FF79C6;">    return</span><span style="color:#F8F8F2;"> [param1, param2];</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="generic-interface-泛型接口" tabindex="-1"><a class="header-anchor" href="#generic-interface-泛型接口"><span>Generic Interface 泛型接口</span></a></h2><p>泛型接口是指在定义接口时使用泛型参数。</p><div class="language-ts line-numbers-mode" data-highlighter="shiki" data-ext="ts" data-title="ts" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">interface</span><span style="color:#8BE9FD;font-style:italic;"> A</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#FFB86C;font-style:italic;">T</span><span style="color:#F8F8F2;">&gt; {</span></span>
<span class="line"><span style="color:#F8F8F2;">  value</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> T</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> a</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> A</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#8BE9FD;font-style:italic;">string</span><span style="color:#F8F8F2;">&gt; </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> { value</span><span style="color:#FF79C6;">:</span><span style="color:#E9F284;"> &quot;</span><span style="color:#F1FA8C;">hello</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;"> };</span></span>
<span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> b</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> A</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#8BE9FD;font-style:italic;">number</span><span style="color:#F8F8F2;">&gt; </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> { value</span><span style="color:#FF79C6;">:</span><span style="color:#BD93F9;"> 123</span><span style="color:#F8F8F2;"> };</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="generic-class-泛型类" tabindex="-1"><a class="header-anchor" href="#generic-class-泛型类"><span>Generic Class 泛型类</span></a></h2><p>泛型类是指在定义类时使用泛型参数。</p><div class="language-ts line-numbers-mode" data-highlighter="shiki" data-ext="ts" data-title="ts" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">class</span><span style="color:#8BE9FD;"> A</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#FFB86C;font-style:italic;">T</span><span style="color:#F8F8F2;">&gt; {</span></span>
<span class="line"><span style="color:#F8F8F2;">  value</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> T</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">  constructor</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">value</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> T</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#BD93F9;font-style:italic;">    this</span><span style="color:#F8F8F2;">.value </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> value;</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> a </span><span style="color:#FF79C6;">=</span><span style="color:#FF79C6;font-weight:bold;"> new</span><span style="color:#50FA7B;"> A</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#8BE9FD;font-style:italic;">string</span><span style="color:#F8F8F2;">&gt;(</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">hello</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> b </span><span style="color:#FF79C6;">=</span><span style="color:#FF79C6;font-weight:bold;"> new</span><span style="color:#50FA7B;"> A</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#8BE9FD;font-style:italic;">number</span><span style="color:#F8F8F2;">&gt;(</span><span style="color:#BD93F9;">123</span><span style="color:#F8F8F2;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="generic-constraints-泛型约束" tabindex="-1"><a class="header-anchor" href="#generic-constraints-泛型约束"><span>Generic Constraints 泛型约束</span></a></h2><p>泛型约束是指对泛型进行限制，确保泛型具有某些属性或方法。</p><div class="language-ts line-numbers-mode" data-highlighter="shiki" data-ext="ts" data-title="ts" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">function</span><span style="color:#50FA7B;"> identity</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#FFB86C;font-style:italic;">T</span><span style="color:#FF79C6;"> extends</span><span style="color:#F8F8F2;"> { length</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> number</span><span style="color:#F8F8F2;"> }&gt;(</span><span style="color:#FFB86C;font-style:italic;">value</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> T</span><span style="color:#F8F8F2;">)</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> T</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(value.length);</span></span>
<span class="line"><span style="color:#FF79C6;">  return</span><span style="color:#F8F8F2;"> value;</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> a </span><span style="color:#FF79C6;">=</span><span style="color:#50FA7B;"> identity</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#8BE9FD;font-style:italic;">string</span><span style="color:#F8F8F2;">&gt;(</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">hello</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> b </span><span style="color:#FF79C6;">=</span><span style="color:#50FA7B;"> identity</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#8BE9FD;font-style:italic;">number</span><span style="color:#F8F8F2;">[]&gt;([</span><span style="color:#BD93F9;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">3</span><span style="color:#F8F8F2;">]);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="generic-utility-types-泛型工具类型" tabindex="-1"><a class="header-anchor" href="#generic-utility-types-泛型工具类型"><span>Generic Utility Types 泛型工具类型</span></a></h2><p>泛型工具类型是指 TypeScript 提供的一些内置泛型类型，用于处理常见的类型操作。</p><div class="language-ts line-numbers-mode" data-highlighter="shiki" data-ext="ts" data-title="ts" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">type</span><span style="color:#8BE9FD;font-style:italic;"> A</span><span style="color:#FF79C6;"> =</span><span style="color:#F8F8F2;"> { name</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> string</span><span style="color:#F8F8F2;">; age</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> number</span><span style="color:#F8F8F2;"> };</span></span>
<span class="line"><span style="color:#6272A4;">// Partial 允许你将T类型的所有属性设为可选。 它将在每一个字段后面添加一个?。</span></span>
<span class="line"><span style="color:#FF79C6;">type</span><span style="color:#8BE9FD;font-style:italic;"> B</span><span style="color:#FF79C6;"> =</span><span style="color:#8BE9FD;font-style:italic;"> Partial</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#FFB86C;font-style:italic;">A</span><span style="color:#F8F8F2;">&gt;; </span><span style="color:#6272A4;">// { name?: string; age?: number; }</span></span>
<span class="line"><span style="color:#6272A4;">// 将某个类型里的属性全部变为必选项</span></span>
<span class="line"><span style="color:#FF79C6;">type</span><span style="color:#8BE9FD;font-style:italic;"> C</span><span style="color:#FF79C6;"> =</span><span style="color:#8BE9FD;font-style:italic;"> Required</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#FFB86C;font-style:italic;">A</span><span style="color:#F8F8F2;">&gt;; </span><span style="color:#6272A4;">// { name: string; age: number; }</span></span>
<span class="line"><span style="color:#6272A4;">// Pick&lt;T, K&gt; T中选择一些属性作为K,</span></span>
<span class="line"><span style="color:#FF79C6;">type</span><span style="color:#8BE9FD;font-style:italic;"> D</span><span style="color:#FF79C6;"> =</span><span style="color:#8BE9FD;font-style:italic;"> Pick</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#FFB86C;font-style:italic;">A</span><span style="color:#F8F8F2;">, </span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">name</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">&gt;; </span><span style="color:#6272A4;">// { name: string; }</span></span>
<span class="line"><span style="color:#6272A4;">// Omit&lt;T, K&gt; 从类型T中删除K个属性。</span></span>
<span class="line"><span style="color:#FF79C6;">type</span><span style="color:#8BE9FD;font-style:italic;"> E</span><span style="color:#FF79C6;"> =</span><span style="color:#8BE9FD;font-style:italic;"> Omit</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#FFB86C;font-style:italic;">A</span><span style="color:#F8F8F2;">, </span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">age</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">&gt;; </span><span style="color:#6272A4;">// { name: string; }</span></span>
<span class="line"><span style="color:#6272A4;">// 排除两个不同类型中已经存在的共有属性来构造新的类型</span></span>
<span class="line"><span style="color:#FF79C6;">type</span><span style="color:#8BE9FD;font-style:italic;"> F</span><span style="color:#FF79C6;"> =</span><span style="color:#8BE9FD;font-style:italic;"> Exclude</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#8BE9FD;font-style:italic;">string</span><span style="color:#FF79C6;"> |</span><span style="color:#8BE9FD;font-style:italic;"> number</span><span style="color:#F8F8F2;">, </span><span style="color:#8BE9FD;font-style:italic;">number</span><span style="color:#F8F8F2;">&gt;; </span><span style="color:#6272A4;">// string</span></span>
<span class="line"><span style="color:#6272A4;">// Extract&lt;T, U&gt; 选择两种不同类型中的共有属性来构造新的类型</span></span>
<span class="line"><span style="color:#FF79C6;">type</span><span style="color:#8BE9FD;font-style:italic;"> G</span><span style="color:#FF79C6;"> =</span><span style="color:#8BE9FD;font-style:italic;"> Extract</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#8BE9FD;font-style:italic;">string</span><span style="color:#FF79C6;"> |</span><span style="color:#8BE9FD;font-style:italic;"> number</span><span style="color:#F8F8F2;">, </span><span style="color:#8BE9FD;font-style:italic;">number</span><span style="color:#F8F8F2;">&gt;; </span><span style="color:#6272A4;">// number</span></span>
<span class="line"><span style="color:#6272A4;">// 剔除 null 和 undefined</span></span>
<span class="line"><span style="color:#FF79C6;">type</span><span style="color:#8BE9FD;font-style:italic;"> H</span><span style="color:#FF79C6;"> =</span><span style="color:#8BE9FD;font-style:italic;"> NonNullable</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#8BE9FD;font-style:italic;">string</span><span style="color:#FF79C6;"> |</span><span style="color:#8BE9FD;font-style:italic;"> number</span><span style="color:#FF79C6;"> |</span><span style="color:#8BE9FD;font-style:italic;"> null</span><span style="color:#FF79C6;"> |</span><span style="color:#8BE9FD;font-style:italic;"> undefined</span><span style="color:#F8F8F2;">&gt;; </span><span style="color:#6272A4;">// string | number</span></span>
<span class="line"><span style="color:#6272A4;">// 给定类型T的一组属性K的类型。将一个类型的属性映射到另一个类型的属性</span></span>
<span class="line"><span style="color:#FF79C6;">type</span><span style="color:#8BE9FD;font-style:italic;"> I</span><span style="color:#FF79C6;"> =</span><span style="color:#8BE9FD;font-style:italic;"> Record</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#8BE9FD;font-style:italic;">string</span><span style="color:#F8F8F2;">, </span><span style="color:#8BE9FD;font-style:italic;">number</span><span style="color:#F8F8F2;">&gt;; </span><span style="color:#6272A4;">// { [key: string]: number; }</span></span>
<span class="line"><span style="color:#FF79C6;">interface</span><span style="color:#8BE9FD;font-style:italic;"> EmployeeType</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">    id</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> number</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">    fullname</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> string</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">    role</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> string</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> employees</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> Record</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#8BE9FD;font-style:italic;">number</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">EmployeeType</span><span style="color:#F8F8F2;">&gt; </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#BD93F9;">    0</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> { id</span><span style="color:#FF79C6;">:</span><span style="color:#BD93F9;"> 1</span><span style="color:#F8F8F2;">, fullname</span><span style="color:#FF79C6;">:</span><span style="color:#E9F284;"> &#39;</span><span style="color:#F1FA8C;">John Doe</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, role</span><span style="color:#FF79C6;">:</span><span style="color:#E9F284;"> &#39;</span><span style="color:#F1FA8C;">Designer</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;"> },</span></span>
<span class="line"><span style="color:#BD93F9;">    1</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> { id</span><span style="color:#FF79C6;">:</span><span style="color:#BD93F9;"> 2</span><span style="color:#F8F8F2;">, fullname</span><span style="color:#FF79C6;">:</span><span style="color:#E9F284;"> &#39;</span><span style="color:#F1FA8C;">Ibrahima Fall</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, role</span><span style="color:#FF79C6;">:</span><span style="color:#E9F284;"> &#39;</span><span style="color:#F1FA8C;">Developer</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;"> },</span></span>
<span class="line"><span style="color:#BD93F9;">    2</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> { id</span><span style="color:#FF79C6;">:</span><span style="color:#BD93F9;"> 3</span><span style="color:#F8F8F2;">, fullname</span><span style="color:#FF79C6;">:</span><span style="color:#E9F284;"> &#39;</span><span style="color:#F1FA8C;">Sara Duckson</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, role</span><span style="color:#FF79C6;">:</span><span style="color:#E9F284;"> &#39;</span><span style="color:#F1FA8C;">Developer</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;"> },</span></span>
<span class="line"><span style="color:#F8F8F2;">};</span></span>
<span class="line"><span style="color:#6272A4;">//  获取函数类型的参数类型，并返回一个元组类型，其中包含这些参数类型。</span></span>
<span class="line"><span style="color:#FF79C6;">type</span><span style="color:#8BE9FD;font-style:italic;"> J</span><span style="color:#FF79C6;"> =</span><span style="color:#8BE9FD;font-style:italic;"> Parameters</span><span style="color:#F8F8F2;">&lt;() </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#8BE9FD;font-style:italic;"> void</span><span style="color:#F8F8F2;">&gt;; </span><span style="color:#6272A4;">// []</span></span>
<span class="line"><span style="color:#6272A4;">//  获取函数类型的返回类型。</span></span>
<span class="line"><span style="color:#FF79C6;">type</span><span style="color:#8BE9FD;font-style:italic;"> K</span><span style="color:#FF79C6;"> =</span><span style="color:#8BE9FD;font-style:italic;"> ReturnType</span><span style="color:#F8F8F2;">&lt;() </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#8BE9FD;font-style:italic;"> void</span><span style="color:#F8F8F2;">&gt;; </span><span style="color:#6272A4;">// void</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,57)]))}const F=n(p,[["render",o],["__file","advanced-types.html.vue"]]),i=JSON.parse('{"path":"/typescript/advanced-types.html","title":"TypeScript 高级类型","lang":"en-US","frontmatter":{"title":"TypeScript 高级类型","date":"2025-02-04T00:00:00.000Z","category":["TypeScript"],"description":"高级类型 Intersection Types 交叉类型 交叉类型是将多个类型合并为一个类型，表示同时具备多个类型的特性。 Union Types 联合类型 联合类型表示一个值可以是几种类型之一。 Type Aliases 类型别名 类型别名用来给一个类型起一个新名字。 Type Assertions 类型断言 类型断言可以用来告诉编译器变量的实际类型...","head":[["meta",{"property":"og:url","content":"https://luxiag.github.io/luxiag/blog/typescript/advanced-types.html"}],["meta",{"property":"og:title","content":"TypeScript 高级类型"}],["meta",{"property":"og:description","content":"高级类型 Intersection Types 交叉类型 交叉类型是将多个类型合并为一个类型，表示同时具备多个类型的特性。 Union Types 联合类型 联合类型表示一个值可以是几种类型之一。 Type Aliases 类型别名 类型别名用来给一个类型起一个新名字。 Type Assertions 类型断言 类型断言可以用来告诉编译器变量的实际类型..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2025-02-10T01:06:44.000Z"}],["meta",{"property":"article:published_time","content":"2025-02-04T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-02-10T01:06:44.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"TypeScript 高级类型\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2025-02-04T00:00:00.000Z\\",\\"dateModified\\":\\"2025-02-10T01:06:44.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"luxiag\\",\\"url\\":\\"https://luxiag.github.io/luxiag\\"}]}"]]},"headers":[{"level":2,"title":"Intersection Types 交叉类型","slug":"intersection-types-交叉类型","link":"#intersection-types-交叉类型","children":[]},{"level":2,"title":"Union Types 联合类型","slug":"union-types-联合类型","link":"#union-types-联合类型","children":[]},{"level":2,"title":"Type Aliases 类型别名","slug":"type-aliases-类型别名","link":"#type-aliases-类型别名","children":[]},{"level":2,"title":"Type Assertions 类型断言","slug":"type-assertions-类型断言","link":"#type-assertions-类型断言","children":[]},{"level":2,"title":"Type Index 类型索引","slug":"type-index-类型索引","link":"#type-index-类型索引","children":[]},{"level":2,"title":"Type Constraints 类型约束","slug":"type-constraints-类型约束","link":"#type-constraints-类型约束","children":[]},{"level":2,"title":"Type Mapping 类型映射","slug":"type-mapping-类型映射","link":"#type-mapping-类型映射","children":[]},{"level":2,"title":"Type Inference 类型推断","slug":"type-inference-类型推断","link":"#type-inference-类型推断","children":[]},{"level":2,"title":"Type Guards 类型守卫","slug":"type-guards-类型守卫","link":"#type-guards-类型守卫","children":[{"level":3,"title":"typeof","slug":"typeof","link":"#typeof","children":[]},{"level":3,"title":"instanceof","slug":"instanceof","link":"#instanceof","children":[]},{"level":3,"title":"in","slug":"in","link":"#in","children":[]}]},{"level":2,"title":"Type Compatibility 类型兼容性","slug":"type-compatibility-类型兼容性","link":"#type-compatibility-类型兼容性","children":[]},{"level":2,"title":"Generic Function 泛型函数","slug":"generic-function-泛型函数","link":"#generic-function-泛型函数","children":[]},{"level":2,"title":"Generic Interface 泛型接口","slug":"generic-interface-泛型接口","link":"#generic-interface-泛型接口","children":[]},{"level":2,"title":"Generic Class 泛型类","slug":"generic-class-泛型类","link":"#generic-class-泛型类","children":[]},{"level":2,"title":"Generic Constraints 泛型约束","slug":"generic-constraints-泛型约束","link":"#generic-constraints-泛型约束","children":[]},{"level":2,"title":"Generic Utility Types 泛型工具类型","slug":"generic-utility-types-泛型工具类型","link":"#generic-utility-types-泛型工具类型","children":[]}],"git":{"createdTime":1739149604000,"updatedTime":1739149604000,"contributors":[{"name":"luxiag","email":"luxiag@qq.com","commits":1}]},"readingTime":{"minutes":4.62,"words":1386},"filePathRelative":"typescript/advanced-types.md","localizedDate":"February 4, 2025","excerpt":"\\n<h2>Intersection Types 交叉类型</h2>\\n<p>交叉类型是将多个类型合并为一个类型，表示同时具备多个类型的特性。</p>\\n<div class=\\"language-ts line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"ts\\" data-title=\\"ts\\" style=\\"background-color:#282A36;color:#F8F8F2\\"><pre class=\\"shiki dracula vp-code\\"><code><span class=\\"line\\"><span style=\\"color:#FF79C6\\">type</span><span style=\\"color:#8BE9FD;font-style:italic\\"> A</span><span style=\\"color:#FF79C6\\"> =</span><span style=\\"color:#F8F8F2\\"> { name</span><span style=\\"color:#FF79C6\\">:</span><span style=\\"color:#8BE9FD;font-style:italic\\"> string</span><span style=\\"color:#F8F8F2\\"> };</span></span>\\n<span class=\\"line\\"><span style=\\"color:#FF79C6\\">type</span><span style=\\"color:#8BE9FD;font-style:italic\\"> B</span><span style=\\"color:#FF79C6\\"> =</span><span style=\\"color:#F8F8F2\\"> { age</span><span style=\\"color:#FF79C6\\">:</span><span style=\\"color:#8BE9FD;font-style:italic\\"> number</span><span style=\\"color:#F8F8F2\\"> };</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color:#FF79C6\\">type</span><span style=\\"color:#8BE9FD;font-style:italic\\"> C</span><span style=\\"color:#FF79C6\\"> =</span><span style=\\"color:#8BE9FD;font-style:italic\\"> A</span><span style=\\"color:#FF79C6\\"> &amp;</span><span style=\\"color:#8BE9FD;font-style:italic\\"> B</span><span style=\\"color:#F8F8F2\\">;</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color:#FF79C6\\">const</span><span style=\\"color:#F8F8F2\\"> c</span><span style=\\"color:#FF79C6\\">:</span><span style=\\"color:#8BE9FD;font-style:italic\\"> C</span><span style=\\"color:#FF79C6\\"> =</span><span style=\\"color:#F8F8F2\\"> {</span></span>\\n<span class=\\"line\\"><span style=\\"color:#F8F8F2\\">  name</span><span style=\\"color:#FF79C6\\">:</span><span style=\\"color:#E9F284\\"> \\"</span><span style=\\"color:#F1FA8C\\">张三</span><span style=\\"color:#E9F284\\">\\"</span><span style=\\"color:#F8F8F2\\">,</span></span>\\n<span class=\\"line\\"><span style=\\"color:#F8F8F2\\">  age</span><span style=\\"color:#FF79C6\\">:</span><span style=\\"color:#BD93F9\\"> 18</span><span style=\\"color:#F8F8F2\\">,</span></span>\\n<span class=\\"line\\"><span style=\\"color:#F8F8F2\\">};</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{F as comp,i as data};
