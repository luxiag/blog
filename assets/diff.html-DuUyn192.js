import{_ as n,e as a,h as l,o as e}from"./app-DPJYBgB6.js";const p="/blog/assets/0433071739323326257-Cq01okGG.png",o="/blog/assets/0433071739323564031-CCb-YeKI.png",F="/blog/assets/0433071739323585045-D918BABU.png",c="/blog/assets/0433071739323853382-BUynPRlw.png",i="/blog/assets/0433071739326482970-D5wuCWKk.png",r="/blog/assets/0433071739340039611-DO5-gohc.png",t="/blog/assets/0584091740623451532-D_lPzNOK.png",d="/blog/assets/0584091740623604121-CQaGZYCk.png",y={};function v(u,s){return e(),a("div",null,s[0]||(s[0]=[l(`<p>快速 Diff 算法在实测中性能最优。它借鉴了文本 Diff 中的预处理思路，先处理新旧两组子节点中相同的前置节点和相同的后置节点。当前置节点和后置节点全部处理完毕后，如果无法简单地通过挂载新节点或者卸载已经不存在的节点来完成更新，则需要根据节点的索引关系，构造出一个最长递增子序列。最长递增子序列所指向的节点即为不需要移动的节点。</p><h1 id="最长递增子序列" tabindex="-1"><a class="header-anchor" href="#最长递增子序列"><span><a href="https://leetcode.cn/problems/longest-increasing-subsequence/solutions/147667/zui-chang-shang-sheng-zi-xu-lie-by-leetcode-soluti/" target="_blank" rel="noopener noreferrer">最长递增子序列</a></span></a></h1><p>给你一个整数数组 nums ，找到其中最长严格递增子序列的长度。</p><p>子序列 是由数组派生而来的序列，删除（或不删除）数组中的元素而不改变其余元素的顺序。例如，[3,6,2,7] 是数组 [0,3,1,6,2,2,7] 的子序列。</p><div class="language-md line-numbers-mode" data-highlighter="shiki" data-ext="md" data-title="md" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#F8F8F2;">输入：nums = [</span><span style="color:#FF79C6;">10,9,2,5,3,7,101,18</span><span style="color:#F8F8F2;">]</span></span>
<span class="line"><span style="color:#F8F8F2;">输出：4</span></span>
<span class="line"><span style="color:#F8F8F2;">解释：最长递增子序列是 [</span><span style="color:#FF79C6;">2,3,7,101</span><span style="color:#F8F8F2;">]，因此长度为 4</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>动态规划</p><div class="language-ts line-numbers-mode" data-highlighter="shiki" data-ext="ts" data-title="ts" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">function</span><span style="color:#50FA7B;"> lengthOfLIS</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">nums</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> number</span><span style="color:#F8F8F2;">[])</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> number</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#FF79C6;">    if</span><span style="color:#F8F8F2;"> (nums.length </span><span style="color:#FF79C6;">===</span><span style="color:#BD93F9;"> 0</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#FF79C6;">        return</span><span style="color:#BD93F9;"> 0</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#FF79C6;">    let</span><span style="color:#F8F8F2;"> dp</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> number</span><span style="color:#F8F8F2;">[] </span><span style="color:#FF79C6;">=</span><span style="color:#FF79C6;font-weight:bold;"> new</span><span style="color:#50FA7B;"> Array</span><span style="color:#F8F8F2;">(nums.length);</span></span>
<span class="line"><span style="color:#F8F8F2;">    dp[</span><span style="color:#BD93F9;">0</span><span style="color:#F8F8F2;">] </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> 1</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#FF79C6;">    let</span><span style="color:#F8F8F2;"> maxans </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> 1</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#FF79C6;">    for</span><span style="color:#F8F8F2;"> (</span><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> i </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> 1</span><span style="color:#F8F8F2;">; i </span><span style="color:#FF79C6;">&lt;</span><span style="color:#F8F8F2;"> nums.length; i</span><span style="color:#FF79C6;">++</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#6272A4;">        // dp[i]: 以i结尾的最长递增子系列</span></span>
<span class="line"><span style="color:#F8F8F2;">        dp[i] </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> 1</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#6272A4;">        // 遍历i之前的元素，找到可以添加到以i结尾子系列中</span></span>
<span class="line"><span style="color:#FF79C6;">        for</span><span style="color:#F8F8F2;"> (</span><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> j </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> 0</span><span style="color:#F8F8F2;">; j </span><span style="color:#FF79C6;">&lt;</span><span style="color:#F8F8F2;"> i; j</span><span style="color:#FF79C6;">++</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#FF79C6;">            if</span><span style="color:#F8F8F2;"> (nums[i] </span><span style="color:#FF79C6;">&gt;</span><span style="color:#F8F8F2;"> nums[j]) {</span></span>
<span class="line"><span style="color:#F8F8F2;">                dp[i] </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> Math.</span><span style="color:#50FA7B;">max</span><span style="color:#F8F8F2;">(dp[i], dp[j] </span><span style="color:#FF79C6;">+</span><span style="color:#BD93F9;"> 1</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">            }</span></span>
<span class="line"><span style="color:#F8F8F2;">        }</span></span>
<span class="line"><span style="color:#F8F8F2;">        maxans </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> Math.</span><span style="color:#50FA7B;">max</span><span style="color:#F8F8F2;">(maxans, dp[i]);</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#FF79C6;">    return</span><span style="color:#F8F8F2;"> maxans;</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>贪心 + 二分查找</p><div class="language-ts line-numbers-mode" data-highlighter="shiki" data-ext="ts" data-title="ts" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">function</span><span style="color:#50FA7B;"> lengthOfLIS</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">nums</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> number</span><span style="color:#F8F8F2;">[])</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> number</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#FF79C6;">    let</span><span style="color:#F8F8F2;"> len</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> number</span><span style="color:#FF79C6;"> =</span><span style="color:#BD93F9;"> 1</span><span style="color:#F8F8F2;">, n</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> number</span><span style="color:#FF79C6;"> =</span><span style="color:#F8F8F2;"> nums.length;</span></span>
<span class="line"><span style="color:#FF79C6;">    if</span><span style="color:#F8F8F2;"> (n </span><span style="color:#FF79C6;">===</span><span style="color:#BD93F9;"> 0</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#FF79C6;">        return</span><span style="color:#BD93F9;"> 0</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#FF79C6;">    let</span><span style="color:#F8F8F2;"> d</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> number</span><span style="color:#F8F8F2;">[] </span><span style="color:#FF79C6;">=</span><span style="color:#FF79C6;font-weight:bold;"> new</span><span style="color:#50FA7B;"> Array</span><span style="color:#F8F8F2;">(n </span><span style="color:#FF79C6;">+</span><span style="color:#BD93F9;"> 1</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#6272A4;">    // 贪心</span></span>
<span class="line"><span style="color:#6272A4;">    // 获取第一个数组的值</span></span>
<span class="line"><span style="color:#6272A4;">    // 循环遍历获取比它大的值加入数组队列</span></span>
<span class="line"><span style="color:#6272A4;">    // 组成递增子序列</span></span>
<span class="line"><span style="color:#F8F8F2;">    d[len] </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> nums[</span><span style="color:#BD93F9;">0</span><span style="color:#F8F8F2;">];</span></span>
<span class="line"><span style="color:#FF79C6;">    for</span><span style="color:#F8F8F2;"> (</span><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> i </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> 1</span><span style="color:#F8F8F2;">; i </span><span style="color:#FF79C6;">&lt;</span><span style="color:#F8F8F2;"> n; </span><span style="color:#FF79C6;">++</span><span style="color:#F8F8F2;">i) {</span></span>
<span class="line"><span style="color:#6272A4;">        // 获取</span></span>
<span class="line"><span style="color:#FF79C6;">        if</span><span style="color:#F8F8F2;"> (nums[i] </span><span style="color:#FF79C6;">&gt;</span><span style="color:#F8F8F2;"> d[len]) {</span></span>
<span class="line"><span style="color:#F8F8F2;">            d[</span><span style="color:#FF79C6;">++</span><span style="color:#F8F8F2;">len] </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> nums[i];</span></span>
<span class="line"><span style="color:#F8F8F2;">        } </span><span style="color:#FF79C6;">else</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#6272A4;">          // 二分查找</span></span>
<span class="line"><span style="color:#6272A4;">          // 如果当前值nums[i]不大于上一值</span></span>
<span class="line"><span style="color:#6272A4;">          // 则通过二分查找找出d[]里第一个大于nums[i]的位置，并用nums[i]替换掉原来的值</span></span>
<span class="line"><span style="color:#6272A4;">          // 为了得到一种“增益”，使得当前最长增长子序列序列增长的更慢一点 末尾值要越小</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">          // 如果找不到说明所有的数都比 nums[i] 大，此时要更新 d[1]，所以这里将 pos 设为 0</span></span>
<span class="line"><span style="color:#FF79C6;">            let</span><span style="color:#F8F8F2;"> l</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> number</span><span style="color:#FF79C6;"> =</span><span style="color:#BD93F9;"> 1</span><span style="color:#F8F8F2;">, r</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> number</span><span style="color:#FF79C6;"> =</span><span style="color:#F8F8F2;"> len, pos</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> number</span><span style="color:#FF79C6;"> =</span><span style="color:#BD93F9;"> 0</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#FF79C6;">            while</span><span style="color:#F8F8F2;"> (l </span><span style="color:#FF79C6;">&lt;=</span><span style="color:#F8F8F2;"> r) {</span></span>
<span class="line"><span style="color:#6272A4;">              // 计算两个数 l 和 r 的中间值</span></span>
<span class="line"><span style="color:#6272A4;">              //  d[]是递增数组</span></span>
<span class="line"><span style="color:#FF79C6;">                let</span><span style="color:#F8F8F2;"> mid</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> number</span><span style="color:#FF79C6;"> =</span><span style="color:#F8F8F2;"> (l </span><span style="color:#FF79C6;">+</span><span style="color:#F8F8F2;"> r) </span><span style="color:#FF79C6;">&gt;&gt;</span><span style="color:#BD93F9;"> 1</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#FF79C6;">                if</span><span style="color:#F8F8F2;"> (d[mid] </span><span style="color:#FF79C6;">&lt;</span><span style="color:#F8F8F2;"> nums[i]) {</span></span>
<span class="line"><span style="color:#F8F8F2;">                    pos </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> mid;</span></span>
<span class="line"><span style="color:#F8F8F2;">                    l </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> mid </span><span style="color:#FF79C6;">+</span><span style="color:#BD93F9;"> 1</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">                } </span><span style="color:#FF79C6;">else</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">                    r </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> mid </span><span style="color:#FF79C6;">-</span><span style="color:#BD93F9;"> 1</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">                }</span></span>
<span class="line"><span style="color:#F8F8F2;">            }</span></span>
<span class="line"><span style="color:#F8F8F2;">            d[pos </span><span style="color:#FF79C6;">+</span><span style="color:#BD93F9;"> 1</span><span style="color:#F8F8F2;">] </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> nums[i];</span></span>
<span class="line"><span style="color:#F8F8F2;">        }</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#FF79C6;">    return</span><span style="color:#F8F8F2;"> len;</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="vue3-最长递增子序列" tabindex="-1"><a class="header-anchor" href="#vue3-最长递增子序列"><span>Vue3 最长递增子序列</span></a></h1><ul><li>循环遍历原数组，判断原数组元素是否大于新数组最后一个元素，大加入到新数组最后</li><li>如果遍历中的元素小于新数组的最后一位，则通过二分查找找到新数组中第一个大于该元素的位置，并替换掉该位置的元素</li><li>如果新数组没有大于该遍历元素的元素，则替换第一位元素</li></ul><div class="language-ts line-numbers-mode" data-highlighter="shiki" data-ext="ts" data-title="ts" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#6272A4;">// https://en.wikipedia.org/wiki/Longest_increasing_subsequence</span></span>
<span class="line"><span style="color:#FF79C6;">function</span><span style="color:#50FA7B;"> getSequence</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">arr</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> number</span><span style="color:#F8F8F2;">[])</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> number</span><span style="color:#F8F8F2;">[] {</span></span>
<span class="line"><span style="color:#6272A4;">  // 拷贝一个数组 p，p[i]记录的是result在arr[i]更新前记录的上一个值,保存当前项对应的前一项的索引</span></span>
<span class="line"><span style="color:#FF79C6;">  const</span><span style="color:#F8F8F2;"> p </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> arr.</span><span style="color:#50FA7B;">slice</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"><span style="color:#6272A4;">  // result记录的是最长递增子序列的 索引</span></span>
<span class="line"><span style="color:#FF79C6;">  const</span><span style="color:#F8F8F2;"> result </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> [</span><span style="color:#BD93F9;">0</span><span style="color:#F8F8F2;">]</span></span>
<span class="line"><span style="color:#FF79C6;">  let</span><span style="color:#F8F8F2;"> i, j, u, v, c</span></span>
<span class="line"><span style="color:#FF79C6;">  const</span><span style="color:#F8F8F2;"> len </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> arr.length</span></span>
<span class="line"><span style="color:#FF79C6;">  for</span><span style="color:#F8F8F2;"> (i </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> 0</span><span style="color:#F8F8F2;">; i </span><span style="color:#FF79C6;">&lt;</span><span style="color:#F8F8F2;"> len; i</span><span style="color:#FF79C6;">++</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#FF79C6;">    const</span><span style="color:#F8F8F2;"> arrI </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> arr[i]</span></span>
<span class="line"><span style="color:#FF79C6;">    if</span><span style="color:#F8F8F2;"> (arrI </span><span style="color:#FF79C6;">!==</span><span style="color:#BD93F9;"> 0</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">      j </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> result[result.length </span><span style="color:#FF79C6;">-</span><span style="color:#BD93F9;"> 1</span><span style="color:#F8F8F2;">]</span></span>
<span class="line"><span style="color:#6272A4;">      // // (1) arrI 比 arr[j]大（当前值大于上次最长子系列的末尾值），直接添加</span></span>
<span class="line"><span style="color:#FF79C6;">      if</span><span style="color:#F8F8F2;"> (arr[j] </span><span style="color:#FF79C6;">&lt;</span><span style="color:#F8F8F2;"> arrI) {</span></span>
<span class="line"><span style="color:#F8F8F2;">        p[i] </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> j</span></span>
<span class="line"><span style="color:#F8F8F2;">        result.</span><span style="color:#50FA7B;">push</span><span style="color:#F8F8F2;">(i)</span></span>
<span class="line"><span style="color:#6272A4;">        // （最小末尾值：要想得到最长递增子系列，需要子系列增长越慢越好，所以子系列末尾值需要最小）</span></span>
<span class="line"><span style="color:#FF79C6;">        continue</span></span>
<span class="line"><span style="color:#F8F8F2;">      }</span></span>
<span class="line"><span style="color:#6272A4;">     // (2) arrI &lt;= arr[j] 通过二分查找，找到后替换它；u和v相等时循环停止</span></span>
<span class="line"><span style="color:#F8F8F2;">      u </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> 0</span></span>
<span class="line"><span style="color:#F8F8F2;">      v </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> result.length </span><span style="color:#FF79C6;">-</span><span style="color:#BD93F9;"> 1</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">      while</span><span style="color:#F8F8F2;"> (u </span><span style="color:#FF79C6;">&lt;</span><span style="color:#F8F8F2;"> v) {</span></span>
<span class="line"><span style="color:#6272A4;">        // 获取中间值 u+v/2</span></span>
<span class="line"><span style="color:#F8F8F2;">        c </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> (u </span><span style="color:#FF79C6;">+</span><span style="color:#F8F8F2;"> v) </span><span style="color:#FF79C6;">&gt;&gt;</span><span style="color:#BD93F9;"> 1</span></span>
<span class="line"><span style="color:#FF79C6;">        if</span><span style="color:#F8F8F2;"> (arr[result[c]] </span><span style="color:#FF79C6;">&lt;</span><span style="color:#F8F8F2;"> arrI) {</span></span>
<span class="line"><span style="color:#F8F8F2;">          u </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> c </span><span style="color:#FF79C6;">+</span><span style="color:#BD93F9;"> 1</span></span>
<span class="line"><span style="color:#F8F8F2;">        } </span><span style="color:#FF79C6;">else</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">          v </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> c</span></span>
<span class="line"><span style="color:#F8F8F2;">        }</span></span>
<span class="line"><span style="color:#F8F8F2;">      }</span></span>
<span class="line"><span style="color:#6272A4;">      // 比较 =&gt; 替换, 当前子系列从头找到第一个大于当前值arrI，并替换</span></span>
<span class="line"><span style="color:#FF79C6;">      if</span><span style="color:#F8F8F2;"> (arrI </span><span style="color:#FF79C6;">&lt;</span><span style="color:#F8F8F2;"> arr[result[u]]) {</span></span>
<span class="line"><span style="color:#FF79C6;">        if</span><span style="color:#F8F8F2;"> (u </span><span style="color:#FF79C6;">&gt;</span><span style="color:#BD93F9;"> 0</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#6272A4;">          // 有可能替换会导致结果不正确，需要一个新数组 p 记录正确的结果</span></span>
<span class="line"><span style="color:#F8F8F2;">          p[i] </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> result[u </span><span style="color:#FF79C6;">-</span><span style="color:#BD93F9;"> 1</span><span style="color:#F8F8F2;">]</span></span>
<span class="line"><span style="color:#F8F8F2;">        }</span></span>
<span class="line"><span style="color:#F8F8F2;">        result[u] </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> i</span></span>
<span class="line"><span style="color:#F8F8F2;">      }</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#6272A4;">  // 没有回溯</span></span>
<span class="line"><span style="color:#6272A4;">  // 2, 1, 5, 3, 6, 4, 8, 9, 7 =》 [1, 3, 4, 8, 9]</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span></span>
<span class="line"><span style="color:#6272A4;">  //i</span></span>
<span class="line"><span style="color:#6272A4;">  //1步 2</span></span>
<span class="line"><span style="color:#6272A4;">  //2步 1</span></span>
<span class="line"><span style="color:#6272A4;">  //3步 1 5 p[2] =1 result:[1,2]</span></span>
<span class="line"><span style="color:#6272A4;">  //4步 1 3 p[3] =1 result:[1,3] 更新index为3这个位置的元素的时候，前一个比他小的元素index是1</span></span>
<span class="line"><span style="color:#6272A4;">  //5步 1 3 6 p[4] =3 result:[1,3,4]</span></span>
<span class="line"><span style="color:#6272A4;">  //6步 1 3 4 p[5] =3 result:[1,3,5] 更新index为5这个位置的元素的时候，前一个比他小的元素index是3</span></span>
<span class="line"><span style="color:#6272A4;">  //7步 1 3 4 8 p[6] =5 result:[1,3,5,6] 更新index为6这个位置的元素的时候，前一个比他小的元素index是5</span></span>
<span class="line"><span style="color:#6272A4;">  //8步 1 3 4 8 9 p[7] =6 result:[1,3,5,6,7] 更新index为7这个位置的元素的时候，前一个比他小的元素index是6</span></span>
<span class="line"><span style="color:#6272A4;">  //9步 1 3 4 7 9 p[8] =5 result:[1,3,5,8,7]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">  // 操作结束后，result中的最后一个元素一定是最大子序列的最后一个元素，</span></span>
<span class="line"><span style="color:#6272A4;">  // 但是前面的值不一定正确，比如第9步的时候7将8替换掉了，已经不满足子序列的条件了</span></span>
<span class="line"><span style="color:#6272A4;">  // 所以需要数组p来记录 数组p中记录了第i次操作的时候，这次将要替换的元素的前一个元素（比它小的那个元素） 的index</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">  // 回溯</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">  // 最后进行一个回溯的操作</span></span>
<span class="line"><span style="color:#6272A4;">  // 从result的最后一个元素开始，result中最后一个元素7肯定对应着最大子序列的最后一个，</span></span>
<span class="line"><span style="color:#6272A4;">  // 去p数组中找，p数组中对应的这个元素，记录了更新index为7的时候的前一个比他小的元素的index</span></span>
<span class="line"><span style="color:#6272A4;">  // 向前回溯去找</span></span>
<span class="line"><span style="color:#F8F8F2;">  u </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> result.length</span></span>
<span class="line"><span style="color:#F8F8F2;">  v </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> result[u </span><span style="color:#FF79C6;">-</span><span style="color:#BD93F9;"> 1</span><span style="color:#F8F8F2;">]</span></span>
<span class="line"><span style="color:#FF79C6;">  while</span><span style="color:#F8F8F2;"> (u</span><span style="color:#FF79C6;">--</span><span style="color:#FF79C6;"> &gt;</span><span style="color:#BD93F9;"> 0</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">    result[u] </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> v</span></span>
<span class="line"><span style="color:#F8F8F2;">    v </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> p[v]</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#FF79C6;">  return</span><span style="color:#F8F8F2;"> result</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="patchkeyedchildren" tabindex="-1"><a class="header-anchor" href="#patchkeyedchildren"><span>patchKeyedChildren</span></a></h1><details class="hint-container details"><summary><code>patchKeyedChildren</code></summary><div class="language-ts line-numbers-mode" data-highlighter="shiki" data-ext="ts" data-title="ts" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#6272A4;">  // can be all-keyed or mixed</span></span>
<span class="line"><span style="color:#FF79C6;">  const</span><span style="color:#50FA7B;"> patchKeyedChildren</span><span style="color:#FF79C6;"> =</span><span style="color:#F8F8F2;"> (</span></span>
<span class="line"><span style="color:#FFB86C;font-style:italic;">    c1</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> VNode</span><span style="color:#F8F8F2;">[],</span></span>
<span class="line"><span style="color:#FFB86C;font-style:italic;">    c2</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> VNodeArrayChildren</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#FFB86C;font-style:italic;">    container</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> RendererElement</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#FFB86C;font-style:italic;">    parentAnchor</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> RendererNode</span><span style="color:#FF79C6;"> |</span><span style="color:#8BE9FD;font-style:italic;"> null</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#FFB86C;font-style:italic;">    parentComponent</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> ComponentInternalInstance</span><span style="color:#FF79C6;"> |</span><span style="color:#8BE9FD;font-style:italic;"> null</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#FFB86C;font-style:italic;">    parentSuspense</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> SuspenseBoundary</span><span style="color:#FF79C6;"> |</span><span style="color:#8BE9FD;font-style:italic;"> null</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#FFB86C;font-style:italic;">    namespace</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> ElementNamespace</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#FFB86C;font-style:italic;">    slotScopeIds</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> string</span><span style="color:#F8F8F2;">[] </span><span style="color:#FF79C6;">|</span><span style="color:#8BE9FD;font-style:italic;"> null</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#FFB86C;font-style:italic;">    optimized</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> boolean</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">  ) </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#FF79C6;">    let</span><span style="color:#F8F8F2;"> i </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> 0</span></span>
<span class="line"><span style="color:#FF79C6;">    const</span><span style="color:#F8F8F2;"> l2 </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> c2.length</span></span>
<span class="line"><span style="color:#FF79C6;">    let</span><span style="color:#F8F8F2;"> e1 </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> c1.length </span><span style="color:#FF79C6;">-</span><span style="color:#BD93F9;"> 1</span><span style="color:#6272A4;"> // prev ending index</span></span>
<span class="line"><span style="color:#FF79C6;">    let</span><span style="color:#F8F8F2;"> e2 </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> l2 </span><span style="color:#FF79C6;">-</span><span style="color:#BD93F9;"> 1</span><span style="color:#6272A4;"> // next ending index</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">    // 1. sync from start</span></span>
<span class="line"><span style="color:#6272A4;">    // (a b) c</span></span>
<span class="line"><span style="color:#6272A4;">    // (a b) d e</span></span>
<span class="line"><span style="color:#FF79C6;">    while</span><span style="color:#F8F8F2;"> (i </span><span style="color:#FF79C6;">&lt;=</span><span style="color:#F8F8F2;"> e1 </span><span style="color:#FF79C6;">&amp;&amp;</span><span style="color:#F8F8F2;"> i </span><span style="color:#FF79C6;">&lt;=</span><span style="color:#F8F8F2;"> e2) {</span></span>
<span class="line"><span style="color:#FF79C6;">      const</span><span style="color:#F8F8F2;"> n1 </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> c1[i]</span></span>
<span class="line"><span style="color:#FF79C6;">      const</span><span style="color:#F8F8F2;"> n2 </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> (c2[i] </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> optimized</span></span>
<span class="line"><span style="color:#FF79C6;">        ?</span><span style="color:#50FA7B;"> cloneIfMounted</span><span style="color:#F8F8F2;">(c2[i] </span><span style="color:#FF79C6;">as</span><span style="color:#8BE9FD;font-style:italic;"> VNode</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#FF79C6;">        :</span><span style="color:#50FA7B;"> normalizeVNode</span><span style="color:#F8F8F2;">(c2[i]))</span></span>
<span class="line"><span style="color:#FF79C6;">      if</span><span style="color:#F8F8F2;"> (</span><span style="color:#50FA7B;">isSameVNodeType</span><span style="color:#F8F8F2;">(n1, n2)) {</span></span>
<span class="line"><span style="color:#50FA7B;">        patch</span><span style="color:#F8F8F2;">(</span></span>
<span class="line"><span style="color:#F8F8F2;">          n1,</span></span>
<span class="line"><span style="color:#F8F8F2;">          n2,</span></span>
<span class="line"><span style="color:#F8F8F2;">          container,</span></span>
<span class="line"><span style="color:#BD93F9;">          null</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">          parentComponent,</span></span>
<span class="line"><span style="color:#F8F8F2;">          parentSuspense,</span></span>
<span class="line"><span style="color:#F8F8F2;">          namespace,</span></span>
<span class="line"><span style="color:#F8F8F2;">          slotScopeIds,</span></span>
<span class="line"><span style="color:#F8F8F2;">          optimized,</span></span>
<span class="line"><span style="color:#F8F8F2;">        )</span></span>
<span class="line"><span style="color:#F8F8F2;">      } </span><span style="color:#FF79C6;">else</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#FF79C6;">        break</span></span>
<span class="line"><span style="color:#F8F8F2;">      }</span></span>
<span class="line"><span style="color:#F8F8F2;">      i</span><span style="color:#FF79C6;">++</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">    // 2. sync from end</span></span>
<span class="line"><span style="color:#6272A4;">    // a (b c)</span></span>
<span class="line"><span style="color:#6272A4;">    // d e (b c)</span></span>
<span class="line"><span style="color:#FF79C6;">    while</span><span style="color:#F8F8F2;"> (i </span><span style="color:#FF79C6;">&lt;=</span><span style="color:#F8F8F2;"> e1 </span><span style="color:#FF79C6;">&amp;&amp;</span><span style="color:#F8F8F2;"> i </span><span style="color:#FF79C6;">&lt;=</span><span style="color:#F8F8F2;"> e2) {</span></span>
<span class="line"><span style="color:#FF79C6;">      const</span><span style="color:#F8F8F2;"> n1 </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> c1[e1]</span></span>
<span class="line"><span style="color:#FF79C6;">      const</span><span style="color:#F8F8F2;"> n2 </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> (c2[e2] </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> optimized</span></span>
<span class="line"><span style="color:#FF79C6;">        ?</span><span style="color:#50FA7B;"> cloneIfMounted</span><span style="color:#F8F8F2;">(c2[e2] </span><span style="color:#FF79C6;">as</span><span style="color:#8BE9FD;font-style:italic;"> VNode</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#FF79C6;">        :</span><span style="color:#50FA7B;"> normalizeVNode</span><span style="color:#F8F8F2;">(c2[e2]))</span></span>
<span class="line"><span style="color:#FF79C6;">      if</span><span style="color:#F8F8F2;"> (</span><span style="color:#50FA7B;">isSameVNodeType</span><span style="color:#F8F8F2;">(n1, n2)) {</span></span>
<span class="line"><span style="color:#50FA7B;">        patch</span><span style="color:#F8F8F2;">(</span></span>
<span class="line"><span style="color:#F8F8F2;">          n1,</span></span>
<span class="line"><span style="color:#F8F8F2;">          n2,</span></span>
<span class="line"><span style="color:#F8F8F2;">          container,</span></span>
<span class="line"><span style="color:#BD93F9;">          null</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">          parentComponent,</span></span>
<span class="line"><span style="color:#F8F8F2;">          parentSuspense,</span></span>
<span class="line"><span style="color:#F8F8F2;">          namespace,</span></span>
<span class="line"><span style="color:#F8F8F2;">          slotScopeIds,</span></span>
<span class="line"><span style="color:#F8F8F2;">          optimized,</span></span>
<span class="line"><span style="color:#F8F8F2;">        )</span></span>
<span class="line"><span style="color:#F8F8F2;">      } </span><span style="color:#FF79C6;">else</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#FF79C6;">        break</span></span>
<span class="line"><span style="color:#F8F8F2;">      }</span></span>
<span class="line"><span style="color:#F8F8F2;">      e1</span><span style="color:#FF79C6;">--</span></span>
<span class="line"><span style="color:#F8F8F2;">      e2</span><span style="color:#FF79C6;">--</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">    // 3. common sequence + mount</span></span>
<span class="line"><span style="color:#6272A4;">    // (a b)</span></span>
<span class="line"><span style="color:#6272A4;">    // (a b) c</span></span>
<span class="line"><span style="color:#6272A4;">    // i = 2, e1 = 1, e2 = 2</span></span>
<span class="line"><span style="color:#6272A4;">    // (a b)</span></span>
<span class="line"><span style="color:#6272A4;">    // c (a b)</span></span>
<span class="line"><span style="color:#6272A4;">    // i = 0, e1 = -1, e2 = 0</span></span>
<span class="line"><span style="color:#FF79C6;">    if</span><span style="color:#F8F8F2;"> (i </span><span style="color:#FF79C6;">&gt;</span><span style="color:#F8F8F2;"> e1) {</span></span>
<span class="line"><span style="color:#FF79C6;">      if</span><span style="color:#F8F8F2;"> (i </span><span style="color:#FF79C6;">&lt;=</span><span style="color:#F8F8F2;"> e2) {</span></span>
<span class="line"><span style="color:#FF79C6;">        const</span><span style="color:#F8F8F2;"> nextPos </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> e2 </span><span style="color:#FF79C6;">+</span><span style="color:#BD93F9;"> 1</span></span>
<span class="line"><span style="color:#FF79C6;">        const</span><span style="color:#F8F8F2;"> anchor </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> nextPos </span><span style="color:#FF79C6;">&lt;</span><span style="color:#F8F8F2;"> l2 </span><span style="color:#FF79C6;">?</span><span style="color:#F8F8F2;"> (c2[nextPos] </span><span style="color:#FF79C6;">as</span><span style="color:#8BE9FD;font-style:italic;"> VNode</span><span style="color:#F8F8F2;">).el </span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> parentAnchor</span></span>
<span class="line"><span style="color:#FF79C6;">        while</span><span style="color:#F8F8F2;"> (i </span><span style="color:#FF79C6;">&lt;=</span><span style="color:#F8F8F2;"> e2) {</span></span>
<span class="line"><span style="color:#50FA7B;">          patch</span><span style="color:#F8F8F2;">(</span></span>
<span class="line"><span style="color:#BD93F9;">            null</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">            (c2[i] </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> optimized</span></span>
<span class="line"><span style="color:#FF79C6;">              ?</span><span style="color:#50FA7B;"> cloneIfMounted</span><span style="color:#F8F8F2;">(c2[i] </span><span style="color:#FF79C6;">as</span><span style="color:#8BE9FD;font-style:italic;"> VNode</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#FF79C6;">              :</span><span style="color:#50FA7B;"> normalizeVNode</span><span style="color:#F8F8F2;">(c2[i])),</span></span>
<span class="line"><span style="color:#F8F8F2;">            container,</span></span>
<span class="line"><span style="color:#F8F8F2;">            anchor,</span></span>
<span class="line"><span style="color:#F8F8F2;">            parentComponent,</span></span>
<span class="line"><span style="color:#F8F8F2;">            parentSuspense,</span></span>
<span class="line"><span style="color:#F8F8F2;">            namespace,</span></span>
<span class="line"><span style="color:#F8F8F2;">            slotScopeIds,</span></span>
<span class="line"><span style="color:#F8F8F2;">            optimized,</span></span>
<span class="line"><span style="color:#F8F8F2;">          )</span></span>
<span class="line"><span style="color:#F8F8F2;">          i</span><span style="color:#FF79C6;">++</span></span>
<span class="line"><span style="color:#F8F8F2;">        }</span></span>
<span class="line"><span style="color:#F8F8F2;">      }</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">    // 4. common sequence + unmount</span></span>
<span class="line"><span style="color:#6272A4;">    // (a b) c</span></span>
<span class="line"><span style="color:#6272A4;">    // (a b)</span></span>
<span class="line"><span style="color:#6272A4;">    // i = 2, e1 = 2, e2 = 1</span></span>
<span class="line"><span style="color:#6272A4;">    // a (b c)</span></span>
<span class="line"><span style="color:#6272A4;">    // (b c)</span></span>
<span class="line"><span style="color:#6272A4;">    // i = 0, e1 = 0, e2 = -1</span></span>
<span class="line"><span style="color:#FF79C6;">    else</span><span style="color:#FF79C6;"> if</span><span style="color:#F8F8F2;"> (i </span><span style="color:#FF79C6;">&gt;</span><span style="color:#F8F8F2;"> e2) {</span></span>
<span class="line"><span style="color:#FF79C6;">      while</span><span style="color:#F8F8F2;"> (i </span><span style="color:#FF79C6;">&lt;=</span><span style="color:#F8F8F2;"> e1) {</span></span>
<span class="line"><span style="color:#50FA7B;">        unmount</span><span style="color:#F8F8F2;">(c1[i], parentComponent, parentSuspense, </span><span style="color:#BD93F9;">true</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">        i</span><span style="color:#FF79C6;">++</span></span>
<span class="line"><span style="color:#F8F8F2;">      }</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">    // 5. unknown sequence</span></span>
<span class="line"><span style="color:#6272A4;">    // [i ... e1 + 1]: a b [c d e] f g</span></span>
<span class="line"><span style="color:#6272A4;">    // [i ... e2 + 1]: a b [e d c h] f g</span></span>
<span class="line"><span style="color:#6272A4;">    // i = 2, e1 = 4, e2 = 5</span></span>
<span class="line"><span style="color:#FF79C6;">    else</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#FF79C6;">      const</span><span style="color:#F8F8F2;"> s1 </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> i </span><span style="color:#6272A4;">// prev starting index</span></span>
<span class="line"><span style="color:#FF79C6;">      const</span><span style="color:#F8F8F2;"> s2 </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> i </span><span style="color:#6272A4;">// next starting index</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">      // 5.1 build key:index map for newChildren</span></span>
<span class="line"><span style="color:#FF79C6;">      const</span><span style="color:#F8F8F2;"> keyToNewIndexMap</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> Map</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#FFB86C;font-style:italic;">PropertyKey</span><span style="color:#F8F8F2;">, </span><span style="color:#8BE9FD;font-style:italic;">number</span><span style="color:#F8F8F2;">&gt; </span><span style="color:#FF79C6;">=</span><span style="color:#FF79C6;font-weight:bold;"> new</span><span style="color:#50FA7B;"> Map</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"><span style="color:#FF79C6;">      for</span><span style="color:#F8F8F2;"> (i </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> s2; i </span><span style="color:#FF79C6;">&lt;=</span><span style="color:#F8F8F2;"> e2; i</span><span style="color:#FF79C6;">++</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#FF79C6;">        const</span><span style="color:#F8F8F2;"> nextChild </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> (c2[i] </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> optimized</span></span>
<span class="line"><span style="color:#FF79C6;">          ?</span><span style="color:#50FA7B;"> cloneIfMounted</span><span style="color:#F8F8F2;">(c2[i] </span><span style="color:#FF79C6;">as</span><span style="color:#8BE9FD;font-style:italic;"> VNode</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#FF79C6;">          :</span><span style="color:#50FA7B;"> normalizeVNode</span><span style="color:#F8F8F2;">(c2[i]))</span></span>
<span class="line"><span style="color:#FF79C6;">        if</span><span style="color:#F8F8F2;"> (nextChild.key </span><span style="color:#FF79C6;">!=</span><span style="color:#BD93F9;"> null</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#FF79C6;">          if</span><span style="color:#F8F8F2;"> (__DEV__ </span><span style="color:#FF79C6;">&amp;&amp;</span><span style="color:#F8F8F2;"> keyToNewIndexMap.</span><span style="color:#50FA7B;">has</span><span style="color:#F8F8F2;">(nextChild.key)) {</span></span>
<span class="line"><span style="color:#50FA7B;">            warn</span><span style="color:#F8F8F2;">(</span></span>
<span class="line"><span style="color:#F1FA8C;">              \`Duplicate keys found during update:\`</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#BD93F9;">              JSON</span><span style="color:#F8F8F2;">.</span><span style="color:#50FA7B;">stringify</span><span style="color:#F8F8F2;">(nextChild.key),</span></span>
<span class="line"><span style="color:#F1FA8C;">              \`Make sure keys are unique.\`</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">            )</span></span>
<span class="line"><span style="color:#F8F8F2;">          }</span></span>
<span class="line"><span style="color:#F8F8F2;">          keyToNewIndexMap.</span><span style="color:#50FA7B;">set</span><span style="color:#F8F8F2;">(nextChild.key, i)</span></span>
<span class="line"><span style="color:#F8F8F2;">        }</span></span>
<span class="line"><span style="color:#F8F8F2;">      }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">      // 5.2 loop through old children left to be patched and try to patch</span></span>
<span class="line"><span style="color:#6272A4;">      // matching nodes &amp; remove nodes that are no longer present</span></span>
<span class="line"><span style="color:#FF79C6;">      let</span><span style="color:#F8F8F2;"> j</span></span>
<span class="line"><span style="color:#FF79C6;">      let</span><span style="color:#F8F8F2;"> patched </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> 0</span></span>
<span class="line"><span style="color:#FF79C6;">      const</span><span style="color:#F8F8F2;"> toBePatched </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> e2 </span><span style="color:#FF79C6;">-</span><span style="color:#F8F8F2;"> s2 </span><span style="color:#FF79C6;">+</span><span style="color:#BD93F9;"> 1</span></span>
<span class="line"><span style="color:#FF79C6;">      let</span><span style="color:#F8F8F2;"> moved </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> false</span></span>
<span class="line"><span style="color:#6272A4;">      // used to track whether any node has moved</span></span>
<span class="line"><span style="color:#FF79C6;">      let</span><span style="color:#F8F8F2;"> maxNewIndexSoFar </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> 0</span></span>
<span class="line"><span style="color:#6272A4;">      // works as Map&lt;newIndex, oldIndex&gt;</span></span>
<span class="line"><span style="color:#6272A4;">      // Note that oldIndex is offset by +1</span></span>
<span class="line"><span style="color:#6272A4;">      // and oldIndex = 0 is a special value indicating the new node has</span></span>
<span class="line"><span style="color:#6272A4;">      // no corresponding old node.</span></span>
<span class="line"><span style="color:#6272A4;">      // used for determining longest stable subsequence</span></span>
<span class="line"><span style="color:#FF79C6;">      const</span><span style="color:#F8F8F2;"> newIndexToOldIndexMap </span><span style="color:#FF79C6;">=</span><span style="color:#FF79C6;font-weight:bold;"> new</span><span style="color:#50FA7B;"> Array</span><span style="color:#F8F8F2;">(toBePatched)</span></span>
<span class="line"><span style="color:#FF79C6;">      for</span><span style="color:#F8F8F2;"> (i </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> 0</span><span style="color:#F8F8F2;">; i </span><span style="color:#FF79C6;">&lt;</span><span style="color:#F8F8F2;"> toBePatched; i</span><span style="color:#FF79C6;">++</span><span style="color:#F8F8F2;">) newIndexToOldIndexMap[i] </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> 0</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">      for</span><span style="color:#F8F8F2;"> (i </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> s1; i </span><span style="color:#FF79C6;">&lt;=</span><span style="color:#F8F8F2;"> e1; i</span><span style="color:#FF79C6;">++</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#FF79C6;">        const</span><span style="color:#F8F8F2;"> prevChild </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> c1[i]</span></span>
<span class="line"><span style="color:#FF79C6;">        if</span><span style="color:#F8F8F2;"> (patched </span><span style="color:#FF79C6;">&gt;=</span><span style="color:#F8F8F2;"> toBePatched) {</span></span>
<span class="line"><span style="color:#6272A4;">          // all new children have been patched so this can only be a removal</span></span>
<span class="line"><span style="color:#50FA7B;">          unmount</span><span style="color:#F8F8F2;">(prevChild, parentComponent, parentSuspense, </span><span style="color:#BD93F9;">true</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#FF79C6;">          continue</span></span>
<span class="line"><span style="color:#F8F8F2;">        }</span></span>
<span class="line"><span style="color:#FF79C6;">        let</span><span style="color:#F8F8F2;"> newIndex</span></span>
<span class="line"><span style="color:#FF79C6;">        if</span><span style="color:#F8F8F2;"> (prevChild.key </span><span style="color:#FF79C6;">!=</span><span style="color:#BD93F9;"> null</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">          newIndex </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> keyToNewIndexMap.</span><span style="color:#50FA7B;">get</span><span style="color:#F8F8F2;">(prevChild.key)</span></span>
<span class="line"><span style="color:#F8F8F2;">        } </span><span style="color:#FF79C6;">else</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#6272A4;">          // key-less node, try to locate a key-less node of the same type</span></span>
<span class="line"><span style="color:#FF79C6;">          for</span><span style="color:#F8F8F2;"> (j </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> s2; j </span><span style="color:#FF79C6;">&lt;=</span><span style="color:#F8F8F2;"> e2; j</span><span style="color:#FF79C6;">++</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#FF79C6;">            if</span><span style="color:#F8F8F2;"> (</span></span>
<span class="line"><span style="color:#F8F8F2;">              newIndexToOldIndexMap[j </span><span style="color:#FF79C6;">-</span><span style="color:#F8F8F2;"> s2] </span><span style="color:#FF79C6;">===</span><span style="color:#BD93F9;"> 0</span><span style="color:#FF79C6;"> &amp;&amp;</span></span>
<span class="line"><span style="color:#50FA7B;">              isSameVNodeType</span><span style="color:#F8F8F2;">(prevChild, c2[j] </span><span style="color:#FF79C6;">as</span><span style="color:#8BE9FD;font-style:italic;"> VNode</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">            ) {</span></span>
<span class="line"><span style="color:#F8F8F2;">              newIndex </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> j</span></span>
<span class="line"><span style="color:#FF79C6;">              break</span></span>
<span class="line"><span style="color:#F8F8F2;">            }</span></span>
<span class="line"><span style="color:#F8F8F2;">          }</span></span>
<span class="line"><span style="color:#F8F8F2;">        }</span></span>
<span class="line"><span style="color:#FF79C6;">        if</span><span style="color:#F8F8F2;"> (newIndex </span><span style="color:#FF79C6;">===</span><span style="color:#BD93F9;"> undefined</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#50FA7B;">          unmount</span><span style="color:#F8F8F2;">(prevChild, parentComponent, parentSuspense, </span><span style="color:#BD93F9;">true</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">        } </span><span style="color:#FF79C6;">else</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">          newIndexToOldIndexMap[newIndex </span><span style="color:#FF79C6;">-</span><span style="color:#F8F8F2;"> s2] </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> i </span><span style="color:#FF79C6;">+</span><span style="color:#BD93F9;"> 1</span></span>
<span class="line"><span style="color:#FF79C6;">          if</span><span style="color:#F8F8F2;"> (newIndex </span><span style="color:#FF79C6;">&gt;=</span><span style="color:#F8F8F2;"> maxNewIndexSoFar) {</span></span>
<span class="line"><span style="color:#F8F8F2;">            maxNewIndexSoFar </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> newIndex</span></span>
<span class="line"><span style="color:#F8F8F2;">          } </span><span style="color:#FF79C6;">else</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">            moved </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> true</span></span>
<span class="line"><span style="color:#F8F8F2;">          }</span></span>
<span class="line"><span style="color:#50FA7B;">          patch</span><span style="color:#F8F8F2;">(</span></span>
<span class="line"><span style="color:#F8F8F2;">            prevChild,</span></span>
<span class="line"><span style="color:#F8F8F2;">            c2[newIndex] </span><span style="color:#FF79C6;">as</span><span style="color:#8BE9FD;font-style:italic;"> VNode</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">            container,</span></span>
<span class="line"><span style="color:#BD93F9;">            null</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">            parentComponent,</span></span>
<span class="line"><span style="color:#F8F8F2;">            parentSuspense,</span></span>
<span class="line"><span style="color:#F8F8F2;">            namespace,</span></span>
<span class="line"><span style="color:#F8F8F2;">            slotScopeIds,</span></span>
<span class="line"><span style="color:#F8F8F2;">            optimized,</span></span>
<span class="line"><span style="color:#F8F8F2;">          )</span></span>
<span class="line"><span style="color:#F8F8F2;">          patched</span><span style="color:#FF79C6;">++</span></span>
<span class="line"><span style="color:#F8F8F2;">        }</span></span>
<span class="line"><span style="color:#F8F8F2;">      }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">      // 5.3 move and mount</span></span>
<span class="line"><span style="color:#6272A4;">      // generate longest stable subsequence only when nodes have moved</span></span>
<span class="line"><span style="color:#FF79C6;">      const</span><span style="color:#F8F8F2;"> increasingNewIndexSequence </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> moved</span></span>
<span class="line"><span style="color:#FF79C6;">        ?</span><span style="color:#50FA7B;"> getSequence</span><span style="color:#F8F8F2;">(newIndexToOldIndexMap)</span></span>
<span class="line"><span style="color:#FF79C6;">        :</span><span style="color:#F8F8F2;"> EMPTY_ARR</span></span>
<span class="line"><span style="color:#F8F8F2;">      j </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> increasingNewIndexSequence.length </span><span style="color:#FF79C6;">-</span><span style="color:#BD93F9;"> 1</span></span>
<span class="line"><span style="color:#6272A4;">      // looping backwards so that we can use last patched node as anchor</span></span>
<span class="line"><span style="color:#FF79C6;">      for</span><span style="color:#F8F8F2;"> (i </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> toBePatched </span><span style="color:#FF79C6;">-</span><span style="color:#BD93F9;"> 1</span><span style="color:#F8F8F2;">; i </span><span style="color:#FF79C6;">&gt;=</span><span style="color:#BD93F9;"> 0</span><span style="color:#F8F8F2;">; i</span><span style="color:#FF79C6;">--</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#FF79C6;">        const</span><span style="color:#F8F8F2;"> nextIndex </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> s2 </span><span style="color:#FF79C6;">+</span><span style="color:#F8F8F2;"> i</span></span>
<span class="line"><span style="color:#FF79C6;">        const</span><span style="color:#F8F8F2;"> nextChild </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> c2[nextIndex] </span><span style="color:#FF79C6;">as</span><span style="color:#8BE9FD;font-style:italic;"> VNode</span></span>
<span class="line"><span style="color:#FF79C6;">        const</span><span style="color:#F8F8F2;"> anchor </span><span style="color:#FF79C6;">=</span></span>
<span class="line"><span style="color:#F8F8F2;">          nextIndex </span><span style="color:#FF79C6;">+</span><span style="color:#BD93F9;"> 1</span><span style="color:#FF79C6;"> &lt;</span><span style="color:#F8F8F2;"> l2 </span><span style="color:#FF79C6;">?</span><span style="color:#F8F8F2;"> (c2[nextIndex </span><span style="color:#FF79C6;">+</span><span style="color:#BD93F9;"> 1</span><span style="color:#F8F8F2;">] </span><span style="color:#FF79C6;">as</span><span style="color:#8BE9FD;font-style:italic;"> VNode</span><span style="color:#F8F8F2;">).el </span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> parentAnchor</span></span>
<span class="line"><span style="color:#FF79C6;">        if</span><span style="color:#F8F8F2;"> (newIndexToOldIndexMap[i] </span><span style="color:#FF79C6;">===</span><span style="color:#BD93F9;"> 0</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#6272A4;">          // mount new</span></span>
<span class="line"><span style="color:#50FA7B;">          patch</span><span style="color:#F8F8F2;">(</span></span>
<span class="line"><span style="color:#BD93F9;">            null</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">            nextChild,</span></span>
<span class="line"><span style="color:#F8F8F2;">            container,</span></span>
<span class="line"><span style="color:#F8F8F2;">            anchor,</span></span>
<span class="line"><span style="color:#F8F8F2;">            parentComponent,</span></span>
<span class="line"><span style="color:#F8F8F2;">            parentSuspense,</span></span>
<span class="line"><span style="color:#F8F8F2;">            namespace,</span></span>
<span class="line"><span style="color:#F8F8F2;">            slotScopeIds,</span></span>
<span class="line"><span style="color:#F8F8F2;">            optimized,</span></span>
<span class="line"><span style="color:#F8F8F2;">          )</span></span>
<span class="line"><span style="color:#F8F8F2;">        } </span><span style="color:#FF79C6;">else</span><span style="color:#FF79C6;"> if</span><span style="color:#F8F8F2;"> (moved) {</span></span>
<span class="line"><span style="color:#6272A4;">          // move if:</span></span>
<span class="line"><span style="color:#6272A4;">          // There is no stable subsequence (e.g. a reverse)</span></span>
<span class="line"><span style="color:#6272A4;">          // OR current node is not among the stable sequence</span></span>
<span class="line"><span style="color:#FF79C6;">          if</span><span style="color:#F8F8F2;"> (j </span><span style="color:#FF79C6;">&lt;</span><span style="color:#BD93F9;"> 0</span><span style="color:#FF79C6;"> ||</span><span style="color:#F8F8F2;"> i </span><span style="color:#FF79C6;">!==</span><span style="color:#F8F8F2;"> increasingNewIndexSequence[j]) {</span></span>
<span class="line"><span style="color:#50FA7B;">            move</span><span style="color:#F8F8F2;">(nextChild, container, anchor, MoveType.</span><span style="color:#BD93F9;">REORDER</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">          } </span><span style="color:#FF79C6;">else</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">            j</span><span style="color:#FF79C6;">--</span></span>
<span class="line"><span style="color:#F8F8F2;">          }</span></span>
<span class="line"><span style="color:#F8F8F2;">        }</span></span>
<span class="line"><span style="color:#F8F8F2;">      }</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h2 id="处理前置节点" tabindex="-1"><a class="header-anchor" href="#处理前置节点"><span>处理前置节点</span></a></h2><figure><img src="`+p+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><div class="language-ts line-numbers-mode" data-highlighter="shiki" data-ext="ts" data-title="ts" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> i </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> 0</span></span>
<span class="line"><span style="color:#6272A4;">// 新的一组子节点的长度</span></span>
<span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> l2 </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> c2.length</span></span>
<span class="line"><span style="color:#6272A4;">// 旧的一组子节点最后一个节点的索引位置</span></span>
<span class="line"><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> e1 </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> c1.length </span><span style="color:#FF79C6;">-</span><span style="color:#BD93F9;"> 1</span><span style="color:#6272A4;"> // prev ending index</span></span>
<span class="line"><span style="color:#6272A4;">// 新的一组子节点的最后一个节点的索引位置</span></span>
<span class="line"><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> e2 </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> l2 </span><span style="color:#FF79C6;">-</span><span style="color:#BD93F9;"> 1</span><span style="color:#6272A4;"> // next ending index</span></span>
<span class="line"><span style="color:#6272A4;">    // 1. sync from start</span></span>
<span class="line"><span style="color:#6272A4;">    // (a b) c</span></span>
<span class="line"><span style="color:#6272A4;">    // (a b) d e</span></span>
<span class="line"><span style="color:#FF79C6;">    while</span><span style="color:#F8F8F2;"> (i </span><span style="color:#FF79C6;">&lt;=</span><span style="color:#F8F8F2;"> e1 </span><span style="color:#FF79C6;">&amp;&amp;</span><span style="color:#F8F8F2;"> i </span><span style="color:#FF79C6;">&lt;=</span><span style="color:#F8F8F2;"> e2) {</span></span>
<span class="line"><span style="color:#FF79C6;">      const</span><span style="color:#F8F8F2;"> n1 </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> c1[i]</span></span>
<span class="line"><span style="color:#FF79C6;">      const</span><span style="color:#F8F8F2;"> n2 </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> (c2[i] </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> optimized</span></span>
<span class="line"><span style="color:#FF79C6;">        ?</span><span style="color:#50FA7B;"> cloneIfMounted</span><span style="color:#F8F8F2;">(c2[i] </span><span style="color:#FF79C6;">as</span><span style="color:#8BE9FD;font-style:italic;"> VNode</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#FF79C6;">        :</span><span style="color:#50FA7B;"> normalizeVNode</span><span style="color:#F8F8F2;">(c2[i]))</span></span>
<span class="line"><span style="color:#FF79C6;">      if</span><span style="color:#F8F8F2;"> (</span><span style="color:#50FA7B;">isSameVNodeType</span><span style="color:#F8F8F2;">(n1, n2)) {</span></span>
<span class="line"><span style="color:#50FA7B;">        patch</span><span style="color:#F8F8F2;">(</span></span>
<span class="line"><span style="color:#F8F8F2;">          n1,</span></span>
<span class="line"><span style="color:#F8F8F2;">          n2,</span></span>
<span class="line"><span style="color:#F8F8F2;">          container,</span></span>
<span class="line"><span style="color:#BD93F9;">          null</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">          parentComponent,</span></span>
<span class="line"><span style="color:#F8F8F2;">          parentSuspense,</span></span>
<span class="line"><span style="color:#F8F8F2;">          namespace,</span></span>
<span class="line"><span style="color:#F8F8F2;">          slotScopeIds,</span></span>
<span class="line"><span style="color:#F8F8F2;">          optimized,</span></span>
<span class="line"><span style="color:#F8F8F2;">        )</span></span>
<span class="line"><span style="color:#F8F8F2;">      } </span><span style="color:#FF79C6;">else</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#FF79C6;">        break</span></span>
<span class="line"><span style="color:#F8F8F2;">      }</span></span>
<span class="line"><span style="color:#F8F8F2;">      i</span><span style="color:#FF79C6;">++</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="处理后置节点" tabindex="-1"><a class="header-anchor" href="#处理后置节点"><span>处理后置节点</span></a></h2><figure><img src="`+o+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><div class="language-ts line-numbers-mode" data-highlighter="shiki" data-ext="ts" data-title="ts" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#6272A4;">    // 2. sync from end</span></span>
<span class="line"><span style="color:#6272A4;">    // a (b c)</span></span>
<span class="line"><span style="color:#6272A4;">    // d e (b c)</span></span>
<span class="line"><span style="color:#FF79C6;">    while</span><span style="color:#F8F8F2;"> (i </span><span style="color:#FF79C6;">&lt;=</span><span style="color:#F8F8F2;"> e1 </span><span style="color:#FF79C6;">&amp;&amp;</span><span style="color:#F8F8F2;"> i </span><span style="color:#FF79C6;">&lt;=</span><span style="color:#F8F8F2;"> e2) {</span></span>
<span class="line"><span style="color:#FF79C6;">      const</span><span style="color:#F8F8F2;"> n1 </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> c1[e1]</span></span>
<span class="line"><span style="color:#FF79C6;">      const</span><span style="color:#F8F8F2;"> n2 </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> (c2[e2] </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> optimized</span></span>
<span class="line"><span style="color:#FF79C6;">        ?</span><span style="color:#50FA7B;"> cloneIfMounted</span><span style="color:#F8F8F2;">(c2[e2] </span><span style="color:#FF79C6;">as</span><span style="color:#8BE9FD;font-style:italic;"> VNode</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#FF79C6;">        :</span><span style="color:#50FA7B;"> normalizeVNode</span><span style="color:#F8F8F2;">(c2[e2]))</span></span>
<span class="line"><span style="color:#FF79C6;">      if</span><span style="color:#F8F8F2;"> (</span><span style="color:#50FA7B;">isSameVNodeType</span><span style="color:#F8F8F2;">(n1, n2)) {</span></span>
<span class="line"><span style="color:#50FA7B;">        patch</span><span style="color:#F8F8F2;">(</span></span>
<span class="line"><span style="color:#F8F8F2;">          n1,</span></span>
<span class="line"><span style="color:#F8F8F2;">          n2,</span></span>
<span class="line"><span style="color:#F8F8F2;">          container,</span></span>
<span class="line"><span style="color:#BD93F9;">          null</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">          parentComponent,</span></span>
<span class="line"><span style="color:#F8F8F2;">          parentSuspense,</span></span>
<span class="line"><span style="color:#F8F8F2;">          namespace,</span></span>
<span class="line"><span style="color:#F8F8F2;">          slotScopeIds,</span></span>
<span class="line"><span style="color:#F8F8F2;">          optimized,</span></span>
<span class="line"><span style="color:#F8F8F2;">        )</span></span>
<span class="line"><span style="color:#F8F8F2;">      } </span><span style="color:#FF79C6;">else</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#FF79C6;">        break</span></span>
<span class="line"><span style="color:#F8F8F2;">      }</span></span>
<span class="line"><span style="color:#F8F8F2;">      e1</span><span style="color:#FF79C6;">--</span></span>
<span class="line"><span style="color:#F8F8F2;">      e2</span><span style="color:#FF79C6;">--</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="新增节点" tabindex="-1"><a class="header-anchor" href="#新增节点"><span>新增节点</span></a></h2><p>前置节点和后置节点处理完毕后，新旧两组子节点的状态如下图所示</p><figure><img src="`+F+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li>条件一：e1 &lt; i 成立：说明在预处理过程中，所有旧子节点都处理完毕了。</li><li>条件二：e2 &gt;= i 成立：说明在预处理过后，在新的一组子节点中，仍然有未被处理的节点，这些遗留的节点将被视作新增节点。</li></ul><div class="language-ts line-numbers-mode" data-highlighter="shiki" data-ext="ts" data-title="ts" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#6272A4;">    // 3. common sequence + mount</span></span>
<span class="line"><span style="color:#6272A4;">    // (a b)</span></span>
<span class="line"><span style="color:#6272A4;">    // (a b) c</span></span>
<span class="line"><span style="color:#6272A4;">    // i = 2, e1 = 1, e2 = 2</span></span>
<span class="line"><span style="color:#6272A4;">    // (a b)</span></span>
<span class="line"><span style="color:#6272A4;">    // c (a b)</span></span>
<span class="line"><span style="color:#6272A4;">    // i = 0, e1 = -1, e2 = 0</span></span>
<span class="line"><span style="color:#FF79C6;">    if</span><span style="color:#F8F8F2;"> (i </span><span style="color:#FF79C6;">&gt;</span><span style="color:#F8F8F2;"> e1) {</span></span>
<span class="line"><span style="color:#FF79C6;">      if</span><span style="color:#F8F8F2;"> (i </span><span style="color:#FF79C6;">&lt;=</span><span style="color:#F8F8F2;"> e2) {</span></span>
<span class="line"><span style="color:#FF79C6;">        const</span><span style="color:#F8F8F2;"> nextPos </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> e2 </span><span style="color:#FF79C6;">+</span><span style="color:#BD93F9;"> 1</span></span>
<span class="line"><span style="color:#FF79C6;">        const</span><span style="color:#F8F8F2;"> anchor </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> nextPos </span><span style="color:#FF79C6;">&lt;</span><span style="color:#F8F8F2;"> l2 </span><span style="color:#FF79C6;">?</span><span style="color:#F8F8F2;"> (c2[nextPos] </span><span style="color:#FF79C6;">as</span><span style="color:#8BE9FD;font-style:italic;"> VNode</span><span style="color:#F8F8F2;">).el </span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> parentAnchor</span></span>
<span class="line"><span style="color:#FF79C6;">        while</span><span style="color:#F8F8F2;"> (i </span><span style="color:#FF79C6;">&lt;=</span><span style="color:#F8F8F2;"> e2) {</span></span>
<span class="line"><span style="color:#50FA7B;">          patch</span><span style="color:#F8F8F2;">(</span></span>
<span class="line"><span style="color:#BD93F9;">            null</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">            (c2[i] </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> optimized</span></span>
<span class="line"><span style="color:#FF79C6;">              ?</span><span style="color:#50FA7B;"> cloneIfMounted</span><span style="color:#F8F8F2;">(c2[i] </span><span style="color:#FF79C6;">as</span><span style="color:#8BE9FD;font-style:italic;"> VNode</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#FF79C6;">              :</span><span style="color:#50FA7B;"> normalizeVNode</span><span style="color:#F8F8F2;">(c2[i])),</span></span>
<span class="line"><span style="color:#F8F8F2;">            container,</span></span>
<span class="line"><span style="color:#F8F8F2;">            anchor,</span></span>
<span class="line"><span style="color:#F8F8F2;">            parentComponent,</span></span>
<span class="line"><span style="color:#F8F8F2;">            parentSuspense,</span></span>
<span class="line"><span style="color:#F8F8F2;">            namespace,</span></span>
<span class="line"><span style="color:#F8F8F2;">            slotScopeIds,</span></span>
<span class="line"><span style="color:#F8F8F2;">            optimized,</span></span>
<span class="line"><span style="color:#F8F8F2;">          )</span></span>
<span class="line"><span style="color:#F8F8F2;">          i</span><span style="color:#FF79C6;">++</span></span>
<span class="line"><span style="color:#F8F8F2;">        }</span></span>
<span class="line"><span style="color:#F8F8F2;">      }</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="删除节点" tabindex="-1"><a class="header-anchor" href="#删除节点"><span>删除节点</span></a></h2><p>当相同的前置节点和后置节点全部处理完毕后，新的一组子节点已经全部处理完毕了，而旧的一组子节点中还有遗留的节点未被处理，这些节点都是需要卸载的。</p><figure><img src="`+c+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><div class="language-ts line-numbers-mode" data-highlighter="shiki" data-ext="ts" data-title="ts" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#6272A4;">    // 4. common sequence + unmount</span></span>
<span class="line"><span style="color:#6272A4;">    // (a b) c</span></span>
<span class="line"><span style="color:#6272A4;">    // (a b)</span></span>
<span class="line"><span style="color:#6272A4;">    // i = 2, e1 = 2, e2 = 1</span></span>
<span class="line"><span style="color:#6272A4;">    // a (b c)</span></span>
<span class="line"><span style="color:#6272A4;">    // (b c)</span></span>
<span class="line"><span style="color:#6272A4;">    // i = 0, e1 = 0, e2 = -1</span></span>
<span class="line"><span style="color:#FF79C6;">    else</span><span style="color:#FF79C6;"> if</span><span style="color:#F8F8F2;"> (i </span><span style="color:#FF79C6;">&gt;</span><span style="color:#F8F8F2;"> e2) {</span></span>
<span class="line"><span style="color:#FF79C6;">      while</span><span style="color:#F8F8F2;"> (i </span><span style="color:#FF79C6;">&lt;=</span><span style="color:#F8F8F2;"> e1) {</span></span>
<span class="line"><span style="color:#50FA7B;">        unmount</span><span style="color:#F8F8F2;">(c1[i], parentComponent, parentSuspense, </span><span style="color:#BD93F9;">true</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">        i</span><span style="color:#FF79C6;">++</span></span>
<span class="line"><span style="color:#F8F8F2;">      }</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="非理想情况下的未被处理节点" tabindex="-1"><a class="header-anchor" href="#非理想情况下的未被处理节点"><span>非理想情况下的未被处理节点</span></a></h2><p>在非理想情况下，经过预处理后，无论是新的一组子节点，还是旧的一组节点，都有部分节点未经处理。</p><figure><img src="`+i+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>要对非理想情况下未被处理的节点进行处理，就需要先找出那些需要移动的节点。</p><h3 id="构建索引表" tabindex="-1"><a class="header-anchor" href="#构建索引表"><span>构建索引表</span></a></h3><p>为新的一组子节点构建一张索引表，用来存储新的一组子节点的 key 和节点位置索引之间的映射，其目的是为了可以快速找到新的一组子节点中节点所在的位置，解决潜在的性能问题。</p><figure><img src="'+r+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><div class="language-ts line-numbers-mode" data-highlighter="shiki" data-ext="ts" data-title="ts" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">      const</span><span style="color:#F8F8F2;"> s1 </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> i </span><span style="color:#6272A4;">// prev starting index</span></span>
<span class="line"><span style="color:#FF79C6;">      const</span><span style="color:#F8F8F2;"> s2 </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> i </span><span style="color:#6272A4;">// next starting index</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">      // 5.1 build key:index map for newChildren</span></span>
<span class="line"><span style="color:#6272A4;">      // map 集合的键是节点的 key</span></span>
<span class="line"><span style="color:#6272A4;">      // map 集合的值是节点的索引位置</span></span>
<span class="line"><span style="color:#FF79C6;">      const</span><span style="color:#F8F8F2;"> keyToNewIndexMap</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> Map</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#FFB86C;font-style:italic;">PropertyKey</span><span style="color:#F8F8F2;">, </span><span style="color:#8BE9FD;font-style:italic;">number</span><span style="color:#F8F8F2;">&gt; </span><span style="color:#FF79C6;">=</span><span style="color:#FF79C6;font-weight:bold;"> new</span><span style="color:#50FA7B;"> Map</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"><span style="color:#FF79C6;">      for</span><span style="color:#F8F8F2;"> (i </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> s2; i </span><span style="color:#FF79C6;">&lt;=</span><span style="color:#F8F8F2;"> e2; i</span><span style="color:#FF79C6;">++</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#FF79C6;">        const</span><span style="color:#F8F8F2;"> nextChild </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> (c2[i] </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> optimized</span></span>
<span class="line"><span style="color:#FF79C6;">          ?</span><span style="color:#50FA7B;"> cloneIfMounted</span><span style="color:#F8F8F2;">(c2[i] </span><span style="color:#FF79C6;">as</span><span style="color:#8BE9FD;font-style:italic;"> VNode</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#FF79C6;">          :</span><span style="color:#50FA7B;"> normalizeVNode</span><span style="color:#F8F8F2;">(c2[i]))</span></span>
<span class="line"><span style="color:#FF79C6;">        if</span><span style="color:#F8F8F2;"> (nextChild.key </span><span style="color:#FF79C6;">!=</span><span style="color:#BD93F9;"> null</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#FF79C6;">          if</span><span style="color:#F8F8F2;"> (__DEV__ </span><span style="color:#FF79C6;">&amp;&amp;</span><span style="color:#F8F8F2;"> keyToNewIndexMap.</span><span style="color:#50FA7B;">has</span><span style="color:#F8F8F2;">(nextChild.key)) {</span></span>
<span class="line"><span style="color:#50FA7B;">            warn</span><span style="color:#F8F8F2;">(</span></span>
<span class="line"><span style="color:#F1FA8C;">              \`Duplicate keys found during update:\`</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#BD93F9;">              JSON</span><span style="color:#F8F8F2;">.</span><span style="color:#50FA7B;">stringify</span><span style="color:#F8F8F2;">(nextChild.key),</span></span>
<span class="line"><span style="color:#F1FA8C;">              \`Make sure keys are unique.\`</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">            )</span></span>
<span class="line"><span style="color:#F8F8F2;">          }</span></span>
<span class="line"><span style="color:#F8F8F2;">          keyToNewIndexMap.</span><span style="color:#50FA7B;">set</span><span style="color:#F8F8F2;">(nextChild.key, i)</span></span>
<span class="line"><span style="color:#F8F8F2;">        }</span></span>
<span class="line"><span style="color:#F8F8F2;">      }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="构造-newindextooldindexmap-数组" tabindex="-1"><a class="header-anchor" href="#构造-newindextooldindexmap-数组"><span>构造 newIndexToOldIndexMap 数组</span></a></h3><p>newIndexToOldIndexMap 数组用来存储新的一组子节点中的节点在旧的一组子节点中的位置索引，后面将会使用它计算出一个最长递增子序列，并用于辅助完成 DOM 移动的操作。</p><figure><img src="`+t+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="'+d+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><div class="language-ts line-numbers-mode" data-highlighter="shiki" data-ext="ts" data-title="ts" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#6272A4;">      // 5.2 loop through old children left to be patched and try to patch</span></span>
<span class="line"><span style="color:#6272A4;">      // matching nodes &amp; remove nodes that are no longer present</span></span>
<span class="line"><span style="color:#FF79C6;">      let</span><span style="color:#F8F8F2;"> j</span></span>
<span class="line"><span style="color:#FF79C6;">      let</span><span style="color:#F8F8F2;"> patched </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> 0</span></span>
<span class="line"><span style="color:#FF79C6;">      const</span><span style="color:#F8F8F2;"> toBePatched </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> e2 </span><span style="color:#FF79C6;">-</span><span style="color:#F8F8F2;"> s2 </span><span style="color:#FF79C6;">+</span><span style="color:#BD93F9;"> 1</span></span>
<span class="line"><span style="color:#FF79C6;">      let</span><span style="color:#F8F8F2;"> moved </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> false</span></span>
<span class="line"><span style="color:#6272A4;">      // used to track whether any node has moved</span></span>
<span class="line"><span style="color:#FF79C6;">      let</span><span style="color:#F8F8F2;"> maxNewIndexSoFar </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> 0</span></span>
<span class="line"><span style="color:#6272A4;">      // works as Map&lt;newIndex, oldIndex&gt;</span></span>
<span class="line"><span style="color:#6272A4;">      // Note that oldIndex is offset by +1</span></span>
<span class="line"><span style="color:#6272A4;">      // and oldIndex = 0 is a special value indicating the new node has</span></span>
<span class="line"><span style="color:#6272A4;">      // no corresponding old node.</span></span>
<span class="line"><span style="color:#6272A4;">      // used for determining longest stable subsequence</span></span>
<span class="line"><span style="color:#FF79C6;">      const</span><span style="color:#F8F8F2;"> newIndexToOldIndexMap </span><span style="color:#FF79C6;">=</span><span style="color:#FF79C6;font-weight:bold;"> new</span><span style="color:#50FA7B;"> Array</span><span style="color:#F8F8F2;">(toBePatched)</span></span>
<span class="line"><span style="color:#FF79C6;">      for</span><span style="color:#F8F8F2;"> (i </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> 0</span><span style="color:#F8F8F2;">; i </span><span style="color:#FF79C6;">&lt;</span><span style="color:#F8F8F2;"> toBePatched; i</span><span style="color:#FF79C6;">++</span><span style="color:#F8F8F2;">) newIndexToOldIndexMap[i] </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> 0</span></span>
<span class="line"><span style="color:#6272A4;">      // 遍历旧节点</span></span>
<span class="line"><span style="color:#FF79C6;">      for</span><span style="color:#F8F8F2;"> (i </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> s1; i </span><span style="color:#FF79C6;">&lt;=</span><span style="color:#F8F8F2;"> e1; i</span><span style="color:#FF79C6;">++</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#6272A4;">        // 旧数组中剩余未处理的节点</span></span>
<span class="line"><span style="color:#FF79C6;">        const</span><span style="color:#F8F8F2;"> prevChild </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> c1[i]</span></span>
<span class="line"><span style="color:#6272A4;">        // 如果更新过的节点数量大于需要更新的节点数量，则卸载多余的节点</span></span>
<span class="line"><span style="color:#FF79C6;">        if</span><span style="color:#F8F8F2;"> (patched </span><span style="color:#FF79C6;">&gt;=</span><span style="color:#F8F8F2;"> toBePatched) {</span></span>
<span class="line"><span style="color:#6272A4;">          // all new children have been patched so this can only be a removal</span></span>
<span class="line"><span style="color:#50FA7B;">          unmount</span><span style="color:#F8F8F2;">(prevChild, parentComponent, parentSuspense, </span><span style="color:#BD93F9;">true</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#FF79C6;">          continue</span></span>
<span class="line"><span style="color:#F8F8F2;">        }</span></span>
<span class="line"><span style="color:#FF79C6;">        let</span><span style="color:#F8F8F2;"> newIndex</span></span>
<span class="line"><span style="color:#FF79C6;">        if</span><span style="color:#F8F8F2;"> (prevChild.key </span><span style="color:#FF79C6;">!=</span><span style="color:#BD93F9;"> null</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#6272A4;">          // 获取旧节点在新节点中的位置</span></span>
<span class="line"><span style="color:#F8F8F2;">          newIndex </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> keyToNewIndexMap.</span><span style="color:#50FA7B;">get</span><span style="color:#F8F8F2;">(prevChild.key)</span></span>
<span class="line"><span style="color:#F8F8F2;">        } </span><span style="color:#FF79C6;">else</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#6272A4;">          // key-less node, try to locate a key-less node of the same type</span></span>
<span class="line"><span style="color:#6272A4;">          // s2新节点数组起始位置</span></span>
<span class="line"><span style="color:#FF79C6;">          for</span><span style="color:#F8F8F2;"> (j </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> s2; j </span><span style="color:#FF79C6;">&lt;=</span><span style="color:#F8F8F2;"> e2; j</span><span style="color:#FF79C6;">++</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#FF79C6;">            if</span><span style="color:#F8F8F2;"> (</span></span>
<span class="line"><span style="color:#F8F8F2;">              newIndexToOldIndexMap[j </span><span style="color:#FF79C6;">-</span><span style="color:#F8F8F2;"> s2] </span><span style="color:#FF79C6;">===</span><span style="color:#BD93F9;"> 0</span><span style="color:#FF79C6;"> &amp;&amp;</span></span>
<span class="line"><span style="color:#50FA7B;">              isSameVNodeType</span><span style="color:#F8F8F2;">(prevChild, c2[j] </span><span style="color:#FF79C6;">as</span><span style="color:#8BE9FD;font-style:italic;"> VNode</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">            ) {</span></span>
<span class="line"><span style="color:#F8F8F2;">              newIndex </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> j</span></span>
<span class="line"><span style="color:#FF79C6;">              break</span></span>
<span class="line"><span style="color:#F8F8F2;">            }</span></span>
<span class="line"><span style="color:#F8F8F2;">          }</span></span>
<span class="line"><span style="color:#F8F8F2;">        }</span></span>
<span class="line"><span style="color:#6272A4;">        // 新节点没有卸载</span></span>
<span class="line"><span style="color:#FF79C6;">        if</span><span style="color:#F8F8F2;"> (newIndex </span><span style="color:#FF79C6;">===</span><span style="color:#BD93F9;"> undefined</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#50FA7B;">          unmount</span><span style="color:#F8F8F2;">(prevChild, parentComponent, parentSuspense, </span><span style="color:#BD93F9;">true</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">        } </span><span style="color:#FF79C6;">else</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#6272A4;">         // s2新节点数组起始位置</span></span>
<span class="line"><span style="color:#F8F8F2;">          newIndexToOldIndexMap[newIndex </span><span style="color:#FF79C6;">-</span><span style="color:#F8F8F2;"> s2] </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> i </span><span style="color:#FF79C6;">+</span><span style="color:#BD93F9;"> 1</span></span>
<span class="line"><span style="color:#6272A4;">          // 通过比较 newIndex 和 maxNewIndexSoFar 的值来判断节点是否需要移动</span></span>
<span class="line"><span style="color:#6272A4;">          // 如果在遍历过程中遇到的索引值呈现递增趋势，则说明不需要移动节点</span></span>
<span class="line"><span style="color:#FF79C6;">          if</span><span style="color:#F8F8F2;"> (newIndex </span><span style="color:#FF79C6;">&gt;=</span><span style="color:#F8F8F2;"> maxNewIndexSoFar) {</span></span>
<span class="line"><span style="color:#F8F8F2;">            maxNewIndexSoFar </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> newIndex</span></span>
<span class="line"><span style="color:#F8F8F2;">          } </span><span style="color:#FF79C6;">else</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#6272A4;">           // 否则需要移动</span></span>
<span class="line"><span style="color:#F8F8F2;">            moved </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> true</span></span>
<span class="line"><span style="color:#F8F8F2;">          }</span></span>
<span class="line"><span style="color:#50FA7B;">          patch</span><span style="color:#F8F8F2;">(</span></span>
<span class="line"><span style="color:#F8F8F2;">            prevChild,</span></span>
<span class="line"><span style="color:#F8F8F2;">            c2[newIndex] </span><span style="color:#FF79C6;">as</span><span style="color:#8BE9FD;font-style:italic;"> VNode</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">            container,</span></span>
<span class="line"><span style="color:#BD93F9;">            null</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">            parentComponent,</span></span>
<span class="line"><span style="color:#F8F8F2;">            parentSuspense,</span></span>
<span class="line"><span style="color:#F8F8F2;">            namespace,</span></span>
<span class="line"><span style="color:#F8F8F2;">            slotScopeIds,</span></span>
<span class="line"><span style="color:#F8F8F2;">            optimized,</span></span>
<span class="line"><span style="color:#F8F8F2;">          )</span></span>
<span class="line"><span style="color:#F8F8F2;">          patched</span><span style="color:#FF79C6;">++</span></span>
<span class="line"><span style="color:#F8F8F2;">        }</span></span>
<span class="line"><span style="color:#F8F8F2;">      }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="移动节点" tabindex="-1"><a class="header-anchor" href="#移动节点"><span>移动节点</span></a></h3><div class="language-ts line-numbers-mode" data-highlighter="shiki" data-ext="ts" data-title="ts" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"></span>
<span class="line"><span style="color:#6272A4;">  // 5.3 move and mount</span></span>
<span class="line"><span style="color:#6272A4;">  // generate longest stable subsequence only when nodes have moved</span></span>
<span class="line"><span style="color:#6272A4;">  // 移动 计算最长递增子序列的索引</span></span>
<span class="line"><span style="color:#FF79C6;">  const</span><span style="color:#F8F8F2;"> increasingNewIndexSequence </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> moved</span></span>
<span class="line"><span style="color:#FF79C6;">    ?</span><span style="color:#50FA7B;"> getSequence</span><span style="color:#F8F8F2;">(newIndexToOldIndexMap)</span></span>
<span class="line"><span style="color:#FF79C6;">    :</span><span style="color:#F8F8F2;"> EMPTY_ARR</span></span>
<span class="line"><span style="color:#F8F8F2;">  j </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> increasingNewIndexSequence.length </span><span style="color:#FF79C6;">-</span><span style="color:#BD93F9;"> 1</span></span>
<span class="line"><span style="color:#6272A4;">  // looping backwards so that we can use last patched node as anchor</span></span>
<span class="line"><span style="color:#6272A4;">  // 新的一组子节点中剩余未处理节点的数量</span></span>
<span class="line"><span style="color:#FF79C6;">  for</span><span style="color:#F8F8F2;"> (i </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> toBePatched </span><span style="color:#FF79C6;">-</span><span style="color:#BD93F9;"> 1</span><span style="color:#F8F8F2;">; i </span><span style="color:#FF79C6;">&gt;=</span><span style="color:#BD93F9;"> 0</span><span style="color:#F8F8F2;">; i</span><span style="color:#FF79C6;">--</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#FF79C6;">    const</span><span style="color:#F8F8F2;"> nextIndex </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> s2 </span><span style="color:#FF79C6;">+</span><span style="color:#F8F8F2;"> i</span></span>
<span class="line"><span style="color:#FF79C6;">    const</span><span style="color:#F8F8F2;"> nextChild </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> c2[nextIndex] </span><span style="color:#FF79C6;">as</span><span style="color:#8BE9FD;font-style:italic;"> VNode</span></span>
<span class="line"><span style="color:#FF79C6;">    const</span><span style="color:#F8F8F2;"> anchor </span><span style="color:#FF79C6;">=</span></span>
<span class="line"><span style="color:#F8F8F2;">      nextIndex </span><span style="color:#FF79C6;">+</span><span style="color:#BD93F9;"> 1</span><span style="color:#FF79C6;"> &lt;</span><span style="color:#F8F8F2;"> l2 </span><span style="color:#FF79C6;">?</span><span style="color:#F8F8F2;"> (c2[nextIndex </span><span style="color:#FF79C6;">+</span><span style="color:#BD93F9;"> 1</span><span style="color:#F8F8F2;">] </span><span style="color:#FF79C6;">as</span><span style="color:#8BE9FD;font-style:italic;"> VNode</span><span style="color:#F8F8F2;">).el </span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> parentAnchor</span></span>
<span class="line"><span style="color:#FF79C6;">    if</span><span style="color:#F8F8F2;"> (newIndexToOldIndexMap[i] </span><span style="color:#FF79C6;">===</span><span style="color:#BD93F9;"> 0</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#6272A4;">      // mount new</span></span>
<span class="line"><span style="color:#50FA7B;">      patch</span><span style="color:#F8F8F2;">(</span></span>
<span class="line"><span style="color:#BD93F9;">        null</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">        nextChild,</span></span>
<span class="line"><span style="color:#F8F8F2;">        container,</span></span>
<span class="line"><span style="color:#F8F8F2;">        anchor,</span></span>
<span class="line"><span style="color:#F8F8F2;">        parentComponent,</span></span>
<span class="line"><span style="color:#F8F8F2;">        parentSuspense,</span></span>
<span class="line"><span style="color:#F8F8F2;">        namespace,</span></span>
<span class="line"><span style="color:#F8F8F2;">        slotScopeIds,</span></span>
<span class="line"><span style="color:#F8F8F2;">        optimized,</span></span>
<span class="line"><span style="color:#F8F8F2;">      )</span></span>
<span class="line"><span style="color:#F8F8F2;">    } </span><span style="color:#FF79C6;">else</span><span style="color:#FF79C6;"> if</span><span style="color:#F8F8F2;"> (moved) {</span></span>
<span class="line"><span style="color:#6272A4;">      // move if:</span></span>
<span class="line"><span style="color:#6272A4;">      // There is no stable subsequence (e.g. a reverse)</span></span>
<span class="line"><span style="color:#6272A4;">      // OR current node is not among the stable sequence</span></span>
<span class="line"><span style="color:#6272A4;">      //  i 新节点索引</span></span>
<span class="line"><span style="color:#6272A4;">      //  j 子序列索引</span></span>
<span class="line"><span style="color:#6272A4;">      //  不相等 节点需要移动</span></span>
<span class="line"><span style="color:#FF79C6;">      if</span><span style="color:#F8F8F2;"> (j </span><span style="color:#FF79C6;">&lt;</span><span style="color:#BD93F9;"> 0</span><span style="color:#FF79C6;"> ||</span><span style="color:#F8F8F2;"> i </span><span style="color:#FF79C6;">!==</span><span style="color:#F8F8F2;"> increasingNewIndexSequence[j]) {</span></span>
<span class="line"><span style="color:#50FA7B;">        move</span><span style="color:#F8F8F2;">(nextChild, container, anchor, MoveType.</span><span style="color:#BD93F9;">REORDER</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">      } </span><span style="color:#FF79C6;">else</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">        j</span><span style="color:#FF79C6;">--</span></span>
<span class="line"><span style="color:#F8F8F2;">      }</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="参考" tabindex="-1"><a class="header-anchor" href="#参考"><span>参考</span></a></h1><ul><li>《Vue设计与实现》</li></ul>`,46)]))}const b=n(y,[["render",v],["__file","diff.html.vue"]]),C=JSON.parse('{"path":"/vue3/diff.html","title":"最长递增子序列","lang":"en-US","frontmatter":{"description":"快速 Diff 算法在实测中性能最优。它借鉴了文本 Diff 中的预处理思路，先处理新旧两组子节点中相同的前置节点和相同的后置节点。当前置节点和后置节点全部处理完毕后，如果无法简单地通过挂载新节点或者卸载已经不存在的节点来完成更新，则需要根据节点的索引关系，构造出一个最长递增子序列。最长递增子序列所指向的节点即为不需要移动的节点。 最长递增子序列 给你...","head":[["meta",{"property":"og:url","content":"https://luxiag.github.io/luxiag/blog/vue3/diff.html"}],["meta",{"property":"og:title","content":"最长递增子序列"}],["meta",{"property":"og:description","content":"快速 Diff 算法在实测中性能最优。它借鉴了文本 Diff 中的预处理思路，先处理新旧两组子节点中相同的前置节点和相同的后置节点。当前置节点和后置节点全部处理完毕后，如果无法简单地通过挂载新节点或者卸载已经不存在的节点来完成更新，则需要根据节点的索引关系，构造出一个最长递增子序列。最长递增子序列所指向的节点即为不需要移动的节点。 最长递增子序列 给你..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2025-02-28T06:11:49.000Z"}],["meta",{"property":"article:modified_time","content":"2025-02-28T06:11:49.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"最长递增子序列\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-02-28T06:11:49.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"luxiag\\",\\"url\\":\\"https://luxiag.github.io/luxiag\\"}]}"]]},"git":{"createdTime":1734510272000,"updatedTime":1740723109000,"contributors":[{"name":"luxiag","username":"luxiag","email":"luxiag@qq.com","commits":4,"url":"https://github.com/luxiag"}]},"readingTime":{"minutes":12.28,"words":3685},"filePathRelative":"vue3/diff.md","localizedDate":"December 18, 2024","excerpt":"<p>快速 Diff 算法在实测中性能最优。它借鉴了文本 Diff 中的预处理思路，先处理新旧两组子节点中相同的前置节点和相同的后置节点。当前置节点和后置节点全部处理完毕后，如果无法简单地通过挂载新节点或者卸载已经不存在的节点来完成更新，则需要根据节点的索引关系，构造出一个最长递增子序列。最长递增子序列所指向的节点即为不需要移动的节点。</p>","autoDesc":true}');export{b as comp,C as data};
