import{_ as n,c as l,b as a,o as p}from"./app-CWCG87Uu.js";const o="/blog/assets/958003305011022323-BDTtJ_9R.png",e="/blog/assets/601000909011132323-CkLbF1Dj.png",F="/blog/assets/593003309011132323-MRMZvn7D.png",c="/blog/assets/978003409011132323-CJF292zp.png",t="/blog/assets/380003509011132323-Dg49vwo_.png",r="/blog/assets/795003809011132323-CAZWeTHW.png",i={};function y(d,s){return p(),l("div",null,s[0]||(s[0]=[a('<h2 id="进程架构" tabindex="-1"><a class="header-anchor" href="#进程架构"><span>进程架构</span></a></h2><ul><li>当启动一个程序时，操作系统会为该程序分配内存，用来存放代码、运行过程中的数据，这样的运行环境叫做进程</li><li>一个进程可以启动和管理多个线程，线程之间可以共享进行数据，任何一个线程出错都可能会导致进程崩溃</li></ul><h3 id="chrome-的进程架构" tabindex="-1"><a class="header-anchor" href="#chrome-的进程架构"><span>Chrome 的进程架构</span></a></h3><ul><li>浏览器主进程 负责界面显示、用户交互和子进程管理</li><li>渲染进程 排版引擎和 V8 引擎运行在该进程中，负责把 HTML、CSS 和 JavaScript 转变成网页</li><li>网络进程 用来加载网络资源的</li><li>GPU 进程 用来实现 CSS3 和 3D 效果</li></ul><h3 id="html-加载" tabindex="-1"><a class="header-anchor" href="#html-加载"><span>HTML 加载</span></a></h3><ul><li>主进程接收用户输入的 URL</li><li>主进程把该 URL 转发给网络进程</li><li>在网络进程中发起 URL 请求</li><li>网络进程接收到响应头数据并转发给主进程</li><li>主进程发送提交导航消息到渲染进程</li><li>渲染进程开始从网络进程接收 HTML 数据</li><li>HTML 接收接受完毕后通知主进程确认导航</li><li>渲染进程开始 HTML 解析和加载子资源</li><li>HTML 解析完毕和加载子资源页面加载完成后会通知主进程页面加载完成</li></ul><figure><img src="'+o+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="渲染过程" tabindex="-1"><a class="header-anchor" href="#渲染过程"><span>渲染过程</span></a></h2><ul><li>渲染进程把 HTML 转变为 DOM 树型结构</li><li>渲染进程把 CSS 文本转为浏览器中的 stylesheet</li><li>通过 stylesheet 计算出 DOM 节点的样式</li><li>根据 DOM 树创建布局树</li><li>并计算各个元素的布局信息</li><li>根据布局树生成分层树</li><li>根据分层树进行生成绘制步骤</li><li>把绘制步骤交给渲染进程中的合成线程进行合成</li><li>合成线程将图层分成图块(tile)</li><li>合成线程会把分好的图块发给栅格化线程池，栅格化线程会把图片(tile)转化为位图</li><li>而其实栅格化线程在工作的时候会把栅格化的工作交给 GPU 进程来完成，最终生成的位图就保存在了 GPU 内存中</li><li>当所有的图块都光栅化之后合成线程会发送绘制图块的命令给浏览器主进程</li><li>浏览器主进程然后会从 GPU 内存中取出位图显示到页面上</li></ul><h3 id="html-转-dom-树" tabindex="-1"><a class="header-anchor" href="#html-转-dom-树"><span>HTML 转 DOM 树</span></a></h3><ul><li>浏览器中的 HTML 解析器可以把 HTML 字符串转换成 DOM 结构</li><li>HTML 解析器边接收网络数据边解析 HTML</li><li>解析 DOM <ul><li>HTML 字符串转 Token</li><li>Token 栈用来维护节点之间的父子关系，Token 会依次压入栈中</li><li>如果是开始标签，把 Token 压入栈中并且创建新的 DOM 节点并添加到父节点的 children 中</li><li>如果是文本 Token，则把文本节点添加到栈顶元素的 children 中，文本 Token 不需要入栈</li><li>如果是结束标签，此开始标签出栈</li></ul></li></ul><h3 id="css-转-stylesheet" tabindex="-1"><a class="header-anchor" href="#css-转-stylesheet"><span>CSS 转 stylesheet</span></a></h3><ul><li>渲染进程把 CSS 文本转为浏览器中的 stylesheet</li><li>CSS 来源可能有 link 标签、style 标签和 style 行内样式</li><li>渲染引擎会把 CSS 转换为 document.styleSheets</li></ul><h3 id="计算出-dom-节点的样式" tabindex="-1"><a class="header-anchor" href="#计算出-dom-节点的样式"><span>计算出 DOM 节点的样式</span></a></h3><ul><li>根据 CSS 的继承和层叠规则计算 DOM 节点的样式</li><li>DOM 节点的样式保存在了 ComputedStyle 中</li></ul><h3 id="构建布局树" tabindex="-1"><a class="header-anchor" href="#构建布局树"><span>构建布局树</span></a></h3><ul><li>创建布局树</li><li>创建一棵只包含可见元素的布局树 <img src="'+e+`" alt="" loading="lazy"></li></ul><h3 id="计算布局" tabindex="-1"><a class="header-anchor" href="#计算布局"><span>计算布局</span></a></h3><p>计算各个元素的布局</p><details class="hint-container details"><summary>request</summary><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> htmlparser2 </span><span style="color:#FF79C6;">=</span><span style="color:#50FA7B;"> require</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">htmlparser2</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> http </span><span style="color:#FF79C6;">=</span><span style="color:#50FA7B;"> require</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">http</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> css </span><span style="color:#FF79C6;">=</span><span style="color:#50FA7B;"> require</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">css</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> main </span><span style="color:#FF79C6;">=</span><span style="color:#50FA7B;"> require</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">./main.js</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> network </span><span style="color:#FF79C6;">=</span><span style="color:#50FA7B;"> require</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">./network.js</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> render </span><span style="color:#FF79C6;">=</span><span style="color:#50FA7B;"> require</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">./render.js</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> host </span><span style="color:#FF79C6;">=</span><span style="color:#E9F284;"> &#39;</span><span style="color:#F1FA8C;">localhost</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> port </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> 80</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#8BE9FD;font-style:italic;">Array</span><span style="color:#F8F8F2;">.prototype.</span><span style="color:#50FA7B;">top</span><span style="color:#FF79C6;"> =</span><span style="color:#FF79C6;"> function</span><span style="color:#F8F8F2;"> () {</span></span>
<span class="line"><span style="color:#FF79C6;">    return</span><span style="color:#BD93F9;font-style:italic;"> this</span><span style="color:#F8F8F2;">[</span><span style="color:#BD93F9;font-style:italic;">this</span><span style="color:#F8F8F2;">.length </span><span style="color:#FF79C6;">-</span><span style="color:#BD93F9;"> 1</span><span style="color:#F8F8F2;">];</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#6272A4;">/** 浏览器主进程 **/</span></span>
<span class="line"><span style="color:#F8F8F2;">main.</span><span style="color:#50FA7B;">on</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">request</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#FF79C6;">function</span><span style="color:#F8F8F2;"> (</span><span style="color:#FFB86C;font-style:italic;">options</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#6272A4;">    //2.主进程把该URL转发给网络进程</span></span>
<span class="line"><span style="color:#F8F8F2;">    network.</span><span style="color:#50FA7B;">emit</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">request</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, options);</span></span>
<span class="line"><span style="color:#F8F8F2;">})</span></span>
<span class="line"><span style="color:#6272A4;">//开始准备渲染页面</span></span>
<span class="line"><span style="color:#F8F8F2;">main.</span><span style="color:#50FA7B;">on</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">prepareRender</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#FF79C6;">function</span><span style="color:#F8F8F2;"> (</span><span style="color:#FFB86C;font-style:italic;">response</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#6272A4;">    //5.主进程发送提交导航消息到渲染进程</span></span>
<span class="line"><span style="color:#F8F8F2;">    render.</span><span style="color:#50FA7B;">emit</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">commitNavigation</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, response);</span></span>
<span class="line"><span style="color:#F8F8F2;">})</span></span>
<span class="line"><span style="color:#F8F8F2;">main.</span><span style="color:#50FA7B;">on</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">confirmNavigation</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#FF79C6;">function</span><span style="color:#F8F8F2;"> () {</span></span>
<span class="line"><span style="color:#F8F8F2;">    console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">confirmNavigation</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">})</span></span>
<span class="line"><span style="color:#F8F8F2;">main.</span><span style="color:#50FA7B;">on</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">DOMContentLoaded</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#FF79C6;">function</span><span style="color:#F8F8F2;"> () {</span></span>
<span class="line"><span style="color:#F8F8F2;">    console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">DOMContentLoaded</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">})</span></span>
<span class="line"><span style="color:#F8F8F2;">main.</span><span style="color:#50FA7B;">on</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">Load</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#FF79C6;">function</span><span style="color:#F8F8F2;"> () {</span></span>
<span class="line"><span style="color:#F8F8F2;">    console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">Load</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">/** 网络进程 **/</span></span>
<span class="line"><span style="color:#F8F8F2;">network.</span><span style="color:#50FA7B;">on</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">request</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#FF79C6;">function</span><span style="color:#F8F8F2;"> (</span><span style="color:#FFB86C;font-style:italic;">options</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#6272A4;">    //3.在网络进程中发起URL请求</span></span>
<span class="line"><span style="color:#FF79C6;">    let</span><span style="color:#F8F8F2;"> request </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> http.</span><span style="color:#50FA7B;">request</span><span style="color:#F8F8F2;">(options, (</span><span style="color:#FFB86C;font-style:italic;">response</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#6272A4;">        //4.网络进程接收到响应头数据并转发给主进程</span></span>
<span class="line"><span style="color:#F8F8F2;">        main.</span><span style="color:#50FA7B;">emit</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">prepareRender</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, response);</span></span>
<span class="line"><span style="color:#F8F8F2;">    });</span></span>
<span class="line"><span style="color:#6272A4;">    //结束请求体</span></span>
<span class="line"><span style="color:#F8F8F2;">    request.</span><span style="color:#50FA7B;">end</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#F8F8F2;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">/** 渲染进程 **/</span></span>
<span class="line"><span style="color:#6272A4;">//6.渲染进程开始从网络进程接收HTML数据</span></span>
<span class="line"><span style="color:#F8F8F2;">render.</span><span style="color:#50FA7B;">on</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">commitNavigation</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#FF79C6;">function</span><span style="color:#F8F8F2;"> (</span><span style="color:#FFB86C;font-style:italic;">response</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#FF79C6;">    const</span><span style="color:#F8F8F2;"> headers </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> response.headers;</span></span>
<span class="line"><span style="color:#FF79C6;">    const</span><span style="color:#F8F8F2;"> contentType </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> headers[</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">content-type</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">];</span></span>
<span class="line"><span style="color:#FF79C6;">    if</span><span style="color:#F8F8F2;"> (contentType.</span><span style="color:#50FA7B;">indexOf</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">text/html</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">!==</span><span style="color:#FF79C6;"> -</span><span style="color:#BD93F9;">1</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#6272A4;">        //1. 渲染进程把HTML转变为DOM树型结构</span></span>
<span class="line"><span style="color:#FF79C6;">        const</span><span style="color:#F8F8F2;"> document </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> { type</span><span style="color:#FF79C6;">:</span><span style="color:#E9F284;"> &#39;</span><span style="color:#F1FA8C;">document</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, attributes</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> {}, children</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> [] };</span></span>
<span class="line"><span style="color:#FF79C6;">        const</span><span style="color:#F8F8F2;"> cssRules </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> [];</span></span>
<span class="line"><span style="color:#FF79C6;">        const</span><span style="color:#F8F8F2;"> tokenStack </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> [document];</span></span>
<span class="line"><span style="color:#FF79C6;">        const</span><span style="color:#F8F8F2;"> parser </span><span style="color:#FF79C6;">=</span><span style="color:#FF79C6;font-weight:bold;"> new</span><span style="color:#F8F8F2;"> htmlparser2.</span><span style="color:#50FA7B;">Parser</span><span style="color:#F8F8F2;">({</span></span>
<span class="line"><span style="color:#50FA7B;">            onopentag</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">name</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">attributes</span><span style="color:#FF79C6;"> =</span><span style="color:#F8F8F2;"> {}) {</span></span>
<span class="line"><span style="color:#FF79C6;">                const</span><span style="color:#F8F8F2;"> parent </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> tokenStack.</span><span style="color:#50FA7B;">top</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#FF79C6;">                const</span><span style="color:#F8F8F2;"> element </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">                    type</span><span style="color:#FF79C6;">:</span><span style="color:#E9F284;"> &#39;</span><span style="color:#F1FA8C;">element</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">                    tagName</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> name,</span></span>
<span class="line"><span style="color:#F8F8F2;">                    children</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> [],</span></span>
<span class="line"><span style="color:#F8F8F2;">                    attributes,</span></span>
<span class="line"><span style="color:#F8F8F2;">                    parent</span></span>
<span class="line"><span style="color:#F8F8F2;">                }</span></span>
<span class="line"><span style="color:#F8F8F2;">                parent.children.</span><span style="color:#50FA7B;">push</span><span style="color:#F8F8F2;">(element);</span></span>
<span class="line"><span style="color:#F8F8F2;">                tokenStack.</span><span style="color:#50FA7B;">push</span><span style="color:#F8F8F2;">(element);</span></span>
<span class="line"><span style="color:#F8F8F2;">            },</span></span>
<span class="line"><span style="color:#50FA7B;">            ontext</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">text</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#FF79C6;">                if</span><span style="color:#F8F8F2;"> (</span><span style="color:#FF79C6;">!</span><span style="color:#FF5555;">/</span><span style="color:#FF79C6;">^</span><span style="color:#8BE9FD;">[</span><span style="color:#BD93F9;">\\r\\n\\s</span><span style="color:#8BE9FD;">]</span><span style="color:#FF79C6;">*$</span><span style="color:#FF5555;">/</span><span style="color:#F8F8F2;">.</span><span style="color:#50FA7B;">test</span><span style="color:#F8F8F2;">(text)) {</span></span>
<span class="line"><span style="color:#FF79C6;">                    const</span><span style="color:#F8F8F2;"> parent </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> tokenStack.</span><span style="color:#50FA7B;">top</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#FF79C6;">                    const</span><span style="color:#F8F8F2;"> textNode </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">                        type</span><span style="color:#FF79C6;">:</span><span style="color:#E9F284;"> &#39;</span><span style="color:#F1FA8C;">text</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">                        children</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> [],</span></span>
<span class="line"><span style="color:#F8F8F2;">                        attributes</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> {},</span></span>
<span class="line"><span style="color:#F8F8F2;">                        parent,</span></span>
<span class="line"><span style="color:#F8F8F2;">                        text</span></span>
<span class="line"><span style="color:#F8F8F2;">                    }</span></span>
<span class="line"><span style="color:#F8F8F2;">                    parent.children.</span><span style="color:#50FA7B;">push</span><span style="color:#F8F8F2;">(textNode);</span></span>
<span class="line"><span style="color:#F8F8F2;">                }</span></span>
<span class="line"><span style="color:#F8F8F2;">            },</span></span>
<span class="line"><span style="color:#6272A4;">            /**</span></span>
<span class="line"><span style="color:#6272A4;">             * 在预解析阶段，HTML发现CSS和JS文件会并行下载，等全部下载后先把CSS生成CSSOM，然后再执行JS脚本</span></span>
<span class="line"><span style="color:#6272A4;">             * 然后再构建DOM树，重新计算样式，构建布局树，绘制页面</span></span>
<span class="line"><span style="color:#6272A4;">             * </span><span style="color:#FF79C6;">@param</span><span style="color:#8BE9FD;font-style:italic;"> {*}</span><span style="color:#FFB86C;font-style:italic;"> tagname</span></span>
<span class="line"><span style="color:#6272A4;">             */</span></span>
<span class="line"><span style="color:#50FA7B;">            onclosetag</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">tagname</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#FF79C6;">                switch</span><span style="color:#F8F8F2;"> (tagname) {</span></span>
<span class="line"><span style="color:#FF79C6;">                    case</span><span style="color:#E9F284;"> &#39;</span><span style="color:#F1FA8C;">style</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#FF79C6;">                        const</span><span style="color:#F8F8F2;"> styleToken </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> tokenStack.</span><span style="color:#50FA7B;">top</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#FF79C6;">                        const</span><span style="color:#F8F8F2;"> cssAST </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> css.</span><span style="color:#50FA7B;">parse</span><span style="color:#F8F8F2;">(styleToken.children[</span><span style="color:#BD93F9;">0</span><span style="color:#F8F8F2;">].text);</span></span>
<span class="line"><span style="color:#F8F8F2;">                        cssRules.</span><span style="color:#50FA7B;">push</span><span style="color:#F8F8F2;">(</span><span style="color:#FF79C6;">...</span><span style="color:#F8F8F2;">cssAST.stylesheet.rules);</span></span>
<span class="line"><span style="color:#FF79C6;">                        break</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#FF79C6;">                    default</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#FF79C6;">                        break</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">                }</span></span>
<span class="line"><span style="color:#F8F8F2;">                tokenStack.</span><span style="color:#50FA7B;">pop</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#F8F8F2;">            },</span></span>
<span class="line"><span style="color:#F8F8F2;">        });</span></span>
<span class="line"><span style="color:#6272A4;">        //开始接收响应体</span></span>
<span class="line"><span style="color:#F8F8F2;">        response.</span><span style="color:#50FA7B;">on</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">data</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, (</span><span style="color:#FFB86C;font-style:italic;">buffer</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#6272A4;">            //8.渲染进程开始HTML解析和加载子资源</span></span>
<span class="line"><span style="color:#6272A4;">            //网络进程加载了多少数据，HTML 解析器便解析多少数据。</span></span>
<span class="line"><span style="color:#F8F8F2;">            parser.</span><span style="color:#50FA7B;">write</span><span style="color:#F8F8F2;">(buffer.</span><span style="color:#50FA7B;">toString</span><span style="color:#F8F8F2;">());</span></span>
<span class="line"><span style="color:#F8F8F2;">        });</span></span>
<span class="line"><span style="color:#F8F8F2;">        response.</span><span style="color:#50FA7B;">on</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">end</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, () </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#6272A4;">            //7.HTML接收接受完毕后通知主进程确认导航</span></span>
<span class="line"><span style="color:#F8F8F2;">            main.</span><span style="color:#50FA7B;">emit</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">confirmNavigation</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#6272A4;">            //3. 通过stylesheet计算出DOM节点的样式</span></span>
<span class="line"><span style="color:#50FA7B;">            recalculateStyle</span><span style="color:#F8F8F2;">(cssRules, document);</span></span>
<span class="line"><span style="color:#6272A4;">           //4. 根据DOM树创建布局树,就是复制DOM结构并过滤掉不显示的元素</span></span>
<span class="line"><span style="color:#FF79C6;">           const</span><span style="color:#F8F8F2;"> html </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> document.children[</span><span style="color:#BD93F9;">0</span><span style="color:#F8F8F2;">];</span></span>
<span class="line"><span style="color:#FF79C6;">           const</span><span style="color:#F8F8F2;"> body </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> html.children[</span><span style="color:#BD93F9;">1</span><span style="color:#F8F8F2;">];</span></span>
<span class="line"><span style="color:#FF79C6;">           const</span><span style="color:#F8F8F2;"> layoutTree </span><span style="color:#FF79C6;">=</span><span style="color:#50FA7B;"> createLayout</span><span style="color:#F8F8F2;">(body);</span></span>
<span class="line"><span style="color:#FF79C6;">+</span><span style="color:#6272A4;">          //5.并计算各个元素的布局信息</span></span>
<span class="line"><span style="color:#FF79C6;">+</span><span style="color:#50FA7B;">          updateLayoutTree</span><span style="color:#F8F8F2;">(layoutTree);</span></span>
<span class="line"><span style="color:#6272A4;">           //触发DOMContentLoaded事件</span></span>
<span class="line"><span style="color:#F8F8F2;">           main.</span><span style="color:#50FA7B;">emit</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">DOMContentLoaded</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#6272A4;">           //9.HTML解析完毕和加载子资源页面加载完成后会通知主进程页面加载完成</span></span>
<span class="line"><span style="color:#F8F8F2;">           main.</span><span style="color:#50FA7B;">emit</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">Load</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">        });</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">})</span></span>
<span class="line"><span style="color:#FF79C6;">+function</span><span style="color:#50FA7B;"> updateLayoutTree</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">element</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">top</span><span style="color:#FF79C6;"> =</span><span style="color:#BD93F9;"> 0</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">parentTop</span><span style="color:#FF79C6;"> =</span><span style="color:#BD93F9;"> 0</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#FF79C6;">+</span><span style="color:#FF79C6;">    const</span><span style="color:#F8F8F2;"> computedStyle </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> element.computedStyle;</span></span>
<span class="line"><span style="color:#FF79C6;">+</span><span style="color:#F8F8F2;">    element.layout </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">+        top</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> top </span><span style="color:#FF79C6;">+</span><span style="color:#F8F8F2;"> parentTop,</span></span>
<span class="line"><span style="color:#F8F8F2;">+        left</span><span style="color:#FF79C6;">:</span><span style="color:#BD93F9;"> 0</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">+        width</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> computedStyle.width,</span></span>
<span class="line"><span style="color:#F8F8F2;">+        height</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> computedStyle.height,</span></span>
<span class="line"><span style="color:#F8F8F2;">+        background</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> computedStyle.background,</span></span>
<span class="line"><span style="color:#F8F8F2;">+        color</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> computedStyle.color</span></span>
<span class="line"><span style="color:#FF79C6;">+</span><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#FF79C6;">+</span><span style="color:#FF79C6;">    let</span><span style="color:#F8F8F2;"> childTop </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> 0</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#FF79C6;">+</span><span style="color:#F8F8F2;">    element.children.</span><span style="color:#50FA7B;">forEach</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">child</span><span style="color:#FF79C6;"> =&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#FF79C6;">+</span><span style="color:#50FA7B;">        updateLayoutTree</span><span style="color:#F8F8F2;">(child, childTop, element.layout.top);</span></span>
<span class="line"><span style="color:#FF79C6;">+</span><span style="color:#F8F8F2;">        childTop </span><span style="color:#FF79C6;">+=</span><span style="color:#50FA7B;"> parseInt</span><span style="color:#F8F8F2;">(child.computedStyle.height </span><span style="color:#FF79C6;">||</span><span style="color:#BD93F9;"> 0</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#FF79C6;">+</span><span style="color:#F8F8F2;">    });</span></span>
<span class="line"><span style="color:#FF79C6;">+</span><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#FF79C6;">function</span><span style="color:#50FA7B;"> createLayout</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">element</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">    element.children </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> element.children.</span><span style="color:#50FA7B;">filter</span><span style="color:#F8F8F2;">(isShow);</span></span>
<span class="line"><span style="color:#F8F8F2;">    element.children.</span><span style="color:#50FA7B;">forEach</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">child</span><span style="color:#FF79C6;"> =&gt;</span><span style="color:#50FA7B;"> createLayout</span><span style="color:#F8F8F2;">(child));</span></span>
<span class="line"><span style="color:#FF79C6;">    return</span><span style="color:#F8F8F2;"> element;</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#FF79C6;">function</span><span style="color:#50FA7B;"> isShow</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">element</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#FF79C6;">    let</span><span style="color:#F8F8F2;"> isShow </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> true</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#FF79C6;">    if</span><span style="color:#F8F8F2;"> (element.tagName </span><span style="color:#FF79C6;">===</span><span style="color:#E9F284;"> &#39;</span><span style="color:#F1FA8C;">head</span><span style="color:#E9F284;">&#39;</span><span style="color:#FF79C6;"> ||</span><span style="color:#F8F8F2;"> element.tagName </span><span style="color:#FF79C6;">===</span><span style="color:#E9F284;"> &#39;</span><span style="color:#F1FA8C;">script</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">        isShow </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> false</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#FF79C6;">    const</span><span style="color:#F8F8F2;"> attributes </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> element.attributes;</span></span>
<span class="line"><span style="color:#F8F8F2;">    Object.</span><span style="color:#50FA7B;">entries</span><span style="color:#F8F8F2;">(attributes).</span><span style="color:#50FA7B;">forEach</span><span style="color:#F8F8F2;">(([</span><span style="color:#FFB86C;font-style:italic;">key</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">value</span><span style="color:#F8F8F2;">]) </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#FF79C6;">        if</span><span style="color:#F8F8F2;"> (key </span><span style="color:#FF79C6;">===</span><span style="color:#E9F284;"> &#39;</span><span style="color:#F1FA8C;">style</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#FF79C6;">            const</span><span style="color:#F8F8F2;"> attributes </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> value.</span><span style="color:#50FA7B;">split</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">;</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">            attributes.</span><span style="color:#50FA7B;">forEach</span><span style="color:#F8F8F2;">((</span><span style="color:#FFB86C;font-style:italic;">attribute</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#FF79C6;">                const</span><span style="color:#F8F8F2;"> [property, value] </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> attribute.</span><span style="color:#50FA7B;">split</span><span style="color:#F8F8F2;">(</span><span style="color:#FF5555;">/</span><span style="color:#F1FA8C;">:</span><span style="color:#BD93F9;">\\s</span><span style="color:#FF79C6;">*</span><span style="color:#FF5555;">/</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#FF79C6;">                if</span><span style="color:#F8F8F2;"> (property </span><span style="color:#FF79C6;">===</span><span style="color:#E9F284;"> &#39;</span><span style="color:#F1FA8C;">display</span><span style="color:#E9F284;">&#39;</span><span style="color:#FF79C6;"> &amp;&amp;</span><span style="color:#F8F8F2;"> value </span><span style="color:#FF79C6;">===</span><span style="color:#E9F284;"> &#39;</span><span style="color:#F1FA8C;">none</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">                    isShow </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> false</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">                }</span></span>
<span class="line"><span style="color:#F8F8F2;">            });</span></span>
<span class="line"><span style="color:#F8F8F2;">        }</span></span>
<span class="line"><span style="color:#F8F8F2;">    });</span></span>
<span class="line"><span style="color:#FF79C6;">    return</span><span style="color:#F8F8F2;"> isShow;</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#FF79C6;">function</span><span style="color:#50FA7B;"> recalculateStyle</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">cssRules</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">element</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">parentComputedStyle</span><span style="color:#FF79C6;"> =</span><span style="color:#F8F8F2;"> {}) {</span></span>
<span class="line"><span style="color:#FF79C6;">    const</span><span style="color:#F8F8F2;"> attributes </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> element.attributes;</span></span>
<span class="line"><span style="color:#F8F8F2;">    element.computedStyle </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> {color</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;">parentComputedStyle.color}; </span><span style="color:#6272A4;">// 计算样式</span></span>
<span class="line"><span style="color:#F8F8F2;">    Object.</span><span style="color:#50FA7B;">entries</span><span style="color:#F8F8F2;">(attributes).</span><span style="color:#50FA7B;">forEach</span><span style="color:#F8F8F2;">(([</span><span style="color:#FFB86C;font-style:italic;">key</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">value</span><span style="color:#F8F8F2;">]) </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#6272A4;">        //stylesheets</span></span>
<span class="line"><span style="color:#F8F8F2;">        cssRules.</span><span style="color:#50FA7B;">forEach</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">rule</span><span style="color:#FF79C6;"> =&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#FF79C6;">            let</span><span style="color:#F8F8F2;"> selector </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> rule.selectors[</span><span style="color:#BD93F9;">0</span><span style="color:#F8F8F2;">].</span><span style="color:#50FA7B;">replace</span><span style="color:#F8F8F2;">(</span><span style="color:#FF5555;">/</span><span style="color:#BD93F9;">\\s</span><span style="color:#FF79C6;">+</span><span style="color:#FF5555;">/</span><span style="color:#FF79C6;">g</span><span style="color:#F8F8F2;">, </span><span style="color:#E9F284;">&#39;&#39;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#FF79C6;">            if</span><span style="color:#F8F8F2;"> ((selector </span><span style="color:#FF79C6;">==</span><span style="color:#E9F284;"> &#39;</span><span style="color:#F1FA8C;">#</span><span style="color:#E9F284;">&#39;</span><span style="color:#FF79C6;"> +</span><span style="color:#F8F8F2;"> value </span><span style="color:#FF79C6;">&amp;&amp;</span><span style="color:#F8F8F2;"> key </span><span style="color:#FF79C6;">==</span><span style="color:#E9F284;"> &#39;</span><span style="color:#F1FA8C;">id</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">||</span><span style="color:#F8F8F2;"> (selector </span><span style="color:#FF79C6;">==</span><span style="color:#E9F284;"> &#39;</span><span style="color:#F1FA8C;">.</span><span style="color:#E9F284;">&#39;</span><span style="color:#FF79C6;"> +</span><span style="color:#F8F8F2;"> value </span><span style="color:#FF79C6;">&amp;&amp;</span><span style="color:#F8F8F2;"> key </span><span style="color:#FF79C6;">==</span><span style="color:#E9F284;"> &#39;</span><span style="color:#F1FA8C;">class</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">)) {</span></span>
<span class="line"><span style="color:#F8F8F2;">                rule.declarations.</span><span style="color:#50FA7B;">forEach</span><span style="color:#F8F8F2;">(({ </span><span style="color:#FFB86C;font-style:italic;">property</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">value</span><span style="color:#F8F8F2;"> }) </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">                    element.computedStyle[property] </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> value;</span></span>
<span class="line"><span style="color:#F8F8F2;">                })</span></span>
<span class="line"><span style="color:#F8F8F2;">            }</span></span>
<span class="line"><span style="color:#F8F8F2;">        })</span></span>
<span class="line"><span style="color:#6272A4;">        //行内样式</span></span>
<span class="line"><span style="color:#FF79C6;">        if</span><span style="color:#F8F8F2;"> (key </span><span style="color:#FF79C6;">===</span><span style="color:#E9F284;"> &#39;</span><span style="color:#F1FA8C;">style</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#FF79C6;">            const</span><span style="color:#F8F8F2;"> attributes </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> value.</span><span style="color:#50FA7B;">split</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">;</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">            attributes.</span><span style="color:#50FA7B;">forEach</span><span style="color:#F8F8F2;">((</span><span style="color:#FFB86C;font-style:italic;">attribute</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#FF79C6;">                const</span><span style="color:#F8F8F2;"> [property, value] </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> attribute.</span><span style="color:#50FA7B;">split</span><span style="color:#F8F8F2;">(</span><span style="color:#FF5555;">/</span><span style="color:#F1FA8C;">:</span><span style="color:#BD93F9;">\\s</span><span style="color:#FF79C6;">*</span><span style="color:#FF5555;">/</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">                element.computedStyle[property] </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> value;</span></span>
<span class="line"><span style="color:#F8F8F2;">            });</span></span>
<span class="line"><span style="color:#F8F8F2;">        }</span></span>
<span class="line"><span style="color:#F8F8F2;">    });</span></span>
<span class="line"><span style="color:#F8F8F2;">    element.children.</span><span style="color:#50FA7B;">forEach</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">child</span><span style="color:#FF79C6;"> =&gt;</span><span style="color:#50FA7B;"> recalculateStyle</span><span style="color:#F8F8F2;">(cssRules, child,element.computedStyle));</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">//1.主进程接收用户输入的URL</span></span>
<span class="line"><span style="color:#F8F8F2;">main.</span><span style="color:#50FA7B;">emit</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">request</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, { host, port, path</span><span style="color:#FF79C6;">:</span><span style="color:#E9F284;"> &#39;</span><span style="color:#F1FA8C;">/index.html</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;"> });</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h3 id="生成分层树" tabindex="-1"><a class="header-anchor" href="#生成分层树"><span>生成分层树</span></a></h3><ul><li>根据布局树生成分层树</li><li>渲染引擎需要为某些节点生成单独的图层，并组合成图层树 <ul><li>z-index</li><li>绝对定位和固定定位</li><li>滤镜</li><li>透明</li><li>裁剪</li></ul></li><li>这些图层合成最终的页面</li></ul><details class="hint-container details"><summary>request</summary><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> htmlparser2 </span><span style="color:#FF79C6;">=</span><span style="color:#50FA7B;"> require</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">htmlparser2</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> http </span><span style="color:#FF79C6;">=</span><span style="color:#50FA7B;"> require</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">http</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> css </span><span style="color:#FF79C6;">=</span><span style="color:#50FA7B;"> require</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">css</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> main </span><span style="color:#FF79C6;">=</span><span style="color:#50FA7B;"> require</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">./main.js</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> network </span><span style="color:#FF79C6;">=</span><span style="color:#50FA7B;"> require</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">./network.js</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> render </span><span style="color:#FF79C6;">=</span><span style="color:#50FA7B;"> require</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">./render.js</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> host </span><span style="color:#FF79C6;">=</span><span style="color:#E9F284;"> &#39;</span><span style="color:#F1FA8C;">localhost</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> port </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> 80</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#8BE9FD;font-style:italic;">Array</span><span style="color:#F8F8F2;">.prototype.</span><span style="color:#50FA7B;">top</span><span style="color:#FF79C6;"> =</span><span style="color:#FF79C6;"> function</span><span style="color:#F8F8F2;"> () {</span></span>
<span class="line"><span style="color:#FF79C6;">    return</span><span style="color:#BD93F9;font-style:italic;"> this</span><span style="color:#F8F8F2;">[</span><span style="color:#BD93F9;font-style:italic;">this</span><span style="color:#F8F8F2;">.length </span><span style="color:#FF79C6;">-</span><span style="color:#BD93F9;"> 1</span><span style="color:#F8F8F2;">];</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#6272A4;">/** 浏览器主进程 **/</span></span>
<span class="line"><span style="color:#F8F8F2;">main.</span><span style="color:#50FA7B;">on</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">request</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#FF79C6;">function</span><span style="color:#F8F8F2;"> (</span><span style="color:#FFB86C;font-style:italic;">options</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#6272A4;">    //2.主进程把该URL转发给网络进程</span></span>
<span class="line"><span style="color:#F8F8F2;">    network.</span><span style="color:#50FA7B;">emit</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">request</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, options);</span></span>
<span class="line"><span style="color:#F8F8F2;">})</span></span>
<span class="line"><span style="color:#6272A4;">//开始准备渲染页面</span></span>
<span class="line"><span style="color:#F8F8F2;">main.</span><span style="color:#50FA7B;">on</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">prepareRender</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#FF79C6;">function</span><span style="color:#F8F8F2;"> (</span><span style="color:#FFB86C;font-style:italic;">response</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#6272A4;">    //5.主进程发送提交导航消息到渲染进程</span></span>
<span class="line"><span style="color:#F8F8F2;">    render.</span><span style="color:#50FA7B;">emit</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">commitNavigation</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, response);</span></span>
<span class="line"><span style="color:#F8F8F2;">})</span></span>
<span class="line"><span style="color:#F8F8F2;">main.</span><span style="color:#50FA7B;">on</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">confirmNavigation</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#FF79C6;">function</span><span style="color:#F8F8F2;"> () {</span></span>
<span class="line"><span style="color:#F8F8F2;">    console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">confirmNavigation</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">})</span></span>
<span class="line"><span style="color:#F8F8F2;">main.</span><span style="color:#50FA7B;">on</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">DOMContentLoaded</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#FF79C6;">function</span><span style="color:#F8F8F2;"> () {</span></span>
<span class="line"><span style="color:#F8F8F2;">    console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">DOMContentLoaded</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">})</span></span>
<span class="line"><span style="color:#F8F8F2;">main.</span><span style="color:#50FA7B;">on</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">Load</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#FF79C6;">function</span><span style="color:#F8F8F2;"> () {</span></span>
<span class="line"><span style="color:#F8F8F2;">    console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">Load</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">/** 网络进程 **/</span></span>
<span class="line"><span style="color:#F8F8F2;">network.</span><span style="color:#50FA7B;">on</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">request</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#FF79C6;">function</span><span style="color:#F8F8F2;"> (</span><span style="color:#FFB86C;font-style:italic;">options</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#6272A4;">    //3.在网络进程中发起URL请求</span></span>
<span class="line"><span style="color:#FF79C6;">    let</span><span style="color:#F8F8F2;"> request </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> http.</span><span style="color:#50FA7B;">request</span><span style="color:#F8F8F2;">(options, (</span><span style="color:#FFB86C;font-style:italic;">response</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#6272A4;">        //4.网络进程接收到响应头数据并转发给主进程</span></span>
<span class="line"><span style="color:#F8F8F2;">        main.</span><span style="color:#50FA7B;">emit</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">prepareRender</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, response);</span></span>
<span class="line"><span style="color:#F8F8F2;">    });</span></span>
<span class="line"><span style="color:#6272A4;">    //结束请求体</span></span>
<span class="line"><span style="color:#F8F8F2;">    request.</span><span style="color:#50FA7B;">end</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#F8F8F2;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">/** 渲染进程 **/</span></span>
<span class="line"><span style="color:#6272A4;">//6.渲染进程开始从网络进程接收HTML数据</span></span>
<span class="line"><span style="color:#F8F8F2;">render.</span><span style="color:#50FA7B;">on</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">commitNavigation</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#FF79C6;">function</span><span style="color:#F8F8F2;"> (</span><span style="color:#FFB86C;font-style:italic;">response</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#FF79C6;">    const</span><span style="color:#F8F8F2;"> headers </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> response.headers;</span></span>
<span class="line"><span style="color:#FF79C6;">    const</span><span style="color:#F8F8F2;"> contentType </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> headers[</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">content-type</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">];</span></span>
<span class="line"><span style="color:#FF79C6;">    if</span><span style="color:#F8F8F2;"> (contentType.</span><span style="color:#50FA7B;">indexOf</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">text/html</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">!==</span><span style="color:#FF79C6;"> -</span><span style="color:#BD93F9;">1</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#6272A4;">        //1. 渲染进程把HTML转变为DOM树型结构</span></span>
<span class="line"><span style="color:#FF79C6;">        const</span><span style="color:#F8F8F2;"> document </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> { type</span><span style="color:#FF79C6;">:</span><span style="color:#E9F284;"> &#39;</span><span style="color:#F1FA8C;">document</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, attributes</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> {}, children</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> [] };</span></span>
<span class="line"><span style="color:#FF79C6;">        const</span><span style="color:#F8F8F2;"> cssRules </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> [];</span></span>
<span class="line"><span style="color:#FF79C6;">        const</span><span style="color:#F8F8F2;"> tokenStack </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> [document];</span></span>
<span class="line"><span style="color:#FF79C6;">        const</span><span style="color:#F8F8F2;"> parser </span><span style="color:#FF79C6;">=</span><span style="color:#FF79C6;font-weight:bold;"> new</span><span style="color:#F8F8F2;"> htmlparser2.</span><span style="color:#50FA7B;">Parser</span><span style="color:#F8F8F2;">({</span></span>
<span class="line"><span style="color:#50FA7B;">            onopentag</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">name</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">attributes</span><span style="color:#FF79C6;"> =</span><span style="color:#F8F8F2;"> {}) {</span></span>
<span class="line"><span style="color:#FF79C6;">                const</span><span style="color:#F8F8F2;"> parent </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> tokenStack.</span><span style="color:#50FA7B;">top</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#FF79C6;">                const</span><span style="color:#F8F8F2;"> element </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">                    type</span><span style="color:#FF79C6;">:</span><span style="color:#E9F284;"> &#39;</span><span style="color:#F1FA8C;">element</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">                    tagName</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> name,</span></span>
<span class="line"><span style="color:#F8F8F2;">                    children</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> [],</span></span>
<span class="line"><span style="color:#F8F8F2;">                    attributes,</span></span>
<span class="line"><span style="color:#F8F8F2;">                    parent</span></span>
<span class="line"><span style="color:#F8F8F2;">                }</span></span>
<span class="line"><span style="color:#F8F8F2;">                parent.children.</span><span style="color:#50FA7B;">push</span><span style="color:#F8F8F2;">(element);</span></span>
<span class="line"><span style="color:#F8F8F2;">                tokenStack.</span><span style="color:#50FA7B;">push</span><span style="color:#F8F8F2;">(element);</span></span>
<span class="line"><span style="color:#F8F8F2;">            },</span></span>
<span class="line"><span style="color:#50FA7B;">            ontext</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">text</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#FF79C6;">                if</span><span style="color:#F8F8F2;"> (</span><span style="color:#FF79C6;">!</span><span style="color:#FF5555;">/</span><span style="color:#FF79C6;">^</span><span style="color:#8BE9FD;">[</span><span style="color:#BD93F9;">\\r\\n\\s</span><span style="color:#8BE9FD;">]</span><span style="color:#FF79C6;">*$</span><span style="color:#FF5555;">/</span><span style="color:#F8F8F2;">.</span><span style="color:#50FA7B;">test</span><span style="color:#F8F8F2;">(text)) {</span></span>
<span class="line"><span style="color:#FF79C6;">                    const</span><span style="color:#F8F8F2;"> parent </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> tokenStack.</span><span style="color:#50FA7B;">top</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#FF79C6;">                    const</span><span style="color:#F8F8F2;"> textNode </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">                        type</span><span style="color:#FF79C6;">:</span><span style="color:#E9F284;"> &#39;</span><span style="color:#F1FA8C;">text</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">                        children</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> [],</span></span>
<span class="line"><span style="color:#F8F8F2;">                        attributes</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> {},</span></span>
<span class="line"><span style="color:#F8F8F2;">                        parent,</span></span>
<span class="line"><span style="color:#F8F8F2;">                        text</span></span>
<span class="line"><span style="color:#F8F8F2;">                    }</span></span>
<span class="line"><span style="color:#F8F8F2;">                    parent.children.</span><span style="color:#50FA7B;">push</span><span style="color:#F8F8F2;">(textNode);</span></span>
<span class="line"><span style="color:#F8F8F2;">                }</span></span>
<span class="line"><span style="color:#F8F8F2;">            },</span></span>
<span class="line"><span style="color:#6272A4;">            /**</span></span>
<span class="line"><span style="color:#6272A4;">             * 在预解析阶段，HTML发现CSS和JS文件会并行下载，等全部下载后先把CSS生成CSSOM，然后再执行JS脚本</span></span>
<span class="line"><span style="color:#6272A4;">             * 然后再构建DOM树，重新计算样式，构建布局树，绘制页面</span></span>
<span class="line"><span style="color:#6272A4;">             * </span><span style="color:#FF79C6;">@param</span><span style="color:#8BE9FD;font-style:italic;"> {*}</span><span style="color:#FFB86C;font-style:italic;"> tagname</span></span>
<span class="line"><span style="color:#6272A4;">             */</span></span>
<span class="line"><span style="color:#50FA7B;">            onclosetag</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">tagname</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#FF79C6;">                switch</span><span style="color:#F8F8F2;"> (tagname) {</span></span>
<span class="line"><span style="color:#FF79C6;">                    case</span><span style="color:#E9F284;"> &#39;</span><span style="color:#F1FA8C;">style</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#FF79C6;">                        const</span><span style="color:#F8F8F2;"> styleToken </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> tokenStack.</span><span style="color:#50FA7B;">top</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#FF79C6;">                        const</span><span style="color:#F8F8F2;"> cssAST </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> css.</span><span style="color:#50FA7B;">parse</span><span style="color:#F8F8F2;">(styleToken.children[</span><span style="color:#BD93F9;">0</span><span style="color:#F8F8F2;">].text);</span></span>
<span class="line"><span style="color:#F8F8F2;">                        cssRules.</span><span style="color:#50FA7B;">push</span><span style="color:#F8F8F2;">(</span><span style="color:#FF79C6;">...</span><span style="color:#F8F8F2;">cssAST.stylesheet.rules);</span></span>
<span class="line"><span style="color:#FF79C6;">                        break</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#FF79C6;">                    default</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#FF79C6;">                        break</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">                }</span></span>
<span class="line"><span style="color:#F8F8F2;">                tokenStack.</span><span style="color:#50FA7B;">pop</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#F8F8F2;">            },</span></span>
<span class="line"><span style="color:#F8F8F2;">        });</span></span>
<span class="line"><span style="color:#6272A4;">        //开始接收响应体</span></span>
<span class="line"><span style="color:#F8F8F2;">        response.</span><span style="color:#50FA7B;">on</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">data</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, (</span><span style="color:#FFB86C;font-style:italic;">buffer</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#6272A4;">            //8.渲染进程开始HTML解析和加载子资源</span></span>
<span class="line"><span style="color:#6272A4;">            //网络进程加载了多少数据，HTML 解析器便解析多少数据。</span></span>
<span class="line"><span style="color:#F8F8F2;">            parser.</span><span style="color:#50FA7B;">write</span><span style="color:#F8F8F2;">(buffer.</span><span style="color:#50FA7B;">toString</span><span style="color:#F8F8F2;">());</span></span>
<span class="line"><span style="color:#F8F8F2;">        });</span></span>
<span class="line"><span style="color:#F8F8F2;">        response.</span><span style="color:#50FA7B;">on</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">end</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, () </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#6272A4;">            //7.HTML接收接受完毕后通知主进程确认导航</span></span>
<span class="line"><span style="color:#F8F8F2;">            main.</span><span style="color:#50FA7B;">emit</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">confirmNavigation</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#6272A4;">            //3. 通过stylesheet计算出DOM节点的样式</span></span>
<span class="line"><span style="color:#50FA7B;">            recalculateStyle</span><span style="color:#F8F8F2;">(cssRules, document);</span></span>
<span class="line"><span style="color:#6272A4;">            //4. 根据DOM树创建布局树,就是复制DOM结构并过滤掉不显示的元素</span></span>
<span class="line"><span style="color:#FF79C6;">            const</span><span style="color:#F8F8F2;"> html </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> document.children[</span><span style="color:#BD93F9;">0</span><span style="color:#F8F8F2;">];</span></span>
<span class="line"><span style="color:#FF79C6;">            const</span><span style="color:#F8F8F2;"> body </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> html.children[</span><span style="color:#BD93F9;">1</span><span style="color:#F8F8F2;">];</span></span>
<span class="line"><span style="color:#FF79C6;">            const</span><span style="color:#F8F8F2;"> layoutTree </span><span style="color:#FF79C6;">=</span><span style="color:#50FA7B;"> createLayout</span><span style="color:#F8F8F2;">(body);</span></span>
<span class="line"><span style="color:#6272A4;">            //5.并计算各个元素的布局信息</span></span>
<span class="line"><span style="color:#50FA7B;">            updateLayoutTree</span><span style="color:#F8F8F2;">(layoutTree);</span></span>
<span class="line"><span style="color:#FF79C6;">+</span><span style="color:#6272A4;">           //6. 根据布局树生成分层树</span></span>
<span class="line"><span style="color:#FF79C6;">+</span><span style="color:#FF79C6;">           const</span><span style="color:#F8F8F2;"> layers </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> [layoutTree];</span></span>
<span class="line"><span style="color:#FF79C6;">+</span><span style="color:#50FA7B;">           createLayerTree</span><span style="color:#F8F8F2;">(layoutTree, layers);</span></span>
<span class="line"><span style="color:#FF79C6;">+</span><span style="color:#F8F8F2;">           console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(layers);</span></span>
<span class="line"><span style="color:#6272A4;">            //触发DOMContentLoaded事件</span></span>
<span class="line"><span style="color:#F8F8F2;">            main.</span><span style="color:#50FA7B;">emit</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">DOMContentLoaded</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#6272A4;">            //9.HTML解析完毕和加载子资源页面加载完成后会通知主进程页面加载完成</span></span>
<span class="line"><span style="color:#F8F8F2;">            main.</span><span style="color:#50FA7B;">emit</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">Load</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">        });</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">})</span></span>
<span class="line"><span style="color:#FF79C6;">+function</span><span style="color:#50FA7B;"> createLayerTree</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">element</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">layers</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#FF79C6;">+</span><span style="color:#F8F8F2;">    element.children </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> element.children.</span><span style="color:#50FA7B;">filter</span><span style="color:#F8F8F2;">((</span><span style="color:#FFB86C;font-style:italic;">child</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#50FA7B;"> createNewLayer</span><span style="color:#F8F8F2;">(child, layers));</span></span>
<span class="line"><span style="color:#FF79C6;">+</span><span style="color:#F8F8F2;">    element.children.</span><span style="color:#50FA7B;">forEach</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">child</span><span style="color:#FF79C6;"> =&gt;</span><span style="color:#50FA7B;"> createLayerTree</span><span style="color:#F8F8F2;">(child, layers));</span></span>
<span class="line"><span style="color:#FF79C6;">+</span><span style="color:#FF79C6;">    return</span><span style="color:#F8F8F2;"> layers;</span></span>
<span class="line"><span style="color:#FF79C6;">+</span><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#FF79C6;">+function</span><span style="color:#50FA7B;"> createNewLayer</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">element</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">layers</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#FF79C6;">+</span><span style="color:#FF79C6;">    let</span><span style="color:#F8F8F2;"> created </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> true</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#FF79C6;">+</span><span style="color:#FF79C6;">    const</span><span style="color:#F8F8F2;"> attributes </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> element.attributes;</span></span>
<span class="line"><span style="color:#FF79C6;">+</span><span style="color:#F8F8F2;">    Object.</span><span style="color:#50FA7B;">entries</span><span style="color:#F8F8F2;">(attributes).</span><span style="color:#50FA7B;">forEach</span><span style="color:#F8F8F2;">(([</span><span style="color:#FFB86C;font-style:italic;">key</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">value</span><span style="color:#F8F8F2;">]) </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#FF79C6;">+</span><span style="color:#FF79C6;">        if</span><span style="color:#F8F8F2;"> (key </span><span style="color:#FF79C6;">===</span><span style="color:#E9F284;"> &#39;</span><span style="color:#F1FA8C;">style</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#FF79C6;">+</span><span style="color:#FF79C6;">            const</span><span style="color:#F8F8F2;"> attributes </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> value.</span><span style="color:#50FA7B;">split</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">;</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#FF79C6;">+</span><span style="color:#F8F8F2;">            attributes.</span><span style="color:#50FA7B;">forEach</span><span style="color:#F8F8F2;">((</span><span style="color:#FFB86C;font-style:italic;">attribute</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#FF79C6;">+</span><span style="color:#FF79C6;">                const</span><span style="color:#F8F8F2;"> [property, value] </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> attribute.</span><span style="color:#50FA7B;">split</span><span style="color:#F8F8F2;">(</span><span style="color:#FF5555;">/</span><span style="color:#F1FA8C;">:</span><span style="color:#BD93F9;">\\s</span><span style="color:#FF79C6;">*</span><span style="color:#FF5555;">/</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#FF79C6;">+</span><span style="color:#FF79C6;">                if</span><span style="color:#F8F8F2;"> (property </span><span style="color:#FF79C6;">===</span><span style="color:#E9F284;"> &#39;</span><span style="color:#F1FA8C;">position</span><span style="color:#E9F284;">&#39;</span><span style="color:#FF79C6;"> &amp;&amp;</span><span style="color:#F8F8F2;"> value </span><span style="color:#FF79C6;">===</span><span style="color:#E9F284;"> &#39;</span><span style="color:#F1FA8C;">absolute</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#FF79C6;">+</span><span style="color:#50FA7B;">                    updateLayoutTree</span><span style="color:#F8F8F2;">(element);</span><span style="color:#6272A4;">//对单独的层重新计算位置</span></span>
<span class="line"><span style="color:#FF79C6;">+</span><span style="color:#F8F8F2;">                    layers.</span><span style="color:#50FA7B;">push</span><span style="color:#F8F8F2;">(element);</span></span>
<span class="line"><span style="color:#FF79C6;">+</span><span style="color:#F8F8F2;">                    created </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> false</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#FF79C6;">+</span><span style="color:#F8F8F2;">                }</span></span>
<span class="line"><span style="color:#FF79C6;">+</span><span style="color:#F8F8F2;">            });</span></span>
<span class="line"><span style="color:#FF79C6;">+</span><span style="color:#F8F8F2;">        }</span></span>
<span class="line"><span style="color:#FF79C6;">+</span><span style="color:#F8F8F2;">    });</span></span>
<span class="line"><span style="color:#FF79C6;">+</span><span style="color:#FF79C6;">    return</span><span style="color:#F8F8F2;"> created;</span></span>
<span class="line"><span style="color:#FF79C6;">+</span><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#FF79C6;">function</span><span style="color:#50FA7B;"> updateLayoutTree</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">element</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">top</span><span style="color:#FF79C6;"> =</span><span style="color:#BD93F9;"> 0</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">parentTop</span><span style="color:#FF79C6;"> =</span><span style="color:#BD93F9;"> 0</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#FF79C6;">    const</span><span style="color:#F8F8F2;"> computedStyle </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> element.computedStyle;</span></span>
<span class="line"><span style="color:#F8F8F2;">    element.layout </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">        top</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> top </span><span style="color:#FF79C6;">+</span><span style="color:#F8F8F2;"> parentTop,</span></span>
<span class="line"><span style="color:#F8F8F2;">        left</span><span style="color:#FF79C6;">:</span><span style="color:#BD93F9;"> 0</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">        width</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> computedStyle.width,</span></span>
<span class="line"><span style="color:#F8F8F2;">        height</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> computedStyle.height,</span></span>
<span class="line"><span style="color:#F8F8F2;">        background</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> computedStyle.background,</span></span>
<span class="line"><span style="color:#F8F8F2;">        color</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> computedStyle.color</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#FF79C6;">    let</span><span style="color:#F8F8F2;"> childTop </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> 0</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">    element.children.</span><span style="color:#50FA7B;">forEach</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">child</span><span style="color:#FF79C6;"> =&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#50FA7B;">        updateLayoutTree</span><span style="color:#F8F8F2;">(child, childTop, element.layout.top);</span></span>
<span class="line"><span style="color:#F8F8F2;">        childTop </span><span style="color:#FF79C6;">+=</span><span style="color:#50FA7B;"> parseInt</span><span style="color:#F8F8F2;">(child.computedStyle.height </span><span style="color:#FF79C6;">||</span><span style="color:#BD93F9;"> 0</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">    });</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#FF79C6;">function</span><span style="color:#50FA7B;"> createLayout</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">element</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">    element.children </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> element.children.</span><span style="color:#50FA7B;">filter</span><span style="color:#F8F8F2;">(isShow);</span></span>
<span class="line"><span style="color:#F8F8F2;">    element.children.</span><span style="color:#50FA7B;">forEach</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">child</span><span style="color:#FF79C6;"> =&gt;</span><span style="color:#50FA7B;"> createLayout</span><span style="color:#F8F8F2;">(child));</span></span>
<span class="line"><span style="color:#FF79C6;">    return</span><span style="color:#F8F8F2;"> element;</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#FF79C6;">function</span><span style="color:#50FA7B;"> isShow</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">element</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#FF79C6;">    let</span><span style="color:#F8F8F2;"> isShow </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> true</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#FF79C6;">    if</span><span style="color:#F8F8F2;"> (element.tagName </span><span style="color:#FF79C6;">===</span><span style="color:#E9F284;"> &#39;</span><span style="color:#F1FA8C;">head</span><span style="color:#E9F284;">&#39;</span><span style="color:#FF79C6;"> ||</span><span style="color:#F8F8F2;"> element.tagName </span><span style="color:#FF79C6;">===</span><span style="color:#E9F284;"> &#39;</span><span style="color:#F1FA8C;">script</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">        isShow </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> false</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#FF79C6;">    const</span><span style="color:#F8F8F2;"> attributes </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> element.attributes;</span></span>
<span class="line"><span style="color:#F8F8F2;">    Object.</span><span style="color:#50FA7B;">entries</span><span style="color:#F8F8F2;">(attributes).</span><span style="color:#50FA7B;">forEach</span><span style="color:#F8F8F2;">(([</span><span style="color:#FFB86C;font-style:italic;">key</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">value</span><span style="color:#F8F8F2;">]) </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#FF79C6;">        if</span><span style="color:#F8F8F2;"> (key </span><span style="color:#FF79C6;">===</span><span style="color:#E9F284;"> &#39;</span><span style="color:#F1FA8C;">style</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#FF79C6;">            const</span><span style="color:#F8F8F2;"> attributes </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> value.</span><span style="color:#50FA7B;">split</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">;</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">            attributes.</span><span style="color:#50FA7B;">forEach</span><span style="color:#F8F8F2;">((</span><span style="color:#FFB86C;font-style:italic;">attribute</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#FF79C6;">                const</span><span style="color:#F8F8F2;"> [property, value] </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> attribute.</span><span style="color:#50FA7B;">split</span><span style="color:#F8F8F2;">(</span><span style="color:#FF5555;">/</span><span style="color:#F1FA8C;">:</span><span style="color:#BD93F9;">\\s</span><span style="color:#FF79C6;">*</span><span style="color:#FF5555;">/</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#FF79C6;">                if</span><span style="color:#F8F8F2;"> (property </span><span style="color:#FF79C6;">===</span><span style="color:#E9F284;"> &#39;</span><span style="color:#F1FA8C;">display</span><span style="color:#E9F284;">&#39;</span><span style="color:#FF79C6;"> &amp;&amp;</span><span style="color:#F8F8F2;"> value </span><span style="color:#FF79C6;">===</span><span style="color:#E9F284;"> &#39;</span><span style="color:#F1FA8C;">none</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">                    isShow </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> false</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">                }</span></span>
<span class="line"><span style="color:#F8F8F2;">            });</span></span>
<span class="line"><span style="color:#F8F8F2;">        }</span></span>
<span class="line"><span style="color:#F8F8F2;">    });</span></span>
<span class="line"><span style="color:#FF79C6;">    return</span><span style="color:#F8F8F2;"> isShow;</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#FF79C6;">function</span><span style="color:#50FA7B;"> recalculateStyle</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">cssRules</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">element</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">parentComputedStyle</span><span style="color:#FF79C6;"> =</span><span style="color:#F8F8F2;"> {}) {</span></span>
<span class="line"><span style="color:#FF79C6;">    const</span><span style="color:#F8F8F2;"> attributes </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> element.attributes;</span></span>
<span class="line"><span style="color:#F8F8F2;">    element.computedStyle </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> {color</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;">parentComputedStyle.color}; </span><span style="color:#6272A4;">// 计算样式</span></span>
<span class="line"><span style="color:#F8F8F2;">    Object.</span><span style="color:#50FA7B;">entries</span><span style="color:#F8F8F2;">(attributes).</span><span style="color:#50FA7B;">forEach</span><span style="color:#F8F8F2;">(([</span><span style="color:#FFB86C;font-style:italic;">key</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">value</span><span style="color:#F8F8F2;">]) </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#6272A4;">        //stylesheets</span></span>
<span class="line"><span style="color:#F8F8F2;">        cssRules.</span><span style="color:#50FA7B;">forEach</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">rule</span><span style="color:#FF79C6;"> =&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#FF79C6;">            let</span><span style="color:#F8F8F2;"> selector </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> rule.selectors[</span><span style="color:#BD93F9;">0</span><span style="color:#F8F8F2;">].</span><span style="color:#50FA7B;">replace</span><span style="color:#F8F8F2;">(</span><span style="color:#FF5555;">/</span><span style="color:#BD93F9;">\\s</span><span style="color:#FF79C6;">+</span><span style="color:#FF5555;">/</span><span style="color:#FF79C6;">g</span><span style="color:#F8F8F2;">, </span><span style="color:#E9F284;">&#39;&#39;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#FF79C6;">            if</span><span style="color:#F8F8F2;"> ((selector </span><span style="color:#FF79C6;">==</span><span style="color:#E9F284;"> &#39;</span><span style="color:#F1FA8C;">#</span><span style="color:#E9F284;">&#39;</span><span style="color:#FF79C6;"> +</span><span style="color:#F8F8F2;"> value </span><span style="color:#FF79C6;">&amp;&amp;</span><span style="color:#F8F8F2;"> key </span><span style="color:#FF79C6;">==</span><span style="color:#E9F284;"> &#39;</span><span style="color:#F1FA8C;">id</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">||</span><span style="color:#F8F8F2;"> (selector </span><span style="color:#FF79C6;">==</span><span style="color:#E9F284;"> &#39;</span><span style="color:#F1FA8C;">.</span><span style="color:#E9F284;">&#39;</span><span style="color:#FF79C6;"> +</span><span style="color:#F8F8F2;"> value </span><span style="color:#FF79C6;">&amp;&amp;</span><span style="color:#F8F8F2;"> key </span><span style="color:#FF79C6;">==</span><span style="color:#E9F284;"> &#39;</span><span style="color:#F1FA8C;">class</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">)) {</span></span>
<span class="line"><span style="color:#F8F8F2;">                rule.declarations.</span><span style="color:#50FA7B;">forEach</span><span style="color:#F8F8F2;">(({ </span><span style="color:#FFB86C;font-style:italic;">property</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">value</span><span style="color:#F8F8F2;"> }) </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">                    element.computedStyle[property] </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> value;</span></span>
<span class="line"><span style="color:#F8F8F2;">                })</span></span>
<span class="line"><span style="color:#F8F8F2;">            }</span></span>
<span class="line"><span style="color:#F8F8F2;">        })</span></span>
<span class="line"><span style="color:#6272A4;">        //行内样式</span></span>
<span class="line"><span style="color:#FF79C6;">        if</span><span style="color:#F8F8F2;"> (key </span><span style="color:#FF79C6;">===</span><span style="color:#E9F284;"> &#39;</span><span style="color:#F1FA8C;">style</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#FF79C6;">            const</span><span style="color:#F8F8F2;"> attributes </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> value.</span><span style="color:#50FA7B;">split</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">;</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">            attributes.</span><span style="color:#50FA7B;">forEach</span><span style="color:#F8F8F2;">((</span><span style="color:#FFB86C;font-style:italic;">attribute</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#FF79C6;">                const</span><span style="color:#F8F8F2;"> [property, value] </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> attribute.</span><span style="color:#50FA7B;">split</span><span style="color:#F8F8F2;">(</span><span style="color:#FF5555;">/</span><span style="color:#F1FA8C;">:</span><span style="color:#BD93F9;">\\s</span><span style="color:#FF79C6;">*</span><span style="color:#FF5555;">/</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">                element.computedStyle[property] </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> value;</span></span>
<span class="line"><span style="color:#F8F8F2;">            });</span></span>
<span class="line"><span style="color:#F8F8F2;">        }</span></span>
<span class="line"><span style="color:#F8F8F2;">    });</span></span>
<span class="line"><span style="color:#F8F8F2;">    element.children.</span><span style="color:#50FA7B;">forEach</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">child</span><span style="color:#FF79C6;"> =&gt;</span><span style="color:#50FA7B;"> recalculateStyle</span><span style="color:#F8F8F2;">(cssRules, child,element.computedStyle));</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">//1.主进程接收用户输入的URL</span></span>
<span class="line"><span style="color:#F8F8F2;">main.</span><span style="color:#50FA7B;">emit</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">request</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, { host, port, path</span><span style="color:#FF79C6;">:</span><span style="color:#E9F284;"> &#39;</span><span style="color:#F1FA8C;">/index.html</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;"> });</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h3 id="绘制" tabindex="-1"><a class="header-anchor" href="#绘制"><span>绘制</span></a></h3><ul><li>根据分层树进行生成绘制步骤复合图层</li><li>每个图层会拆分成多个绘制指令，这些指令组合在一起成为绘制列表</li></ul><details class="hint-container details"><summary>request</summary><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> htmlparser2 </span><span style="color:#FF79C6;">=</span><span style="color:#50FA7B;"> require</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">htmlparser2</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> http </span><span style="color:#FF79C6;">=</span><span style="color:#50FA7B;"> require</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">http</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> css </span><span style="color:#FF79C6;">=</span><span style="color:#50FA7B;"> require</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">css</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> main </span><span style="color:#FF79C6;">=</span><span style="color:#50FA7B;"> require</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">./main.js</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> network </span><span style="color:#FF79C6;">=</span><span style="color:#50FA7B;"> require</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">./network.js</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> render </span><span style="color:#FF79C6;">=</span><span style="color:#50FA7B;"> require</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">./render.js</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> host </span><span style="color:#FF79C6;">=</span><span style="color:#E9F284;"> &#39;</span><span style="color:#F1FA8C;">localhost</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> port </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> 80</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#8BE9FD;font-style:italic;">Array</span><span style="color:#F8F8F2;">.prototype.</span><span style="color:#50FA7B;">top</span><span style="color:#FF79C6;"> =</span><span style="color:#FF79C6;"> function</span><span style="color:#F8F8F2;"> () {</span></span>
<span class="line"><span style="color:#FF79C6;">    return</span><span style="color:#BD93F9;font-style:italic;"> this</span><span style="color:#F8F8F2;">[</span><span style="color:#BD93F9;font-style:italic;">this</span><span style="color:#F8F8F2;">.length </span><span style="color:#FF79C6;">-</span><span style="color:#BD93F9;"> 1</span><span style="color:#F8F8F2;">];</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#6272A4;">/** 浏览器主进程 **/</span></span>
<span class="line"><span style="color:#F8F8F2;">main.</span><span style="color:#50FA7B;">on</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">request</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#FF79C6;">function</span><span style="color:#F8F8F2;"> (</span><span style="color:#FFB86C;font-style:italic;">options</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#6272A4;">    //2.主进程把该URL转发给网络进程</span></span>
<span class="line"><span style="color:#F8F8F2;">    network.</span><span style="color:#50FA7B;">emit</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">request</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, options);</span></span>
<span class="line"><span style="color:#F8F8F2;">})</span></span>
<span class="line"><span style="color:#6272A4;">//开始准备渲染页面</span></span>
<span class="line"><span style="color:#F8F8F2;">main.</span><span style="color:#50FA7B;">on</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">prepareRender</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#FF79C6;">function</span><span style="color:#F8F8F2;"> (</span><span style="color:#FFB86C;font-style:italic;">response</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#6272A4;">    //5.主进程发送提交导航消息到渲染进程</span></span>
<span class="line"><span style="color:#F8F8F2;">    render.</span><span style="color:#50FA7B;">emit</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">commitNavigation</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, response);</span></span>
<span class="line"><span style="color:#F8F8F2;">})</span></span>
<span class="line"><span style="color:#F8F8F2;">main.</span><span style="color:#50FA7B;">on</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">confirmNavigation</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#FF79C6;">function</span><span style="color:#F8F8F2;"> () {</span></span>
<span class="line"><span style="color:#F8F8F2;">    console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">confirmNavigation</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">})</span></span>
<span class="line"><span style="color:#F8F8F2;">main.</span><span style="color:#50FA7B;">on</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">DOMContentLoaded</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#FF79C6;">function</span><span style="color:#F8F8F2;"> () {</span></span>
<span class="line"><span style="color:#F8F8F2;">    console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">DOMContentLoaded</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">})</span></span>
<span class="line"><span style="color:#F8F8F2;">main.</span><span style="color:#50FA7B;">on</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">Load</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#FF79C6;">function</span><span style="color:#F8F8F2;"> () {</span></span>
<span class="line"><span style="color:#F8F8F2;">    console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">Load</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">/** 网络进程 **/</span></span>
<span class="line"><span style="color:#F8F8F2;">network.</span><span style="color:#50FA7B;">on</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">request</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#FF79C6;">function</span><span style="color:#F8F8F2;"> (</span><span style="color:#FFB86C;font-style:italic;">options</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#6272A4;">    //3.在网络进程中发起URL请求</span></span>
<span class="line"><span style="color:#FF79C6;">    let</span><span style="color:#F8F8F2;"> request </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> http.</span><span style="color:#50FA7B;">request</span><span style="color:#F8F8F2;">(options, (</span><span style="color:#FFB86C;font-style:italic;">response</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#6272A4;">        //4.网络进程接收到响应头数据并转发给主进程</span></span>
<span class="line"><span style="color:#F8F8F2;">        main.</span><span style="color:#50FA7B;">emit</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">prepareRender</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, response);</span></span>
<span class="line"><span style="color:#F8F8F2;">    });</span></span>
<span class="line"><span style="color:#6272A4;">    //结束请求体</span></span>
<span class="line"><span style="color:#F8F8F2;">    request.</span><span style="color:#50FA7B;">end</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#F8F8F2;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">/** 渲染进程 **/</span></span>
<span class="line"><span style="color:#6272A4;">//6.渲染进程开始从网络进程接收HTML数据</span></span>
<span class="line"><span style="color:#F8F8F2;">render.</span><span style="color:#50FA7B;">on</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">commitNavigation</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#FF79C6;">function</span><span style="color:#F8F8F2;"> (</span><span style="color:#FFB86C;font-style:italic;">response</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#FF79C6;">    const</span><span style="color:#F8F8F2;"> headers </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> response.headers;</span></span>
<span class="line"><span style="color:#FF79C6;">    const</span><span style="color:#F8F8F2;"> contentType </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> headers[</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">content-type</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">];</span></span>
<span class="line"><span style="color:#FF79C6;">    if</span><span style="color:#F8F8F2;"> (contentType.</span><span style="color:#50FA7B;">indexOf</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">text/html</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">!==</span><span style="color:#FF79C6;"> -</span><span style="color:#BD93F9;">1</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#6272A4;">        //1. 渲染进程把HTML转变为DOM树型结构</span></span>
<span class="line"><span style="color:#FF79C6;">        const</span><span style="color:#F8F8F2;"> document </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> { type</span><span style="color:#FF79C6;">:</span><span style="color:#E9F284;"> &#39;</span><span style="color:#F1FA8C;">document</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, attributes</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> {}, children</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> [] };</span></span>
<span class="line"><span style="color:#FF79C6;">        const</span><span style="color:#F8F8F2;"> cssRules </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> [];</span></span>
<span class="line"><span style="color:#FF79C6;">        const</span><span style="color:#F8F8F2;"> tokenStack </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> [document];</span></span>
<span class="line"><span style="color:#FF79C6;">        const</span><span style="color:#F8F8F2;"> parser </span><span style="color:#FF79C6;">=</span><span style="color:#FF79C6;font-weight:bold;"> new</span><span style="color:#F8F8F2;"> htmlparser2.</span><span style="color:#50FA7B;">Parser</span><span style="color:#F8F8F2;">({</span></span>
<span class="line"><span style="color:#50FA7B;">            onopentag</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">name</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">attributes</span><span style="color:#FF79C6;"> =</span><span style="color:#F8F8F2;"> {}) {</span></span>
<span class="line"><span style="color:#FF79C6;">                const</span><span style="color:#F8F8F2;"> parent </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> tokenStack.</span><span style="color:#50FA7B;">top</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#FF79C6;">                const</span><span style="color:#F8F8F2;"> element </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">                    type</span><span style="color:#FF79C6;">:</span><span style="color:#E9F284;"> &#39;</span><span style="color:#F1FA8C;">element</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">                    tagName</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> name,</span></span>
<span class="line"><span style="color:#F8F8F2;">                    children</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> [],</span></span>
<span class="line"><span style="color:#F8F8F2;">                    attributes,</span></span>
<span class="line"><span style="color:#F8F8F2;">                    parent</span></span>
<span class="line"><span style="color:#F8F8F2;">                }</span></span>
<span class="line"><span style="color:#F8F8F2;">                parent.children.</span><span style="color:#50FA7B;">push</span><span style="color:#F8F8F2;">(element);</span></span>
<span class="line"><span style="color:#F8F8F2;">                tokenStack.</span><span style="color:#50FA7B;">push</span><span style="color:#F8F8F2;">(element);</span></span>
<span class="line"><span style="color:#F8F8F2;">            },</span></span>
<span class="line"><span style="color:#50FA7B;">            ontext</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">text</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#FF79C6;">                if</span><span style="color:#F8F8F2;"> (</span><span style="color:#FF79C6;">!</span><span style="color:#FF5555;">/</span><span style="color:#FF79C6;">^</span><span style="color:#8BE9FD;">[</span><span style="color:#BD93F9;">\\r\\n\\s</span><span style="color:#8BE9FD;">]</span><span style="color:#FF79C6;">*$</span><span style="color:#FF5555;">/</span><span style="color:#F8F8F2;">.</span><span style="color:#50FA7B;">test</span><span style="color:#F8F8F2;">(text)) {</span></span>
<span class="line"><span style="color:#FF79C6;">                    const</span><span style="color:#F8F8F2;"> parent </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> tokenStack.</span><span style="color:#50FA7B;">top</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#FF79C6;">                    const</span><span style="color:#F8F8F2;"> textNode </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">                        type</span><span style="color:#FF79C6;">:</span><span style="color:#E9F284;"> &#39;</span><span style="color:#F1FA8C;">text</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">                        children</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> [],</span></span>
<span class="line"><span style="color:#F8F8F2;">                        attributes</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> {},</span></span>
<span class="line"><span style="color:#F8F8F2;">                        parent,</span></span>
<span class="line"><span style="color:#F8F8F2;">                        text</span></span>
<span class="line"><span style="color:#F8F8F2;">                    }</span></span>
<span class="line"><span style="color:#F8F8F2;">                    parent.children.</span><span style="color:#50FA7B;">push</span><span style="color:#F8F8F2;">(textNode);</span></span>
<span class="line"><span style="color:#F8F8F2;">                }</span></span>
<span class="line"><span style="color:#F8F8F2;">            },</span></span>
<span class="line"><span style="color:#6272A4;">            /**</span></span>
<span class="line"><span style="color:#6272A4;">             * 在预解析阶段，HTML发现CSS和JS文件会并行下载，等全部下载后先把CSS生成CSSOM，然后再执行JS脚本</span></span>
<span class="line"><span style="color:#6272A4;">             * 然后再构建DOM树，重新计算样式，构建布局树，绘制页面</span></span>
<span class="line"><span style="color:#6272A4;">             * </span><span style="color:#FF79C6;">@param</span><span style="color:#8BE9FD;font-style:italic;"> {*}</span><span style="color:#FFB86C;font-style:italic;"> tagname</span></span>
<span class="line"><span style="color:#6272A4;">             */</span></span>
<span class="line"><span style="color:#50FA7B;">            onclosetag</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">tagname</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#FF79C6;">                switch</span><span style="color:#F8F8F2;"> (tagname) {</span></span>
<span class="line"><span style="color:#FF79C6;">                    case</span><span style="color:#E9F284;"> &#39;</span><span style="color:#F1FA8C;">style</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#FF79C6;">                        const</span><span style="color:#F8F8F2;"> styleToken </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> tokenStack.</span><span style="color:#50FA7B;">top</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#FF79C6;">                        const</span><span style="color:#F8F8F2;"> cssAST </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> css.</span><span style="color:#50FA7B;">parse</span><span style="color:#F8F8F2;">(styleToken.children[</span><span style="color:#BD93F9;">0</span><span style="color:#F8F8F2;">].text);</span></span>
<span class="line"><span style="color:#F8F8F2;">                        cssRules.</span><span style="color:#50FA7B;">push</span><span style="color:#F8F8F2;">(</span><span style="color:#FF79C6;">...</span><span style="color:#F8F8F2;">cssAST.stylesheet.rules);</span></span>
<span class="line"><span style="color:#FF79C6;">                        break</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#FF79C6;">                    default</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#FF79C6;">                        break</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">                }</span></span>
<span class="line"><span style="color:#F8F8F2;">                tokenStack.</span><span style="color:#50FA7B;">pop</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#F8F8F2;">            },</span></span>
<span class="line"><span style="color:#F8F8F2;">        });</span></span>
<span class="line"><span style="color:#6272A4;">        //开始接收响应体</span></span>
<span class="line"><span style="color:#F8F8F2;">        response.</span><span style="color:#50FA7B;">on</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">data</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, (</span><span style="color:#FFB86C;font-style:italic;">buffer</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#6272A4;">            //8.渲染进程开始HTML解析和加载子资源</span></span>
<span class="line"><span style="color:#6272A4;">            //网络进程加载了多少数据，HTML 解析器便解析多少数据。</span></span>
<span class="line"><span style="color:#F8F8F2;">            parser.</span><span style="color:#50FA7B;">write</span><span style="color:#F8F8F2;">(buffer.</span><span style="color:#50FA7B;">toString</span><span style="color:#F8F8F2;">());</span></span>
<span class="line"><span style="color:#F8F8F2;">        });</span></span>
<span class="line"><span style="color:#F8F8F2;">        response.</span><span style="color:#50FA7B;">on</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">end</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, () </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#6272A4;">            //7.HTML接收接受完毕后通知主进程确认导航</span></span>
<span class="line"><span style="color:#F8F8F2;">            main.</span><span style="color:#50FA7B;">emit</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">confirmNavigation</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#6272A4;">            //3. 通过stylesheet计算出DOM节点的样式</span></span>
<span class="line"><span style="color:#50FA7B;">            recalculateStyle</span><span style="color:#F8F8F2;">(cssRules, document);</span></span>
<span class="line"><span style="color:#6272A4;">            //4. 根据DOM树创建布局树,就是复制DOM结构并过滤掉不显示的元素</span></span>
<span class="line"><span style="color:#FF79C6;">            const</span><span style="color:#F8F8F2;"> html </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> document.children[</span><span style="color:#BD93F9;">0</span><span style="color:#F8F8F2;">];</span></span>
<span class="line"><span style="color:#FF79C6;">            const</span><span style="color:#F8F8F2;"> body </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> html.children[</span><span style="color:#BD93F9;">1</span><span style="color:#F8F8F2;">];</span></span>
<span class="line"><span style="color:#FF79C6;">            const</span><span style="color:#F8F8F2;"> layoutTree </span><span style="color:#FF79C6;">=</span><span style="color:#50FA7B;"> createLayout</span><span style="color:#F8F8F2;">(body);</span></span>
<span class="line"><span style="color:#6272A4;">            //5.并计算各个元素的布局信息</span></span>
<span class="line"><span style="color:#50FA7B;">            updateLayoutTree</span><span style="color:#F8F8F2;">(layoutTree);</span></span>
<span class="line"><span style="color:#6272A4;">            //6. 根据布局树生成分层树</span></span>
<span class="line"><span style="color:#FF79C6;">            const</span><span style="color:#F8F8F2;"> layers </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> [layoutTree];</span></span>
<span class="line"><span style="color:#50FA7B;">            createLayerTree</span><span style="color:#F8F8F2;">(layoutTree, layers);</span></span>
<span class="line"><span style="color:#FF79C6;">+</span><span style="color:#6272A4;">           //7. 根据分层树进行生成绘制步骤并复合图层</span></span>
<span class="line"><span style="color:#FF79C6;">+</span><span style="color:#FF79C6;">           const</span><span style="color:#F8F8F2;"> paintSteps </span><span style="color:#FF79C6;">=</span><span style="color:#50FA7B;"> compositeLayers</span><span style="color:#F8F8F2;">(layers);</span></span>
<span class="line"><span style="color:#FF79C6;">+</span><span style="color:#F8F8F2;">           console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(paintSteps.</span><span style="color:#50FA7B;">flat</span><span style="color:#F8F8F2;">().</span><span style="color:#50FA7B;">join</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#FF79C6;">\\r\\n</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">));</span></span>
<span class="line"><span style="color:#6272A4;">            //触发DOMContentLoaded事件</span></span>
<span class="line"><span style="color:#F8F8F2;">            main.</span><span style="color:#50FA7B;">emit</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">DOMContentLoaded</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#6272A4;">            //9.HTML解析完毕和加载子资源页面加载完成后会通知主进程页面加载完成</span></span>
<span class="line"><span style="color:#F8F8F2;">            main.</span><span style="color:#50FA7B;">emit</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">Load</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">        });</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">})</span></span>
<span class="line"><span style="color:#FF79C6;">+function</span><span style="color:#50FA7B;"> compositeLayers</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">layers</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#FF79C6;">+</span><span style="color:#6272A4;">    //10.合成线程会把分好的图块发给栅格化线程池，栅格化线程会把图片(tile)转化为位图</span></span>
<span class="line"><span style="color:#FF79C6;">+</span><span style="color:#FF79C6;">    return</span><span style="color:#F8F8F2;"> layers.</span><span style="color:#50FA7B;">map</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">layout</span><span style="color:#FF79C6;"> =&gt;</span><span style="color:#50FA7B;"> paint</span><span style="color:#F8F8F2;">(layout));</span></span>
<span class="line"><span style="color:#FF79C6;">+</span><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#FF79C6;">+function</span><span style="color:#50FA7B;"> paint</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">element</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">paintSteps</span><span style="color:#FF79C6;"> =</span><span style="color:#F8F8F2;"> []) {</span></span>
<span class="line"><span style="color:#FF79C6;">+</span><span style="color:#FF79C6;">    const</span><span style="color:#F8F8F2;"> { background </span><span style="color:#FF79C6;">=</span><span style="color:#E9F284;"> &#39;</span><span style="color:#F1FA8C;">black</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, color </span><span style="color:#FF79C6;">=</span><span style="color:#E9F284;"> &#39;</span><span style="color:#F1FA8C;">black</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, top </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> 0</span><span style="color:#F8F8F2;">, left </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> 0</span><span style="color:#F8F8F2;">, width </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> 100</span><span style="color:#F8F8F2;">, height </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> 0</span><span style="color:#F8F8F2;"> } </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> element.layout;</span></span>
<span class="line"><span style="color:#FF79C6;">+</span><span style="color:#FF79C6;">    if</span><span style="color:#F8F8F2;"> (element.type </span><span style="color:#FF79C6;">===</span><span style="color:#E9F284;"> &#39;</span><span style="color:#F1FA8C;">text</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#FF79C6;">+</span><span style="color:#F8F8F2;">        paintSteps.</span><span style="color:#50FA7B;">push</span><span style="color:#F8F8F2;">(</span><span style="color:#F1FA8C;">\`ctx.font = &#39;20px Impact;&#39;\`</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#FF79C6;">+</span><span style="color:#F8F8F2;">        paintSteps.</span><span style="color:#50FA7B;">push</span><span style="color:#F8F8F2;">(</span><span style="color:#F1FA8C;">\`ctx.strokeStyle = &#39;</span><span style="color:#FF79C6;">\${</span><span style="color:#F8F8F2;">color</span><span style="color:#FF79C6;">}</span><span style="color:#F1FA8C;">&#39;;\`</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#FF79C6;">+</span><span style="color:#F8F8F2;">        paintSteps.</span><span style="color:#50FA7B;">push</span><span style="color:#F8F8F2;">(</span><span style="color:#F1FA8C;">\`ctx.strokeText(&quot;</span><span style="color:#FF79C6;">\${</span><span style="color:#F8F8F2;">element.text.</span><span style="color:#50FA7B;">replace</span><span style="color:#F8F8F2;">(</span><span style="color:#FF5555;">/</span><span style="color:#FFB86C;">(</span><span style="color:#FF79C6;">^</span><span style="color:#BD93F9;">\\s</span><span style="color:#FF79C6;">+|</span><span style="color:#BD93F9;">\\s</span><span style="color:#FF79C6;">+$</span><span style="color:#FFB86C;">)</span><span style="color:#FF5555;">/</span><span style="color:#FF79C6;">g</span><span style="color:#F1FA8C;">, </span><span style="color:#E9F284;">&#39;&#39;</span><span style="color:#F8F8F2;">)</span><span style="color:#FF79C6;">}</span><span style="color:#F1FA8C;">&quot;, </span><span style="color:#FF79C6;">\${</span><span style="color:#F8F8F2;">left</span><span style="color:#FF79C6;">}</span><span style="color:#F1FA8C;">,</span><span style="color:#FF79C6;">\${</span><span style="color:#F8F8F2;">top</span><span style="color:#FF79C6;"> +</span><span style="color:#BD93F9;"> 20</span><span style="color:#FF79C6;">}</span><span style="color:#F1FA8C;">);\`</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#FF79C6;">+</span><span style="color:#F8F8F2;">    } </span><span style="color:#FF79C6;">else</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#FF79C6;">+</span><span style="color:#F8F8F2;">        paintSteps.</span><span style="color:#50FA7B;">push</span><span style="color:#F8F8F2;">(</span><span style="color:#F1FA8C;">\`ctx.fillStyle=&quot;</span><span style="color:#FF79C6;">\${</span><span style="color:#F8F8F2;">background</span><span style="color:#FF79C6;">}</span><span style="color:#F1FA8C;">&quot;;\`</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#FF79C6;">+</span><span style="color:#F8F8F2;">        paintSteps.</span><span style="color:#50FA7B;">push</span><span style="color:#F8F8F2;">(</span><span style="color:#F1FA8C;">\`ctx.fillRect(</span><span style="color:#FF79C6;">\${</span><span style="color:#F8F8F2;">left</span><span style="color:#FF79C6;">}</span><span style="color:#F1FA8C;">,</span><span style="color:#FF79C6;">\${</span><span style="color:#F8F8F2;">top</span><span style="color:#FF79C6;">}</span><span style="color:#F1FA8C;">, </span><span style="color:#FF79C6;">\${</span><span style="color:#50FA7B;">parseInt</span><span style="color:#F8F8F2;">(width)</span><span style="color:#FF79C6;">}</span><span style="color:#F1FA8C;">, </span><span style="color:#FF79C6;">\${</span><span style="color:#50FA7B;">parseInt</span><span style="color:#F8F8F2;">(height)</span><span style="color:#FF79C6;">}</span><span style="color:#F1FA8C;">);\`</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#FF79C6;">+</span><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#FF79C6;">+</span><span style="color:#F8F8F2;">    element.children.</span><span style="color:#50FA7B;">forEach</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">child</span><span style="color:#FF79C6;"> =&gt;</span><span style="color:#50FA7B;"> paint</span><span style="color:#F8F8F2;">(child, paintSteps));</span></span>
<span class="line"><span style="color:#FF79C6;">+</span><span style="color:#FF79C6;">    return</span><span style="color:#F8F8F2;"> paintSteps;</span></span>
<span class="line"><span style="color:#FF79C6;">+</span><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#FF79C6;">function</span><span style="color:#50FA7B;"> createLayerTree</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">element</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">layers</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">    element.children </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> element.children.</span><span style="color:#50FA7B;">filter</span><span style="color:#F8F8F2;">((</span><span style="color:#FFB86C;font-style:italic;">child</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#50FA7B;"> createNewLayer</span><span style="color:#F8F8F2;">(child, layers));</span></span>
<span class="line"><span style="color:#F8F8F2;">    element.children.</span><span style="color:#50FA7B;">forEach</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">child</span><span style="color:#FF79C6;"> =&gt;</span><span style="color:#50FA7B;"> createLayerTree</span><span style="color:#F8F8F2;">(child, layers));</span></span>
<span class="line"><span style="color:#FF79C6;">    return</span><span style="color:#F8F8F2;"> layers;</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#FF79C6;">function</span><span style="color:#50FA7B;"> createNewLayer</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">element</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">layers</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#FF79C6;">    let</span><span style="color:#F8F8F2;"> created </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> true</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#FF79C6;">    const</span><span style="color:#F8F8F2;"> attributes </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> element.attributes;</span></span>
<span class="line"><span style="color:#F8F8F2;">    Object.</span><span style="color:#50FA7B;">entries</span><span style="color:#F8F8F2;">(attributes).</span><span style="color:#50FA7B;">forEach</span><span style="color:#F8F8F2;">(([</span><span style="color:#FFB86C;font-style:italic;">key</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">value</span><span style="color:#F8F8F2;">]) </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#FF79C6;">        if</span><span style="color:#F8F8F2;"> (key </span><span style="color:#FF79C6;">===</span><span style="color:#E9F284;"> &#39;</span><span style="color:#F1FA8C;">style</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#FF79C6;">            const</span><span style="color:#F8F8F2;"> attributes </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> value.</span><span style="color:#50FA7B;">split</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">;</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">            attributes.</span><span style="color:#50FA7B;">forEach</span><span style="color:#F8F8F2;">((</span><span style="color:#FFB86C;font-style:italic;">attribute</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#FF79C6;">                const</span><span style="color:#F8F8F2;"> [property, value] </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> attribute.</span><span style="color:#50FA7B;">split</span><span style="color:#F8F8F2;">(</span><span style="color:#FF5555;">/</span><span style="color:#F1FA8C;">:</span><span style="color:#BD93F9;">\\s</span><span style="color:#FF79C6;">*</span><span style="color:#FF5555;">/</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#FF79C6;">                if</span><span style="color:#F8F8F2;"> (property </span><span style="color:#FF79C6;">===</span><span style="color:#E9F284;"> &#39;</span><span style="color:#F1FA8C;">position</span><span style="color:#E9F284;">&#39;</span><span style="color:#FF79C6;"> &amp;&amp;</span><span style="color:#F8F8F2;"> value </span><span style="color:#FF79C6;">===</span><span style="color:#E9F284;"> &#39;</span><span style="color:#F1FA8C;">absolute</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#50FA7B;">                    updateLayoutTree</span><span style="color:#F8F8F2;">(element);</span><span style="color:#6272A4;">//对单独的层重新计算位置</span></span>
<span class="line"><span style="color:#F8F8F2;">                    layers.</span><span style="color:#50FA7B;">push</span><span style="color:#F8F8F2;">(element);</span></span>
<span class="line"><span style="color:#F8F8F2;">                    created </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> false</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">                }</span></span>
<span class="line"><span style="color:#F8F8F2;">            });</span></span>
<span class="line"><span style="color:#F8F8F2;">        }</span></span>
<span class="line"><span style="color:#F8F8F2;">    });</span></span>
<span class="line"><span style="color:#FF79C6;">    return</span><span style="color:#F8F8F2;"> created;</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#FF79C6;">function</span><span style="color:#50FA7B;"> updateLayoutTree</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">element</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">top</span><span style="color:#FF79C6;"> =</span><span style="color:#BD93F9;"> 0</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">parentTop</span><span style="color:#FF79C6;"> =</span><span style="color:#BD93F9;"> 0</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#FF79C6;">    const</span><span style="color:#F8F8F2;"> computedStyle </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> element.computedStyle;</span></span>
<span class="line"><span style="color:#F8F8F2;">    element.layout </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">        top</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> top </span><span style="color:#FF79C6;">+</span><span style="color:#F8F8F2;"> parentTop,</span></span>
<span class="line"><span style="color:#F8F8F2;">        left</span><span style="color:#FF79C6;">:</span><span style="color:#BD93F9;"> 0</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">        width</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> computedStyle.width,</span></span>
<span class="line"><span style="color:#F8F8F2;">        height</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> computedStyle.height,</span></span>
<span class="line"><span style="color:#F8F8F2;">        background</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> computedStyle.background,</span></span>
<span class="line"><span style="color:#F8F8F2;">        color</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> computedStyle.color</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#FF79C6;">    let</span><span style="color:#F8F8F2;"> childTop </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> 0</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">    element.children.</span><span style="color:#50FA7B;">forEach</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">child</span><span style="color:#FF79C6;"> =&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#50FA7B;">        updateLayoutTree</span><span style="color:#F8F8F2;">(child, childTop, element.layout.top);</span></span>
<span class="line"><span style="color:#F8F8F2;">        childTop </span><span style="color:#FF79C6;">+=</span><span style="color:#50FA7B;"> parseInt</span><span style="color:#F8F8F2;">(child.computedStyle.height </span><span style="color:#FF79C6;">||</span><span style="color:#BD93F9;"> 0</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">    });</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#FF79C6;">function</span><span style="color:#50FA7B;"> createLayout</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">element</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">    element.children </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> element.children.</span><span style="color:#50FA7B;">filter</span><span style="color:#F8F8F2;">(isShow);</span></span>
<span class="line"><span style="color:#F8F8F2;">    element.children.</span><span style="color:#50FA7B;">forEach</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">child</span><span style="color:#FF79C6;"> =&gt;</span><span style="color:#50FA7B;"> createLayout</span><span style="color:#F8F8F2;">(child));</span></span>
<span class="line"><span style="color:#FF79C6;">    return</span><span style="color:#F8F8F2;"> element;</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#FF79C6;">function</span><span style="color:#50FA7B;"> isShow</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">element</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#FF79C6;">    let</span><span style="color:#F8F8F2;"> isShow </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> true</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#FF79C6;">    if</span><span style="color:#F8F8F2;"> (element.tagName </span><span style="color:#FF79C6;">===</span><span style="color:#E9F284;"> &#39;</span><span style="color:#F1FA8C;">head</span><span style="color:#E9F284;">&#39;</span><span style="color:#FF79C6;"> ||</span><span style="color:#F8F8F2;"> element.tagName </span><span style="color:#FF79C6;">===</span><span style="color:#E9F284;"> &#39;</span><span style="color:#F1FA8C;">script</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">        isShow </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> false</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#FF79C6;">    const</span><span style="color:#F8F8F2;"> attributes </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> element.attributes;</span></span>
<span class="line"><span style="color:#F8F8F2;">    Object.</span><span style="color:#50FA7B;">entries</span><span style="color:#F8F8F2;">(attributes).</span><span style="color:#50FA7B;">forEach</span><span style="color:#F8F8F2;">(([</span><span style="color:#FFB86C;font-style:italic;">key</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">value</span><span style="color:#F8F8F2;">]) </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#FF79C6;">        if</span><span style="color:#F8F8F2;"> (key </span><span style="color:#FF79C6;">===</span><span style="color:#E9F284;"> &#39;</span><span style="color:#F1FA8C;">style</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#FF79C6;">            const</span><span style="color:#F8F8F2;"> attributes </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> value.</span><span style="color:#50FA7B;">split</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">;</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">            attributes.</span><span style="color:#50FA7B;">forEach</span><span style="color:#F8F8F2;">((</span><span style="color:#FFB86C;font-style:italic;">attribute</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#FF79C6;">                const</span><span style="color:#F8F8F2;"> [property, value] </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> attribute.</span><span style="color:#50FA7B;">split</span><span style="color:#F8F8F2;">(</span><span style="color:#FF5555;">/</span><span style="color:#F1FA8C;">:</span><span style="color:#BD93F9;">\\s</span><span style="color:#FF79C6;">*</span><span style="color:#FF5555;">/</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#FF79C6;">                if</span><span style="color:#F8F8F2;"> (property </span><span style="color:#FF79C6;">===</span><span style="color:#E9F284;"> &#39;</span><span style="color:#F1FA8C;">display</span><span style="color:#E9F284;">&#39;</span><span style="color:#FF79C6;"> &amp;&amp;</span><span style="color:#F8F8F2;"> value </span><span style="color:#FF79C6;">===</span><span style="color:#E9F284;"> &#39;</span><span style="color:#F1FA8C;">none</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">                    isShow </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> false</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">                }</span></span>
<span class="line"><span style="color:#F8F8F2;">            });</span></span>
<span class="line"><span style="color:#F8F8F2;">        }</span></span>
<span class="line"><span style="color:#F8F8F2;">    });</span></span>
<span class="line"><span style="color:#FF79C6;">    return</span><span style="color:#F8F8F2;"> isShow;</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#FF79C6;">function</span><span style="color:#50FA7B;"> recalculateStyle</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">cssRules</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">element</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">parentComputedStyle</span><span style="color:#FF79C6;"> =</span><span style="color:#F8F8F2;"> {}) {</span></span>
<span class="line"><span style="color:#FF79C6;">    const</span><span style="color:#F8F8F2;"> attributes </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> element.attributes;</span></span>
<span class="line"><span style="color:#F8F8F2;">    element.computedStyle </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> {color</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;">parentComputedStyle.color};</span><span style="color:#6272A4;">// 计算样式</span></span>
<span class="line"><span style="color:#F8F8F2;">    Object.</span><span style="color:#50FA7B;">entries</span><span style="color:#F8F8F2;">(attributes).</span><span style="color:#50FA7B;">forEach</span><span style="color:#F8F8F2;">(([</span><span style="color:#FFB86C;font-style:italic;">key</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">value</span><span style="color:#F8F8F2;">]) </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#6272A4;">        //stylesheets</span></span>
<span class="line"><span style="color:#F8F8F2;">        cssRules.</span><span style="color:#50FA7B;">forEach</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">rule</span><span style="color:#FF79C6;"> =&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#FF79C6;">            let</span><span style="color:#F8F8F2;"> selector </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> rule.selectors[</span><span style="color:#BD93F9;">0</span><span style="color:#F8F8F2;">].</span><span style="color:#50FA7B;">replace</span><span style="color:#F8F8F2;">(</span><span style="color:#FF5555;">/</span><span style="color:#BD93F9;">\\s</span><span style="color:#FF79C6;">+</span><span style="color:#FF5555;">/</span><span style="color:#FF79C6;">g</span><span style="color:#F8F8F2;">, </span><span style="color:#E9F284;">&#39;&#39;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#FF79C6;">            if</span><span style="color:#F8F8F2;"> ((selector </span><span style="color:#FF79C6;">==</span><span style="color:#E9F284;"> &#39;</span><span style="color:#F1FA8C;">#</span><span style="color:#E9F284;">&#39;</span><span style="color:#FF79C6;"> +</span><span style="color:#F8F8F2;"> value </span><span style="color:#FF79C6;">&amp;&amp;</span><span style="color:#F8F8F2;"> key </span><span style="color:#FF79C6;">==</span><span style="color:#E9F284;"> &#39;</span><span style="color:#F1FA8C;">id</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">||</span><span style="color:#F8F8F2;"> (selector </span><span style="color:#FF79C6;">==</span><span style="color:#E9F284;"> &#39;</span><span style="color:#F1FA8C;">.</span><span style="color:#E9F284;">&#39;</span><span style="color:#FF79C6;"> +</span><span style="color:#F8F8F2;"> value </span><span style="color:#FF79C6;">&amp;&amp;</span><span style="color:#F8F8F2;"> key </span><span style="color:#FF79C6;">==</span><span style="color:#E9F284;"> &#39;</span><span style="color:#F1FA8C;">class</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">)) {</span></span>
<span class="line"><span style="color:#F8F8F2;">                rule.declarations.</span><span style="color:#50FA7B;">forEach</span><span style="color:#F8F8F2;">(({ </span><span style="color:#FFB86C;font-style:italic;">property</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">value</span><span style="color:#F8F8F2;"> }) </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">                    element.computedStyle[property] </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> value;</span></span>
<span class="line"><span style="color:#F8F8F2;">                })</span></span>
<span class="line"><span style="color:#F8F8F2;">            }</span></span>
<span class="line"><span style="color:#F8F8F2;">        })</span></span>
<span class="line"><span style="color:#6272A4;">        //行内样式</span></span>
<span class="line"><span style="color:#FF79C6;">        if</span><span style="color:#F8F8F2;"> (key </span><span style="color:#FF79C6;">===</span><span style="color:#E9F284;"> &#39;</span><span style="color:#F1FA8C;">style</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#FF79C6;">            const</span><span style="color:#F8F8F2;"> attributes </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> value.</span><span style="color:#50FA7B;">split</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">;</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">            attributes.</span><span style="color:#50FA7B;">forEach</span><span style="color:#F8F8F2;">((</span><span style="color:#FFB86C;font-style:italic;">attribute</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#FF79C6;">                const</span><span style="color:#F8F8F2;"> [property, value] </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> attribute.</span><span style="color:#50FA7B;">split</span><span style="color:#F8F8F2;">(</span><span style="color:#FF5555;">/</span><span style="color:#F1FA8C;">:</span><span style="color:#BD93F9;">\\s</span><span style="color:#FF79C6;">*</span><span style="color:#FF5555;">/</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">                element.computedStyle[property] </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> value;</span></span>
<span class="line"><span style="color:#F8F8F2;">            });</span></span>
<span class="line"><span style="color:#F8F8F2;">        }</span></span>
<span class="line"><span style="color:#F8F8F2;">    });</span></span>
<span class="line"><span style="color:#F8F8F2;">    element.children.</span><span style="color:#50FA7B;">forEach</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">child</span><span style="color:#FF79C6;"> =&gt;</span><span style="color:#50FA7B;"> recalculateStyle</span><span style="color:#F8F8F2;">(cssRules, child,element.computedStyle));</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">//1.主进程接收用户输入的URL</span></span>
<span class="line"><span style="color:#F8F8F2;">main.</span><span style="color:#50FA7B;">emit</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">request</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, { host, port, path</span><span style="color:#FF79C6;">:</span><span style="color:#E9F284;"> &#39;</span><span style="color:#F1FA8C;">/index.html</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;"> });</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h3 id="合成线程" tabindex="-1"><a class="header-anchor" href="#合成线程"><span>合成线程</span></a></h3><ul><li>合成线程将图层分成图块(tile)</li><li>合成线程会把分好的图块发给栅格化线程池，栅格化线程会把图片(tile)转化为位图</li><li>而其实栅格化线程在工作的时候会把栅格化的工作交给 GPU 进程来完成，最终生成的位图就保存在了 GPU 内存中</li><li>当所有的图块都光栅化之后合成线程会发送绘制图块的命令给浏览器主进程</li><li>浏览器主进程然后会从 GPU 内存中取出位图显示到页面上</li></ul><figure><img src="`+F+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="图块" tabindex="-1"><a class="header-anchor" href="#图块"><span>图块</span></a></h4><ul><li>图块渲染也称基于瓦片渲染或基于小方块渲染</li><li>它是一种通过规则的网格细分计算机图形图像并分别渲染图块(tile)各部分的过程 <img src="'+c+'" alt="" loading="lazy"></li></ul><h4 id="栅格化" tabindex="-1"><a class="header-anchor" href="#栅格化"><span>栅格化</span></a></h4><ul><li>栅格化是将矢量图形格式表示的图像转换成位图以用于显示器输出的过程</li><li>栅格即像素</li><li>栅格化即将矢量图形转化为位图(栅格图像)</li></ul><figure><img src="'+t+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="资源加载" tabindex="-1"><a class="header-anchor" href="#资源加载"><span>资源加载</span></a></h3><ul><li>CSS 加载不会影响 DOM 解析</li><li>CSS 加载不会阻塞 JS 加载，但是会阻塞 JS 执行</li><li>JS 会依赖 CSS 加载，JS 会阻塞 DOM 解析</li></ul><figure><img src="'+r+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>',37)]))}const u=n(i,[["render",y],["__file","browsers-rendering.html.vue"]]),m=JSON.parse('{"path":"/browse/browsers-rendering.html","title":"浏览器渲染过程","lang":"en-US","frontmatter":{"title":"浏览器渲染过程","category":"Browse","date":"2021-05-12T00:00:00.000Z","description":"进程架构 当启动一个程序时，操作系统会为该程序分配内存，用来存放代码、运行过程中的数据，这样的运行环境叫做进程 一个进程可以启动和管理多个线程，线程之间可以共享进行数据，任何一个线程出错都可能会导致进程崩溃 Chrome 的进程架构 浏览器主进程 负责界面显示、用户交互和子进程管理 渲染进程 排版引擎和 V8 引擎运行在该进程中，负责把 HTML、CS...","head":[["meta",{"property":"og:url","content":"https://luxiag.github.io/luxiag/blog/browse/browsers-rendering.html"}],["meta",{"property":"og:title","content":"浏览器渲染过程"}],["meta",{"property":"og:description","content":"进程架构 当启动一个程序时，操作系统会为该程序分配内存，用来存放代码、运行过程中的数据，这样的运行环境叫做进程 一个进程可以启动和管理多个线程，线程之间可以共享进行数据，任何一个线程出错都可能会导致进程崩溃 Chrome 的进程架构 浏览器主进程 负责界面显示、用户交互和子进程管理 渲染进程 排版引擎和 V8 引擎运行在该进程中，负责把 HTML、CS..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2023-01-15T10:46:26.000Z"}],["meta",{"property":"article:published_time","content":"2021-05-12T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-01-15T10:46:26.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"浏览器渲染过程\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2021-05-12T00:00:00.000Z\\",\\"dateModified\\":\\"2023-01-15T10:46:26.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"luxiag\\",\\"url\\":\\"https://luxiag.github.io/luxiag\\"}]}"]]},"headers":[{"level":2,"title":"进程架构","slug":"进程架构","link":"#进程架构","children":[{"level":3,"title":"Chrome 的进程架构","slug":"chrome-的进程架构","link":"#chrome-的进程架构","children":[]},{"level":3,"title":"HTML 加载","slug":"html-加载","link":"#html-加载","children":[]}]},{"level":2,"title":"渲染过程","slug":"渲染过程","link":"#渲染过程","children":[{"level":3,"title":"HTML 转 DOM 树","slug":"html-转-dom-树","link":"#html-转-dom-树","children":[]},{"level":3,"title":"CSS 转 stylesheet","slug":"css-转-stylesheet","link":"#css-转-stylesheet","children":[]},{"level":3,"title":"计算出 DOM 节点的样式","slug":"计算出-dom-节点的样式","link":"#计算出-dom-节点的样式","children":[]},{"level":3,"title":"构建布局树","slug":"构建布局树","link":"#构建布局树","children":[]},{"level":3,"title":"计算布局","slug":"计算布局","link":"#计算布局","children":[]},{"level":3,"title":"生成分层树","slug":"生成分层树","link":"#生成分层树","children":[]},{"level":3,"title":"绘制","slug":"绘制","link":"#绘制","children":[]},{"level":3,"title":"合成线程","slug":"合成线程","link":"#合成线程","children":[]},{"level":3,"title":"资源加载","slug":"资源加载","link":"#资源加载","children":[]}]}],"git":{"createdTime":1673428495000,"updatedTime":1673779586000,"contributors":[{"name":"luxiag","email":"luxiag@qq.com","commits":2}]},"readingTime":{"minutes":12.82,"words":3845},"filePathRelative":"browse/browsers-rendering.md","localizedDate":"May 12, 2021","excerpt":"<h2>进程架构</h2>\\n<ul>\\n<li>当启动一个程序时，操作系统会为该程序分配内存，用来存放代码、运行过程中的数据，这样的运行环境叫做进程</li>\\n<li>一个进程可以启动和管理多个线程，线程之间可以共享进行数据，任何一个线程出错都可能会导致进程崩溃</li>\\n</ul>","autoDesc":true}');export{u as comp,m as data};
