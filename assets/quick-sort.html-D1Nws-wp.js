import{_ as t,c as s,a as e,o as l}from"./app-DS_HEYrV.js";const n="/blog/assets/1680123400919111551-DrOrky4I.png",o="/blog/assets/1680123400919164026-Ds1cM42H.png",i={};function p(r,a){return l(),s("div",null,a[0]||(a[0]=[e('<h1 id="分而治之" tabindex="-1"><a class="header-anchor" href="#分而治之"><span>分而治之</span></a></h1><p>(1) 找出基线条件，这种条件必须尽可能简单。 (2) 不断将问题分解（或者说缩小规模），直到符合基线条件 将一块 1680 x 640 的图片分成方块，方块要尽可能的大 <img src="'+n+`" alt="" loading="lazy"></p><ol><li>1680 x 640=&gt; 640x640 + 640x640 + 640x400</li><li>640x 400 =&gt; 400x 400 + 400x240</li><li>400x240 =&gt; 240x240 + 240x160</li><li>240x160 =&gt; 160x 160 + 160 x80</li><li>160x80 =&gt; 80x80 +80x80 适用的方块为 80x80</li></ol><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#6272A4;">// 计算数组的值</span></span>
<span class="line"><span style="color:#FF79C6;">const</span><span style="color:#50FA7B;"> sum</span><span style="color:#FF79C6;"> =</span><span style="color:#F8F8F2;"> (</span><span style="color:#FFB86C;font-style:italic;">arrays</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">total</span><span style="color:#FF79C6;"> =</span><span style="color:#BD93F9;"> 0</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#FF79C6;">  if</span><span style="color:#F8F8F2;"> (arrays.length </span><span style="color:#FF79C6;">===</span><span style="color:#BD93F9;"> 1</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">return</span><span style="color:#F8F8F2;"> arrays[</span><span style="color:#BD93F9;">0</span><span style="color:#F8F8F2;">] </span><span style="color:#FF79C6;">+</span><span style="color:#F8F8F2;"> total;</span></span>
<span class="line"><span style="color:#F8F8F2;">  total </span><span style="color:#FF79C6;">+=</span><span style="color:#F8F8F2;"> arrays.</span><span style="color:#50FA7B;">pop</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#50FA7B;">  sum</span><span style="color:#F8F8F2;">(arrays, total);</span></span>
<span class="line"><span style="color:#F8F8F2;">};</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="快速排序" tabindex="-1"><a class="header-anchor" href="#快速排序"><span>快速排序</span></a></h1><p>(1) 选择基准值。 (2) 将数组分成两个子数组：小于基准值的元素和大于基准值的元素。 (3) 对这两个子数组进行快速排序。</p><p>有[2,4,3,9,1,6,5]数组 选 2 作为基准值，挑选比 2 小的数值组成左侧数组，比 2 大的组成右侧数组 对挑选出的 2 个数组，重复上述操作</p><figure><img src="`+o+'" alt="来源(https://www.cnblogs.com/MOBIN/p/4681369.html)" tabindex="0" loading="lazy"><figcaption>来源(https://www.cnblogs.com/MOBIN/p/4681369.html)</figcaption></figure>',8)]))}const m=t(i,[["render",p],["__file","quick-sort.html.vue"]]),x=JSON.parse('{"path":"/algorithm/quick-sort.html","title":"快速排序","lang":"en-US","frontmatter":{"title":"快速排序","date":"2022-09-19T00:00:00.000Z","reference":"算法图解","noShow":true,"category":["算法"],"tags":["算法图解","D&C算法"],"description":"分而治之 (1) 找出基线条件，这种条件必须尽可能简单。 (2) 不断将问题分解（或者说缩小规模），直到符合基线条件 将一块 1680 x 640 的图片分成方块，方块要尽可能的大 1680 x 640=> 640x640 + 640x640 + 640x400 640x 400 => 400x 400 + 400x240 400x240 => 240...","head":[["meta",{"property":"og:url","content":"https://luxiag.github.io/luxiag/blog/algorithm/quick-sort.html"}],["meta",{"property":"og:title","content":"快速排序"}],["meta",{"property":"og:description","content":"分而治之 (1) 找出基线条件，这种条件必须尽可能简单。 (2) 不断将问题分解（或者说缩小规模），直到符合基线条件 将一块 1680 x 640 的图片分成方块，方块要尽可能的大 1680 x 640=> 640x640 + 640x640 + 640x400 640x 400 => 400x 400 + 400x240 400x240 => 240..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2025-02-09T14:06:21.000Z"}],["meta",{"property":"article:tag","content":"算法图解"}],["meta",{"property":"article:tag","content":"D&C算法"}],["meta",{"property":"article:published_time","content":"2022-09-19T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-02-09T14:06:21.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"快速排序\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-09-19T00:00:00.000Z\\",\\"dateModified\\":\\"2025-02-09T14:06:21.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"luxiag\\",\\"url\\":\\"https://luxiag.github.io/luxiag\\"}]}"]]},"headers":[],"git":{"createdTime":1663833246000,"updatedTime":1739109981000,"contributors":[{"name":"luxiag","email":"luxiag@qq.com","commits":5},{"name":"卢祥","email":"example@gmail.com","commits":3},{"name":"luxiang","email":"luxiag@qq.com","commits":2},{"name":"卢祥","email":"example@qq.com","commits":1}]},"readingTime":{"minutes":0.89,"words":267},"filePathRelative":"algorithm/quick-sort.md","localizedDate":"September 19, 2022","excerpt":"\\n<p>(1) 找出基线条件，这种条件必须尽可能简单。\\n(2) 不断将问题分解（或者说缩小规模），直到符合基线条件\\n将一块 1680 x 640 的图片分成方块，方块要尽可能的大\\n</p>\\n<ol>\\n<li>1680 x 640=&gt; 640x640 + 640x640 + 640x400</li>\\n<li>640x 400 =&gt; 400x 400 + 400x240</li>\\n<li>400x240 =&gt; 240x240 + 240x160</li>\\n<li>240x160 =&gt; 160x 160 + 160 x80</li>\\n<li>160x80 =&gt; 80x80 +80x80\\n适用的方块为 80x80</li>\\n</ol>","autoDesc":true}');export{m as comp,x as data};
