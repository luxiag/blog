import{_ as n,e as a,g as l,o as e}from"./app-BcLUFOMF.js";const p="/blog/assets/1122171745299754136-DOjQsv2S.png",o="/blog/assets/1122171745321537572-Bsiq3YLa.png",t="/blog/assets/1122171745321691076-D-nGanGI.png",c="/blog/assets/1122171745323376735-4g9O2PKo.png",F="/blog/assets/1122171745323392517-VzqC0xrG.png",i="/blog/assets/1122171745323770548-BQbwZkn3.png",r="/blog/assets/1122171745324528565-6uwndgIU.png",y={};function d(v,s){return e(),a("div",null,s[0]||(s[0]=[l('<p>RabbitMQ 是一个实现了 AMQP 协议的消息队列，AMQP 被定义为作为消息传递中间件的开放标准的应用层协议。它代表高级消息队列协议，具有消息定位、路由、队列、安全性和可靠性等特点。</p><p>RabbitMQ 的优点、用途等，大概是可靠性高、灵活的路由规则配置、支持分布式部署、遵守 AMQP 协议等。可以用于异步通讯、日志收集(日志收集还是 Kafka 比较好)、事件驱动架构系统、应用通讯解耦等</p><p>特点</p><ul><li><p>持多种消息传递协议、消息队列、传递确认、灵活的队列路由、多种交换类型(交换器)。</p></li><li><p>支持 Kubernetes 等分布式部署，提供多种语言的 SDK，如 Java、Go、C#。</p></li><li><p>可插入的身份验证、授权，支持 TLS 和 LDAP。</p></li><li><p>支持持续集成、操作度量和与其他企业系统集成的各种工具和插件。</p></li><li><p>提供一套用于管理和监视 RabbitMQ 的 HTTP-API、命令行工具和 UI。</p></li></ul><h2 id="为什么要用mq" tabindex="-1"><a class="header-anchor" href="#为什么要用mq"><span>为什么要用MQ</span></a></h2><ul><li>高并发的流量削峰 举个例子，假设某订单系统每秒最多能处理一万次订单，也就是最多承受的10000qps，这个处理能力应付正常时段的下单时绰绰有余，正常时段我们下单一秒后就能返回结果。但是在高峰期，如果有两万次下单操作系统是处理不了的，只能限制订单超过一万后不允许用户下单。使用消息队列做缓冲，我们可以取消这个限制，把一秒内下的订单分散成一段时间来处理，这时有些用户可能在下单十几秒后才能收到下单成功的操作，但是比不能下单的体验要好。</li></ul><figure><img src="'+p+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li>应用解耦</li></ul><p>以电商应用为例，应用中有订单系统、库存系统、物流系统、支付系统。用户创建订单后，如果耦合调用库存系统、物流系统、支付系统，任何一个子系统出了故障，都会造成下单操作异常。当转变成基于消息队列的方式后，系统间调用的问题会减少很多，比如物流系统因为发生故障，需要几分钟来修复。在这几分钟的时间里，物流系统要处理的内存被缓存在消息队列中，用户的下单操作可以正常完成。当物流系统恢复后，继续处理订单信息即可，中单用户感受不到物流系统的故障，提升系统的可用性。</p><figure><img src="'+o+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li>异步处理</li></ul><p>例如 A 调用 B，B 需要花费很长时间执行，但是 A 需要知道 B 什么时候可以执行完，以前一般有两种方式，A 过一段时间去调用 B 的查询 api 查询。或者 A 提供一个 callback api， B 执行完之后调用 api 通知 A 服务。这两种方式都不是很优雅，使用消息队列，可以很方便解决这个问题，A 调用 B 服务后，只需要监听 B 处理完成的消息，当 B 处理完成后，会发送一条消息给 MQ，MQ 会将此消息转发给 A 服务。</p><figure><img src="'+t+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li>分布式事务</li></ul><p>传统的方式为单体应用，支付、修改订单状态、创建物流订单三个步骤集成在一个服务中，因此这三个步骤可以放在一个jdbc事务中，要么全成功，要么全失败。而在微服务的环境下，会将三个步骤拆分成三个服务，例如：支付服务，订单服务，物流服务。三者各司其职，相互之间进行服务间调用，但这会带来分布式事务的问题，因为三个步骤操作的不是同一个数据库，导致无法使用jdbc事务管理以达到一致性。而 MQ 能够很好的帮我们解决分布式事务的问题，有一个比较容易理解的方案，就是二次提交。基于MQ的特点，MQ作为二次提交的中间节点，负责存储请求数据，在失败的情况可以进行多次尝试，或者基于MQ中的队列数据进行回滚操作，是一个既能保证性能，又能保证业务一致性的方案</p><figure><img src="'+c+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li>数据分发</li></ul><p>MQ 具有发布订阅机制，不仅仅是简单的上游和下游一对一的关系，还有支持一对多或者广播的模式，并且都可以根据规则选择分发的对象。 <img src="'+F+'" alt="" loading="lazy"></p><h2 id="rabbitmq的架构" tabindex="-1"><a class="header-anchor" href="#rabbitmq的架构"><span>RabbitMQ的架构</span></a></h2><h3 id="工作原理" tabindex="-1"><a class="header-anchor" href="#工作原理"><span>工作原理</span></a></h3><figure><img src="'+i+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>生产者（Producer） 生产者是发送消息的客户端应用。在图中，有两个生产者，它们通过各自的连接（Connection）和通道（Channel）与 RabbitMQ 服务器进行通信。</p><p>连接（Connection） 连接是生产者和消费者与 RabbitMQ 服务器之间的 TCP 连接。一个客户端可以建立多个连接，每个连接可以包含多个通道。</p><p>通道（Channel） 通道是连接中的一个虚拟通道，用于在客户端和服务器之间发送和接收消息。一个连接可以包含多个通道，每个通道可以独立发送和接收消息。通道是线程安全的，可以提高通信效率。</p><p>交换器（Exchange） 交换器是 RabbitMQ 中的一个核心组件，它接收生产者发送的消息，并根据一定的规则将消息路由到一个或多个队列中。图中有两个交换器，每个交换器可以连接到多个队列。</p><p>队列（Queue） 队列是存储消息的容器，消息在队列中等待被消费者消费。图中有多个队列，每个队列可以接收来自一个或多个交换器的消息。</p><p>绑定（Binding） 绑定是交换器和队列之间的连接关系，它定义了消息如何从交换器路由到队列。绑定时，可以指定路由键（Routing Key）或主题模式（Binding Key），具体取决于交换器的类型。</p><p>消费者（Consumer） 消费者是接收消息的客户端应用。消费者通过各自的连接和通道从队列中获取消息并处理。图中有两个消费者，它们通过各自的连接和通道与 RabbitMQ 服务器进行通信。</p><p>工作流程</p><ol><li>生产者通过通道将消息发送到交换器。</li><li>交换器根据绑定关系将消息路由到一个或多个队列。</li><li>消费者通过通道从队列中获取消息并处理。</li></ol><h3 id="核心概念" tabindex="-1"><a class="header-anchor" href="#核心概念"><span>核心概念</span></a></h3><figure><img src="'+r+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li>生产者：产生数据发送消息的程序是生产者。</li><li>交换机：交换机是 RabbitMQ 非常重要的一个部件，一方面它接收来自生产者的消息，另一方面它将消息推送到队列中。交换机必须确切知道如何处理它接收到的消息，是将这些消息推送到特定队列还是推送到多个队列，亦或者是把消息丢弃，这个是由交换机类型决定的。- 队列：队列是 RabbitMQ 内部使用的一种数据结构，尽管消息流经 RabbitMQ 和应用程序，但它们只能存储在队列中。队列仅受主机的内存和磁盘限制的约束，本质上是一个大的消息缓冲区。许多生产者可以将消息发送到一个队列，许多消费者可以尝试从一个队列接收数据。</li><li>消费者：消费与接收具有相似的含义。消费者大多时候是一个等待接收消息的程序。请注意生产者，消费者和消息中间件很多时候并不在同一机器上。同一个应用程序既可以是生产者又是可以是消费者。</li></ul><h2 id="常用api" tabindex="-1"><a class="header-anchor" href="#常用api"><span>常用API</span></a></h2><table><thead><tr><th>用法</th><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>创建连接</td><td>ConnectionFactory.CreateConnection()</td><td>建立 TCP 连接</td></tr><tr><td>创建通道</td><td>IConnection.CreateModel()</td><td>建立操作通道</td></tr><tr><td>声明队列</td><td>IModel.QueueDeclare()</td><td>确保队列存在</td></tr><tr><td>发送消息</td><td>IModel.BasicPublish()</td><td>发布消息到队列或交换机</td></tr><tr><td>消费消息</td><td>IModel.BasicConsume()</td><td>注册消费者</td></tr><tr><td>确认消息</td><td>IModel.BasicAck()</td><td>手动确认（可选）</td></tr></tbody></table><div class="language-csharp line-numbers-mode" data-highlighter="shiki" data-ext="csharp" data-title="csharp" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">public</span><span style="color:#FF79C6;"> class</span><span style="color:#8BE9FD;"> RabbitMqOptions</span></span>
<span class="line"><span style="color:#F8F8F2;">{</span></span>
<span class="line"><span style="color:#FF79C6;">    public</span><span style="color:#FF79C6;"> string</span><span style="color:#F8F8F2;"> HostName { </span><span style="color:#FF79C6;">get</span><span style="color:#F8F8F2;">; </span><span style="color:#FF79C6;">set</span><span style="color:#F8F8F2;">; } </span><span style="color:#FF79C6;">=</span><span style="color:#E9F284;"> &quot;</span><span style="color:#F1FA8C;">localhost</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#FF79C6;">    public</span><span style="color:#FF79C6;"> string</span><span style="color:#F8F8F2;"> UserName { </span><span style="color:#FF79C6;">get</span><span style="color:#F8F8F2;">; </span><span style="color:#FF79C6;">set</span><span style="color:#F8F8F2;">; } </span><span style="color:#FF79C6;">=</span><span style="color:#E9F284;"> &quot;</span><span style="color:#F1FA8C;">guest</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#FF79C6;">    public</span><span style="color:#FF79C6;"> string</span><span style="color:#F8F8F2;"> Password { </span><span style="color:#FF79C6;">get</span><span style="color:#F8F8F2;">; </span><span style="color:#FF79C6;">set</span><span style="color:#F8F8F2;">; } </span><span style="color:#FF79C6;">=</span><span style="color:#E9F284;"> &quot;</span><span style="color:#F1FA8C;">guest</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#FF79C6;">    public</span><span style="color:#FF79C6;"> string</span><span style="color:#F8F8F2;"> QueueName { </span><span style="color:#FF79C6;">get</span><span style="color:#F8F8F2;">; </span><span style="color:#FF79C6;">set</span><span style="color:#F8F8F2;">; } </span><span style="color:#FF79C6;">=</span><span style="color:#E9F284;"> &quot;</span><span style="color:#F1FA8C;">order_created</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">public</span><span style="color:#FF79C6;"> interface</span><span style="color:#8BE9FD;font-style:italic;"> IRabbitMqHelper</span></span>
<span class="line"><span style="color:#F8F8F2;">{</span></span>
<span class="line"><span style="color:#FF79C6;">    void</span><span style="color:#50FA7B;"> Publish</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#FFB86C;font-style:italic;">T</span><span style="color:#F8F8F2;">&gt;(</span><span style="color:#8BE9FD;font-style:italic;">T</span><span style="color:#FFB86C;font-style:italic;"> message</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#FF79C6;">    void</span><span style="color:#50FA7B;"> Consume</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#FFB86C;font-style:italic;">T</span><span style="color:#F8F8F2;">&gt;(</span><span style="color:#8BE9FD;font-style:italic;">Action</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#8BE9FD;font-style:italic;">T</span><span style="color:#F8F8F2;">&gt; </span><span style="color:#FFB86C;font-style:italic;">onMessageReceived</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">public</span><span style="color:#FF79C6;"> class</span><span style="color:#8BE9FD;"> RabbitMqHelper</span><span style="color:#F8F8F2;"> : </span><span style="color:#8BE9FD;font-style:italic;">IRabbitMqHelper</span><span style="color:#F8F8F2;">, </span><span style="color:#8BE9FD;font-style:italic;">IDisposable</span></span>
<span class="line"><span style="color:#F8F8F2;">{</span></span>
<span class="line"><span style="color:#FF79C6;">    private</span><span style="color:#FF79C6;"> readonly</span><span style="color:#8BE9FD;font-style:italic;"> IConnection</span><span style="color:#F8F8F2;"> _connection;</span></span>
<span class="line"><span style="color:#FF79C6;">    private</span><span style="color:#FF79C6;"> readonly</span><span style="color:#8BE9FD;font-style:italic;"> IModel</span><span style="color:#F8F8F2;"> _channel;</span></span>
<span class="line"><span style="color:#FF79C6;">    private</span><span style="color:#FF79C6;"> readonly</span><span style="color:#8BE9FD;font-style:italic;"> RabbitMqOptions</span><span style="color:#F8F8F2;"> _options;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">    public</span><span style="color:#50FA7B;"> RabbitMqHelper</span><span style="color:#F8F8F2;">(</span><span style="color:#8BE9FD;font-style:italic;">IConfiguration</span><span style="color:#FFB86C;font-style:italic;"> config</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">    {</span></span>
<span class="line"><span style="color:#F8F8F2;">        _options </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> config.</span><span style="color:#50FA7B;">GetSection</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">RabbitMQ</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">).</span><span style="color:#50FA7B;">Get</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#8BE9FD;font-style:italic;">RabbitMqOptions</span><span style="color:#F8F8F2;">&gt;() </span><span style="color:#FF79C6;">??</span><span style="color:#FF79C6;"> new</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">        var</span><span style="color:#F8F8F2;"> factory </span><span style="color:#FF79C6;">=</span><span style="color:#FF79C6;"> new</span><span style="color:#8BE9FD;font-style:italic;"> ConnectionFactory</span></span>
<span class="line"><span style="color:#F8F8F2;">        {</span></span>
<span class="line"><span style="color:#F8F8F2;">            HostName </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> _options.HostName,</span></span>
<span class="line"><span style="color:#F8F8F2;">            UserName </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> _options.UserName,</span></span>
<span class="line"><span style="color:#F8F8F2;">            Password </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> _options.Password</span></span>
<span class="line"><span style="color:#F8F8F2;">        };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">        _connection </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> factory.</span><span style="color:#50FA7B;">CreateConnection</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#F8F8F2;">        _channel </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> _connection.</span><span style="color:#50FA7B;">CreateModel</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">        _channel.</span><span style="color:#50FA7B;">QueueDeclare</span><span style="color:#F8F8F2;">(</span></span>
<span class="line"><span style="color:#FFB86C;font-style:italic;">            queue</span><span style="color:#F8F8F2;">: _options.QueueName,</span></span>
<span class="line"><span style="color:#FFB86C;font-style:italic;">            durable</span><span style="color:#F8F8F2;">: </span><span style="color:#BD93F9;">true</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#FFB86C;font-style:italic;">            exclusive</span><span style="color:#F8F8F2;">: </span><span style="color:#BD93F9;">false</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#FFB86C;font-style:italic;">            autoDelete</span><span style="color:#F8F8F2;">: </span><span style="color:#BD93F9;">false</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#FFB86C;font-style:italic;">            arguments</span><span style="color:#F8F8F2;">: </span><span style="color:#BD93F9;">null</span></span>
<span class="line"><span style="color:#F8F8F2;">        );</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">    public</span><span style="color:#FF79C6;"> void</span><span style="color:#50FA7B;"> Publish</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#FFB86C;font-style:italic;">T</span><span style="color:#F8F8F2;">&gt;(</span><span style="color:#8BE9FD;font-style:italic;">T</span><span style="color:#FFB86C;font-style:italic;"> message</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">    {</span></span>
<span class="line"><span style="color:#FF79C6;">        var</span><span style="color:#F8F8F2;"> body </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> Encoding.UTF8.</span><span style="color:#50FA7B;">GetBytes</span><span style="color:#F8F8F2;">(JsonSerializer.</span><span style="color:#50FA7B;">Serialize</span><span style="color:#F8F8F2;">(message));</span></span>
<span class="line"><span style="color:#F8F8F2;">        _channel.</span><span style="color:#50FA7B;">BasicPublish</span><span style="color:#F8F8F2;">(</span></span>
<span class="line"><span style="color:#FFB86C;font-style:italic;">            exchange</span><span style="color:#F8F8F2;">: </span><span style="color:#E9F284;">&quot;&quot;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#FFB86C;font-style:italic;">            routingKey</span><span style="color:#F8F8F2;">: _options.QueueName,</span></span>
<span class="line"><span style="color:#FFB86C;font-style:italic;">            basicProperties</span><span style="color:#F8F8F2;">: </span><span style="color:#BD93F9;">null</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#FFB86C;font-style:italic;">            body</span><span style="color:#F8F8F2;">: body</span></span>
<span class="line"><span style="color:#F8F8F2;">        );</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">    public</span><span style="color:#FF79C6;"> void</span><span style="color:#50FA7B;"> Consume</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#FFB86C;font-style:italic;">T</span><span style="color:#F8F8F2;">&gt;(</span><span style="color:#8BE9FD;font-style:italic;">Action</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#8BE9FD;font-style:italic;">T</span><span style="color:#F8F8F2;">&gt; </span><span style="color:#FFB86C;font-style:italic;">onMessageReceived</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">    {</span></span>
<span class="line"><span style="color:#FF79C6;">        var</span><span style="color:#F8F8F2;"> consumer </span><span style="color:#FF79C6;">=</span><span style="color:#FF79C6;"> new</span><span style="color:#8BE9FD;font-style:italic;"> EventingBasicConsumer</span><span style="color:#F8F8F2;">(_channel);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">        consumer.Received </span><span style="color:#FF79C6;">+=</span><span style="color:#F8F8F2;"> (</span><span style="color:#FFB86C;font-style:italic;">model</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">ea</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">=&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">        {</span></span>
<span class="line"><span style="color:#FF79C6;">            var</span><span style="color:#F8F8F2;"> json </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> Encoding.UTF8.</span><span style="color:#50FA7B;">GetString</span><span style="color:#F8F8F2;">(ea.Body.</span><span style="color:#50FA7B;">ToArray</span><span style="color:#F8F8F2;">());</span></span>
<span class="line"><span style="color:#FF79C6;">            var</span><span style="color:#F8F8F2;"> obj </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> JsonSerializer.</span><span style="color:#50FA7B;">Deserialize</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#8BE9FD;font-style:italic;">T</span><span style="color:#F8F8F2;">&gt;(json);</span></span>
<span class="line"><span style="color:#FF79C6;">            if</span><span style="color:#F8F8F2;"> (obj </span><span style="color:#FF79C6;">!=</span><span style="color:#BD93F9;"> null</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#50FA7B;">                onMessageReceived</span><span style="color:#F8F8F2;">(obj);</span></span>
<span class="line"><span style="color:#F8F8F2;">        };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">        _channel.</span><span style="color:#50FA7B;">BasicConsume</span><span style="color:#F8F8F2;">(</span></span>
<span class="line"><span style="color:#FFB86C;font-style:italic;">            queue</span><span style="color:#F8F8F2;">: _options.QueueName,</span></span>
<span class="line"><span style="color:#FFB86C;font-style:italic;">            autoAck</span><span style="color:#F8F8F2;">: </span><span style="color:#BD93F9;">true</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#FFB86C;font-style:italic;">            consumer</span><span style="color:#F8F8F2;">: consumer</span></span>
<span class="line"><span style="color:#F8F8F2;">        );</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">    public</span><span style="color:#FF79C6;"> void</span><span style="color:#50FA7B;"> Dispose</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"><span style="color:#F8F8F2;">    {</span></span>
<span class="line"><span style="color:#F8F8F2;">        _channel</span><span style="color:#FF79C6;">?</span><span style="color:#F8F8F2;">.</span><span style="color:#50FA7B;">Close</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#F8F8F2;">        _connection</span><span style="color:#FF79C6;">?</span><span style="color:#F8F8F2;">.</span><span style="color:#50FA7B;">Close</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="示例场景-订单系统-→-支付系统" tabindex="-1"><a class="header-anchor" href="#示例场景-订单系统-→-支付系统"><span>示例场景：订单系统 → 支付系统</span></a></h2><ul><li><p>Order.API：用户创建订单，发送消息到 order_created 队列。</p></li><li><p>Payment.API：监听 order_created 队列，当检测到有新订单创建时，模拟自动发起支付。</p></li></ul><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#50FA7B;">RabbitMqDemo/</span></span>
<span class="line"><span style="color:#50FA7B;">├──</span><span style="color:#F1FA8C;"> Order.API/</span><span style="color:#6272A4;">        # 订单服务：Controller 中发送消息</span></span>
<span class="line"><span style="color:#50FA7B;">├──</span><span style="color:#F1FA8C;"> Payment.API/</span><span style="color:#6272A4;">      # 支付服务：Controller 启动监听或调用消费者</span></span>
<span class="line"><span style="color:#50FA7B;">├──</span><span style="color:#F1FA8C;"> Shared/</span><span style="color:#6272A4;">           # 共享模型：OrderMessage</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="order-api" tabindex="-1"><a class="header-anchor" href="#order-api"><span>Order.API</span></a></h3><p><code>Shared/Models/OrderMessage.cs</code></p><div class="language-csharp line-numbers-mode" data-highlighter="shiki" data-ext="csharp" data-title="csharp" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">namespace</span><span style="color:#8BE9FD;font-style:italic;"> Shared</span><span style="color:#F8F8F2;">.</span><span style="color:#8BE9FD;font-style:italic;">Models</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">public</span><span style="color:#FF79C6;"> class</span><span style="color:#8BE9FD;"> OrderMessage</span></span>
<span class="line"><span style="color:#F8F8F2;">{</span></span>
<span class="line"><span style="color:#FF79C6;">    public</span><span style="color:#FF79C6;"> string</span><span style="color:#F8F8F2;"> OrderId { </span><span style="color:#FF79C6;">get</span><span style="color:#F8F8F2;">; </span><span style="color:#FF79C6;">set</span><span style="color:#F8F8F2;">; } </span><span style="color:#FF79C6;">=</span><span style="color:#FF79C6;"> string</span><span style="color:#F8F8F2;">.Empty;</span></span>
<span class="line"><span style="color:#FF79C6;">    public</span><span style="color:#FF79C6;"> decimal</span><span style="color:#F8F8F2;"> Amount { </span><span style="color:#FF79C6;">get</span><span style="color:#F8F8F2;">; </span><span style="color:#FF79C6;">set</span><span style="color:#F8F8F2;">; }</span></span>
<span class="line"><span style="color:#FF79C6;">    public</span><span style="color:#8BE9FD;font-style:italic;"> DateTime</span><span style="color:#F8F8F2;"> CreatedTime { </span><span style="color:#FF79C6;">get</span><span style="color:#F8F8F2;">; </span><span style="color:#FF79C6;">set</span><span style="color:#F8F8F2;">; }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>Order.API/Services/RabbitMqService.cs</code></p><div class="language-csharp line-numbers-mode" data-highlighter="shiki" data-ext="csharp" data-title="csharp" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"></span>
<span class="line"><span style="color:#FF79C6;">using</span><span style="color:#8BE9FD;font-style:italic;"> RabbitMQ</span><span style="color:#F8F8F2;">.</span><span style="color:#8BE9FD;font-style:italic;">Client</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#FF79C6;">using</span><span style="color:#8BE9FD;font-style:italic;"> Shared</span><span style="color:#F8F8F2;">.</span><span style="color:#8BE9FD;font-style:italic;">Models</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#FF79C6;">using</span><span style="color:#8BE9FD;font-style:italic;"> System</span><span style="color:#F8F8F2;">.</span><span style="color:#8BE9FD;font-style:italic;">Text</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#FF79C6;">using</span><span style="color:#8BE9FD;font-style:italic;"> System</span><span style="color:#F8F8F2;">.</span><span style="color:#8BE9FD;font-style:italic;">Text</span><span style="color:#F8F8F2;">.</span><span style="color:#8BE9FD;font-style:italic;">Json</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">namespace</span><span style="color:#8BE9FD;font-style:italic;"> Order</span><span style="color:#F8F8F2;">.</span><span style="color:#8BE9FD;font-style:italic;">API</span><span style="color:#F8F8F2;">.</span><span style="color:#8BE9FD;font-style:italic;">Services</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">public</span><span style="color:#FF79C6;"> interface</span><span style="color:#8BE9FD;font-style:italic;"> IRabbitMqService</span></span>
<span class="line"><span style="color:#F8F8F2;">{</span></span>
<span class="line"><span style="color:#FF79C6;">    void</span><span style="color:#50FA7B;"> PublishOrder</span><span style="color:#F8F8F2;">(</span><span style="color:#8BE9FD;font-style:italic;">OrderMessage</span><span style="color:#FFB86C;font-style:italic;"> message</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">public</span><span style="color:#FF79C6;"> class</span><span style="color:#8BE9FD;"> RabbitMqService</span><span style="color:#F8F8F2;"> : </span><span style="color:#8BE9FD;font-style:italic;">IRabbitMqService</span></span>
<span class="line"><span style="color:#F8F8F2;">{</span></span>
<span class="line"><span style="color:#FF79C6;">    private</span><span style="color:#FF79C6;"> readonly</span><span style="color:#8BE9FD;font-style:italic;"> IConfiguration</span><span style="color:#F8F8F2;"> _config;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">    public</span><span style="color:#50FA7B;"> RabbitMqService</span><span style="color:#F8F8F2;">(</span><span style="color:#8BE9FD;font-style:italic;">IConfiguration</span><span style="color:#FFB86C;font-style:italic;"> config</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">    {</span></span>
<span class="line"><span style="color:#F8F8F2;">        _config </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> config;</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">    public</span><span style="color:#FF79C6;"> void</span><span style="color:#50FA7B;"> PublishOrder</span><span style="color:#F8F8F2;">(</span><span style="color:#8BE9FD;font-style:italic;">OrderMessage</span><span style="color:#FFB86C;font-style:italic;"> message</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">    {</span></span>
<span class="line"><span style="color:#FF79C6;">        var</span><span style="color:#F8F8F2;"> factory </span><span style="color:#FF79C6;">=</span><span style="color:#FF79C6;"> new</span><span style="color:#8BE9FD;font-style:italic;"> ConnectionFactory</span></span>
<span class="line"><span style="color:#F8F8F2;">        {</span></span>
<span class="line"><span style="color:#F8F8F2;">            HostName </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> _config[</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">RabbitMQ:HostName</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">] </span><span style="color:#FF79C6;">??</span><span style="color:#E9F284;"> &quot;</span><span style="color:#F1FA8C;">localhost</span><span style="color:#E9F284;">&quot;</span></span>
<span class="line"><span style="color:#F8F8F2;">        };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">        using</span><span style="color:#FF79C6;"> var</span><span style="color:#F8F8F2;"> connection </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> factory.</span><span style="color:#50FA7B;">CreateConnection</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#FF79C6;">        using</span><span style="color:#FF79C6;"> var</span><span style="color:#F8F8F2;"> channel </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> connection.</span><span style="color:#50FA7B;">CreateModel</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">        channel.</span><span style="color:#50FA7B;">QueueDeclare</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">queue</span><span style="color:#F8F8F2;">: </span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">order_created</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#FFB86C;font-style:italic;">                             durable</span><span style="color:#F8F8F2;">: </span><span style="color:#BD93F9;">true</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#FFB86C;font-style:italic;">                             exclusive</span><span style="color:#F8F8F2;">: </span><span style="color:#BD93F9;">false</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#FFB86C;font-style:italic;">                             autoDelete</span><span style="color:#F8F8F2;">: </span><span style="color:#BD93F9;">false</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#FFB86C;font-style:italic;">                             arguments</span><span style="color:#F8F8F2;">: </span><span style="color:#BD93F9;">null</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">        var</span><span style="color:#F8F8F2;"> body </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> Encoding.UTF8.</span><span style="color:#50FA7B;">GetBytes</span><span style="color:#F8F8F2;">(JsonSerializer.</span><span style="color:#50FA7B;">Serialize</span><span style="color:#F8F8F2;">(message));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">        channel.</span><span style="color:#50FA7B;">BasicPublish</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">exchange</span><span style="color:#F8F8F2;">: </span><span style="color:#E9F284;">&quot;&quot;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#FFB86C;font-style:italic;">                             routingKey</span><span style="color:#F8F8F2;">: </span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">order_created</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#FFB86C;font-style:italic;">                             basicProperties</span><span style="color:#F8F8F2;">: </span><span style="color:#BD93F9;">null</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#FFB86C;font-style:italic;">                             body</span><span style="color:#F8F8F2;">: body);</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>Order.API/Program.cs</code></p><div class="language-csharp line-numbers-mode" data-highlighter="shiki" data-ext="csharp" data-title="csharp" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">var</span><span style="color:#F8F8F2;"> app </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> builder.</span><span style="color:#50FA7B;">Build</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#F8F8F2;">builder.Services.</span><span style="color:#50FA7B;">AddScoped</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#8BE9FD;font-style:italic;">IRabbitMqService</span><span style="color:#F8F8F2;">, </span><span style="color:#8BE9FD;font-style:italic;">RabbitMqService</span><span style="color:#F8F8F2;">&gt;();</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p><code>Order.API/Controllers/OrderController.cs</code></p><div class="language-csharp line-numbers-mode" data-highlighter="shiki" data-ext="csharp" data-title="csharp" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"></span>
<span class="line"><span style="color:#FF79C6;">using</span><span style="color:#8BE9FD;font-style:italic;"> Microsoft</span><span style="color:#F8F8F2;">.</span><span style="color:#8BE9FD;font-style:italic;">AspNetCore</span><span style="color:#F8F8F2;">.</span><span style="color:#8BE9FD;font-style:italic;">Mvc</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#FF79C6;">using</span><span style="color:#8BE9FD;font-style:italic;"> Order</span><span style="color:#F8F8F2;">.</span><span style="color:#8BE9FD;font-style:italic;">API</span><span style="color:#F8F8F2;">.</span><span style="color:#8BE9FD;font-style:italic;">Services</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#FF79C6;">using</span><span style="color:#8BE9FD;font-style:italic;"> Shared</span><span style="color:#F8F8F2;">.</span><span style="color:#8BE9FD;font-style:italic;">Models</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">namespace</span><span style="color:#8BE9FD;font-style:italic;"> Order</span><span style="color:#F8F8F2;">.</span><span style="color:#8BE9FD;font-style:italic;">API</span><span style="color:#F8F8F2;">.</span><span style="color:#8BE9FD;font-style:italic;">Controllers</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">[</span><span style="color:#8BE9FD;font-style:italic;">ApiController</span><span style="color:#F8F8F2;">]</span></span>
<span class="line"><span style="color:#F8F8F2;">[</span><span style="color:#8BE9FD;font-style:italic;">Route</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">api/[controller]</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">)]</span></span>
<span class="line"><span style="color:#FF79C6;">public</span><span style="color:#FF79C6;"> class</span><span style="color:#8BE9FD;"> OrderController</span><span style="color:#F8F8F2;"> : </span><span style="color:#8BE9FD;font-style:italic;">ControllerBase</span></span>
<span class="line"><span style="color:#F8F8F2;">{</span></span>
<span class="line"><span style="color:#FF79C6;">    private</span><span style="color:#FF79C6;"> readonly</span><span style="color:#8BE9FD;font-style:italic;"> IRabbitMqService</span><span style="color:#F8F8F2;"> _rabbitMqService;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">    public</span><span style="color:#50FA7B;"> OrderController</span><span style="color:#F8F8F2;">(</span><span style="color:#8BE9FD;font-style:italic;">IRabbitMqService</span><span style="color:#FFB86C;font-style:italic;"> rabbitMqService</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">    {</span></span>
<span class="line"><span style="color:#F8F8F2;">        _rabbitMqService </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> rabbitMqService;</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">    [</span><span style="color:#8BE9FD;font-style:italic;">HttpPost</span><span style="color:#F8F8F2;">]</span></span>
<span class="line"><span style="color:#FF79C6;">    public</span><span style="color:#8BE9FD;font-style:italic;"> IActionResult</span><span style="color:#50FA7B;"> CreateOrder</span><span style="color:#F8F8F2;">([</span><span style="color:#8BE9FD;font-style:italic;">FromBody</span><span style="color:#F8F8F2;">] </span><span style="color:#8BE9FD;font-style:italic;">OrderMessage</span><span style="color:#FFB86C;font-style:italic;"> order</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">    {</span></span>
<span class="line"><span style="color:#F8F8F2;">        order.CreatedTime </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> DateTime.UtcNow;</span></span>
<span class="line"><span style="color:#F8F8F2;">        _rabbitMqService.</span><span style="color:#50FA7B;">PublishOrder</span><span style="color:#F8F8F2;">(order);</span></span>
<span class="line"><span style="color:#FF79C6;">        return</span><span style="color:#50FA7B;"> Ok</span><span style="color:#F8F8F2;">(</span><span style="color:#FF79C6;">new</span><span style="color:#F8F8F2;"> { Message </span><span style="color:#FF79C6;">=</span><span style="color:#E9F284;"> &quot;</span><span style="color:#F1FA8C;">订单已创建并发送到消息队列</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">, Order </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> order });</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="payment-api" tabindex="-1"><a class="header-anchor" href="#payment-api"><span>Payment.API</span></a></h3><p><strong>Controller监听</strong><code>Payment.API/Controllers/PaymentController.cs</code></p><div class="language-csharp line-numbers-mode" data-highlighter="shiki" data-ext="csharp" data-title="csharp" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">using</span><span style="color:#8BE9FD;font-style:italic;"> Microsoft</span><span style="color:#F8F8F2;">.</span><span style="color:#8BE9FD;font-style:italic;">AspNetCore</span><span style="color:#F8F8F2;">.</span><span style="color:#8BE9FD;font-style:italic;">Mvc</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#FF79C6;">using</span><span style="color:#8BE9FD;font-style:italic;"> Payment</span><span style="color:#F8F8F2;">.</span><span style="color:#8BE9FD;font-style:italic;">API</span><span style="color:#F8F8F2;">.</span><span style="color:#8BE9FD;font-style:italic;">Services</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">namespace</span><span style="color:#8BE9FD;font-style:italic;"> Payment</span><span style="color:#F8F8F2;">.</span><span style="color:#8BE9FD;font-style:italic;">API</span><span style="color:#F8F8F2;">.</span><span style="color:#8BE9FD;font-style:italic;">Controllers</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">[</span><span style="color:#8BE9FD;font-style:italic;">ApiController</span><span style="color:#F8F8F2;">]</span></span>
<span class="line"><span style="color:#F8F8F2;">[</span><span style="color:#8BE9FD;font-style:italic;">Route</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">api/[controller]</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">)]</span></span>
<span class="line"><span style="color:#FF79C6;">public</span><span style="color:#FF79C6;"> class</span><span style="color:#8BE9FD;"> PaymentController</span><span style="color:#F8F8F2;"> : </span><span style="color:#8BE9FD;font-style:italic;">ControllerBase</span></span>
<span class="line"><span style="color:#F8F8F2;">{</span></span>
<span class="line"><span style="color:#FF79C6;">    private</span><span style="color:#FF79C6;"> readonly</span><span style="color:#8BE9FD;font-style:italic;"> OrderConsumerService</span><span style="color:#F8F8F2;"> _consumer;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">    public</span><span style="color:#50FA7B;"> PaymentController</span><span style="color:#F8F8F2;">(</span><span style="color:#8BE9FD;font-style:italic;">OrderConsumerService</span><span style="color:#FFB86C;font-style:italic;"> consumer</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">    {</span></span>
<span class="line"><span style="color:#F8F8F2;">        _consumer </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> consumer;</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">    [</span><span style="color:#8BE9FD;font-style:italic;">HttpGet</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">listen</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">)]</span></span>
<span class="line"><span style="color:#FF79C6;">    public</span><span style="color:#8BE9FD;font-style:italic;"> IActionResult</span><span style="color:#50FA7B;"> Listen</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"><span style="color:#F8F8F2;">    {</span></span>
<span class="line"><span style="color:#F8F8F2;">        _consumer.</span><span style="color:#50FA7B;">Start</span><span style="color:#F8F8F2;">(); </span><span style="color:#6272A4;">// 启动 RabbitMQ 消息监听</span></span>
<span class="line"><span style="color:#FF79C6;">        return</span><span style="color:#50FA7B;"> Ok</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">支付服务已开始监听订单队列...</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>BackgroundService 实现后台监听</strong><code>Payment.API/Services/OrderConsumerService.cs</code></p><div class="language-csharp line-numbers-mode" data-highlighter="shiki" data-ext="csharp" data-title="csharp" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">using</span><span style="color:#8BE9FD;font-style:italic;"> RabbitMQ</span><span style="color:#F8F8F2;">.</span><span style="color:#8BE9FD;font-style:italic;">Client</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#FF79C6;">using</span><span style="color:#8BE9FD;font-style:italic;"> RabbitMQ</span><span style="color:#F8F8F2;">.</span><span style="color:#8BE9FD;font-style:italic;">Client</span><span style="color:#F8F8F2;">.</span><span style="color:#8BE9FD;font-style:italic;">Events</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#FF79C6;">using</span><span style="color:#8BE9FD;font-style:italic;"> Shared</span><span style="color:#F8F8F2;">.</span><span style="color:#8BE9FD;font-style:italic;">Models</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#FF79C6;">using</span><span style="color:#8BE9FD;font-style:italic;"> System</span><span style="color:#F8F8F2;">.</span><span style="color:#8BE9FD;font-style:italic;">Text</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#FF79C6;">using</span><span style="color:#8BE9FD;font-style:italic;"> System</span><span style="color:#F8F8F2;">.</span><span style="color:#8BE9FD;font-style:italic;">Text</span><span style="color:#F8F8F2;">.</span><span style="color:#8BE9FD;font-style:italic;">Json</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">namespace</span><span style="color:#8BE9FD;font-style:italic;"> Payment</span><span style="color:#F8F8F2;">.</span><span style="color:#8BE9FD;font-style:italic;">API</span><span style="color:#F8F8F2;">.</span><span style="color:#8BE9FD;font-style:italic;">Services</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">public</span><span style="color:#FF79C6;"> class</span><span style="color:#8BE9FD;"> OrderConsumerBackgroundService</span><span style="color:#F8F8F2;"> : </span><span style="color:#8BE9FD;font-style:italic;">BackgroundService</span></span>
<span class="line"><span style="color:#F8F8F2;">{</span></span>
<span class="line"><span style="color:#FF79C6;">    private</span><span style="color:#FF79C6;"> readonly</span><span style="color:#8BE9FD;font-style:italic;"> IConfiguration</span><span style="color:#F8F8F2;"> _config;</span></span>
<span class="line"><span style="color:#FF79C6;">    private</span><span style="color:#FF79C6;"> readonly</span><span style="color:#8BE9FD;font-style:italic;"> ILogger</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#8BE9FD;font-style:italic;">OrderConsumerBackgroundService</span><span style="color:#F8F8F2;">&gt; _logger;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">    public</span><span style="color:#50FA7B;"> OrderConsumerBackgroundService</span><span style="color:#F8F8F2;">(</span><span style="color:#8BE9FD;font-style:italic;">IConfiguration</span><span style="color:#FFB86C;font-style:italic;"> config</span><span style="color:#F8F8F2;">, </span><span style="color:#8BE9FD;font-style:italic;">ILogger</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#8BE9FD;font-style:italic;">OrderConsumerBackgroundService</span><span style="color:#F8F8F2;">&gt; </span><span style="color:#FFB86C;font-style:italic;">logger</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">    {</span></span>
<span class="line"><span style="color:#F8F8F2;">        _config </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> config;</span></span>
<span class="line"><span style="color:#F8F8F2;">        _logger </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> logger;</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">    protected</span><span style="color:#FF79C6;"> override</span><span style="color:#8BE9FD;font-style:italic;"> Task</span><span style="color:#50FA7B;"> ExecuteAsync</span><span style="color:#F8F8F2;">(</span><span style="color:#8BE9FD;font-style:italic;">CancellationToken</span><span style="color:#FFB86C;font-style:italic;"> stoppingToken</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">    {</span></span>
<span class="line"><span style="color:#FF79C6;">        var</span><span style="color:#F8F8F2;"> factory </span><span style="color:#FF79C6;">=</span><span style="color:#FF79C6;"> new</span><span style="color:#8BE9FD;font-style:italic;"> ConnectionFactory</span></span>
<span class="line"><span style="color:#F8F8F2;">        {</span></span>
<span class="line"><span style="color:#F8F8F2;">            HostName </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> _config[</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">RabbitMQ:HostName</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">] </span><span style="color:#FF79C6;">??</span><span style="color:#E9F284;"> &quot;</span><span style="color:#F1FA8C;">localhost</span><span style="color:#E9F284;">&quot;</span></span>
<span class="line"><span style="color:#F8F8F2;">        };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">        var</span><span style="color:#F8F8F2;"> connection </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> factory.</span><span style="color:#50FA7B;">CreateConnection</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#FF79C6;">        var</span><span style="color:#F8F8F2;"> channel </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> connection.</span><span style="color:#50FA7B;">CreateModel</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">        channel.</span><span style="color:#50FA7B;">QueueDeclare</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">queue</span><span style="color:#F8F8F2;">: </span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">order_created</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#FFB86C;font-style:italic;">                             durable</span><span style="color:#F8F8F2;">: </span><span style="color:#BD93F9;">true</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#FFB86C;font-style:italic;">                             exclusive</span><span style="color:#F8F8F2;">: </span><span style="color:#BD93F9;">false</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#FFB86C;font-style:italic;">                             autoDelete</span><span style="color:#F8F8F2;">: </span><span style="color:#BD93F9;">false</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#FFB86C;font-style:italic;">                             arguments</span><span style="color:#F8F8F2;">: </span><span style="color:#BD93F9;">null</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">        _logger.</span><span style="color:#50FA7B;">LogInformation</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">📦 BackgroundService 启动中，监听订单队列...</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">        var</span><span style="color:#F8F8F2;"> consumer </span><span style="color:#FF79C6;">=</span><span style="color:#FF79C6;"> new</span><span style="color:#8BE9FD;font-style:italic;"> EventingBasicConsumer</span><span style="color:#F8F8F2;">(channel);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">        consumer.Received </span><span style="color:#FF79C6;">+=</span><span style="color:#F8F8F2;"> (</span><span style="color:#FFB86C;font-style:italic;">model</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">ea</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">=&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">        {</span></span>
<span class="line"><span style="color:#FF79C6;">            var</span><span style="color:#F8F8F2;"> body </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> ea.Body.</span><span style="color:#50FA7B;">ToArray</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#FF79C6;">            var</span><span style="color:#F8F8F2;"> json </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> Encoding.UTF8.</span><span style="color:#50FA7B;">GetString</span><span style="color:#F8F8F2;">(body);</span></span>
<span class="line"><span style="color:#FF79C6;">            var</span><span style="color:#F8F8F2;"> order </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> JsonSerializer.</span><span style="color:#50FA7B;">Deserialize</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#8BE9FD;font-style:italic;">OrderMessage</span><span style="color:#F8F8F2;">&gt;(json);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">            _logger.</span><span style="color:#50FA7B;">LogInformation</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">$&quot;</span><span style="color:#F1FA8C;">💰 后台服务收到订单：</span><span style="color:#FF79C6;">{</span><span style="color:#F8F8F2;">order</span><span style="color:#FF79C6;">?</span><span style="color:#F1FA8C;">.</span><span style="color:#F8F8F2;">OrderId</span><span style="color:#FF79C6;">}</span><span style="color:#F1FA8C;"> 金额：</span><span style="color:#FF79C6;">{</span><span style="color:#F8F8F2;">order</span><span style="color:#FF79C6;">?</span><span style="color:#F1FA8C;">.</span><span style="color:#F8F8F2;">Amount</span><span style="color:#FF79C6;">}</span><span style="color:#F1FA8C;"> 创建时间：</span><span style="color:#FF79C6;">{</span><span style="color:#F8F8F2;">order</span><span style="color:#FF79C6;">?</span><span style="color:#F1FA8C;">.</span><span style="color:#F8F8F2;">CreatedTime</span><span style="color:#FF79C6;">}</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">        };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">        channel.</span><span style="color:#50FA7B;">BasicConsume</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">queue</span><span style="color:#F8F8F2;">: </span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">order_created</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#FFB86C;font-style:italic;">                             autoAck</span><span style="color:#F8F8F2;">: </span><span style="color:#BD93F9;">true</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#FFB86C;font-style:italic;">                             consumer</span><span style="color:#F8F8F2;">: consumer);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">        return</span><span style="color:#F8F8F2;"> Task.CompletedTask;</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>Payment.API</code></p><div class="language-csharp line-numbers-mode" data-highlighter="shiki" data-ext="csharp" data-title="csharp" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">var</span><span style="color:#F8F8F2;"> app </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> builder.</span><span style="color:#50FA7B;">Build</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#F8F8F2;"> builder.Services.</span><span style="color:#50FA7B;">AddHostedService</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#8BE9FD;font-style:italic;">OrderConsumerBackgroundService</span><span style="color:#F8F8F2;">&gt;();</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="参考" tabindex="-1"><a class="header-anchor" href="#参考"><span>参考</span></a></h2><ul><li><a href="https://blog.csdn.net/qq_45173404/article/details/121687489" target="_blank" rel="noopener noreferrer">RabbitMQ超详细学习笔记（章节清晰+通俗易懂）</a></li><li><a href="https://www.cnblogs.com/whuanle/p/17837034.html" target="_blank" rel="noopener noreferrer">万字长文：从 C# 入门学会 RabbitMQ 消息队列编程</a></li></ul><h1 id="消息丢失" tabindex="-1"><a class="header-anchor" href="#消息丢失"><span>消息丢失</span></a></h1><h1 id="重复消费" tabindex="-1"><a class="header-anchor" href="#重复消费"><span>重复消费</span></a></h1>`,59)]))}const b=n(y,[["render",d],["__file","base.html.vue"]]),m=JSON.parse('{"path":"/rabbit-mq/base.html","title":"RabbitMQ 基础","lang":"en-US","frontmatter":{"title":"RabbitMQ 基础","date":"2025-03-30T00:00:00.000Z","category":["DotNet"],"type":["RabbitMQ"],"description":"RabbitMQ 是一个实现了 AMQP 协议的消息队列，AMQP 被定义为作为消息传递中间件的开放标准的应用层协议。它代表高级消息队列协议，具有消息定位、路由、队列、安全性和可靠性等特点。 RabbitMQ 的优点、用途等，大概是可靠性高、灵活的路由规则配置、支持分布式部署、遵守 AMQP 协议等。可以用于异步通讯、日志收集(日志收集还是 Kafka...","head":[["meta",{"property":"og:url","content":"https://luxiag.github.io/luxiag/blog/rabbit-mq/base.html"}],["meta",{"property":"og:title","content":"RabbitMQ 基础"}],["meta",{"property":"og:description","content":"RabbitMQ 是一个实现了 AMQP 协议的消息队列，AMQP 被定义为作为消息传递中间件的开放标准的应用层协议。它代表高级消息队列协议，具有消息定位、路由、队列、安全性和可靠性等特点。 RabbitMQ 的优点、用途等，大概是可靠性高、灵活的路由规则配置、支持分布式部署、遵守 AMQP 协议等。可以用于异步通讯、日志收集(日志收集还是 Kafka..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2025-04-23T08:18:43.000Z"}],["meta",{"property":"article:published_time","content":"2025-03-30T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-04-23T08:18:43.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"RabbitMQ 基础\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2025-03-30T00:00:00.000Z\\",\\"dateModified\\":\\"2025-04-23T08:18:43.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"luxiag\\",\\"url\\":\\"https://luxiag.github.io/luxiag\\"}]}"]]},"git":{"createdTime":1745396323000,"updatedTime":1745396323000,"contributors":[{"name":"luxiag","username":"luxiag","email":"luxiag@qq.com","commits":1,"url":"https://github.com/luxiag"}]},"readingTime":{"minutes":9.23,"words":2770},"filePathRelative":"rabbit-mq/base.md","localizedDate":"March 30, 2025","excerpt":"<p>RabbitMQ 是一个实现了 AMQP 协议的消息队列，AMQP 被定义为作为消息传递中间件的开放标准的应用层协议。它代表高级消息队列协议，具有消息定位、路由、队列、安全性和可靠性等特点。</p>","autoDesc":true}');export{b as comp,m as data};
