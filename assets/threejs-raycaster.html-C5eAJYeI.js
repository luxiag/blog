import{l as W,m as z,aI as G,A as S,p as M,W as V,aN as O,b as N,aO as pd,i as rd,aP as vd,J as dd,aQ as Fd,q as id,aH as ad,z as sd,aL as ed,aA as nd,r as yd,s as md}from"./three.module-BzA_QsZm.js";import{O as I}from"./OrbitControls-DTSS7XTZ.js";import{C as H,a as td}from"./CSS2DRenderer-B0C5tV4z.js";import{_ as ud,h as P,i as cd,c as bd,b as X,d as B,e as hd,o as Cd}from"./app-C453UOYb.js";const Bd={__name:"threejs-raycaster.html",setup(ld,{expose:t}){t();const A=P(),_=()=>{const i=new W,c=new z(75,2,.1,100);c.position.set(0,0,20),i.add(c);const f=new G(1,1,1),n=new S({wireframe:!0}),s=new S({color:"#ff0000"});let p=[];for(let y=-5;y<5;y++)for(let r=-5;r<5;r++)for(let v=-5;v<5;v++){const g=new M(f,n);g.position.set(y,r,v),i.add(g),p.push(g)}const d=new V;console.log(A.value.offsetWidth,"width"),d.setSize(A.value.offsetWidth,A.value.offsetWidth/2),d.shadowMap.enabled=!0,d.physicallyCorrectLights=!0,A.value.appendChild(d.domElement);const e=new I(c,d.domElement);e.enableDamping=!0;const u=new O,w=new N;new pd(5),A.value.addEventListener("pointermove",y=>{w.x=y.clientX/window.innerWidth*2-1,w.y=-(y.clientY/window.innerHeight*2-1),u.setFromCamera(w,c),u.intersectObjects(p).forEach(v=>{v.object.material=s})});function j(){e.update(),d.render(i,c),requestAnimationFrame(j)}j()},m=P(),L=()=>{let i,c,f=!1;const n=[],s=new W;s.background=new rd(15790320);const p=new z(45,2,.1,1e4);p.position.set(500,800,1300),p.lookAt(0,0,0);const d=new G(50,50,50),e=new S({color:16711680,opacity:.5,transparent:!0}),u=new M(d,e);s.add(u);const w=new G(50,50,50),j=new vd({color:16693068,map:new dd().load("./assets/textures/square-outline-textured.png")}),y=new Fd(1e3,20);s.add(y),c=new O,i=new N;const r=new id(1e3,1e3);r.rotateX(-Math.PI/2);const v=new M(r,new S({visible:!1}));s.add(v),n.push(v);const g=new ad(6316128);s.add(g);const b=new sd(16777215);b.position.set(1,.75,.5).normalize(),s.add(b);const D=new V({antialias:!0});D.setSize(m.value.offsetWidth,m.value.offsetWidth/2),m.value.appendChild(D.domElement),m.value.addEventListener("pointermove",R),m.value.addEventListener("pointerdown",x),m.value.addEventListener("keydown",h),m.value.addEventListener("keyup",T);function R(a){i.set(a.clientX/window.innerWidth*2-1,-(a.clientY/window.innerHeight)*2+1),c.setFromCamera(i,p);const l=c.intersectObjects(n,!1);if(l.length>0){const F=l[0];u.position.copy(F.point).add(F.face.normal),u.position.divideScalar(50).floor().multiplyScalar(50).addScalar(25),C()}}function x(a){i.set(a.clientX/window.innerWidth*2-1,-(a.clientY/window.innerHeight)*2+1),c.setFromCamera(i,p);const l=c.intersectObjects(n,!1);if(l.length>0){const F=l[0];if(f)F.object!==v&&(s.remove(F.object),n.splice(n.indexOf(F.object),1));else{const E=new M(w,j);E.position.copy(F.point).add(F.face.normal),E.position.divideScalar(50).floor().multiplyScalar(50).addScalar(25),s.add(E),n.push(E)}C()}}function h(a){switch(a.keyCode){case 16:f=!0;break}}function T(a){switch(a.keyCode){case 16:f=!1;break}}function C(){D.render(s,p)}C()},o=P();function q(){const f=new md,n=new dd,s=new O,p=new O,d=new z(75,2,.1,200);d.position.set(0,5,-10);const e=new W,u=new sd(16777215);u.position.set(0,0,10),e.add(u);const w=new ad(16777215,.8);e.add(w);const j=new ed(5,16,16),y=new nd({specular:3355443,shininess:5,map:n.load("./assets/textures/planets/earth_atmos_2048.jpg"),specularMap:n.load("./assets/textures/planets/earth_specular_2048.jpg"),normalMap:n.load("./assets/textures/planets/earth_normal_2048.jpg"),normalScale:new N(.85,.85)}),r=new M(j,y);e.add(r);const v=new ed(.5,16,16),g=new nd({shininess:5,map:n.load("./assets/textures/planets/moon_1024.jpg")}),b=new M(v,g);e.add(b);const D=document.createElement("div");D.className="label",D.innerHTML="地球";const R=new H(D);R.position.set(0,6,0),r.add(R);const x=document.createElement("div");x.className="label1",x.innerHTML="中国";const h=new H(x);h.position.set(-1.5,2.5,-5),r.add(h);const T=document.createElement("div");T.className="label",T.innerHTML="月球";const C=new H(T);C.position.set(0,1,0),b.add(C);const a=new td;a.setSize(o.value.offsetWidth,o.value.offsetWidth/2),o.value.appendChild(a.domElement),a.domElement.style.position="absolute",a.domElement.style.height="100%",a.domElement.style.width="100%";const l=new V;l.setSize(o.value.offsetWidth,o.value.offsetWidth/2),o.value.appendChild(l.domElement),l.setPixelRatio(window.devicePixelRatio),window.addEventListener("resize",E),l.render(e,d);const F=new I(d,a.domElement);F.minDistance=5,F.maxDistance=100;function E(){d.aspect=2,d.updateProjectionMatrix(),a.setSize(o.value.offsetWidth,o.value.offsetWidth/2),l.setSize(o.value.offsetWidth,o.value.offsetWidth/2)}function Y(){const U=f.getElapsedTime();b.position.set(Math.sin(U)*8,0,Math.cos(U)*8);const k=h.position.clone(),Z=b.position.clone(),$=d.position.clone(),od=k.distanceTo(d.position);Z.distanceTo(d.position),k.project(d),s.setFromCamera(k,d),p.set($,Z.sub($).normalize());const K=s.intersectObjects(e.children,!0),Q=p.intersectObjects(e.children,!0);Q.length>0&&Q[0].object!==b?C.element.style.visibility="hidden":C.element.style.visibility="initial",K.length==0?h.element.style.visibility="initial":K[0].distance<od?h.element.style.visibility="hidden":h.element.style.visibility="initial",a.render(e,d),l.render(e,d),requestAnimationFrame(Y)}Y()}cd(()=>{_(),L(),q()});const J={ray:A,init:_,voxelRef:m,initVoxel:L,curve:o,initCurve:q,ref:P,onMounted:cd,get THREE(){return yd},get OrbitControls(){return I},get CSS2DRenderer(){return td},get CSS2DObject(){return H}};return Object.defineProperty(J,"__isScriptSetup",{enumerable:!1,value:!0}),J}},Ad={ref:"voxelRef"},fd={ref:"ray"},wd={class:"curve",ref:"curve"};function gd(ld,t,A,_,m,L){return Cd(),bd("div",null,[t[0]||(t[0]=X(`<h2 id="raycaster" tabindex="-1" data-v-eddd652c><a class="header-anchor" href="#raycaster" data-v-eddd652c><span data-v-eddd652c>Raycaster</span></a></h2><ul data-v-eddd652c><li data-v-eddd652c><p data-v-eddd652c><code data-v-eddd652c>Raycaster( origin : Vector3, direction : Vector3, near : Float, far : Float )</code></p><ul data-v-eddd652c><li data-v-eddd652c>origin —— 光线投射的原点向量。</li><li data-v-eddd652c>direction —— 向射线提供方向的方向向量，应当被标准化。</li><li data-v-eddd652c>near —— 返回的所有结果比near远。near不能为负值，其默认值为0。</li><li data-v-eddd652c>far —— 返回的所有结果都比far近。far不能小于near，其默认值为Infinity（正无穷。）</li></ul><p data-v-eddd652c>这将创建一个新的raycaster对象。</p></li><li data-v-eddd652c><p data-v-eddd652c><code data-v-eddd652c>.setFromCamera ( coords : Vector2, camera : Camera ) : undefined</code></p><ul data-v-eddd652c><li data-v-eddd652c>coords —— 在标准化设备坐标中鼠标的二维坐标 —— X分量与Y分量应当在-1到1之间。</li><li data-v-eddd652c>camera —— 射线所来源的摄像机。</li></ul><p data-v-eddd652c>使用一个新的原点和方向来更新射线。</p></li><li data-v-eddd652c><p data-v-eddd652c><code data-v-eddd652c>.intersectObject ( object : Object3D, recursive : Boolean, optionalTarget : Array ) : Array</code></p><ul data-v-eddd652c><li data-v-eddd652c>object —— 检查与射线相交的物体。</li><li data-v-eddd652c>recursive —— 若为true，则同时也会检查所有的后代。否则将只会检查对象本身。默认值为true。</li><li data-v-eddd652c>optionalTarget — （可选）设置结果的目标数组。如果不设置这个值，则一个新的Array会被实例化；如果设置了这个值，则在每次调用之前必须清空这个数组（例如：array.length = 0;）。</li></ul><p data-v-eddd652c>检测所有在射线与物体之间，包括或不包括后代的相交部分。返回结果时，相交部分将按距离进行排序，最近的位于第一个。 该方法返回一个包含有交叉部分的数组:</p></li></ul><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#282A36;color:#F8F8F2;" data-v-eddd652c><pre class="shiki dracula vp-code" data-v-eddd652c><code data-v-eddd652c><span class="line" data-v-eddd652c><span style="color:#FF79C6;" data-v-eddd652c>const</span><span style="color:#F8F8F2;" data-v-eddd652c> raycaster </span><span style="color:#FF79C6;" data-v-eddd652c>=</span><span style="color:#FF79C6;font-weight:bold;" data-v-eddd652c> new</span><span style="color:#BD93F9;" data-v-eddd652c> THREE</span><span style="color:#F8F8F2;" data-v-eddd652c>.</span><span style="color:#50FA7B;" data-v-eddd652c>Raycaster</span><span style="color:#F8F8F2;" data-v-eddd652c>();</span></span>
<span class="line" data-v-eddd652c><span style="color:#FF79C6;" data-v-eddd652c>const</span><span style="color:#F8F8F2;" data-v-eddd652c> pointer </span><span style="color:#FF79C6;" data-v-eddd652c>=</span><span style="color:#FF79C6;font-weight:bold;" data-v-eddd652c> new</span><span style="color:#BD93F9;" data-v-eddd652c> THREE</span><span style="color:#F8F8F2;" data-v-eddd652c>.</span><span style="color:#50FA7B;" data-v-eddd652c>Vector2</span><span style="color:#F8F8F2;" data-v-eddd652c>()</span></span>
<span class="line" data-v-eddd652c><span style="color:#FF79C6;" data-v-eddd652c>function</span><span style="color:#50FA7B;" data-v-eddd652c> render</span><span style="color:#F8F8F2;" data-v-eddd652c>() {</span></span>
<span class="line" data-v-eddd652c><span style="color:#6272A4;" data-v-eddd652c> // 通过摄像机和鼠标位置更新射线</span></span>
<span class="line" data-v-eddd652c><span style="color:#F8F8F2;" data-v-eddd652c> raycaster.</span><span style="color:#50FA7B;" data-v-eddd652c>setFromCamera</span><span style="color:#F8F8F2;" data-v-eddd652c>( pointer, camera );</span></span>
<span class="line" data-v-eddd652c><span style="color:#6272A4;" data-v-eddd652c> // 计算物体和射线的焦点</span></span>
<span class="line" data-v-eddd652c><span style="color:#FF79C6;" data-v-eddd652c> const</span><span style="color:#F8F8F2;" data-v-eddd652c> intersects </span><span style="color:#FF79C6;" data-v-eddd652c>=</span><span style="color:#F8F8F2;" data-v-eddd652c> raycaster.</span><span style="color:#50FA7B;" data-v-eddd652c>intersectObjects</span><span style="color:#F8F8F2;" data-v-eddd652c>( scene.children );</span></span>
<span class="line" data-v-eddd652c><span style="color:#FF79C6;" data-v-eddd652c> for</span><span style="color:#F8F8F2;" data-v-eddd652c> ( </span><span style="color:#FF79C6;" data-v-eddd652c>let</span><span style="color:#F8F8F2;" data-v-eddd652c> i </span><span style="color:#FF79C6;" data-v-eddd652c>=</span><span style="color:#BD93F9;" data-v-eddd652c> 0</span><span style="color:#F8F8F2;" data-v-eddd652c>; i </span><span style="color:#FF79C6;" data-v-eddd652c>&lt;</span><span style="color:#F8F8F2;" data-v-eddd652c> intersects.length; i </span><span style="color:#FF79C6;" data-v-eddd652c>++</span><span style="color:#F8F8F2;" data-v-eddd652c> ) {</span></span>
<span class="line" data-v-eddd652c><span style="color:#F8F8F2;" data-v-eddd652c>  intersects[ i ].object.material.color.</span><span style="color:#50FA7B;" data-v-eddd652c>set</span><span style="color:#F8F8F2;" data-v-eddd652c>( </span><span style="color:#BD93F9;" data-v-eddd652c>0xff0000</span><span style="color:#F8F8F2;" data-v-eddd652c> );</span></span>
<span class="line" data-v-eddd652c><span style="color:#F8F8F2;" data-v-eddd652c> }</span></span>
<span class="line" data-v-eddd652c><span style="color:#F8F8F2;" data-v-eddd652c> renderer.</span><span style="color:#50FA7B;" data-v-eddd652c>render</span><span style="color:#F8F8F2;" data-v-eddd652c>( scene, camera );</span></span>
<span class="line" data-v-eddd652c><span style="color:#F8F8F2;" data-v-eddd652c>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;" data-v-eddd652c><div class="line-number" data-v-eddd652c></div><div class="line-number" data-v-eddd652c></div><div class="line-number" data-v-eddd652c></div><div class="line-number" data-v-eddd652c></div><div class="line-number" data-v-eddd652c></div><div class="line-number" data-v-eddd652c></div><div class="line-number" data-v-eddd652c></div><div class="line-number" data-v-eddd652c></div><div class="line-number" data-v-eddd652c></div><div class="line-number" data-v-eddd652c></div><div class="line-number" data-v-eddd652c></div><div class="line-number" data-v-eddd652c></div></div></div><h2 id="demo" tabindex="-1" data-v-eddd652c><a class="header-anchor" href="#demo" data-v-eddd652c><span data-v-eddd652c>demo</span></a></h2><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#282A36;color:#F8F8F2;" data-v-eddd652c><pre class="shiki dracula vp-code" data-v-eddd652c><code data-v-eddd652c><span class="line" data-v-eddd652c><span style="color:#6272A4;" data-v-eddd652c>// 创建一个红色的半透明方块</span></span>
<span class="line" data-v-eddd652c><span style="color:#FF79C6;" data-v-eddd652c>const</span><span style="color:#F8F8F2;" data-v-eddd652c> rollOverGeo </span><span style="color:#FF79C6;" data-v-eddd652c>=</span><span style="color:#FF79C6;font-weight:bold;" data-v-eddd652c> new</span><span style="color:#BD93F9;" data-v-eddd652c> THREE</span><span style="color:#F8F8F2;" data-v-eddd652c>.</span><span style="color:#50FA7B;" data-v-eddd652c>BoxGeometry</span><span style="color:#F8F8F2;" data-v-eddd652c>( </span><span style="color:#BD93F9;" data-v-eddd652c>50</span><span style="color:#F8F8F2;" data-v-eddd652c>, </span><span style="color:#BD93F9;" data-v-eddd652c>50</span><span style="color:#F8F8F2;" data-v-eddd652c>, </span><span style="color:#BD93F9;" data-v-eddd652c>50</span><span style="color:#F8F8F2;" data-v-eddd652c> );</span></span>
<span class="line" data-v-eddd652c><span style="color:#FF79C6;" data-v-eddd652c>const</span><span style="color:#F8F8F2;" data-v-eddd652c> rollOverMaterial </span><span style="color:#FF79C6;" data-v-eddd652c>=</span><span style="color:#FF79C6;font-weight:bold;" data-v-eddd652c> new</span><span style="color:#BD93F9;" data-v-eddd652c> THREE</span><span style="color:#F8F8F2;" data-v-eddd652c>.</span><span style="color:#50FA7B;" data-v-eddd652c>MeshBasicMaterial</span><span style="color:#F8F8F2;" data-v-eddd652c>( { color</span><span style="color:#FF79C6;" data-v-eddd652c>:</span><span style="color:#BD93F9;" data-v-eddd652c> 0xff0000</span><span style="color:#F8F8F2;" data-v-eddd652c>, opacity</span><span style="color:#FF79C6;" data-v-eddd652c>:</span><span style="color:#BD93F9;" data-v-eddd652c> 0.5</span><span style="color:#F8F8F2;" data-v-eddd652c>, transparent</span><span style="color:#FF79C6;" data-v-eddd652c>:</span><span style="color:#BD93F9;" data-v-eddd652c> true</span><span style="color:#F8F8F2;" data-v-eddd652c> } );</span></span>
<span class="line" data-v-eddd652c><span style="color:#FF79C6;" data-v-eddd652c>const</span><span style="color:#F8F8F2;" data-v-eddd652c> rollOverMesh </span><span style="color:#FF79C6;" data-v-eddd652c>=</span><span style="color:#FF79C6;font-weight:bold;" data-v-eddd652c> new</span><span style="color:#BD93F9;" data-v-eddd652c> THREE</span><span style="color:#F8F8F2;" data-v-eddd652c>.</span><span style="color:#50FA7B;" data-v-eddd652c>Mesh</span><span style="color:#F8F8F2;" data-v-eddd652c>( rollOverGeo, rollOverMaterial );</span></span>
<span class="line" data-v-eddd652c><span style="color:#F8F8F2;" data-v-eddd652c>scene.</span><span style="color:#50FA7B;" data-v-eddd652c>add</span><span style="color:#F8F8F2;" data-v-eddd652c>( rollOverMesh );</span></span>
<span class="line" data-v-eddd652c></span>
<span class="line" data-v-eddd652c><span style="color:#6272A4;" data-v-eddd652c>// 创建一个黄色的方块，准备用于添加到场景中</span></span>
<span class="line" data-v-eddd652c><span style="color:#FF79C6;" data-v-eddd652c>const</span><span style="color:#F8F8F2;" data-v-eddd652c> cubeGeo </span><span style="color:#FF79C6;" data-v-eddd652c>=</span><span style="color:#FF79C6;font-weight:bold;" data-v-eddd652c> new</span><span style="color:#BD93F9;" data-v-eddd652c> THREE</span><span style="color:#F8F8F2;" data-v-eddd652c>.</span><span style="color:#50FA7B;" data-v-eddd652c>BoxGeometry</span><span style="color:#F8F8F2;" data-v-eddd652c>( </span><span style="color:#BD93F9;" data-v-eddd652c>50</span><span style="color:#F8F8F2;" data-v-eddd652c>, </span><span style="color:#BD93F9;" data-v-eddd652c>50</span><span style="color:#F8F8F2;" data-v-eddd652c>, </span><span style="color:#BD93F9;" data-v-eddd652c>50</span><span style="color:#F8F8F2;" data-v-eddd652c> );</span></span>
<span class="line" data-v-eddd652c><span style="color:#FF79C6;" data-v-eddd652c>const</span><span style="color:#F8F8F2;" data-v-eddd652c> cubeMaterial </span><span style="color:#FF79C6;" data-v-eddd652c>=</span><span style="color:#FF79C6;font-weight:bold;" data-v-eddd652c> new</span><span style="color:#BD93F9;" data-v-eddd652c> THREE</span><span style="color:#F8F8F2;" data-v-eddd652c>.</span><span style="color:#50FA7B;" data-v-eddd652c>MeshLambertMaterial</span><span style="color:#F8F8F2;" data-v-eddd652c>( { color</span><span style="color:#FF79C6;" data-v-eddd652c>:</span><span style="color:#BD93F9;" data-v-eddd652c> 0xfeb74c</span><span style="color:#F8F8F2;" data-v-eddd652c>, map</span><span style="color:#FF79C6;" data-v-eddd652c>:</span><span style="color:#FF79C6;font-weight:bold;" data-v-eddd652c> new</span><span style="color:#BD93F9;" data-v-eddd652c> THREE</span><span style="color:#F8F8F2;" data-v-eddd652c>.</span><span style="color:#50FA7B;" data-v-eddd652c>TextureLoader</span><span style="color:#F8F8F2;" data-v-eddd652c>().</span><span style="color:#50FA7B;" data-v-eddd652c>load</span><span style="color:#F8F8F2;" data-v-eddd652c>( </span><span style="color:#E9F284;" data-v-eddd652c>&#39;</span><span style="color:#F1FA8C;" data-v-eddd652c>/assets/textures/square-outline-textured.png</span><span style="color:#E9F284;" data-v-eddd652c>&#39;</span><span style="color:#F8F8F2;" data-v-eddd652c> ) } );</span></span>
<span class="line" data-v-eddd652c></span>
<span class="line" data-v-eddd652c><span style="color:#6272A4;" data-v-eddd652c>// 创建网格辅助线</span></span>
<span class="line" data-v-eddd652c><span style="color:#FF79C6;" data-v-eddd652c>const</span><span style="color:#F8F8F2;" data-v-eddd652c> gridHelper </span><span style="color:#FF79C6;" data-v-eddd652c>=</span><span style="color:#FF79C6;font-weight:bold;" data-v-eddd652c> new</span><span style="color:#BD93F9;" data-v-eddd652c> THREE</span><span style="color:#F8F8F2;" data-v-eddd652c>.</span><span style="color:#50FA7B;" data-v-eddd652c>GridHelper</span><span style="color:#F8F8F2;" data-v-eddd652c>( </span><span style="color:#BD93F9;" data-v-eddd652c>1000</span><span style="color:#F8F8F2;" data-v-eddd652c>, </span><span style="color:#BD93F9;" data-v-eddd652c>20</span><span style="color:#F8F8F2;" data-v-eddd652c> );</span></span>
<span class="line" data-v-eddd652c><span style="color:#F8F8F2;" data-v-eddd652c>scene.</span><span style="color:#50FA7B;" data-v-eddd652c>add</span><span style="color:#F8F8F2;" data-v-eddd652c>( gridHelper );</span></span>
<span class="line" data-v-eddd652c></span>
<span class="line" data-v-eddd652c><span style="color:#6272A4;" data-v-eddd652c>// 创建一个平面面板</span></span>
<span class="line" data-v-eddd652c><span style="color:#F8F8F2;" data-v-eddd652c>raycaster </span><span style="color:#FF79C6;" data-v-eddd652c>=</span><span style="color:#FF79C6;font-weight:bold;" data-v-eddd652c> new</span><span style="color:#BD93F9;" data-v-eddd652c> THREE</span><span style="color:#F8F8F2;" data-v-eddd652c>.</span><span style="color:#50FA7B;" data-v-eddd652c>Raycaster</span><span style="color:#F8F8F2;" data-v-eddd652c>();</span></span>
<span class="line" data-v-eddd652c><span style="color:#F8F8F2;" data-v-eddd652c>pointer </span><span style="color:#FF79C6;" data-v-eddd652c>=</span><span style="color:#FF79C6;font-weight:bold;" data-v-eddd652c> new</span><span style="color:#BD93F9;" data-v-eddd652c> THREE</span><span style="color:#F8F8F2;" data-v-eddd652c>.</span><span style="color:#50FA7B;" data-v-eddd652c>Vector2</span><span style="color:#F8F8F2;" data-v-eddd652c>();</span></span>
<span class="line" data-v-eddd652c><span style="color:#FF79C6;" data-v-eddd652c>const</span><span style="color:#F8F8F2;" data-v-eddd652c> geometry </span><span style="color:#FF79C6;" data-v-eddd652c>=</span><span style="color:#FF79C6;font-weight:bold;" data-v-eddd652c> new</span><span style="color:#BD93F9;" data-v-eddd652c> THREE</span><span style="color:#F8F8F2;" data-v-eddd652c>.</span><span style="color:#50FA7B;" data-v-eddd652c>PlaneGeometry</span><span style="color:#F8F8F2;" data-v-eddd652c>( </span><span style="color:#BD93F9;" data-v-eddd652c>1000</span><span style="color:#F8F8F2;" data-v-eddd652c>, </span><span style="color:#BD93F9;" data-v-eddd652c>1000</span><span style="color:#F8F8F2;" data-v-eddd652c> );</span></span>
<span class="line" data-v-eddd652c><span style="color:#F8F8F2;" data-v-eddd652c>geometry.</span><span style="color:#50FA7B;" data-v-eddd652c>rotateX</span><span style="color:#F8F8F2;" data-v-eddd652c>( </span><span style="color:#FF79C6;" data-v-eddd652c>-</span><span style="color:#F8F8F2;" data-v-eddd652c> Math.</span><span style="color:#BD93F9;" data-v-eddd652c>PI</span><span style="color:#FF79C6;" data-v-eddd652c> /</span><span style="color:#BD93F9;" data-v-eddd652c> 2</span><span style="color:#F8F8F2;" data-v-eddd652c> );</span></span>
<span class="line" data-v-eddd652c><span style="color:#FF79C6;" data-v-eddd652c>const</span><span style="color:#F8F8F2;" data-v-eddd652c> plane </span><span style="color:#FF79C6;" data-v-eddd652c>=</span><span style="color:#FF79C6;font-weight:bold;" data-v-eddd652c> new</span><span style="color:#BD93F9;" data-v-eddd652c> THREE</span><span style="color:#F8F8F2;" data-v-eddd652c>.</span><span style="color:#50FA7B;" data-v-eddd652c>Mesh</span><span style="color:#F8F8F2;" data-v-eddd652c>( geometry, </span><span style="color:#FF79C6;font-weight:bold;" data-v-eddd652c>new</span><span style="color:#BD93F9;" data-v-eddd652c> THREE</span><span style="color:#F8F8F2;" data-v-eddd652c>.</span><span style="color:#50FA7B;" data-v-eddd652c>MeshBasicMaterial</span><span style="color:#F8F8F2;" data-v-eddd652c>( { visible</span><span style="color:#FF79C6;" data-v-eddd652c>:</span><span style="color:#BD93F9;" data-v-eddd652c> false</span><span style="color:#F8F8F2;" data-v-eddd652c> } ) );</span></span>
<span class="line" data-v-eddd652c><span style="color:#F8F8F2;" data-v-eddd652c>scene.</span><span style="color:#50FA7B;" data-v-eddd652c>add</span><span style="color:#F8F8F2;" data-v-eddd652c>( plane );</span></span>
<span class="line" data-v-eddd652c></span>
<span class="line" data-v-eddd652c><span style="color:#6272A4;" data-v-eddd652c>// 用于射线检测</span></span>
<span class="line" data-v-eddd652c><span style="color:#F8F8F2;" data-v-eddd652c>objects.</span><span style="color:#50FA7B;" data-v-eddd652c>push</span><span style="color:#F8F8F2;" data-v-eddd652c>( plane ); </span><span style="color:#6272A4;" data-v-eddd652c>// 加入物体数组</span></span>
<span class="line" data-v-eddd652c></span>
<span class="line" data-v-eddd652c><span style="color:#6272A4;" data-v-eddd652c>// 事件处理函数</span></span>
<span class="line" data-v-eddd652c><span style="color:#FF79C6;" data-v-eddd652c>function</span><span style="color:#50FA7B;" data-v-eddd652c> onPointerMove</span><span style="color:#F8F8F2;" data-v-eddd652c>(</span><span style="color:#FFB86C;font-style:italic;" data-v-eddd652c>event</span><span style="color:#F8F8F2;" data-v-eddd652c>){</span></span>
<span class="line" data-v-eddd652c><span style="color:#F8F8F2;" data-v-eddd652c> pointer.</span><span style="color:#50FA7B;" data-v-eddd652c>set</span><span style="color:#F8F8F2;" data-v-eddd652c>( ( event.clientX </span><span style="color:#FF79C6;" data-v-eddd652c>/</span><span style="color:#F8F8F2;" data-v-eddd652c> window.innerWidth ) </span><span style="color:#FF79C6;" data-v-eddd652c>*</span><span style="color:#BD93F9;" data-v-eddd652c> 2</span><span style="color:#FF79C6;" data-v-eddd652c> -</span><span style="color:#BD93F9;" data-v-eddd652c> 1</span><span style="color:#F8F8F2;" data-v-eddd652c>, </span><span style="color:#FF79C6;" data-v-eddd652c>-</span><span style="color:#F8F8F2;" data-v-eddd652c> ( event.clientY </span><span style="color:#FF79C6;" data-v-eddd652c>/</span><span style="color:#F8F8F2;" data-v-eddd652c> window.innerHeight ) </span><span style="color:#FF79C6;" data-v-eddd652c>*</span><span style="color:#BD93F9;" data-v-eddd652c> 2</span><span style="color:#FF79C6;" data-v-eddd652c> +</span><span style="color:#BD93F9;" data-v-eddd652c> 1</span><span style="color:#F8F8F2;" data-v-eddd652c> );</span></span>
<span class="line" data-v-eddd652c><span style="color:#F8F8F2;" data-v-eddd652c> raycaster.</span><span style="color:#50FA7B;" data-v-eddd652c>setFromCamera</span><span style="color:#F8F8F2;" data-v-eddd652c>( pointer, camera );</span></span>
<span class="line" data-v-eddd652c><span style="color:#FF79C6;" data-v-eddd652c> const</span><span style="color:#F8F8F2;" data-v-eddd652c> intersects </span><span style="color:#FF79C6;" data-v-eddd652c>=</span><span style="color:#F8F8F2;" data-v-eddd652c> raycaster.</span><span style="color:#50FA7B;" data-v-eddd652c>intersectObjects</span><span style="color:#F8F8F2;" data-v-eddd652c>( objects, </span><span style="color:#BD93F9;" data-v-eddd652c>false</span><span style="color:#F8F8F2;" data-v-eddd652c> );</span></span>
<span class="line" data-v-eddd652c><span style="color:#FF79C6;" data-v-eddd652c> if</span><span style="color:#F8F8F2;" data-v-eddd652c> ( intersects.length </span><span style="color:#FF79C6;" data-v-eddd652c>&gt;</span><span style="color:#BD93F9;" data-v-eddd652c> 0</span><span style="color:#F8F8F2;" data-v-eddd652c> ) {</span></span>
<span class="line" data-v-eddd652c><span style="color:#FF79C6;" data-v-eddd652c>  const</span><span style="color:#F8F8F2;" data-v-eddd652c> intersect </span><span style="color:#FF79C6;" data-v-eddd652c>=</span><span style="color:#F8F8F2;" data-v-eddd652c> intersects[ </span><span style="color:#BD93F9;" data-v-eddd652c>0</span><span style="color:#F8F8F2;" data-v-eddd652c> ];</span></span>
<span class="line" data-v-eddd652c><span style="color:#6272A4;" data-v-eddd652c>  // 将红色半透明方块移动到鼠标所在的位置</span></span>
<span class="line" data-v-eddd652c><span style="color:#6272A4;" data-v-eddd652c>    // intersect.point 鼠标悬停点在场景中的位置</span></span>
<span class="line" data-v-eddd652c><span style="color:#6272A4;" data-v-eddd652c>    // intersect.face.normal 三维模型子网格（intersect.face）的法向量（normal）</span></span>
<span class="line" data-v-eddd652c><span style="color:#F8F8F2;" data-v-eddd652c>  rollOverMesh.position.</span><span style="color:#50FA7B;" data-v-eddd652c>copy</span><span style="color:#F8F8F2;" data-v-eddd652c>( intersect.point ).</span><span style="color:#50FA7B;" data-v-eddd652c>add</span><span style="color:#F8F8F2;" data-v-eddd652c>( intersect.face.normal );</span></span>
<span class="line" data-v-eddd652c><span style="color:#6272A4;" data-v-eddd652c>    // 将方块对准到悬停点的中心位置</span></span>
<span class="line" data-v-eddd652c><span style="color:#6272A4;" data-v-eddd652c>    /*</span></span>
<span class="line" data-v-eddd652c><span style="color:#6272A4;" data-v-eddd652c>    divideScalar( 50 )：将向量坐标除以 50，这是为了将位置信息进行规范化，使每个方块的位置都对应网格的中心点，避免出现半个方块的情况。</span></span>
<span class="line" data-v-eddd652c><span style="color:#6272A4;" data-v-eddd652c>    floor()：将向量的每个坐标值按照四舍五入的方式转换成整数，这是确保每个网格的中心点都是整数。</span></span>
<span class="line" data-v-eddd652c><span style="color:#6272A4;" data-v-eddd652c>    multiplyScalar( 50 )：将向量坐标乘以 50，把网格中心点的位置重新还原成一个完整的坐标系。这一步的作用是反向处理前面的操作，确保位置信息没有改变。</span></span>
<span class="line" data-v-eddd652c><span style="color:#6272A4;" data-v-eddd652c>    addScalar( 25 )：最后加上 25，是为了让方块更好地显示在屏幕上，因为像素的起始点是在网格左上角，而不是中心点。</span></span>
<span class="line" data-v-eddd652c><span style="color:#6272A4;" data-v-eddd652c>    </span></span>
<span class="line" data-v-eddd652c><span style="color:#6272A4;" data-v-eddd652c>    */</span><span style="color:#F8F8F2;" data-v-eddd652c> </span></span>
<span class="line" data-v-eddd652c><span style="color:#F8F8F2;" data-v-eddd652c>  rollOverMesh.position.</span><span style="color:#50FA7B;" data-v-eddd652c>divideScalar</span><span style="color:#F8F8F2;" data-v-eddd652c>( </span><span style="color:#BD93F9;" data-v-eddd652c>50</span><span style="color:#F8F8F2;" data-v-eddd652c> ).</span><span style="color:#50FA7B;" data-v-eddd652c>floor</span><span style="color:#F8F8F2;" data-v-eddd652c>().</span><span style="color:#50FA7B;" data-v-eddd652c>multiplyScalar</span><span style="color:#F8F8F2;" data-v-eddd652c>( </span><span style="color:#BD93F9;" data-v-eddd652c>50</span><span style="color:#F8F8F2;" data-v-eddd652c> ).</span><span style="color:#50FA7B;" data-v-eddd652c>addScalar</span><span style="color:#F8F8F2;" data-v-eddd652c>( </span><span style="color:#BD93F9;" data-v-eddd652c>25</span><span style="color:#F8F8F2;" data-v-eddd652c> );</span></span>
<span class="line" data-v-eddd652c><span style="color:#50FA7B;" data-v-eddd652c>  render</span><span style="color:#F8F8F2;" data-v-eddd652c>();</span></span>
<span class="line" data-v-eddd652c><span style="color:#F8F8F2;" data-v-eddd652c> }      </span></span>
<span class="line" data-v-eddd652c><span style="color:#F8F8F2;" data-v-eddd652c>}</span></span>
<span class="line" data-v-eddd652c></span>
<span class="line" data-v-eddd652c><span style="color:#FF79C6;" data-v-eddd652c>function</span><span style="color:#50FA7B;" data-v-eddd652c> onPointerDown</span><span style="color:#F8F8F2;" data-v-eddd652c>(</span><span style="color:#FFB86C;font-style:italic;" data-v-eddd652c>event</span><span style="color:#F8F8F2;" data-v-eddd652c>){</span></span>
<span class="line" data-v-eddd652c><span style="color:#F8F8F2;" data-v-eddd652c> pointer.</span><span style="color:#50FA7B;" data-v-eddd652c>set</span><span style="color:#F8F8F2;" data-v-eddd652c>( ( event.clientX </span><span style="color:#FF79C6;" data-v-eddd652c>/</span><span style="color:#F8F8F2;" data-v-eddd652c> window.innerWidth ) </span><span style="color:#FF79C6;" data-v-eddd652c>*</span><span style="color:#BD93F9;" data-v-eddd652c> 2</span><span style="color:#FF79C6;" data-v-eddd652c> -</span><span style="color:#BD93F9;" data-v-eddd652c> 1</span><span style="color:#F8F8F2;" data-v-eddd652c>, </span><span style="color:#FF79C6;" data-v-eddd652c>-</span><span style="color:#F8F8F2;" data-v-eddd652c> ( event.clientY </span><span style="color:#FF79C6;" data-v-eddd652c>/</span><span style="color:#F8F8F2;" data-v-eddd652c> window.innerHeight ) </span><span style="color:#FF79C6;" data-v-eddd652c>*</span><span style="color:#BD93F9;" data-v-eddd652c> 2</span><span style="color:#FF79C6;" data-v-eddd652c> +</span><span style="color:#BD93F9;" data-v-eddd652c> 1</span><span style="color:#F8F8F2;" data-v-eddd652c> );</span></span>
<span class="line" data-v-eddd652c><span style="color:#F8F8F2;" data-v-eddd652c> raycaster.</span><span style="color:#50FA7B;" data-v-eddd652c>setFromCamera</span><span style="color:#F8F8F2;" data-v-eddd652c>( pointer, camera );</span></span>
<span class="line" data-v-eddd652c><span style="color:#FF79C6;" data-v-eddd652c> const</span><span style="color:#F8F8F2;" data-v-eddd652c> intersects </span><span style="color:#FF79C6;" data-v-eddd652c>=</span><span style="color:#F8F8F2;" data-v-eddd652c> raycaster.</span><span style="color:#50FA7B;" data-v-eddd652c>intersectObjects</span><span style="color:#F8F8F2;" data-v-eddd652c>( objects, </span><span style="color:#BD93F9;" data-v-eddd652c>false</span><span style="color:#F8F8F2;" data-v-eddd652c> );</span></span>
<span class="line" data-v-eddd652c><span style="color:#FF79C6;" data-v-eddd652c> if</span><span style="color:#F8F8F2;" data-v-eddd652c> ( intersects.length </span><span style="color:#FF79C6;" data-v-eddd652c>&gt;</span><span style="color:#BD93F9;" data-v-eddd652c> 0</span><span style="color:#F8F8F2;" data-v-eddd652c> ) {</span></span>
<span class="line" data-v-eddd652c><span style="color:#FF79C6;" data-v-eddd652c>  const</span><span style="color:#F8F8F2;" data-v-eddd652c> intersect </span><span style="color:#FF79C6;" data-v-eddd652c>=</span><span style="color:#F8F8F2;" data-v-eddd652c> intersects[ </span><span style="color:#BD93F9;" data-v-eddd652c>0</span><span style="color:#F8F8F2;" data-v-eddd652c> ];</span></span>
<span class="line" data-v-eddd652c><span style="color:#6272A4;" data-v-eddd652c>  // 删除方块</span></span>
<span class="line" data-v-eddd652c><span style="color:#FF79C6;" data-v-eddd652c>  if</span><span style="color:#F8F8F2;" data-v-eddd652c> ( isShiftDown ) {</span></span>
<span class="line" data-v-eddd652c><span style="color:#FF79C6;" data-v-eddd652c>   if</span><span style="color:#F8F8F2;" data-v-eddd652c> ( intersect.object </span><span style="color:#FF79C6;" data-v-eddd652c>!==</span><span style="color:#F8F8F2;" data-v-eddd652c> plane ) {</span></span>
<span class="line" data-v-eddd652c><span style="color:#F8F8F2;" data-v-eddd652c>    scene.</span><span style="color:#50FA7B;" data-v-eddd652c>remove</span><span style="color:#F8F8F2;" data-v-eddd652c>( intersect.object );</span></span>
<span class="line" data-v-eddd652c><span style="color:#F8F8F2;" data-v-eddd652c>    objects.</span><span style="color:#50FA7B;" data-v-eddd652c>splice</span><span style="color:#F8F8F2;" data-v-eddd652c>( objects.</span><span style="color:#50FA7B;" data-v-eddd652c>indexOf</span><span style="color:#F8F8F2;" data-v-eddd652c>( intersect.object ), </span><span style="color:#BD93F9;" data-v-eddd652c>1</span><span style="color:#F8F8F2;" data-v-eddd652c> );</span></span>
<span class="line" data-v-eddd652c><span style="color:#F8F8F2;" data-v-eddd652c>   }</span></span>
<span class="line" data-v-eddd652c><span style="color:#6272A4;" data-v-eddd652c>  // 添加方块</span></span>
<span class="line" data-v-eddd652c><span style="color:#F8F8F2;" data-v-eddd652c>  } </span><span style="color:#FF79C6;" data-v-eddd652c>else</span><span style="color:#F8F8F2;" data-v-eddd652c> {</span></span>
<span class="line" data-v-eddd652c><span style="color:#FF79C6;" data-v-eddd652c>   const</span><span style="color:#F8F8F2;" data-v-eddd652c> voxel </span><span style="color:#FF79C6;" data-v-eddd652c>=</span><span style="color:#FF79C6;font-weight:bold;" data-v-eddd652c> new</span><span style="color:#BD93F9;" data-v-eddd652c> THREE</span><span style="color:#F8F8F2;" data-v-eddd652c>.</span><span style="color:#50FA7B;" data-v-eddd652c>Mesh</span><span style="color:#F8F8F2;" data-v-eddd652c>( cubeGeo, cubeMaterial );</span></span>
<span class="line" data-v-eddd652c><span style="color:#F8F8F2;" data-v-eddd652c>   voxel.position.</span><span style="color:#50FA7B;" data-v-eddd652c>copy</span><span style="color:#F8F8F2;" data-v-eddd652c>( intersect.point ).</span><span style="color:#50FA7B;" data-v-eddd652c>add</span><span style="color:#F8F8F2;" data-v-eddd652c>( intersect.face.normal );</span></span>
<span class="line" data-v-eddd652c><span style="color:#F8F8F2;" data-v-eddd652c>   voxel.position.</span><span style="color:#50FA7B;" data-v-eddd652c>divideScalar</span><span style="color:#F8F8F2;" data-v-eddd652c>( </span><span style="color:#BD93F9;" data-v-eddd652c>50</span><span style="color:#F8F8F2;" data-v-eddd652c> ).</span><span style="color:#50FA7B;" data-v-eddd652c>floor</span><span style="color:#F8F8F2;" data-v-eddd652c>().</span><span style="color:#50FA7B;" data-v-eddd652c>multiplyScalar</span><span style="color:#F8F8F2;" data-v-eddd652c>( </span><span style="color:#BD93F9;" data-v-eddd652c>50</span><span style="color:#F8F8F2;" data-v-eddd652c> ).</span><span style="color:#50FA7B;" data-v-eddd652c>addScalar</span><span style="color:#F8F8F2;" data-v-eddd652c>( </span><span style="color:#BD93F9;" data-v-eddd652c>25</span><span style="color:#F8F8F2;" data-v-eddd652c> );</span></span>
<span class="line" data-v-eddd652c><span style="color:#F8F8F2;" data-v-eddd652c>   scene.</span><span style="color:#50FA7B;" data-v-eddd652c>add</span><span style="color:#F8F8F2;" data-v-eddd652c>( voxel );</span></span>
<span class="line" data-v-eddd652c><span style="color:#F8F8F2;" data-v-eddd652c>   objects.</span><span style="color:#50FA7B;" data-v-eddd652c>push</span><span style="color:#F8F8F2;" data-v-eddd652c>( voxel );</span></span>
<span class="line" data-v-eddd652c><span style="color:#F8F8F2;" data-v-eddd652c>  }</span></span>
<span class="line" data-v-eddd652c><span style="color:#50FA7B;" data-v-eddd652c>  render</span><span style="color:#F8F8F2;" data-v-eddd652c>();</span></span>
<span class="line" data-v-eddd652c><span style="color:#F8F8F2;" data-v-eddd652c> }</span></span>
<span class="line" data-v-eddd652c><span style="color:#F8F8F2;" data-v-eddd652c>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;" data-v-eddd652c><div class="line-number" data-v-eddd652c></div><div class="line-number" data-v-eddd652c></div><div class="line-number" data-v-eddd652c></div><div class="line-number" data-v-eddd652c></div><div class="line-number" data-v-eddd652c></div><div class="line-number" data-v-eddd652c></div><div class="line-number" data-v-eddd652c></div><div class="line-number" data-v-eddd652c></div><div class="line-number" data-v-eddd652c></div><div class="line-number" data-v-eddd652c></div><div class="line-number" data-v-eddd652c></div><div class="line-number" data-v-eddd652c></div><div class="line-number" data-v-eddd652c></div><div class="line-number" data-v-eddd652c></div><div class="line-number" data-v-eddd652c></div><div class="line-number" data-v-eddd652c></div><div class="line-number" data-v-eddd652c></div><div class="line-number" data-v-eddd652c></div><div class="line-number" data-v-eddd652c></div><div class="line-number" data-v-eddd652c></div><div class="line-number" data-v-eddd652c></div><div class="line-number" data-v-eddd652c></div><div class="line-number" data-v-eddd652c></div><div class="line-number" data-v-eddd652c></div><div class="line-number" data-v-eddd652c></div><div class="line-number" data-v-eddd652c></div><div class="line-number" data-v-eddd652c></div><div class="line-number" data-v-eddd652c></div><div class="line-number" data-v-eddd652c></div><div class="line-number" data-v-eddd652c></div><div class="line-number" data-v-eddd652c></div><div class="line-number" data-v-eddd652c></div><div class="line-number" data-v-eddd652c></div><div class="line-number" data-v-eddd652c></div><div class="line-number" data-v-eddd652c></div><div class="line-number" data-v-eddd652c></div><div class="line-number" data-v-eddd652c></div><div class="line-number" data-v-eddd652c></div><div class="line-number" data-v-eddd652c></div><div class="line-number" data-v-eddd652c></div><div class="line-number" data-v-eddd652c></div><div class="line-number" data-v-eddd652c></div><div class="line-number" data-v-eddd652c></div><div class="line-number" data-v-eddd652c></div><div class="line-number" data-v-eddd652c></div><div class="line-number" data-v-eddd652c></div><div class="line-number" data-v-eddd652c></div><div class="line-number" data-v-eddd652c></div><div class="line-number" data-v-eddd652c></div><div class="line-number" data-v-eddd652c></div><div class="line-number" data-v-eddd652c></div><div class="line-number" data-v-eddd652c></div><div class="line-number" data-v-eddd652c></div><div class="line-number" data-v-eddd652c></div><div class="line-number" data-v-eddd652c></div><div class="line-number" data-v-eddd652c></div><div class="line-number" data-v-eddd652c></div><div class="line-number" data-v-eddd652c></div><div class="line-number" data-v-eddd652c></div><div class="line-number" data-v-eddd652c></div><div class="line-number" data-v-eddd652c></div><div class="line-number" data-v-eddd652c></div><div class="line-number" data-v-eddd652c></div><div class="line-number" data-v-eddd652c></div><div class="line-number" data-v-eddd652c></div><div class="line-number" data-v-eddd652c></div><div class="line-number" data-v-eddd652c></div><div class="line-number" data-v-eddd652c></div><div class="line-number" data-v-eddd652c></div><div class="line-number" data-v-eddd652c></div><div class="line-number" data-v-eddd652c></div><div class="line-number" data-v-eddd652c></div></div></div>`,5)),B("div",Ad,null,512),t[1]||(t[1]=X(`<div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#282A36;color:#F8F8F2;" data-v-eddd652c><pre class="shiki dracula vp-code" data-v-eddd652c><code data-v-eddd652c><span class="line" data-v-eddd652c><span style="color:#FF79C6;" data-v-eddd652c>const</span><span style="color:#F8F8F2;" data-v-eddd652c> material </span><span style="color:#FF79C6;" data-v-eddd652c>=</span><span style="color:#FF79C6;font-weight:bold;" data-v-eddd652c> new</span><span style="color:#BD93F9;" data-v-eddd652c> THREE</span><span style="color:#F8F8F2;" data-v-eddd652c>.</span><span style="color:#50FA7B;" data-v-eddd652c>MeshBasicMaterial</span><span style="color:#F8F8F2;" data-v-eddd652c>({ </span><span style="color:#6272A4;" data-v-eddd652c>// 创建网格基本材质</span></span>
<span class="line" data-v-eddd652c><span style="color:#F8F8F2;" data-v-eddd652c>    wireframe</span><span style="color:#FF79C6;" data-v-eddd652c>:</span><span style="color:#BD93F9;" data-v-eddd652c> true</span><span style="color:#6272A4;" data-v-eddd652c>  // wireframe 为 true 时，表示显示为线框模式，否则就是默认表示实心的</span></span>
<span class="line" data-v-eddd652c><span style="color:#F8F8F2;" data-v-eddd652c>})</span></span>
<span class="line" data-v-eddd652c><span style="color:#FF79C6;" data-v-eddd652c>const</span><span style="color:#F8F8F2;" data-v-eddd652c> redMaterial </span><span style="color:#FF79C6;" data-v-eddd652c>=</span><span style="color:#FF79C6;font-weight:bold;" data-v-eddd652c> new</span><span style="color:#BD93F9;" data-v-eddd652c> THREE</span><span style="color:#F8F8F2;" data-v-eddd652c>.</span><span style="color:#50FA7B;" data-v-eddd652c>MeshBasicMaterial</span><span style="color:#F8F8F2;" data-v-eddd652c>({ </span><span style="color:#6272A4;" data-v-eddd652c>// 创建颜色材质，设置为红色 </span></span>
<span class="line" data-v-eddd652c><span style="color:#F8F8F2;" data-v-eddd652c>    color</span><span style="color:#FF79C6;" data-v-eddd652c>:</span><span style="color:#E9F284;" data-v-eddd652c>&#39;</span><span style="color:#F1FA8C;" data-v-eddd652c>#ff0000</span><span style="color:#E9F284;" data-v-eddd652c>&#39;</span></span>
<span class="line" data-v-eddd652c><span style="color:#F8F8F2;" data-v-eddd652c>})</span></span>
<span class="line" data-v-eddd652c></span>
<span class="line" data-v-eddd652c><span style="color:#FF79C6;" data-v-eddd652c>let</span><span style="color:#F8F8F2;" data-v-eddd652c> cubeArr </span><span style="color:#FF79C6;" data-v-eddd652c>=</span><span style="color:#F8F8F2;" data-v-eddd652c> []</span></span>
<span class="line" data-v-eddd652c><span style="color:#FF79C6;" data-v-eddd652c>for</span><span style="color:#F8F8F2;" data-v-eddd652c>(</span><span style="color:#FF79C6;" data-v-eddd652c>let</span><span style="color:#F8F8F2;" data-v-eddd652c> i </span><span style="color:#FF79C6;" data-v-eddd652c>=</span><span style="color:#FF79C6;" data-v-eddd652c> -</span><span style="color:#BD93F9;" data-v-eddd652c>5</span><span style="color:#F8F8F2;" data-v-eddd652c>;i</span><span style="color:#FF79C6;" data-v-eddd652c>&lt;</span><span style="color:#BD93F9;" data-v-eddd652c>5</span><span style="color:#F8F8F2;" data-v-eddd652c>;i</span><span style="color:#FF79C6;" data-v-eddd652c>++</span><span style="color:#F8F8F2;" data-v-eddd652c>) { </span><span style="color:#6272A4;" data-v-eddd652c>// 创建多个立方体</span></span>
<span class="line" data-v-eddd652c><span style="color:#FF79C6;" data-v-eddd652c>    for</span><span style="color:#F8F8F2;" data-v-eddd652c>(</span><span style="color:#FF79C6;" data-v-eddd652c>let</span><span style="color:#F8F8F2;" data-v-eddd652c> j </span><span style="color:#FF79C6;" data-v-eddd652c>=</span><span style="color:#FF79C6;" data-v-eddd652c>  -</span><span style="color:#BD93F9;" data-v-eddd652c>5</span><span style="color:#F8F8F2;" data-v-eddd652c>;j </span><span style="color:#FF79C6;" data-v-eddd652c>&lt;</span><span style="color:#BD93F9;" data-v-eddd652c>5</span><span style="color:#F8F8F2;" data-v-eddd652c>;j</span><span style="color:#FF79C6;" data-v-eddd652c>++</span><span style="color:#F8F8F2;" data-v-eddd652c>) {</span></span>
<span class="line" data-v-eddd652c><span style="color:#FF79C6;" data-v-eddd652c>        for</span><span style="color:#F8F8F2;" data-v-eddd652c>(</span><span style="color:#FF79C6;" data-v-eddd652c>let</span><span style="color:#F8F8F2;" data-v-eddd652c> z </span><span style="color:#FF79C6;" data-v-eddd652c>=</span><span style="color:#FF79C6;" data-v-eddd652c> -</span><span style="color:#BD93F9;" data-v-eddd652c>5</span><span style="color:#F8F8F2;" data-v-eddd652c>;z</span><span style="color:#FF79C6;" data-v-eddd652c>&lt;</span><span style="color:#BD93F9;" data-v-eddd652c>5</span><span style="color:#F8F8F2;" data-v-eddd652c>;z</span><span style="color:#FF79C6;" data-v-eddd652c>++</span><span style="color:#F8F8F2;" data-v-eddd652c>) {</span></span>
<span class="line" data-v-eddd652c><span style="color:#FF79C6;" data-v-eddd652c>            const</span><span style="color:#F8F8F2;" data-v-eddd652c> cube </span><span style="color:#FF79C6;" data-v-eddd652c>=</span><span style="color:#FF79C6;font-weight:bold;" data-v-eddd652c> new</span><span style="color:#BD93F9;" data-v-eddd652c> THREE</span><span style="color:#F8F8F2;" data-v-eddd652c>.</span><span style="color:#50FA7B;" data-v-eddd652c>Mesh</span><span style="color:#F8F8F2;" data-v-eddd652c>(cubeGeometry,material); </span><span style="color:#6272A4;" data-v-eddd652c>// 创建立方体网格</span></span>
<span class="line" data-v-eddd652c><span style="color:#F8F8F2;" data-v-eddd652c>            cube.position.</span><span style="color:#50FA7B;" data-v-eddd652c>set</span><span style="color:#F8F8F2;" data-v-eddd652c>(i,j,z); </span><span style="color:#6272A4;" data-v-eddd652c>// 设置立方体网格的位置</span></span>
<span class="line" data-v-eddd652c><span style="color:#F8F8F2;" data-v-eddd652c>            scene.</span><span style="color:#50FA7B;" data-v-eddd652c>add</span><span style="color:#F8F8F2;" data-v-eddd652c>(cube); </span><span style="color:#6272A4;" data-v-eddd652c>// 将立方体网格添加到场景中</span></span>
<span class="line" data-v-eddd652c><span style="color:#F8F8F2;" data-v-eddd652c>            cubeArr.</span><span style="color:#50FA7B;" data-v-eddd652c>push</span><span style="color:#F8F8F2;" data-v-eddd652c>(cube) </span><span style="color:#6272A4;" data-v-eddd652c>// 将立方体放入 cubeArr 数组中</span></span>
<span class="line" data-v-eddd652c><span style="color:#F8F8F2;" data-v-eddd652c>        }</span></span>
<span class="line" data-v-eddd652c><span style="color:#F8F8F2;" data-v-eddd652c>    }</span></span>
<span class="line" data-v-eddd652c><span style="color:#F8F8F2;" data-v-eddd652c>}</span></span>
<span class="line" data-v-eddd652c></span>
<span class="line" data-v-eddd652c><span style="color:#FF79C6;" data-v-eddd652c>function</span><span style="color:#50FA7B;" data-v-eddd652c> onPointerMove</span><span style="color:#F8F8F2;" data-v-eddd652c>(</span><span style="color:#FFB86C;font-style:italic;" data-v-eddd652c>event</span><span style="color:#F8F8F2;" data-v-eddd652c>) {</span></span>
<span class="line" data-v-eddd652c><span style="color:#F8F8F2;" data-v-eddd652c>    mouse.x </span><span style="color:#FF79C6;" data-v-eddd652c>=</span><span style="color:#F8F8F2;" data-v-eddd652c> (event.clientX </span><span style="color:#FF79C6;" data-v-eddd652c>/</span><span style="color:#F8F8F2;" data-v-eddd652c> window.innerWidth) </span><span style="color:#FF79C6;" data-v-eddd652c>*</span><span style="color:#BD93F9;" data-v-eddd652c>2</span><span style="color:#FF79C6;" data-v-eddd652c> -</span><span style="color:#BD93F9;" data-v-eddd652c> 1</span><span style="color:#F8F8F2;" data-v-eddd652c>; </span><span style="color:#6272A4;" data-v-eddd652c>// 计算鼠标在屏幕上的位置，转换为 Three.js 坐标系的位置</span></span>
<span class="line" data-v-eddd652c><span style="color:#F8F8F2;" data-v-eddd652c>    mouse.y </span><span style="color:#FF79C6;" data-v-eddd652c>=</span><span style="color:#FF79C6;" data-v-eddd652c> -</span><span style="color:#F8F8F2;" data-v-eddd652c>((event.clientY </span><span style="color:#FF79C6;" data-v-eddd652c>/</span><span style="color:#F8F8F2;" data-v-eddd652c> window.innerHeight)</span><span style="color:#FF79C6;" data-v-eddd652c>*</span><span style="color:#BD93F9;" data-v-eddd652c> 2</span><span style="color:#FF79C6;" data-v-eddd652c> -</span><span style="color:#BD93F9;" data-v-eddd652c> 1</span><span style="color:#F8F8F2;" data-v-eddd652c>);</span></span>
<span class="line" data-v-eddd652c><span style="color:#F8F8F2;" data-v-eddd652c>    raycaster.</span><span style="color:#50FA7B;" data-v-eddd652c>setFromCamera</span><span style="color:#F8F8F2;" data-v-eddd652c>(mouse, camera); </span><span style="color:#6272A4;" data-v-eddd652c>// 从相机透视投影的位置发射一个射线，并求出射线经过的物体</span></span>
<span class="line" data-v-eddd652c><span style="color:#FF79C6;" data-v-eddd652c>    let</span><span style="color:#F8F8F2;" data-v-eddd652c> result </span><span style="color:#FF79C6;" data-v-eddd652c>=</span><span style="color:#F8F8F2;" data-v-eddd652c> raycaster.</span><span style="color:#50FA7B;" data-v-eddd652c>intersectObjects</span><span style="color:#F8F8F2;" data-v-eddd652c>(cubeArr); </span><span style="color:#6272A4;" data-v-eddd652c>// 射线选择器与立方体数组作为参数，返回一个对象数组 result，其中包含射线经过的物体</span></span>
<span class="line" data-v-eddd652c><span style="color:#F8F8F2;" data-v-eddd652c>    result.</span><span style="color:#50FA7B;" data-v-eddd652c>forEach</span><span style="color:#F8F8F2;" data-v-eddd652c>((</span><span style="color:#FFB86C;font-style:italic;" data-v-eddd652c>item</span><span style="color:#F8F8F2;" data-v-eddd652c>) </span><span style="color:#FF79C6;" data-v-eddd652c>=&gt;</span><span style="color:#F8F8F2;" data-v-eddd652c> { </span><span style="color:#6272A4;" data-v-eddd652c>// 遍历射线碰撞得到的所有物体，将它们的材质改为红色</span></span>
<span class="line" data-v-eddd652c><span style="color:#F8F8F2;" data-v-eddd652c>      item.object.material </span><span style="color:#FF79C6;" data-v-eddd652c>=</span><span style="color:#F8F8F2;" data-v-eddd652c> redMaterial;</span></span>
<span class="line" data-v-eddd652c><span style="color:#F8F8F2;" data-v-eddd652c>    });</span></span>
<span class="line" data-v-eddd652c><span style="color:#F8F8F2;" data-v-eddd652c>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;" data-v-eddd652c><div class="line-number" data-v-eddd652c></div><div class="line-number" data-v-eddd652c></div><div class="line-number" data-v-eddd652c></div><div class="line-number" data-v-eddd652c></div><div class="line-number" data-v-eddd652c></div><div class="line-number" data-v-eddd652c></div><div class="line-number" data-v-eddd652c></div><div class="line-number" data-v-eddd652c></div><div class="line-number" data-v-eddd652c></div><div class="line-number" data-v-eddd652c></div><div class="line-number" data-v-eddd652c></div><div class="line-number" data-v-eddd652c></div><div class="line-number" data-v-eddd652c></div><div class="line-number" data-v-eddd652c></div><div class="line-number" data-v-eddd652c></div><div class="line-number" data-v-eddd652c></div><div class="line-number" data-v-eddd652c></div><div class="line-number" data-v-eddd652c></div><div class="line-number" data-v-eddd652c></div><div class="line-number" data-v-eddd652c></div><div class="line-number" data-v-eddd652c></div><div class="line-number" data-v-eddd652c></div><div class="line-number" data-v-eddd652c></div><div class="line-number" data-v-eddd652c></div><div class="line-number" data-v-eddd652c></div><div class="line-number" data-v-eddd652c></div><div class="line-number" data-v-eddd652c></div><div class="line-number" data-v-eddd652c></div></div></div>`,1)),B("div",fd,null,512),t[2]||(t[2]=X(`<h2 id="文字显示隐藏" tabindex="-1" data-v-eddd652c><a class="header-anchor" href="#文字显示隐藏" data-v-eddd652c><span data-v-eddd652c>文字显示隐藏</span></a></h2><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#282A36;color:#F8F8F2;" data-v-eddd652c><pre class="shiki dracula vp-code" data-v-eddd652c><code data-v-eddd652c><span class="line" data-v-eddd652c><span style="color:#6272A4;" data-v-eddd652c>// 月亮Label隐藏</span></span>
<span class="line" data-v-eddd652c><span style="color:#FF79C6;" data-v-eddd652c>const</span><span style="color:#F8F8F2;" data-v-eddd652c> elapsed </span><span style="color:#FF79C6;" data-v-eddd652c>=</span><span style="color:#F8F8F2;" data-v-eddd652c> clock.</span><span style="color:#50FA7B;" data-v-eddd652c>getElapsedTime</span><span style="color:#F8F8F2;" data-v-eddd652c>();</span></span>
<span class="line" data-v-eddd652c><span style="color:#F8F8F2;" data-v-eddd652c>moon.position.</span><span style="color:#50FA7B;" data-v-eddd652c>set</span><span style="color:#F8F8F2;" data-v-eddd652c>(Math.</span><span style="color:#50FA7B;" data-v-eddd652c>sin</span><span style="color:#F8F8F2;" data-v-eddd652c>(elapsed) </span><span style="color:#FF79C6;" data-v-eddd652c>*</span><span style="color:#BD93F9;" data-v-eddd652c> 8</span><span style="color:#F8F8F2;" data-v-eddd652c>, </span><span style="color:#BD93F9;" data-v-eddd652c>0</span><span style="color:#F8F8F2;" data-v-eddd652c>, Math.</span><span style="color:#50FA7B;" data-v-eddd652c>cos</span><span style="color:#F8F8F2;" data-v-eddd652c>(elapsed) </span><span style="color:#FF79C6;" data-v-eddd652c>*</span><span style="color:#BD93F9;" data-v-eddd652c> 8</span><span style="color:#F8F8F2;" data-v-eddd652c>);</span></span>
<span class="line" data-v-eddd652c></span>
<span class="line" data-v-eddd652c><span style="color:#FF79C6;" data-v-eddd652c>const</span><span style="color:#F8F8F2;" data-v-eddd652c> moonPosition </span><span style="color:#FF79C6;" data-v-eddd652c>=</span><span style="color:#F8F8F2;" data-v-eddd652c> moon.position.</span><span style="color:#50FA7B;" data-v-eddd652c>clone</span><span style="color:#F8F8F2;" data-v-eddd652c>();</span></span>
<span class="line" data-v-eddd652c><span style="color:#FF79C6;" data-v-eddd652c>const</span><span style="color:#F8F8F2;" data-v-eddd652c> cameraPos </span><span style="color:#FF79C6;" data-v-eddd652c>=</span><span style="color:#F8F8F2;" data-v-eddd652c> camera.position.</span><span style="color:#50FA7B;" data-v-eddd652c>clone</span><span style="color:#F8F8F2;" data-v-eddd652c>()</span></span>
<span class="line" data-v-eddd652c><span style="color:#6272A4;" data-v-eddd652c>/*</span></span>
<span class="line" data-v-eddd652c><span style="color:#6272A4;" data-v-eddd652c>通过 moonPosition.clone() 和 camera.position.clone() 克隆 moon 的位置和摄像机的位置，避免直接修改 moonPosition 和 cameraPos 对象的值。</span></span>
<span class="line" data-v-eddd652c><span style="color:#6272A4;" data-v-eddd652c>通过 moonPosition.sub(cameraPos) 计算出从摄像机指向 moon 的向量。</span></span>
<span class="line" data-v-eddd652c><span style="color:#6272A4;" data-v-eddd652c>通过 .normalize() 将向量转换为单位向量，即长度为 1 的向量，方便后续的计算。这样得到的向量就是一个方向，指向摄像机位置和 moon 位置之间的向量。</span></span>
<span class="line" data-v-eddd652c><span style="color:#6272A4;" data-v-eddd652c>*/</span></span>
<span class="line" data-v-eddd652c><span style="color:#F8F8F2;" data-v-eddd652c>rayCasterMoon.</span><span style="color:#50FA7B;" data-v-eddd652c>set</span><span style="color:#F8F8F2;" data-v-eddd652c>(cameraPos,moonPosition.</span><span style="color:#50FA7B;" data-v-eddd652c>sub</span><span style="color:#F8F8F2;" data-v-eddd652c>(cameraPos).</span><span style="color:#50FA7B;" data-v-eddd652c>normalize</span><span style="color:#F8F8F2;" data-v-eddd652c>())</span></span>
<span class="line" data-v-eddd652c><span style="color:#FF79C6;" data-v-eddd652c>const</span><span style="color:#F8F8F2;" data-v-eddd652c> intersectsMoon </span><span style="color:#FF79C6;" data-v-eddd652c>=</span><span style="color:#F8F8F2;" data-v-eddd652c> rayCasterMoon.</span><span style="color:#50FA7B;" data-v-eddd652c>intersectObjects</span><span style="color:#F8F8F2;" data-v-eddd652c>(scene.children,</span><span style="color:#BD93F9;" data-v-eddd652c>true</span><span style="color:#F8F8F2;" data-v-eddd652c>)</span></span>
<span class="line" data-v-eddd652c><span style="color:#FF79C6;" data-v-eddd652c>if</span><span style="color:#F8F8F2;" data-v-eddd652c>(intersectsMoon.length </span><span style="color:#FF79C6;" data-v-eddd652c>&gt;</span><span style="color:#BD93F9;" data-v-eddd652c>0</span><span style="color:#FF79C6;" data-v-eddd652c> &amp;&amp;</span><span style="color:#F8F8F2;" data-v-eddd652c> intersectsMoon[</span><span style="color:#BD93F9;" data-v-eddd652c>0</span><span style="color:#F8F8F2;" data-v-eddd652c>].object </span><span style="color:#FF79C6;" data-v-eddd652c>!==</span><span style="color:#F8F8F2;" data-v-eddd652c> moon) {</span></span>
<span class="line" data-v-eddd652c><span style="color:#F8F8F2;" data-v-eddd652c>    moonLabel.element.style.visibility </span><span style="color:#FF79C6;" data-v-eddd652c>=</span><span style="color:#E9F284;" data-v-eddd652c> &#39;</span><span style="color:#F1FA8C;" data-v-eddd652c>hidden</span><span style="color:#E9F284;" data-v-eddd652c>&#39;</span></span>
<span class="line" data-v-eddd652c><span style="color:#F8F8F2;" data-v-eddd652c>}</span><span style="color:#FF79C6;" data-v-eddd652c>else</span><span style="color:#F8F8F2;" data-v-eddd652c>{</span></span>
<span class="line" data-v-eddd652c><span style="color:#F8F8F2;" data-v-eddd652c>    moonLabel.element.style.visibility </span><span style="color:#FF79C6;" data-v-eddd652c>=</span><span style="color:#E9F284;" data-v-eddd652c> &#39;</span><span style="color:#F1FA8C;" data-v-eddd652c>initial</span><span style="color:#E9F284;" data-v-eddd652c>&#39;</span></span>
<span class="line" data-v-eddd652c><span style="color:#F8F8F2;" data-v-eddd652c>}</span></span>
<span class="line" data-v-eddd652c></span>
<span class="line" data-v-eddd652c></span>
<span class="line" data-v-eddd652c><span style="color:#6272A4;" data-v-eddd652c>// 中国Label隐藏</span></span>
<span class="line" data-v-eddd652c></span>
<span class="line" data-v-eddd652c><span style="color:#FF79C6;" data-v-eddd652c>const</span><span style="color:#F8F8F2;" data-v-eddd652c> chinaPosition </span><span style="color:#FF79C6;" data-v-eddd652c>=</span><span style="color:#F8F8F2;" data-v-eddd652c> chinaLabel.position.</span><span style="color:#50FA7B;" data-v-eddd652c>clone</span><span style="color:#F8F8F2;" data-v-eddd652c>();</span></span>
<span class="line" data-v-eddd652c></span>
<span class="line" data-v-eddd652c><span style="color:#6272A4;" data-v-eddd652c>// 计算出标签跟摄像机的距离</span></span>
<span class="line" data-v-eddd652c><span style="color:#FF79C6;" data-v-eddd652c>const</span><span style="color:#F8F8F2;" data-v-eddd652c> labelDistance </span><span style="color:#FF79C6;" data-v-eddd652c>=</span><span style="color:#F8F8F2;" data-v-eddd652c> chinaPosition.</span><span style="color:#50FA7B;" data-v-eddd652c>distanceTo</span><span style="color:#F8F8F2;" data-v-eddd652c>(camera.position);</span></span>
<span class="line" data-v-eddd652c><span style="color:#6272A4;" data-v-eddd652c>// 检测射线的碰撞</span></span>
<span class="line" data-v-eddd652c><span style="color:#6272A4;" data-v-eddd652c>// 向量(坐标)从世界空间投影到相机的标准化设备坐标 (NDC) 空间。</span></span>
<span class="line" data-v-eddd652c><span style="color:#6272A4;" data-v-eddd652c>/*</span></span>
<span class="line" data-v-eddd652c><span style="color:#6272A4;" data-v-eddd652c>project() 方法是 Object3D 类的一个方法，用于将三维坐标转换为屏幕上的二维坐标。</span></span>
<span class="line" data-v-eddd652c><span style="color:#6272A4;" data-v-eddd652c>它需要传入一个参数 camera，表示用于投影计算的相机</span></span>
<span class="line" data-v-eddd652c><span style="color:#6272A4;" data-v-eddd652c>*/</span></span>
<span class="line" data-v-eddd652c><span style="color:#F8F8F2;" data-v-eddd652c>chinaPosition.</span><span style="color:#50FA7B;" data-v-eddd652c>project</span><span style="color:#F8F8F2;" data-v-eddd652c>(camera);</span></span>
<span class="line" data-v-eddd652c></span>
<span class="line" data-v-eddd652c><span style="color:#F8F8F2;" data-v-eddd652c>raycaster.</span><span style="color:#50FA7B;" data-v-eddd652c>setFromCamera</span><span style="color:#F8F8F2;" data-v-eddd652c>(chinaPosition,camera);</span></span>
<span class="line" data-v-eddd652c><span style="color:#F8F8F2;" data-v-eddd652c>       </span></span>
<span class="line" data-v-eddd652c><span style="color:#FF79C6;" data-v-eddd652c>const</span><span style="color:#F8F8F2;" data-v-eddd652c> intersects </span><span style="color:#FF79C6;" data-v-eddd652c>=</span><span style="color:#F8F8F2;" data-v-eddd652c> raycaster.</span><span style="color:#50FA7B;" data-v-eddd652c>intersectObjects</span><span style="color:#F8F8F2;" data-v-eddd652c>(scene.children,</span><span style="color:#BD93F9;" data-v-eddd652c>true</span><span style="color:#F8F8F2;" data-v-eddd652c>)</span></span>
<span class="line" data-v-eddd652c></span>
<span class="line" data-v-eddd652c><span style="color:#FF79C6;" data-v-eddd652c>if</span><span style="color:#F8F8F2;" data-v-eddd652c>(intersects.length </span><span style="color:#FF79C6;" data-v-eddd652c>==</span><span style="color:#BD93F9;" data-v-eddd652c> 0</span><span style="color:#F8F8F2;" data-v-eddd652c>){</span></span>
<span class="line" data-v-eddd652c><span style="color:#F8F8F2;" data-v-eddd652c>  chinaLabel.element.style.visibility </span><span style="color:#FF79C6;" data-v-eddd652c>=</span><span style="color:#E9F284;" data-v-eddd652c> &#39;</span><span style="color:#F1FA8C;" data-v-eddd652c>initial</span><span style="color:#E9F284;" data-v-eddd652c>&#39;</span></span>
<span class="line" data-v-eddd652c><span style="color:#F8F8F2;" data-v-eddd652c>}</span><span style="color:#FF79C6;" data-v-eddd652c>else</span><span style="color:#F8F8F2;" data-v-eddd652c>{</span></span>
<span class="line" data-v-eddd652c><span style="color:#FF79C6;" data-v-eddd652c>  const</span><span style="color:#F8F8F2;" data-v-eddd652c> minDistance </span><span style="color:#FF79C6;" data-v-eddd652c>=</span><span style="color:#F8F8F2;" data-v-eddd652c> intersects[</span><span style="color:#BD93F9;" data-v-eddd652c>0</span><span style="color:#F8F8F2;" data-v-eddd652c>].distance;</span></span>
<span class="line" data-v-eddd652c><span style="color:#FF79C6;" data-v-eddd652c>  if</span><span style="color:#F8F8F2;" data-v-eddd652c>(minDistance</span><span style="color:#FF79C6;" data-v-eddd652c>&lt;</span><span style="color:#F8F8F2;" data-v-eddd652c>labelDistance){</span></span>
<span class="line" data-v-eddd652c><span style="color:#F8F8F2;" data-v-eddd652c>    chinaLabel.element.style.visibility </span><span style="color:#FF79C6;" data-v-eddd652c>=</span><span style="color:#E9F284;" data-v-eddd652c> &#39;</span><span style="color:#F1FA8C;" data-v-eddd652c>hidden</span><span style="color:#E9F284;" data-v-eddd652c>&#39;</span></span>
<span class="line" data-v-eddd652c><span style="color:#F8F8F2;" data-v-eddd652c>  }</span><span style="color:#FF79C6;" data-v-eddd652c>else</span><span style="color:#F8F8F2;" data-v-eddd652c>{</span></span>
<span class="line" data-v-eddd652c><span style="color:#F8F8F2;" data-v-eddd652c>    chinaLabel.element.style.visibility </span><span style="color:#FF79C6;" data-v-eddd652c>=</span><span style="color:#E9F284;" data-v-eddd652c> &#39;</span><span style="color:#F1FA8C;" data-v-eddd652c>initial</span><span style="color:#E9F284;" data-v-eddd652c>&#39;</span></span>
<span class="line" data-v-eddd652c><span style="color:#F8F8F2;" data-v-eddd652c>  }</span></span>
<span class="line" data-v-eddd652c><span style="color:#F8F8F2;" data-v-eddd652c>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;" data-v-eddd652c><div class="line-number" data-v-eddd652c></div><div class="line-number" data-v-eddd652c></div><div class="line-number" data-v-eddd652c></div><div class="line-number" data-v-eddd652c></div><div class="line-number" data-v-eddd652c></div><div class="line-number" data-v-eddd652c></div><div class="line-number" data-v-eddd652c></div><div class="line-number" data-v-eddd652c></div><div class="line-number" data-v-eddd652c></div><div class="line-number" data-v-eddd652c></div><div class="line-number" data-v-eddd652c></div><div class="line-number" data-v-eddd652c></div><div class="line-number" data-v-eddd652c></div><div class="line-number" data-v-eddd652c></div><div class="line-number" data-v-eddd652c></div><div class="line-number" data-v-eddd652c></div><div class="line-number" data-v-eddd652c></div><div class="line-number" data-v-eddd652c></div><div class="line-number" data-v-eddd652c></div><div class="line-number" data-v-eddd652c></div><div class="line-number" data-v-eddd652c></div><div class="line-number" data-v-eddd652c></div><div class="line-number" data-v-eddd652c></div><div class="line-number" data-v-eddd652c></div><div class="line-number" data-v-eddd652c></div><div class="line-number" data-v-eddd652c></div><div class="line-number" data-v-eddd652c></div><div class="line-number" data-v-eddd652c></div><div class="line-number" data-v-eddd652c></div><div class="line-number" data-v-eddd652c></div><div class="line-number" data-v-eddd652c></div><div class="line-number" data-v-eddd652c></div><div class="line-number" data-v-eddd652c></div><div class="line-number" data-v-eddd652c></div><div class="line-number" data-v-eddd652c></div><div class="line-number" data-v-eddd652c></div><div class="line-number" data-v-eddd652c></div><div class="line-number" data-v-eddd652c></div><div class="line-number" data-v-eddd652c></div><div class="line-number" data-v-eddd652c></div><div class="line-number" data-v-eddd652c></div><div class="line-number" data-v-eddd652c></div><div class="line-number" data-v-eddd652c></div><div class="line-number" data-v-eddd652c></div><div class="line-number" data-v-eddd652c></div><div class="line-number" data-v-eddd652c></div><div class="line-number" data-v-eddd652c></div><div class="line-number" data-v-eddd652c></div></div></div>`,2)),B("div",wd,null,512),t[3]||(t[3]=B("h1",{id:"参考",tabindex:"-1"},[B("a",{class:"header-anchor",href:"#参考"},[B("span",null,"参考")])],-1)),t[4]||(t[4]=B("p",null,[hd("参考："),B("a",{href:"https://threejs.org/",target:"_blank",rel:"noopener noreferrer"},"https://threejs.org/")],-1))])}const Td=ud(Bd,[["render",gd],["__scopeId","data-v-eddd652c"],["__file","threejs-raycaster.html.vue"]]),Rd=JSON.parse('{"path":"/threejs/threejs-raycaster.html","title":"ThreeJS中的射线检测","lang":"en-US","frontmatter":{"title":"ThreeJS中的射线检测","category":["ThreeJS"],"date":"2022-01-24T00:00:00.000Z","description":"Raycaster Raycaster( origin : Vector3, direction : Vector3, near : Float, far : Float ) origin —— 光线投射的原点向量。 direction —— 向射线提供方向的方向向量，应当被标准化。 near —— 返回的所有结果比near远。near不能为负值，其默...","head":[["meta",{"property":"og:url","content":"https://luxiag.github.io/luxiag/blog/threejs/threejs-raycaster.html"}],["meta",{"property":"og:title","content":"ThreeJS中的射线检测"}],["meta",{"property":"og:description","content":"Raycaster Raycaster( origin : Vector3, direction : Vector3, near : Float, far : Float ) origin —— 光线投射的原点向量。 direction —— 向射线提供方向的方向向量，应当被标准化。 near —— 返回的所有结果比near远。near不能为负值，其默..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2024-11-10T14:15:12.000Z"}],["meta",{"property":"article:published_time","content":"2022-01-24T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-11-10T14:15:12.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"ThreeJS中的射线检测\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-01-24T00:00:00.000Z\\",\\"dateModified\\":\\"2024-11-10T14:15:12.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"luxiag\\",\\"url\\":\\"https://luxiag.github.io/luxiag\\"}]}"]]},"headers":[{"level":2,"title":"Raycaster","slug":"raycaster","link":"#raycaster","children":[]},{"level":2,"title":"demo","slug":"demo","link":"#demo","children":[]},{"level":2,"title":"文字显示隐藏","slug":"文字显示隐藏","link":"#文字显示隐藏","children":[]}],"git":{"createdTime":1681717941000,"updatedTime":1731248112000,"contributors":[{"name":"luxiag","email":"luxiag@qq.com","commits":8},{"name":"卢祥","email":"example@qq.com","commits":2}]},"readingTime":{"minutes":8.51,"words":2552},"filePathRelative":"threejs/threejs-raycaster.md","localizedDate":"January 24, 2022","excerpt":"<h2>Raycaster</h2>\\n<ul>\\n<li>\\n<p><code>Raycaster( origin : Vector3, direction : Vector3, near : Float, far : Float )</code></p>\\n<ul>\\n<li>origin —— 光线投射的原点向量。</li>\\n<li>direction —— 向射线提供方向的方向向量，应当被标准化。</li>\\n<li>near —— 返回的所有结果比near远。near不能为负值，其默认值为0。</li>\\n<li>far —— 返回的所有结果都比far近。far不能小于near，其默认值为Infinity（正无穷。）</li>\\n</ul>\\n<p>这将创建一个新的raycaster对象。</p>\\n</li>\\n<li>\\n<p><code>.setFromCamera ( coords : Vector2, camera : Camera ) : undefined</code></p>\\n<ul>\\n<li>coords —— 在标准化设备坐标中鼠标的二维坐标 —— X分量与Y分量应当在-1到1之间。</li>\\n<li>camera —— 射线所来源的摄像机。</li>\\n</ul>\\n<p>使用一个新的原点和方向来更新射线。</p>\\n</li>\\n<li>\\n<p><code>.intersectObject ( object : Object3D, recursive : Boolean, optionalTarget : Array ) : Array</code></p>\\n<ul>\\n<li>object —— 检查与射线相交的物体。</li>\\n<li>recursive —— 若为true，则同时也会检查所有的后代。否则将只会检查对象本身。默认值为true。</li>\\n<li>optionalTarget — （可选）设置结果的目标数组。如果不设置这个值，则一个新的Array会被实例化；如果设置了这个值，则在每次调用之前必须清空这个数组（例如：array.length = 0;）。</li>\\n</ul>\\n<p>检测所有在射线与物体之间，包括或不包括后代的相交部分。返回结果时，相交部分将按距离进行排序，最近的位于第一个。\\n该方法返回一个包含有交叉部分的数组:</p>\\n</li>\\n</ul>","autoDesc":true}');export{Td as comp,Rd as data};
