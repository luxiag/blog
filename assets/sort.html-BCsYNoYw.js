import{_ as n,e as l,g as a,o as p}from"./app-Dt3FNJM0.js";const e="/blog/assets/501001110011832323-BJ7jkyvJ.png",F={};function o(r,s){return p(),l("div",null,s[0]||(s[0]=[a('<figure><img src="'+e+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="冒泡排序" tabindex="-1"><a class="header-anchor" href="#冒泡排序"><span>冒泡排序</span></a></h2><ul><li>比较相邻的元素。如果第一个比第二个大，就交换它们两个；</li><li>对每一对相邻元素作同样的工作，从开始第一对到结尾的最后一对，这样在最后的元素应该会是最大的数；</li><li>针对所有的元素重复以上的步骤，除了最后一个；</li><li>重复步骤 1~3，直到排序完成。</li></ul><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">function</span><span style="color:#50FA7B;"> bubbleSort</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">oldArr</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#FF79C6;">  let</span><span style="color:#F8F8F2;"> arr </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> oldArr;</span></span>
<span class="line"><span style="color:#FF79C6;">  for</span><span style="color:#F8F8F2;"> (</span><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> i </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> 0</span><span style="color:#F8F8F2;">; i </span><span style="color:#FF79C6;">&lt;</span><span style="color:#F8F8F2;"> arr.length </span><span style="color:#FF79C6;">-</span><span style="color:#BD93F9;"> 1</span><span style="color:#F8F8F2;">; i</span><span style="color:#FF79C6;">++</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#6272A4;">    // -i 跟i后面的元素进行比较</span></span>
<span class="line"><span style="color:#FF79C6;">    for</span><span style="color:#F8F8F2;"> (</span><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> j </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> 0</span><span style="color:#F8F8F2;">; j </span><span style="color:#FF79C6;">&lt;</span><span style="color:#F8F8F2;"> arr.length </span><span style="color:#FF79C6;">-</span><span style="color:#BD93F9;"> 1</span><span style="color:#FF79C6;"> -</span><span style="color:#F8F8F2;"> i; j</span><span style="color:#FF79C6;">++</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#6272A4;">      // 相邻元素比较</span></span>
<span class="line"><span style="color:#FF79C6;">      if</span><span style="color:#F8F8F2;"> (arr[j] </span><span style="color:#FF79C6;">&gt;</span><span style="color:#F8F8F2;"> arr[j </span><span style="color:#FF79C6;">+</span><span style="color:#BD93F9;"> 1</span><span style="color:#F8F8F2;">]) {</span></span>
<span class="line"><span style="color:#6272A4;">        // 元素交换</span></span>
<span class="line"><span style="color:#FF79C6;">        const</span><span style="color:#F8F8F2;"> TEMP </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> arr[j </span><span style="color:#FF79C6;">+</span><span style="color:#BD93F9;"> 1</span><span style="color:#F8F8F2;">];</span></span>
<span class="line"><span style="color:#F8F8F2;">        arr[j </span><span style="color:#FF79C6;">+</span><span style="color:#BD93F9;"> 1</span><span style="color:#F8F8F2;">] </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> arr[j];</span></span>
<span class="line"><span style="color:#F8F8F2;">        arr[j] </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> TEMP;</span></span>
<span class="line"><span style="color:#F8F8F2;">      }</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#FF79C6;">  return</span><span style="color:#F8F8F2;"> arr;</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="选择排序" tabindex="-1"><a class="header-anchor" href="#选择排序"><span>选择排序</span></a></h2><ul><li>首先在未排序序列中找到最小（大）元素，存放到排序序列的起始位置</li><li>再从剩余未排序元素中继续寻找最小（大）元素，然后放到已排序序列的末尾</li><li>以此类推，直到所有元素均排序完毕。</li></ul><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">function</span><span style="color:#50FA7B;"> selectionSort</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">oldArr</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#FF79C6;">  let</span><span style="color:#F8F8F2;"> arr </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> oldArr;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">  let</span><span style="color:#F8F8F2;"> minIndex, temp;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">  for</span><span style="color:#F8F8F2;"> (</span><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> i </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> 0</span><span style="color:#F8F8F2;">; i </span><span style="color:#FF79C6;">&lt;</span><span style="color:#F8F8F2;"> arr.length </span><span style="color:#FF79C6;">-</span><span style="color:#BD93F9;"> 1</span><span style="color:#F8F8F2;">; i</span><span style="color:#FF79C6;">++</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">    minIndex </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> j;</span></span>
<span class="line"><span style="color:#6272A4;">    // 比较后面的元素</span></span>
<span class="line"><span style="color:#FF79C6;">    for</span><span style="color:#F8F8F2;"> (</span><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> j </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> i </span><span style="color:#FF79C6;">+</span><span style="color:#BD93F9;"> 1</span><span style="color:#F8F8F2;">; j </span><span style="color:#FF79C6;">&lt;</span><span style="color:#F8F8F2;"> arr.length; j</span><span style="color:#FF79C6;">++</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#FF79C6;">      if</span><span style="color:#F8F8F2;"> (arr[j] </span><span style="color:#FF79C6;">&lt;</span><span style="color:#F8F8F2;"> arr[minIndex]) {</span></span>
<span class="line"><span style="color:#6272A4;">        // 获取最小元素的index</span></span>
<span class="line"><span style="color:#F8F8F2;">        minIndex </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> j;</span></span>
<span class="line"><span style="color:#F8F8F2;">      }</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#6272A4;">    // 将最小元素移动到已排序的末尾</span></span>
<span class="line"><span style="color:#F8F8F2;">    temp </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> arr[i];</span></span>
<span class="line"><span style="color:#F8F8F2;">    arr[i] </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> arr[minIndex];</span></span>
<span class="line"><span style="color:#F8F8F2;">    arr[minIndex] </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> temp;</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#FF79C6;">  return</span><span style="color:#F8F8F2;"> arr;</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="插入排序" tabindex="-1"><a class="header-anchor" href="#插入排序"><span>插入排序</span></a></h2><ul><li>以第一个元素建立排序序列</li><li>取出下一个元素，在排序好的序列中进行对比排序插入</li><li>以此类推，直到所有元素均排序完毕。</li></ul><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">function</span><span style="color:#50FA7B;"> insertionSort</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">oldArr</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#FF79C6;">  let</span><span style="color:#F8F8F2;"> arr </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> oldArr;</span></span>
<span class="line"><span style="color:#FF79C6;">  let</span><span style="color:#F8F8F2;"> preIndex, current;</span></span>
<span class="line"><span style="color:#FF79C6;">  for</span><span style="color:#F8F8F2;"> (</span><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> i </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> 1</span><span style="color:#F8F8F2;">; i </span><span style="color:#FF79C6;">&lt;</span><span style="color:#F8F8F2;"> arr.length; i</span><span style="color:#FF79C6;">++</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#6272A4;">    // 获取序列末尾元素</span></span>
<span class="line"><span style="color:#F8F8F2;">    preIndex </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> i </span><span style="color:#FF79C6;">-</span><span style="color:#BD93F9;"> 1</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">    current </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> arr[i];</span></span>
<span class="line"><span style="color:#6272A4;">    // 与末尾元素进行比较  末尾元素大于比较元素 进行后移</span></span>
<span class="line"><span style="color:#FF79C6;">    while</span><span style="color:#F8F8F2;"> (preIndex </span><span style="color:#FF79C6;">&gt;=</span><span style="color:#BD93F9;"> 0</span><span style="color:#FF79C6;"> &amp;&amp;</span><span style="color:#F8F8F2;"> arr[preIndex] </span><span style="color:#FF79C6;">&gt;</span><span style="color:#F8F8F2;"> current) {</span></span>
<span class="line"><span style="color:#F8F8F2;">      arr[preIndex </span><span style="color:#FF79C6;">+</span><span style="color:#BD93F9;"> 1</span><span style="color:#F8F8F2;">] </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> arr[preIndex];</span></span>
<span class="line"><span style="color:#F8F8F2;">      preIndex</span><span style="color:#FF79C6;">--</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#6272A4;">    // 插入小于的元素前面</span></span>
<span class="line"><span style="color:#F8F8F2;">    arr[preIndex </span><span style="color:#FF79C6;">+</span><span style="color:#BD93F9;"> 1</span><span style="color:#F8F8F2;">] </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> current;</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#FF79C6;">  return</span><span style="color:#F8F8F2;"> arr;</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="希尔排序" tabindex="-1"><a class="header-anchor" href="#希尔排序"><span>希尔排序</span></a></h2><ul><li>先将整个待排序的记录序列分割成为若干子序列分别进行直接插入排序</li><li>待整个序列中的记录&quot;基本有序&quot;时，再对全体记录进行依次直接插入排序。</li></ul><table><thead><tr><th>平均时间复杂度</th><th>最好情况</th><th>最坏情况</th><th>空间复杂度</th><th>排序方式</th><th>稳定性</th></tr></thead><tbody><tr><td>O(nlogn)</td><td>O(nlog<sup>2</sup> n)</td><td>O(nlog<sup>2</sup> n)</td><td>O(1)</td><td>In-place</td><td>不稳定</td></tr></tbody></table><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">function</span><span style="color:#50FA7B;"> shellSort</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">oldArr</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#FF79C6;">  let</span><span style="color:#F8F8F2;"> arr </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> oldArr;</span></span>
<span class="line"><span style="color:#FF79C6;">  const</span><span style="color:#F8F8F2;"> len </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> arr.length;</span></span>
<span class="line"><span style="color:#6272A4;">  //以第gap个元素建立 排序序列 分为若干个子序列进行插入排序</span></span>
<span class="line"><span style="color:#FF79C6;">  for</span><span style="color:#F8F8F2;"> (</span><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> gap </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> Math.</span><span style="color:#50FA7B;">floor</span><span style="color:#F8F8F2;">(len </span><span style="color:#FF79C6;">/</span><span style="color:#BD93F9;"> 2</span><span style="color:#F8F8F2;">); gap </span><span style="color:#FF79C6;">&gt;</span><span style="color:#BD93F9;"> 0</span><span style="color:#F8F8F2;">; gap </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> Math.</span><span style="color:#50FA7B;">floor</span><span style="color:#F8F8F2;">(gap </span><span style="color:#FF79C6;">/</span><span style="color:#BD93F9;"> 2</span><span style="color:#F8F8F2;">)) {</span></span>
<span class="line"><span style="color:#6272A4;">    // 开始插入排序</span></span>
<span class="line"><span style="color:#FF79C6;">    for</span><span style="color:#F8F8F2;"> (</span><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> i </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> gap; i </span><span style="color:#FF79C6;">&lt;</span><span style="color:#F8F8F2;"> len; i</span><span style="color:#FF79C6;">++</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#FF79C6;">      let</span><span style="color:#F8F8F2;"> j </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> i;</span></span>
<span class="line"><span style="color:#FF79C6;">      let</span><span style="color:#F8F8F2;"> current </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> arr[i];</span></span>
<span class="line"><span style="color:#FF79C6;">      while</span><span style="color:#F8F8F2;"> (j </span><span style="color:#FF79C6;">-</span><span style="color:#F8F8F2;"> gap </span><span style="color:#FF79C6;">&gt;=</span><span style="color:#BD93F9;"> 0</span><span style="color:#FF79C6;"> &amp;&amp;</span><span style="color:#F8F8F2;"> current </span><span style="color:#FF79C6;">&lt;</span><span style="color:#F8F8F2;"> arr[j </span><span style="color:#FF79C6;">-</span><span style="color:#F8F8F2;"> gap]) {</span></span>
<span class="line"><span style="color:#F8F8F2;">        arr[j] </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> arr[j </span><span style="color:#FF79C6;">-</span><span style="color:#F8F8F2;"> gap];</span></span>
<span class="line"><span style="color:#F8F8F2;">        j </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> j </span><span style="color:#FF79C6;">-</span><span style="color:#F8F8F2;"> gap;</span></span>
<span class="line"><span style="color:#F8F8F2;">      }</span></span>
<span class="line"><span style="color:#F8F8F2;">      arr[j] </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> current;</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#FF79C6;">  return</span><span style="color:#F8F8F2;"> arr;</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="归并排序" tabindex="-1"><a class="header-anchor" href="#归并排序"><span>归并排序</span></a></h2><ul><li>先使每个子序列有序，再使子序列段间有序</li><li>将已有序的子序列合并 <table><thead><tr><th>平均时间复杂度</th><th>最好情况</th><th>最坏情况</th><th>空间复杂度</th><th>排序方式</th><th>稳定性</th></tr></thead><tbody><tr><td>O(nlogn)</td><td>O(nlog n)</td><td>O(nlog n)</td><td>O(n)</td><td>In-place</td><td>不稳定</td></tr></tbody></table></li></ul><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">function</span><span style="color:#50FA7B;"> mergeSort</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">oldArr</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#FF79C6;">  let</span><span style="color:#F8F8F2;"> arr </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> oldArr;</span></span>
<span class="line"><span style="color:#FF79C6;">  const</span><span style="color:#F8F8F2;"> len </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> arr.length;</span></span>
<span class="line"><span style="color:#FF79C6;">  if</span><span style="color:#F8F8F2;"> (len </span><span style="color:#FF79C6;">&lt;</span><span style="color:#BD93F9;"> 2</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#FF79C6;">    return</span><span style="color:#F8F8F2;"> arr;</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#FF79C6;">  let</span><span style="color:#F8F8F2;"> middle </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> Math.</span><span style="color:#50FA7B;">floor</span><span style="color:#F8F8F2;">(len </span><span style="color:#FF79C6;">/</span><span style="color:#BD93F9;"> 2</span><span style="color:#F8F8F2;">),</span></span>
<span class="line"><span style="color:#F8F8F2;">    left </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> arr.</span><span style="color:#50FA7B;">slice</span><span style="color:#F8F8F2;">(</span><span style="color:#BD93F9;">0</span><span style="color:#F8F8F2;">, middle),</span></span>
<span class="line"><span style="color:#F8F8F2;">    right </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> arr.</span><span style="color:#50FA7B;">slice</span><span style="color:#F8F8F2;">(middle);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">  return</span><span style="color:#50FA7B;"> merge</span><span style="color:#F8F8F2;">(</span><span style="color:#50FA7B;">mergeSort</span><span style="color:#F8F8F2;">(left), </span><span style="color:#50FA7B;">mergeSort</span><span style="color:#F8F8F2;">(right));</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">function</span><span style="color:#50FA7B;"> merge</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">left</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">right</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#FF79C6;">  const</span><span style="color:#F8F8F2;"> result </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> [];</span></span>
<span class="line"><span style="color:#FF79C6;">  while</span><span style="color:#F8F8F2;"> (left.length </span><span style="color:#FF79C6;">&gt;</span><span style="color:#BD93F9;"> 0</span><span style="color:#FF79C6;"> &amp;&amp;</span><span style="color:#F8F8F2;"> right.length </span><span style="color:#FF79C6;">&gt;</span><span style="color:#BD93F9;"> 0</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#FF79C6;">    if</span><span style="color:#F8F8F2;"> (left[</span><span style="color:#BD93F9;">0</span><span style="color:#F8F8F2;">] </span><span style="color:#FF79C6;">&lt;=</span><span style="color:#F8F8F2;"> right[</span><span style="color:#BD93F9;">0</span><span style="color:#F8F8F2;">]) {</span></span>
<span class="line"><span style="color:#F8F8F2;">      result.</span><span style="color:#50FA7B;">push</span><span style="color:#F8F8F2;">(left.</span><span style="color:#50FA7B;">shift</span><span style="color:#F8F8F2;">());</span></span>
<span class="line"><span style="color:#F8F8F2;">    } </span><span style="color:#FF79C6;">else</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">      result.</span><span style="color:#50FA7B;">push</span><span style="color:#F8F8F2;">(right.</span><span style="color:#50FA7B;">shift</span><span style="color:#F8F8F2;">());</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#FF79C6;">  while</span><span style="color:#F8F8F2;"> (left.length) {</span></span>
<span class="line"><span style="color:#F8F8F2;">    result.</span><span style="color:#50FA7B;">push</span><span style="color:#F8F8F2;">(left.</span><span style="color:#50FA7B;">shift</span><span style="color:#F8F8F2;">());</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#FF79C6;">  while</span><span style="color:#F8F8F2;"> (right.length) {</span></span>
<span class="line"><span style="color:#F8F8F2;">    result.</span><span style="color:#50FA7B;">push</span><span style="color:#F8F8F2;">(right.</span><span style="color:#50FA7B;">shift</span><span style="color:#F8F8F2;">());</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">  return</span><span style="color:#F8F8F2;"> result;</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="快速排序" tabindex="-1"><a class="header-anchor" href="#快速排序"><span>快速排序</span></a></h2><ul><li>从数列中挑出一个元素，称为 “基准”（pivot）</li><li>把比基准值小的摆放在基准前面，比基准值大的摆在基准的后面</li><li>对左右两边数组重复上述操作</li></ul><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">function</span><span style="color:#50FA7B;"> quickSort</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">arr</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">left</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">right</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#FF79C6;">  let</span><span style="color:#F8F8F2;"> len </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> arr.length,</span></span>
<span class="line"><span style="color:#F8F8F2;">    partitionIndex,</span></span>
<span class="line"><span style="color:#F8F8F2;">    left </span><span style="color:#FF79C6;">=</span><span style="color:#FF79C6;"> typeof</span><span style="color:#F8F8F2;"> left </span><span style="color:#FF79C6;">!=</span><span style="color:#E9F284;"> &quot;</span><span style="color:#F1FA8C;">number</span><span style="color:#E9F284;">&quot;</span><span style="color:#FF79C6;"> ?</span><span style="color:#BD93F9;"> 0</span><span style="color:#FF79C6;"> :</span><span style="color:#F8F8F2;"> left,</span></span>
<span class="line"><span style="color:#F8F8F2;">    right </span><span style="color:#FF79C6;">=</span><span style="color:#FF79C6;"> typeof</span><span style="color:#F8F8F2;"> right </span><span style="color:#FF79C6;">!=</span><span style="color:#E9F284;"> &quot;</span><span style="color:#F1FA8C;">number</span><span style="color:#E9F284;">&quot;</span><span style="color:#FF79C6;"> ?</span><span style="color:#F8F8F2;"> len </span><span style="color:#FF79C6;">-</span><span style="color:#BD93F9;"> 1</span><span style="color:#FF79C6;"> :</span><span style="color:#F8F8F2;"> right;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">  if</span><span style="color:#F8F8F2;"> (left </span><span style="color:#FF79C6;">&lt;</span><span style="color:#F8F8F2;"> right) {</span></span>
<span class="line"><span style="color:#F8F8F2;">    partitionIndex </span><span style="color:#FF79C6;">=</span><span style="color:#50FA7B;"> partition</span><span style="color:#F8F8F2;">(arr, left, right);</span></span>
<span class="line"><span style="color:#50FA7B;">    quickSort</span><span style="color:#F8F8F2;">(arr, left, partitionIndex </span><span style="color:#FF79C6;">-</span><span style="color:#BD93F9;"> 1</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#50FA7B;">    quickSort</span><span style="color:#F8F8F2;">(arr, partitionIndex </span><span style="color:#FF79C6;">+</span><span style="color:#BD93F9;"> 1</span><span style="color:#F8F8F2;">, right);</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#FF79C6;">  return</span><span style="color:#F8F8F2;"> arr;</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#FF79C6;">function</span><span style="color:#50FA7B;"> partition</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">arr</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">left</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">right</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#6272A4;">  // 基准值</span></span>
<span class="line"><span style="color:#FF79C6;">  let</span><span style="color:#F8F8F2;"> pivot </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> left,</span></span>
<span class="line"><span style="color:#F8F8F2;">    index </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> pivot </span><span style="color:#FF79C6;">+</span><span style="color:#BD93F9;"> 1</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#FF79C6;">  for</span><span style="color:#F8F8F2;"> (</span><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> i </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> index; i </span><span style="color:#FF79C6;">&lt;=</span><span style="color:#F8F8F2;"> right; i</span><span style="color:#FF79C6;">++</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#FF79C6;">    if</span><span style="color:#F8F8F2;"> (arr[i] </span><span style="color:#FF79C6;">&lt;</span><span style="color:#F8F8F2;"> arr[pivot]) {</span></span>
<span class="line"><span style="color:#6272A4;">      // 交换位置</span></span>
<span class="line"><span style="color:#50FA7B;">      swap</span><span style="color:#F8F8F2;">(arr, i, index);</span></span>
<span class="line"><span style="color:#F8F8F2;">      index</span><span style="color:#FF79C6;">++</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#50FA7B;">  swap</span><span style="color:#F8F8F2;">(arr, pivot, (index </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> 1</span><span style="color:#F8F8F2;">));</span></span>
<span class="line"><span style="color:#FF79C6;">  return</span><span style="color:#F8F8F2;"> index </span><span style="color:#FF79C6;">-</span><span style="color:#BD93F9;"> 1</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">function</span><span style="color:#50FA7B;"> swap</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">arr</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">i</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">j</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#FF79C6;">  let</span><span style="color:#F8F8F2;"> temp </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> arr[i];</span></span>
<span class="line"><span style="color:#F8F8F2;">  arr[i] </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> arr[j];</span></span>
<span class="line"><span style="color:#F8F8F2;">  arr[j] </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> temp;</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="堆排序" tabindex="-1"><a class="header-anchor" href="#堆排序"><span>堆排序</span></a></h2><ul><li>二叉树每个结点的值都大于其左孩子和右孩子结点的值，称之为大根堆</li><li>首先将待排序的数组构造成一个大根堆，此时，整个数组的最大值就是堆结构的顶端</li><li>将顶端的数与末尾的数交换，此时，末尾的数为最大值，剩余待排序数组个数为 n-1</li><li>将剩余的 n-1 个数再构造成大根堆，再将顶端数与 n-1 位置的数交换，如此反复执行，便能得到有序数组</li></ul><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">function</span><span style="color:#50FA7B;"> heapSort</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">arr</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#50FA7B;">  heapInsert</span><span style="color:#F8F8F2;">(arr);</span></span>
<span class="line"><span style="color:#FF79C6;">  let</span><span style="color:#F8F8F2;"> size </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> arr.length;</span></span>
<span class="line"><span style="color:#FF79C6;">  while</span><span style="color:#F8F8F2;"> (size </span><span style="color:#FF79C6;">&gt;</span><span style="color:#BD93F9;"> 1</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#50FA7B;">    swap</span><span style="color:#F8F8F2;">(arr, </span><span style="color:#BD93F9;">0</span><span style="color:#F8F8F2;">, size </span><span style="color:#FF79C6;">-</span><span style="color:#BD93F9;"> 1</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">    size</span><span style="color:#FF79C6;">--</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#50FA7B;">    heapify</span><span style="color:#F8F8F2;">(arr, </span><span style="color:#BD93F9;">0</span><span style="color:#F8F8F2;">, size);</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">function</span><span style="color:#50FA7B;"> heapInsert</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">arr</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#FF79C6;">  for</span><span style="color:#F8F8F2;"> (</span><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> i </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> 0</span><span style="color:#F8F8F2;">; i </span><span style="color:#FF79C6;">&lt;</span><span style="color:#F8F8F2;"> arr.length; i</span><span style="color:#FF79C6;">++</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#FF79C6;">    let</span><span style="color:#F8F8F2;"> currentIndex </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> i;</span></span>
<span class="line"><span style="color:#FF79C6;">    let</span><span style="color:#F8F8F2;"> fatherIndex </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> (currentIndex </span><span style="color:#FF79C6;">-</span><span style="color:#BD93F9;"> 1</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">/</span><span style="color:#BD93F9;"> 2</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#FF79C6;">    while</span><span style="color:#F8F8F2;"> (arr[currentIndex] </span><span style="color:#FF79C6;">&gt;</span><span style="color:#F8F8F2;"> arr[fatherIndex]) {</span></span>
<span class="line"><span style="color:#50FA7B;">      swap</span><span style="color:#F8F8F2;">(arr, currentIndex, fatherIndex);</span></span>
<span class="line"><span style="color:#F8F8F2;">      currentIndex </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> fatherIndex;</span></span>
<span class="line"><span style="color:#F8F8F2;">      fatherIndex </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> (currentIndex </span><span style="color:#FF79C6;">-</span><span style="color:#BD93F9;"> 1</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">/</span><span style="color:#BD93F9;"> 2</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">function</span><span style="color:#50FA7B;"> heapify</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">arr</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">index</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">size</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#FF79C6;">  let</span><span style="color:#F8F8F2;"> left </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> 2</span><span style="color:#FF79C6;"> *</span><span style="color:#F8F8F2;"> index </span><span style="color:#FF79C6;">+</span><span style="color:#BD93F9;"> 1</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#FF79C6;">  let</span><span style="color:#F8F8F2;"> right </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> 2</span><span style="color:#FF79C6;"> *</span><span style="color:#F8F8F2;"> index </span><span style="color:#FF79C6;">+</span><span style="color:#BD93F9;"> 2</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#FF79C6;">  while</span><span style="color:#F8F8F2;"> (left </span><span style="color:#FF79C6;">&lt;</span><span style="color:#F8F8F2;"> size) {</span></span>
<span class="line"><span style="color:#FF79C6;">    let</span><span style="color:#F8F8F2;"> largestIndex;</span></span>
<span class="line"><span style="color:#FF79C6;">    if</span><span style="color:#F8F8F2;"> (arr[left] </span><span style="color:#FF79C6;">&lt;</span><span style="color:#F8F8F2;"> arr[right] </span><span style="color:#FF79C6;">&amp;&amp;</span><span style="color:#F8F8F2;"> right </span><span style="color:#FF79C6;">&lt;</span><span style="color:#F8F8F2;"> size) {</span></span>
<span class="line"><span style="color:#F8F8F2;">      largestIndex </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> right;</span></span>
<span class="line"><span style="color:#F8F8F2;">    } </span><span style="color:#FF79C6;">else</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">      largestIndex </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> left;</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">    if</span><span style="color:#F8F8F2;"> (arr[index </span><span style="color:#FF79C6;">&gt;</span><span style="color:#F8F8F2;"> arr[largestIndex]]) {</span></span>
<span class="line"><span style="color:#F8F8F2;">      largestIndex </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> index;</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">    if</span><span style="color:#F8F8F2;"> (index </span><span style="color:#FF79C6;">===</span><span style="color:#F8F8F2;"> largestIndex) {</span></span>
<span class="line"><span style="color:#FF79C6;">      break</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#50FA7B;">    swap</span><span style="color:#F8F8F2;">(arr, largestIndex, index);</span></span>
<span class="line"><span style="color:#F8F8F2;">    index </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> largestIndex;</span></span>
<span class="line"><span style="color:#F8F8F2;">    left </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> 2</span><span style="color:#FF79C6;"> *</span><span style="color:#F8F8F2;"> index </span><span style="color:#FF79C6;">+</span><span style="color:#BD93F9;"> 1</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">    right </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> 2</span><span style="color:#FF79C6;"> *</span><span style="color:#F8F8F2;"> index </span><span style="color:#FF79C6;">+</span><span style="color:#BD93F9;"> 2</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="计数排序" tabindex="-1"><a class="header-anchor" href="#计数排序"><span>计数排序</span></a></h2><ul><li>找出数组中的最大值 max、最小值 min。</li><li>创建一个新数组 count，其长度是 max-min 加 1，其元素默认值都为 0。</li><li>遍历原数组中的元素，以原数组中的元素值作为 count 数组的索引，以原数组中的元素出现次数作为 count 数组的元素值。</li><li>创建结果数组 result,将每个元素 i 放在新数组的第[i]项，每放一个元素就将 count[i]减去 1。</li></ul><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">function</span><span style="color:#50FA7B;"> countingSort</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">arr</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">maxValue</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#FF79C6;">  let</span><span style="color:#F8F8F2;"> bucket </span><span style="color:#FF79C6;">=</span><span style="color:#FF79C6;font-weight:bold;"> new</span><span style="color:#50FA7B;"> Array</span><span style="color:#F8F8F2;">(maxValue </span><span style="color:#FF79C6;">+</span><span style="color:#BD93F9;"> 1</span><span style="color:#F8F8F2;">),</span></span>
<span class="line"><span style="color:#F8F8F2;">    sortedIndex </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> 0</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">  (arrLen </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> arr.length), (bucketLen </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> maxValue </span><span style="color:#FF79C6;">+</span><span style="color:#BD93F9;"> 1</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">  for</span><span style="color:#F8F8F2;"> (</span><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> i </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> 0</span><span style="color:#F8F8F2;">; i </span><span style="color:#FF79C6;">&lt;</span><span style="color:#F8F8F2;"> arrLen; i</span><span style="color:#FF79C6;">++</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#FF79C6;">    if</span><span style="color:#F8F8F2;"> (</span><span style="color:#FF79C6;">!</span><span style="color:#F8F8F2;">bucket[arr[i]]) {</span></span>
<span class="line"><span style="color:#F8F8F2;">      bucket[arr[i]] </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> 0</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">    bucket[arr[i]]</span><span style="color:#FF79C6;">++</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">  for</span><span style="color:#F8F8F2;"> (</span><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> j </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> 0</span><span style="color:#F8F8F2;">; j </span><span style="color:#FF79C6;">&lt;</span><span style="color:#F8F8F2;"> bucketLen; j</span><span style="color:#FF79C6;">++</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#FF79C6;">    while</span><span style="color:#F8F8F2;"> (bucket[j] </span><span style="color:#FF79C6;">&gt;</span><span style="color:#BD93F9;"> 0</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">      arr[sortedIndex</span><span style="color:#FF79C6;">++</span><span style="color:#F8F8F2;">] </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> j;</span></span>
<span class="line"><span style="color:#F8F8F2;">      bucket[j]</span><span style="color:#FF79C6;">--</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">  return</span><span style="color:#F8F8F2;"> arr;</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="桶排序" tabindex="-1"><a class="header-anchor" href="#桶排序"><span>桶排序</span></a></h2><ul><li>设多个数组为桶</li><li>将数据分到桶里</li><li>对桶内数据进行排序</li><li>将排序好的桶进行拼接</li></ul><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">function</span><span style="color:#50FA7B;"> bucketSort</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">arr</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">bucketSize</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#FF79C6;">  if</span><span style="color:#F8F8F2;"> (arr.length </span><span style="color:#FF79C6;">===</span><span style="color:#BD93F9;"> 0</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#FF79C6;">    return</span><span style="color:#F8F8F2;"> arr;</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">  let</span><span style="color:#F8F8F2;"> i;</span></span>
<span class="line"><span style="color:#FF79C6;">  let</span><span style="color:#F8F8F2;"> minValue </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> arr[</span><span style="color:#BD93F9;">0</span><span style="color:#F8F8F2;">];</span></span>
<span class="line"><span style="color:#FF79C6;">  let</span><span style="color:#F8F8F2;"> maxValue </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> arr[</span><span style="color:#BD93F9;">0</span><span style="color:#F8F8F2;">];</span></span>
<span class="line"><span style="color:#FF79C6;">  for</span><span style="color:#F8F8F2;"> (i </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> 1</span><span style="color:#F8F8F2;">; i </span><span style="color:#FF79C6;">&lt;</span><span style="color:#F8F8F2;"> arr.length; i</span><span style="color:#FF79C6;">++</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#FF79C6;">    if</span><span style="color:#F8F8F2;"> (arr[i] </span><span style="color:#FF79C6;">&lt;</span><span style="color:#F8F8F2;"> minValue) {</span></span>
<span class="line"><span style="color:#F8F8F2;">      minValue </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> arr[i]; </span><span style="color:#6272A4;">// 输入数据的最小值</span></span>
<span class="line"><span style="color:#F8F8F2;">    } </span><span style="color:#FF79C6;">else</span><span style="color:#FF79C6;"> if</span><span style="color:#F8F8F2;"> (arr[i] </span><span style="color:#FF79C6;">&gt;</span><span style="color:#F8F8F2;"> maxValue) {</span></span>
<span class="line"><span style="color:#F8F8F2;">      maxValue </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> arr[i]; </span><span style="color:#6272A4;">// 输入数据的最大值</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">  // 桶的初始化</span></span>
<span class="line"><span style="color:#FF79C6;">  let</span><span style="color:#F8F8F2;"> DEFAULT_BUCKET_SIZE </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> 5</span><span style="color:#F8F8F2;">; </span><span style="color:#6272A4;">// 设置桶的默认数量为5</span></span>
<span class="line"><span style="color:#F8F8F2;">  bucketSize </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> bucketSize </span><span style="color:#FF79C6;">||</span><span style="color:#F8F8F2;"> DEFAULT_BUCKET_SIZE;</span></span>
<span class="line"><span style="color:#FF79C6;">  let</span><span style="color:#F8F8F2;"> bucketCount </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> Math.</span><span style="color:#50FA7B;">floor</span><span style="color:#F8F8F2;">((maxValue </span><span style="color:#FF79C6;">-</span><span style="color:#F8F8F2;"> minValue) </span><span style="color:#FF79C6;">/</span><span style="color:#F8F8F2;"> bucketSize) </span><span style="color:#FF79C6;">+</span><span style="color:#BD93F9;"> 1</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#FF79C6;">  let</span><span style="color:#F8F8F2;"> buckets </span><span style="color:#FF79C6;">=</span><span style="color:#FF79C6;font-weight:bold;"> new</span><span style="color:#50FA7B;"> Array</span><span style="color:#F8F8F2;">(bucketCount);</span></span>
<span class="line"><span style="color:#FF79C6;">  for</span><span style="color:#F8F8F2;"> (i </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> 0</span><span style="color:#F8F8F2;">; i </span><span style="color:#FF79C6;">&lt;</span><span style="color:#F8F8F2;"> buckets.length; i</span><span style="color:#FF79C6;">++</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">    buckets[i] </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> [];</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">  // 利用映射函数将数据分配到各个桶中</span></span>
<span class="line"><span style="color:#FF79C6;">  for</span><span style="color:#F8F8F2;"> (i </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> 0</span><span style="color:#F8F8F2;">; i </span><span style="color:#FF79C6;">&lt;</span><span style="color:#F8F8F2;"> arr.length; i</span><span style="color:#FF79C6;">++</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">    buckets[Math.</span><span style="color:#50FA7B;">floor</span><span style="color:#F8F8F2;">((arr[i] </span><span style="color:#FF79C6;">-</span><span style="color:#F8F8F2;"> minValue) </span><span style="color:#FF79C6;">/</span><span style="color:#F8F8F2;"> bucketSize)].</span><span style="color:#50FA7B;">push</span><span style="color:#F8F8F2;">(arr[i]);</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">  arr.length </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> 0</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#FF79C6;">  for</span><span style="color:#F8F8F2;"> (i </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> 0</span><span style="color:#F8F8F2;">; i </span><span style="color:#FF79C6;">&lt;</span><span style="color:#F8F8F2;"> buckets.length; i</span><span style="color:#FF79C6;">++</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#50FA7B;">    insertionSort</span><span style="color:#F8F8F2;">(buckets[i]); </span><span style="color:#6272A4;">// 对每个桶进行排序，这里使用了插入排序</span></span>
<span class="line"><span style="color:#FF79C6;">    for</span><span style="color:#F8F8F2;"> (</span><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> j </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> 0</span><span style="color:#F8F8F2;">; j </span><span style="color:#FF79C6;">&lt;</span><span style="color:#F8F8F2;"> buckets[i].length; j</span><span style="color:#FF79C6;">++</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">      arr.</span><span style="color:#50FA7B;">push</span><span style="color:#F8F8F2;">(buckets[i][j]);</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">  return</span><span style="color:#F8F8F2;"> arr;</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="基数排序" tabindex="-1"><a class="header-anchor" href="#基数排序"><span>基数排序</span></a></h2><ul><li>将所有待比较数值（正整数）统一为同样的数位长度（个十百千万），数位较短的数前面补零</li><li>从最低位开始，依次进行一次排序。 <ul><li>按照个位数进行排序。</li><li>按照十位数进行排序。</li><li>按照百位数进行排序。</li></ul></li><li>这样从最低位排序一直到最高位排序完成以后, 数列就变成一个有序序列。</li></ul><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> counter </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> [];</span></span>
<span class="line"><span style="color:#FF79C6;">function</span><span style="color:#50FA7B;"> radixSort</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">arr</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">maxDigit</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#FF79C6;">    let</span><span style="color:#F8F8F2;"> mod </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> 10</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#FF79C6;">    let</span><span style="color:#F8F8F2;"> dev </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> 1</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#FF79C6;">    for</span><span style="color:#F8F8F2;"> (</span><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> i </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> 0</span><span style="color:#F8F8F2;">; i </span><span style="color:#FF79C6;">&lt;</span><span style="color:#F8F8F2;"> maxDigit; i</span><span style="color:#FF79C6;">++</span><span style="color:#F8F8F2;">, dev </span><span style="color:#FF79C6;">*=</span><span style="color:#BD93F9;"> 10</span><span style="color:#F8F8F2;">, mod </span><span style="color:#FF79C6;">*=</span><span style="color:#BD93F9;"> 10</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#FF79C6;">        for</span><span style="color:#F8F8F2;">(</span><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> j </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> 0</span><span style="color:#F8F8F2;">; j </span><span style="color:#FF79C6;">&lt;</span><span style="color:#F8F8F2;"> arr.length; j</span><span style="color:#FF79C6;">++</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#FF79C6;">            let</span><span style="color:#F8F8F2;"> bucket </span><span style="color:#FF79C6;">=</span><span style="color:#50FA7B;"> parseInt</span><span style="color:#F8F8F2;">((arr[j] </span><span style="color:#FF79C6;">%</span><span style="color:#F8F8F2;"> mod) </span><span style="color:#FF79C6;">/</span><span style="color:#F8F8F2;"> dev);</span></span>
<span class="line"><span style="color:#FF79C6;">            if</span><span style="color:#F8F8F2;">(counter[bucket]</span><span style="color:#FF79C6;">==</span><span style="color:#BD93F9;">null</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">                counter[bucket] </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> [];</span></span>
<span class="line"><span style="color:#F8F8F2;">            }</span></span>
<span class="line"><span style="color:#F8F8F2;">            counter[bucket].</span><span style="color:#50FA7B;">push</span><span style="color:#F8F8F2;">(arr[j]);</span></span>
<span class="line"><span style="color:#F8F8F2;">        }</span></span>
<span class="line"><span style="color:#FF79C6;">        let</span><span style="color:#F8F8F2;"> pos </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> 0</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#FF79C6;">        for</span><span style="color:#F8F8F2;">(</span><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> j </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> 0</span><span style="color:#F8F8F2;">; j </span><span style="color:#FF79C6;">&lt;</span><span style="color:#F8F8F2;"> counter.length; j</span><span style="color:#FF79C6;">++</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#FF79C6;">            let</span><span style="color:#F8F8F2;"> value </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> null</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#FF79C6;">            if</span><span style="color:#F8F8F2;">(counter[j]</span><span style="color:#FF79C6;">!=</span><span style="color:#BD93F9;">null</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#FF79C6;">                while</span><span style="color:#F8F8F2;"> ((value </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> counter[j].</span><span style="color:#50FA7B;">shift</span><span style="color:#F8F8F2;">()) </span><span style="color:#FF79C6;">!=</span><span style="color:#BD93F9;"> null</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">                      arr[pos</span><span style="color:#FF79C6;">++</span><span style="color:#F8F8F2;">] </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> value;</span></span>
<span class="line"><span style="color:#F8F8F2;">                }</span></span>
<span class="line"><span style="color:#F8F8F2;">          }</span></span>
<span class="line"><span style="color:#F8F8F2;">        }</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#FF79C6;">    return</span><span style="color:#F8F8F2;"> arr;</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,32)]))}const t=n(F,[["render",o],["__file","sort.html.vue"]]),i=JSON.parse('{"path":"/algorithm/sort.html","title":"排序算法","lang":"en-US","frontmatter":{"title":"排序算法","date":"2022-09-15T00:00:00.000Z","category":["算法"],"description":"冒泡排序 比较相邻的元素。如果第一个比第二个大，就交换它们两个； 对每一对相邻元素作同样的工作，从开始第一对到结尾的最后一对，这样在最后的元素应该会是最大的数； 针对所有的元素重复以上的步骤，除了最后一个； 重复步骤 1~3，直到排序完成。 选择排序 首先在未排序序列中找到最小（大）元素，存放到排序序列的起始位置 再从剩余未排序元素中继续寻找最小（大）...","head":[["meta",{"property":"og:url","content":"https://luxiag.github.io/luxiag/blog/algorithm/sort.html"}],["meta",{"property":"og:title","content":"排序算法"}],["meta",{"property":"og:description","content":"冒泡排序 比较相邻的元素。如果第一个比第二个大，就交换它们两个； 对每一对相邻元素作同样的工作，从开始第一对到结尾的最后一对，这样在最后的元素应该会是最大的数； 针对所有的元素重复以上的步骤，除了最后一个； 重复步骤 1~3，直到排序完成。 选择排序 首先在未排序序列中找到最小（大）元素，存放到排序序列的起始位置 再从剩余未排序元素中继续寻找最小（大）..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2024-10-22T14:58:48.000Z"}],["meta",{"property":"article:published_time","content":"2022-09-15T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-10-22T14:58:48.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"排序算法\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-09-15T00:00:00.000Z\\",\\"dateModified\\":\\"2024-10-22T14:58:48.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"luxiag\\",\\"url\\":\\"https://luxiag.github.io/luxiag\\"}]}"]]},"git":{"createdTime":1672825748000,"updatedTime":1729609128000,"contributors":[{"name":"luxiag","username":"luxiag","email":"luxiag@qq.com","commits":8,"url":"https://github.com/luxiag"}]},"readingTime":{"minutes":6.1,"words":1830},"filePathRelative":"algorithm/sort.md","localizedDate":"September 15, 2022","excerpt":"<figure><figcaption></figcaption></figure>\\n<h2>冒泡排序</h2>\\n<ul>\\n<li>比较相邻的元素。如果第一个比第二个大，就交换它们两个；</li>\\n<li>对每一对相邻元素作同样的工作，从开始第一对到结尾的最后一对，这样在最后的元素应该会是最大的数；</li>\\n<li>针对所有的元素重复以上的步骤，除了最后一个；</li>\\n<li>重复步骤 1~3，直到排序完成。</li>\\n</ul>","autoDesc":true}');export{t as comp,i as data};
