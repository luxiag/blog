import{_ as l,c as s,b as a,o as n}from"./app-YFqS9NBE.js";const i={};function o(c,e){return n(),s("div",null,e[0]||(e[0]=[a(`<h1 id="guide" tabindex="-1"><a class="header-anchor" href="#guide"><span>guide</span></a></h1><p>Dockerfile 是一个文本文件，用于指导 Docker 构建镜像（images）</p><h1 id="镜像的选择" tabindex="-1"><a class="header-anchor" href="#镜像的选择"><span>镜像的选择</span></a></h1><ul><li>基础镜像尽量选择官方的，比如 <code>alpine</code>，<code>ubuntu</code>，<code>centos</code> 等</li><li>镜像的标签尽量选择 <code>latest</code>，因为 <code>latest</code> 表示最新的稳定版本</li><li>镜像的标签尽量选择 <code>slim</code>，因为 <code>slim</code> 表示精简版，体积更小</li><li>镜像的标签尽量选择 <code>alpine</code>，因为 <code>alpine</code> 是基于 <code>musl libc</code> 和 <code>busybox</code> 的轻量级操作系统，体积更小，安全性更高</li></ul><div class="language-dockerfile line-numbers-mode" data-highlighter="shiki" data-ext="dockerfile" data-title="dockerfile" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">FROM</span><span style="color:#F8F8F2;"> nginx:1.21.0-alpine</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">ADD</span><span style="color:#F8F8F2;"> index.html /user/share/nginx/html/index.html</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#50FA7B;">docker</span><span style="color:#F1FA8C;"> image</span><span style="color:#F1FA8C;"> build</span><span style="color:#BD93F9;"> -t</span><span style="color:#F1FA8C;"> nginx-demo</span><span style="color:#F1FA8C;"> .</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><code>docker image build -t nginx-demo .</code> 是一个 Docker 命令，用于根据当前目录中的 Dockerfile 构建一个新的镜像，并将其命名为 <code>nginx-demo</code>。这个命令的各个部分解释如下：</p><ul><li><code>docker image build</code>：这是 Docker 命令，用于构建新的镜像。</li><li><code>-t</code>：这是 <code>docker image build</code> 命令的选项，用于为镜像指定一个或多个标签。在这个例子中，标签是 <code>nginx-demo</code>。</li><li><code>nginx-demo</code>：这是新镜像的名称。</li><li><code>.</code>：这是 Dockerfile 的路径。<code>.</code> 表示当前目录，所以 Docker 会在这个目录中查找 Dockerfile 来构建镜像。 当你运行这个命令时，Docker 会读取当前目录中的 Dockerfile，并根据其中的指令构建一个新的镜像。构建完成后，这个镜像将具有标签 <code>nginx-demo</code>，并且你可以使用这个镜像来创建和运行容器。</li></ul><h1 id="run" tabindex="-1"><a class="header-anchor" href="#run"><span>RUN</span></a></h1><p>用于在Image里执行指令，比如安装 软件，下载文件</p><div class="language-dockerfile line-numbers-mode" data-highlighter="shiki" data-ext="dockerfile" data-title="dockerfile" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">FROM</span><span style="color:#F8F8F2;"> nginx:1.21.0-alpine</span></span>
<span class="line"><span style="color:#FF79C6;">RUN</span><span style="color:#F8F8F2;"> apt-get update &amp;&amp; apt-get install -y curl</span></span>
<span class="line"><span style="color:#FF79C6;">Run</span><span style="color:#F8F8F2;"> curl -o /usr/share/nginx/html/index.html https://www.baidu.com</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-dockerfile line-numbers-mode" data-highlighter="shiki" data-ext="dockerfile" data-title="dockerfile" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">FROM</span><span style="color:#F8F8F2;"> nginx:1.21.0-alpine</span></span>
<span class="line"><span style="color:#FF79C6;">RUN</span><span style="color:#F8F8F2;"> apt-get update &amp;&amp; apt-get install -y curl \\</span></span>
<span class="line"><span style="color:#F8F8F2;">    curl -o /usr/share/nginx/html/index.html https://www.baidu.com</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="文件操作" tabindex="-1"><a class="header-anchor" href="#文件操作"><span>文件操作</span></a></h1><div class="language-dockerfile line-numbers-mode" data-highlighter="shiki" data-ext="dockerfile" data-title="dockerfile" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"></span>
<span class="line"><span style="color:#6272A4;"># 设置的工作目录路径。如果你不指定路径，默认的工作目录是 /</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">WORKDIR</span><span style="color:#F8F8F2;"> /path/to/workdir</span></span>
<span class="line"><span style="color:#6272A4;"># COPY &lt;src&gt; &lt;dst&gt;</span></span>
<span class="line"><span style="color:#6272A4;">#  从当前目录（.）复制所有文件和目录到容器的 /app 目录。</span></span>
<span class="line"><span style="color:#FF79C6;">COPY</span><span style="color:#F8F8F2;"> . /app</span></span>
<span class="line"><span style="color:#6272A4;">#  从当前目录（.）复制 hello.py 文件到容器的 /app 目录。</span></span>
<span class="line"><span style="color:#FF79C6;">COPY</span><span style="color:#F8F8F2;"> hello.py /app/hello.py</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;"># ADD &lt;src&gt; &lt;dst&gt;</span></span>
<span class="line"><span style="color:#6272A4;"># 类似于 COPY，但可以处理压缩文件，自动解压文件。</span></span>
<span class="line"><span style="color:#6272A4;">#  从当前目录（.）复制所有文件和目录到容器的 /app 目录。</span></span>
<span class="line"><span style="color:#FF79C6;">ADD</span><span style="color:#F8F8F2;"> . /app</span></span>
<span class="line"><span style="color:#6272A4;">#   从当前目录添加 package.tgz 文件到容器的 /app/ 目录，并自动解压。</span></span>
<span class="line"><span style="color:#FF79C6;">ADD</span><span style="color:#F8F8F2;"> ./package.tgz /app/</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="环境变量" tabindex="-1"><a class="header-anchor" href="#环境变量"><span>环境变量</span></a></h1><h2 id="arg" tabindex="-1"><a class="header-anchor" href="#arg"><span>ARG</span></a></h2><p>用于定义构建参数，可以在构建时传入参数，比如版本号，镜像的标签等</p><div class="language-dockerfile line-numbers-mode" data-highlighter="shiki" data-ext="dockerfile" data-title="dockerfile" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">FROM</span><span style="color:#F8F8F2;"> nginx:1.21.0-alpine</span></span>
<span class="line"><span style="color:#FF79C6;">ARG</span><span style="color:#F8F8F2;"> NODE_VERSION 14.17.0</span></span>
<span class="line"><span style="color:#FF79C6;">RUN</span><span style="color:#F8F8F2;"> npm install -g npm@\${NODE_VERSION}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="env" tabindex="-1"><a class="header-anchor" href="#env"><span>ENV</span></a></h2><p>用于定义环境变量，可以在容器中引用，比如设置时区，设置语言等</p><div class="language-dockerfile line-numbers-mode" data-highlighter="shiki" data-ext="dockerfile" data-title="dockerfile" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">FROM</span><span style="color:#F8F8F2;"> nginx:1.21.0-alpine</span></span>
<span class="line"><span style="color:#FF79C6;">ENV</span><span style="color:#F8F8F2;"> NODE_VERSION 14.17.0</span></span>
<span class="line"><span style="color:#FF79C6;">RUN</span><span style="color:#F8F8F2;"> npm install -g npm@\${NODE_VERSION}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>ARG 用于定义构建时传递的参数，它们在构建过程中使用。</li><li>ENV 用于设置永久环境变量，它们在容器启动时设置，并在容器运行时一直存在。</li></ul><h2 id="启动命令" tabindex="-1"><a class="header-anchor" href="#启动命令"><span>启动命令</span></a></h2><h3 id="cmd" tabindex="-1"><a class="header-anchor" href="#cmd"><span>CMD</span></a></h3><p>CMD可以用来设置容器启动时默认会执行命令</p><ul><li>容器启动时默认执行的命令</li><li>如果在运行容器时指定了其他命令，则 CMD 指定的命令会被覆盖</li><li>如果 Dockerfile 中有多个 CMD 指令，则只有最后一个 CMD 指令会被执行</li></ul><div class="language-dockerfile line-numbers-mode" data-highlighter="shiki" data-ext="dockerfile" data-title="dockerfile" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">FROM</span><span style="color:#F8F8F2;"> nginx:1.21.0-alpine</span></span>
<span class="line"><span style="color:#FF79C6;">CMD</span><span style="color:#F8F8F2;"> [</span><span style="color:#F1FA8C;">&quot;nginx&quot;</span><span style="color:#F8F8F2;">, </span><span style="color:#F1FA8C;">&quot;-g&quot;</span><span style="color:#F8F8F2;">, </span><span style="color:#F1FA8C;">&quot;daemon off;&quot;</span><span style="color:#F8F8F2;">]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="entrypoint" tabindex="-1"><a class="header-anchor" href="#entrypoint"><span>ENTRYPOINT</span></a></h3><p>ENTRYPOINT 用于设置容器启动时默认会执行的命令，与 CMD 类似，但 ENTRYPOINT 指定的命令不会被覆盖，除非在运行容器时指定了 <code>--entrypoint</code> 参数</p><ul><li>容器启动时默认执行的命令</li><li>如果在运行容器时指定了其他命令，则这些命令会被作为参数传递给 ENTRYPOINT 指定的命令</li><li>如果 Dockerfile 中有多个 ENTRYPOINT 指令，则只有最后一个 ENTRYPOINT 指令会被执行</li></ul><div class="language-dockerfile line-numbers-mode" data-highlighter="shiki" data-ext="dockerfile" data-title="dockerfile" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">FROM</span><span style="color:#F8F8F2;"> nginx:1.21.0-alpine</span></span>
<span class="line"><span style="color:#FF79C6;">ENTRYPOINT</span><span style="color:#F8F8F2;"> [</span><span style="color:#F1FA8C;">&quot;nginx&quot;</span><span style="color:#F8F8F2;">, </span><span style="color:#F1FA8C;">&quot;-g&quot;</span><span style="color:#F8F8F2;">, </span><span style="color:#F1FA8C;">&quot;daemon off;&quot;</span><span style="color:#F8F8F2;">]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>CMD 和 ENTRYPOINT 都可以用来设置容器启动时默认执行的命令，但它们的用法和特性有所不同。CMD 指令指定的命令可以被覆盖，而 ENTRYPOINT 指令指定的命令不会被覆盖。CMD 指令指定的命令可以作为参数传递给 ENTRYPOINT 指令指定的命令。</li></ul><h2 id="镜像构建" tabindex="-1"><a class="header-anchor" href="#镜像构建"><span>镜像构建</span></a></h2><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#50FA7B;">docker</span><span style="color:#F1FA8C;"> image</span><span style="color:#F1FA8C;"> build</span><span style="color:#BD93F9;"> -t</span><span style="color:#F1FA8C;"> nginx-demo</span><span style="color:#F1FA8C;"> .</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li><code>docker image build</code>：这是 Docker 命令，用于构建新的镜像。</li><li><code>-t</code>：这是 <code>docker image build</code> 命令的选项，用于为镜像指定一个或多个标签。在这个例子中，标签是 <code>nginx-demo</code>。</li><li><code>nginx-demo</code>：这是新镜像的名称。</li><li><code>.</code>：这是 Dockerfile 的路径。<code>.</code> 表示当前目录，所以 Docker 会在这个目录中查找 Dockerfile 来构建镜像。</li></ul>`,35)]))}const r=l(i,[["render",o],["__file","docker-file.html.vue"]]),t=JSON.parse('{"path":"/docker/docker-file.html","title":"Dockerfile","lang":"en-US","frontmatter":{"title":"Dockerfile","date":"2024-11-26T00:00:00.000Z","category":["Docker"],"description":"guide Dockerfile 是一个文本文件，用于指导 Docker 构建镜像（images） 镜像的选择 基础镜像尽量选择官方的，比如 alpine，ubuntu，centos 等 镜像的标签尽量选择 latest，因为 latest 表示最新的稳定版本 镜像的标签尽量选择 slim，因为 slim 表示精简版，体积更小 镜像的标签尽量选择 al...","head":[["meta",{"property":"og:url","content":"https://luxiag.github.io/luxiag/blog/docker/docker-file.html"}],["meta",{"property":"og:title","content":"Dockerfile"}],["meta",{"property":"og:description","content":"guide Dockerfile 是一个文本文件，用于指导 Docker 构建镜像（images） 镜像的选择 基础镜像尽量选择官方的，比如 alpine，ubuntu，centos 等 镜像的标签尽量选择 latest，因为 latest 表示最新的稳定版本 镜像的标签尽量选择 slim，因为 slim 表示精简版，体积更小 镜像的标签尽量选择 al..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2024-11-24T12:22:33.000Z"}],["meta",{"property":"article:published_time","content":"2024-11-26T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-11-24T12:22:33.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Dockerfile\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-11-26T00:00:00.000Z\\",\\"dateModified\\":\\"2024-11-24T12:22:33.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"luxiag\\",\\"url\\":\\"https://luxiag.github.io/luxiag\\"}]}"]]},"headers":[{"level":2,"title":"ARG","slug":"arg","link":"#arg","children":[]},{"level":2,"title":"ENV","slug":"env","link":"#env","children":[]},{"level":2,"title":"启动命令","slug":"启动命令","link":"#启动命令","children":[{"level":3,"title":"CMD","slug":"cmd","link":"#cmd","children":[]},{"level":3,"title":"ENTRYPOINT","slug":"entrypoint","link":"#entrypoint","children":[]}]},{"level":2,"title":"镜像构建","slug":"镜像构建","link":"#镜像构建","children":[]}],"git":{"createdTime":1732450953000,"updatedTime":1732450953000,"contributors":[{"name":"luxiag","email":"luxiag@qq.com","commits":1}]},"readingTime":{"minutes":3.8,"words":1141},"filePathRelative":"docker/docker-file.md","localizedDate":"November 26, 2024","excerpt":"\\n<p>Dockerfile 是一个文本文件，用于指导 Docker 构建镜像（images）</p>\\n<h1>镜像的选择</h1>\\n<ul>\\n<li>基础镜像尽量选择官方的，比如 <code>alpine</code>，<code>ubuntu</code>，<code>centos</code> 等</li>\\n<li>镜像的标签尽量选择 <code>latest</code>，因为 <code>latest</code> 表示最新的稳定版本</li>\\n<li>镜像的标签尽量选择 <code>slim</code>，因为 <code>slim</code> 表示精简版，体积更小</li>\\n<li>镜像的标签尽量选择 <code>alpine</code>，因为 <code>alpine</code> 是基于 <code>musl libc</code> 和 <code>busybox</code> 的轻量级操作系统，体积更小，安全性更高</li>\\n</ul>","autoDesc":true}');export{r as comp,t as data};
