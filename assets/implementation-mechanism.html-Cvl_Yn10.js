import{_ as n,c as a,b as l,o as e}from"./app-BupRR3ON.js";const o="/blog/assets/855001105051512323-O2wQ_QJk.png",p="/blog/assets/158002005051512323-DoMGNHHo.png",i="/blog/assets/097001805051512323-Bv_GzqsC.png",c="/blog/assets/962001905051512323-DYFZkaVW.png",t="/blog/assets/375002105051512323-B3JCw_pO.png",r="/blog/assets/345001409051622323-BVNVwn-_.png",F="/blog/assets/143003709051622323-BBCleJQF.png",d="/blog/assets/807003809051622323-BXE5GP0L.png",y="/blog/assets/797002410051622323-D-4qM2_q.png",g="/blog/assets/563003310051622323-8WcG6TZi.png",v="/blog/assets/172003310051622323-3kdp49Ss.png",u="/blog/assets/101003610051622323-F2W9u7Il.png",m="/blog/assets/902003810051622323-DGpSzPY9.png",b="/blog/assets/215004610051622323-gqzboYro.png",h="/blog/assets/966004610051622323-CKlK8OV7.png",f="/blog/assets/843003011051622323-D4VR2Qvl.png",C="/blog/assets/562003111051622323-UddtfiYu.png",B="/blog/assets/378002602051622323-DqUxC7P_.png",A="/blog/assets/680003802051622323-CHC5IjZb.png",_="/blog/assets/581003802051622323-Rvm1VRXv.png",x="/blog/assets/079004602051622323-CL9CEr1B.png",k="/blog/assets/404005102051622323-CgHgEZVO.png",j="/blog/assets/243005302051622323-C8t35gdW.png",E="/blog/assets/912000003051622323-eXpf2Jdh.png",D="/blog/assets/349000503051622323-B5jLZrrK.png",z="/blog/assets/498001203051622323-DBvi3Rtf.png",N="/blog/assets/576003205051732323-N_GQy9V9.png",S="/blog/assets/913003405051732323-DNr0-nPQ.png",q="/blog/assets/393003505051732323-BzSlpT9a.png",J="/blog/assets/722003805051732323-yNOoM6RX.png",w="/blog/assets/643001610051952323-SbEQeGwj.png",T="/blog/assets/457002610051952323-BxO9N2MF.png",Z="/blog/assets/221002610051952323-BZdshnKP.png",H="/blog/assets/419002610051952323-BhLe8LHI.png",V="/blog/assets/509001211051952323-D55JJvIA.png",O={};function P(G,s){return e(),a("div",null,s[0]||(s[0]=[l(`<h2 id="变量提升" tabindex="-1"><a class="header-anchor" href="#变量提升"><span>变量提升</span></a></h2><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#50FA7B;">showName</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(myname)</span></span>
<span class="line"><span style="color:#FF79C6;">var</span><span style="color:#F8F8F2;"> myname </span><span style="color:#FF79C6;">=</span><span style="color:#E9F284;"> &#39;</span><span style="color:#F1FA8C;">极客时间</span><span style="color:#E9F284;">&#39;</span></span>
<span class="line"><span style="color:#FF79C6;">function</span><span style="color:#50FA7B;"> showName</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#F8F8F2;">    console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">函数showName被执行</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+o+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li>执行过程中，若使用了未声明的变量，那么JavaScript执行会报错。</li><li>在一个变量定义之前使用它，不会出错，但是该变量的值会为undefined，而不是定义时的值。</li><li>在一个函数定义之前使用它，不会出错，且函数能正确执行</li></ul><figure><img src="'+p+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="变量提升-hoisting" tabindex="-1"><a class="header-anchor" href="#变量提升-hoisting"><span>变量提升(Hoisting)</span></a></h3><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">var</span><span style="color:#F8F8F2;"> myName </span><span style="color:#FF79C6;">=</span><span style="color:#E9F284;"> &#39;</span><span style="color:#F1FA8C;">变量提升</span><span style="color:#E9F284;">&#39;</span></span>
<span class="line"><span style="color:#6272A4;">//等同于</span></span>
<span class="line"><span style="color:#FF79C6;">var</span><span style="color:#F8F8F2;"> myName;</span></span>
<span class="line"><span style="color:#F8F8F2;">myName </span><span style="color:#FF79C6;">=</span><span style="color:#E9F284;"> &#39;</span><span style="color:#F1FA8C;">变量提升</span><span style="color:#E9F284;">&#39;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+i+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">function</span><span style="color:#50FA7B;"> foo</span><span style="color:#F8F8F2;">(){</span></span>
<span class="line"><span style="color:#F8F8F2;">  console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">foo</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">var</span><span style="color:#50FA7B;"> bar</span><span style="color:#FF79C6;"> =</span><span style="color:#FF79C6;"> function</span><span style="color:#F8F8F2;">(){</span></span>
<span class="line"><span style="color:#F8F8F2;">  console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">bar</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+c+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="javascript代码的执行流程" tabindex="-1"><a class="header-anchor" href="#javascript代码的执行流程"><span>JavaScript代码的执行流程</span></a></h3><figure><img src="'+t+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="'+r+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="栈溢出" tabindex="-1"><a class="header-anchor" href="#栈溢出"><span>栈溢出</span></a></h2><p><strong>执行上下文</strong></p><ul><li>当JavaScript执行全局代码的时候，会编译全局代码并创建全局执行上下文，而且在整个页面的生存周期内，全局执行上下文只有一份。</li><li>当调用一个函数的时候，函数体内的代码会被编译，并创建函数执行上下文，一般情况下，函数执行结束之后，创建的函数执行上下文会被销毁。</li><li>当使用eval函数的时候，eval的代码也会被编译，并创建执行上下文。</li></ul><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">var</span><span style="color:#F8F8F2;"> a </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> 2</span></span>
<span class="line"><span style="color:#FF79C6;">function</span><span style="color:#50FA7B;"> add</span><span style="color:#F8F8F2;">(){</span></span>
<span class="line"><span style="color:#FF79C6;">    var</span><span style="color:#F8F8F2;"> b </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> 10</span></span>
<span class="line"><span style="color:#FF79C6;">    return</span><span style="color:#F8F8F2;">  a</span><span style="color:#FF79C6;">+</span><span style="color:#F8F8F2;">b</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#50FA7B;">add</span><span style="color:#F8F8F2;">()</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+F+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="'+d+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>JavaScript引擎通过一种叫栈的数据结构来管理执行上下文</p><p><strong>调用栈</strong></p><figure><img src="'+y+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>JavaScript引擎正是利用栈的这种结构来管理执行上下文的。在执行上下文创建好后，JavaScript引擎会将执行上下文压入栈中，通常把这种用来管理执行上下文的栈称为执行上下文栈，又称调用栈。</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">var</span><span style="color:#F8F8F2;"> a </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> 2</span></span>
<span class="line"><span style="color:#FF79C6;">function</span><span style="color:#50FA7B;"> add</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">b</span><span style="color:#F8F8F2;">,</span><span style="color:#FFB86C;font-style:italic;">c</span><span style="color:#F8F8F2;">){</span></span>
<span class="line"><span style="color:#FF79C6;">  return</span><span style="color:#F8F8F2;"> b</span><span style="color:#FF79C6;">+</span><span style="color:#F8F8F2;">c</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#FF79C6;">function</span><span style="color:#50FA7B;"> addAll</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">b</span><span style="color:#F8F8F2;">,</span><span style="color:#FFB86C;font-style:italic;">c</span><span style="color:#F8F8F2;">){</span></span>
<span class="line"><span style="color:#FF79C6;">  var</span><span style="color:#F8F8F2;"> d </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> 10</span></span>
<span class="line"><span style="color:#F8F8F2;">  result </span><span style="color:#FF79C6;">=</span><span style="color:#50FA7B;"> add</span><span style="color:#F8F8F2;">(b,c)</span></span>
<span class="line"><span style="color:#FF79C6;">  return</span><span style="color:#F8F8F2;">  a</span><span style="color:#FF79C6;">+</span><span style="color:#F8F8F2;">result</span><span style="color:#FF79C6;">+</span><span style="color:#F8F8F2;">d</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#50FA7B;">addAll</span><span style="color:#F8F8F2;">(</span><span style="color:#BD93F9;">3</span><span style="color:#F8F8F2;">,</span><span style="color:#BD93F9;">6</span><span style="color:#F8F8F2;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>第一步，创建全局上下文，并将其压入栈底</p><figure><img src="`+g+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>第二步是调用addAll函数</p><figure><img src="'+v+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>第三步，当执行到add函数调用语句时，同样会为其创建执行上下文，并将其压入调用栈</p><figure><img src="'+u+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>当add函数返回时，该函数的执行上下文就会从栈顶弹出，并将result的值设置为add函数的返回值</p><figure><img src="'+m+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="浏览器查看调用栈" tabindex="-1"><a class="header-anchor" href="#浏览器查看调用栈"><span>浏览器查看调用栈</span></a></h3><p>如何利用浏览器查看调用栈的信息</p><figure><img src="'+b+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="'+h+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>栈溢出（Stack Overflow）</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">function</span><span style="color:#50FA7B;"> division</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">a</span><span style="color:#F8F8F2;">,</span><span style="color:#FFB86C;font-style:italic;">b</span><span style="color:#F8F8F2;">){</span></span>
<span class="line"><span style="color:#FF79C6;">    return</span><span style="color:#50FA7B;"> division</span><span style="color:#F8F8F2;">(a,b)</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#50FA7B;">division</span><span style="color:#F8F8F2;">(</span><span style="color:#BD93F9;">1</span><span style="color:#F8F8F2;">,</span><span style="color:#BD93F9;">2</span><span style="color:#F8F8F2;">))</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当JavaScript引擎开始执行这段代码时，它首先调用函数division，并创建执行上下文，压入栈中；然而，这个函数是递归的，并且没有任何终止条件，所以它会一直创建新的函数执行上下文，并反复将其压入栈中，但栈是有容量限制的，超过最大数量后就会出现栈溢出的错误。</p><h2 id="作用域-scope" tabindex="-1"><a class="header-anchor" href="#作用域-scope"><span>作用域 （scope)</span></a></h2><p>作用域是指在程序中定义变量的区域，该位置决定了变量的生命周期。通俗地理解，作用域就是变量与函数的可访问范围，即作用域控制着变量和函数的可见性和生命周期</p><p>在ES6之前，ES的作用域只有两种：全局作用域和函数作用域。</p><ul><li>全局作用域中的对象在代码中的任何地方都能访问，其生命周期伴随着页面的生命周期。</li><li>函数作用域就是在函数内部定义的变量或者函数，并且定义的变量或者函数只能在函数内部被访问。函数执行结束之后，函数内部定义的变量会被销毁。</li></ul><h3 id="变量提升的问题" tabindex="-1"><a class="header-anchor" href="#变量提升的问题"><span>变量提升的问题</span></a></h3><p>变量容易在不被察觉的情况下被覆盖掉</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">var</span><span style="color:#F8F8F2;"> myname </span><span style="color:#FF79C6;">=</span><span style="color:#E9F284;"> &quot;</span><span style="color:#F1FA8C;">极客时间</span><span style="color:#E9F284;">&quot;</span></span>
<span class="line"><span style="color:#FF79C6;">function</span><span style="color:#50FA7B;"> showName</span><span style="color:#F8F8F2;">(){</span></span>
<span class="line"><span style="color:#F8F8F2;">  console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(myname);</span></span>
<span class="line"><span style="color:#FF79C6;">  if</span><span style="color:#F8F8F2;">(</span><span style="color:#BD93F9;">0</span><span style="color:#F8F8F2;">){</span></span>
<span class="line"><span style="color:#FF79C6;">   var</span><span style="color:#F8F8F2;"> myname </span><span style="color:#FF79C6;">=</span><span style="color:#E9F284;"> &quot;</span><span style="color:#F1FA8C;">极客邦</span><span style="color:#E9F284;">&quot;</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">  console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(myname);</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#50FA7B;">showName</span><span style="color:#F8F8F2;">()</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+f+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="'+C+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>本应销毁的变量没有被销毁</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">function</span><span style="color:#50FA7B;"> foo</span><span style="color:#F8F8F2;">(){</span></span>
<span class="line"><span style="color:#FF79C6;">  for</span><span style="color:#F8F8F2;"> (</span><span style="color:#FF79C6;">var</span><span style="color:#F8F8F2;"> i </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> 0</span><span style="color:#F8F8F2;">; i </span><span style="color:#FF79C6;">&lt;</span><span style="color:#BD93F9;"> 7</span><span style="color:#F8F8F2;">; i</span><span style="color:#FF79C6;">++</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#6272A4;">  //   i的值并未被销毁，所以最后打印出来的是7</span></span>
<span class="line"><span style="color:#F8F8F2;">  console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(i); </span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#50FA7B;">foo</span><span style="color:#F8F8F2;">()</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="es6解决变量提升的缺陷" tabindex="-1"><a class="header-anchor" href="#es6解决变量提升的缺陷"><span>ES6解决变量提升的缺陷</span></a></h3><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">function</span><span style="color:#50FA7B;"> varTest</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#FF79C6;">  var</span><span style="color:#F8F8F2;"> x </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> 1</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#FF79C6;">  if</span><span style="color:#F8F8F2;"> (</span><span style="color:#BD93F9;">true</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#FF79C6;">    var</span><span style="color:#F8F8F2;"> x </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> 2</span><span style="color:#F8F8F2;">;  </span><span style="color:#6272A4;">// 同样的变量!</span></span>
<span class="line"><span style="color:#F8F8F2;">    console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(x);  </span><span style="color:#6272A4;">// 2</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">  console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(x);  </span><span style="color:#6272A4;">// 2</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+B+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">function</span><span style="color:#50FA7B;"> letTest</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#FF79C6;">  let</span><span style="color:#F8F8F2;"> x </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> 1</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#FF79C6;">  if</span><span style="color:#F8F8F2;"> (</span><span style="color:#BD93F9;">true</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#FF79C6;">    let</span><span style="color:#F8F8F2;"> x </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> 2</span><span style="color:#F8F8F2;">;  </span><span style="color:#6272A4;">// 不同的变量</span></span>
<span class="line"><span style="color:#F8F8F2;">    console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(x);  </span><span style="color:#6272A4;">// 2</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">  console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(x);  </span><span style="color:#6272A4;">// 1</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="如何支持块级作用域" tabindex="-1"><a class="header-anchor" href="#如何支持块级作用域"><span>如何支持块级作用域</span></a></h3><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">function</span><span style="color:#50FA7B;"> foo</span><span style="color:#F8F8F2;">(){</span></span>
<span class="line"><span style="color:#FF79C6;">    var</span><span style="color:#F8F8F2;"> a </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> 1</span></span>
<span class="line"><span style="color:#FF79C6;">    let</span><span style="color:#F8F8F2;"> b </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> 2</span></span>
<span class="line"><span style="color:#F8F8F2;">    {</span></span>
<span class="line"><span style="color:#FF79C6;">      let</span><span style="color:#F8F8F2;"> b </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> 3</span></span>
<span class="line"><span style="color:#FF79C6;">      var</span><span style="color:#F8F8F2;"> c </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> 4</span></span>
<span class="line"><span style="color:#FF79C6;">      let</span><span style="color:#F8F8F2;"> d </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> 5</span></span>
<span class="line"><span style="color:#F8F8F2;">      console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(a)</span></span>
<span class="line"><span style="color:#F8F8F2;">      console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(b)</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">    console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(b) </span></span>
<span class="line"><span style="color:#F8F8F2;">    console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(c)</span></span>
<span class="line"><span style="color:#F8F8F2;">    console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(d)</span></span>
<span class="line"><span style="color:#F8F8F2;">}   </span></span>
<span class="line"><span style="color:#50FA7B;">foo</span><span style="color:#F8F8F2;">()</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+A+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>第一步是编译并创建执行上下文</p><figure><img src="'+_+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li>函数内部通过var声明的变量，在编译阶段全都被存放到变量环境里面了。</li><li>通过let声明的变量，在编译阶段会被存放到词法环境（Lexical Environment）中。</li><li>在函数的作用域内部，通过let声明的变量并没有被存放到词法环境中。</li><li>接下来，第二步继续执行代码，当执行到代码块里面时，变量环境中a的值已经被设置成了1，词法环境中b的值已经被设置成了2，</li></ul><figure><img src="'+x+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>在词法环境内部，维护了一个小型栈结构，栈底是函数最外层的变量，进入一个作用域块后，就会把该作用域块内部的变量压到栈顶；当作用域执行完成之后，该作用域的信息就会从栈顶弹出，这就是词法环境的结构。</p><figure><img src="'+k+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>当作用域块执行结束之后，其内部定义的变量就会从词法环境的栈顶弹出，最终执行上下文如下图所示：</p><figure><img src="'+j+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="作用域链和闭包" tabindex="-1"><a class="header-anchor" href="#作用域链和闭包"><span>作用域链和闭包</span></a></h2><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">function</span><span style="color:#50FA7B;"> bar</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#F8F8F2;">    console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(myName)</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#FF79C6;">function</span><span style="color:#50FA7B;"> foo</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#FF79C6;">    var</span><span style="color:#F8F8F2;"> myName </span><span style="color:#FF79C6;">=</span><span style="color:#E9F284;"> &quot;</span><span style="color:#F1FA8C;"> 极客邦 </span><span style="color:#E9F284;">&quot;</span></span>
<span class="line"><span style="color:#50FA7B;">    bar</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#FF79C6;">var</span><span style="color:#F8F8F2;"> myName </span><span style="color:#FF79C6;">=</span><span style="color:#E9F284;"> &quot;</span><span style="color:#F1FA8C;"> 极客时间 </span><span style="color:#E9F284;">&quot;</span></span>
<span class="line"><span style="color:#50FA7B;">foo</span><span style="color:#F8F8F2;">()</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+E+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="'+D+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="作用域链" tabindex="-1"><a class="header-anchor" href="#作用域链"><span>作用域链</span></a></h3><p>每个执行上下文的变量环境中，都包含了一个外部引用，用来指向外部的执行上下文</p><figure><img src="'+z+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="词法作用域" tabindex="-1"><a class="header-anchor" href="#词法作用域"><span>词法作用域</span></a></h3><p><strong>词法作用域就是指作用域是由代码中函数声明的位置来决定的</strong>，所以词法作用域是静态的作用域，通过它就能够预测代码在执行过程中如何查找标识符</p><figure><img src="'+N+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="变量查找" tabindex="-1"><a class="header-anchor" href="#变量查找"><span>变量查找</span></a></h3><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">function</span><span style="color:#50FA7B;"> bar</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#FF79C6;">    var</span><span style="color:#F8F8F2;"> myName </span><span style="color:#FF79C6;">=</span><span style="color:#E9F284;"> &quot;</span><span style="color:#F1FA8C;"> 极客世界 </span><span style="color:#E9F284;">&quot;</span></span>
<span class="line"><span style="color:#FF79C6;">    let</span><span style="color:#F8F8F2;"> test1 </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> 100</span></span>
<span class="line"><span style="color:#FF79C6;">    if</span><span style="color:#F8F8F2;"> (</span><span style="color:#BD93F9;">1</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#FF79C6;">        let</span><span style="color:#F8F8F2;"> myName </span><span style="color:#FF79C6;">=</span><span style="color:#E9F284;"> &quot;</span><span style="color:#F1FA8C;">Chrome 浏览器 </span><span style="color:#E9F284;">&quot;</span></span>
<span class="line"><span style="color:#F8F8F2;">        console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(test)</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#FF79C6;">function</span><span style="color:#50FA7B;"> foo</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#FF79C6;">    var</span><span style="color:#F8F8F2;"> myName </span><span style="color:#FF79C6;">=</span><span style="color:#E9F284;"> &quot;</span><span style="color:#F1FA8C;"> 极客邦 </span><span style="color:#E9F284;">&quot;</span></span>
<span class="line"><span style="color:#FF79C6;">    let</span><span style="color:#F8F8F2;"> test </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> 2</span></span>
<span class="line"><span style="color:#F8F8F2;">    {</span></span>
<span class="line"><span style="color:#FF79C6;">        let</span><span style="color:#F8F8F2;"> test </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> 3</span></span>
<span class="line"><span style="color:#50FA7B;">        bar</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#FF79C6;">var</span><span style="color:#F8F8F2;"> myName </span><span style="color:#FF79C6;">=</span><span style="color:#E9F284;"> &quot;</span><span style="color:#F1FA8C;"> 极客时间 </span><span style="color:#E9F284;">&quot;</span></span>
<span class="line"><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> myAge </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> 10</span></span>
<span class="line"><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> test </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> 1</span></span>
<span class="line"><span style="color:#50FA7B;">foo</span><span style="color:#F8F8F2;">()</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+S+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="'+q+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="闭包" tabindex="-1"><a class="header-anchor" href="#闭包"><span>闭包</span></a></h2><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">function</span><span style="color:#50FA7B;"> foo</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#FF79C6;">    var</span><span style="color:#F8F8F2;"> myName </span><span style="color:#FF79C6;">=</span><span style="color:#E9F284;"> &quot;</span><span style="color:#F1FA8C;"> 极客时间 </span><span style="color:#E9F284;">&quot;</span></span>
<span class="line"><span style="color:#FF79C6;">    let</span><span style="color:#F8F8F2;"> test1 </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> 1</span></span>
<span class="line"><span style="color:#FF79C6;">    const</span><span style="color:#F8F8F2;"> test2 </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> 2</span></span>
<span class="line"><span style="color:#FF79C6;">    var</span><span style="color:#F8F8F2;"> innerBar </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#50FA7B;">        getName</span><span style="color:#FF79C6;">:function</span><span style="color:#F8F8F2;">(){</span></span>
<span class="line"><span style="color:#F8F8F2;">            console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(test1)</span></span>
<span class="line"><span style="color:#FF79C6;">            return</span><span style="color:#F8F8F2;"> myName</span></span>
<span class="line"><span style="color:#F8F8F2;">        },</span></span>
<span class="line"><span style="color:#50FA7B;">        setName</span><span style="color:#FF79C6;">:function</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">newName</span><span style="color:#F8F8F2;">){</span></span>
<span class="line"><span style="color:#F8F8F2;">            myName </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> newName</span></span>
<span class="line"><span style="color:#F8F8F2;">        }</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#FF79C6;">    return</span><span style="color:#F8F8F2;"> innerBar</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#FF79C6;">var</span><span style="color:#F8F8F2;"> bar </span><span style="color:#FF79C6;">=</span><span style="color:#50FA7B;"> foo</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"><span style="color:#F8F8F2;">bar.</span><span style="color:#50FA7B;">setName</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;"> 极客邦 </span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">bar.</span><span style="color:#50FA7B;">getName</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(bar.</span><span style="color:#50FA7B;">getName</span><span style="color:#F8F8F2;">())</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+J+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="'+w+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="'+T+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="'+Z+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="'+H+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="闭包回收" tabindex="-1"><a class="header-anchor" href="#闭包回收"><span>闭包回收</span></a></h3><p>如果引用闭包的函数是一个全局变量，那么闭包会一直存在直到页面关闭；但如果这个闭包以后不再使用的话，就会造成内存泄漏。</p><p>引用闭包的函数是个局部变量，等函数销毁后，在下次 JavaScript 引擎执行垃圾回收时，判断闭包这块内容如果已经不再被使用了，那么 JavaScript 引擎的垃圾回收器就会回收这块内存。</p><h2 id="this" tabindex="-1"><a class="header-anchor" href="#this"><span>this</span></a></h2><p>当函数作为对象的方法调用时，函数中的 this 就是该对象； 当函数被正常调用时，在严格模式下，this 值是 undefined，非严格模式下 this 指向的是全局对象 window； 嵌套函数中的 this 不会继承外层函数的 this 值。</p><p>this 是和执行上下文绑定的 <img src="'+V+'" alt="" loading="lazy"></p><h1 id="参考" tabindex="-1"><a class="header-anchor" href="#参考"><span>参考</span></a></h1><p><a href="https://time.geekbang.org/column/intro/100033601" target="_blank" rel="noopener noreferrer">浏览器工作原理与实践</a></p>',94)]))}const L=n(O,[["render",P],["__file","implementation-mechanism.html.vue"]]),M=JSON.parse(`{"path":"/browse/implementation-mechanism.html","title":"JavaScript执行机制","lang":"en-US","frontmatter":{"title":"JavaScript执行机制","category":["Browse"],"date":"2021-07-16T00:00:00.000Z","description":"变量提升 执行过程中，若使用了未声明的变量，那么JavaScript执行会报错。 在一个变量定义之前使用它，不会出错，但是该变量的值会为undefined，而不是定义时的值。 在一个函数定义之前使用它，不会出错，且函数能正确执行 变量提升(Hoisting) JavaScript代码的执行流程 栈溢出 执行上下文 当JavaScript执行全局代码的时...","head":[["meta",{"property":"og:url","content":"https://luxiag.github.io/luxiag/blog/browse/implementation-mechanism.html"}],["meta",{"property":"og:title","content":"JavaScript执行机制"}],["meta",{"property":"og:description","content":"变量提升 执行过程中，若使用了未声明的变量，那么JavaScript执行会报错。 在一个变量定义之前使用它，不会出错，但是该变量的值会为undefined，而不是定义时的值。 在一个函数定义之前使用它，不会出错，且函数能正确执行 变量提升(Hoisting) JavaScript代码的执行流程 栈溢出 执行上下文 当JavaScript执行全局代码的时..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2024-11-03T07:17:49.000Z"}],["meta",{"property":"article:published_time","content":"2021-07-16T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-11-03T07:17:49.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"JavaScript执行机制\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2021-07-16T00:00:00.000Z\\",\\"dateModified\\":\\"2024-11-03T07:17:49.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"luxiag\\",\\"url\\":\\"https://luxiag.github.io/luxiag\\"}]}"]]},"headers":[{"level":2,"title":"变量提升","slug":"变量提升","link":"#变量提升","children":[{"level":3,"title":"变量提升(Hoisting)","slug":"变量提升-hoisting","link":"#变量提升-hoisting","children":[]},{"level":3,"title":"JavaScript代码的执行流程","slug":"javascript代码的执行流程","link":"#javascript代码的执行流程","children":[]}]},{"level":2,"title":"栈溢出","slug":"栈溢出","link":"#栈溢出","children":[{"level":3,"title":"浏览器查看调用栈","slug":"浏览器查看调用栈","link":"#浏览器查看调用栈","children":[]}]},{"level":2,"title":"作用域 （scope)","slug":"作用域-scope","link":"#作用域-scope","children":[{"level":3,"title":"变量提升的问题","slug":"变量提升的问题","link":"#变量提升的问题","children":[]},{"level":3,"title":"ES6解决变量提升的缺陷","slug":"es6解决变量提升的缺陷","link":"#es6解决变量提升的缺陷","children":[]},{"level":3,"title":"如何支持块级作用域","slug":"如何支持块级作用域","link":"#如何支持块级作用域","children":[]}]},{"level":2,"title":"作用域链和闭包","slug":"作用域链和闭包","link":"#作用域链和闭包","children":[{"level":3,"title":"作用域链","slug":"作用域链","link":"#作用域链","children":[]},{"level":3,"title":"词法作用域","slug":"词法作用域","link":"#词法作用域","children":[]},{"level":3,"title":"变量查找","slug":"变量查找","link":"#变量查找","children":[]}]},{"level":2,"title":"闭包","slug":"闭包","link":"#闭包","children":[{"level":3,"title":"闭包回收","slug":"闭包回收","link":"#闭包回收","children":[]}]},{"level":2,"title":"this","slug":"this","link":"#this","children":[]}],"git":{"createdTime":1684737522000,"updatedTime":1730618269000,"contributors":[{"name":"luxiag","email":"luxiag@qq.com","commits":1},{"name":"卢祥","email":"example@qq.com","commits":1}]},"readingTime":{"minutes":6.17,"words":1852},"filePathRelative":"browse/implementation-mechanism.md","localizedDate":"July 16, 2021","excerpt":"<h2>变量提升</h2>\\n<div class=\\"language-js line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"js\\" data-title=\\"js\\" style=\\"background-color:#282A36;color:#F8F8F2\\"><pre class=\\"shiki dracula vp-code\\"><code><span class=\\"line\\"><span style=\\"color:#50FA7B\\">showName</span><span style=\\"color:#F8F8F2\\">()</span></span>\\n<span class=\\"line\\"><span style=\\"color:#F8F8F2\\">console.</span><span style=\\"color:#50FA7B\\">log</span><span style=\\"color:#F8F8F2\\">(myname)</span></span>\\n<span class=\\"line\\"><span style=\\"color:#FF79C6\\">var</span><span style=\\"color:#F8F8F2\\"> myname </span><span style=\\"color:#FF79C6\\">=</span><span style=\\"color:#E9F284\\"> '</span><span style=\\"color:#F1FA8C\\">极客时间</span><span style=\\"color:#E9F284\\">'</span></span>\\n<span class=\\"line\\"><span style=\\"color:#FF79C6\\">function</span><span style=\\"color:#50FA7B\\"> showName</span><span style=\\"color:#F8F8F2\\">() {</span></span>\\n<span class=\\"line\\"><span style=\\"color:#F8F8F2\\">    console.</span><span style=\\"color:#50FA7B\\">log</span><span style=\\"color:#F8F8F2\\">(</span><span style=\\"color:#E9F284\\">'</span><span style=\\"color:#F1FA8C\\">函数showName被执行</span><span style=\\"color:#E9F284\\">'</span><span style=\\"color:#F8F8F2\\">);</span></span>\\n<span class=\\"line\\"><span style=\\"color:#F8F8F2\\">}</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}`);export{L as comp,M as data};
