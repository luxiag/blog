import{_ as a,c as l,b as e,o as n}from"./app-DmuFHWsy.js";const o={};function p(r,s){return n(),l("div",null,s[0]||(s[0]=[e(`<h2 id="loader-本质" tabindex="-1"><a class="header-anchor" href="#loader-本质"><span>loader 本质</span></a></h2><p>| webpack 只能处理 JavaScript 和 JSON 文件，其他类型的文件 webpack 需要借助 loader 来处理,loader 本质就是一个 JavaScript 函数</p><h2 id="loader-的使用" tabindex="-1"><a class="header-anchor" href="#loader-的使用"><span>loader 的使用</span></a></h2><ul><li>配置方式（官方推荐）</li><li>内联方式</li></ul><details class="hint-container details"><summary>配置方式</summary><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#8BE9FD;font-style:italic;">module</span><span style="color:#F8F8F2;">.</span><span style="color:#8BE9FD;font-style:italic;">exports</span><span style="color:#FF79C6;"> =</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  module</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">    rules</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> [</span></span>
<span class="line"><span style="color:#F8F8F2;">      {</span></span>
<span class="line"><span style="color:#F8F8F2;">        test</span><span style="color:#FF79C6;">:</span><span style="color:#FF5555;"> /</span><span style="color:#F1FA8C;">\\.css</span><span style="color:#FF79C6;">$</span><span style="color:#FF5555;">/</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">        use</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> [</span></span>
<span class="line"><span style="color:#6272A4;">          // [style-loader](/loaders/style-loader)</span></span>
<span class="line"><span style="color:#F8F8F2;">          { loader</span><span style="color:#FF79C6;">:</span><span style="color:#E9F284;"> &quot;</span><span style="color:#F1FA8C;">style-loader</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;"> },</span></span>
<span class="line"><span style="color:#6272A4;">          // [css-loader](/loaders/css-loader)</span></span>
<span class="line"><span style="color:#F8F8F2;">          {</span></span>
<span class="line"><span style="color:#F8F8F2;">            loader</span><span style="color:#FF79C6;">:</span><span style="color:#E9F284;"> &quot;</span><span style="color:#F1FA8C;">css-loader</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">            options</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">              modules</span><span style="color:#FF79C6;">:</span><span style="color:#BD93F9;"> true</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">            },</span></span>
<span class="line"><span style="color:#F8F8F2;">          },</span></span>
<span class="line"><span style="color:#6272A4;">          // [sass-loader](/loaders/sass-loader)</span></span>
<span class="line"><span style="color:#F8F8F2;">          { loader</span><span style="color:#FF79C6;">:</span><span style="color:#E9F284;"> &quot;</span><span style="color:#F1FA8C;">sass-loader</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;"> },</span></span>
<span class="line"><span style="color:#F8F8F2;">        ],</span></span>
<span class="line"><span style="color:#F8F8F2;">      },</span></span>
<span class="line"><span style="color:#F8F8F2;">    ],</span></span>
<span class="line"><span style="color:#F8F8F2;">  },</span></span>
<span class="line"><span style="color:#F8F8F2;">};</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><details class="hint-container details"><summary>内联方式</summary><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#6272A4;">// 使用 ! 将资源中的 loader 分开。每个部分都会相对于当前目录解析。</span></span>
<span class="line"><span style="color:#FF79C6;">import</span><span style="color:#F8F8F2;"> Styles </span><span style="color:#FF79C6;">from</span><span style="color:#E9F284;"> &quot;</span><span style="color:#F1FA8C;">style-loader!css-loader?modules!./styles.css</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></details><h3 id="loader-的分类" tabindex="-1"><a class="header-anchor" href="#loader-的分类"><span>loader 的分类</span></a></h3><p>配置方式更具<code>Rule.enforce</code>的取值 loader 分为前置<code>pre</code>和后置<code>post</code>,默认为<code>normal</code></p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#F8F8F2;">rules: [</span></span>
<span class="line"><span style="color:#F8F8F2;">  {</span></span>
<span class="line"><span style="color:#F8F8F2;">    test</span><span style="color:#FF79C6;">:</span><span style="color:#FF5555;"> /</span><span style="color:#F1FA8C;">\\.</span><span style="color:#FFB86C;">(</span><span style="color:#F1FA8C;">t</span><span style="color:#FF79C6;">|</span><span style="color:#F1FA8C;">j</span><span style="color:#FFB86C;">)</span><span style="color:#F1FA8C;">s</span><span style="color:#FF79C6;">$</span><span style="color:#FF5555;">/</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">    exclude</span><span style="color:#FF79C6;">:</span><span style="color:#FF5555;"> /</span><span style="color:#F1FA8C;">node_modules</span><span style="color:#FF5555;">/</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">    enforce</span><span style="color:#FF79C6;">:</span><span style="color:#E9F284;"> &#39;</span><span style="color:#F1FA8C;">pre</span><span style="color:#E9F284;">&#39;</span><span style="color:#6272A4;">// post</span></span>
<span class="line"><span style="color:#F8F8F2;">    use: {</span></span>
<span class="line"><span style="color:#F8F8F2;">      loader</span><span style="color:#FF79C6;">:</span><span style="color:#E9F284;"> &quot;</span><span style="color:#F1FA8C;">babel-loader</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">      options</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">        cacheDirectory</span><span style="color:#FF79C6;">:</span><span style="color:#BD93F9;"> true</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">      },</span></span>
<span class="line"><span style="color:#F8F8F2;">    },</span></span>
<span class="line"><span style="color:#F8F8F2;">  },</span></span>
<span class="line"><span style="color:#F8F8F2;">];</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>内联方式的 loader 取值为行内<code>inline</code></p><h3 id="inline-方式的-loader" tabindex="-1"><a class="header-anchor" href="#inline-方式的-loader"><span>inline 方式的 loader</span></a></h3><p>使用 ! 将资源中的 loader 分开。每个部分都会相对于当前目录解析。</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">import</span><span style="color:#F8F8F2;"> Styles </span><span style="color:#FF79C6;">from</span><span style="color:#E9F284;"> &quot;</span><span style="color:#F1FA8C;">style-loader!css-loader?modules!./styles.css</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>使用 ! 前缀，将禁用所有已配置的 normal loader(普通 loader)</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">import</span><span style="color:#F8F8F2;"> Styles </span><span style="color:#FF79C6;">from</span><span style="color:#E9F284;"> &quot;</span><span style="color:#F1FA8C;">!style-loader!css-loader?modules!./styles.css</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>使用 !! 前缀，将禁用所有已配置的 loader（preLoader, loader, postLoader）</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">import</span><span style="color:#F8F8F2;"> Styles </span><span style="color:#FF79C6;">from</span><span style="color:#E9F284;"> &quot;</span><span style="color:#F1FA8C;">!!style-loader!css-loader?modules!./styles.css</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>使用 -! 前缀，将禁用所有已配置的 preLoader 和 loader，但是不禁用 postLoaders</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">import</span><span style="color:#F8F8F2;"> Styles </span><span style="color:#FF79C6;">from</span><span style="color:#E9F284;"> &quot;</span><span style="color:#F1FA8C;">-!style-loader!css-loader?modules!./styles.css</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="loader-的优先级" tabindex="-1"><a class="header-anchor" href="#loader-的优先级"><span>loader 的优先级</span></a></h2><p>四种 loader 调用先后顺序为：pre &gt; normal &gt; inline &gt; post</p><p>每个 loader 都有 normal 函数和 pitch 函数</p><ul><li>normal 函数 相同种类 loader 的情况下，调用的优先级为，自下而上，自右向左。</li><li>pitch 函数 则反过来</li></ul><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#6272A4;">// xx-loader</span></span>
<span class="line"><span style="color:#6272A4;">// normal函数</span></span>
<span class="line"><span style="color:#8BE9FD;font-style:italic;">module</span><span style="color:#F8F8F2;">.</span><span style="color:#8BE9FD;font-style:italic;">exports</span><span style="color:#FF79C6;"> =</span><span style="color:#FF79C6;"> function</span><span style="color:#F8F8F2;"> (</span><span style="color:#FFB86C;font-style:italic;">source</span><span style="color:#F8F8F2;">) {};</span></span>
<span class="line"><span style="color:#6272A4;">// pitch函数</span></span>
<span class="line"><span style="color:#8BE9FD;font-style:italic;">module</span><span style="color:#F8F8F2;">.</span><span style="color:#8BE9FD;font-style:italic;">exports</span><span style="color:#F8F8F2;">.</span><span style="color:#50FA7B;">pitch</span><span style="color:#FF79C6;"> =</span><span style="color:#FF79C6;"> function</span><span style="color:#F8F8F2;"> (</span><span style="color:#FFB86C;font-style:italic;">remainingRequest</span><span style="color:#F8F8F2;">) {};</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="pitch-函数" tabindex="-1"><a class="header-anchor" href="#pitch-函数"><span>pitch 函数</span></a></h3><p>loader 有两个函数，默认<code>module.exports</code>导出函数为<code>normal</code>函数,<code>module.exports.pitch</code>导出函数为<code>pitch</code>方法</p><p>在 loader 从右向左调用之前，会进行一次从左到右的 pitch 方法调用，而在 pitch 调用过程中，如果任何一个有返回值，那么将阻断后续的 loader 调用链，进而将自身的返回结果传递给上一个 loader 作为 content</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#F8F8F2;">use: [</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">a-loader</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">, </span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">b-loader</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">, </span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">c-loader</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">];</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>顺序 a-loader.pitch =&gt; b-loader.pitch =&gt; c-loader.pitch =&gt; c-loader =&gt; b-loader =&gt; a-loader</p><p>如果 pitch loader有返回值 将会跳过后面的loader 将结果传递给前一个loader 例如： b-loader.pitch 有返回值 a-loader.pitch =&gt; b-loader.pitch =&gt; a-loader</p>`,30)]))}const c=a(o,[["render",p],["__file","loader-basic-knowledge.html.vue"]]),i=JSON.parse('{"path":"/webpack/loader-basic-knowledge.html","title":"什么是loader","lang":"en-US","frontmatter":{"title":"什么是loader","date":"2020-08-11T00:00:00.000Z","description":"loader 本质 | webpack 只能处理 JavaScript 和 JSON 文件，其他类型的文件 webpack 需要借助 loader 来处理,loader 本质就是一个 JavaScript 函数 loader 的使用 配置方式（官方推荐） 内联方式 配置方式 内联方式 loader 的分类 配置方式更具Rule.enforce的取值 l...","head":[["meta",{"property":"og:url","content":"https://luxiag.github.io/luxiag/blog/webpack/loader-basic-knowledge.html"}],["meta",{"property":"og:title","content":"什么是loader"}],["meta",{"property":"og:description","content":"loader 本质 | webpack 只能处理 JavaScript 和 JSON 文件，其他类型的文件 webpack 需要借助 loader 来处理,loader 本质就是一个 JavaScript 函数 loader 的使用 配置方式（官方推荐） 内联方式 配置方式 内联方式 loader 的分类 配置方式更具Rule.enforce的取值 l..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2022-10-30T12:36:28.000Z"}],["meta",{"property":"article:published_time","content":"2020-08-11T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2022-10-30T12:36:28.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"什么是loader\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2020-08-11T00:00:00.000Z\\",\\"dateModified\\":\\"2022-10-30T12:36:28.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"luxiag\\",\\"url\\":\\"https://luxiag.github.io/luxiag\\"}]}"]]},"headers":[{"level":2,"title":"loader 本质","slug":"loader-本质","link":"#loader-本质","children":[]},{"level":2,"title":"loader 的使用","slug":"loader-的使用","link":"#loader-的使用","children":[{"level":3,"title":"loader 的分类","slug":"loader-的分类","link":"#loader-的分类","children":[]},{"level":3,"title":"inline 方式的 loader","slug":"inline-方式的-loader","link":"#inline-方式的-loader","children":[]}]},{"level":2,"title":"loader 的优先级","slug":"loader-的优先级","link":"#loader-的优先级","children":[{"level":3,"title":"pitch 函数","slug":"pitch-函数","link":"#pitch-函数","children":[]}]}],"git":{"createdTime":1666690545000,"updatedTime":1667133388000,"contributors":[{"name":"luxiang","email":"luxiag@qq.com","commits":1},{"name":"卢祥","email":"example@gmail.com","commits":1}]},"readingTime":{"minutes":1.95,"words":584},"filePathRelative":"webpack/loader-basic-knowledge.md","localizedDate":"August 11, 2020","excerpt":"<h2>loader 本质</h2>\\n<p>| webpack 只能处理 JavaScript 和 JSON 文件，其他类型的文件 webpack 需要借助 loader 来处理,loader 本质就是一个 JavaScript 函数</p>","autoDesc":true}');export{c as comp,i as data};
