import{_ as n,c as a,a as l,o as e}from"./app-kNiJQAdO.js";const p="/blog/assets/1680123401111144500-BDXDGjxF.png",o={};function F(t,s){return e(),a("div",null,s[0]||(s[0]=[l('<figure><img src="'+p+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><div class="language-css line-numbers-mode" data-highlighter="shiki" data-ext="css" data-title="css" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#50FA7B;font-style:italic;">.hello</span><span style="color:#F8F8F2;">[</span><span style="color:#50FA7B;font-style:italic;">data-v-469af010</span><span style="color:#F8F8F2;">] {</span></span>
<span class="line"><span style="color:#8BE9FD;">  background-color</span><span style="color:#FF79C6;">:</span><span style="color:#BD93F9;"> red</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="用法" tabindex="-1"><a class="header-anchor" href="#用法"><span>用法</span></a></h2><h3 id="scoped-css" tabindex="-1"><a class="header-anchor" href="#scoped-css"><span>Scoped CSS</span></a></h3><p>当 <code>&lt;style&gt;</code> 标签有 <code>scoped</code> 属性时，它的 CSS 只作用于当前组件中的元素。这类似于 Shadow DOM 中的样式封装。它有一些注意事项，但不需要任何 polyfill。它通过使用 PostCSS 来实现以下转换：</p><div class="language-html line-numbers-mode" data-highlighter="shiki" data-ext="html" data-title="html" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#F8F8F2;">&lt;</span><span style="color:#FF79C6;">style</span><span style="color:#50FA7B;font-style:italic;"> scoped</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"><span style="color:#50FA7B;font-style:italic;">  .example</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#8BE9FD;">    color</span><span style="color:#FF79C6;">:</span><span style="color:#BD93F9;"> red</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">&lt;/</span><span style="color:#FF79C6;">style</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">&lt;</span><span style="color:#FF79C6;">template</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">  &lt;</span><span style="color:#FF79C6;">div</span><span style="color:#50FA7B;font-style:italic;"> class</span><span style="color:#FF79C6;">=</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">example</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">&gt;hi&lt;/</span><span style="color:#FF79C6;">div</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">&lt;/</span><span style="color:#FF79C6;">template</span><span style="color:#F8F8F2;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>转换结果：</p><div class="language-html line-numbers-mode" data-highlighter="shiki" data-ext="html" data-title="html" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#F8F8F2;">&lt;</span><span style="color:#FF79C6;">style</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"><span style="color:#50FA7B;font-style:italic;">  .example</span><span style="color:#F8F8F2;">[</span><span style="color:#50FA7B;font-style:italic;">data-v-f3f3eg9</span><span style="color:#F8F8F2;">] {</span></span>
<span class="line"><span style="color:#8BE9FD;">    color</span><span style="color:#FF79C6;">:</span><span style="color:#BD93F9;"> red</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">&lt;/</span><span style="color:#FF79C6;">style</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">&lt;</span><span style="color:#FF79C6;">template</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">  &lt;</span><span style="color:#FF79C6;">div</span><span style="color:#50FA7B;font-style:italic;"> class</span><span style="color:#FF79C6;">=</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">example</span><span style="color:#E9F284;">&quot;</span><span style="color:#50FA7B;font-style:italic;"> data-v-f3f3eg9</span><span style="color:#F8F8F2;">&gt;hi&lt;/</span><span style="color:#FF79C6;">div</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">&lt;/</span><span style="color:#FF79C6;">template</span><span style="color:#F8F8F2;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="混用本地和全局样式" tabindex="-1"><a class="header-anchor" href="#混用本地和全局样式"><span>混用本地和全局样式</span></a></h3><p>你可以在一个组件中同时使用有 scoped 和非 scoped 样式：</p><div class="language-html line-numbers-mode" data-highlighter="shiki" data-ext="html" data-title="html" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#F8F8F2;">&lt;</span><span style="color:#FF79C6;">style</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"><span style="color:#6272A4;">  /* 全局样式 */</span></span>
<span class="line"><span style="color:#F8F8F2;">&lt;/</span><span style="color:#FF79C6;">style</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">&lt;</span><span style="color:#FF79C6;">style</span><span style="color:#50FA7B;font-style:italic;"> scoped</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"><span style="color:#6272A4;">  /* 本地样式 */</span></span>
<span class="line"><span style="color:#F8F8F2;">&lt;/</span><span style="color:#FF79C6;">style</span><span style="color:#F8F8F2;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="子组件的根元素" tabindex="-1"><a class="header-anchor" href="#子组件的根元素"><span>子组件的根元素</span></a></h4><p>使用 <code>scoped</code> 后，父组件的样式将不会渗透到子组件中。不过一个子组件的根节点会同时受其父组件的 scoped CSS 和子组件的 scoped CSS 的影响。这样设计是为了让父组件可以从布局的角度出发，调整其子组件根元素的样式。</p><h4 id="深度作用选择器" tabindex="-1"><a class="header-anchor" href="#深度作用选择器"><span>深度作用选择器</span></a></h4><p>如果你希望 <code>scoped</code> 样式中的一个选择器能够作用得“更深”，例如影响子组件，你可以使用 <code>&gt;&gt;&gt;</code> 操作符：</p><div class="language-html line-numbers-mode" data-highlighter="shiki" data-ext="html" data-title="html" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#F8F8F2;">&lt;</span><span style="color:#FF79C6;">style</span><span style="color:#50FA7B;font-style:italic;"> scoped</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"><span style="color:#50FA7B;font-style:italic;">  .a</span><span> </span><span style="color:#F8F8F2;font-style:italic;text-decoration:underline;">&gt;&gt;&gt;</span><span style="color:#50FA7B;font-style:italic;"> .b</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#6272A4;">    /* ... */</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">&lt;/</span><span style="color:#FF79C6;">style</span><span style="color:#F8F8F2;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述代码将会编译成：</p><div class="language-css line-numbers-mode" data-highlighter="shiki" data-ext="css" data-title="css" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#50FA7B;font-style:italic;">.a</span><span style="color:#F8F8F2;">[</span><span style="color:#50FA7B;font-style:italic;">data-v-f3f3eg9</span><span style="color:#F8F8F2;">]</span><span style="color:#50FA7B;font-style:italic;"> .b</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#6272A4;">  /* ... */</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>有些像 Sass 之类的预处理器无法正确解析 <code>&gt;&gt;&gt;</code>。这种情况下你可以使用 <code>/deep/</code> 或 <code>::v-deep</code> 操作符取而代之——两者都是 <code>&gt;&gt;&gt;</code> 的别名，同样可以正常工作。</p><h3 id="动态生成的内容" tabindex="-1"><a class="header-anchor" href="#动态生成的内容"><span>动态生成的内容</span></a></h3><p>通过 <code>v-html</code> 创建的 DOM 内容不受 scoped 样式影响，但是你仍然可以通过深度作用选择器来为他们设置样式。</p><h3 id="还有一些要留意" tabindex="-1"><a class="header-anchor" href="#还有一些要留意"><span>还有一些要留意</span></a></h3><ul><li><p><strong>Scoped 样式不能代替 class</strong>。考虑到浏览器渲染各种 CSS 选择器的方式，当 <code>p { color: red }</code> 是 scoped 时 (即与特性选择器组合使用时) 会慢很多倍。如果你使用 class 或者 id 取而代之，比如 <code>.example { color: red }</code>，性能影响就会消除。</p></li><li><p><strong>在递归组件中小心使用后代选择器!</strong> 对选择器 <code>.a .b</code> 中的 CSS 规则来说，如果匹配 <code>.a</code> 的元素包含一个递归子组件，则所有的子组件中的 <code>.b</code> 都将被这个规则匹配。</p></li></ul><h2 id="template-处理" tabindex="-1"><a class="header-anchor" href="#template-处理"><span>template 处理</span></a></h2><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#6272A4;">// lib/index</span></span>
<span class="line"><span style="color:#6272A4;">// module id for scoped CSS &amp; hot-reload</span></span>
<span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> rawShortFilePath </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> path</span></span>
<span class="line"><span style="color:#F8F8F2;">  .</span><span style="color:#50FA7B;">relative</span><span style="color:#F8F8F2;">(context, resourcePath)</span></span>
<span class="line"><span style="color:#F8F8F2;">  .</span><span style="color:#50FA7B;">replace</span><span style="color:#F8F8F2;">(</span><span style="color:#FF5555;">/</span><span style="color:#FF79C6;">^</span><span style="color:#FFB86C;">(</span><span style="color:#F1FA8C;">\\.\\.</span><span style="color:#8BE9FD;">[</span><span style="color:#F1FA8C;">\\/\\\\</span><span style="color:#8BE9FD;">]</span><span style="color:#FFB86C;">)</span><span style="color:#FF79C6;">+</span><span style="color:#FF5555;">/</span><span style="color:#F8F8F2;">, </span><span style="color:#E9F284;">&quot;&quot;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> shortFilePath </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> rawShortFilePath.</span><span style="color:#50FA7B;">replace</span><span style="color:#F8F8F2;">(</span><span style="color:#FF5555;">/</span><span style="color:#F1FA8C;">\\\\</span><span style="color:#FF5555;">/</span><span style="color:#FF79C6;">g</span><span style="color:#F8F8F2;">, </span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">/</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">+</span><span style="color:#F8F8F2;"> resourceQuery;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">// 生成 id</span></span>
<span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> id </span><span style="color:#FF79C6;">=</span><span style="color:#50FA7B;"> hash</span><span style="color:#F8F8F2;">(</span></span>
<span class="line"><span style="color:#F8F8F2;">  isProduction</span></span>
<span class="line"><span style="color:#FF79C6;">    ?</span><span style="color:#F8F8F2;"> shortFilePath </span><span style="color:#FF79C6;">+</span><span style="color:#E9F284;"> &quot;</span><span style="color:#FF79C6;">\\n</span><span style="color:#E9F284;">&quot;</span><span style="color:#FF79C6;"> +</span><span style="color:#F8F8F2;"> source.</span><span style="color:#50FA7B;">replace</span><span style="color:#F8F8F2;">(</span><span style="color:#FF5555;">/</span><span style="color:#BD93F9;">\\r\\n</span><span style="color:#FF5555;">/</span><span style="color:#FF79C6;">g</span><span style="color:#F8F8F2;">, </span><span style="color:#E9F284;">&quot;</span><span style="color:#FF79C6;">\\n</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#FF79C6;">    :</span><span style="color:#F8F8F2;"> shortFilePath</span></span>
<span class="line"><span style="color:#F8F8F2;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">// 遍历 style 标签判断是否有scoped</span></span>
<span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> hasScoped </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> descriptor.styles.</span><span style="color:#50FA7B;">some</span><span style="color:#F8F8F2;">((</span><span style="color:#FFB86C;font-style:italic;">s</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> s.scoped);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> templateImport </span><span style="color:#FF79C6;">=</span><span style="color:#F1FA8C;"> \`var render, staticRenderFns\`</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> templateRequest;</span></span>
<span class="line"><span style="color:#FF79C6;">if</span><span style="color:#F8F8F2;"> (descriptor.template) {</span></span>
<span class="line"><span style="color:#FF79C6;">  const</span><span style="color:#F8F8F2;"> src </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> descriptor.template.src </span><span style="color:#FF79C6;">||</span><span style="color:#F8F8F2;"> resourcePath;</span></span>
<span class="line"><span style="color:#FF79C6;">  const</span><span style="color:#F8F8F2;"> idQuery </span><span style="color:#FF79C6;">=</span><span style="color:#F1FA8C;"> \`&amp;id=</span><span style="color:#FF79C6;">\${</span><span style="color:#F8F8F2;">id</span><span style="color:#FF79C6;">}</span><span style="color:#F1FA8C;">\`</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#FF79C6;">  const</span><span style="color:#F8F8F2;"> scopedQuery </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> hasScoped </span><span style="color:#FF79C6;">?</span><span style="color:#F1FA8C;"> \`&amp;scoped=true\`</span><span style="color:#FF79C6;"> :</span><span style="color:#F1FA8C;"> \`\`</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#FF79C6;">  const</span><span style="color:#F8F8F2;"> attrsQuery </span><span style="color:#FF79C6;">=</span><span style="color:#50FA7B;"> attrsToQuery</span><span style="color:#F8F8F2;">(descriptor.template.attrs);</span></span>
<span class="line"><span style="color:#FF79C6;">  const</span><span style="color:#F8F8F2;"> query </span><span style="color:#FF79C6;">=</span><span style="color:#F1FA8C;"> \`?vue&amp;type=template</span><span style="color:#FF79C6;">\${</span><span style="color:#F8F8F2;">idQuery</span><span style="color:#FF79C6;">}\${</span><span style="color:#F8F8F2;">scopedQuery</span><span style="color:#FF79C6;">}\${</span><span style="color:#F8F8F2;">attrsQuery</span><span style="color:#FF79C6;">}\${</span><span style="color:#F8F8F2;">inheritQuery</span><span style="color:#FF79C6;">}</span><span style="color:#F1FA8C;">\`</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#FF79C6;">  const</span><span style="color:#F8F8F2;"> request </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> (templateRequest </span><span style="color:#FF79C6;">=</span><span style="color:#50FA7B;"> stringifyRequest</span><span style="color:#F8F8F2;">(src </span><span style="color:#FF79C6;">+</span><span style="color:#F8F8F2;"> query));</span></span>
<span class="line"><span style="color:#F8F8F2;">  templateImport </span><span style="color:#FF79C6;">=</span><span style="color:#F1FA8C;"> \`import { render, staticRenderFns } from </span><span style="color:#FF79C6;">\${</span><span style="color:#F8F8F2;">request</span><span style="color:#FF79C6;">}</span><span style="color:#F1FA8C;">\`</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#6272A4;">  //import { render, staticRenderFns } from &quot;./HelloWorld.vue?vue&amp;type=template&amp;id=469af010&amp;scoped=true&amp;&quot;</span></span>
<span class="line"><span style="color:#6272A4;">  //  pitcher loader匹配?vue</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="pitcher-loader" tabindex="-1"><a class="header-anchor" href="#pitcher-loader"><span>pitcher loader</span></a></h3><p><code>li/loaders/pitcher</code></p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">if</span><span style="color:#F8F8F2;"> (query.type </span><span style="color:#FF79C6;">===</span><span style="color:#F1FA8C;"> \`template\`</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#FF79C6;">  const</span><span style="color:#F8F8F2;"> path </span><span style="color:#FF79C6;">=</span><span style="color:#50FA7B;"> require</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">path</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#FF79C6;">  const</span><span style="color:#F8F8F2;"> cacheLoader </span><span style="color:#FF79C6;">=</span></span>
<span class="line"><span style="color:#F8F8F2;">    cacheDirectory </span><span style="color:#FF79C6;">&amp;&amp;</span><span style="color:#F8F8F2;"> cacheIdentifier</span></span>
<span class="line"><span style="color:#FF79C6;">      ?</span><span style="color:#F8F8F2;"> [</span></span>
<span class="line"><span style="color:#F1FA8C;">          \`</span><span style="color:#FF79C6;">\${</span><span style="color:#F8F8F2;">require.</span><span style="color:#50FA7B;">resolve</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">cache-loader</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">)</span><span style="color:#FF79C6;">}</span><span style="color:#F1FA8C;">?</span><span style="color:#FF79C6;">\${</span><span style="color:#BD93F9;">JSON</span><span style="color:#F8F8F2;">.</span><span style="color:#50FA7B;">stringify</span><span style="color:#F8F8F2;">(</span><span style="color:#F1FA8C;">{</span></span>
<span class="line"><span style="color:#6272A4;">            // For some reason, webpack fails to generate consistent hash if we</span></span>
<span class="line"><span style="color:#6272A4;">            // use absolute paths here, even though the path is only used in a</span></span>
<span class="line"><span style="color:#6272A4;">            // comment. For now we have to ensure cacheDirectory is a relative path.</span></span>
<span class="line"><span style="color:#F1FA8C;">            cacheDirectory</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> (path.</span><span style="color:#50FA7B;">isAbsolute</span><span style="color:#F8F8F2;">(cacheDirectory)</span></span>
<span class="line"><span style="color:#FF79C6;">              ?</span><span style="color:#F8F8F2;"> path.</span><span style="color:#50FA7B;">relative</span><span style="color:#F8F8F2;">(process.</span><span style="color:#50FA7B;">cwd</span><span style="color:#F8F8F2;">()</span><span style="color:#F1FA8C;">, </span><span style="color:#F8F8F2;">cacheDirectory)</span></span>
<span class="line"><span style="color:#FF79C6;">              :</span><span style="color:#F8F8F2;"> cacheDirectory</span></span>
<span class="line"><span style="color:#F8F8F2;">            ).</span><span style="color:#50FA7B;">replace</span><span style="color:#F8F8F2;">(</span><span style="color:#FF5555;">/</span><span style="color:#F1FA8C;">\\\\</span><span style="color:#FF5555;">/</span><span style="color:#FF79C6;">g</span><span style="color:#F1FA8C;">, </span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">/</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">)</span><span style="color:#F1FA8C;">,</span></span>
<span class="line"><span style="color:#F1FA8C;">            cacheIdentifier</span><span style="color:#FF79C6;">:</span><span style="color:#50FA7B;"> hash</span><span style="color:#F8F8F2;">(cacheIdentifier)</span><span style="color:#FF79C6;"> +</span><span style="color:#E9F284;"> &quot;</span><span style="color:#F1FA8C;">-vue-loader-template</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">,</span></span>
<span class="line"><span style="color:#F1FA8C;">          }</span><span style="color:#F8F8F2;">)</span><span style="color:#FF79C6;">}</span><span style="color:#F1FA8C;">\`</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">        ]</span></span>
<span class="line"><span style="color:#FF79C6;">      :</span><span style="color:#F8F8F2;"> [];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">  const</span><span style="color:#F8F8F2;"> preLoaders </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> loaders.</span><span style="color:#50FA7B;">filter</span><span style="color:#F8F8F2;">(isPreLoader);</span></span>
<span class="line"><span style="color:#FF79C6;">  const</span><span style="color:#F8F8F2;"> postLoaders </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> loaders.</span><span style="color:#50FA7B;">filter</span><span style="color:#F8F8F2;">(isPostLoader);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">  const</span><span style="color:#F8F8F2;"> request </span><span style="color:#FF79C6;">=</span><span style="color:#50FA7B;"> genRequest</span><span style="color:#F8F8F2;">([</span></span>
<span class="line"><span style="color:#FF79C6;">    ...</span><span style="color:#F8F8F2;">cacheLoader,</span></span>
<span class="line"><span style="color:#FF79C6;">    ...</span><span style="color:#F8F8F2;">postLoaders,</span></span>
<span class="line"><span style="color:#F8F8F2;">    templateLoaderPath </span><span style="color:#FF79C6;">+</span><span style="color:#F1FA8C;"> \`??vue-loader-options\`</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#FF79C6;">    ...</span><span style="color:#F8F8F2;">preLoaders,</span></span>
<span class="line"><span style="color:#F8F8F2;">  ]);</span></span>
<span class="line"><span style="color:#6272A4;">  // console.log(request)</span></span>
<span class="line"><span style="color:#6272A4;">  // the template compiler uses esm exports</span></span>
<span class="line"><span style="color:#F8F8F2;">  console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#F1FA8C;">\`export * from </span><span style="color:#FF79C6;">\${</span><span style="color:#F8F8F2;">request</span><span style="color:#FF79C6;">}</span><span style="color:#F1FA8C;">\`</span><span style="color:#F8F8F2;">, </span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">template</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#FF79C6;">  return</span><span style="color:#F1FA8C;"> \`export * from </span><span style="color:#FF79C6;">\${</span><span style="color:#F8F8F2;">request</span><span style="color:#FF79C6;">}</span><span style="color:#F1FA8C;">\`</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="templateloaderpath" tabindex="-1"><a class="header-anchor" href="#templateloaderpath"><span>templateLoaderPath</span></a></h3><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#6272A4;">// vue-template-compiler 把 template 转换为render函数</span></span>
<span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> compiler </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> options.compiler </span><span style="color:#FF79C6;">||</span><span style="color:#50FA7B;"> require</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">vue-template-compiler</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> compilerOptions </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> Object.</span><span style="color:#50FA7B;">assign</span><span style="color:#F8F8F2;">(</span></span>
<span class="line"><span style="color:#F8F8F2;">  {</span></span>
<span class="line"><span style="color:#F8F8F2;">    outputSourceRange</span><span style="color:#FF79C6;">:</span><span style="color:#BD93F9;"> true</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">  },</span></span>
<span class="line"><span style="color:#F8F8F2;">  options.compilerOptions,</span></span>
<span class="line"><span style="color:#F8F8F2;">  {</span></span>
<span class="line"><span style="color:#F8F8F2;">    scopeId</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> query.scoped </span><span style="color:#FF79C6;">?</span><span style="color:#F1FA8C;"> \`data-v-</span><span style="color:#FF79C6;">\${</span><span style="color:#F8F8F2;">id</span><span style="color:#FF79C6;">}</span><span style="color:#F1FA8C;">\`</span><span style="color:#FF79C6;"> :</span><span style="color:#BD93F9;"> null</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">    comments</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> query.comments,</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="style-处理" tabindex="-1"><a class="header-anchor" href="#style-处理"><span>style 处理</span></a></h2><h3 id="vue-loader" tabindex="-1"><a class="header-anchor" href="#vue-loader"><span>vue-loader</span></a></h3><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> stylesCode </span><span style="color:#FF79C6;">=</span><span style="color:#F1FA8C;"> \`\`</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#FF79C6;">if</span><span style="color:#F8F8F2;"> (descriptor.styles.length) {</span></span>
<span class="line"><span style="color:#F8F8F2;">  stylesCode </span><span style="color:#FF79C6;">=</span><span style="color:#50FA7B;"> genStylesCode</span><span style="color:#F8F8F2;">(</span></span>
<span class="line"><span style="color:#F8F8F2;">    loaderContext,</span></span>
<span class="line"><span style="color:#F8F8F2;">    descriptor.styles,</span></span>
<span class="line"><span style="color:#F8F8F2;">    id,</span></span>
<span class="line"><span style="color:#F8F8F2;">    resourcePath,</span></span>
<span class="line"><span style="color:#F8F8F2;">    stringifyRequest,</span></span>
<span class="line"><span style="color:#F8F8F2;">    needsHotReload,</span></span>
<span class="line"><span style="color:#F8F8F2;">    isServer </span><span style="color:#FF79C6;">||</span><span style="color:#F8F8F2;"> isShadow </span><span style="color:#6272A4;">// needs explicit injection?</span></span>
<span class="line"><span style="color:#F8F8F2;">  );</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#6272A4;">// import style0 from &quot;./HelloWorld.vue?vue&amp;type=style&amp;index=0&amp;id=469af010&amp;scoped=true&amp;lang=css&amp;&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><details class="hint-container details"><summary>genStylesCode</summary><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> genStylesCode </span><span style="color:#FF79C6;">=</span><span style="color:#50FA7B;"> require</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">./codegen/styleInjection</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#8BE9FD;font-style:italic;">module</span><span style="color:#F8F8F2;">.</span><span style="color:#8BE9FD;font-style:italic;">exports</span><span style="color:#FF79C6;"> =</span><span style="color:#FF79C6;"> function</span><span style="color:#50FA7B;"> genStyleInjectionCode</span><span style="color:#F8F8F2;">(</span></span>
<span class="line"><span style="color:#FFB86C;font-style:italic;">  loaderContext</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#FFB86C;font-style:italic;">  styles</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#FFB86C;font-style:italic;">  id</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#FFB86C;font-style:italic;">  resourcePath</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#FFB86C;font-style:italic;">  stringifyRequest</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#FFB86C;font-style:italic;">  needsHotReload</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#FFB86C;font-style:italic;">  needsExplicitInjection</span></span>
<span class="line"><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#FF79C6;">  let</span><span style="color:#F8F8F2;"> styleImportsCode </span><span style="color:#FF79C6;">=</span><span style="color:#F1FA8C;"> \`\`</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#FF79C6;">  let</span><span style="color:#F8F8F2;"> styleInjectionCode </span><span style="color:#FF79C6;">=</span><span style="color:#F1FA8C;"> \`\`</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#FF79C6;">  let</span><span style="color:#F8F8F2;"> cssModulesHotReloadCode </span><span style="color:#FF79C6;">=</span><span style="color:#F1FA8C;"> \`\`</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">  let</span><span style="color:#F8F8F2;"> hasCSSModules </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> false</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#FF79C6;">  const</span><span style="color:#F8F8F2;"> cssModuleNames </span><span style="color:#FF79C6;">=</span><span style="color:#FF79C6;font-weight:bold;"> new</span><span style="color:#50FA7B;"> Map</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">  function</span><span style="color:#50FA7B;"> genStyleRequest</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">style</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">i</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#FF79C6;">    const</span><span style="color:#F8F8F2;"> src </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> style.src </span><span style="color:#FF79C6;">||</span><span style="color:#F8F8F2;"> resourcePath;</span></span>
<span class="line"><span style="color:#FF79C6;">    const</span><span style="color:#F8F8F2;"> attrsQuery </span><span style="color:#FF79C6;">=</span><span style="color:#50FA7B;"> attrsToQuery</span><span style="color:#F8F8F2;">(style.attrs, </span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">css</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#FF79C6;">    const</span><span style="color:#F8F8F2;"> inheritQuery </span><span style="color:#FF79C6;">=</span><span style="color:#F1FA8C;"> \`&amp;</span><span style="color:#FF79C6;">\${</span><span style="color:#F8F8F2;">loaderContext.resourceQuery.</span><span style="color:#50FA7B;">slice</span><span style="color:#F8F8F2;">(</span><span style="color:#BD93F9;">1</span><span style="color:#F8F8F2;">)</span><span style="color:#FF79C6;">}</span><span style="color:#F1FA8C;">\`</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#6272A4;">    // make sure to only pass id when necessary so that we don&#39;t inject</span></span>
<span class="line"><span style="color:#6272A4;">    // duplicate tags when multiple components import the same css file</span></span>
<span class="line"><span style="color:#FF79C6;">    const</span><span style="color:#F8F8F2;"> idQuery </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> style.scoped </span><span style="color:#FF79C6;">?</span><span style="color:#F1FA8C;"> \`&amp;id=</span><span style="color:#FF79C6;">\${</span><span style="color:#F8F8F2;">id</span><span style="color:#FF79C6;">}</span><span style="color:#F1FA8C;">\`</span><span style="color:#FF79C6;"> :</span><span style="color:#F1FA8C;"> \`\`</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#FF79C6;">    const</span><span style="color:#F8F8F2;"> query </span><span style="color:#FF79C6;">=</span><span style="color:#F1FA8C;"> \`?vue&amp;type=style&amp;index=</span><span style="color:#FF79C6;">\${</span><span style="color:#F8F8F2;">i</span><span style="color:#FF79C6;">}\${</span><span style="color:#F8F8F2;">idQuery</span><span style="color:#FF79C6;">}\${</span><span style="color:#F8F8F2;">attrsQuery</span><span style="color:#FF79C6;">}\${</span><span style="color:#F8F8F2;">inheritQuery</span><span style="color:#FF79C6;">}</span><span style="color:#F1FA8C;">\`</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#FF79C6;">    return</span><span style="color:#50FA7B;"> stringifyRequest</span><span style="color:#F8F8F2;">(src </span><span style="color:#FF79C6;">+</span><span style="color:#F8F8F2;"> query);</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">};</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h3 id="pitch-loader" tabindex="-1"><a class="header-anchor" href="#pitch-loader"><span>pitch loader</span></a></h3><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">if</span><span style="color:#F8F8F2;"> (query.type </span><span style="color:#FF79C6;">===</span><span style="color:#F1FA8C;"> \`style\`</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#FF79C6;">  const</span><span style="color:#F8F8F2;"> cssLoaderIndex </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> loaders.</span><span style="color:#50FA7B;">findIndex</span><span style="color:#F8F8F2;">(isCSSLoader);</span></span>
<span class="line"><span style="color:#FF79C6;">  if</span><span style="color:#F8F8F2;"> (cssLoaderIndex </span><span style="color:#FF79C6;">&gt;</span><span style="color:#FF79C6;"> -</span><span style="color:#BD93F9;">1</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#FF79C6;">    const</span><span style="color:#F8F8F2;"> afterLoaders </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> loaders.</span><span style="color:#50FA7B;">slice</span><span style="color:#F8F8F2;">(</span><span style="color:#BD93F9;">0</span><span style="color:#F8F8F2;">, cssLoaderIndex </span><span style="color:#FF79C6;">+</span><span style="color:#BD93F9;"> 1</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#FF79C6;">    const</span><span style="color:#F8F8F2;"> beforeLoaders </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> loaders.</span><span style="color:#50FA7B;">slice</span><span style="color:#F8F8F2;">(cssLoaderIndex </span><span style="color:#FF79C6;">+</span><span style="color:#BD93F9;"> 1</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#FF79C6;">    const</span><span style="color:#F8F8F2;"> request </span><span style="color:#FF79C6;">=</span><span style="color:#50FA7B;"> genRequest</span><span style="color:#F8F8F2;">([</span></span>
<span class="line"><span style="color:#FF79C6;">      ...</span><span style="color:#F8F8F2;">afterLoaders,</span></span>
<span class="line"><span style="color:#F8F8F2;">      stylePostLoaderPath,</span></span>
<span class="line"><span style="color:#FF79C6;">      ...</span><span style="color:#F8F8F2;">beforeLoaders,</span></span>
<span class="line"><span style="color:#F8F8F2;">    ]);</span></span>
<span class="line"><span style="color:#F8F8F2;">    console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(</span></span>
<span class="line"><span style="color:#F8F8F2;">      query.module</span></span>
<span class="line"><span style="color:#FF79C6;">        ?</span><span style="color:#F1FA8C;"> \`export { default } from  </span><span style="color:#FF79C6;">\${</span><span style="color:#F8F8F2;">request</span><span style="color:#FF79C6;">}</span><span style="color:#F1FA8C;">; export * from </span><span style="color:#FF79C6;">\${</span><span style="color:#F8F8F2;">request</span><span style="color:#FF79C6;">}</span><span style="color:#F1FA8C;">\`</span></span>
<span class="line"><span style="color:#FF79C6;">        :</span><span style="color:#F1FA8C;"> \`export * from </span><span style="color:#FF79C6;">\${</span><span style="color:#F8F8F2;">request</span><span style="color:#FF79C6;">}</span><span style="color:#F1FA8C;">\`</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#E9F284;">      &quot;</span><span style="color:#F1FA8C;">request -- style</span><span style="color:#E9F284;">&quot;</span></span>
<span class="line"><span style="color:#F8F8F2;">    );</span></span>
<span class="line"><span style="color:#FF79C6;">    return</span><span style="color:#F8F8F2;"> query.module</span></span>
<span class="line"><span style="color:#FF79C6;">      ?</span><span style="color:#F1FA8C;"> \`export { default } from  </span><span style="color:#FF79C6;">\${</span><span style="color:#F8F8F2;">request</span><span style="color:#FF79C6;">}</span><span style="color:#F1FA8C;">; export * from </span><span style="color:#FF79C6;">\${</span><span style="color:#F8F8F2;">request</span><span style="color:#FF79C6;">}</span><span style="color:#F1FA8C;">\`</span></span>
<span class="line"><span style="color:#FF79C6;">      :</span><span style="color:#F1FA8C;"> \`export * from </span><span style="color:#FF79C6;">\${</span><span style="color:#F8F8F2;">request</span><span style="color:#FF79C6;">}</span><span style="color:#F1FA8C;">\`</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="stylepostloader" tabindex="-1"><a class="header-anchor" href="#stylepostloader"><span>stylePostLoader</span></a></h3><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> qs </span><span style="color:#FF79C6;">=</span><span style="color:#50FA7B;"> require</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">querystring</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> { compileStyle } </span><span style="color:#FF79C6;">=</span><span style="color:#50FA7B;"> require</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">@vue/component-compiler-utils</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">// This is a post loader that handles scoped CSS transforms.</span></span>
<span class="line"><span style="color:#6272A4;">// Injected right before css-loader by the global pitcher (../pitch.js)</span></span>
<span class="line"><span style="color:#6272A4;">// for any &lt;style scoped&gt; selection requests initiated from within vue files.</span></span>
<span class="line"><span style="color:#8BE9FD;font-style:italic;">module</span><span style="color:#F8F8F2;">.</span><span style="color:#8BE9FD;font-style:italic;">exports</span><span style="color:#FF79C6;"> =</span><span style="color:#FF79C6;"> function</span><span style="color:#F8F8F2;"> (</span><span style="color:#FFB86C;font-style:italic;">source</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">inMap</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#FF79C6;">  const</span><span style="color:#F8F8F2;"> query </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> qs.</span><span style="color:#50FA7B;">parse</span><span style="color:#F8F8F2;">(</span><span style="color:#BD93F9;font-style:italic;">this</span><span style="color:#F8F8F2;">.resourceQuery.</span><span style="color:#50FA7B;">slice</span><span style="color:#F8F8F2;">(</span><span style="color:#BD93F9;">1</span><span style="color:#F8F8F2;">));</span></span>
<span class="line"><span style="color:#FF79C6;">  const</span><span style="color:#F8F8F2;"> { code, map, errors } </span><span style="color:#FF79C6;">=</span><span style="color:#50FA7B;"> compileStyle</span><span style="color:#F8F8F2;">({</span></span>
<span class="line"><span style="color:#F8F8F2;">    source,</span></span>
<span class="line"><span style="color:#F8F8F2;">    filename</span><span style="color:#FF79C6;">:</span><span style="color:#BD93F9;font-style:italic;"> this</span><span style="color:#F8F8F2;">.resourcePath,</span></span>
<span class="line"><span style="color:#F8F8F2;">    id</span><span style="color:#FF79C6;">:</span><span style="color:#F1FA8C;"> \`data-v-</span><span style="color:#FF79C6;">\${</span><span style="color:#F8F8F2;">query.id</span><span style="color:#FF79C6;">}</span><span style="color:#F1FA8C;">\`</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">    map</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> inMap,</span></span>
<span class="line"><span style="color:#F8F8F2;">    scoped</span><span style="color:#FF79C6;">:</span><span style="color:#FF79C6;"> !!</span><span style="color:#F8F8F2;">query.scoped,</span></span>
<span class="line"><span style="color:#F8F8F2;">    trim</span><span style="color:#FF79C6;">:</span><span style="color:#BD93F9;"> true</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">  });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">  if</span><span style="color:#F8F8F2;"> (errors.length) {</span></span>
<span class="line"><span style="color:#BD93F9;font-style:italic;">    this</span><span style="color:#F8F8F2;">.</span><span style="color:#50FA7B;">callback</span><span style="color:#F8F8F2;">(errors[</span><span style="color:#BD93F9;">0</span><span style="color:#F8F8F2;">]);</span></span>
<span class="line"><span style="color:#F8F8F2;">  } </span><span style="color:#FF79C6;">else</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#BD93F9;font-style:italic;">    this</span><span style="color:#F8F8F2;">.</span><span style="color:#50FA7B;">callback</span><span style="color:#F8F8F2;">(</span><span style="color:#BD93F9;">null</span><span style="color:#F8F8F2;">, code, map);</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">};</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,38)]))}const r=n(o,[["render",F],["__file","scoped-code-analysis.html.vue"]]),i=JSON.parse('{"path":"/vue2/scoped-code-analysis.html","title":"Vue2.x Scoped原理分析","lang":"en-US","frontmatter":{"title":"Vue2.x Scoped原理分析","date":"2021-09-22T00:00:00.000Z","category":["Vue"],"tags":["loader","vue2"],"description":"用法 Scoped CSS 当 <style> 标签有 scoped 属性时，它的 CSS 只作用于当前组件中的元素。这类似于 Shadow DOM 中的样式封装。它有一些注意事项，但不需要任何 polyfill。它通过使用 PostCSS 来实现以下转换： 转换结果： 混用本地和全局样式 你可以在一个组件中同时使用有 scoped 和非 scoped...","head":[["meta",{"property":"og:url","content":"https://luxiag.github.io/luxiag/blog/vue2/scoped-code-analysis.html"}],["meta",{"property":"og:title","content":"Vue2.x Scoped原理分析"}],["meta",{"property":"og:description","content":"用法 Scoped CSS 当 <style> 标签有 scoped 属性时，它的 CSS 只作用于当前组件中的元素。这类似于 Shadow DOM 中的样式封装。它有一些注意事项，但不需要任何 polyfill。它通过使用 PostCSS 来实现以下转换： 转换结果： 混用本地和全局样式 你可以在一个组件中同时使用有 scoped 和非 scoped..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2022-12-30T06:28:03.000Z"}],["meta",{"property":"article:tag","content":"loader"}],["meta",{"property":"article:tag","content":"vue2"}],["meta",{"property":"article:published_time","content":"2021-09-22T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2022-12-30T06:28:03.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Vue2.x Scoped原理分析\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2021-09-22T00:00:00.000Z\\",\\"dateModified\\":\\"2022-12-30T06:28:03.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"luxiag\\",\\"url\\":\\"https://luxiag.github.io/luxiag\\"}]}"]]},"headers":[{"level":2,"title":"用法","slug":"用法","link":"#用法","children":[{"level":3,"title":"Scoped CSS","slug":"scoped-css","link":"#scoped-css","children":[]},{"level":3,"title":"混用本地和全局样式","slug":"混用本地和全局样式","link":"#混用本地和全局样式","children":[]},{"level":3,"title":"动态生成的内容","slug":"动态生成的内容","link":"#动态生成的内容","children":[]},{"level":3,"title":"还有一些要留意","slug":"还有一些要留意","link":"#还有一些要留意","children":[]}]},{"level":2,"title":"template 处理","slug":"template-处理","link":"#template-处理","children":[{"level":3,"title":"pitcher loader","slug":"pitcher-loader","link":"#pitcher-loader","children":[]},{"level":3,"title":"templateLoaderPath","slug":"templateloaderpath","link":"#templateloaderpath","children":[]}]},{"level":2,"title":"style 处理","slug":"style-处理","link":"#style-处理","children":[{"level":3,"title":"vue-loader","slug":"vue-loader","link":"#vue-loader","children":[]},{"level":3,"title":"pitch loader","slug":"pitch-loader","link":"#pitch-loader","children":[]},{"level":3,"title":"stylePostLoader","slug":"stylepostloader","link":"#stylepostloader","children":[]}]}],"git":{"createdTime":1668159653000,"updatedTime":1672381683000,"contributors":[{"name":"卢祥","email":"example@qq.com","commits":4},{"name":"luxiag","email":"luxiag@qq.com","commits":2}]},"readingTime":{"minutes":3.79,"words":1136},"filePathRelative":"vue2/scoped-code-analysis.md","localizedDate":"September 22, 2021","excerpt":"<figure><figcaption></figcaption></figure>\\n<div class=\\"language-css line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"css\\" data-title=\\"css\\" style=\\"background-color:#282A36;color:#F8F8F2\\"><pre class=\\"shiki dracula vp-code\\"><code><span class=\\"line\\"><span style=\\"color:#50FA7B;font-style:italic\\">.hello</span><span style=\\"color:#F8F8F2\\">[</span><span style=\\"color:#50FA7B;font-style:italic\\">data-v-469af010</span><span style=\\"color:#F8F8F2\\">] {</span></span>\\n<span class=\\"line\\"><span style=\\"color:#8BE9FD\\">  background-color</span><span style=\\"color:#FF79C6\\">:</span><span style=\\"color:#BD93F9\\"> red</span><span style=\\"color:#F8F8F2\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color:#F8F8F2\\">}</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{r as comp,i as data};
