import{_ as n,e as a,g as l,o as e}from"./app-Dt3FNJM0.js";const o={};function p(t,s){return e(),a("div",null,s[0]||(s[0]=[l(`<h1 id="没有泛型" tabindex="-1"><a class="header-anchor" href="#没有泛型"><span>没有泛型</span></a></h1><p>没有泛型,需要处理不同传入类型参数</p><div class="language-cs line-numbers-mode" data-highlighter="shiki" data-ext="cs" data-title="cs" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">public</span><span style="color:#FF79C6;"> static</span><span style="color:#FF79C6;"> void</span><span style="color:#50FA7B;"> ShowInt</span><span style="color:#F8F8F2;">(</span><span style="color:#FF79C6;">int</span><span style="color:#FFB86C;font-style:italic;"> iParameter</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">  Console.</span><span style="color:#50FA7B;">WriteLine</span><span style="color:#F8F8F2;">(iParameter);</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">public</span><span style="color:#FF79C6;"> static</span><span style="color:#FF79C6;"> void</span><span style="color:#50FA7B;"> ShowString</span><span style="color:#F8F8F2;">(</span><span style="color:#FF79C6;">string</span><span style="color:#FFB86C;font-style:italic;"> sParameter</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">  Console.</span><span style="color:#50FA7B;">WriteLine</span><span style="color:#F8F8F2;">(sParameter);</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">public</span><span style="color:#FF79C6;"> static</span><span style="color:#FF79C6;"> void</span><span style="color:#50FA7B;"> ShowDateTime</span><span style="color:#F8F8F2;">(</span><span style="color:#8BE9FD;font-style:italic;">DateTime</span><span style="color:#FFB86C;font-style:italic;"> dtParameter</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">{</span></span>
<span class="line"><span style="color:#F8F8F2;">    Console.</span><span style="color:#50FA7B;">WriteLine</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">This is {0},parameter={1},type={2}</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#FF79C6;">      typeof</span><span style="color:#F8F8F2;">(</span><span style="color:#8BE9FD;font-style:italic;">CommonMethod</span><span style="color:#F8F8F2;">).Name, dtParameter.</span><span style="color:#50FA7B;">GetType</span><span style="color:#F8F8F2;">().Name, dtParameter);</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用继承优化</p><div class="language-cs line-numbers-mode" data-highlighter="shiki" data-ext="cs" data-title="cs" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#6272A4;">// 为什么使用Object</span></span>
<span class="line"><span style="color:#6272A4;">// 1.任何父类出现的地方都可以使用子类来代替</span></span>
<span class="line"><span style="color:#6272A4;">// 2.Object是所有类的父类</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">public</span><span style="color:#FF79C6;"> static</span><span style="color:#FF79C6;"> void</span><span style="color:#50FA7B;"> ShowObject</span><span style="color:#F8F8F2;">(</span><span style="color:#FF79C6;">object</span><span style="color:#FFB86C;font-style:italic;"> oParameter</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">  Console.</span><span style="color:#50FA7B;">WriteLine</span><span style="color:#F8F8F2;">(oParameter.</span><span style="color:#50FA7B;">GetType</span><span style="color:#F8F8F2;">().Name,oParameter)</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>设计思想--延迟声明：在声明的时候不指定类型，在调用的时候再指定类型</p><h1 id="泛型" tabindex="-1"><a class="header-anchor" href="#泛型"><span>泛型</span></a></h1><p>在泛型类型或方法定义中，类型参数是在其实例化泛型类型的一个变量时，客户端指定的特定类型的占位符。 泛型类<code>( GenericList&lt;T&gt;)</code>无法按原样使用，因为它不是真正的类型；它更像是类型的蓝图。 若要使用 <code>GenericList&lt;T&gt;</code>，客户端代码必须通过指定尖括号内的类型参数来声明并实例化构造类型。 此特定类的类型参数可以是编译器可识别的任何类型。 可创建任意数量的构造类型实例，其中每个使用不同的类型参数。</p><div class="language-cs line-numbers-mode" data-highlighter="shiki" data-ext="cs" data-title="cs" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">public</span><span style="color:#FF79C6;"> static</span><span style="color:#FF79C6;"> void</span><span style="color:#50FA7B;"> Show</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#FFB86C;font-style:italic;">T</span><span style="color:#F8F8F2;">&gt;(</span><span style="color:#8BE9FD;font-style:italic;">T</span><span style="color:#FFB86C;font-style:italic;"> tParameter</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">{</span></span>
<span class="line"><span style="color:#F8F8F2;">    Console.</span><span style="color:#50FA7B;">WriteLine</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">This is {0},parameter={1},type={2}</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#FF79C6;">        typeof</span><span style="color:#F8F8F2;">(</span><span style="color:#8BE9FD;font-style:italic;">GenericMethod</span><span style="color:#F8F8F2;">), tParameter.</span><span style="color:#50FA7B;">GetType</span><span style="color:#F8F8F2;">().Name, tParameter.</span><span style="color:#50FA7B;">ToString</span><span style="color:#F8F8F2;">());</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>泛型如何工作的</strong></p><p>泛型加入到语法以后，VS自带的编译器又做了升级，升级之后编译时遇到泛型，会做特殊的处理：生成占位符。再次经过JIT编译的时候，会把上面编译生成的占位符替换成具体的数据类型。</p><p><strong>泛型的好处</strong></p><ol><li>提高代码的重用性</li><li>提高代码的安全性</li><li>提高代码的执行效率</li></ol><h2 id="使用" tabindex="-1"><a class="header-anchor" href="#使用"><span>使用</span></a></h2><p><strong>泛型方法</strong></p><div class="language-cs line-numbers-mode" data-highlighter="shiki" data-ext="cs" data-title="cs" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">public</span><span style="color:#FF79C6;"> static</span><span style="color:#FF79C6;"> void</span><span style="color:#50FA7B;"> Show</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#FFB86C;font-style:italic;">T</span><span style="color:#F8F8F2;">&gt;(</span><span style="color:#8BE9FD;font-style:italic;">T</span><span style="color:#FFB86C;font-style:italic;"> tParameter</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">{</span></span>
<span class="line"><span style="color:#F8F8F2;">    Console.</span><span style="color:#50FA7B;">WriteLine</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">This is {0},parameter={1},type={2}</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#FF79C6;">        typeof</span><span style="color:#F8F8F2;">(</span><span style="color:#8BE9FD;font-style:italic;">GenericMethod</span><span style="color:#F8F8F2;">), tParameter.</span><span style="color:#50FA7B;">GetType</span><span style="color:#F8F8F2;">().Name, tParameter.</span><span style="color:#50FA7B;">ToString</span><span style="color:#F8F8F2;">());</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>泛型类</strong></p><div class="language-cs line-numbers-mode" data-highlighter="shiki" data-ext="cs" data-title="cs" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">public</span><span style="color:#FF79C6;"> class</span><span style="color:#8BE9FD;"> GenericClass</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#FFB86C;font-style:italic;">T</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">{</span></span>
<span class="line"><span style="color:#FF79C6;">    private</span><span style="color:#8BE9FD;font-style:italic;"> T</span><span style="color:#F8F8F2;"> tValue;</span></span>
<span class="line"><span style="color:#FF79C6;">    public</span><span style="color:#8BE9FD;font-style:italic;"> T</span><span style="color:#F8F8F2;"> TValue</span></span>
<span class="line"><span style="color:#F8F8F2;">    {</span></span>
<span class="line"><span style="color:#FF79C6;">        get</span><span style="color:#F8F8F2;"> { </span><span style="color:#FF79C6;">return</span><span style="color:#F8F8F2;"> tValue; }</span></span>
<span class="line"><span style="color:#FF79C6;">        set</span><span style="color:#F8F8F2;"> { tValue </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> value; }</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>泛型接口</strong></p><div class="language-cs line-numbers-mode" data-highlighter="shiki" data-ext="cs" data-title="cs" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">public</span><span style="color:#FF79C6;"> interface</span><span style="color:#8BE9FD;font-style:italic;"> IGenericInterface</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#FFB86C;font-style:italic;">T</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">{</span></span>
<span class="line"><span style="color:#8BE9FD;font-style:italic;">    T</span><span style="color:#50FA7B;"> GetValue</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>泛型委托</strong></p><div class="language-cs line-numbers-mode" data-highlighter="shiki" data-ext="cs" data-title="cs" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">public</span><span style="color:#FF79C6;"> delegate</span><span style="color:#8BE9FD;font-style:italic;"> T</span><span style="color:#8BE9FD;font-style:italic;"> GenericDelegate</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#FFB86C;font-style:italic;">T</span><span style="color:#F8F8F2;">&gt;(</span><span style="color:#8BE9FD;font-style:italic;">T</span><span style="color:#FFB86C;font-style:italic;"> tParameter</span><span style="color:#F8F8F2;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="约束" tabindex="-1"><a class="header-anchor" href="#约束"><span>约束</span></a></h2><p><strong>泛型约束</strong></p><ol><li>where T : class</li><li>where T : struct</li><li>where T : new()</li><li>where T : IComparable</li><li>where T : BaseClass</li><li>where T : BaseInterface</li></ol><div class="language-cs line-numbers-mode" data-highlighter="shiki" data-ext="cs" data-title="cs" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">public</span><span style="color:#FF79C6;"> class</span><span style="color:#8BE9FD;"> GenericClass</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#FFB86C;font-style:italic;">T</span><span style="color:#F8F8F2;">&gt; </span><span style="color:#FF79C6;">where</span><span style="color:#FFB86C;font-style:italic;"> T</span><span style="color:#F8F8F2;"> : </span><span style="color:#FF79C6;">class</span></span>
<span class="line"><span style="color:#F8F8F2;">{</span></span>
<span class="line"><span style="color:#FF79C6;">    private</span><span style="color:#8BE9FD;font-style:italic;"> T</span><span style="color:#F8F8F2;"> tValue;</span></span>
<span class="line"><span style="color:#FF79C6;">    public</span><span style="color:#8BE9FD;font-style:italic;"> T</span><span style="color:#F8F8F2;"> TValue</span></span>
<span class="line"><span style="color:#F8F8F2;">    {</span></span>
<span class="line"><span style="color:#FF79C6;">        get</span><span style="color:#F8F8F2;"> { </span><span style="color:#FF79C6;">return</span><span style="color:#F8F8F2;"> tValue; }</span></span>
<span class="line"><span style="color:#FF79C6;">        set</span><span style="color:#F8F8F2;"> { tValue </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> value; }</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>泛型方法约束</strong></p><div class="language-cs line-numbers-mode" data-highlighter="shiki" data-ext="cs" data-title="cs" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">public</span><span style="color:#FF79C6;"> static</span><span style="color:#FF79C6;"> void</span><span style="color:#50FA7B;"> Show</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#FFB86C;font-style:italic;">T</span><span style="color:#F8F8F2;">&gt;(</span><span style="color:#8BE9FD;font-style:italic;">T</span><span style="color:#FFB86C;font-style:italic;"> tParameter</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">where</span><span style="color:#FFB86C;font-style:italic;"> T</span><span style="color:#F8F8F2;"> : </span><span style="color:#FF79C6;">class</span></span>
<span class="line"><span style="color:#F8F8F2;">{</span></span>
<span class="line"><span style="color:#F8F8F2;">    Console.</span><span style="color:#50FA7B;">WriteLine</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">This is {0},parameter={1},type={2}</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#FF79C6;">        typeof</span><span style="color:#F8F8F2;">(</span><span style="color:#8BE9FD;font-style:italic;">GenericMethod</span><span style="color:#F8F8F2;">), tParameter.</span><span style="color:#50FA7B;">GetType</span><span style="color:#F8F8F2;">().Name, tParameter.</span><span style="color:#50FA7B;">ToString</span><span style="color:#F8F8F2;">());</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>泛型委托约束</strong></p><div class="language-cs line-numbers-mode" data-highlighter="shiki" data-ext="cs" data-title="cs" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">public</span><span style="color:#FF79C6;"> delegate</span><span style="color:#8BE9FD;font-style:italic;"> T</span><span style="color:#8BE9FD;font-style:italic;"> GenericDelegate</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#FFB86C;font-style:italic;">T</span><span style="color:#F8F8F2;">&gt;(</span><span style="color:#8BE9FD;font-style:italic;">T</span><span style="color:#FFB86C;font-style:italic;"> tParameter</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">where</span><span style="color:#FFB86C;font-style:italic;"> T</span><span style="color:#F8F8F2;"> : </span><span style="color:#FF79C6;">class</span><span style="color:#F8F8F2;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><strong>泛型接口约束</strong></p><div class="language-cs line-numbers-mode" data-highlighter="shiki" data-ext="cs" data-title="cs" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">public</span><span style="color:#FF79C6;"> interface</span><span style="color:#8BE9FD;font-style:italic;"> IGenericInterface</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#FFB86C;font-style:italic;">T</span><span style="color:#F8F8F2;">&gt; </span><span style="color:#FF79C6;">where</span><span style="color:#FFB86C;font-style:italic;"> T</span><span style="color:#F8F8F2;"> : </span><span style="color:#FF79C6;">class</span></span>
<span class="line"><span style="color:#F8F8F2;">{</span></span>
<span class="line"><span style="color:#8BE9FD;font-style:italic;">    T</span><span style="color:#50FA7B;"> GetValue</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="协变和逆变" tabindex="-1"><a class="header-anchor" href="#协变和逆变"><span>协变和逆变</span></a></h2><p>协变和逆变是泛型编程中的两个重要概念，它们允许在泛型类型和泛型方法中使用更灵活的类型参数。</p><p>协变（Covariance）允许将泛型类型的子类型赋值给泛型类型的父类型。例如，如果有一个泛型接口 <code>IEnumerable&lt;T&gt;</code>，其中 <code>T</code> 是一个协变类型参数，那么 <code>IEnumerable&lt;Derived&gt;</code> 可以被赋值给 <code>IEnumerable&lt;Base&gt;</code>，其中 <code>Derived</code> 是 <code>Base</code> 的子类。协变在需要将泛型类型用作父类型时非常有用。</p><div class="language-cs line-numbers-mode" data-highlighter="shiki" data-ext="cs" data-title="cs" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"></span>
<span class="line"><span style="color:#FF79C6;">using</span><span style="color:#8BE9FD;font-style:italic;"> System</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">public</span><span style="color:#FF79C6;"> class</span><span style="color:#8BE9FD;"> Animal</span></span>
<span class="line"><span style="color:#F8F8F2;">{</span></span>
<span class="line"><span style="color:#FF79C6;">    public</span><span style="color:#FF79C6;"> string</span><span style="color:#F8F8F2;"> Name { </span><span style="color:#FF79C6;">get</span><span style="color:#F8F8F2;">; </span><span style="color:#FF79C6;">set</span><span style="color:#F8F8F2;">; }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">public</span><span style="color:#FF79C6;"> class</span><span style="color:#8BE9FD;"> Dog</span><span style="color:#F8F8F2;"> : </span><span style="color:#8BE9FD;font-style:italic;">Animal</span></span>
<span class="line"><span style="color:#F8F8F2;">{</span></span>
<span class="line"><span style="color:#FF79C6;">    public</span><span style="color:#FF79C6;"> string</span><span style="color:#F8F8F2;"> Breed { </span><span style="color:#FF79C6;">get</span><span style="color:#F8F8F2;">; </span><span style="color:#FF79C6;">set</span><span style="color:#F8F8F2;">; }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">public</span><span style="color:#FF79C6;"> class</span><span style="color:#8BE9FD;"> AnimalRepository</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#FFB86C;font-style:italic;">T</span><span style="color:#F8F8F2;">&gt; </span><span style="color:#FF79C6;">where</span><span style="color:#FFB86C;font-style:italic;"> T</span><span style="color:#F8F8F2;"> : </span><span style="color:#8BE9FD;font-style:italic;">Animal</span></span>
<span class="line"><span style="color:#F8F8F2;">{</span></span>
<span class="line"><span style="color:#FF79C6;">    public</span><span style="color:#8BE9FD;font-style:italic;"> T</span><span style="color:#50FA7B;"> GetAnimal</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"><span style="color:#F8F8F2;">    {</span></span>
<span class="line"><span style="color:#FF79C6;">        return</span><span style="color:#FF79C6;"> new</span><span style="color:#8BE9FD;font-style:italic;"> T</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">public</span><span style="color:#FF79C6;"> class</span><span style="color:#8BE9FD;"> Program</span></span>
<span class="line"><span style="color:#F8F8F2;">{</span></span>
<span class="line"><span style="color:#FF79C6;">    public</span><span style="color:#FF79C6;"> static</span><span style="color:#FF79C6;"> void</span><span style="color:#50FA7B;"> Main</span><span style="color:#F8F8F2;">(</span><span style="color:#FF79C6;">string</span><span style="color:#F8F8F2;">[] </span><span style="color:#FFB86C;font-style:italic;">args</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">    {</span></span>
<span class="line"><span style="color:#8BE9FD;font-style:italic;">        AnimalRepository</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#8BE9FD;font-style:italic;">Dog</span><span style="color:#F8F8F2;">&gt; dogRepository </span><span style="color:#FF79C6;">=</span><span style="color:#FF79C6;"> new</span><span style="color:#8BE9FD;font-style:italic;"> AnimalRepository</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#8BE9FD;font-style:italic;">Dog</span><span style="color:#F8F8F2;">&gt;();</span></span>
<span class="line"><span style="color:#8BE9FD;font-style:italic;">        Dog</span><span style="color:#F8F8F2;"> dog </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> dogRepository.</span><span style="color:#50FA7B;">GetAnimal</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#8BE9FD;font-style:italic;">        AnimalRepository</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#8BE9FD;font-style:italic;">Animal</span><span style="color:#F8F8F2;">&gt; animalRepository </span><span style="color:#FF79C6;">=</span><span style="color:#FF79C6;"> new</span><span style="color:#8BE9FD;font-style:italic;"> AnimalRepository</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#8BE9FD;font-style:italic;">Animal</span><span style="color:#F8F8F2;">&gt;();</span></span>
<span class="line"><span style="color:#8BE9FD;font-style:italic;">        Animal</span><span style="color:#F8F8F2;"> animal </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> animalRepository.</span><span style="color:#50FA7B;">GetAnimal</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">        // 使用协变将AnimalRepository&lt;Dog&gt;转换为AnimalRepository&lt;Animal&gt;</span></span>
<span class="line"><span style="color:#8BE9FD;font-style:italic;">        AnimalRepository</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#8BE9FD;font-style:italic;">Animal</span><span style="color:#F8F8F2;">&gt; animalRepository2 </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> dogRepository;</span></span>
<span class="line"><span style="color:#8BE9FD;font-style:italic;">        Animal</span><span style="color:#F8F8F2;"> animal2 </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> animalRepository2.</span><span style="color:#50FA7B;">GetAnimal</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>逆变（Contravariance）允许将泛型类型的父类型赋值给泛型类型的子类型。例如，如果有一个泛型接口 <code>Action&lt;T&gt;</code>，其中 <code>T</code> 是一个逆变类型参数，那么 <code>Action&lt;Base&gt;</code> 可以被赋值给 <code>Action&lt;Derived&gt;</code>，其中 <code>Base</code> 是 <code>Derived</code> 的父类。逆变在需要将泛型类型用作子类型时非常有用。</p><div class="language-ts line-numbers-mode" data-highlighter="shiki" data-ext="ts" data-title="ts" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">using</span><span style="color:#F8F8F2;"> System;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">public </span><span style="color:#FF79C6;">class</span><span style="color:#8BE9FD;"> Animal</span></span>
<span class="line"><span style="color:#F8F8F2;">{</span></span>
<span class="line"><span style="color:#FF79C6;">    public</span><span style="color:#F8F8F2;"> string Name { get; set; }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">public </span><span style="color:#FF79C6;">class</span><span style="color:#8BE9FD;"> Dog</span><span style="color:#F8F8F2;"> : </span><span style="color:#8BE9FD;">Animal</span></span>
<span class="line"><span style="color:#F8F8F2;">{</span></span>
<span class="line"><span style="color:#FF79C6;">    public</span><span style="color:#F8F8F2;"> string Breed { get; set; }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">public </span><span style="color:#FF79C6;">class</span><span style="color:#8BE9FD;"> AnimalRepository</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#FFB86C;font-style:italic;">T</span><span style="color:#F8F8F2;">&gt; </span><span style="color:#8BE9FD;">where</span><span style="color:#8BE9FD;"> T</span><span style="color:#F8F8F2;"> : </span><span style="color:#8BE9FD;">Animal</span></span>
<span class="line"><span style="color:#F8F8F2;">{</span></span>
<span class="line"><span style="color:#FF79C6;">    public</span><span style="color:#FF79C6;"> void</span><span style="color:#50FA7B;"> AddAnimal</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">T</span><span style="color:#FFB86C;font-style:italic;"> animal</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">    {</span></span>
<span class="line"><span style="color:#F8F8F2;">        Console.</span><span style="color:#50FA7B;">WriteLine</span><span style="color:#F8F8F2;">($</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">Adding {animal.Name} to the repository</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">public </span><span style="color:#FF79C6;">class</span><span style="color:#8BE9FD;"> Program</span></span>
<span class="line"><span style="color:#F8F8F2;">{</span></span>
<span class="line"><span style="color:#FF79C6;">    public</span><span style="color:#FF79C6;"> static</span><span style="color:#FF79C6;"> void</span><span style="color:#50FA7B;"> Main</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">string</span><span style="color:#F8F8F2;">[] </span><span style="color:#FFB86C;font-style:italic;">args</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">    {</span></span>
<span class="line"><span style="color:#F8F8F2;">        AnimalRepository</span><span style="color:#FF79C6;">&lt;</span><span style="color:#F8F8F2;">Dog</span><span style="color:#FF79C6;">&gt;</span><span style="color:#F8F8F2;"> dogRepository </span><span style="color:#FF79C6;">=</span><span style="color:#FF79C6;font-weight:bold;"> new</span><span style="color:#50FA7B;"> AnimalRepository</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#FFB86C;font-style:italic;">Dog</span><span style="color:#F8F8F2;">&gt;();</span></span>
<span class="line"><span style="color:#F8F8F2;">        Dog dog </span><span style="color:#FF79C6;">=</span><span style="color:#FF79C6;font-weight:bold;"> new</span><span style="color:#F8F8F2;"> Dog { Name </span><span style="color:#FF79C6;">=</span><span style="color:#E9F284;"> &quot;</span><span style="color:#F1FA8C;">Buddy</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">, Breed </span><span style="color:#FF79C6;">=</span><span style="color:#E9F284;"> &quot;</span><span style="color:#F1FA8C;">Golden Retriever</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;"> };</span></span>
<span class="line"><span style="color:#F8F8F2;">        dogRepository.</span><span style="color:#50FA7B;">AddAnimal</span><span style="color:#F8F8F2;">(dog);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">        AnimalRepository</span><span style="color:#FF79C6;">&lt;</span><span style="color:#F8F8F2;">Animal</span><span style="color:#FF79C6;">&gt;</span><span style="color:#F8F8F2;"> animalRepository </span><span style="color:#FF79C6;">=</span><span style="color:#FF79C6;font-weight:bold;"> new</span><span style="color:#50FA7B;"> AnimalRepository</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#FFB86C;font-style:italic;">Animal</span><span style="color:#F8F8F2;">&gt;();</span></span>
<span class="line"><span style="color:#F8F8F2;">        Animal animal </span><span style="color:#FF79C6;">=</span><span style="color:#FF79C6;font-weight:bold;"> new</span><span style="color:#F8F8F2;"> Animal { Name </span><span style="color:#FF79C6;">=</span><span style="color:#E9F284;"> &quot;</span><span style="color:#F1FA8C;">Max</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;"> };</span></span>
<span class="line"><span style="color:#F8F8F2;">        animalRepository.</span><span style="color:#50FA7B;">AddAnimal</span><span style="color:#F8F8F2;">(animal);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">        // 使用逆变将AnimalRepository&lt;Animal&gt;转换为AnimalRepository&lt;Dog&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">        AnimalRepository</span><span style="color:#FF79C6;">&lt;</span><span style="color:#F8F8F2;">Dog</span><span style="color:#FF79C6;">&gt;</span><span style="color:#F8F8F2;"> dogRepository2 </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> animalRepository;</span></span>
<span class="line"><span style="color:#F8F8F2;">        dogRepository2.</span><span style="color:#50FA7B;">AddAnimal</span><span style="color:#F8F8F2;">(dog);</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,38)]))}const c=n(o,[["render",p],["__file","generic.html.vue"]]),F=JSON.parse('{"path":"/dotnet/generic.html","title":"泛型","lang":"en-US","frontmatter":{"title":"泛型","date":"2024-12-05T00:00:00.000Z","category":["DotNet"],"description":"没有泛型 没有泛型,需要处理不同传入类型参数 使用继承优化 设计思想--延迟声明：在声明的时候不指定类型，在调用的时候再指定类型 泛型 在泛型类型或方法定义中，类型参数是在其实例化泛型类型的一个变量时，客户端指定的特定类型的占位符。 泛型类( GenericList<T>)无法按原样使用，因为它不是真正的类型；它更像是类型的蓝图。 若要使用 Gener...","head":[["meta",{"property":"og:url","content":"https://luxiag.github.io/luxiag/blog/dotnet/generic.html"}],["meta",{"property":"og:title","content":"泛型"}],["meta",{"property":"og:description","content":"没有泛型 没有泛型,需要处理不同传入类型参数 使用继承优化 设计思想--延迟声明：在声明的时候不指定类型，在调用的时候再指定类型 泛型 在泛型类型或方法定义中，类型参数是在其实例化泛型类型的一个变量时，客户端指定的特定类型的占位符。 泛型类( GenericList<T>)无法按原样使用，因为它不是真正的类型；它更像是类型的蓝图。 若要使用 Gener..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2025-02-12T13:51:38.000Z"}],["meta",{"property":"article:published_time","content":"2024-12-05T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-02-12T13:51:38.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"泛型\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-12-05T00:00:00.000Z\\",\\"dateModified\\":\\"2025-02-12T13:51:38.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"luxiag\\",\\"url\\":\\"https://luxiag.github.io/luxiag\\"}]}"]]},"git":{"createdTime":1733840773000,"updatedTime":1739368298000,"contributors":[{"name":"luxiag","username":"luxiag","email":"luxiag@qq.com","commits":3,"url":"https://github.com/luxiag"}]},"readingTime":{"minutes":3.47,"words":1040},"filePathRelative":"dotnet/generic.md","localizedDate":"December 5, 2024","excerpt":"\\n<p>没有泛型,需要处理不同传入类型参数</p>\\n<div class=\\"language-cs line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"cs\\" data-title=\\"cs\\" style=\\"background-color:#282A36;color:#F8F8F2\\"><pre class=\\"shiki dracula vp-code\\"><code><span class=\\"line\\"><span style=\\"color:#FF79C6\\">public</span><span style=\\"color:#FF79C6\\"> static</span><span style=\\"color:#FF79C6\\"> void</span><span style=\\"color:#50FA7B\\"> ShowInt</span><span style=\\"color:#F8F8F2\\">(</span><span style=\\"color:#FF79C6\\">int</span><span style=\\"color:#FFB86C;font-style:italic\\"> iParameter</span><span style=\\"color:#F8F8F2\\">) {</span></span>\\n<span class=\\"line\\"><span style=\\"color:#F8F8F2\\">  Console.</span><span style=\\"color:#50FA7B\\">WriteLine</span><span style=\\"color:#F8F8F2\\">(iParameter);</span></span>\\n<span class=\\"line\\"><span style=\\"color:#F8F8F2\\">}</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color:#FF79C6\\">public</span><span style=\\"color:#FF79C6\\"> static</span><span style=\\"color:#FF79C6\\"> void</span><span style=\\"color:#50FA7B\\"> ShowString</span><span style=\\"color:#F8F8F2\\">(</span><span style=\\"color:#FF79C6\\">string</span><span style=\\"color:#FFB86C;font-style:italic\\"> sParameter</span><span style=\\"color:#F8F8F2\\">) {</span></span>\\n<span class=\\"line\\"><span style=\\"color:#F8F8F2\\">  Console.</span><span style=\\"color:#50FA7B\\">WriteLine</span><span style=\\"color:#F8F8F2\\">(sParameter);</span></span>\\n<span class=\\"line\\"><span style=\\"color:#F8F8F2\\">}</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color:#FF79C6\\">public</span><span style=\\"color:#FF79C6\\"> static</span><span style=\\"color:#FF79C6\\"> void</span><span style=\\"color:#50FA7B\\"> ShowDateTime</span><span style=\\"color:#F8F8F2\\">(</span><span style=\\"color:#8BE9FD;font-style:italic\\">DateTime</span><span style=\\"color:#FFB86C;font-style:italic\\"> dtParameter</span><span style=\\"color:#F8F8F2\\">)</span></span>\\n<span class=\\"line\\"><span style=\\"color:#F8F8F2\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color:#F8F8F2\\">    Console.</span><span style=\\"color:#50FA7B\\">WriteLine</span><span style=\\"color:#F8F8F2\\">(</span><span style=\\"color:#E9F284\\">\\"</span><span style=\\"color:#F1FA8C\\">This is {0},parameter={1},type={2}</span><span style=\\"color:#E9F284\\">\\"</span><span style=\\"color:#F8F8F2\\">,</span></span>\\n<span class=\\"line\\"><span style=\\"color:#FF79C6\\">      typeof</span><span style=\\"color:#F8F8F2\\">(</span><span style=\\"color:#8BE9FD;font-style:italic\\">CommonMethod</span><span style=\\"color:#F8F8F2\\">).Name, dtParameter.</span><span style=\\"color:#50FA7B\\">GetType</span><span style=\\"color:#F8F8F2\\">().Name, dtParameter);</span></span>\\n<span class=\\"line\\"><span style=\\"color:#F8F8F2\\">}</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{c as comp,F as data};
