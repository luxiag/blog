import{_ as n,c as a,a as l,o as e}from"./app-DsmKNl15.js";const p={};function o(t,s){return e(),a("div",null,s[0]||(s[0]=[l(`<p>哈希表（Hash Table，也叫散列表），是根据键（Key）而直接访问在内存存储位置的数据结构。哈希表通过计算一个关于键值的函数，将所需查询的数据映射到表中一个位置来访问记录，这加快了查找速度。这个映射函数称做哈希函数，存放记录的数组称做哈希表</p><p>打造一个让你能够迅速获悉商品价格的工具</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> table </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> [];</span></span>
<span class="line"><span style="color:#F8F8F2;">table[</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">apple</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">] </span><span style="color:#FF79C6;">=</span><span style="color:#E9F284;"> &quot;</span><span style="color:#F1FA8C;">5块</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">table[</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">milk</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">] </span><span style="color:#FF79C6;">=</span><span style="color:#E9F284;"> &quot;</span><span style="color:#F1FA8C;">4块</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="两数之和" tabindex="-1"><a class="header-anchor" href="#两数之和"><span><a href="https://leetcode.cn/problems/two-sum/description/?envType=problem-list-v2&amp;envId=hash-table" target="_blank" rel="noopener noreferrer">两数之和</a></span></a></h1><p>给定一个整数数组 nums 和一个整数目标值 target，请你在该数组中找出和为目标值 target的那 两个 整数，并返回它们的数组下标。</p><p>你可以假设每种输入只会对应一个答案，并且你不能使用两次相同的元素。</p><p>你可以按任意顺序返回答案。</p><div class="language-md line-numbers-mode" data-highlighter="shiki" data-ext="md" data-title="md" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#F8F8F2;">输入：nums = [</span><span style="color:#FF79C6;">2,7,11,15</span><span style="color:#F8F8F2;">], target = 9</span></span>
<span class="line"><span style="color:#F8F8F2;">输出：[</span><span style="color:#FF79C6;">0,1</span><span style="color:#F8F8F2;">]</span></span>
<span class="line"><span style="color:#F8F8F2;">解释：因为 nums[</span><span style="color:#FF79C6;">0</span><span style="color:#F8F8F2;">] + nums[</span><span style="color:#FF79C6;">1</span><span style="color:#F8F8F2;">] == 9 ，返回 [0, 1] 。</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">输入：nums = [</span><span style="color:#FF79C6;">3,2,4</span><span style="color:#F8F8F2;">], target = 6</span></span>
<span class="line"><span style="color:#F8F8F2;">输出：[</span><span style="color:#FF79C6;">1,2</span><span style="color:#F8F8F2;">]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">输入：nums = [</span><span style="color:#FF79C6;">3,3</span><span style="color:#F8F8F2;">], target = 6</span></span>
<span class="line"><span style="color:#F8F8F2;">输出：[</span><span style="color:#FF79C6;">0,1</span><span style="color:#F8F8F2;">]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-ts line-numbers-mode" data-highlighter="shiki" data-ext="ts" data-title="ts" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#6272A4;">// 记录每个索引的值</span></span>
<span class="line"><span style="color:#6272A4;">// 遍历数组，如果存在 target - 当前值，则返回当前索引和 target - 当前值的索引</span></span>
<span class="line"><span style="color:#FF79C6;">function</span><span style="color:#50FA7B;"> twoSum</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">nums</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> number</span><span style="color:#F8F8F2;">[], </span><span style="color:#FFB86C;font-style:italic;">target</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> number</span><span style="color:#F8F8F2;">)</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> number</span><span style="color:#F8F8F2;">[] {</span></span>
<span class="line"><span style="color:#FF79C6;">    const</span><span style="color:#F8F8F2;"> hashtable</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> Map</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#8BE9FD;font-style:italic;">number</span><span style="color:#F8F8F2;">, </span><span style="color:#8BE9FD;font-style:italic;">number</span><span style="color:#F8F8F2;">&gt; </span><span style="color:#FF79C6;">=</span><span style="color:#FF79C6;font-weight:bold;"> new</span><span style="color:#50FA7B;"> Map</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#8BE9FD;font-style:italic;">number</span><span style="color:#F8F8F2;">, </span><span style="color:#8BE9FD;font-style:italic;">number</span><span style="color:#F8F8F2;">&gt;();</span></span>
<span class="line"><span style="color:#FF79C6;">    for</span><span style="color:#F8F8F2;"> (</span><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> i </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> 0</span><span style="color:#F8F8F2;">; i </span><span style="color:#FF79C6;">&lt;</span><span style="color:#F8F8F2;"> nums.length; </span><span style="color:#FF79C6;">++</span><span style="color:#F8F8F2;">i) {</span></span>
<span class="line"><span style="color:#FF79C6;">        if</span><span style="color:#F8F8F2;"> (hashtable.</span><span style="color:#50FA7B;">has</span><span style="color:#F8F8F2;">(target </span><span style="color:#FF79C6;">-</span><span style="color:#F8F8F2;"> nums[i])) {</span></span>
<span class="line"><span style="color:#FF79C6;">            return</span><span style="color:#F8F8F2;"> [hashtable.</span><span style="color:#50FA7B;">get</span><span style="color:#F8F8F2;">(target </span><span style="color:#FF79C6;">-</span><span style="color:#F8F8F2;"> nums[i])</span><span style="color:#FF79C6;">!</span><span style="color:#F8F8F2;">, i];</span></span>
<span class="line"><span style="color:#F8F8F2;">        }</span></span>
<span class="line"><span style="color:#F8F8F2;">        hashtable.</span><span style="color:#50FA7B;">set</span><span style="color:#F8F8F2;">(nums[i], i);</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#FF79C6;">    return</span><span style="color:#F8F8F2;"> [];</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="最长连续序列" tabindex="-1"><a class="header-anchor" href="#最长连续序列"><span><a href="https://leetcode.cn/problems/longest-consecutive-sequence/description/?envType=problem-list-v2&amp;envId=hash-table" target="_blank" rel="noopener noreferrer">最长连续序列</a></span></a></h1><p>给定一个未排序的整数数组 nums ，找出数字连续的最长序列（不要求序列元素在原数组中连续）的长度。</p><p>请你设计并实现时间复杂度为 O(n) 的算法解决此问题。</p><div class="language-md line-numbers-mode" data-highlighter="shiki" data-ext="md" data-title="md" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#F8F8F2;">输入：nums = [</span><span style="color:#FF79C6;">100,4,200,1,3,2</span><span style="color:#F8F8F2;">]</span></span>
<span class="line"><span style="color:#F8F8F2;">输出：4</span></span>
<span class="line"><span style="color:#F8F8F2;">解释：最长数字连续序列是 [1, 2, 3, 4]。它的长度为 4。</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">输入：nums = [</span><span style="color:#FF79C6;">0,3,7,2,5,8,4,6,0,1</span><span style="color:#F8F8F2;">]</span></span>
<span class="line"><span style="color:#F8F8F2;">输出：9</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-ts line-numbers-mode" data-highlighter="shiki" data-ext="ts" data-title="ts" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#6272A4;">//https://leetcode.cn/problems/longest-consecutive-sequence/solutions/276931/zui-chang-lian-xu-xu-lie-by-leetcode-solution/?envType=problem-list-v2&amp;envId=hash-table</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">// 建立每个值对应的索引，</span></span>
<span class="line"><span style="color:#6272A4;">// 遍历数组，如果存在当前值 - 1，则跳过，否则从当前值开始，查找当前值 + 1，直到不存在，记录当前值</span></span>
<span class="line"><span style="color:#FF79C6;">function</span><span style="color:#50FA7B;"> longestConsecutive</span><span style="color:#F8F8F2;"> (</span><span style="color:#FFB86C;font-style:italic;">nums</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> number</span><span style="color:#F8F8F2;">[])</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> number</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#FF79C6;">    let</span><span style="color:#F8F8F2;"> num_set</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> Set</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#8BE9FD;font-style:italic;">number</span><span style="color:#F8F8F2;">&gt; </span><span style="color:#FF79C6;">=</span><span style="color:#FF79C6;font-weight:bold;"> new</span><span style="color:#50FA7B;"> Set</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#FF79C6;">    for</span><span style="color:#F8F8F2;"> (</span><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> num </span><span style="color:#FF79C6;">of</span><span style="color:#F8F8F2;"> nums) {</span></span>
<span class="line"><span style="color:#F8F8F2;">        num_set.</span><span style="color:#50FA7B;">add</span><span style="color:#F8F8F2;">(num);</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">    let</span><span style="color:#F8F8F2;"> longestStreak </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> 0</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">    for</span><span style="color:#F8F8F2;"> (</span><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> num </span><span style="color:#FF79C6;">of</span><span style="color:#F8F8F2;"> num_set) {</span></span>
<span class="line"><span style="color:#FF79C6;">        if</span><span style="color:#F8F8F2;"> (</span><span style="color:#FF79C6;">!</span><span style="color:#F8F8F2;">num_set.</span><span style="color:#50FA7B;">has</span><span style="color:#F8F8F2;">(num </span><span style="color:#FF79C6;">-</span><span style="color:#BD93F9;"> 1</span><span style="color:#F8F8F2;">)) {</span></span>
<span class="line"><span style="color:#FF79C6;">            let</span><span style="color:#F8F8F2;"> currentNum </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> num;</span></span>
<span class="line"><span style="color:#FF79C6;">            let</span><span style="color:#F8F8F2;"> currentStreak </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> 1</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">            while</span><span style="color:#F8F8F2;"> (num_set.</span><span style="color:#50FA7B;">has</span><span style="color:#F8F8F2;">(currentNum </span><span style="color:#FF79C6;">+</span><span style="color:#BD93F9;"> 1</span><span style="color:#F8F8F2;">)) {</span></span>
<span class="line"><span style="color:#F8F8F2;">                currentNum </span><span style="color:#FF79C6;">+=</span><span style="color:#BD93F9;"> 1</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">                currentStreak </span><span style="color:#FF79C6;">+=</span><span style="color:#BD93F9;"> 1</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">            }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">            longestStreak </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> Math.</span><span style="color:#50FA7B;">max</span><span style="color:#F8F8F2;">(longestStreak, currentStreak);</span></span>
<span class="line"><span style="color:#F8F8F2;">        }</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">    return</span><span style="color:#F8F8F2;"> longestStreak;   </span></span>
<span class="line"><span style="color:#F8F8F2;">};</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="多数元素-ii" tabindex="-1"><a class="header-anchor" href="#多数元素-ii"><span><a href="https://leetcode.cn/problems/majority-element-ii/description/?envType=problem-list-v2&amp;envId=hash-table" target="_blank" rel="noopener noreferrer">多数元素 II</a></span></a></h1><p>给定一个大小为 n 的整数数组，找出其中所有出现超过 ⌊ n/3 ⌋ 次的元素。</p><div class="language-md line-numbers-mode" data-highlighter="shiki" data-ext="md" data-title="md" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#F8F8F2;">输入：nums = [</span><span style="color:#FF79C6;">3,2,3</span><span style="color:#F8F8F2;">]</span></span>
<span class="line"><span style="color:#F8F8F2;">输出：[</span><span style="color:#FF79C6;">3</span><span style="color:#F8F8F2;">]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">输入：nums = [</span><span style="color:#FF79C6;">1</span><span style="color:#F8F8F2;">]</span></span>
<span class="line"><span style="color:#F8F8F2;">输出：[</span><span style="color:#FF79C6;">1</span><span style="color:#F8F8F2;">]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-ts line-numbers-mode" data-highlighter="shiki" data-ext="ts" data-title="ts" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#6272A4;">// 遍历数组 对数组的值作为key,出现次数作为value</span></span>
<span class="line"><span style="color:#FF79C6;">function</span><span style="color:#50FA7B;"> majorityElement</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">nums</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> number</span><span style="color:#F8F8F2;">[])</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> number</span><span style="color:#F8F8F2;">[] {</span></span>
<span class="line"><span style="color:#FF79C6;">    const</span><span style="color:#F8F8F2;"> cnt </span><span style="color:#FF79C6;">=</span><span style="color:#FF79C6;font-weight:bold;"> new</span><span style="color:#50FA7B;"> Map</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">    for</span><span style="color:#F8F8F2;"> (</span><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> i </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> 0</span><span style="color:#F8F8F2;">; i </span><span style="color:#FF79C6;">&lt;</span><span style="color:#F8F8F2;"> nums.length; i</span><span style="color:#FF79C6;">++</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#FF79C6;">        if</span><span style="color:#F8F8F2;"> (cnt.</span><span style="color:#50FA7B;">has</span><span style="color:#F8F8F2;">(nums[i])) {</span></span>
<span class="line"><span style="color:#F8F8F2;">            cnt.</span><span style="color:#50FA7B;">set</span><span style="color:#F8F8F2;">(nums[i], cnt.</span><span style="color:#50FA7B;">get</span><span style="color:#F8F8F2;">(nums[i]) </span><span style="color:#FF79C6;">+</span><span style="color:#BD93F9;"> 1</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">        } </span><span style="color:#FF79C6;">else</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">            cnt.</span><span style="color:#50FA7B;">set</span><span style="color:#F8F8F2;">(nums[i], </span><span style="color:#BD93F9;">1</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">        }</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#FF79C6;">    const</span><span style="color:#F8F8F2;"> ans </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> [];</span></span>
<span class="line"><span style="color:#FF79C6;">    for</span><span style="color:#F8F8F2;"> (</span><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> x </span><span style="color:#FF79C6;">of</span><span style="color:#F8F8F2;"> cnt.</span><span style="color:#50FA7B;">keys</span><span style="color:#F8F8F2;">()) {</span></span>
<span class="line"><span style="color:#FF79C6;">        if</span><span style="color:#F8F8F2;"> (cnt.</span><span style="color:#50FA7B;">get</span><span style="color:#F8F8F2;">(x) </span><span style="color:#FF79C6;">&gt;</span><span style="color:#F8F8F2;"> Math.</span><span style="color:#50FA7B;">floor</span><span style="color:#F8F8F2;">(nums.length </span><span style="color:#FF79C6;">/</span><span style="color:#BD93F9;"> 3</span><span style="color:#F8F8F2;">)) {</span></span>
<span class="line"><span style="color:#F8F8F2;">            ans.</span><span style="color:#50FA7B;">push</span><span style="color:#F8F8F2;">(x);</span></span>
<span class="line"><span style="color:#F8F8F2;">        }</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">    return</span><span style="color:#F8F8F2;"> ans;</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,18)]))}const c=n(p,[["render",o],["__file","hash-table.html.vue"]]),r=JSON.parse('{"path":"/algorithm/hash-table.html","title":"哈希表","lang":"en-US","frontmatter":{"title":"哈希表","date":"2022-09-23T00:00:00.000Z","category":["算法"],"tag":["算法图解"],"description":"哈希表（Hash Table，也叫散列表），是根据键（Key）而直接访问在内存存储位置的数据结构。哈希表通过计算一个关于键值的函数，将所需查询的数据映射到表中一个位置来访问记录，这加快了查找速度。这个映射函数称做哈希函数，存放记录的数组称做哈希表 打造一个让你能够迅速获悉商品价格的工具 两数之和 给定一个整数数组 nums 和一个整数目标值 targe...","head":[["meta",{"property":"og:url","content":"https://luxiag.github.io/luxiag/blog/algorithm/hash-table.html"}],["meta",{"property":"og:title","content":"哈希表"}],["meta",{"property":"og:description","content":"哈希表（Hash Table，也叫散列表），是根据键（Key）而直接访问在内存存储位置的数据结构。哈希表通过计算一个关于键值的函数，将所需查询的数据映射到表中一个位置来访问记录，这加快了查找速度。这个映射函数称做哈希函数，存放记录的数组称做哈希表 打造一个让你能够迅速获悉商品价格的工具 两数之和 给定一个整数数组 nums 和一个整数目标值 targe..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2025-02-09T14:37:13.000Z"}],["meta",{"property":"article:tag","content":"算法图解"}],["meta",{"property":"article:published_time","content":"2022-09-23T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-02-09T14:37:13.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"哈希表\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-09-23T00:00:00.000Z\\",\\"dateModified\\":\\"2025-02-09T14:37:13.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"luxiag\\",\\"url\\":\\"https://luxiag.github.io/luxiag\\"}]}"]]},"headers":[],"git":{"createdTime":1663833246000,"updatedTime":1739111833000,"contributors":[{"name":"卢祥","email":"example@gmail.com","commits":3},{"name":"luxiag","email":"luxiag@qq.com","commits":2},{"name":"luxiang","email":"luxiag@qq.com","commits":2}]},"readingTime":{"minutes":2.55,"words":765},"filePathRelative":"algorithm/hash-table.md","localizedDate":"September 23, 2022","excerpt":"<p>哈希表（Hash Table，也叫散列表），是根据键（Key）而直接访问在内存存储位置的数据结构。哈希表通过计算一个关于键值的函数，将所需查询的数据映射到表中一个位置来访问记录，这加快了查找速度。这个映射函数称做哈希函数，存放记录的数组称做哈希表</p>","autoDesc":true}');export{c as comp,r as data};
