import{_ as n,c as a,a as l,o as e}from"./app-xakek6kx.js";const p="/blog/assets/285003010050812323-BuxOmqOj.png",o="/blog/assets/927003610050812323-Dvvker92.png",i={};function c(t,s){return e(),a("div",null,s[0]||(s[0]=[l('<h2 id="小程序启动" tabindex="-1"><a class="header-anchor" href="#小程序启动"><span>小程序启动</span></a></h2><figure><img src="'+p+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>冷启动：如果用户首次打开，或小程序销毁后被用户再次打开，此时小程序需要重新加载启动，即冷启动。 热启动：如果用户已经打开过某小程序，然后在一定时间内再次打开该小程序，此时小程序并未被销毁，只是从后台状态进入前台状态，这个过程就是热启动</p><h3 id="前台和后台" tabindex="-1"><a class="header-anchor" href="#前台和后台"><span>前台和后台</span></a></h3><p>小程序启动后，界面被展示给用户，此时小程序处于「前台」状态。</p><p>当用户「关闭」小程序时，小程序并没有真正被关闭，而是进入了「后台」状态，此时小程序还可以短暂运行一小段时间，但部分 API 的使用会受到限制。切后台的方式包括但不限于以下几种：</p><p>点击右上角胶囊按钮离开小程序 iOS 从屏幕左侧右滑离开小程序 安卓点击返回键离开小程序 小程序前台运行时直接把微信切后台（手势或 Home 键） 小程序前台运行时直接锁屏 当用户再次进入微信并打开小程序，小程序又会重新进入「前台」状态。</p><h2 id="生命周期" tabindex="-1"><a class="header-anchor" href="#生命周期"><span>生命周期</span></a></h2><p>首先执行 App.onLaunch -&gt; App.onShow 其次执行 Component.created -&gt; Component.attached 再执行 Page.onLoad -&gt; Page.onShow 最后 执行 Component.ready -&gt; Page.onReady</p><h3 id="小程序" tabindex="-1"><a class="header-anchor" href="#小程序"><span>小程序</span></a></h3><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#6272A4;">// app.js</span></span>
<span class="line"><span style="color:#50FA7B;">App</span><span style="color:#F8F8F2;">({</span></span>
<span class="line"><span style="color:#50FA7B;">  onLaunch</span><span style="color:#F8F8F2;"> (</span><span style="color:#FFB86C;font-style:italic;">options</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#6272A4;">    // Do something initial when launch.</span></span>
<span class="line"><span style="color:#F8F8F2;">  },</span></span>
<span class="line"><span style="color:#50FA7B;">  onShow</span><span style="color:#F8F8F2;"> (</span><span style="color:#FFB86C;font-style:italic;">options</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#6272A4;">    // Do something when show.</span></span>
<span class="line"><span style="color:#F8F8F2;">  },</span></span>
<span class="line"><span style="color:#50FA7B;">  onHide</span><span style="color:#F8F8F2;"> () {</span></span>
<span class="line"><span style="color:#6272A4;">    // Do something when hide.</span></span>
<span class="line"><span style="color:#F8F8F2;">  },</span></span>
<span class="line"><span style="color:#50FA7B;">  onError</span><span style="color:#F8F8F2;"> (</span><span style="color:#FFB86C;font-style:italic;">msg</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">    console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(msg)</span></span>
<span class="line"><span style="color:#F8F8F2;">  },</span></span>
<span class="line"><span style="color:#F8F8F2;">  globalData</span><span style="color:#FF79C6;">:</span><span style="color:#E9F284;"> &#39;</span><span style="color:#F1FA8C;">I am global data</span><span style="color:#E9F284;">&#39;</span></span>
<span class="line"><span style="color:#F8F8F2;">})</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="页面" tabindex="-1"><a class="header-anchor" href="#页面"><span>页面</span></a></h3><figure><img src="`+o+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#6272A4;">//index.js</span></span>
<span class="line"><span style="color:#50FA7B;">Page</span><span style="color:#F8F8F2;">({</span></span>
<span class="line"><span style="color:#F8F8F2;">  data</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">    text</span><span style="color:#FF79C6;">:</span><span style="color:#E9F284;"> &quot;</span><span style="color:#F1FA8C;">This is page data.</span><span style="color:#E9F284;">&quot;</span></span>
<span class="line"><span style="color:#F8F8F2;">  },</span></span>
<span class="line"><span style="color:#50FA7B;">  onLoad</span><span style="color:#FF79C6;">:</span><span style="color:#FF79C6;"> function</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">options</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#6272A4;">    // 页面创建时执行</span></span>
<span class="line"><span style="color:#F8F8F2;">  },</span></span>
<span class="line"><span style="color:#50FA7B;">  onShow</span><span style="color:#FF79C6;">:</span><span style="color:#FF79C6;"> function</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#6272A4;">    // 页面出现在前台时执行</span></span>
<span class="line"><span style="color:#F8F8F2;">  },</span></span>
<span class="line"><span style="color:#50FA7B;">  onReady</span><span style="color:#FF79C6;">:</span><span style="color:#FF79C6;"> function</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#6272A4;">    // 页面首次渲染完毕时执行</span></span>
<span class="line"><span style="color:#F8F8F2;">  },</span></span>
<span class="line"><span style="color:#50FA7B;">  onHide</span><span style="color:#FF79C6;">:</span><span style="color:#FF79C6;"> function</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#6272A4;">    // 页面从前台变为后台时执行</span></span>
<span class="line"><span style="color:#F8F8F2;">  },</span></span>
<span class="line"><span style="color:#50FA7B;">  onUnload</span><span style="color:#FF79C6;">:</span><span style="color:#FF79C6;"> function</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#6272A4;">    // 页面销毁时执行</span></span>
<span class="line"><span style="color:#F8F8F2;">  },</span></span>
<span class="line"><span style="color:#50FA7B;">  onPullDownRefresh</span><span style="color:#FF79C6;">:</span><span style="color:#FF79C6;"> function</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#6272A4;">    // 触发下拉刷新时执行</span></span>
<span class="line"><span style="color:#F8F8F2;">  },</span></span>
<span class="line"><span style="color:#50FA7B;">  onReachBottom</span><span style="color:#FF79C6;">:</span><span style="color:#FF79C6;"> function</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#6272A4;">    // 页面触底时执行</span></span>
<span class="line"><span style="color:#F8F8F2;">  },</span></span>
<span class="line"><span style="color:#50FA7B;">  onShareAppMessage</span><span style="color:#FF79C6;">:</span><span style="color:#FF79C6;"> function</span><span style="color:#F8F8F2;"> () {</span></span>
<span class="line"><span style="color:#6272A4;">    // 页面被用户分享时执行</span></span>
<span class="line"><span style="color:#F8F8F2;">  },</span></span>
<span class="line"><span style="color:#50FA7B;">  onPageScroll</span><span style="color:#FF79C6;">:</span><span style="color:#FF79C6;"> function</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#6272A4;">    // 页面滚动时执行</span></span>
<span class="line"><span style="color:#F8F8F2;">  },</span></span>
<span class="line"><span style="color:#50FA7B;">  onResize</span><span style="color:#FF79C6;">:</span><span style="color:#FF79C6;"> function</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#6272A4;">    // 页面尺寸变化时执行</span></span>
<span class="line"><span style="color:#F8F8F2;">  },</span></span>
<span class="line"><span style="color:#50FA7B;">  onTabItemTap</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">item</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#6272A4;">    // tab 点击时执行</span></span>
<span class="line"><span style="color:#F8F8F2;">    console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(item.index)</span></span>
<span class="line"><span style="color:#F8F8F2;">    console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(item.pagePath)</span></span>
<span class="line"><span style="color:#F8F8F2;">    console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(item.text)</span></span>
<span class="line"><span style="color:#F8F8F2;">  },</span></span>
<span class="line"><span style="color:#6272A4;">  // 事件响应函数</span></span>
<span class="line"><span style="color:#50FA7B;">  viewTap</span><span style="color:#FF79C6;">:</span><span style="color:#FF79C6;"> function</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#BD93F9;font-style:italic;">    this</span><span style="color:#F8F8F2;">.</span><span style="color:#50FA7B;">setData</span><span style="color:#F8F8F2;">({</span></span>
<span class="line"><span style="color:#F8F8F2;">      text</span><span style="color:#FF79C6;">:</span><span style="color:#E9F284;"> &#39;</span><span style="color:#F1FA8C;">Set some data for updating view.</span><span style="color:#E9F284;">&#39;</span></span>
<span class="line"><span style="color:#F8F8F2;">    }, </span><span style="color:#FF79C6;">function</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#6272A4;">      // this is setData callback</span></span>
<span class="line"><span style="color:#F8F8F2;">    })</span></span>
<span class="line"><span style="color:#F8F8F2;">  },</span></span>
<span class="line"><span style="color:#6272A4;">  // 自由数据</span></span>
<span class="line"><span style="color:#F8F8F2;">  customData</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">    hi</span><span style="color:#FF79C6;">:</span><span style="color:#E9F284;"> &#39;</span><span style="color:#F1FA8C;">MINA</span><span style="color:#E9F284;">&#39;</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">})</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="组件" tabindex="-1"><a class="header-anchor" href="#组件"><span>组件</span></a></h3><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#50FA7B;">Component</span><span style="color:#F8F8F2;">({</span></span>
<span class="line"><span style="color:#F8F8F2;">  lifetimes</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#50FA7B;">    attached</span><span style="color:#FF79C6;">:</span><span style="color:#FF79C6;"> function</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#6272A4;">      // 在组件实例进入页面节点树时执行</span></span>
<span class="line"><span style="color:#F8F8F2;">    },</span></span>
<span class="line"><span style="color:#50FA7B;">    detached</span><span style="color:#FF79C6;">:</span><span style="color:#FF79C6;"> function</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#6272A4;">      // 在组件实例被从页面节点树移除时执行</span></span>
<span class="line"><span style="color:#F8F8F2;">    },</span></span>
<span class="line"><span style="color:#F8F8F2;">  },</span></span>
<span class="line"><span style="color:#6272A4;">  // 以下是旧式的定义方式，可以保持对 &lt;2.2.3 版本基础库的兼容</span></span>
<span class="line"><span style="color:#50FA7B;">  attached</span><span style="color:#FF79C6;">:</span><span style="color:#FF79C6;"> function</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#6272A4;">    // 在组件实例进入页面节点树时执行</span></span>
<span class="line"><span style="color:#F8F8F2;">  },</span></span>
<span class="line"><span style="color:#50FA7B;">  detached</span><span style="color:#FF79C6;">:</span><span style="color:#FF79C6;"> function</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#6272A4;">    // 在组件实例被从页面节点树移除时执行</span></span>
<span class="line"><span style="color:#F8F8F2;">  },</span></span>
<span class="line"><span style="color:#6272A4;">  // ...</span></span>
<span class="line"><span style="color:#F8F8F2;">})</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,16)]))}const F=n(i,[["render",c],["__file","life-cycle.html.vue"]]),d=JSON.parse('{"path":"/minprogram/life-cycle.html","title":"小程序生命周期","lang":"en-US","frontmatter":{"title":"小程序生命周期","category":["MiniProgram"],"date":"2021-05-01T00:00:00.000Z","description":"小程序启动 冷启动：如果用户首次打开，或小程序销毁后被用户再次打开，此时小程序需要重新加载启动，即冷启动。 热启动：如果用户已经打开过某小程序，然后在一定时间内再次打开该小程序，此时小程序并未被销毁，只是从后台状态进入前台状态，这个过程就是热启动 前台和后台 小程序启动后，界面被展示给用户，此时小程序处于「前台」状态。 当用户「关闭」小程序时，小程序并...","head":[["meta",{"property":"og:url","content":"https://luxiag.github.io/luxiag/blog/minprogram/life-cycle.html"}],["meta",{"property":"og:title","content":"小程序生命周期"}],["meta",{"property":"og:description","content":"小程序启动 冷启动：如果用户首次打开，或小程序销毁后被用户再次打开，此时小程序需要重新加载启动，即冷启动。 热启动：如果用户已经打开过某小程序，然后在一定时间内再次打开该小程序，此时小程序并未被销毁，只是从后台状态进入前台状态，这个过程就是热启动 前台和后台 小程序启动后，界面被展示给用户，此时小程序处于「前台」状态。 当用户「关闭」小程序时，小程序并..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2023-05-08T02:45:06.000Z"}],["meta",{"property":"article:published_time","content":"2021-05-01T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-05-08T02:45:06.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"小程序生命周期\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2021-05-01T00:00:00.000Z\\",\\"dateModified\\":\\"2023-05-08T02:45:06.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"luxiag\\",\\"url\\":\\"https://luxiag.github.io/luxiag\\"}]}"]]},"headers":[{"level":2,"title":"小程序启动","slug":"小程序启动","link":"#小程序启动","children":[{"level":3,"title":"前台和后台","slug":"前台和后台","link":"#前台和后台","children":[]}]},{"level":2,"title":"生命周期","slug":"生命周期","link":"#生命周期","children":[{"level":3,"title":"小程序","slug":"小程序","link":"#小程序","children":[]},{"level":3,"title":"页面","slug":"页面","link":"#页面","children":[]},{"level":3,"title":"组件","slug":"组件","link":"#组件","children":[]}]}],"git":{"createdTime":1683513906000,"updatedTime":1683513906000,"contributors":[{"name":"卢祥","email":"example@qq.com","commits":1}]},"readingTime":{"minutes":2.27,"words":680},"filePathRelative":"minprogram/life-cycle.md","localizedDate":"May 1, 2021","excerpt":"<h2>小程序启动</h2>\\n<figure><figcaption></figcaption></figure>\\n<p>冷启动：如果用户首次打开，或小程序销毁后被用户再次打开，此时小程序需要重新加载启动，即冷启动。\\n热启动：如果用户已经打开过某小程序，然后在一定时间内再次打开该小程序，此时小程序并未被销毁，只是从后台状态进入前台状态，这个过程就是热启动</p>","autoDesc":true}');export{F as comp,d as data};
