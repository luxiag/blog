import{_ as n,e as l,h as a,o as e}from"./app-DPJYBgB6.js";const p={};function o(c,s){return e(),l("div",null,s[0]||(s[0]=[a(`<h1 id="ioc" tabindex="-1"><a class="header-anchor" href="#ioc"><span>IOC</span></a></h1><p>IoC，意为控制反转，英文（Inversion of Control），它不是一种技术，而是一种设计思想，一个重要的面向对象编程的法则。IoC意味着将你设计好的对象交给容器控制，而不是传统的在你的对象内部直接控制。</p><h2 id="控制" tabindex="-1"><a class="header-anchor" href="#控制"><span>控制</span></a></h2><p>传统程序当中，我们定义的一个A类，需要另一个B类时，直接就在A类的内部通过new进行创建依赖的b对象了，是我们的程序主动去创建依赖对象。</p><p>而IoC它的核心思想就是有一个容器专门来创建这些依赖的对象，即由IoC容器来控制依赖的对象的创建。</p><ul><li>IoC容器控制了对象</li><li>控制了外部资源的获取</li></ul><h2 id="反转" tabindex="-1"><a class="header-anchor" href="#反转"><span>反转</span></a></h2><p>反转，即反转了依赖对象的获取方式，之前是主动去创建依赖对象，现在是由容器来帮忙创建，并注入到需要依赖对象的类中。</p><ul><li>降低了类与类之间的耦合度</li><li>更容易进行单元测试</li><li>更好地实现了面向对象设计原则中的依赖倒置原则</li></ul><h2 id="ioc容器" tabindex="-1"><a class="header-anchor" href="#ioc容器"><span>IOC容器</span></a></h2><p>就相当于一个专门来创建对象的工厂，你要什么对象，他就给你什么对象。有了IoC容器，依赖关系就变了，原先的依赖关系就没有了，他们都依赖于IoC容器了，通过IoC容器来建立他们之间的关系。</p><ul><li>传统程序设计当中，用户类依赖于用户信息类，都是主动去创建相关对象再组合起来，客户端向服务器发送请求之后经历了这三个过程:用户类的创建、用户信息类的创建，将用户信息类主动注入到用户类。</li><li>有了IoC/DI容器后，客户端获取这些服务，不再主动去索取了，不再主动去创建这些对象了。IoC会做这些动作：创建用户类，看用户类是否有依赖对象，有的话，首先创建依赖对象，之后再将其注入到用户类当中。由容器掌管这些对象的生命周期。</li><li>在一个大型项目一个模块当中，有这样若干个类 a，b，c，d；a依赖于b，b依赖于c，c依赖于d，甚至还可能交叉依赖，这时候我们引入了第三方“IoC”，使得a,b,c,d这四个对象之间没有了耦合关系，</li></ul><h1 id="di" tabindex="-1"><a class="header-anchor" href="#di"><span>DI</span></a></h1><p>DI，意为依赖注入，英文（Dependency Injection），它是在IoC容器运行时，动态地将依赖对象注入到需要这个对象的类中。</p><ul><li>应用程序依赖于IoC容器；</li><li>应用程序需要IoC容器来提供对象需要的外部资源</li><li>IoC容器注入应用程序</li><li>注入某个对象所需要的外部资源（包括对象、资源、数据等等）</li></ul><p>依赖注入是IoC的一个方面，它允许应用程序组件之间的解耦。在依赖注入中，服务类（依赖）不负责创建其依赖的对象，而是从外部获取。这种将依赖对象传递给服务类的方式称为依赖注入。</p><h2 id="依赖注入的方式" tabindex="-1"><a class="header-anchor" href="#依赖注入的方式"><span>依赖注入的方式</span></a></h2><ul><li>构造函数注入</li><li>属性注入</li><li>方法注入</li></ul><h3 id="构造函数注入" tabindex="-1"><a class="header-anchor" href="#构造函数注入"><span>构造函数注入</span></a></h3><p>构造函数注入是指在类的构造函数中声明依赖项，并在创建类的实例时将依赖项传递给它。这种方式确保了在对象创建时，所有必需的依赖项都已提供。</p><div class="language-csharp line-numbers-mode" data-highlighter="shiki" data-ext="csharp" data-title="csharp" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">public</span><span style="color:#FF79C6;"> class</span><span style="color:#8BE9FD;"> UserService</span></span>
<span class="line"><span style="color:#F8F8F2;">{</span></span>
<span class="line"><span style="color:#FF79C6;">    private</span><span style="color:#FF79C6;"> readonly</span><span style="color:#8BE9FD;font-style:italic;"> IUserRepository</span><span style="color:#F8F8F2;"> _userRepository;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">    public</span><span style="color:#50FA7B;"> UserService</span><span style="color:#F8F8F2;">(</span><span style="color:#8BE9FD;font-style:italic;">IUserRepository</span><span style="color:#FFB86C;font-style:italic;"> userRepository</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">    {</span></span>
<span class="line"><span style="color:#F8F8F2;">        _userRepository </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> userRepository;</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">    public</span><span style="color:#FF79C6;"> void</span><span style="color:#50FA7B;"> CreateUser</span><span style="color:#F8F8F2;">(</span><span style="color:#8BE9FD;font-style:italic;">User</span><span style="color:#FFB86C;font-style:italic;"> user</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">    {</span></span>
<span class="line"><span style="color:#F8F8F2;">        _userRepository.</span><span style="color:#50FA7B;">Save</span><span style="color:#F8F8F2;">(user);</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="属性注入" tabindex="-1"><a class="header-anchor" href="#属性注入"><span>属性注入</span></a></h3><p>属性注入是指在类的属性上使用属性来声明依赖项，并在运行时通过属性设置器将依赖项传递给它。这种方式允许在对象创建后动态地注入依赖项。</p><div class="language-csharp line-numbers-mode" data-highlighter="shiki" data-ext="csharp" data-title="csharp" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">public</span><span style="color:#FF79C6;"> class</span><span style="color:#8BE9FD;"> UserService</span></span>
<span class="line"><span style="color:#F8F8F2;">{</span></span>
<span class="line"><span style="color:#FF79C6;">    private</span><span style="color:#8BE9FD;font-style:italic;"> IUserRepository</span><span style="color:#F8F8F2;"> _userRepository;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">    public</span><span style="color:#8BE9FD;font-style:italic;"> IUserRepository</span><span style="color:#F8F8F2;"> UserRepository</span></span>
<span class="line"><span style="color:#F8F8F2;">    {</span></span>
<span class="line"><span style="color:#FF79C6;">        set</span><span style="color:#F8F8F2;"> { _userRepository </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> value; }</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">    public</span><span style="color:#FF79C6;"> void</span><span style="color:#50FA7B;"> CreateUser</span><span style="color:#F8F8F2;">(</span><span style="color:#8BE9FD;font-style:italic;">User</span><span style="color:#FFB86C;font-style:italic;"> user</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">    {</span></span>
<span class="line"><span style="color:#F8F8F2;">        _userRepository.</span><span style="color:#50FA7B;">Save</span><span style="color:#F8F8F2;">(user);</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="方法注入" tabindex="-1"><a class="header-anchor" href="#方法注入"><span>方法注入</span></a></h3><p>方法注入是指在类的方法上使用属性来声明依赖项，并在运行时通过方法调用将依赖项传递给它。这种方式允许在对象创建后动态地注入依赖项。</p><div class="language-csharp line-numbers-mode" data-highlighter="shiki" data-ext="csharp" data-title="csharp" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">public</span><span style="color:#FF79C6;"> class</span><span style="color:#8BE9FD;"> UserService</span></span>
<span class="line"><span style="color:#F8F8F2;">{</span></span>
<span class="line"><span style="color:#FF79C6;">    private</span><span style="color:#8BE9FD;font-style:italic;"> IUserRepository</span><span style="color:#F8F8F2;"> _userRepository;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">    public</span><span style="color:#FF79C6;"> void</span><span style="color:#50FA7B;"> SetUserRepository</span><span style="color:#F8F8F2;">(</span><span style="color:#8BE9FD;font-style:italic;">IUserRepository</span><span style="color:#FFB86C;font-style:italic;"> userRepository</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">    {</span></span>
<span class="line"><span style="color:#F8F8F2;">        _userRepository </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> userRepository;</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">    public</span><span style="color:#FF79C6;"> void</span><span style="color:#50FA7B;"> CreateUser</span><span style="color:#F8F8F2;">(</span><span style="color:#8BE9FD;font-style:italic;">User</span><span style="color:#FFB86C;font-style:italic;"> user</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">    {</span></span>
<span class="line"><span style="color:#F8F8F2;">        _userRepository.</span><span style="color:#50FA7B;">Save</span><span style="color:#F8F8F2;">(user);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="服务注册" tabindex="-1"><a class="header-anchor" href="#服务注册"><span>服务注册</span></a></h2><ul><li><p>依赖项</p><p>Microsoft.Extensions.DependencyInjection.Abstractions：抽象包，用于扩展容器</p><p>Microsoft.Extensions.DependencyInjection：实现包，实现IOC的基本功能</p></li><li><p>核心接口 Service：就是我们需要的服务实列（菜）</p><p>ServiceDescriptor：用于描述服务的信息。比如服务名（ServiceType）、实现类(ImplementationType)、生命周期(Lifetime)。（某道菜的制作描述信息）</p><p>IServiceCollection：是一个<code>List&lt;ServiceDescriptor&gt;</code>集合，用于保存服务描述信息。（菜谱，记录了很多菜的描述信息）</p><p>IServiceProvider：用于解析服务实列，根容器和子容器实现类不同（厨师）实现类里面有字段用于标记是否是根容器，以及记录所有解析的实列，为将来释放做准备。</p><p>ActivatorUtilities：用于解析一个容器中不存在，但是依赖了容器中的服务的实列。</p></li><li><p>关键字</p><p>依赖：如果一个类A的构造器中有一个类B的参数，我们说A依赖B</p><p>注入：如果A依赖B，要想实列化A，就必须先实列化B，然后把B载入A的构造器的过程</p><p>依赖注入：IOC容器根据反射得到一个类的依赖关系，自动帮你载入依赖项的过程（注意循环依赖问题）</p></li><li><p>服务描述</p><div class="language-c# line-numbers-mode" data-highlighter="shiki" data-ext="c#" data-title="c#" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">public</span><span style="color:#FF79C6;"> class</span><span style="color:#8BE9FD;"> ServiceDescriptor</span></span>
<span class="line"><span style="color:#F8F8F2;">{</span></span>
<span class="line"><span style="color:#6272A4;">	//服务类型，解析时通过服务类型查找</span></span>
<span class="line"><span style="color:#FF79C6;">	public</span><span style="color:#8BE9FD;font-style:italic;"> Type</span><span style="color:#F8F8F2;"> ServiceType { </span><span style="color:#FF79C6;">get</span><span style="color:#F8F8F2;">; }</span></span>
<span class="line"><span style="color:#6272A4;">	//实现类型必须是具体类，不能是抽象类或者接口（必须实现或者继承ServiceType）</span></span>
<span class="line"><span style="color:#FF79C6;">	public</span><span style="color:#8BE9FD;font-style:italic;"> Type</span><span style="color:#F8F8F2;">? ImplementationType { </span><span style="color:#FF79C6;">get</span><span style="color:#F8F8F2;">; }</span></span>
<span class="line"><span style="color:#6272A4;">	//描述生命周期</span></span>
<span class="line"><span style="color:#FF79C6;">	public</span><span style="color:#8BE9FD;font-style:italic;"> ServiceLifetime</span><span style="color:#F8F8F2;"> Lifetime { </span><span style="color:#FF79C6;">get</span><span style="color:#F8F8F2;">; }</span></span>
<span class="line"><span style="color:#6272A4;">	//用于保存工厂</span></span>
<span class="line"><span style="color:#FF79C6;">	public</span><span style="color:#8BE9FD;font-style:italic;"> Func</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#8BE9FD;font-style:italic;">IServiceProvider</span><span style="color:#F8F8F2;">, </span><span style="color:#FF79C6;">object</span><span style="color:#F8F8F2;">&gt;? ImplementationFactory { </span><span style="color:#FF79C6;">get</span><span style="color:#F8F8F2;">; }</span></span>
<span class="line"><span style="color:#6272A4;">	//用于保存单实例</span></span>
<span class="line"><span style="color:#FF79C6;">	public</span><span style="color:#FF79C6;"> object</span><span style="color:#F8F8F2;">? ImplementationInstance { </span><span style="color:#FF79C6;">get</span><span style="color:#F8F8F2;">; }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>万能公式</p><div class="language-c# line-numbers-mode" data-highlighter="shiki" data-ext="c#" data-title="c#" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#6272A4;">//需要安装：Microsoft.Extensions.DependencyInjection</span></span>
<span class="line"><span style="color:#6272A4;">//创建IServiceCollection实列</span></span>
<span class="line"><span style="color:#8BE9FD;font-style:italic;">IServiceCollection</span><span style="color:#F8F8F2;"> services </span><span style="color:#FF79C6;">=</span><span style="color:#FF79C6;"> new</span><span style="color:#8BE9FD;font-style:italic;"> ServiceCollection</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#6272A4;">//由于IServiceCollection实现了IList&lt;ServiceDescriptor&gt;接口</span></span>
<span class="line"><span style="color:#6272A4;">//因此下面是一个万能公式，其它的都是扩展方法，本质调用的还是这个万能公式，包括委托的方式（他的实现类型是一个委托）</span></span>
<span class="line"><span style="color:#F8F8F2;">services.</span><span style="color:#50FA7B;">Add</span><span style="color:#F8F8F2;">(</span><span style="color:#FF79C6;">new</span><span style="color:#8BE9FD;font-style:italic;"> ServiceDescriptor</span><span style="color:#F8F8F2;">(</span><span style="color:#FF79C6;">typeof</span><span style="color:#F8F8F2;">(</span><span style="color:#8BE9FD;font-style:italic;">IConnection</span><span style="color:#F8F8F2;">),</span><span style="color:#FF79C6;">typeof</span><span style="color:#F8F8F2;">(</span><span style="color:#8BE9FD;font-style:italic;">SqlDbConnection</span><span style="color:#F8F8F2;">),ServiceLifetime.Singleton));</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>泛型接口</p><div class="language-c# line-numbers-mode" data-highlighter="shiki" data-ext="c#" data-title="c#" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#6272A4;">//泛型接口需要提前知道类型</span></span>
<span class="line"><span style="color:#F8F8F2;">services.</span><span style="color:#50FA7B;">AddSingleton</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#8BE9FD;font-style:italic;">IDbConnection</span><span style="color:#F8F8F2;">, </span><span style="color:#8BE9FD;font-style:italic;">SqlDbConnection</span><span style="color:#F8F8F2;">&gt;();</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>反射接口</p><div class="language-c# line-numbers-mode" data-highlighter="shiki" data-ext="c#" data-title="c#" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#6272A4;">//反射的方式在编写框架时十分有用，无反射无框架</span></span>
<span class="line"><span style="color:#F8F8F2;">services.</span><span style="color:#50FA7B;">AddSingleton</span><span style="color:#F8F8F2;">(</span><span style="color:#FF79C6;">typeof</span><span style="color:#F8F8F2;">(</span><span style="color:#8BE9FD;font-style:italic;">IDbConnection</span><span style="color:#F8F8F2;">), </span><span style="color:#FF79C6;">typeof</span><span style="color:#F8F8F2;">(</span><span style="color:#8BE9FD;font-style:italic;">SqlDbConnection</span><span style="color:#F8F8F2;">));</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>委托方式</p><div class="language-c# line-numbers-mode" data-highlighter="shiki" data-ext="c#" data-title="c#" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#6272A4;">//当我们构建的对象需要编写逻辑时，委托方式十分有用</span></span>
<span class="line"><span style="color:#F8F8F2;">services.</span><span style="color:#50FA7B;">AddSingleton</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#8BE9FD;font-style:italic;">IDbConnection</span><span style="color:#F8F8F2;">, </span><span style="color:#8BE9FD;font-style:italic;">SqlConnection</span><span style="color:#F8F8F2;">&gt;();</span></span>
<span class="line"><span style="color:#6272A4;">//低级用法</span></span>
<span class="line"><span style="color:#6272A4;">//假设DbContext依赖IDbConnection，并且需要一个name</span></span>
<span class="line"><span style="color:#6272A4;">//sp是一个IServiceProvider的实列</span></span>
<span class="line"><span style="color:#6272A4;">//委托方式在注册的同时还能进行预解析</span></span>
<span class="line"><span style="color:#6272A4;">//sp到底是根容器还是子容器由解析时的IServiceProvider</span></span>
<span class="line"><span style="color:#F8F8F2;">services.</span><span style="color:#50FA7B;">AddSingleton</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">sp</span><span style="color:#FF79C6;"> =&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">{	</span></span>
<span class="line"><span style="color:#FF79C6;">    var</span><span style="color:#F8F8F2;"> connection </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> sp.</span><span style="color:#50FA7B;">GetRequiredService</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#8BE9FD;font-style:italic;">IDbConnection</span><span style="color:#F8F8F2;">&gt;();</span></span>
<span class="line"><span style="color:#FF79C6;">	return</span><span style="color:#FF79C6;"> new</span><span style="color:#8BE9FD;font-style:italic;"> DbContext</span><span style="color:#F8F8F2;">(connection, </span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">c1</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">});  </span></span>
<span class="line"><span style="color:#6272A4;">//高级用法</span></span>
<span class="line"><span style="color:#F8F8F2;">services.</span><span style="color:#50FA7B;">AddSingleton</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">sp</span><span style="color:#FF79C6;"> =&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">{	    </span></span>
<span class="line"><span style="color:#FF79C6;">	return</span><span style="color:#F8F8F2;"> ActivatorUtilities.</span><span style="color:#50FA7B;">CreateInstance</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#8BE9FD;font-style:italic;">DbContext</span><span style="color:#F8F8F2;">&gt;(sp,</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">c1</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">});</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>泛型注册</p><div class="language-c# line-numbers-mode" data-highlighter="shiki" data-ext="c#" data-title="c#" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#6272A4;">//注册泛型时，只能使用反射接口，并且泛型参数不要写入，解析时来确立，如果有多个泛型参数使用逗号隔开</span></span>
<span class="line"><span style="color:#F8F8F2;">services.</span><span style="color:#50FA7B;">AddSingleton</span><span style="color:#F8F8F2;">(</span><span style="color:#FF79C6;">typeof</span><span style="color:#F8F8F2;">(</span><span style="color:#8BE9FD;font-style:italic;">ILogger</span><span style="color:#F8F8F2;">&lt;&gt;), </span><span style="color:#FF79C6;">typeof</span><span style="color:#F8F8F2;">(</span><span style="color:#8BE9FD;font-style:italic;">ConsoleLogger</span><span style="color:#F8F8F2;">&lt;&gt;));</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>尝试注册</p><div class="language-c# line-numbers-mode" data-highlighter="shiki" data-ext="c#" data-title="c#" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#6272A4;">//如果IDbConnection已注册则后续的services.TryAddSingleton(typeof(IDbConnection), typeof(SqlDbConnection));不会注册新的实现</span></span>
<span class="line"><span style="color:#F8F8F2;">services.</span><span style="color:#50FA7B;">TryAddSingleton</span><span style="color:#F8F8F2;">(</span><span style="color:#FF79C6;">typeof</span><span style="color:#F8F8F2;">(</span><span style="color:#8BE9FD;font-style:italic;">IDbConnection</span><span style="color:#F8F8F2;">), </span><span style="color:#FF79C6;">typeof</span><span style="color:#F8F8F2;">(</span><span style="color:#8BE9FD;font-style:italic;">SqlDbConnection</span><span style="color:#F8F8F2;">));</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>默认服务</p><div class="language-c# line-numbers-mode" data-highlighter="shiki" data-ext="c#" data-title="c#" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#8BE9FD;font-style:italic;">IServiceCollection</span><span style="color:#F8F8F2;"> services </span><span style="color:#FF79C6;">=</span><span style="color:#FF79C6;"> new</span><span style="color:#8BE9FD;font-style:italic;"> ServiceCollection</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#FF79C6;">var</span><span style="color:#F8F8F2;"> sp </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> services.</span><span style="color:#50FA7B;">BuildServiceProvider</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#FF79C6;">var</span><span style="color:#F8F8F2;"> sp1 </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> sp.</span><span style="color:#50FA7B;">GetRequiredService</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#8BE9FD;font-style:italic;">IServiceProvider</span><span style="color:#F8F8F2;">&gt;();</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h2 id="构建容器" tabindex="-1"><a class="header-anchor" href="#构建容器"><span>构建容器</span></a></h2><div class="language-c# line-numbers-mode" data-highlighter="shiki" data-ext="c#" data-title="c#" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#8BE9FD;font-style:italic;">IServiceProvider</span><span style="color:#F8F8F2;"> container </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> services.</span><span style="color:#50FA7B;">BuildServiceProvider</span><span style="color:#F8F8F2;">(</span><span style="color:#FF79C6;">new</span><span style="color:#8BE9FD;font-style:italic;"> ServiceProviderOptions</span><span style="color:#F8F8F2;"> </span></span>
<span class="line"><span style="color:#F8F8F2;">{</span></span>
<span class="line"><span style="color:#F8F8F2;">     ValidateOnBuild </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> true</span><span style="color:#F8F8F2;">,</span><span style="color:#6272A4;">//构建时检查是否有依赖没有注册的服务</span></span>
<span class="line"><span style="color:#F8F8F2;">     ValidateScopes </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> true</span><span style="color:#F8F8F2;">,</span><span style="color:#6272A4;">//在解析服务时检查是否通过根容器来解析Scoped类型的实列</span></span>
<span class="line"><span style="color:#F8F8F2;">});</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="服务解析" tabindex="-1"><a class="header-anchor" href="#服务解析"><span>服务解析</span></a></h2><div class="language-c# line-numbers-mode" data-highlighter="shiki" data-ext="c#" data-title="c#" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#6272A4;">//如果同一个服务类型，注册多个实现，那么默认获取最后一个实现。</span></span>
<span class="line"><span style="color:#F8F8F2;">services.</span><span style="color:#50FA7B;">AddSingleton</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#8BE9FD;font-style:italic;">IDbConnection</span><span style="color:#F8F8F2;">, </span><span style="color:#8BE9FD;font-style:italic;">SqlConnection</span><span style="color:#F8F8F2;">&gt;();</span></span>
<span class="line"><span style="color:#F8F8F2;">services.</span><span style="color:#50FA7B;">AddSingleton</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#8BE9FD;font-style:italic;">IDbConnection</span><span style="color:#F8F8F2;">, </span><span style="color:#8BE9FD;font-style:italic;">MySqlConnection</span><span style="color:#F8F8F2;">&gt;();</span></span>
<span class="line"><span style="color:#8BE9FD;font-style:italic;">IServiceProvider</span><span style="color:#F8F8F2;"> container </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> services.</span><span style="color:#50FA7B;">BuildServiceProvider</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#6272A4;">//如果服务未注册，返回null</span></span>
<span class="line"><span style="color:#8BE9FD;font-style:italic;">IDbConnection</span><span style="color:#F8F8F2;">? connection </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> container.</span><span style="color:#50FA7B;">GetService</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#8BE9FD;font-style:italic;">IDbConnection</span><span style="color:#F8F8F2;">&gt;();</span></span>
<span class="line"><span style="color:#6272A4;">//服务不存在讲引发异常</span></span>
<span class="line"><span style="color:#8BE9FD;font-style:italic;">IDbConnection</span><span style="color:#F8F8F2;"> connection </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> container.</span><span style="color:#50FA7B;">GetRequiredService</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#8BE9FD;font-style:italic;">IDbConnection</span><span style="color:#F8F8F2;">&gt;();</span></span>
<span class="line"><span style="color:#6272A4;">//获取IDbConnection所有实现</span></span>
<span class="line"><span style="color:#8BE9FD;font-style:italic;">IEnumerable</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#8BE9FD;font-style:italic;">IDbConnection</span><span style="color:#F8F8F2;">&gt; connections </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> container.</span><span style="color:#50FA7B;">GetRequiredServices</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#8BE9FD;font-style:italic;">IDbConnection</span><span style="color:#F8F8F2;">&gt;();</span></span>
<span class="line"><span style="color:#6272A4;">//假设DbContext依赖IDbConnection，并且需要一个name，但是容器没有注册DbContext</span></span>
<span class="line"><span style="color:#FF79C6;">var</span><span style="color:#F8F8F2;"> context </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> ActivatorUtilities.</span><span style="color:#50FA7B;">CreateInstance</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#8BE9FD;font-style:italic;">DbContext</span><span style="color:#F8F8F2;">&gt;(container, </span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">c1</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="生命周期" tabindex="-1"><a class="header-anchor" href="#生命周期"><span>生命周期</span></a></h2><ul><li>容器除了会帮我们创建对象，还负责对象的销毁，特别对于托管资源。</li><li>不要试图通过根容器来解析Scoped或者Transient生命周期的实列</li><li>单实例的对象不能依赖一个Scoped或者Transient生命周期的实列</li><li>在Debug模式下可以看到容器是否是根容器，以及容器解析的实列，容器会记录由它解析的所有实列，为释放做准备。</li></ul><p>我们需要会搭建测试案例，来验证是否是同一个实列，以及释放问题。</p><div class="language-c# line-numbers-mode" data-highlighter="shiki" data-ext="c#" data-title="c#" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">public</span><span style="color:#FF79C6;"> class</span><span style="color:#8BE9FD;"> A</span><span style="color:#F8F8F2;"> : </span><span style="color:#8BE9FD;font-style:italic;">IDisposable</span></span>
<span class="line"><span style="color:#F8F8F2;">{</span></span>
<span class="line"><span style="color:#FF79C6;">    public</span><span style="color:#FF79C6;"> string</span><span style="color:#F8F8F2;"> ID { </span><span style="color:#FF79C6;">get</span><span style="color:#F8F8F2;">; }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">    public</span><span style="color:#50FA7B;"> A</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"><span style="color:#F8F8F2;">    {</span></span>
<span class="line"><span style="color:#F8F8F2;">        ID </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> Guid.</span><span style="color:#50FA7B;">NewGuid</span><span style="color:#F8F8F2;">().</span><span style="color:#50FA7B;">ToString</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">    public</span><span style="color:#FF79C6;"> void</span><span style="color:#50FA7B;"> Dispose</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"><span style="color:#F8F8F2;">    {</span></span>
<span class="line"><span style="color:#F8F8F2;">        Console.</span><span style="color:#50FA7B;">WriteLine</span><span style="color:#F8F8F2;">(ID </span><span style="color:#FF79C6;">+</span><span style="color:#E9F284;"> &quot;</span><span style="color:#F1FA8C;">:已释放...</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">//测试</span></span>
<span class="line"><span style="color:#FF79C6;">var</span><span style="color:#F8F8F2;"> services </span><span style="color:#FF79C6;">=</span><span style="color:#FF79C6;"> new</span><span style="color:#8BE9FD;font-style:italic;"> ServiceCollection</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#6272A4;">//你可以测试其他生命周期</span></span>
<span class="line"><span style="color:#F8F8F2;">services.</span><span style="color:#50FA7B;">AddScoped</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#8BE9FD;font-style:italic;">A</span><span style="color:#F8F8F2;">&gt;();</span><span style="color:#6272A4;">//替换其他生命周期</span></span>
<span class="line"><span style="color:#6272A4;">                        //根容器：通过Debug模式查看container可以看到一个属性IsRootScope用来标记它是否是根容器</span></span>
<span class="line"><span style="color:#8BE9FD;font-style:italic;">IServiceProvider</span><span style="color:#F8F8F2;"> container </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> services.</span><span style="color:#50FA7B;">BuildServiceProvider</span><span style="color:#F8F8F2;">(</span><span style="color:#FF79C6;">new</span><span style="color:#8BE9FD;font-style:italic;"> ServiceProviderOptions</span></span>
<span class="line"><span style="color:#F8F8F2;">{</span></span>
<span class="line"><span style="color:#F8F8F2;">    ValidateOnBuild </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> true</span><span style="color:#F8F8F2;">,</span><span style="color:#6272A4;">//构建时检查是否有依赖没有注册的服务</span></span>
<span class="line"><span style="color:#F8F8F2;">    ValidateScopes </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> false</span><span style="color:#F8F8F2;">,</span><span style="color:#6272A4;">//在解析服务时检查是否通过根容器来解析Scoped类型的实列</span></span>
<span class="line"><span style="color:#F8F8F2;">});</span></span>
<span class="line"><span style="color:#6272A4;">//a1:通过根容器创建，需要设ValidateScopes为false（危险）</span></span>
<span class="line"><span style="color:#FF79C6;">var</span><span style="color:#F8F8F2;"> a1 </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> container.</span><span style="color:#50FA7B;">GetRequiredService</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#8BE9FD;font-style:italic;">A</span><span style="color:#F8F8F2;">&gt;();</span></span>
<span class="line"><span style="color:#FF79C6;">var</span><span style="color:#F8F8F2;"> a2 </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> container.</span><span style="color:#50FA7B;">GetRequiredService</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#8BE9FD;font-style:italic;">A</span><span style="color:#F8F8F2;">&gt;();</span></span>
<span class="line"><span style="color:#FF79C6;">using</span><span style="color:#F8F8F2;"> (</span><span style="color:#FF79C6;">var</span><span style="color:#F8F8F2;"> scope </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> container.</span><span style="color:#50FA7B;">CreateScope</span><span style="color:#F8F8F2;">())</span></span>
<span class="line"><span style="color:#F8F8F2;">{</span></span>
<span class="line"><span style="color:#6272A4;">    //a2:通过子容器创建（合法）</span></span>
<span class="line"><span style="color:#FF79C6;">    var</span><span style="color:#F8F8F2;"> a3 </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> scope.ServiceProvider.</span><span style="color:#50FA7B;">GetRequiredService</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#8BE9FD;font-style:italic;">A</span><span style="color:#F8F8F2;">&gt;();</span></span>
<span class="line"><span style="color:#FF79C6;">    var</span><span style="color:#F8F8F2;"> a4 </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> scope.ServiceProvider.</span><span style="color:#50FA7B;">GetRequiredService</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#8BE9FD;font-style:italic;">A</span><span style="color:#F8F8F2;">&gt;();</span></span>
<span class="line"><span style="color:#F8F8F2;">    Console.</span><span style="color:#50FA7B;">WriteLine</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">scop0:</span><span style="color:#E9F284;">&quot;</span><span style="color:#FF79C6;"> +</span><span style="color:#F8F8F2;"> a1.ID);</span></span>
<span class="line"><span style="color:#F8F8F2;">    Console.</span><span style="color:#50FA7B;">WriteLine</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">scop0:</span><span style="color:#E9F284;">&quot;</span><span style="color:#FF79C6;"> +</span><span style="color:#F8F8F2;"> a2.ID);</span></span>
<span class="line"><span style="color:#F8F8F2;">    Console.</span><span style="color:#50FA7B;">WriteLine</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">scop1:</span><span style="color:#E9F284;">&quot;</span><span style="color:#FF79C6;"> +</span><span style="color:#F8F8F2;"> a3.ID);</span></span>
<span class="line"><span style="color:#F8F8F2;">    Console.</span><span style="color:#50FA7B;">WriteLine</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">scop1:</span><span style="color:#E9F284;">&quot;</span><span style="color:#FF79C6;"> +</span><span style="color:#F8F8F2;"> a4.ID);</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过修改A服务注册的生命周期我们可以得到一下结论。</p><p>测试Singleton发现：a1,a2,a3,a4的Id都相同 测试Scope发现：a1和a2的Id相同，a3和a4的Id相同，a1和a3的Id不相同 测试Transient发现：a1,a2,a3,a4的Id都不同</p><p>Singleton：无论通过根容器还是子容器，获取的都是同一实列，而且不会执行释放（除非释放根容器）。</p><p>Scoped：同一scope获取的都是同一实列，不同的scope获取的实列不同。scope释放会释放由它解析出来的所有实列（除了单实例以外），如果并执行Dispose方法（前提实现了IDisposable）。</p><p>Transient：无论是否同一scope获取的实列都不同，每次获取都是一个新的实列，scope释放会释放所有的实列。</p><p>注意：ServiceProvider会记录由它创建的所有实列，如果释放IServiceScope的实列，则会释放(ServiceProvider)和所有（单实列除外）由它创建的实列。</p><p>Scope范围：scope的范围有多大取决于你何时创建何时释放。从创建到释放就是他的生命周期。</p><div class="language-c# line-numbers-mode" data-highlighter="shiki" data-ext="c#" data-title="c#" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#6272A4;">//按时间5s之后释放</span></span>
<span class="line"><span style="color:#6272A4;">//实现了IDisposable接口服务在释放时，我们可以处理释放逻辑</span></span>
<span class="line"><span style="color:#FF79C6;">public</span><span style="color:#FF79C6;"> class</span><span style="color:#8BE9FD;"> A</span><span style="color:#F8F8F2;"> : </span><span style="color:#8BE9FD;font-style:italic;">IDisposable</span></span>
<span class="line"><span style="color:#F8F8F2;">{</span></span>
<span class="line"><span style="color:#FF79C6;">    public</span><span style="color:#FF79C6;"> string</span><span style="color:#F8F8F2;"> ID { </span><span style="color:#FF79C6;">get</span><span style="color:#F8F8F2;">; } </span></span>
<span class="line"><span style="color:#F8F8F2;">    </span></span>
<span class="line"><span style="color:#FF79C6;">    public</span><span style="color:#50FA7B;"> A</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"><span style="color:#F8F8F2;">    {</span></span>
<span class="line"><span style="color:#6272A4;">        //同一个实列的构造器只会执行一次</span></span>
<span class="line"><span style="color:#F8F8F2;">        ID </span><span style="color:#FF79C6;">=</span><span style="color:#FF79C6;"> =</span><span style="color:#F8F8F2;"> Guid.</span><span style="color:#50FA7B;">NewGuid</span><span style="color:#F8F8F2;">().</span><span style="color:#50FA7B;">ToString</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span></span>
<span class="line"><span style="color:#FF79C6;">    public</span><span style="color:#FF79C6;"> void</span><span style="color:#50FA7B;"> Dispose</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"><span style="color:#F8F8F2;">    {</span></span>
<span class="line"><span style="color:#F8F8F2;">        Console.</span><span style="color:#50FA7B;">WriteLine</span><span style="color:#F8F8F2;">(ID </span><span style="color:#FF79C6;">+</span><span style="color:#E9F284;"> &quot;</span><span style="color:#F1FA8C;">:已释放...</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#8BE9FD;font-style:italic;">IServiceProvider</span><span style="color:#F8F8F2;"> container </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> services.</span><span style="color:#50FA7B;">BuildServiceProvider</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#FF79C6;">var</span><span style="color:#F8F8F2;"> scope </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> rootContainer.</span><span style="color:#50FA7B;">CreateScope</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#FF79C6;">var</span><span style="color:#F8F8F2;"> a1 </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> container.</span><span style="color:#50FA7B;">GetRequiredService</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#8BE9FD;font-style:italic;">A</span><span style="color:#F8F8F2;">&gt;();</span></span>
<span class="line"><span style="color:#F8F8F2;">Thread.</span><span style="color:#50FA7B;">Sleep</span><span style="color:#F8F8F2;">(</span><span style="color:#BD93F9;">5</span><span style="color:#FF79C6;"> *</span><span style="color:#BD93F9;"> 1000</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">scope.</span><span style="color:#50FA7B;">Dispose</span><span style="color:#F8F8F2;">();</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="组件扫描" tabindex="-1"><a class="header-anchor" href="#组件扫描"><span>组件扫描</span></a></h2><p>组件扫描可以自定义规则，比如根据实现了某个接口，或者统一后缀</p><p>这里我们演示如何通过注解来扫描,大家也可以根据接口的方式来扫描</p><div class="language-c# line-numbers-mode" data-highlighter="shiki" data-ext="c#" data-title="c#" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#F8F8F2;">[</span><span style="color:#8BE9FD;font-style:italic;">AttributeUsage</span><span style="color:#F8F8F2;">(AttributeTargets.Class)]</span></span>
<span class="line"><span style="color:#FF79C6;">public</span><span style="color:#FF79C6;"> class</span><span style="color:#8BE9FD;"> InjectionAttribute</span><span style="color:#F8F8F2;"> : </span><span style="color:#8BE9FD;font-style:italic;">Attribute</span></span>
<span class="line"><span style="color:#F8F8F2;">{</span></span>
<span class="line"><span style="color:#FF79C6;">    public</span><span style="color:#8BE9FD;font-style:italic;"> Type</span><span style="color:#F8F8F2;">? ServiceType { </span><span style="color:#FF79C6;">get</span><span style="color:#F8F8F2;">; </span><span style="color:#FF79C6;">set</span><span style="color:#F8F8F2;">; }</span></span>
<span class="line"><span style="color:#FF79C6;">    public</span><span style="color:#8BE9FD;font-style:italic;"> ServiceLifetime</span><span style="color:#F8F8F2;"> Lifetime { </span><span style="color:#FF79C6;">get</span><span style="color:#F8F8F2;">; </span><span style="color:#FF79C6;">set</span><span style="color:#F8F8F2;">; } </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> ServiceLifetime.Transient;</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#FF79C6;">public</span><span style="color:#FF79C6;"> static</span><span style="color:#FF79C6;"> class</span><span style="color:#8BE9FD;"> InjectionIServiceCollectionExtensions</span></span>
<span class="line"><span style="color:#F8F8F2;">{</span></span>
<span class="line"><span style="color:#FF79C6;">    public</span><span style="color:#FF79C6;"> static</span><span style="color:#8BE9FD;font-style:italic;"> IServiceCollection</span><span style="color:#50FA7B;"> AddServicesByInjection</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#FFB86C;font-style:italic;">T</span><span style="color:#F8F8F2;">&gt;(</span><span style="color:#FF79C6;">this</span><span style="color:#8BE9FD;font-style:italic;"> IServiceCollection</span><span style="color:#FFB86C;font-style:italic;"> services</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">    {</span></span>
<span class="line"><span style="color:#FF79C6;">        var</span><span style="color:#F8F8F2;"> serviceTypes </span><span style="color:#FF79C6;">=</span><span style="color:#FF79C6;"> typeof</span><span style="color:#F8F8F2;">(</span><span style="color:#8BE9FD;font-style:italic;">T</span><span style="color:#F8F8F2;">).Assembly.</span><span style="color:#50FA7B;">GetTypes</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"><span style="color:#F8F8F2;">            .</span><span style="color:#50FA7B;">Where</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">a</span><span style="color:#FF79C6;"> =&gt;</span><span style="color:#F8F8F2;"> a.IsClass)</span></span>
<span class="line"><span style="color:#F8F8F2;">            .</span><span style="color:#50FA7B;">Where</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">a</span><span style="color:#FF79C6;"> =&gt;</span><span style="color:#F8F8F2;"> a.</span><span style="color:#50FA7B;">GetCustomAttribute</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#8BE9FD;font-style:italic;">InjectionAttribute</span><span style="color:#F8F8F2;">&gt;() </span><span style="color:#FF79C6;">!=</span><span style="color:#BD93F9;"> null</span><span style="color:#F8F8F2;">)</span><span style="color:#6272A4;">//扫描注解</span></span>
<span class="line"><span style="color:#F8F8F2;">            .</span><span style="color:#50FA7B;">Where</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">a</span><span style="color:#FF79C6;"> =&gt;</span><span style="color:#FF79C6;"> !</span><span style="color:#F8F8F2;">a.IsAbstract);</span></span>
<span class="line"><span style="color:#FF79C6;">        foreach</span><span style="color:#F8F8F2;"> (</span><span style="color:#FF79C6;">var</span><span style="color:#F8F8F2;"> item </span><span style="color:#FF79C6;">in</span><span style="color:#F8F8F2;"> serviceTypes)</span></span>
<span class="line"><span style="color:#F8F8F2;">        {</span></span>
<span class="line"><span style="color:#FF79C6;">            var</span><span style="color:#F8F8F2;"> injection </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> item.</span><span style="color:#50FA7B;">GetCustomAttribute</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#8BE9FD;font-style:italic;">InjectionAttribute</span><span style="color:#F8F8F2;">&gt;();</span></span>
<span class="line"><span style="color:#FF79C6;">            if</span><span style="color:#F8F8F2;"> (injection</span><span style="color:#FF79C6;">!</span><span style="color:#F8F8F2;">.ServiceType </span><span style="color:#FF79C6;">==</span><span style="color:#BD93F9;"> null</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">            {</span></span>
<span class="line"><span style="color:#F8F8F2;">                services.</span><span style="color:#50FA7B;">Add</span><span style="color:#F8F8F2;">(</span><span style="color:#FF79C6;">new</span><span style="color:#8BE9FD;font-style:italic;"> ServiceDescriptor</span><span style="color:#F8F8F2;">(item, item, injection.Lifetime));</span></span>
<span class="line"><span style="color:#F8F8F2;">            }</span></span>
<span class="line"><span style="color:#FF79C6;">            else</span></span>
<span class="line"><span style="color:#F8F8F2;">            {</span></span>
<span class="line"><span style="color:#F8F8F2;">                services.</span><span style="color:#50FA7B;">Add</span><span style="color:#F8F8F2;">(</span><span style="color:#FF79C6;">new</span><span style="color:#8BE9FD;font-style:italic;"> ServiceDescriptor</span><span style="color:#F8F8F2;">(injection</span><span style="color:#FF79C6;">!</span><span style="color:#F8F8F2;">.ServiceType, item, injection.Lifetime));</span></span>
<span class="line"><span style="color:#F8F8F2;">            }</span></span>
<span class="line"><span style="color:#F8F8F2;">        }</span></span>
<span class="line"><span style="color:#FF79C6;">        return</span><span style="color:#F8F8F2;"> services;</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">public</span><span style="color:#FF79C6;"> interface</span><span style="color:#8BE9FD;font-style:italic;"> IDbConnection</span></span>
<span class="line"><span style="color:#F8F8F2;">{</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">[</span><span style="color:#8BE9FD;font-style:italic;">Injection</span><span style="color:#F8F8F2;">(ServiceType </span><span style="color:#FF79C6;">=</span><span style="color:#FF79C6;"> typeof</span><span style="color:#F8F8F2;">(</span><span style="color:#8BE9FD;font-style:italic;">IDbConnection</span><span style="color:#F8F8F2;">), Lifetime </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> ServiceLifetime.Scoped)]</span></span>
<span class="line"><span style="color:#FF79C6;">public</span><span style="color:#FF79C6;"> class</span><span style="color:#8BE9FD;"> DbConnection</span><span style="color:#F8F8F2;"> : </span><span style="color:#8BE9FD;font-style:italic;">IDbConnection</span></span>
<span class="line"><span style="color:#F8F8F2;">{</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#6272A4;"> //测试</span></span>
<span class="line"><span style="color:#FF79C6;">var</span><span style="color:#F8F8F2;"> services </span><span style="color:#FF79C6;">=</span><span style="color:#FF79C6;"> new</span><span style="color:#8BE9FD;font-style:italic;"> ServiceCollection</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#6272A4;">//传入需要扫描的程序集</span></span>
<span class="line"><span style="color:#F8F8F2;">services.</span><span style="color:#50FA7B;">AddServicesByInjection</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#8BE9FD;font-style:italic;">Program</span><span style="color:#F8F8F2;">&gt;();</span></span>
<span class="line"><span style="color:#FF79C6;">var</span><span style="color:#F8F8F2;"> sp </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> services.</span><span style="color:#50FA7B;">BuildServiceProvider</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#FF79C6;">var</span><span style="color:#F8F8F2;"> connection </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> sp.</span><span style="color:#50FA7B;">GetService</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#8BE9FD;font-style:italic;">IDbConnection</span><span style="color:#F8F8F2;">&gt;();</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="构造模式" tabindex="-1"><a class="header-anchor" href="#构造模式"><span>构造模式</span></a></h2><ul><li>构造器的目的和构造函数一样，但是构造器可以提供丰富的api来简化对象的构造</li><li>构造模式用于简化被构造对象的创建，通过提供一大堆的api来丰富简化构造过程，增加调用者的体验。</li><li>构造者需要提供一个Build方法用于构建和返回将要构造的对象实列。</li><li>在容器中一般需要提供一个公开的IServiceCollection类型的属性，用于注册服务。</li><li>IServiceCollection是构造者模式</li></ul><div class="language-c# line-numbers-mode" data-highlighter="shiki" data-ext="c#" data-title="c#" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">public</span><span style="color:#FF79C6;"> enum</span><span style="color:#8BE9FD;font-style:italic;"> ServiceLifetime</span></span>
<span class="line"><span style="color:#F8F8F2;">{</span></span>
<span class="line"><span style="color:#F8F8F2;">    Transient,</span></span>
<span class="line"><span style="color:#F8F8F2;">    Scoped,</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#FF79C6;">public</span><span style="color:#FF79C6;"> class</span><span style="color:#8BE9FD;"> ServiceDescriptor</span></span>
<span class="line"><span style="color:#F8F8F2;">{</span></span>
<span class="line"><span style="color:#FF79C6;">    public</span><span style="color:#8BE9FD;font-style:italic;"> Type</span><span style="color:#F8F8F2;"> ServiceType { </span><span style="color:#FF79C6;">get</span><span style="color:#F8F8F2;">; }</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span></span>
<span class="line"><span style="color:#FF79C6;">    public</span><span style="color:#8BE9FD;font-style:italic;"> ServiceLifetime</span><span style="color:#F8F8F2;"> Lifetime { </span><span style="color:#FF79C6;">get</span><span style="color:#F8F8F2;">; }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">    public</span><span style="color:#50FA7B;"> ServiceDescriptor</span><span style="color:#F8F8F2;">(</span><span style="color:#8BE9FD;font-style:italic;">Type</span><span style="color:#FFB86C;font-style:italic;"> serviceType</span><span style="color:#F8F8F2;">, </span><span style="color:#8BE9FD;font-style:italic;">ServiceLifetime</span><span style="color:#FFB86C;font-style:italic;"> lifetime</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">    {</span></span>
<span class="line"><span style="color:#F8F8F2;">        ServiceType </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> serviceType;</span></span>
<span class="line"><span style="color:#F8F8F2;">        Lifetime </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> lifetime;</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#6272A4;">//目标对象</span></span>
<span class="line"><span style="color:#FF79C6;">public</span><span style="color:#FF79C6;"> interface</span><span style="color:#8BE9FD;font-style:italic;"> IContainer</span></span>
<span class="line"><span style="color:#F8F8F2;">{</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#6272A4;">//如果直接创建成本很高，体验很差</span></span>
<span class="line"><span style="color:#FF79C6;">public</span><span style="color:#FF79C6;"> class</span><span style="color:#8BE9FD;"> Container</span><span style="color:#F8F8F2;">: </span><span style="color:#8BE9FD;font-style:italic;">IContainer</span></span>
<span class="line"><span style="color:#F8F8F2;">{</span></span>
<span class="line"><span style="color:#FF79C6;">    private</span><span style="color:#8BE9FD;font-style:italic;"> List</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#8BE9FD;font-style:italic;">ServiceDescriptor</span><span style="color:#F8F8F2;">&gt; _services </span><span style="color:#FF79C6;">=</span><span style="color:#FF79C6;"> new</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#F8F8F2;">   </span></span>
<span class="line"><span style="color:#FF79C6;">    public</span><span style="color:#50FA7B;"> Container</span><span style="color:#F8F8F2;">(</span><span style="color:#8BE9FD;font-style:italic;">List</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#8BE9FD;font-style:italic;">ServiceDescriptor</span><span style="color:#F8F8F2;">&gt; </span><span style="color:#FFB86C;font-style:italic;">services</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">    {</span></span>
<span class="line"><span style="color:#F8F8F2;">        _services </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> services;</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#6272A4;">//目标对象的构造者</span></span>
<span class="line"><span style="color:#FF79C6;">public</span><span style="color:#FF79C6;"> interface</span><span style="color:#8BE9FD;font-style:italic;"> IContainerBuilder</span></span>
<span class="line"><span style="color:#F8F8F2;">{</span></span>
<span class="line"><span style="color:#6272A4;">    //接口只提供一个通用方法，降低实现成本</span></span>
<span class="line"><span style="color:#FF79C6;">    void</span><span style="color:#50FA7B;"> Add</span><span style="color:#F8F8F2;">(</span><span style="color:#8BE9FD;font-style:italic;">ServiceDescriptor</span><span style="color:#FFB86C;font-style:italic;"> descriptor</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#6272A4;">    //构造目标对象</span></span>
<span class="line"><span style="color:#8BE9FD;font-style:italic;">    IContainer</span><span style="color:#50FA7B;"> Build</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#6272A4;">//实现构造者</span></span>
<span class="line"><span style="color:#FF79C6;">public</span><span style="color:#FF79C6;"> class</span><span style="color:#8BE9FD;"> ContainerBuilder</span><span style="color:#F8F8F2;"> : </span><span style="color:#8BE9FD;font-style:italic;">IContainerBuilder</span></span>
<span class="line"><span style="color:#F8F8F2;">{</span></span>
<span class="line"><span style="color:#FF79C6;">    private</span><span style="color:#8BE9FD;font-style:italic;"> List</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#8BE9FD;font-style:italic;">ServiceDescriptor</span><span style="color:#F8F8F2;">&gt; _services </span><span style="color:#FF79C6;">=</span><span style="color:#FF79C6;"> new</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">    public</span><span style="color:#FF79C6;"> void</span><span style="color:#50FA7B;"> Add</span><span style="color:#F8F8F2;">(</span><span style="color:#8BE9FD;font-style:italic;">ServiceDescriptor</span><span style="color:#FFB86C;font-style:italic;"> descriptor</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">    {</span></span>
<span class="line"><span style="color:#F8F8F2;">        _services.</span><span style="color:#50FA7B;">Add</span><span style="color:#F8F8F2;">(descriptor);</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">    public</span><span style="color:#8BE9FD;font-style:italic;"> IContainer</span><span style="color:#50FA7B;"> Build</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"><span style="color:#F8F8F2;">    {</span></span>
<span class="line"><span style="color:#FF79C6;">        return</span><span style="color:#FF79C6;"> new</span><span style="color:#8BE9FD;font-style:italic;"> Container</span><span style="color:#F8F8F2;">(_services);</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#6272A4;">//扩展构造者，提供更加便捷的api</span></span>
<span class="line"><span style="color:#FF79C6;">public</span><span style="color:#FF79C6;"> static</span><span style="color:#FF79C6;"> class</span><span style="color:#8BE9FD;"> IContainerBuilderExtensions</span></span>
<span class="line"><span style="color:#F8F8F2;">{</span></span>
<span class="line"><span style="color:#FF79C6;">    public</span><span style="color:#FF79C6;"> static</span><span style="color:#FF79C6;"> void</span><span style="color:#50FA7B;"> AddTransient</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#FFB86C;font-style:italic;">T</span><span style="color:#F8F8F2;">&gt;(</span><span style="color:#FF79C6;">this</span><span style="color:#8BE9FD;font-style:italic;"> IContainerBuilder</span><span style="color:#FFB86C;font-style:italic;"> builder</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">    {</span></span>
<span class="line"><span style="color:#F8F8F2;">        builder.</span><span style="color:#50FA7B;">Add</span><span style="color:#F8F8F2;">(</span><span style="color:#FF79C6;">new</span><span style="color:#8BE9FD;font-style:italic;"> ServiceDescriptor</span><span style="color:#F8F8F2;">(</span><span style="color:#FF79C6;">typeof</span><span style="color:#F8F8F2;">(</span><span style="color:#8BE9FD;font-style:italic;">T</span><span style="color:#F8F8F2;">), ServiceLifetime.Transient));</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#FF79C6;">    public</span><span style="color:#FF79C6;"> static</span><span style="color:#FF79C6;"> void</span><span style="color:#50FA7B;"> AddScoped</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#FFB86C;font-style:italic;">T</span><span style="color:#F8F8F2;">&gt;(</span><span style="color:#FF79C6;">this</span><span style="color:#8BE9FD;font-style:italic;"> IContainerBuilder</span><span style="color:#FFB86C;font-style:italic;"> builder</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">    {</span></span>
<span class="line"><span style="color:#F8F8F2;">        builder.</span><span style="color:#50FA7B;">Add</span><span style="color:#F8F8F2;">(</span><span style="color:#FF79C6;">new</span><span style="color:#8BE9FD;font-style:italic;"> ServiceDescriptor</span><span style="color:#F8F8F2;">(</span><span style="color:#FF79C6;">typeof</span><span style="color:#F8F8F2;">(</span><span style="color:#8BE9FD;font-style:italic;">T</span><span style="color:#F8F8F2;">), ServiceLifetime.Scoped));</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">//测试</span></span>
<span class="line"><span style="color:#FF79C6;">var</span><span style="color:#F8F8F2;"> containerBuilder </span><span style="color:#FF79C6;">=</span><span style="color:#FF79C6;"> new</span><span style="color:#8BE9FD;font-style:italic;"> ContainerBuilder</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#F8F8F2;">containerBuilder.</span><span style="color:#50FA7B;">AddScoped</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#8BE9FD;font-style:italic;">DbContext</span><span style="color:#F8F8F2;">&gt;();</span></span>
<span class="line"><span style="color:#FF79C6;">var</span><span style="color:#F8F8F2;"> container </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> containerBuilder.</span><span style="color:#50FA7B;">Build</span><span style="color:#F8F8F2;">();</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="工厂模式" tabindex="-1"><a class="header-anchor" href="#工厂模式"><span>工厂模式</span></a></h2><ul><li>工厂模式侧重于对象的管理（创建销毁），一般提供一个Create方法，支持命名创建。</li><li>通过上面的学习我们发现IOC有一个弊端，就是他是通过服务类型的解析服务的。有些情况下我们需要通过命名的方式来解析服务。此时可以使用工厂模式。</li><li>IServiceProvider也是工厂模式</li></ul><div class="language-c# line-numbers-mode" data-highlighter="shiki" data-ext="c#" data-title="c#" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">public</span><span style="color:#FF79C6;"> interface</span><span style="color:#8BE9FD;font-style:italic;"> IDbConnection</span></span>
<span class="line"><span style="color:#F8F8F2;">{</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#FF79C6;">public</span><span style="color:#FF79C6;"> class</span><span style="color:#8BE9FD;"> MySqlDbConnection</span><span style="color:#F8F8F2;"> : </span><span style="color:#8BE9FD;font-style:italic;">IDbConnection</span></span>
<span class="line"><span style="color:#F8F8F2;">{</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#FF79C6;">public</span><span style="color:#FF79C6;"> class</span><span style="color:#8BE9FD;"> SqlDbConnection</span><span style="color:#F8F8F2;"> : </span><span style="color:#8BE9FD;font-style:italic;">IDbConnection</span></span>
<span class="line"><span style="color:#F8F8F2;">{</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#6272A4;">//如果是一个重量级的工厂，建议注册成单实例</span></span>
<span class="line"><span style="color:#FF79C6;">public</span><span style="color:#FF79C6;"> class</span><span style="color:#8BE9FD;"> DbConnectionFactory</span></span>
<span class="line"><span style="color:#F8F8F2;">{  </span></span>
<span class="line"><span style="color:#FF79C6;">    private</span><span style="color:#8BE9FD;font-style:italic;"> Dictionary</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#FF79C6;">string</span><span style="color:#F8F8F2;">, </span><span style="color:#8BE9FD;font-style:italic;">Type</span><span style="color:#F8F8F2;">&gt; _connections;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">    public</span><span style="color:#50FA7B;"> DbConnectionFactory</span><span style="color:#F8F8F2;">(</span><span style="color:#8BE9FD;font-style:italic;">Dictionary</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#FF79C6;">string</span><span style="color:#F8F8F2;">, </span><span style="color:#8BE9FD;font-style:italic;">Type</span><span style="color:#F8F8F2;">&gt; </span><span style="color:#FFB86C;font-style:italic;">connections</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">    {</span></span>
<span class="line"><span style="color:#F8F8F2;">        _serviceProvider </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> provider;</span></span>
<span class="line"><span style="color:#F8F8F2;">        _connections </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> connections;</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">    public</span><span style="color:#8BE9FD;font-style:italic;"> IDbConnection</span><span style="color:#F8F8F2;">? </span><span style="color:#50FA7B;">Create</span><span style="color:#F8F8F2;">(</span><span style="color:#8BE9FD;font-style:italic;">IServiceProvider</span><span style="color:#FFB86C;font-style:italic;"> serviceProvider</span><span style="color:#F8F8F2;">, </span><span style="color:#FF79C6;">string</span><span style="color:#FFB86C;font-style:italic;"> name</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">    {</span></span>
<span class="line"><span style="color:#FF79C6;">        if</span><span style="color:#F8F8F2;"> (_connections.</span><span style="color:#50FA7B;">TryGetValue</span><span style="color:#F8F8F2;">(name, </span><span style="color:#FF79C6;">out</span><span style="color:#8BE9FD;font-style:italic;"> Type</span><span style="color:#F8F8F2;">? connectionType))</span></span>
<span class="line"><span style="color:#F8F8F2;">        {</span></span>
<span class="line"><span style="color:#FF79C6;">            return</span><span style="color:#F8F8F2;"> serviceProvider.</span><span style="color:#50FA7B;">GetRequiredService</span><span style="color:#F8F8F2;">(connectionType) </span><span style="color:#FF79C6;">as</span><span style="color:#8BE9FD;font-style:italic;"> IDbConnection</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">        }</span></span>
<span class="line"><span style="color:#FF79C6;">        return</span><span style="color:#FF79C6;"> default</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">//测试</span></span>
<span class="line"><span style="color:#FF79C6;">var</span><span style="color:#F8F8F2;"> services </span><span style="color:#FF79C6;">=</span><span style="color:#FF79C6;"> new</span><span style="color:#8BE9FD;font-style:italic;"> ServiceCollection</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#F8F8F2;">services.</span><span style="color:#50FA7B;">AddScoped</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#8BE9FD;font-style:italic;">MySqlDbConnection</span><span style="color:#F8F8F2;">&gt;();</span></span>
<span class="line"><span style="color:#F8F8F2;">services.</span><span style="color:#50FA7B;">AddScoped</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#8BE9FD;font-style:italic;">SqlDbConnection</span><span style="color:#F8F8F2;">&gt;();</span></span>
<span class="line"><span style="color:#F8F8F2;">services.</span><span style="color:#50FA7B;">AddSingleton</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">sp</span><span style="color:#FF79C6;"> =&gt;</span><span style="color:#F8F8F2;"> </span></span>
<span class="line"><span style="color:#F8F8F2;">{</span></span>
<span class="line"><span style="color:#FF79C6;">    var</span><span style="color:#F8F8F2;"> connections </span><span style="color:#FF79C6;">=</span><span style="color:#FF79C6;"> new</span><span style="color:#8BE9FD;font-style:italic;"> Dictionary</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#FF79C6;">string</span><span style="color:#F8F8F2;">, </span><span style="color:#8BE9FD;font-style:italic;">Type</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">    {</span></span>
<span class="line"><span style="color:#F8F8F2;">        { </span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">s1</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">, </span><span style="color:#FF79C6;">typeof</span><span style="color:#F8F8F2;">(</span><span style="color:#8BE9FD;font-style:italic;">SqlDbConnection</span><span style="color:#F8F8F2;">) },</span></span>
<span class="line"><span style="color:#F8F8F2;">        { </span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">s2</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">, </span><span style="color:#FF79C6;">typeof</span><span style="color:#F8F8F2;">(</span><span style="color:#8BE9FD;font-style:italic;">MySqlDbConnection</span><span style="color:#F8F8F2;">) }</span></span>
<span class="line"><span style="color:#F8F8F2;">    };</span></span>
<span class="line"><span style="color:#FF79C6;">    return</span><span style="color:#FF79C6;"> new</span><span style="color:#8BE9FD;font-style:italic;"> DbConnectionFactory</span><span style="color:#F8F8F2;">(connections);</span></span>
<span class="line"><span style="color:#F8F8F2;">});</span></span>
<span class="line"><span style="color:#FF79C6;">var</span><span style="color:#F8F8F2;"> sp </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> services.</span><span style="color:#50FA7B;">BuildServiceProvider</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#FF79C6;">var</span><span style="color:#F8F8F2;"> factory </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> sp.</span><span style="color:#50FA7B;">GetRequiredService</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#8BE9FD;font-style:italic;">DbConnectionFactory</span><span style="color:#F8F8F2;">&gt;();</span></span>
<span class="line"><span style="color:#FF79C6;">var</span><span style="color:#F8F8F2;"> s1 </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> factory.</span><span style="color:#50FA7B;">Create</span><span style="color:#F8F8F2;">(sp, </span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">s1</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#FF79C6;">var</span><span style="color:#F8F8F2;"> s2 </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> factory.</span><span style="color:#50FA7B;">Create</span><span style="color:#F8F8F2;">(sp, </span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">s2</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="提供模式" tabindex="-1"><a class="header-anchor" href="#提供模式"><span>提供模式</span></a></h2><ul><li>如果看到提供者模式，说明我们可以提供多个方案，支持多实现</li><li>一般通过工厂来管理提供者，用以支持命名实列</li></ul><div class="language-c# line-numbers-mode" data-highlighter="shiki" data-ext="c#" data-title="c#" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">public</span><span style="color:#FF79C6;"> interface</span><span style="color:#8BE9FD;font-style:italic;"> ILogger</span></span>
<span class="line"><span style="color:#F8F8F2;">{</span></span>
<span class="line"><span style="color:#FF79C6;">    void</span><span style="color:#50FA7B;"> Info</span><span style="color:#F8F8F2;">(</span><span style="color:#FF79C6;">string</span><span style="color:#FFB86C;font-style:italic;"> message</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">public</span><span style="color:#FF79C6;"> interface</span><span style="color:#8BE9FD;font-style:italic;"> ILoggerProvider</span></span>
<span class="line"><span style="color:#F8F8F2;">{</span></span>
<span class="line"><span style="color:#8BE9FD;font-style:italic;">    ILogger</span><span style="color:#50FA7B;"> CreateLogger</span><span style="color:#F8F8F2;">(</span><span style="color:#FF79C6;">string</span><span style="color:#FFB86C;font-style:italic;"> name</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#6272A4;">//日志提供方案1</span></span>
<span class="line"><span style="color:#FF79C6;">public</span><span style="color:#FF79C6;"> class</span><span style="color:#8BE9FD;"> ConsoleLoggerProvider</span><span style="color:#F8F8F2;"> : </span><span style="color:#8BE9FD;font-style:italic;">ILoggerProvider</span></span>
<span class="line"><span style="color:#F8F8F2;">{</span></span>
<span class="line"><span style="color:#FF79C6;">    public</span><span style="color:#8BE9FD;font-style:italic;"> ILogger</span><span style="color:#50FA7B;"> CreateLogger</span><span style="color:#F8F8F2;">(</span><span style="color:#FF79C6;">string</span><span style="color:#FFB86C;font-style:italic;"> name</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">    {</span></span>
<span class="line"><span style="color:#FF79C6;">        return</span><span style="color:#FF79C6;"> new</span><span style="color:#8BE9FD;font-style:italic;"> ConsoleLogger</span><span style="color:#F8F8F2;">(name);</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#FF79C6;">    class</span><span style="color:#8BE9FD;"> ConsoleLogger</span><span style="color:#F8F8F2;"> : </span><span style="color:#8BE9FD;font-style:italic;">ILogger</span></span>
<span class="line"><span style="color:#F8F8F2;">    {</span></span>
<span class="line"><span style="color:#FF79C6;">        private</span><span style="color:#FF79C6;"> string</span><span style="color:#F8F8F2;"> _name;</span></span>
<span class="line"><span style="color:#FF79C6;">        public</span><span style="color:#50FA7B;"> ConsoleLogger</span><span style="color:#F8F8F2;">(</span><span style="color:#FF79C6;">string</span><span style="color:#FFB86C;font-style:italic;"> name</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">        {</span></span>
<span class="line"><span style="color:#F8F8F2;">            _name </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> name;</span></span>
<span class="line"><span style="color:#F8F8F2;">        }</span></span>
<span class="line"><span style="color:#FF79C6;">        public</span><span style="color:#FF79C6;"> void</span><span style="color:#50FA7B;"> Info</span><span style="color:#F8F8F2;">(</span><span style="color:#FF79C6;">string</span><span style="color:#FFB86C;font-style:italic;"> message</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">        {</span></span>
<span class="line"><span style="color:#F8F8F2;">            Console.</span><span style="color:#50FA7B;">WriteLine</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">$&quot;</span><span style="color:#FF79C6;">{</span><span style="color:#F8F8F2;">_name</span><span style="color:#FF79C6;">}</span><span style="color:#F1FA8C;">:</span><span style="color:#FF79C6;">{</span><span style="color:#F8F8F2;">message</span><span style="color:#FF79C6;">}</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">        }</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#6272A4;">//日志提供方案2</span></span>
<span class="line"><span style="color:#FF79C6;">public</span><span style="color:#FF79C6;"> class</span><span style="color:#8BE9FD;"> DebugLoggerProvider</span><span style="color:#F8F8F2;"> : </span><span style="color:#8BE9FD;font-style:italic;">ILoggerProvider</span></span>
<span class="line"><span style="color:#F8F8F2;">{</span></span>
<span class="line"><span style="color:#FF79C6;">    public</span><span style="color:#8BE9FD;font-style:italic;"> ILogger</span><span style="color:#50FA7B;"> CreateLogger</span><span style="color:#F8F8F2;">(</span><span style="color:#FF79C6;">string</span><span style="color:#FFB86C;font-style:italic;"> name</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">    {</span></span>
<span class="line"><span style="color:#FF79C6;">        return</span><span style="color:#FF79C6;"> new</span><span style="color:#8BE9FD;font-style:italic;"> DebugLogger</span><span style="color:#F8F8F2;">(name);</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">    class</span><span style="color:#8BE9FD;"> DebugLogger</span><span style="color:#F8F8F2;"> : </span><span style="color:#8BE9FD;font-style:italic;">ILogger</span></span>
<span class="line"><span style="color:#F8F8F2;">    {</span></span>
<span class="line"><span style="color:#FF79C6;">        private</span><span style="color:#FF79C6;"> string</span><span style="color:#F8F8F2;"> _name;</span></span>
<span class="line"><span style="color:#FF79C6;">        public</span><span style="color:#50FA7B;"> DebugLogger</span><span style="color:#F8F8F2;">(</span><span style="color:#FF79C6;">string</span><span style="color:#FFB86C;font-style:italic;"> name</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">        {</span></span>
<span class="line"><span style="color:#F8F8F2;">            _name </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> name;</span></span>
<span class="line"><span style="color:#F8F8F2;">        }</span></span>
<span class="line"><span style="color:#FF79C6;">        public</span><span style="color:#FF79C6;"> void</span><span style="color:#50FA7B;"> Info</span><span style="color:#F8F8F2;">(</span><span style="color:#FF79C6;">string</span><span style="color:#FFB86C;font-style:italic;"> message</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">        {</span></span>
<span class="line"><span style="color:#F8F8F2;">            Debug.</span><span style="color:#50FA7B;">WriteLine</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">$&quot;</span><span style="color:#FF79C6;">{</span><span style="color:#F8F8F2;">_name</span><span style="color:#FF79C6;">}</span><span style="color:#F1FA8C;">:</span><span style="color:#FF79C6;">{</span><span style="color:#F8F8F2;">message</span><span style="color:#FF79C6;">}</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">        }</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#FF79C6;">public</span><span style="color:#FF79C6;"> class</span><span style="color:#8BE9FD;"> LoggerFactoryBuilder</span></span>
<span class="line"><span style="color:#F8F8F2;">{</span></span>
<span class="line"><span style="color:#FF79C6;">    private</span><span style="color:#8BE9FD;font-style:italic;"> List</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#8BE9FD;font-style:italic;">ILoggerProvider</span><span style="color:#F8F8F2;">&gt; _providers </span><span style="color:#FF79C6;">=</span><span style="color:#FF79C6;"> new</span><span style="color:#F8F8F2;"> ();</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span></span>
<span class="line"><span style="color:#FF79C6;">    public</span><span style="color:#FF79C6;"> void</span><span style="color:#50FA7B;"> Add</span><span style="color:#F8F8F2;">(</span><span style="color:#8BE9FD;font-style:italic;">ILoggerProvider</span><span style="color:#FFB86C;font-style:italic;"> provider</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">    {</span></span>
<span class="line"><span style="color:#F8F8F2;">        _providers.</span><span style="color:#50FA7B;">Add</span><span style="color:#F8F8F2;">(provider);</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span></span>
<span class="line"><span style="color:#FF79C6;">    public</span><span style="color:#8BE9FD;font-style:italic;"> LoggerFactory</span><span style="color:#50FA7B;"> Build</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"><span style="color:#F8F8F2;">    {</span></span>
<span class="line"><span style="color:#FF79C6;">        return</span><span style="color:#FF79C6;"> new</span><span style="color:#8BE9FD;font-style:italic;"> LoggerFactory</span><span style="color:#F8F8F2;">(_providers);</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#6272A4;">//这里用到了：代理模式，工厂模式，构造模式，提供模式</span></span>
<span class="line"><span style="color:#FF79C6;">public</span><span style="color:#FF79C6;"> class</span><span style="color:#8BE9FD;"> LoggerFactory</span></span>
<span class="line"><span style="color:#F8F8F2;">{</span></span>
<span class="line"><span style="color:#FF79C6;">    private</span><span style="color:#8BE9FD;font-style:italic;"> IEnumerable</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#8BE9FD;font-style:italic;">ILoggerProvider</span><span style="color:#F8F8F2;">&gt; _providers </span><span style="color:#FF79C6;">=</span><span style="color:#FF79C6;"> new</span><span style="color:#F8F8F2;"> ();</span></span>
<span class="line"><span style="color:#F8F8F2;">	</span></span>
<span class="line"><span style="color:#FF79C6;">    public</span><span style="color:#50FA7B;"> LoggerFactory</span><span style="color:#F8F8F2;">(</span><span style="color:#8BE9FD;font-style:italic;">IEnumerable</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#8BE9FD;font-style:italic;">ILoggerProvider</span><span style="color:#F8F8F2;">&gt; </span><span style="color:#FFB86C;font-style:italic;">providers</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">    {</span></span>
<span class="line"><span style="color:#F8F8F2;">        _providers </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> providers;</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span></span>
<span class="line"><span style="color:#6272A4;">    //通过委托的方式来构造</span></span>
<span class="line"><span style="color:#FF79C6;">    public</span><span style="color:#FF79C6;"> static</span><span style="color:#8BE9FD;font-style:italic;"> LoggerFactory</span><span style="color:#50FA7B;"> Create</span><span style="color:#F8F8F2;">(</span><span style="color:#8BE9FD;font-style:italic;">Action</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#8BE9FD;font-style:italic;">LoggerFactoryBuilder</span><span style="color:#F8F8F2;">&gt; </span><span style="color:#FFB86C;font-style:italic;">configure</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">    {</span></span>
<span class="line"><span style="color:#FF79C6;">        var</span><span style="color:#F8F8F2;"> builder </span><span style="color:#FF79C6;">=</span><span style="color:#FF79C6;"> new</span><span style="color:#8BE9FD;font-style:italic;"> LoggerFactoryBuilder</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#50FA7B;">        configure</span><span style="color:#F8F8F2;">(builder);</span></span>
<span class="line"><span style="color:#FF79C6;">        return</span><span style="color:#F8F8F2;"> builder.</span><span style="color:#50FA7B;">Build</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">	</span></span>
<span class="line"><span style="color:#FF79C6;">    public</span><span style="color:#FF79C6;"> void</span><span style="color:#50FA7B;"> AddProvider</span><span style="color:#F8F8F2;">(</span><span style="color:#8BE9FD;font-style:italic;">ILoggerProvider</span><span style="color:#FFB86C;font-style:italic;"> provider</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">    {</span></span>
<span class="line"><span style="color:#F8F8F2;">        _providers.</span><span style="color:#50FA7B;">Add</span><span style="color:#F8F8F2;">(provider);</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span></span>
<span class="line"><span style="color:#FF79C6;">    public</span><span style="color:#8BE9FD;font-style:italic;"> ILogger</span><span style="color:#50FA7B;"> Create</span><span style="color:#F8F8F2;">(</span><span style="color:#FF79C6;">string</span><span style="color:#FFB86C;font-style:italic;"> name</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">    {</span></span>
<span class="line"><span style="color:#FF79C6;">        var</span><span style="color:#F8F8F2;"> loggers </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> _providers.</span><span style="color:#50FA7B;">Select</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">s</span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;">s.</span><span style="color:#50FA7B;">CreateLogger</span><span style="color:#F8F8F2;">(name));</span></span>
<span class="line"><span style="color:#FF79C6;">        return</span><span style="color:#FF79C6;"> new</span><span style="color:#8BE9FD;font-style:italic;"> LoggerCollection</span><span style="color:#F8F8F2;">(loggers);</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#6272A4;">    //代理模式</span></span>
<span class="line"><span style="color:#FF79C6;">    class</span><span style="color:#8BE9FD;"> LoggerCollection</span><span style="color:#F8F8F2;"> : </span><span style="color:#8BE9FD;font-style:italic;">ILogger</span></span>
<span class="line"><span style="color:#F8F8F2;">    {</span></span>
<span class="line"><span style="color:#FF79C6;">        private</span><span style="color:#8BE9FD;font-style:italic;"> IEnumerable</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#8BE9FD;font-style:italic;">ILogger</span><span style="color:#F8F8F2;">&gt; _loggers;</span></span>
<span class="line"><span style="color:#FF79C6;">        public</span><span style="color:#50FA7B;"> LoggerCollection</span><span style="color:#F8F8F2;">(</span><span style="color:#8BE9FD;font-style:italic;">IEnumerable</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#8BE9FD;font-style:italic;">ILogger</span><span style="color:#F8F8F2;">&gt; </span><span style="color:#FFB86C;font-style:italic;">loggers</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">        {</span></span>
<span class="line"><span style="color:#F8F8F2;">            _loggers </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> loggers;</span></span>
<span class="line"><span style="color:#F8F8F2;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">        public</span><span style="color:#FF79C6;"> void</span><span style="color:#50FA7B;"> Info</span><span style="color:#F8F8F2;">(</span><span style="color:#FF79C6;">string</span><span style="color:#FFB86C;font-style:italic;"> message</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">        {</span></span>
<span class="line"><span style="color:#FF79C6;">            foreach</span><span style="color:#F8F8F2;"> (</span><span style="color:#FF79C6;">var</span><span style="color:#F8F8F2;"> logger </span><span style="color:#FF79C6;">in</span><span style="color:#F8F8F2;"> _loggers)</span></span>
<span class="line"><span style="color:#F8F8F2;">            {</span></span>
<span class="line"><span style="color:#F8F8F2;">                logger.</span><span style="color:#50FA7B;">Info</span><span style="color:#F8F8F2;">(message);</span></span>
<span class="line"><span style="color:#F8F8F2;">            }</span></span>
<span class="line"><span style="color:#F8F8F2;">        }</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="代理模式" tabindex="-1"><a class="header-anchor" href="#代理模式"><span>代理模式</span></a></h2><ul><li>代理模式侧重于对目标对象进行加强，通过实现目标对象的接口具备目标对象的能力。</li><li>一般通过实现和目标对象相同的接口来获得目标对象的能力</li><li>代理可以通过目标对象来简化实现成本，代理只负责编写加强逻辑</li><li>一般代理器只代理单个目标对象，我们把下面这个模式也可以归纳到代理模式，因为它能满足代理的许多特点比如加强、拥有目标对象的能力</li><li>思考我们需要一个LoggerCollection，需要实现<code>ICollection&lt;ILogger&gt;</code>接口，如何降低实现成本？</li></ul><div class="language-c# line-numbers-mode" data-highlighter="shiki" data-ext="c#" data-title="c#" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">public</span><span style="color:#FF79C6;"> interface</span><span style="color:#8BE9FD;font-style:italic;"> ILogger</span></span>
<span class="line"><span style="color:#F8F8F2;">{</span></span>
<span class="line"><span style="color:#FF79C6;">    void</span><span style="color:#50FA7B;"> Info</span><span style="color:#F8F8F2;">(</span><span style="color:#FF79C6;">string</span><span style="color:#FFB86C;font-style:italic;"> message</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#6272A4;">//代理模式必须要实现和目标相同的接口，并且可以注入目标对象</span></span>
<span class="line"><span style="color:#FF79C6;">public</span><span style="color:#FF79C6;"> class</span><span style="color:#8BE9FD;"> LoggerCollection</span><span style="color:#F8F8F2;"> : </span><span style="color:#8BE9FD;font-style:italic;">ILogger</span></span>
<span class="line"><span style="color:#F8F8F2;">{</span></span>
<span class="line"><span style="color:#FF79C6;">    private</span><span style="color:#8BE9FD;font-style:italic;"> IEnumerable</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#8BE9FD;font-style:italic;">ILogger</span><span style="color:#F8F8F2;">&gt; _loggers;</span></span>
<span class="line"><span style="color:#FF79C6;">    public</span><span style="color:#50FA7B;"> LoggerCollection</span><span style="color:#F8F8F2;">(</span><span style="color:#8BE9FD;font-style:italic;">IEnumerable</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#8BE9FD;font-style:italic;">ILogger</span><span style="color:#F8F8F2;">&gt; </span><span style="color:#FFB86C;font-style:italic;">loggers</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">    {</span></span>
<span class="line"><span style="color:#F8F8F2;">        _loggers </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> loggers;</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">    public</span><span style="color:#FF79C6;"> void</span><span style="color:#50FA7B;"> Info</span><span style="color:#F8F8F2;">(</span><span style="color:#FF79C6;">string</span><span style="color:#FFB86C;font-style:italic;"> message</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">    {   </span><span style="color:#6272A4;">//加强逻辑</span></span>
<span class="line"><span style="color:#FF79C6;">        foreach</span><span style="color:#F8F8F2;"> (</span><span style="color:#FF79C6;">var</span><span style="color:#F8F8F2;"> logger </span><span style="color:#FF79C6;">in</span><span style="color:#F8F8F2;"> _loggers)</span></span>
<span class="line"><span style="color:#F8F8F2;">        {</span></span>
<span class="line"><span style="color:#6272A4;">            //具体实现由目标对象实现</span></span>
<span class="line"><span style="color:#F8F8F2;">            logger.</span><span style="color:#50FA7B;">Info</span><span style="color:#F8F8F2;">(message);</span></span>
<span class="line"><span style="color:#F8F8F2;">        }</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="装饰者模式" tabindex="-1"><a class="header-anchor" href="#装饰者模式"><span>装饰者模式</span></a></h2><p>装饰者模式侧重于添加装饰（方法），装饰者模式在Stream里面使用非常频繁，我们说流本质都是二进制。但是实际操作起来，有的是字符串。于是就有了TextStream、StreamReader把他们装饰成文本流，并提供新的api，我们看一个案例。</p><div class="language-c# line-numbers-mode" data-highlighter="shiki" data-ext="c#" data-title="c#" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">public</span><span style="color:#FF79C6;"> interface</span><span style="color:#8BE9FD;font-style:italic;"> IOStream</span></span>
<span class="line"><span style="color:#F8F8F2;">{</span></span>
<span class="line"><span style="color:#FF79C6;">    void</span><span style="color:#50FA7B;"> Write</span><span style="color:#F8F8F2;">(</span><span style="color:#FF79C6;">byte</span><span style="color:#F8F8F2;">[] </span><span style="color:#FFB86C;font-style:italic;">buffer</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#FF79C6;">    byte</span><span style="color:#F8F8F2;">[] </span><span style="color:#50FA7B;">ReadAll</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#FF79C6;">    void</span><span style="color:#50FA7B;"> Close</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">public</span><span style="color:#FF79C6;"> class</span><span style="color:#8BE9FD;"> FileStream</span><span style="color:#F8F8F2;">: </span><span style="color:#8BE9FD;font-style:italic;">IOStream</span></span>
<span class="line"><span style="color:#F8F8F2;">{</span></span>
<span class="line"><span style="color:#FF79C6;">    private</span><span style="color:#8BE9FD;font-style:italic;"> List</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#FF79C6;">byte</span><span style="color:#F8F8F2;">&gt; _buffer </span><span style="color:#FF79C6;">=</span><span style="color:#FF79C6;"> new</span><span style="color:#8BE9FD;font-style:italic;"> List</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#FF79C6;">byte</span><span style="color:#F8F8F2;">&gt;();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">    public</span><span style="color:#FF79C6;"> void</span><span style="color:#50FA7B;"> Write</span><span style="color:#F8F8F2;">(</span><span style="color:#FF79C6;">byte</span><span style="color:#F8F8F2;">[] </span><span style="color:#FFB86C;font-style:italic;">buffer</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">    {</span></span>
<span class="line"><span style="color:#F8F8F2;">        _buffer.</span><span style="color:#50FA7B;">AddRange</span><span style="color:#F8F8F2;">(buffer);</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span></span>
<span class="line"><span style="color:#FF79C6;">    public</span><span style="color:#FF79C6;"> byte</span><span style="color:#F8F8F2;">[] </span><span style="color:#50FA7B;">ReadAll</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"><span style="color:#F8F8F2;">    {</span></span>
<span class="line"><span style="color:#FF79C6;">        return</span><span style="color:#F8F8F2;"> _buffer.</span><span style="color:#50FA7B;">ToArray</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span></span>
<span class="line"><span style="color:#FF79C6;">    public</span><span style="color:#FF79C6;"> void</span><span style="color:#50FA7B;"> Close</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"><span style="color:#F8F8F2;">    {</span></span>
<span class="line"><span style="color:#F8F8F2;">        Console.</span><span style="color:#50FA7B;">WriteLine</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">文件已关闭</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#6272A4;">//TextStream既表现出代理特征，也表现出装饰特征，但是侧重装饰，因为它并没有加强目标对象的函数（没有不代表不可以）</span></span>
<span class="line"><span style="color:#6272A4;">//一个类可以使用很多设计模式，并没有谁规定只能使用一个，我们要分析侧重那个点，是侧重代理还是侧重装饰</span></span>
<span class="line"><span style="color:#FF79C6;">public</span><span style="color:#FF79C6;"> class</span><span style="color:#8BE9FD;"> TextStream</span><span style="color:#F8F8F2;">: </span><span style="color:#8BE9FD;font-style:italic;">IOStream</span></span>
<span class="line"><span style="color:#F8F8F2;">{</span></span>
<span class="line"><span style="color:#FF79C6;">    private</span><span style="color:#8BE9FD;font-style:italic;"> IOStream</span><span style="color:#F8F8F2;"> _stream;</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span></span>
<span class="line"><span style="color:#FF79C6;">    public</span><span style="color:#50FA7B;"> TextStream</span><span style="color:#F8F8F2;">(</span><span style="color:#8BE9FD;font-style:italic;">IOStream</span><span style="color:#FFB86C;font-style:italic;"> stream</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">    {</span></span>
<span class="line"><span style="color:#F8F8F2;">        _stream </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> stream;</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#6272A4;">    //表现代理特征，因为我不关系具体实现，并且他是我要实现的标准</span></span>
<span class="line"><span style="color:#FF79C6;">    public</span><span style="color:#FF79C6;"> void</span><span style="color:#50FA7B;"> Write</span><span style="color:#F8F8F2;">(</span><span style="color:#FF79C6;">byte</span><span style="color:#F8F8F2;">[] </span><span style="color:#FFB86C;font-style:italic;">buffer</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">    {</span></span>
<span class="line"><span style="color:#6272A4;">        //实打实的加强了</span></span>
<span class="line"><span style="color:#F8F8F2;">        Console.</span><span style="color:#50FA7B;">WriteLine</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">要开始写入了</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">        _stream.</span><span style="color:#50FA7B;">Write</span><span style="color:#F8F8F2;">(buffer);</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#6272A4;">    //表现代理特征，因为我不关系具体实现，并且他是我要实现的标准</span></span>
<span class="line"><span style="color:#FF79C6;">    public</span><span style="color:#FF79C6;"> byte</span><span style="color:#F8F8F2;">[] </span><span style="color:#50FA7B;">ReadAll</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"><span style="color:#F8F8F2;">    {</span></span>
<span class="line"><span style="color:#6272A4;">        //必须调用目标对象的函数才算代理</span></span>
<span class="line"><span style="color:#FF79C6;">        return</span><span style="color:#F8F8F2;"> _stream.</span><span style="color:#50FA7B;">ReadAll</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#6272A4;">    //表现重写特征，因为我想自己写</span></span>
<span class="line"><span style="color:#FF79C6;">    public</span><span style="color:#FF79C6;"> void</span><span style="color:#50FA7B;"> Close</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"><span style="color:#F8F8F2;">    {</span></span>
<span class="line"><span style="color:#F8F8F2;">        Console.</span><span style="color:#50FA7B;">WriteLine</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">释放了</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#6272A4;">    //表现装饰特征，因为这是多出来的装饰，不是标准要求的，额外的</span></span>
<span class="line"><span style="color:#FF79C6;">    public</span><span style="color:#FF79C6;"> string</span><span style="color:#50FA7B;"> ReadToEnd</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"><span style="color:#F8F8F2;">    {</span></span>
<span class="line"><span style="color:#FF79C6;">        return</span><span style="color:#F8F8F2;"> Encoding.UTF8.</span><span style="color:#50FA7B;">GetString</span><span style="color:#F8F8F2;">(</span><span style="color:#50FA7B;">ReadAll</span><span style="color:#F8F8F2;">());</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#6272A4;">//测试</span></span>
<span class="line"><span style="color:#8BE9FD;font-style:italic;">IOStream</span><span style="color:#F8F8F2;"> stream1 </span><span style="color:#FF79C6;">=</span><span style="color:#FF79C6;"> new</span><span style="color:#8BE9FD;font-style:italic;"> FileStream</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#6272A4;">//当作代理来使用，此时我们只能调用到IOStream中的api</span></span>
<span class="line"><span style="color:#8BE9FD;font-style:italic;">IOStream</span><span style="color:#F8F8F2;"> streamProxy </span><span style="color:#FF79C6;">=</span><span style="color:#FF79C6;"> new</span><span style="color:#8BE9FD;font-style:italic;"> TextStream</span><span style="color:#F8F8F2;">(stream1);</span></span>
<span class="line"><span style="color:#6272A4;">//使用装饰者特征，因为现在这个流被装饰成文本了</span></span>
<span class="line"><span style="color:#8BE9FD;font-style:italic;">TextStream</span><span style="color:#F8F8F2;"> textStream </span><span style="color:#FF79C6;">=</span><span style="color:#FF79C6;"> new</span><span style="color:#8BE9FD;font-style:italic;"> TextStream</span><span style="color:#F8F8F2;">(stream1);</span></span>
<span class="line"><span style="color:#FF79C6;">var</span><span style="color:#F8F8F2;"> text </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> textStream.</span><span style="color:#50FA7B;">ReadToEnd</span><span style="color:#F8F8F2;">();</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>代理类型：一般需要接收一个目标对象（或者内部创建），不关系具体的实现逻辑，交给目标对象实现。代理类多出来的方法我们是不关系的，我们也不会去调用代理类中的函数。只要是实现标准的接口调用了目标对象的方法，我们就认为是代理，否则是重写。</p><p>装饰者模式：必须接收一个目标对象，不然装饰谁？装饰器就是为了装饰目标对象的，可以添加额外的方法用于实现装饰，而不是代理。</p><h2 id="容器实现" tabindex="-1"><a class="header-anchor" href="#容器实现"><span>容器实现</span></a></h2><p>实现容器有三个重要的对象，通过IContainerBuilder来构建Container实列。Container负责根据服务描述来找到服务实现，通过服务实现的依赖来进行注入。下面我们写一个简化版本的容器。</p><ul><li>ServiceDescriptor：负责描述服务信息</li><li>IContainerBuilder：负责构建容器</li><li>IContainer：负责根据服务描述信息解析服务</li></ul><div class="language-c# line-numbers-mode" data-highlighter="shiki" data-ext="c#" data-title="c#" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">public</span><span style="color:#FF79C6;"> class</span><span style="color:#8BE9FD;"> DbConnection</span></span>
<span class="line"><span style="color:#F8F8F2;">{</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">public</span><span style="color:#FF79C6;"> class</span><span style="color:#8BE9FD;"> DbContext</span></span>
<span class="line"><span style="color:#F8F8F2;">{</span></span>
<span class="line"><span style="color:#FF79C6;">    public</span><span style="color:#8BE9FD;font-style:italic;"> DbConnection</span><span style="color:#F8F8F2;"> Connection { </span><span style="color:#FF79C6;">get</span><span style="color:#F8F8F2;">; }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">    public</span><span style="color:#50FA7B;"> DbContext</span><span style="color:#F8F8F2;">(</span><span style="color:#8BE9FD;font-style:italic;">DbConnection</span><span style="color:#FFB86C;font-style:italic;"> connection</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">    {</span></span>
<span class="line"><span style="color:#F8F8F2;">        Connection </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> connection;</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">public</span><span style="color:#FF79C6;"> class</span><span style="color:#8BE9FD;"> ServiceDescriptor</span></span>
<span class="line"><span style="color:#F8F8F2;">{</span></span>
<span class="line"><span style="color:#FF79C6;">    public</span><span style="color:#8BE9FD;font-style:italic;"> Type</span><span style="color:#F8F8F2;"> ServiceType { </span><span style="color:#FF79C6;">get</span><span style="color:#F8F8F2;">; }</span></span>
<span class="line"><span style="color:#FF79C6;">    public</span><span style="color:#8BE9FD;font-style:italic;"> Type</span><span style="color:#F8F8F2;"> ImplementionType { </span><span style="color:#FF79C6;">get</span><span style="color:#F8F8F2;">; }</span></span>
<span class="line"><span style="color:#FF79C6;">    public</span><span style="color:#FF79C6;"> object</span><span style="color:#F8F8F2;">? Instance { </span><span style="color:#FF79C6;">get</span><span style="color:#F8F8F2;">; }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">    public</span><span style="color:#50FA7B;"> ServiceDescriptor</span><span style="color:#F8F8F2;">(</span><span style="color:#8BE9FD;font-style:italic;">Type</span><span style="color:#FFB86C;font-style:italic;"> serviceType</span><span style="color:#F8F8F2;">, </span><span style="color:#8BE9FD;font-style:italic;">Type</span><span style="color:#FFB86C;font-style:italic;"> implementionType</span><span style="color:#F8F8F2;">, </span><span style="color:#FF79C6;">object</span><span style="color:#F8F8F2;">? </span><span style="color:#FFB86C;font-style:italic;">instance</span><span style="color:#FF79C6;"> =</span><span style="color:#BD93F9;"> null</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">    {</span></span>
<span class="line"><span style="color:#F8F8F2;">        ServiceType </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> serviceType;</span></span>
<span class="line"><span style="color:#F8F8F2;">        ImplementionType </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> implementionType;</span></span>
<span class="line"><span style="color:#F8F8F2;">        Instance </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> instance;</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">public</span><span style="color:#FF79C6;"> interface</span><span style="color:#8BE9FD;font-style:italic;"> IContainer</span></span>
<span class="line"><span style="color:#F8F8F2;">{</span></span>
<span class="line"><span style="color:#FF79C6;">    object</span><span style="color:#F8F8F2;">? </span><span style="color:#50FA7B;">GetService</span><span style="color:#F8F8F2;">(</span><span style="color:#8BE9FD;font-style:italic;">Type</span><span style="color:#FFB86C;font-style:italic;"> serviceType</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">public</span><span style="color:#FF79C6;"> interface</span><span style="color:#8BE9FD;font-style:italic;"> IContainerBuilder</span></span>
<span class="line"><span style="color:#F8F8F2;">{</span></span>
<span class="line"><span style="color:#FF79C6;">    void</span><span style="color:#50FA7B;"> Add</span><span style="color:#F8F8F2;">(</span><span style="color:#8BE9FD;font-style:italic;">ServiceDescriptor</span><span style="color:#FFB86C;font-style:italic;"> descriptor</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#8BE9FD;font-style:italic;">    IContainer</span><span style="color:#50FA7B;"> Build</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">public</span><span style="color:#FF79C6;"> class</span><span style="color:#8BE9FD;"> Container</span><span style="color:#F8F8F2;"> : </span><span style="color:#8BE9FD;font-style:italic;">IContainer</span></span>
<span class="line"><span style="color:#F8F8F2;">{</span></span>
<span class="line"><span style="color:#FF79C6;">    private</span><span style="color:#8BE9FD;font-style:italic;"> IEnumerable</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#8BE9FD;font-style:italic;">ServiceDescriptor</span><span style="color:#F8F8F2;">&gt; _services;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">    public</span><span style="color:#50FA7B;"> Container</span><span style="color:#F8F8F2;">(</span><span style="color:#8BE9FD;font-style:italic;">IEnumerable</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#8BE9FD;font-style:italic;">ServiceDescriptor</span><span style="color:#F8F8F2;">&gt; </span><span style="color:#FFB86C;font-style:italic;">services</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">    {</span></span>
<span class="line"><span style="color:#F8F8F2;">        _services </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> services;</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">    public</span><span style="color:#FF79C6;"> object</span><span style="color:#F8F8F2;">? </span><span style="color:#50FA7B;">GetService</span><span style="color:#F8F8F2;">(</span><span style="color:#8BE9FD;font-style:italic;">Type</span><span style="color:#FFB86C;font-style:italic;"> serviceType</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">    {</span></span>
<span class="line"><span style="color:#FF79C6;">        var</span><span style="color:#F8F8F2;"> descriptor </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> _services</span></span>
<span class="line"><span style="color:#F8F8F2;">            .</span><span style="color:#50FA7B;">FirstOrDefault</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">a</span><span style="color:#FF79C6;"> =&gt;</span><span style="color:#F8F8F2;"> a.ServiceType </span><span style="color:#FF79C6;">==</span><span style="color:#F8F8F2;"> serviceType);</span></span>
<span class="line"><span style="color:#FF79C6;">        if</span><span style="color:#F8F8F2;"> (descriptor </span><span style="color:#FF79C6;">==</span><span style="color:#BD93F9;"> null</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">        {</span></span>
<span class="line"><span style="color:#FF79C6;">            throw</span><span style="color:#FF79C6;"> new</span><span style="color:#8BE9FD;font-style:italic;"> InvalidOperationException</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">服务未注册</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">        }</span></span>
<span class="line"><span style="color:#6272A4;">        //判断是否是委托(涉及到了协变)</span></span>
<span class="line"><span style="color:#FF79C6;">        var</span><span style="color:#F8F8F2;"> invokerType </span><span style="color:#FF79C6;">=</span><span style="color:#FF79C6;"> typeof</span><span style="color:#F8F8F2;">(</span><span style="color:#8BE9FD;font-style:italic;">Func</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#8BE9FD;font-style:italic;">IContainer</span><span style="color:#F8F8F2;">, </span><span style="color:#FF79C6;">object</span><span style="color:#F8F8F2;">&gt;);</span></span>
<span class="line"><span style="color:#FF79C6;">        if</span><span style="color:#F8F8F2;"> (descriptor.Instance </span><span style="color:#FF79C6;">!=</span><span style="color:#BD93F9;"> null</span><span style="color:#FF79C6;"> &amp;&amp;</span><span style="color:#FF79C6;"> typeof</span><span style="color:#F8F8F2;">(</span><span style="color:#8BE9FD;font-style:italic;">Func</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#8BE9FD;font-style:italic;">IContainer</span><span style="color:#F8F8F2;">, </span><span style="color:#FF79C6;">object</span><span style="color:#F8F8F2;">&gt;).</span><span style="color:#50FA7B;">IsInstanceOfType</span><span style="color:#F8F8F2;">(descriptor.Instance))</span></span>
<span class="line"><span style="color:#F8F8F2;">        {</span></span>
<span class="line"><span style="color:#FF79C6;">            var</span><span style="color:#F8F8F2;"> func </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> descriptor.Instance </span><span style="color:#FF79C6;">as</span><span style="color:#8BE9FD;font-style:italic;"> Func</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#8BE9FD;font-style:italic;">IContainer</span><span style="color:#F8F8F2;">, </span><span style="color:#FF79C6;">object</span><span style="color:#F8F8F2;">&gt; </span><span style="color:#FF79C6;">??</span><span style="color:#FF79C6;"> throw</span><span style="color:#FF79C6;"> new</span><span style="color:#8BE9FD;font-style:italic;"> ArgumentNullException</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#FF79C6;">            return</span><span style="color:#50FA7B;"> func</span><span style="color:#F8F8F2;">(</span><span style="color:#BD93F9;font-style:italic;">this</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">        }</span></span>
<span class="line"><span style="color:#FF79C6;">        var</span><span style="color:#F8F8F2;"> constructor </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> serviceType.</span><span style="color:#50FA7B;">GetConstructors</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"><span style="color:#F8F8F2;">            .</span><span style="color:#50FA7B;">OrderByDescending</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">a</span><span style="color:#FF79C6;"> =&gt;</span><span style="color:#F8F8F2;"> a.</span><span style="color:#50FA7B;">GetParameters</span><span style="color:#F8F8F2;">().Length)</span></span>
<span class="line"><span style="color:#F8F8F2;">            .</span><span style="color:#50FA7B;">FirstOrDefault</span><span style="color:#F8F8F2;">() </span><span style="color:#FF79C6;">??</span><span style="color:#FF79C6;"> throw</span><span style="color:#FF79C6;"> new</span><span style="color:#8BE9FD;font-style:italic;"> ArgumentNullException</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#6272A4;">        //递归解析依赖</span></span>
<span class="line"><span style="color:#FF79C6;">        var</span><span style="color:#F8F8F2;"> parameters </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> constructor.</span><span style="color:#50FA7B;">GetParameters</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"><span style="color:#6272A4;">            //递归</span></span>
<span class="line"><span style="color:#F8F8F2;">            .</span><span style="color:#50FA7B;">Select</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">s</span><span style="color:#FF79C6;"> =&gt;</span><span style="color:#50FA7B;"> GetService</span><span style="color:#F8F8F2;">(s.ParameterType));</span></span>
<span class="line"><span style="color:#6272A4;">        //反射</span></span>
<span class="line"><span style="color:#FF79C6;">        return</span><span style="color:#F8F8F2;"> Activator.</span><span style="color:#50FA7B;">CreateInstance</span><span style="color:#F8F8F2;">(descriptor.ImplementionType, parameters.</span><span style="color:#50FA7B;">ToArray</span><span style="color:#F8F8F2;">());</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">public</span><span style="color:#FF79C6;"> class</span><span style="color:#8BE9FD;"> ContainerBuilder</span><span style="color:#F8F8F2;"> : </span><span style="color:#8BE9FD;font-style:italic;">IContainerBuilder</span></span>
<span class="line"><span style="color:#F8F8F2;">{</span></span>
<span class="line"><span style="color:#FF79C6;">    private</span><span style="color:#8BE9FD;font-style:italic;"> List</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#8BE9FD;font-style:italic;">ServiceDescriptor</span><span style="color:#F8F8F2;">&gt; _services </span><span style="color:#FF79C6;">=</span><span style="color:#FF79C6;"> new</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">    public</span><span style="color:#FF79C6;"> void</span><span style="color:#50FA7B;"> Add</span><span style="color:#F8F8F2;">(</span><span style="color:#8BE9FD;font-style:italic;">ServiceDescriptor</span><span style="color:#FFB86C;font-style:italic;"> descriptor</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">    {</span></span>
<span class="line"><span style="color:#F8F8F2;">        _services.</span><span style="color:#50FA7B;">Add</span><span style="color:#F8F8F2;">(descriptor);</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">    public</span><span style="color:#8BE9FD;font-style:italic;"> IContainer</span><span style="color:#50FA7B;"> Build</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"><span style="color:#F8F8F2;">    {</span></span>
<span class="line"><span style="color:#FF79C6;">        return</span><span style="color:#FF79C6;"> new</span><span style="color:#8BE9FD;font-style:italic;"> Container</span><span style="color:#F8F8F2;">(_services);</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">public</span><span style="color:#FF79C6;"> static</span><span style="color:#FF79C6;"> class</span><span style="color:#8BE9FD;"> IContainerBuilderExtensions</span></span>
<span class="line"><span style="color:#F8F8F2;">{</span></span>
<span class="line"><span style="color:#FF79C6;">    public</span><span style="color:#FF79C6;"> static</span><span style="color:#FF79C6;"> void</span><span style="color:#50FA7B;"> Add</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#FFB86C;font-style:italic;">TService</span><span style="color:#F8F8F2;">&gt;(</span><span style="color:#FF79C6;">this</span><span style="color:#8BE9FD;font-style:italic;"> IContainerBuilder</span><span style="color:#FFB86C;font-style:italic;"> builder</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#FF79C6;">        where</span><span style="color:#FFB86C;font-style:italic;"> TService</span><span style="color:#F8F8F2;"> : </span><span style="color:#FF79C6;">class</span></span>
<span class="line"><span style="color:#F8F8F2;">    {</span></span>
<span class="line"><span style="color:#F8F8F2;">        builder.</span><span style="color:#50FA7B;">Add</span><span style="color:#F8F8F2;">(</span><span style="color:#FF79C6;">new</span><span style="color:#8BE9FD;font-style:italic;"> ServiceDescriptor</span><span style="color:#F8F8F2;">(</span><span style="color:#FF79C6;">typeof</span><span style="color:#F8F8F2;">(</span><span style="color:#8BE9FD;font-style:italic;">TService</span><span style="color:#F8F8F2;">), </span><span style="color:#FF79C6;">typeof</span><span style="color:#F8F8F2;">(</span><span style="color:#8BE9FD;font-style:italic;">TService</span><span style="color:#F8F8F2;">)));</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span></span>
<span class="line"><span style="color:#FF79C6;">    public</span><span style="color:#FF79C6;"> static</span><span style="color:#FF79C6;"> void</span><span style="color:#50FA7B;"> Add</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#FFB86C;font-style:italic;">TService</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">TImplement</span><span style="color:#F8F8F2;">&gt;(</span><span style="color:#FF79C6;">this</span><span style="color:#8BE9FD;font-style:italic;"> IContainerBuilder</span><span style="color:#FFB86C;font-style:italic;"> builder</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">    {</span></span>
<span class="line"><span style="color:#F8F8F2;">        builder.</span><span style="color:#50FA7B;">Add</span><span style="color:#F8F8F2;">(</span><span style="color:#FF79C6;">new</span><span style="color:#8BE9FD;font-style:italic;"> ServiceDescriptor</span><span style="color:#F8F8F2;">(</span><span style="color:#FF79C6;">typeof</span><span style="color:#F8F8F2;">(</span><span style="color:#8BE9FD;font-style:italic;">TService</span><span style="color:#F8F8F2;">), </span><span style="color:#FF79C6;">typeof</span><span style="color:#F8F8F2;">(</span><span style="color:#8BE9FD;font-style:italic;">TImplement</span><span style="color:#F8F8F2;">)));</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">    public</span><span style="color:#FF79C6;"> static</span><span style="color:#FF79C6;"> void</span><span style="color:#50FA7B;"> Add</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#FFB86C;font-style:italic;">TService</span><span style="color:#F8F8F2;">&gt;(</span><span style="color:#FF79C6;">this</span><span style="color:#8BE9FD;font-style:italic;"> IContainerBuilder</span><span style="color:#FFB86C;font-style:italic;"> builder</span><span style="color:#F8F8F2;">, </span><span style="color:#8BE9FD;font-style:italic;">Func</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#8BE9FD;font-style:italic;">IContainer</span><span style="color:#F8F8F2;">, </span><span style="color:#8BE9FD;font-style:italic;">TService</span><span style="color:#F8F8F2;">&gt; </span><span style="color:#FFB86C;font-style:italic;">func</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">    {</span></span>
<span class="line"><span style="color:#F8F8F2;">        builder.</span><span style="color:#50FA7B;">Add</span><span style="color:#F8F8F2;">(</span><span style="color:#FF79C6;">new</span><span style="color:#8BE9FD;font-style:italic;"> ServiceDescriptor</span><span style="color:#F8F8F2;">(</span><span style="color:#FF79C6;">typeof</span><span style="color:#F8F8F2;">(</span><span style="color:#8BE9FD;font-style:italic;">TService</span><span style="color:#F8F8F2;">), </span><span style="color:#FF79C6;">typeof</span><span style="color:#F8F8F2;">(</span><span style="color:#8BE9FD;font-style:italic;">Action</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#8BE9FD;font-style:italic;">IContainer</span><span style="color:#F8F8F2;">, </span><span style="color:#8BE9FD;font-style:italic;">TService</span><span style="color:#F8F8F2;">&gt;), func));</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#6272A4;">//测试</span></span>
<span class="line"><span style="color:#8BE9FD;font-style:italic;">IContainerBuilder</span><span style="color:#F8F8F2;"> builder </span><span style="color:#FF79C6;">=</span><span style="color:#FF79C6;"> new</span><span style="color:#8BE9FD;font-style:italic;"> ContainerBuilder</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#F8F8F2;">builder.</span><span style="color:#50FA7B;">Add</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">c</span><span style="color:#FF79C6;"> =&gt;</span><span style="color:#FF79C6;"> new</span><span style="color:#8BE9FD;font-style:italic;"> DbConnection</span><span style="color:#F8F8F2;">());</span></span>
<span class="line"><span style="color:#F8F8F2;">builder.</span><span style="color:#50FA7B;">Add</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#8BE9FD;font-style:italic;">DbContext</span><span style="color:#F8F8F2;">&gt;();</span></span>
<span class="line"><span style="color:#FF79C6;">var</span><span style="color:#F8F8F2;"> container </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> builder.</span><span style="color:#50FA7B;">Build</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#FF79C6;">var</span><span style="color:#F8F8F2;"> context </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> container.</span><span style="color:#50FA7B;">GetService</span><span style="color:#F8F8F2;">(</span><span style="color:#FF79C6;">typeof</span><span style="color:#F8F8F2;">(</span><span style="color:#8BE9FD;font-style:italic;">DbContext</span><span style="color:#F8F8F2;">));</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="逆变协变" tabindex="-1"><a class="header-anchor" href="#逆变协变"><span>逆变协变</span></a></h2><h3 id="协变" tabindex="-1"><a class="header-anchor" href="#协变"><span>协变</span></a></h3><ul><li>我们说泛型是不完整的，当指定泛型参数时，才使得其完整。</li><li>在接口或者委托上，在泛型参数上使用out关键字，使得完整泛型，完整的泛型满足泛型参数的多态</li></ul><div class="language-c# line-numbers-mode" data-highlighter="shiki" data-ext="c#" data-title="c#" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">public</span><span style="color:#FF79C6;"> interface</span><span style="color:#8BE9FD;font-style:italic;"> IEnumerable</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#FF79C6;">out</span><span style="color:#FFB86C;font-style:italic;"> T</span><span style="color:#F8F8F2;">&gt; : </span><span style="color:#8BE9FD;font-style:italic;">IEnumerable</span></span>
<span class="line"><span style="color:#F8F8F2;">{    </span></span>
<span class="line"><span style="color:#8BE9FD;font-style:italic;">    IEnumerator</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#8BE9FD;font-style:italic;">T</span><span style="color:#F8F8F2;">&gt; </span><span style="color:#50FA7B;">GetEnumerator</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c# line-numbers-mode" data-highlighter="shiki" data-ext="c#" data-title="c#" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#6272A4;">//语法应用</span></span>
<span class="line"><span style="color:#6272A4;">//因为string继承自object，IEnumerable泛型参数支持协变，因此IEnumerable&lt;string&gt;也继承自IEnumerable&lt;object&gt;</span></span>
<span class="line"><span style="color:#8BE9FD;font-style:italic;">IEnumerable</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#FF79C6;">string</span><span style="color:#F8F8F2;">&gt; list </span><span style="color:#FF79C6;">=</span><span style="color:#FF79C6;"> new</span><span style="color:#8BE9FD;font-style:italic;"> List</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#FF79C6;">string</span><span style="color:#F8F8F2;">&gt;();</span></span>
<span class="line"><span style="color:#8BE9FD;font-style:italic;">IEnumerable</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#FF79C6;">object</span><span style="color:#F8F8F2;">&gt; obj </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> list;</span></span>
<span class="line"><span style="color:#6272A4;">//反射应用</span></span>
<span class="line"><span style="color:#6272A4;">//判断typeof(IEnumerable&lt;object&gt;的引用是否可以指向typeof(IEnumerable&lt;string&gt;的实列</span></span>
<span class="line"><span style="color:#FF79C6;">var</span><span style="color:#F8F8F2;"> flag </span><span style="color:#FF79C6;">=</span><span style="color:#FF79C6;"> typeof</span><span style="color:#F8F8F2;">(</span><span style="color:#8BE9FD;font-style:italic;">IEnumerable</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#FF79C6;">object</span><span style="color:#F8F8F2;">&gt;).</span><span style="color:#50FA7B;">IsAssignableFrom</span><span style="color:#F8F8F2;">(</span><span style="color:#FF79C6;">typeof</span><span style="color:#F8F8F2;">(</span><span style="color:#8BE9FD;font-style:italic;">IEnumerable</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#FF79C6;">string</span><span style="color:#F8F8F2;">&gt;));</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c# line-numbers-mode" data-highlighter="shiki" data-ext="c#" data-title="c#" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">public</span><span style="color:#FF79C6;"> delegate</span><span style="color:#8BE9FD;font-style:italic;"> TResult</span><span style="color:#8BE9FD;font-style:italic;"> Func</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#FF79C6;">out</span><span style="color:#FFB86C;font-style:italic;"> TResult</span><span style="color:#F8F8F2;">&gt;();</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><div class="language-c# line-numbers-mode" data-highlighter="shiki" data-ext="c#" data-title="c#" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#6272A4;">//语法应用</span></span>
<span class="line"><span style="color:#8BE9FD;font-style:italic;">Func</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#FF79C6;">string</span><span style="color:#F8F8F2;">&gt; func1 </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> () </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#E9F284;"> &quot;</span><span style="color:#F1FA8C;">ff</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#8BE9FD;font-style:italic;">Func</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#FF79C6;">object</span><span style="color:#F8F8F2;">&gt; func2 </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> func1;</span></span>
<span class="line"><span style="color:#6272A4;">//反射应用</span></span>
<span class="line"><span style="color:#6272A4;">//判断Func&lt;object&gt;的引用是否可以指向Func&lt;string&gt;的实列</span></span>
<span class="line"><span style="color:#FF79C6;">var</span><span style="color:#F8F8F2;"> flag </span><span style="color:#FF79C6;">=</span><span style="color:#FF79C6;"> typeof</span><span style="color:#F8F8F2;">(</span><span style="color:#8BE9FD;font-style:italic;">Func</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#FF79C6;">object</span><span style="color:#F8F8F2;">&gt;).</span><span style="color:#50FA7B;">IsAssignableFrom</span><span style="color:#F8F8F2;">(</span><span style="color:#FF79C6;">typeof</span><span style="color:#F8F8F2;">(</span><span style="color:#8BE9FD;font-style:italic;">Func</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#FF79C6;">string</span><span style="color:#F8F8F2;">&gt;));</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="逆变" tabindex="-1"><a class="header-anchor" href="#逆变"><span>逆变</span></a></h3><p>和协变相反，有点叛逆，目前不知道具体应用场景</p><h2 id="autofac" tabindex="-1"><a class="header-anchor" href="#autofac"><span>Autofac</span></a></h2><p>需要安装Autofac.Extensions.DependencyInjection，是Autofac来集成微软IOC，不是微软去集成它</p><div class="language-c# line-numbers-mode" data-highlighter="shiki" data-ext="c#" data-title="c#" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">var</span><span style="color:#F8F8F2;"> services </span><span style="color:#FF79C6;">=</span><span style="color:#FF79C6;"> new</span><span style="color:#8BE9FD;font-style:italic;"> ServiceCollection</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#6272A4;">//微软的容器注册服务</span></span>
<span class="line"><span style="color:#F8F8F2;">services.</span><span style="color:#50FA7B;">AddScoped</span><span style="color:#F8F8F2;">(</span><span style="color:#FF79C6;">typeof</span><span style="color:#F8F8F2;">(</span><span style="color:#8BE9FD;font-style:italic;">ILogger</span><span style="color:#F8F8F2;">&lt;&gt;),</span><span style="color:#FF79C6;">typeof</span><span style="color:#F8F8F2;">(</span><span style="color:#8BE9FD;font-style:italic;">Logger</span><span style="color:#F8F8F2;">&lt;&gt;));</span></span>
<span class="line"><span style="color:#FF79C6;">var</span><span style="color:#F8F8F2;"> builder </span><span style="color:#FF79C6;">=</span><span style="color:#FF79C6;"> new</span><span style="color:#8BE9FD;font-style:italic;"> ContainerBuilder</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#6272A4;">//autofac容器注册服务</span></span>
<span class="line"><span style="color:#F8F8F2;">builder.</span><span style="color:#50FA7B;">RegisterType</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#8BE9FD;font-style:italic;">CService</span><span style="color:#F8F8F2;">&gt;().</span><span style="color:#50FA7B;">PropertiesAutowired</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"><span style="color:#F8F8F2;">	.</span><span style="color:#50FA7B;">As</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#8BE9FD;font-style:italic;">CService</span><span style="color:#F8F8F2;">&gt;()</span></span>
<span class="line"><span style="color:#F8F8F2;">.</span><span style="color:#50FA7B;">InstancePerLifetimeScope</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#6272A4;">//将IServiceCollection中的服务注册到autofac</span></span>
<span class="line"><span style="color:#F8F8F2;">builder.</span><span style="color:#50FA7B;">Populate</span><span style="color:#F8F8F2;">(services);</span></span>
<span class="line"><span style="color:#6272A4;">//使用AutofacServiceProvider的实现方案，创建容器</span></span>
<span class="line"><span style="color:#6272A4;">//加载autofac中的服务</span></span>
<span class="line"><span style="color:#8BE9FD;font-style:italic;">IServiceProvider</span><span style="color:#F8F8F2;"> container </span><span style="color:#FF79C6;">=</span><span style="color:#FF79C6;"> new</span><span style="color:#8BE9FD;font-style:italic;"> AutofacServiceProvider</span><span style="color:#F8F8F2;">(builder.</span><span style="color:#50FA7B;">Build</span><span style="color:#F8F8F2;">());</span></span>
<span class="line"><span style="color:#FF79C6;">var</span><span style="color:#F8F8F2;"> logger </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> container.</span><span style="color:#50FA7B;">GetRequiredService</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#8BE9FD;font-style:italic;">ILogger</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#8BE9FD;font-style:italic;">Program</span><span style="color:#F8F8F2;">&gt;&gt;();</span></span>
<span class="line"><span style="color:#FF79C6;">var</span><span style="color:#F8F8F2;"> service </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> container.</span><span style="color:#50FA7B;">GetRequiredService</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#8BE9FD;font-style:italic;">CService</span><span style="color:#F8F8F2;">&gt;();</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="参考" tabindex="-1"><a class="header-anchor" href="#参考"><span>参考</span></a></h1><p>https://www.bilibili.com/video/BV1W14y1c7yt https://zhuanlan.zhihu.com/p/91218464</p>`,84)]))}const i=n(p,[["render",o],["__file","ioc.html.vue"]]),t=JSON.parse('{"path":"/dotnet/ioc.html","title":"IOC和DI","lang":"en-US","frontmatter":{"title":"IOC和DI","date":"2025-01-30T00:00:00.000Z","category":["DotNet"],"description":"IOC IoC，意为控制反转，英文（Inversion of Control），它不是一种技术，而是一种设计思想，一个重要的面向对象编程的法则。IoC意味着将你设计好的对象交给容器控制，而不是传统的在你的对象内部直接控制。 控制 传统程序当中，我们定义的一个A类，需要另一个B类时，直接就在A类的内部通过new进行创建依赖的b对象了，是我们的程序主动去创...","head":[["meta",{"property":"og:url","content":"https://luxiag.github.io/luxiag/blog/dotnet/ioc.html"}],["meta",{"property":"og:title","content":"IOC和DI"}],["meta",{"property":"og:description","content":"IOC IoC，意为控制反转，英文（Inversion of Control），它不是一种技术，而是一种设计思想，一个重要的面向对象编程的法则。IoC意味着将你设计好的对象交给容器控制，而不是传统的在你的对象内部直接控制。 控制 传统程序当中，我们定义的一个A类，需要另一个B类时，直接就在A类的内部通过new进行创建依赖的b对象了，是我们的程序主动去创..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2025-02-01T04:07:09.000Z"}],["meta",{"property":"article:published_time","content":"2025-01-30T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-02-01T04:07:09.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"IOC和DI\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2025-01-30T00:00:00.000Z\\",\\"dateModified\\":\\"2025-02-01T04:07:09.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"luxiag\\",\\"url\\":\\"https://luxiag.github.io/luxiag\\"}]}"]]},"git":{"createdTime":1738382829000,"updatedTime":1738382829000,"contributors":[{"name":"luxiag","username":"luxiag","email":"luxiag@qq.com","commits":1,"url":"https://github.com/luxiag"}]},"readingTime":{"minutes":18.03,"words":5410},"filePathRelative":"dotnet/ioc.md","localizedDate":"January 30, 2025","excerpt":"\\n<p>IoC，意为控制反转，英文（Inversion of Control），它不是一种技术，而是一种设计思想，一个重要的面向对象编程的法则。IoC意味着将你设计好的对象交给容器控制，而不是传统的在你的对象内部直接控制。</p>","autoDesc":true}');export{i as comp,t as data};
