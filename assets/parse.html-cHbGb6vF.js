import{_ as n,c as a,a as l,o as e}from"./app-8EmQY2oD.js";const p="/blog/assets/1680123400810165446-BowZKtyj.png",o="/blog/assets/1680123400713173220-JAABIXqO.png",F="/blog/assets/1680123400728101022-DK_HekPn.png",t="/blog/assets/1680123400714155754-BwEEJ9b9.png",c="/blog/assets/1680123400715085332-BV_vpXwi.png",i="/blog/assets/1680123400719161947-BCt6Aq9f.png",r="/blog/assets/1680123400809154438-GoS9ncp1.png",y={};function d(v,s){return e(),a("div",null,s[0]||(s[0]=[l('<h2 id="前言" tabindex="-1"><a class="header-anchor" href="#前言"><span>前言</span></a></h2><figure><img src="'+p+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>vue 基于源码构建的有两个版本，一个是 runtime only(一个只包含运行时的版本)，另一个是 runtime + compiler(一个同时包含编译器和运行时的完整版本)。而两个版本的区别仅在于后者包含了一个编译器。</p><h3 id="完整版本" tabindex="-1"><a class="header-anchor" href="#完整版本"><span>完整版本</span></a></h3><ul><li>完整版本</li></ul><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;font-weight:bold;">new</span><span style="color:#50FA7B;"> Vue</span><span style="color:#F8F8F2;">({</span></span>
<span class="line"><span style="color:#F8F8F2;">  template</span><span style="color:#FF79C6;">:</span><span style="color:#E9F284;"> &quot;</span><span style="color:#F1FA8C;">&lt;div&gt;&lt;/div&gt;</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">});</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>源码中，是先定义只包含运行时版本的$mount方法，再定义完整版本的$mount 方法 <code>plantforms/web/runtime-with-compiler</code></p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> mount </span><span style="color:#FF79C6;">=</span><span style="color:#8BE9FD;font-style:italic;"> Vue</span><span style="color:#F8F8F2;">.prototype.$mount;</span></span>
<span class="line"><span style="color:#8BE9FD;font-style:italic;">Vue</span><span style="color:#F8F8F2;">.prototype.</span><span style="color:#50FA7B;">$mount</span><span style="color:#FF79C6;"> =</span><span style="color:#FF79C6;"> function</span><span style="color:#F8F8F2;"> (</span></span>
<span class="line"><span style="color:#FFB86C;font-style:italic;">  el</span><span style="color:#FF79C6;">?:</span><span style="color:#8BE9FD;font-style:italic;"> string</span><span style="color:#FF79C6;"> |</span><span style="color:#8BE9FD;font-style:italic;"> Element</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#FFB86C;font-style:italic;">  hydrating</span><span style="color:#FF79C6;">?:</span><span style="color:#8BE9FD;font-style:italic;"> boolean</span></span>
<span class="line"><span style="color:#F8F8F2;">)</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> Component</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  el </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> el </span><span style="color:#FF79C6;">&amp;&amp;</span><span style="color:#50FA7B;"> query</span><span style="color:#F8F8F2;">(el);</span></span>
<span class="line"><span style="color:#6272A4;">  /* istanbul ignore if */</span></span>
<span class="line"><span style="color:#FF79C6;">  if</span><span style="color:#F8F8F2;"> (el </span><span style="color:#FF79C6;">===</span><span style="color:#F8F8F2;"> document.body </span><span style="color:#FF79C6;">||</span><span style="color:#F8F8F2;"> el </span><span style="color:#FF79C6;">===</span><span style="color:#F8F8F2;"> document.documentElement) {</span></span>
<span class="line"><span style="color:#FF79C6;">    return</span><span style="color:#BD93F9;font-style:italic;"> this</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">  const</span><span style="color:#F8F8F2;"> options </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;font-style:italic;"> this</span><span style="color:#F8F8F2;">.$options;</span></span>
<span class="line"><span style="color:#6272A4;">  // resolve template/el and convert to render function</span></span>
<span class="line"><span style="color:#FF79C6;">  if</span><span style="color:#F8F8F2;"> (</span><span style="color:#FF79C6;">!</span><span style="color:#F8F8F2;">options.render) {</span></span>
<span class="line"><span style="color:#FF79C6;">    let</span><span style="color:#F8F8F2;"> template </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> options.template;</span></span>
<span class="line"><span style="color:#FF79C6;">    if</span><span style="color:#F8F8F2;"> (template) {</span></span>
<span class="line"><span style="color:#FF79C6;">      if</span><span style="color:#F8F8F2;"> (</span><span style="color:#FF79C6;">typeof</span><span style="color:#F8F8F2;"> template </span><span style="color:#FF79C6;">===</span><span style="color:#E9F284;"> &quot;</span><span style="color:#F1FA8C;">string</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#FF79C6;">        if</span><span style="color:#F8F8F2;"> (template.</span><span style="color:#50FA7B;">charAt</span><span style="color:#F8F8F2;">(</span><span style="color:#BD93F9;">0</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">===</span><span style="color:#E9F284;"> &quot;</span><span style="color:#F1FA8C;">#</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">          template </span><span style="color:#FF79C6;">=</span><span style="color:#50FA7B;"> idToTemplate</span><span style="color:#F8F8F2;">(template);</span></span>
<span class="line"><span style="color:#6272A4;">          /* istanbul ignore if */</span></span>
<span class="line"><span style="color:#F8F8F2;">        }</span></span>
<span class="line"><span style="color:#F8F8F2;">      } </span><span style="color:#FF79C6;">else</span><span style="color:#FF79C6;"> if</span><span style="color:#F8F8F2;"> (template.nodeType) {</span></span>
<span class="line"><span style="color:#F8F8F2;">        template </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> template.innerHTML;</span></span>
<span class="line"><span style="color:#F8F8F2;">      } </span><span style="color:#FF79C6;">else</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#FF79C6;">        return</span><span style="color:#BD93F9;font-style:italic;"> this</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">      }</span></span>
<span class="line"><span style="color:#F8F8F2;">    } </span><span style="color:#FF79C6;">else</span><span style="color:#FF79C6;"> if</span><span style="color:#F8F8F2;"> (el) {</span></span>
<span class="line"><span style="color:#6272A4;">      // @ts-expect-error</span></span>
<span class="line"><span style="color:#F8F8F2;">      template </span><span style="color:#FF79C6;">=</span><span style="color:#50FA7B;"> getOuterHTML</span><span style="color:#F8F8F2;">(el);</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#FF79C6;">    if</span><span style="color:#F8F8F2;"> (template) {</span></span>
<span class="line"><span style="color:#6272A4;">      /* istanbul ignore if */</span></span>
<span class="line"><span style="color:#FF79C6;">      const</span><span style="color:#F8F8F2;"> { render, staticRenderFns } </span><span style="color:#FF79C6;">=</span><span style="color:#50FA7B;"> compileToFunctions</span><span style="color:#F8F8F2;">(</span></span>
<span class="line"><span style="color:#F8F8F2;">        template,</span></span>
<span class="line"><span style="color:#F8F8F2;">        {</span></span>
<span class="line"><span style="color:#F8F8F2;">          outputSourceRange</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> __DEV__,</span></span>
<span class="line"><span style="color:#F8F8F2;">          shouldDecodeNewlines,</span></span>
<span class="line"><span style="color:#F8F8F2;">          shouldDecodeNewlinesForHref,</span></span>
<span class="line"><span style="color:#F8F8F2;">          delimiters</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> options.delimiters,</span></span>
<span class="line"><span style="color:#F8F8F2;">          comments</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> options.comments,</span></span>
<span class="line"><span style="color:#F8F8F2;">        },</span></span>
<span class="line"><span style="color:#BD93F9;font-style:italic;">        this</span></span>
<span class="line"><span style="color:#F8F8F2;">      );</span></span>
<span class="line"><span style="color:#F8F8F2;">      options.render </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> render;</span></span>
<span class="line"><span style="color:#F8F8F2;">      options.staticRenderFns </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> staticRenderFns;</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#FF79C6;">  return</span><span style="color:#F8F8F2;"> mount.</span><span style="color:#50FA7B;">call</span><span style="color:#F8F8F2;">(</span><span style="color:#BD93F9;font-style:italic;">this</span><span style="color:#F8F8F2;">, el, hydrating);</span></span>
<span class="line"><span style="color:#F8F8F2;">};</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="运行时" tabindex="-1"><a class="header-anchor" href="#运行时"><span>运行时</span></a></h3><ul><li>只包含运行时版本</li></ul><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">import</span><span style="color:#F8F8F2;"> App </span><span style="color:#FF79C6;">from</span><span style="color:#E9F284;"> &quot;</span><span style="color:#F1FA8C;">./App.vue</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#FF79C6;font-weight:bold;">new</span><span style="color:#50FA7B;"> Vue</span><span style="color:#F8F8F2;">({</span></span>
<span class="line"><span style="color:#50FA7B;">  render</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">h</span><span style="color:#F8F8F2;">) {},</span></span>
<span class="line"><span style="color:#F8F8F2;">});</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>完整版和只包含运行时版之间的差异主要在于是否有模板编译阶段</strong><code>运行时</code></p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#8BE9FD;font-style:italic;">Vue</span><span style="color:#F8F8F2;">.prototype.</span><span style="color:#50FA7B;">$mount</span><span style="color:#FF79C6;"> =</span><span style="color:#FF79C6;"> function</span><span style="color:#F8F8F2;"> (</span></span>
<span class="line"><span style="color:#FFB86C;font-style:italic;">  el</span><span style="color:#FF79C6;">?:</span><span style="color:#8BE9FD;font-style:italic;"> string</span><span style="color:#FF79C6;"> |</span><span style="color:#8BE9FD;font-style:italic;"> Element</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#FFB86C;font-style:italic;">  hydrating</span><span style="color:#FF79C6;">?:</span><span style="color:#8BE9FD;font-style:italic;"> boolean</span></span>
<span class="line"><span style="color:#F8F8F2;">)</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> Component</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  el </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> el </span><span style="color:#FF79C6;">&amp;&amp;</span><span style="color:#F8F8F2;"> inBrowser </span><span style="color:#FF79C6;">?</span><span style="color:#50FA7B;"> query</span><span style="color:#F8F8F2;">(el) </span><span style="color:#FF79C6;">:</span><span style="color:#BD93F9;"> undefined</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#FF79C6;">  return</span><span style="color:#50FA7B;"> mountComponent</span><span style="color:#F8F8F2;">(</span><span style="color:#BD93F9;font-style:italic;">this</span><span style="color:#F8F8F2;">, el, hydrating);</span></span>
<span class="line"><span style="color:#F8F8F2;">};</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="流程" tabindex="-1"><a class="header-anchor" href="#流程"><span>流程</span></a></h2><p><img src="`+o+'" alt="" loading="lazy"><img src="'+F+'" alt="" loading="lazy"></p><ul><li>模板解析阶段：将一堆模板字符串用正则等方式解析成抽象语法树 AST；</li><li>优化阶段：遍历 AST，找出其中的静态节点，并打上标记；</li><li>代码生成阶段：将 AST 转换成渲染函数；</li></ul><p>template -&gt; compileToFunctions() -&gt;</p><p><code>template</code></p><figure><img src="'+t+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><code>src/platforms/web</code></p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> mount </span><span style="color:#FF79C6;">=</span><span style="color:#8BE9FD;font-style:italic;"> Vue</span><span style="color:#F8F8F2;">.prototype.$mount;</span></span>
<span class="line"><span style="color:#8BE9FD;font-style:italic;">Vue</span><span style="color:#F8F8F2;">.prototype.</span><span style="color:#50FA7B;">$mount</span><span style="color:#FF79C6;"> =</span><span style="color:#FF79C6;"> function</span><span style="color:#F8F8F2;"> (</span></span>
<span class="line"><span style="color:#FFB86C;font-style:italic;">  el</span><span style="color:#FF79C6;">?:</span><span style="color:#8BE9FD;font-style:italic;"> string</span><span style="color:#FF79C6;"> |</span><span style="color:#8BE9FD;font-style:italic;"> Element</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#FFB86C;font-style:italic;">  hydrating</span><span style="color:#FF79C6;">?:</span><span style="color:#8BE9FD;font-style:italic;"> boolean</span></span>
<span class="line"><span style="color:#F8F8F2;">)</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> Component</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  el </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> el </span><span style="color:#FF79C6;">&amp;&amp;</span><span style="color:#50FA7B;"> query</span><span style="color:#F8F8F2;">(el);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">  /* istanbul ignore if */</span></span>
<span class="line"><span style="color:#FF79C6;">  if</span><span style="color:#F8F8F2;"> (el </span><span style="color:#FF79C6;">===</span><span style="color:#F8F8F2;"> document.body </span><span style="color:#FF79C6;">||</span><span style="color:#F8F8F2;"> el </span><span style="color:#FF79C6;">===</span><span style="color:#F8F8F2;"> document.documentElement) {</span></span>
<span class="line"><span style="color:#FF79C6;">    return</span><span style="color:#BD93F9;font-style:italic;"> this</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">  const</span><span style="color:#F8F8F2;"> options </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;font-style:italic;"> this</span><span style="color:#F8F8F2;">.$options;</span></span>
<span class="line"><span style="color:#6272A4;">  // resolve template/el and convert to render function</span></span>
<span class="line"><span style="color:#FF79C6;">  if</span><span style="color:#F8F8F2;"> (</span><span style="color:#FF79C6;">!</span><span style="color:#F8F8F2;">options.render) {</span></span>
<span class="line"><span style="color:#FF79C6;">    let</span><span style="color:#F8F8F2;"> template </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> options.template;</span></span>
<span class="line"><span style="color:#6272A4;">    // #id 或者是一个 DOM 元素</span></span>
<span class="line"><span style="color:#6272A4;">    // 转成一个字符串模板</span></span>
<span class="line"><span style="color:#FF79C6;">    if</span><span style="color:#F8F8F2;"> (template) {</span></span>
<span class="line"><span style="color:#FF79C6;">      if</span><span style="color:#F8F8F2;"> (</span><span style="color:#FF79C6;">typeof</span><span style="color:#F8F8F2;"> template </span><span style="color:#FF79C6;">===</span><span style="color:#E9F284;"> &quot;</span><span style="color:#F1FA8C;">string</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#FF79C6;">        if</span><span style="color:#F8F8F2;"> (template.</span><span style="color:#50FA7B;">charAt</span><span style="color:#F8F8F2;">(</span><span style="color:#BD93F9;">0</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">===</span><span style="color:#E9F284;"> &quot;</span><span style="color:#F1FA8C;">#</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">          template </span><span style="color:#FF79C6;">=</span><span style="color:#50FA7B;"> idToTemplate</span><span style="color:#F8F8F2;">(template);</span></span>
<span class="line"><span style="color:#F8F8F2;">        }</span></span>
<span class="line"><span style="color:#F8F8F2;">      } </span><span style="color:#FF79C6;">else</span><span style="color:#FF79C6;"> if</span><span style="color:#F8F8F2;"> (template.nodeType) {</span></span>
<span class="line"><span style="color:#F8F8F2;">        template </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> template.innerHTML;</span></span>
<span class="line"><span style="color:#F8F8F2;">      } </span><span style="color:#FF79C6;">else</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#FF79C6;">        return</span><span style="color:#BD93F9;font-style:italic;"> this</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">      }</span></span>
<span class="line"><span style="color:#F8F8F2;">    } </span><span style="color:#FF79C6;">else</span><span style="color:#FF79C6;"> if</span><span style="color:#F8F8F2;"> (el) {</span></span>
<span class="line"><span style="color:#6272A4;">      // @ts-expect-error</span></span>
<span class="line"><span style="color:#F8F8F2;">      template </span><span style="color:#FF79C6;">=</span><span style="color:#50FA7B;"> getOuterHTML</span><span style="color:#F8F8F2;">(el);</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">    if</span><span style="color:#F8F8F2;"> (template) {</span></span>
<span class="line"><span style="color:#FF79C6;">      const</span><span style="color:#F8F8F2;"> { render, staticRenderFns } </span><span style="color:#FF79C6;">=</span><span style="color:#50FA7B;"> compileToFunctions</span><span style="color:#F8F8F2;">(</span></span>
<span class="line"><span style="color:#F8F8F2;">        template,</span></span>
<span class="line"><span style="color:#F8F8F2;">        {</span></span>
<span class="line"><span style="color:#F8F8F2;">          outputSourceRange</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> __DEV__,</span></span>
<span class="line"><span style="color:#F8F8F2;">          shouldDecodeNewlines,</span></span>
<span class="line"><span style="color:#F8F8F2;">          shouldDecodeNewlinesForHref,</span></span>
<span class="line"><span style="color:#F8F8F2;">          delimiters</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> options.delimiters,</span></span>
<span class="line"><span style="color:#F8F8F2;">          comments</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> options.comments,</span></span>
<span class="line"><span style="color:#F8F8F2;">        },</span></span>
<span class="line"><span style="color:#BD93F9;font-style:italic;">        this</span></span>
<span class="line"><span style="color:#F8F8F2;">      );</span></span>
<span class="line"><span style="color:#F8F8F2;">      options.render </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> render;</span></span>
<span class="line"><span style="color:#F8F8F2;">      options.staticRenderFns </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> staticRenderFns;</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#FF79C6;">  return</span><span style="color:#F8F8F2;"> mount.</span><span style="color:#50FA7B;">call</span><span style="color:#F8F8F2;">(</span><span style="color:#BD93F9;font-style:italic;">this</span><span style="color:#F8F8F2;">, el, hydrating);</span></span>
<span class="line"><span style="color:#F8F8F2;">};</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>处理各种不同写法的 template</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> idToTemplate </span><span style="color:#FF79C6;">=</span><span style="color:#50FA7B;"> cached</span><span style="color:#F8F8F2;">((</span><span style="color:#FFB86C;font-style:italic;">id</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#FF79C6;">  const</span><span style="color:#F8F8F2;"> el </span><span style="color:#FF79C6;">=</span><span style="color:#50FA7B;"> query</span><span style="color:#F8F8F2;">(id);</span></span>
<span class="line"><span style="color:#FF79C6;">  return</span><span style="color:#F8F8F2;"> el </span><span style="color:#FF79C6;">&amp;&amp;</span><span style="color:#F8F8F2;"> el.innerHTML;</span></span>
<span class="line"><span style="color:#F8F8F2;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">function</span><span style="color:#50FA7B;"> getOuterHTML</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">el</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> Element</span><span style="color:#F8F8F2;">)</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> string</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#FF79C6;">  if</span><span style="color:#F8F8F2;"> (el.outerHTML) {</span></span>
<span class="line"><span style="color:#FF79C6;">    return</span><span style="color:#F8F8F2;"> el.outerHTML;</span></span>
<span class="line"><span style="color:#F8F8F2;">  } </span><span style="color:#FF79C6;">else</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#FF79C6;">    const</span><span style="color:#F8F8F2;"> container </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> document.</span><span style="color:#50FA7B;">createElement</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">div</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">    container.</span><span style="color:#50FA7B;">appendChild</span><span style="color:#F8F8F2;">(el.</span><span style="color:#50FA7B;">cloneNode</span><span style="color:#F8F8F2;">(</span><span style="color:#BD93F9;">true</span><span style="color:#F8F8F2;">));</span></span>
<span class="line"><span style="color:#FF79C6;">    return</span><span style="color:#F8F8F2;"> container.innerHTML;</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>模板解析阶段——解析器——源码路径：src/compiler/parser/index.js;</p></li><li><p>优化阶段——优化器——源码路径：src/compiler/optimizer.js;</p></li><li><p>代码生成阶段——代码生成器——源码路径：src/compiler/codegen/index.js;</p></li><li><p><code>const ast =parse(template.trim(), options):</code>parse 会用正则等方式解析 template 模板中的指令、class、style 等数据，形成 AST。</p></li><li><p><code>optimize(ast, options):</code> optimize 的主要作用是标记静态节点，这是 Vue 在编译过程中的一处优化，挡在进行 patch 的过程中， DOM-Diff 算法会直接跳过静态节点，从而减少了比较的过程，优化了 patch 的性能。</p></li><li><p><code>const code =generate(ast, options)</code>: 将 AST 转化成 render 函数字符串的过程，得到结果是 render 函数 的字符串以及 staticRenderFns 字符串。</p></li></ul><p><code>src/compiler createCompilerCreator</code></p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#6272A4;">//createCompiler 是 createCompilerCreator 的返回值</span></span>
<span class="line"><span style="color:#6272A4;">//createCompilerCreator 返回了一个 createCompiler 函数</span></span>
<span class="line"><span style="color:#6272A4;">//CompilerOptions 最终还是调用baseCompile</span></span>
<span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> createCompiler </span><span style="color:#FF79C6;">=</span><span style="color:#50FA7B;"> createCompilerCreator</span><span style="color:#F8F8F2;">(</span><span style="color:#FF79C6;">function</span><span style="color:#50FA7B;"> baseCompile</span><span style="color:#F8F8F2;">(</span></span>
<span class="line"><span style="color:#FFB86C;font-style:italic;">  template</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> string</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#FFB86C;font-style:italic;">  options</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> CompilerOptions</span></span>
<span class="line"><span style="color:#F8F8F2;">)</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> CompiledResult</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#FF79C6;">  const</span><span style="color:#F8F8F2;"> ast </span><span style="color:#FF79C6;">=</span><span style="color:#50FA7B;"> parse</span><span style="color:#F8F8F2;">(template.</span><span style="color:#50FA7B;">trim</span><span style="color:#F8F8F2;">(), options);</span></span>
<span class="line"><span style="color:#FF79C6;">  if</span><span style="color:#F8F8F2;"> (options.optimize </span><span style="color:#FF79C6;">!==</span><span style="color:#BD93F9;"> false</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#50FA7B;">    optimize</span><span style="color:#F8F8F2;">(ast, options);</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#FF79C6;">  const</span><span style="color:#F8F8F2;"> code </span><span style="color:#FF79C6;">=</span><span style="color:#50FA7B;"> generate</span><span style="color:#F8F8F2;">(ast, options);</span></span>
<span class="line"><span style="color:#FF79C6;">  return</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">    ast,</span></span>
<span class="line"><span style="color:#F8F8F2;">    render</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> code.render,</span></span>
<span class="line"><span style="color:#F8F8F2;">    staticRenderFns</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> code.staticRenderFns,</span></span>
<span class="line"><span style="color:#F8F8F2;">  };</span></span>
<span class="line"><span style="color:#F8F8F2;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">export</span><span style="color:#FF79C6;"> const</span><span style="color:#F8F8F2;"> { compile, compileToFunctions } </span><span style="color:#FF79C6;">=</span><span style="color:#50FA7B;"> createCompiler</span><span style="color:#F8F8F2;">(baseOptions);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>src/compiler/create-compiler</code></p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">export</span><span style="color:#FF79C6;"> function</span><span style="color:#50FA7B;"> createCompilerCreator</span><span style="color:#F8F8F2;">(</span><span style="color:#50FA7B;">baseCompile</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> Function</span><span style="color:#F8F8F2;">)</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> Function</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#FF79C6;">  return</span><span style="color:#FF79C6;"> function</span><span style="color:#50FA7B;"> createCompiler</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">baseOptions</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> CompilerOptions</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#FF79C6;">    function</span><span style="color:#50FA7B;"> compile</span><span style="color:#F8F8F2;">(</span></span>
<span class="line"><span style="color:#FFB86C;font-style:italic;">      template</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> string</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#FFB86C;font-style:italic;">      options</span><span style="color:#FF79C6;">?:</span><span style="color:#8BE9FD;font-style:italic;"> CompilerOptions</span></span>
<span class="line"><span style="color:#F8F8F2;">    )</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> CompiledResult</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#FF79C6;">      const</span><span style="color:#F8F8F2;"> finalOptions </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> Object.</span><span style="color:#50FA7B;">create</span><span style="color:#F8F8F2;">(baseOptions)</span></span>
<span class="line"><span style="color:#FF79C6;">      const</span><span style="color:#F8F8F2;"> errors</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> WarningMessage</span><span style="color:#F8F8F2;">[] </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> []</span></span>
<span class="line"><span style="color:#FF79C6;">      const</span><span style="color:#F8F8F2;"> tips</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> WarningMessage</span><span style="color:#F8F8F2;">[] </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> []</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">      let</span><span style="color:#50FA7B;"> warn</span><span style="color:#FF79C6;"> =</span><span style="color:#F8F8F2;"> (</span></span>
<span class="line"><span style="color:#FFB86C;font-style:italic;">        msg</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> WarningMessage</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#FFB86C;font-style:italic;">        range</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> { start</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> number</span><span style="color:#F8F8F2;">; end</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> number</span><span style="color:#F8F8F2;"> },</span></span>
<span class="line"><span style="color:#FFB86C;font-style:italic;">        tip</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> string</span></span>
<span class="line"><span style="color:#F8F8F2;">      ) </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">        ;(tip </span><span style="color:#FF79C6;">?</span><span style="color:#F8F8F2;"> tips </span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> errors).</span><span style="color:#50FA7B;">push</span><span style="color:#F8F8F2;">(msg)</span></span>
<span class="line"><span style="color:#F8F8F2;">      }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">      if</span><span style="color:#F8F8F2;"> (options) {</span></span>
<span class="line"><span style="color:#6272A4;">        // merge custom modules</span></span>
<span class="line"><span style="color:#FF79C6;">        if</span><span style="color:#F8F8F2;"> (options.modules) {</span></span>
<span class="line"><span style="color:#F8F8F2;">          finalOptions.modules </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> (baseOptions.modules </span><span style="color:#FF79C6;">||</span><span style="color:#F8F8F2;"> []).</span><span style="color:#50FA7B;">concat</span><span style="color:#F8F8F2;">(</span></span>
<span class="line"><span style="color:#F8F8F2;">            options.modules</span></span>
<span class="line"><span style="color:#F8F8F2;">          )</span></span>
<span class="line"><span style="color:#F8F8F2;">        }</span></span>
<span class="line"><span style="color:#6272A4;">        // merge custom directives</span></span>
<span class="line"><span style="color:#FF79C6;">        if</span><span style="color:#F8F8F2;"> (options.directives) {</span></span>
<span class="line"><span style="color:#F8F8F2;">          finalOptions.directives </span><span style="color:#FF79C6;">=</span><span style="color:#50FA7B;"> extend</span><span style="color:#F8F8F2;">(</span></span>
<span class="line"><span style="color:#F8F8F2;">            Object.</span><span style="color:#50FA7B;">create</span><span style="color:#F8F8F2;">(baseOptions.directives </span><span style="color:#FF79C6;">||</span><span style="color:#BD93F9;"> null</span><span style="color:#F8F8F2;">),</span></span>
<span class="line"><span style="color:#F8F8F2;">            options.directives</span></span>
<span class="line"><span style="color:#F8F8F2;">          )</span></span>
<span class="line"><span style="color:#F8F8F2;">        }</span></span>
<span class="line"><span style="color:#6272A4;">        // copy other options</span></span>
<span class="line"><span style="color:#FF79C6;">        for</span><span style="color:#F8F8F2;"> (</span><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> key </span><span style="color:#FF79C6;">in</span><span style="color:#F8F8F2;"> options) {</span></span>
<span class="line"><span style="color:#FF79C6;">          if</span><span style="color:#F8F8F2;"> (key </span><span style="color:#FF79C6;">!==</span><span style="color:#E9F284;"> &#39;</span><span style="color:#F1FA8C;">modules</span><span style="color:#E9F284;">&#39;</span><span style="color:#FF79C6;"> &amp;&amp;</span><span style="color:#F8F8F2;"> key </span><span style="color:#FF79C6;">!==</span><span style="color:#E9F284;"> &#39;</span><span style="color:#F1FA8C;">directives</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">            finalOptions[key] </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> options[key </span><span style="color:#FF79C6;">as</span><span style="color:#FF79C6;"> keyof</span><span style="color:#8BE9FD;font-style:italic;"> CompilerOptions</span><span style="color:#F8F8F2;">]</span></span>
<span class="line"><span style="color:#F8F8F2;">          }</span></span>
<span class="line"><span style="color:#F8F8F2;">        }</span></span>
<span class="line"><span style="color:#F8F8F2;">      }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">      finalOptions.warn </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> warn</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">      const</span><span style="color:#F8F8F2;"> compiled </span><span style="color:#FF79C6;">=</span><span style="color:#50FA7B;"> baseCompile</span><span style="color:#F8F8F2;">(template.</span><span style="color:#50FA7B;">trim</span><span style="color:#F8F8F2;">(), finalOptions)</span></span>
<span class="line"><span style="color:#F8F8F2;">      compiled.errors </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> errors</span></span>
<span class="line"><span style="color:#F8F8F2;">      compiled.tips </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> tips</span></span>
<span class="line"><span style="color:#FF79C6;">      return</span><span style="color:#F8F8F2;"> compiled</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">    return</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">      compile,</span></span>
<span class="line"><span style="color:#F8F8F2;">      compileToFunctions</span><span style="color:#FF79C6;">:</span><span style="color:#50FA7B;"> createCompileToFunctionFn</span><span style="color:#F8F8F2;">(compile)</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>src/compiler createCompileToFunctionFn</code></p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">export</span><span style="color:#FF79C6;"> function</span><span style="color:#50FA7B;"> createCompileToFunctionFn</span><span style="color:#F8F8F2;">(</span><span style="color:#50FA7B;">compile</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> Function</span><span style="color:#F8F8F2;">)</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> Function</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#FF79C6;">  const</span><span style="color:#F8F8F2;"> cache </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> Object.</span><span style="color:#50FA7B;">create</span><span style="color:#F8F8F2;">(</span><span style="color:#BD93F9;">null</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">  return</span><span style="color:#FF79C6;"> function</span><span style="color:#50FA7B;"> compileToFunctions</span><span style="color:#F8F8F2;">(</span></span>
<span class="line"><span style="color:#FFB86C;font-style:italic;">    template</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> string</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#FFB86C;font-style:italic;">    options</span><span style="color:#FF79C6;">?:</span><span style="color:#8BE9FD;font-style:italic;"> CompilerOptions</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#FFB86C;font-style:italic;">    vm</span><span style="color:#FF79C6;">?:</span><span style="color:#8BE9FD;font-style:italic;"> Component</span></span>
<span class="line"><span style="color:#F8F8F2;">  )</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> CompiledFunctionResult</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">    options </span><span style="color:#FF79C6;">=</span><span style="color:#50FA7B;"> extend</span><span style="color:#F8F8F2;">({}, options);</span></span>
<span class="line"><span style="color:#FF79C6;">    const</span><span style="color:#F8F8F2;"> warn </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> options.warn </span><span style="color:#FF79C6;">||</span><span style="color:#F8F8F2;"> baseWarn;</span></span>
<span class="line"><span style="color:#FF79C6;">    delete</span><span style="color:#F8F8F2;"> options.warn;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">    // check cache</span></span>
<span class="line"><span style="color:#FF79C6;">    const</span><span style="color:#F8F8F2;"> key </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> options.delimiters</span></span>
<span class="line"><span style="color:#FF79C6;">      ?</span><span style="color:#50FA7B;"> String</span><span style="color:#F8F8F2;">(options.delimiters) </span><span style="color:#FF79C6;">+</span><span style="color:#F8F8F2;"> template</span></span>
<span class="line"><span style="color:#FF79C6;">      :</span><span style="color:#F8F8F2;"> template;</span></span>
<span class="line"><span style="color:#FF79C6;">    if</span><span style="color:#F8F8F2;"> (cache[key]) {</span></span>
<span class="line"><span style="color:#FF79C6;">      return</span><span style="color:#F8F8F2;"> cache[key];</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">    // compile</span></span>
<span class="line"><span style="color:#FF79C6;">    const</span><span style="color:#F8F8F2;"> compiled </span><span style="color:#FF79C6;">=</span><span style="color:#50FA7B;"> compile</span><span style="color:#F8F8F2;">(template, options);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">    // turn code into functions</span></span>
<span class="line"><span style="color:#FF79C6;">    const</span><span style="color:#F8F8F2;"> res</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> any</span><span style="color:#FF79C6;"> =</span><span style="color:#F8F8F2;"> {};</span></span>
<span class="line"><span style="color:#FF79C6;">    const</span><span style="color:#F8F8F2;"> fnGenErrors</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> any</span><span style="color:#F8F8F2;">[] </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> [];</span></span>
<span class="line"><span style="color:#F8F8F2;">    res.render </span><span style="color:#FF79C6;">=</span><span style="color:#50FA7B;"> createFunction</span><span style="color:#F8F8F2;">(compiled.render, fnGenErrors);</span></span>
<span class="line"><span style="color:#F8F8F2;">    res.staticRenderFns </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> compiled.staticRenderFns.</span><span style="color:#50FA7B;">map</span><span style="color:#F8F8F2;">((</span><span style="color:#FFB86C;font-style:italic;">code</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#FF79C6;">      return</span><span style="color:#50FA7B;"> createFunction</span><span style="color:#F8F8F2;">(code, fnGenErrors);</span></span>
<span class="line"><span style="color:#F8F8F2;">    });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">    return</span><span style="color:#F8F8F2;"> (cache[key] </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> res);</span></span>
<span class="line"><span style="color:#F8F8F2;">  };</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="parse" tabindex="-1"><a class="header-anchor" href="#parse"><span>parse</span></a></h2><p><img src="`+c+'" alt="" loading="lazy"><img src="'+i+`" alt="" loading="lazy"> type 为 1 表示是普通元素，为 2 表示是表达式，为 3 表示是纯文本</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> ast </span><span style="color:#FF79C6;">=</span><span style="color:#50FA7B;"> parse</span><span style="color:#F8F8F2;">(template.</span><span style="color:#50FA7B;">trim</span><span style="color:#F8F8F2;">(), options);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><code>parse</code></p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#6272A4;">//将HTML模板字符串转化为AST</span></span>
<span class="line"><span style="color:#FF79C6;">export</span><span style="color:#FF79C6;"> function</span><span style="color:#50FA7B;"> parse</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">template</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> string</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">options</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> CompilerOptions</span><span style="color:#F8F8F2;">)</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> ASTElement</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#6272A4;">  //...</span></span>
<span class="line"><span style="color:#6272A4;">  // 一些配置的处理</span></span>
<span class="line"><span style="color:#6272A4;">  // 这个变量是比较重要的，通过这个栈暂存对 parseHTML 返回的结果</span></span>
<span class="line"><span style="color:#FF79C6;">  const</span><span style="color:#F8F8F2;"> stack</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> any</span><span style="color:#F8F8F2;">[] </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> [];</span></span>
<span class="line"><span style="color:#50FA7B;">  parseHTML</span><span style="color:#F8F8F2;">(template, {</span></span>
<span class="line"><span style="color:#F8F8F2;">    warn,</span></span>
<span class="line"><span style="color:#F8F8F2;">    expectHTML</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> options.expectHTML,</span></span>
<span class="line"><span style="color:#F8F8F2;">    isUnaryTag</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> options.isUnaryTag,</span></span>
<span class="line"><span style="color:#F8F8F2;">    canBeLeftOpenTag</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> options.canBeLeftOpenTag,</span></span>
<span class="line"><span style="color:#F8F8F2;">    shouldDecodeNewlines</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> options.shouldDecodeNewlines,</span></span>
<span class="line"><span style="color:#F8F8F2;">    shouldDecodeNewlinesForHref</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> options.shouldDecodeNewlinesForHref,</span></span>
<span class="line"><span style="color:#F8F8F2;">    shouldKeepComment</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> options.comments,</span></span>
<span class="line"><span style="color:#F8F8F2;">    outputSourceRange</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> options.outputSourceRange,</span></span>
<span class="line"><span style="color:#6272A4;">    // 当解析到开始标签时，调用该函数</span></span>
<span class="line"><span style="color:#50FA7B;">    start</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">tag</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">attrs</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">unary</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">start</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">end</span><span style="color:#F8F8F2;">) {},</span></span>
<span class="line"><span style="color:#6272A4;">    // 当解析到结束标签时，调用该函数</span></span>
<span class="line"><span style="color:#50FA7B;">    end</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">tag</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">start</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">end</span><span style="color:#F8F8F2;">) {},</span></span>
<span class="line"><span style="color:#6272A4;">    // 当解析到文本时，调用该函数</span></span>
<span class="line"><span style="color:#50FA7B;">    chars</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">text</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> string</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">start</span><span style="color:#FF79C6;">?:</span><span style="color:#8BE9FD;font-style:italic;"> number</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">end</span><span style="color:#FF79C6;">?:</span><span style="color:#8BE9FD;font-style:italic;"> number</span><span style="color:#F8F8F2;">) {},</span></span>
<span class="line"><span style="color:#6272A4;">    // 当解析到注释时，调用该函数</span></span>
<span class="line"><span style="color:#50FA7B;">    comment</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">text</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> string</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">start</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">end</span><span style="color:#F8F8F2;">) {},</span></span>
<span class="line"><span style="color:#F8F8F2;">  });</span></span>
<span class="line"><span style="color:#FF79C6;">  return</span><span style="color:#F8F8F2;"> root;</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="html-解析" tabindex="-1"><a class="header-anchor" href="#html-解析"><span>HTML 解析</span></a></h2><p>流程 <code>parseHTML</code><code>parseStartTag</code><code>handleStartTag</code><code>start</code></p><h3 id="parsehtml" tabindex="-1"><a class="header-anchor" href="#parsehtml"><span>parseHTML</span></a></h3><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">export</span><span style="color:#FF79C6;"> function</span><span style="color:#50FA7B;"> parseHTML</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">html</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">options</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> HTMLParserOptions</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#FF79C6;">  const</span><span style="color:#F8F8F2;"> stack</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> any</span><span style="color:#F8F8F2;">[] </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> []; </span><span style="color:#6272A4;">// 维护AST节点层级的栈</span></span>
<span class="line"><span style="color:#FF79C6;">  const</span><span style="color:#F8F8F2;"> expectHTML </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> options.expectHTML;</span></span>
<span class="line"><span style="color:#FF79C6;">  const</span><span style="color:#F8F8F2;"> isUnaryTag </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> options.isUnaryTag </span><span style="color:#FF79C6;">||</span><span style="color:#F8F8F2;"> no;</span></span>
<span class="line"><span style="color:#6272A4;">  //用来检测一个标签是否是可以省略闭合标签的非自闭合标签</span></span>
<span class="line"><span style="color:#FF79C6;">  const</span><span style="color:#F8F8F2;"> canBeLeftOpenTag </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> options.canBeLeftOpenTag </span><span style="color:#FF79C6;">||</span><span style="color:#F8F8F2;"> no;</span></span>
<span class="line"><span style="color:#FF79C6;">  let</span><span style="color:#F8F8F2;"> index </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> 0</span><span style="color:#F8F8F2;">; </span><span style="color:#6272A4;">//解析游标，标识当前从何处开始解析模板字符串</span></span>
<span class="line"><span style="color:#FF79C6;">  let</span><span style="color:#F8F8F2;"> last, </span><span style="color:#6272A4;">// 存储剩余还未解析的模板字符串</span></span>
<span class="line"><span style="color:#F8F8F2;">    lastTag; </span><span style="color:#6272A4;">// 存储着位于 stack 栈顶的元素</span></span>
<span class="line"><span style="color:#FF79C6;">  while</span><span style="color:#F8F8F2;"> (html) {</span></span>
<span class="line"><span style="color:#F8F8F2;">    last </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> html;</span></span>
<span class="line"><span style="color:#6272A4;">    // 确保即将 parse 的内容不是在纯文本标签里 (script,style,textarea)</span></span>
<span class="line"><span style="color:#FF79C6;">    if</span><span style="color:#F8F8F2;"> (</span><span style="color:#FF79C6;">!</span><span style="color:#F8F8F2;">lastTag </span><span style="color:#FF79C6;">||</span><span style="color:#FF79C6;"> !</span><span style="color:#50FA7B;">isPlainTextElement</span><span style="color:#F8F8F2;">(lastTag)) {</span></span>
<span class="line"><span style="color:#FF79C6;">      let</span><span style="color:#F8F8F2;"> textEnd </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> html.</span><span style="color:#50FA7B;">indexOf</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">&lt;</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#6272A4;">      /**</span></span>
<span class="line"><span style="color:#6272A4;">       * 如果html字符串是以&#39;&lt;&#39;开头,则有以下几种可能</span></span>
<span class="line"><span style="color:#6272A4;">       * 开始标签:&lt;div&gt;</span></span>
<span class="line"><span style="color:#6272A4;">       * 结束标签:&lt;/div&gt;</span></span>
<span class="line"><span style="color:#6272A4;">       * 注释:&lt;!-- 我是注释 --&gt;</span></span>
<span class="line"><span style="color:#6272A4;">       * 条件注释:&lt;!-- [if !IE] --&gt; &lt;!-- [endif] --&gt;</span></span>
<span class="line"><span style="color:#6272A4;">       * DOCTYPE:&lt;!DOCTYPE html&gt;</span></span>
<span class="line"><span style="color:#6272A4;">       * 需要一一去匹配尝试</span></span>
<span class="line"><span style="color:#6272A4;">       */</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">      if</span><span style="color:#F8F8F2;"> (textEnd </span><span style="color:#FF79C6;">===</span><span style="color:#BD93F9;"> 0</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#6272A4;">        // Comment:</span></span>
<span class="line"><span style="color:#6272A4;">        //  /^&lt;!\\--/</span></span>
<span class="line"><span style="color:#FF79C6;">        if</span><span style="color:#F8F8F2;"> (comment.</span><span style="color:#50FA7B;">test</span><span style="color:#F8F8F2;">(html)) {</span></span>
<span class="line"><span style="color:#FF79C6;">          const</span><span style="color:#F8F8F2;"> commentEnd </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> html.</span><span style="color:#50FA7B;">indexOf</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">--&gt;</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">          if</span><span style="color:#F8F8F2;"> (commentEnd </span><span style="color:#FF79C6;">&gt;=</span><span style="color:#BD93F9;"> 0</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#FF79C6;">            if</span><span style="color:#F8F8F2;"> (options.shouldKeepComment </span><span style="color:#FF79C6;">&amp;&amp;</span><span style="color:#F8F8F2;"> options.comment) {</span></span>
<span class="line"><span style="color:#F8F8F2;">              options.</span><span style="color:#50FA7B;">comment</span><span style="color:#F8F8F2;">(</span></span>
<span class="line"><span style="color:#F8F8F2;">                html.</span><span style="color:#50FA7B;">substring</span><span style="color:#F8F8F2;">(</span><span style="color:#BD93F9;">4</span><span style="color:#F8F8F2;">, commentEnd),</span></span>
<span class="line"><span style="color:#F8F8F2;">                index,</span></span>
<span class="line"><span style="color:#F8F8F2;">                index </span><span style="color:#FF79C6;">+</span><span style="color:#F8F8F2;"> commentEnd </span><span style="color:#FF79C6;">+</span><span style="color:#BD93F9;"> 3</span></span>
<span class="line"><span style="color:#F8F8F2;">              );</span></span>
<span class="line"><span style="color:#F8F8F2;">            }</span></span>
<span class="line"><span style="color:#50FA7B;">            advance</span><span style="color:#F8F8F2;">(commentEnd </span><span style="color:#FF79C6;">+</span><span style="color:#BD93F9;"> 3</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#FF79C6;">            continue</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">          }</span></span>
<span class="line"><span style="color:#F8F8F2;">        }</span></span>
<span class="line"><span style="color:#6272A4;">        //  /^&lt;!\\[/</span></span>
<span class="line"><span style="color:#FF79C6;">        if</span><span style="color:#F8F8F2;"> (conditionalComment.</span><span style="color:#50FA7B;">test</span><span style="color:#F8F8F2;">(html)) {</span></span>
<span class="line"><span style="color:#FF79C6;">          const</span><span style="color:#F8F8F2;"> conditionalEnd </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> html.</span><span style="color:#50FA7B;">indexOf</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">]&gt;</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">          if</span><span style="color:#F8F8F2;"> (conditionalEnd </span><span style="color:#FF79C6;">&gt;=</span><span style="color:#BD93F9;"> 0</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#50FA7B;">            advance</span><span style="color:#F8F8F2;">(conditionalEnd </span><span style="color:#FF79C6;">+</span><span style="color:#BD93F9;"> 2</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#FF79C6;">            continue</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">          }</span></span>
<span class="line"><span style="color:#F8F8F2;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">        // Doctype:</span></span>
<span class="line"><span style="color:#6272A4;">        // /^&lt;!DOCTYPE [^&gt;]+&gt;/i</span></span>
<span class="line"><span style="color:#FF79C6;">        const</span><span style="color:#F8F8F2;"> doctypeMatch </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> html.</span><span style="color:#50FA7B;">match</span><span style="color:#F8F8F2;">(doctype);</span></span>
<span class="line"><span style="color:#FF79C6;">        if</span><span style="color:#F8F8F2;"> (doctypeMatch) {</span></span>
<span class="line"><span style="color:#50FA7B;">          advance</span><span style="color:#F8F8F2;">(doctypeMatch[</span><span style="color:#BD93F9;">0</span><span style="color:#F8F8F2;">].length);</span></span>
<span class="line"><span style="color:#FF79C6;">          continue</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">        // End tag:</span></span>
<span class="line"><span style="color:#FF79C6;">        const</span><span style="color:#F8F8F2;"> endTagMatch </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> html.</span><span style="color:#50FA7B;">match</span><span style="color:#F8F8F2;">(endTag);</span></span>
<span class="line"><span style="color:#FF79C6;">        if</span><span style="color:#F8F8F2;"> (endTagMatch) {</span></span>
<span class="line"><span style="color:#FF79C6;">          const</span><span style="color:#F8F8F2;"> curIndex </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> index;</span></span>
<span class="line"><span style="color:#50FA7B;">          advance</span><span style="color:#F8F8F2;">(endTagMatch[</span><span style="color:#BD93F9;">0</span><span style="color:#F8F8F2;">].length);</span></span>
<span class="line"><span style="color:#50FA7B;">          parseEndTag</span><span style="color:#F8F8F2;">(endTagMatch[</span><span style="color:#BD93F9;">1</span><span style="color:#F8F8F2;">], curIndex, index);</span></span>
<span class="line"><span style="color:#FF79C6;">          continue</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">        // Start tag:</span></span>
<span class="line"><span style="color:#FF79C6;">        const</span><span style="color:#F8F8F2;"> startTagMatch </span><span style="color:#FF79C6;">=</span><span style="color:#50FA7B;"> parseStartTag</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#FF79C6;">        if</span><span style="color:#F8F8F2;"> (startTagMatch) {</span></span>
<span class="line"><span style="color:#50FA7B;">          handleStartTag</span><span style="color:#F8F8F2;">(startTagMatch);</span></span>
<span class="line"><span style="color:#FF79C6;">          if</span><span style="color:#F8F8F2;"> (</span><span style="color:#50FA7B;">shouldIgnoreFirstNewline</span><span style="color:#F8F8F2;">(startTagMatch.tagName, html)) {</span></span>
<span class="line"><span style="color:#50FA7B;">            advance</span><span style="color:#F8F8F2;">(</span><span style="color:#BD93F9;">1</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">          }</span></span>
<span class="line"><span style="color:#FF79C6;">          continue</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">        }</span></span>
<span class="line"><span style="color:#F8F8F2;">      }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">      let</span><span style="color:#F8F8F2;"> text, rest, next;</span></span>
<span class="line"><span style="color:#FF79C6;">      if</span><span style="color:#F8F8F2;"> (textEnd </span><span style="color:#FF79C6;">&gt;=</span><span style="color:#BD93F9;"> 0</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">        rest </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> html.</span><span style="color:#50FA7B;">slice</span><span style="color:#F8F8F2;">(textEnd);</span></span>
<span class="line"><span style="color:#FF79C6;">        while</span><span style="color:#F8F8F2;"> (</span></span>
<span class="line"><span style="color:#FF79C6;">          !</span><span style="color:#F8F8F2;">endTag.</span><span style="color:#50FA7B;">test</span><span style="color:#F8F8F2;">(rest) </span><span style="color:#FF79C6;">&amp;&amp;</span></span>
<span class="line"><span style="color:#FF79C6;">          !</span><span style="color:#F8F8F2;">startTagOpen.</span><span style="color:#50FA7B;">test</span><span style="color:#F8F8F2;">(rest) </span><span style="color:#FF79C6;">&amp;&amp;</span></span>
<span class="line"><span style="color:#FF79C6;">          !</span><span style="color:#F8F8F2;">comment.</span><span style="color:#50FA7B;">test</span><span style="color:#F8F8F2;">(rest) </span><span style="color:#FF79C6;">&amp;&amp;</span></span>
<span class="line"><span style="color:#FF79C6;">          !</span><span style="color:#F8F8F2;">conditionalComment.</span><span style="color:#50FA7B;">test</span><span style="color:#F8F8F2;">(rest)</span></span>
<span class="line"><span style="color:#F8F8F2;">        ) {</span></span>
<span class="line"><span style="color:#6272A4;">          // &lt; in plain text, be forgiving and treat it as text</span></span>
<span class="line"><span style="color:#F8F8F2;">          next </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> rest.</span><span style="color:#50FA7B;">indexOf</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">&lt;</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">1</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#FF79C6;">          if</span><span style="color:#F8F8F2;"> (next </span><span style="color:#FF79C6;">&lt;</span><span style="color:#BD93F9;"> 0</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">break</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">          textEnd </span><span style="color:#FF79C6;">+=</span><span style="color:#F8F8F2;"> next;</span></span>
<span class="line"><span style="color:#F8F8F2;">          rest </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> html.</span><span style="color:#50FA7B;">slice</span><span style="color:#F8F8F2;">(textEnd);</span></span>
<span class="line"><span style="color:#F8F8F2;">        }</span></span>
<span class="line"><span style="color:#F8F8F2;">        text </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> html.</span><span style="color:#50FA7B;">substring</span><span style="color:#F8F8F2;">(</span><span style="color:#BD93F9;">0</span><span style="color:#F8F8F2;">, textEnd);</span></span>
<span class="line"><span style="color:#F8F8F2;">      }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">      if</span><span style="color:#F8F8F2;"> (textEnd </span><span style="color:#FF79C6;">&lt;</span><span style="color:#BD93F9;"> 0</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">        text </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> html;</span></span>
<span class="line"><span style="color:#F8F8F2;">      }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">      if</span><span style="color:#F8F8F2;"> (text) {</span></span>
<span class="line"><span style="color:#50FA7B;">        advance</span><span style="color:#F8F8F2;">(text.length);</span></span>
<span class="line"><span style="color:#F8F8F2;">      }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">      if</span><span style="color:#F8F8F2;"> (options.chars </span><span style="color:#FF79C6;">&amp;&amp;</span><span style="color:#F8F8F2;"> text) {</span></span>
<span class="line"><span style="color:#F8F8F2;">        options.</span><span style="color:#50FA7B;">chars</span><span style="color:#F8F8F2;">(text, index </span><span style="color:#FF79C6;">-</span><span style="color:#F8F8F2;"> text.length, index);</span></span>
<span class="line"><span style="color:#F8F8F2;">      }</span></span>
<span class="line"><span style="color:#F8F8F2;">    } </span><span style="color:#FF79C6;">else</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#6272A4;">    //将整个字符串作为文本对待</span></span>
<span class="line"><span style="color:#FF79C6;">    if</span><span style="color:#F8F8F2;"> (html </span><span style="color:#FF79C6;">===</span><span style="color:#F8F8F2;"> last) {</span></span>
<span class="line"><span style="color:#F8F8F2;">      options.chars </span><span style="color:#FF79C6;">&amp;&amp;</span><span style="color:#F8F8F2;"> options.</span><span style="color:#50FA7B;">chars</span><span style="color:#F8F8F2;">(html);</span></span>
<span class="line"><span style="color:#FF79C6;">      break</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">  // Clean up any remaining tags</span></span>
<span class="line"><span style="color:#50FA7B;">  parseEndTag</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">  function</span><span style="color:#50FA7B;"> advance</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">n</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">    index </span><span style="color:#FF79C6;">+=</span><span style="color:#F8F8F2;"> n;</span></span>
<span class="line"><span style="color:#F8F8F2;">    html </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> html.</span><span style="color:#50FA7B;">substring</span><span style="color:#F8F8F2;">(n);</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#6272A4;">  //第一件事是解析出开始标签名称；第二件事是解析出开始标签的属性</span></span>
<span class="line"><span style="color:#FF79C6;">  function</span><span style="color:#50FA7B;"> parseStartTag</span><span style="color:#F8F8F2;">() {}</span></span>
<span class="line"><span style="color:#6272A4;">  //标签处理</span></span>
<span class="line"><span style="color:#6272A4;">  /*</span></span>
<span class="line"><span style="color:#6272A4;">     处理前</span></span>
<span class="line"><span style="color:#6272A4;">    [</span></span>
<span class="line"><span style="color:#6272A4;">      [&#39; v-if=&quot;isShow&quot;&#39;, &#39;v-if&#39;, &#39;=&#39;, &#39;isShow&#39;, null, null],</span></span>
<span class="line"><span style="color:#6272A4;">      [&#39; class=&quot;header&quot;&#39;, &#39;class&#39;, &#39;=&#39;, &#39;header&#39;, null, null]</span></span>
<span class="line"><span style="color:#6272A4;">    ]</span></span>
<span class="line"><span style="color:#6272A4;">     处理后</span></span>
<span class="line"><span style="color:#6272A4;">    [</span></span>
<span class="line"><span style="color:#6272A4;">      { name: &#39;v-if&#39;, value: &#39;isShow&#39;, start: 5, end: 18 },</span></span>
<span class="line"><span style="color:#6272A4;">      { name: &#39;class&#39;, value: &#39;header&#39;, start: 19, end: 33 }</span></span>
<span class="line"><span style="color:#6272A4;">    ]</span></span>
<span class="line"><span style="color:#6272A4;">      */</span></span>
<span class="line"><span style="color:#FF79C6;">  function</span><span style="color:#50FA7B;"> handleStartTag</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">match</span><span style="color:#F8F8F2;">) {}</span></span>
<span class="line"><span style="color:#6272A4;">  //parse 结束标签</span></span>
<span class="line"><span style="color:#FF79C6;">  function</span><span style="color:#50FA7B;"> parseEndTag</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">tagName</span><span style="color:#FF79C6;">?:</span><span style="color:#8BE9FD;font-style:italic;"> any</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">start</span><span style="color:#FF79C6;">?:</span><span style="color:#8BE9FD;font-style:italic;"> any</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">end</span><span style="color:#FF79C6;">?:</span><span style="color:#8BE9FD;font-style:italic;"> any</span><span style="color:#F8F8F2;">) {}</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="parsestarttag" tabindex="-1"><a class="header-anchor" href="#parsestarttag"><span><code>parseStartTag</code></span></a></h3><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> ncname </span><span style="color:#FF79C6;">=</span><span style="color:#E9F284;"> &quot;</span><span style="color:#F1FA8C;">[a-zA-Z_][</span><span style="color:#FF79C6;">\\\\</span><span style="color:#F1FA8C;">w</span><span style="color:#FF79C6;">\\\\</span><span style="color:#F1FA8C;">-</span><span style="color:#FF79C6;">\\\\</span><span style="color:#F1FA8C;">.]*</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> qnameCapture </span><span style="color:#FF79C6;">=</span><span style="color:#F1FA8C;"> \`((?:</span><span style="color:#FF79C6;">\${</span><span style="color:#F8F8F2;">ncname</span><span style="color:#FF79C6;">}\\\\</span><span style="color:#F1FA8C;">:)?</span><span style="color:#FF79C6;">\${</span><span style="color:#F8F8F2;">ncname</span><span style="color:#FF79C6;">}</span><span style="color:#F1FA8C;">)\`</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> startTagOpen </span><span style="color:#FF79C6;">=</span><span style="color:#FF79C6;font-weight:bold;"> new</span><span style="color:#50FA7B;"> RegExp</span><span style="color:#F8F8F2;">(</span><span style="color:#F1FA8C;">\`^&lt;</span><span style="color:#FF79C6;">\${</span><span style="color:#F8F8F2;">qnameCapture</span><span style="color:#FF79C6;">}</span><span style="color:#F1FA8C;">\`</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> startTagClose </span><span style="color:#FF79C6;">=</span><span style="color:#FF5555;"> /</span><span style="color:#FF79C6;">^</span><span style="color:#BD93F9;">\\s</span><span style="color:#FF79C6;">*</span><span style="color:#FFB86C;">(</span><span style="color:#F1FA8C;">\\/</span><span style="color:#FF79C6;">?</span><span style="color:#FFB86C;">)</span><span style="color:#F1FA8C;">&gt;</span><span style="color:#FF5555;">/</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">function</span><span style="color:#50FA7B;"> parseStartTag</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#FF79C6;">  const</span><span style="color:#F8F8F2;"> start </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> html.</span><span style="color:#50FA7B;">match</span><span style="color:#F8F8F2;">(startTagOpen);</span></span>
<span class="line"><span style="color:#6272A4;">  // &#39;&lt;div&gt;&lt;/div&gt;&#39;.match(startTagOpen)  =&gt; [&#39;&lt;div&#39;,&#39;div&#39;,index:0,input:&#39;&lt;div&gt;&lt;/div&gt;&#39;]</span></span>
<span class="line"><span style="color:#FF79C6;">  if</span><span style="color:#F8F8F2;"> (start) {</span></span>
<span class="line"><span style="color:#FF79C6;">    const</span><span style="color:#F8F8F2;"> match </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">      tagName</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> start[</span><span style="color:#BD93F9;">1</span><span style="color:#F8F8F2;">],</span></span>
<span class="line"><span style="color:#F8F8F2;">      attrs</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> [],</span></span>
<span class="line"><span style="color:#F8F8F2;">      start</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> index,</span></span>
<span class="line"><span style="color:#F8F8F2;">    };</span></span>
<span class="line"><span style="color:#50FA7B;">    advance</span><span style="color:#F8F8F2;">(start[</span><span style="color:#BD93F9;">0</span><span style="color:#F8F8F2;">].length);</span></span>
<span class="line"><span style="color:#FF79C6;">    let</span><span style="color:#F8F8F2;"> end, attr;</span></span>
<span class="line"><span style="color:#6272A4;">    /**</span></span>
<span class="line"><span style="color:#6272A4;">     * &lt;div a=1 b=2 c=3&gt;&lt;/div&gt;</span></span>
<span class="line"><span style="color:#6272A4;">     * 从&lt;div之后到开始标签的结束符号&#39;&gt;&#39;之前，一直匹配属性attrs</span></span>
<span class="line"><span style="color:#6272A4;">     * 所有属性匹配完之后，html字符串还剩下</span></span>
<span class="line"><span style="color:#6272A4;">     * 自闭合标签剩下：&#39;/&gt;&#39;</span></span>
<span class="line"><span style="color:#6272A4;">     * 非自闭合标签剩下：&#39;&gt;&lt;/div&gt;&#39;</span></span>
<span class="line"><span style="color:#6272A4;">     */</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">    /*</span></span>
<span class="line"><span style="color:#6272A4;">    </span></span>
<span class="line"><span style="color:#6272A4;">    const attribute = /^\\s*([^\\s&quot;&#39;&lt;&gt;\\/=]+)(?:\\s*(=)\\s*(?:&quot;([^&quot;]*)&quot;+|&#39;([^&#39;]*)&#39;+|([^\\s&quot;&#39;=&lt;&gt;\`]+)))?/</span></span>
<span class="line"><span style="color:#6272A4;">    let html = &#39;class=&quot;a&quot; id=&quot;b&quot;&gt;&lt;/div&gt;&#39;</span></span>
<span class="line"><span style="color:#6272A4;">    let attr = html.match(attribute)</span></span>
<span class="line"><span style="color:#6272A4;">    console.log(attr)</span></span>
<span class="line"><span style="color:#6272A4;">    [&quot;class=&quot;a&quot;&quot;, &quot;class&quot;, &quot;=&quot;, &quot;a&quot;, undefined, undefined, index: 0, input: &quot;class=&quot;a&quot; id=&quot;b&quot;&gt;&lt;/div&gt;&quot;, groups: undefined]</span></span>
<span class="line"><span style="color:#6272A4;">    </span></span>
<span class="line"><span style="color:#6272A4;">    */</span></span>
<span class="line"><span style="color:#FF79C6;">    while</span><span style="color:#F8F8F2;"> (</span></span>
<span class="line"><span style="color:#FF79C6;">      !</span><span style="color:#F8F8F2;">(end </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> html.</span><span style="color:#50FA7B;">match</span><span style="color:#F8F8F2;">(startTagClose)) </span><span style="color:#FF79C6;">&amp;&amp;</span></span>
<span class="line"><span style="color:#F8F8F2;">      (attr </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> html.</span><span style="color:#50FA7B;">match</span><span style="color:#F8F8F2;">(attribute))</span></span>
<span class="line"><span style="color:#F8F8F2;">    ) {</span></span>
<span class="line"><span style="color:#50FA7B;">      advance</span><span style="color:#F8F8F2;">(attr[</span><span style="color:#BD93F9;">0</span><span style="color:#F8F8F2;">].length);</span></span>
<span class="line"><span style="color:#F8F8F2;">      match.attrs.</span><span style="color:#50FA7B;">push</span><span style="color:#F8F8F2;">(attr);</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">    /**</span></span>
<span class="line"><span style="color:#6272A4;">     * 这里判断了该标签是否为自闭合标签</span></span>
<span class="line"><span style="color:#6272A4;">     * 自闭合标签如:&lt;input type=&#39;text&#39; /&gt;</span></span>
<span class="line"><span style="color:#6272A4;">     * 非自闭合标签如:&lt;div&gt;&lt;/div&gt;</span></span>
<span class="line"><span style="color:#6272A4;">     * const startTagClose = /^\\s*(\\/?)&gt;/</span></span>
<span class="line"><span style="color:#6272A4;">     * let end = html.match(startTagClose)</span></span>
<span class="line"><span style="color:#6272A4;">     * &#39;&gt;&lt;/div&gt;&#39;.match(startTagClose) =&gt; [&quot;&gt;&quot;, &quot;&quot;, index: 0, input: &quot;&gt;&lt;/div&gt;&quot;, groups: undefined]</span></span>
<span class="line"><span style="color:#6272A4;">     * &#39;/&gt;&lt;div&gt;&lt;/div&gt;&#39;.match(startTagClose) =&gt; [&quot;/&gt;&quot;, &quot;/&quot;, index: 0, input: &quot;/&gt;&lt;div&gt;&lt;/div&gt;&quot;, groups: undefined]</span></span>
<span class="line"><span style="color:#6272A4;">     * 因此，我们可以通过end[1]是否是&quot;/&quot;来判断该标签是否是自闭合标签</span></span>
<span class="line"><span style="color:#6272A4;">     */</span></span>
<span class="line"><span style="color:#FF79C6;">    if</span><span style="color:#F8F8F2;"> (end) {</span></span>
<span class="line"><span style="color:#F8F8F2;">      match.unarySlash </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> end[</span><span style="color:#BD93F9;">1</span><span style="color:#F8F8F2;">];</span></span>
<span class="line"><span style="color:#50FA7B;">      advance</span><span style="color:#F8F8F2;">(end[</span><span style="color:#BD93F9;">0</span><span style="color:#F8F8F2;">].length);</span></span>
<span class="line"><span style="color:#F8F8F2;">      match.end </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> index;</span></span>
<span class="line"><span style="color:#FF79C6;">      return</span><span style="color:#F8F8F2;"> match;</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="handlestarttag" tabindex="-1"><a class="header-anchor" href="#handlestarttag"><span>handleStartTag</span></a></h3><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">function</span><span style="color:#50FA7B;"> handleStartTag</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">match</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#6272A4;">  // 开始标签的标签名</span></span>
<span class="line"><span style="color:#FF79C6;">  const</span><span style="color:#F8F8F2;"> tagName </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> match.tagName;</span></span>
<span class="line"><span style="color:#6272A4;">  // 是否为自闭合标签的标志，自闭合为&quot;&quot;,非自闭合为&quot;/&quot;</span></span>
<span class="line"><span style="color:#FF79C6;">  const</span><span style="color:#F8F8F2;"> unarySlash </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> match.unarySlash;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">  if</span><span style="color:#F8F8F2;"> (expectHTML) {</span></span>
<span class="line"><span style="color:#FF79C6;">    if</span><span style="color:#F8F8F2;"> (lastTag </span><span style="color:#FF79C6;">===</span><span style="color:#E9F284;"> &quot;</span><span style="color:#F1FA8C;">p</span><span style="color:#E9F284;">&quot;</span><span style="color:#FF79C6;"> &amp;&amp;</span><span style="color:#50FA7B;"> isNonPhrasingTag</span><span style="color:#F8F8F2;">(tagName)) {</span></span>
<span class="line"><span style="color:#50FA7B;">      parseEndTag</span><span style="color:#F8F8F2;">(lastTag);</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#FF79C6;">    if</span><span style="color:#F8F8F2;"> (</span><span style="color:#50FA7B;">canBeLeftOpenTag</span><span style="color:#F8F8F2;">(tagName) </span><span style="color:#FF79C6;">&amp;&amp;</span><span style="color:#F8F8F2;"> lastTag </span><span style="color:#FF79C6;">===</span><span style="color:#F8F8F2;"> tagName) {</span></span>
<span class="line"><span style="color:#50FA7B;">      parseEndTag</span><span style="color:#F8F8F2;">(tagName);</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#6272A4;">  // 布尔值，标志是否为自闭合标签</span></span>
<span class="line"><span style="color:#FF79C6;">  const</span><span style="color:#F8F8F2;"> unary </span><span style="color:#FF79C6;">=</span><span style="color:#50FA7B;"> isUnaryTag</span><span style="color:#F8F8F2;">(tagName) </span><span style="color:#FF79C6;">||</span><span style="color:#FF79C6;"> !!</span><span style="color:#F8F8F2;">unarySlash;</span></span>
<span class="line"><span style="color:#6272A4;">  // match.attrs 数组的长度</span></span>
<span class="line"><span style="color:#FF79C6;">  const</span><span style="color:#F8F8F2;"> l </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> match.attrs.length;</span></span>
<span class="line"><span style="color:#6272A4;">  // 一个与match.attrs数组长度相等的数组</span></span>
<span class="line"><span style="color:#FF79C6;">  const</span><span style="color:#F8F8F2;"> attrs</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> ASTAttr</span><span style="color:#F8F8F2;">[] </span><span style="color:#FF79C6;">=</span><span style="color:#FF79C6;font-weight:bold;"> new</span><span style="color:#50FA7B;"> Array</span><span style="color:#F8F8F2;">(l);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">  for</span><span style="color:#F8F8F2;"> (</span><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> i </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> 0</span><span style="color:#F8F8F2;">; i </span><span style="color:#FF79C6;">&lt;</span><span style="color:#F8F8F2;"> l; i</span><span style="color:#FF79C6;">++</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#FF79C6;">    const</span><span style="color:#F8F8F2;"> args </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> match.attrs[i];</span></span>
<span class="line"><span style="color:#6272A4;">    //const args = [&quot;class=&quot;a&quot;&quot;, &quot;class&quot;, &quot;=&quot;, &quot;a&quot;, undefined, undefined, index: 0, input: &quot;class=&quot;a&quot; id=&quot;b&quot;&gt;&lt;/div&gt;&quot;, groups: undefined]</span></span>
<span class="line"><span style="color:#FF79C6;">    const</span><span style="color:#F8F8F2;"> value </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> args[</span><span style="color:#BD93F9;">3</span><span style="color:#F8F8F2;">] </span><span style="color:#FF79C6;">||</span><span style="color:#F8F8F2;"> args[</span><span style="color:#BD93F9;">4</span><span style="color:#F8F8F2;">] </span><span style="color:#FF79C6;">||</span><span style="color:#F8F8F2;"> args[</span><span style="color:#BD93F9;">5</span><span style="color:#F8F8F2;">] </span><span style="color:#FF79C6;">||</span><span style="color:#E9F284;"> &quot;&quot;</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#FF79C6;">    const</span><span style="color:#F8F8F2;"> shouldDecodeNewlines </span><span style="color:#FF79C6;">=</span></span>
<span class="line"><span style="color:#F8F8F2;">      tagName </span><span style="color:#FF79C6;">===</span><span style="color:#E9F284;"> &quot;</span><span style="color:#F1FA8C;">a</span><span style="color:#E9F284;">&quot;</span><span style="color:#FF79C6;"> &amp;&amp;</span><span style="color:#F8F8F2;"> args[</span><span style="color:#BD93F9;">1</span><span style="color:#F8F8F2;">] </span><span style="color:#FF79C6;">===</span><span style="color:#E9F284;"> &quot;</span><span style="color:#F1FA8C;">href</span><span style="color:#E9F284;">&quot;</span></span>
<span class="line"><span style="color:#FF79C6;">        ?</span><span style="color:#F8F8F2;"> options.shouldDecodeNewlinesForHref</span></span>
<span class="line"><span style="color:#FF79C6;">        :</span><span style="color:#F8F8F2;"> options.shouldDecodeNewlines;</span></span>
<span class="line"><span style="color:#F8F8F2;">    attrs[i] </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">      name</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> args[</span><span style="color:#BD93F9;">1</span><span style="color:#F8F8F2;">],</span></span>
<span class="line"><span style="color:#F8F8F2;">      value</span><span style="color:#FF79C6;">:</span><span style="color:#50FA7B;"> decodeAttr</span><span style="color:#F8F8F2;">(value, shouldDecodeNewlines),</span></span>
<span class="line"><span style="color:#F8F8F2;">    };</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">  if</span><span style="color:#F8F8F2;"> (</span><span style="color:#FF79C6;">!</span><span style="color:#F8F8F2;">unary) {</span></span>
<span class="line"><span style="color:#F8F8F2;">    stack.</span><span style="color:#50FA7B;">push</span><span style="color:#F8F8F2;">({</span></span>
<span class="line"><span style="color:#F8F8F2;">      tag</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> tagName,</span></span>
<span class="line"><span style="color:#F8F8F2;">      lowerCasedTag</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> tagName.</span><span style="color:#50FA7B;">toLowerCase</span><span style="color:#F8F8F2;">(),</span></span>
<span class="line"><span style="color:#F8F8F2;">      attrs</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> attrs,</span></span>
<span class="line"><span style="color:#F8F8F2;">      start</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> match.start,</span></span>
<span class="line"><span style="color:#F8F8F2;">      end</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> match.end,</span></span>
<span class="line"><span style="color:#F8F8F2;">    });</span></span>
<span class="line"><span style="color:#F8F8F2;">    lastTag </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> tagName;</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">  if</span><span style="color:#F8F8F2;"> (options.start) {</span></span>
<span class="line"><span style="color:#F8F8F2;">    options.</span><span style="color:#50FA7B;">start</span><span style="color:#F8F8F2;">(tagName, attrs, unary, match.start, match.end);</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="start" tabindex="-1"><a class="header-anchor" href="#start"><span>start</span></a></h3><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#50FA7B;">    start</span><span style="color:#F8F8F2;">(tag, attrs, unary, start, end) {</span></span>
<span class="line"><span style="color:#6272A4;">      // check namespace.</span></span>
<span class="line"><span style="color:#6272A4;">      // inherit parent ns if there is one</span></span>
<span class="line"><span style="color:#FF79C6;">      const</span><span style="color:#F8F8F2;"> ns </span><span style="color:#FF79C6;">=</span></span>
<span class="line"><span style="color:#F8F8F2;">        (currentParent </span><span style="color:#FF79C6;">&amp;&amp;</span><span style="color:#F8F8F2;"> currentParent.ns) </span><span style="color:#FF79C6;">||</span><span style="color:#50FA7B;"> platformGetTagNamespace</span><span style="color:#F8F8F2;">(tag)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">      // handle IE svg bug</span></span>
<span class="line"><span style="color:#6272A4;">      /* istanbul ignore if */</span></span>
<span class="line"><span style="color:#FF79C6;">      if</span><span style="color:#F8F8F2;"> (isIE </span><span style="color:#FF79C6;">&amp;&amp;</span><span style="color:#F8F8F2;"> ns </span><span style="color:#FF79C6;">===</span><span style="color:#E9F284;"> &#39;</span><span style="color:#F1FA8C;">svg</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">        attrs </span><span style="color:#FF79C6;">=</span><span style="color:#50FA7B;"> guardIESVGBug</span><span style="color:#F8F8F2;">(attrs)</span></span>
<span class="line"><span style="color:#F8F8F2;">      }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">      let</span><span style="color:#F8F8F2;"> element</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> ASTElement</span><span style="color:#FF79C6;"> =</span><span style="color:#50FA7B;"> createASTElement</span><span style="color:#F8F8F2;">(tag, attrs, currentParent)</span></span>
<span class="line"><span style="color:#6272A4;">      /*</span></span>
<span class="line"><span style="color:#6272A4;">      export function createASTElement (tag,attrs,parent) {</span></span>
<span class="line"><span style="color:#6272A4;">        return {</span></span>
<span class="line"><span style="color:#6272A4;">          type: 1,</span></span>
<span class="line"><span style="color:#6272A4;">          tag,</span></span>
<span class="line"><span style="color:#6272A4;">          attrsList: attrs,</span></span>
<span class="line"><span style="color:#6272A4;">          attrsMap: makeAttrsMap(attrs),</span></span>
<span class="line"><span style="color:#6272A4;">          parent,</span></span>
<span class="line"><span style="color:#6272A4;">          children: []</span></span>
<span class="line"><span style="color:#6272A4;">        }</span></span>
<span class="line"><span style="color:#6272A4;">      }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">      */</span></span>
<span class="line"><span style="color:#FF79C6;">      if</span><span style="color:#F8F8F2;"> (ns) {</span></span>
<span class="line"><span style="color:#F8F8F2;">        element.ns </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> ns</span></span>
<span class="line"><span style="color:#F8F8F2;">      }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">      if</span><span style="color:#F8F8F2;"> (</span><span style="color:#50FA7B;">isForbiddenTag</span><span style="color:#F8F8F2;">(element) </span><span style="color:#FF79C6;">&amp;&amp;</span><span style="color:#FF79C6;"> !</span><span style="color:#50FA7B;">isServerRendering</span><span style="color:#F8F8F2;">()) {</span></span>
<span class="line"><span style="color:#F8F8F2;">        element.forbidden </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> true</span></span>
<span class="line"><span style="color:#F8F8F2;">      }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">      // apply pre-transforms</span></span>
<span class="line"><span style="color:#FF79C6;">      for</span><span style="color:#F8F8F2;"> (</span><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> i </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> 0</span><span style="color:#F8F8F2;">; i </span><span style="color:#FF79C6;">&lt;</span><span style="color:#F8F8F2;"> preTransforms.length; i</span><span style="color:#FF79C6;">++</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">        element </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> preTransforms[i](element, options) </span><span style="color:#FF79C6;">||</span><span style="color:#F8F8F2;"> element</span></span>
<span class="line"><span style="color:#F8F8F2;">      }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">      if</span><span style="color:#F8F8F2;"> (</span><span style="color:#FF79C6;">!</span><span style="color:#F8F8F2;">inVPre) {</span></span>
<span class="line"><span style="color:#50FA7B;">        processPre</span><span style="color:#F8F8F2;">(element)</span></span>
<span class="line"><span style="color:#FF79C6;">        if</span><span style="color:#F8F8F2;"> (element.pre) {</span></span>
<span class="line"><span style="color:#F8F8F2;">          inVPre </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> true</span></span>
<span class="line"><span style="color:#F8F8F2;">        }</span></span>
<span class="line"><span style="color:#F8F8F2;">      }</span></span>
<span class="line"><span style="color:#FF79C6;">      if</span><span style="color:#F8F8F2;"> (</span><span style="color:#50FA7B;">platformIsPreTag</span><span style="color:#F8F8F2;">(element.tag)) {</span></span>
<span class="line"><span style="color:#F8F8F2;">        inPre </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> true</span></span>
<span class="line"><span style="color:#F8F8F2;">      }</span></span>
<span class="line"><span style="color:#FF79C6;">      if</span><span style="color:#F8F8F2;"> (inVPre) {</span></span>
<span class="line"><span style="color:#50FA7B;">        processRawAttrs</span><span style="color:#F8F8F2;">(element)</span></span>
<span class="line"><span style="color:#F8F8F2;">      } </span><span style="color:#FF79C6;">else</span><span style="color:#FF79C6;"> if</span><span style="color:#F8F8F2;"> (</span><span style="color:#FF79C6;">!</span><span style="color:#F8F8F2;">element.processed) {</span></span>
<span class="line"><span style="color:#6272A4;">        // structural directives</span></span>
<span class="line"><span style="color:#50FA7B;">        processFor</span><span style="color:#F8F8F2;">(element)</span></span>
<span class="line"><span style="color:#50FA7B;">        processIf</span><span style="color:#F8F8F2;">(element)</span></span>
<span class="line"><span style="color:#50FA7B;">        processOnce</span><span style="color:#F8F8F2;">(element)</span></span>
<span class="line"><span style="color:#F8F8F2;">      }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">      if</span><span style="color:#F8F8F2;"> (</span><span style="color:#FF79C6;">!</span><span style="color:#F8F8F2;">root) {</span></span>
<span class="line"><span style="color:#F8F8F2;">        root </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> element</span></span>
<span class="line"><span style="color:#FF79C6;">        if</span><span style="color:#F8F8F2;"> (__DEV__) {</span></span>
<span class="line"><span style="color:#50FA7B;">          checkRootConstraints</span><span style="color:#F8F8F2;">(root)</span></span>
<span class="line"><span style="color:#F8F8F2;">        }</span></span>
<span class="line"><span style="color:#F8F8F2;">      }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">      if</span><span style="color:#F8F8F2;"> (</span><span style="color:#FF79C6;">!</span><span style="color:#F8F8F2;">unary) {</span></span>
<span class="line"><span style="color:#6272A4;">        // 指定当前父元素</span></span>
<span class="line"><span style="color:#6272A4;">        // end 出栈的时候 会重新指定</span></span>
<span class="line"><span style="color:#F8F8F2;">        currentParent </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> element</span></span>
<span class="line"><span style="color:#F8F8F2;">        stack.</span><span style="color:#50FA7B;">push</span><span style="color:#F8F8F2;">(element)</span></span>
<span class="line"><span style="color:#F8F8F2;">      } </span><span style="color:#FF79C6;">else</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#50FA7B;">        closeElement</span><span style="color:#F8F8F2;">(element)</span></span>
<span class="line"><span style="color:#F8F8F2;">      }</span></span>
<span class="line"><span style="color:#F8F8F2;">    },</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="文本解析" tabindex="-1"><a class="header-anchor" href="#文本解析"><span>文本解析</span></a></h2><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"></span>
<span class="line"><span style="color:#50FA7B;">    chars</span><span style="color:#F8F8F2;">(text: string, start</span><span style="color:#FF79C6;">?:</span><span style="color:#F8F8F2;"> number, end</span><span style="color:#FF79C6;">?:</span><span style="color:#F8F8F2;"> number) {</span></span>
<span class="line"><span style="color:#FF79C6;">      if</span><span style="color:#F8F8F2;"> (</span><span style="color:#FF79C6;">!</span><span style="color:#F8F8F2;">currentParent) {</span></span>
<span class="line"><span style="color:#FF79C6;">        return</span></span>
<span class="line"><span style="color:#F8F8F2;">      }</span></span>
<span class="line"><span style="color:#6272A4;">      // IE textarea placeholder bug</span></span>
<span class="line"><span style="color:#6272A4;">      /* istanbul ignore if */</span></span>
<span class="line"><span style="color:#FF79C6;">      if</span><span style="color:#F8F8F2;"> (</span></span>
<span class="line"><span style="color:#F8F8F2;">        isIE </span><span style="color:#FF79C6;">&amp;&amp;</span></span>
<span class="line"><span style="color:#F8F8F2;">        currentParent.tag </span><span style="color:#FF79C6;">===</span><span style="color:#E9F284;"> &#39;</span><span style="color:#F1FA8C;">textarea</span><span style="color:#E9F284;">&#39;</span><span style="color:#FF79C6;"> &amp;&amp;</span></span>
<span class="line"><span style="color:#F8F8F2;">        currentParent.attrsMap.placeholder </span><span style="color:#FF79C6;">===</span><span style="color:#F8F8F2;"> text</span></span>
<span class="line"><span style="color:#F8F8F2;">      ) {</span></span>
<span class="line"><span style="color:#FF79C6;">        return</span></span>
<span class="line"><span style="color:#F8F8F2;">      }</span></span>
<span class="line"><span style="color:#6272A4;">      //start push element 会将 currentParent =&gt; element</span></span>
<span class="line"><span style="color:#FF79C6;">      const</span><span style="color:#F8F8F2;"> children </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> currentParent.children</span></span>
<span class="line"><span style="color:#FF79C6;">      if</span><span style="color:#F8F8F2;"> (inPre </span><span style="color:#FF79C6;">||</span><span style="color:#F8F8F2;"> text.</span><span style="color:#50FA7B;">trim</span><span style="color:#F8F8F2;">()) {</span></span>
<span class="line"><span style="color:#F8F8F2;">        text </span><span style="color:#FF79C6;">=</span><span style="color:#50FA7B;"> isTextTag</span><span style="color:#F8F8F2;">(currentParent)</span></span>
<span class="line"><span style="color:#FF79C6;">          ?</span><span style="color:#F8F8F2;"> text</span></span>
<span class="line"><span style="color:#FF79C6;">          :</span><span style="color:#F8F8F2;"> (</span><span style="color:#50FA7B;">decodeHTMLCached</span><span style="color:#F8F8F2;">(text) </span><span style="color:#FF79C6;">as</span><span style="color:#8BE9FD;font-style:italic;"> string</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">      } </span><span style="color:#FF79C6;">else</span><span style="color:#FF79C6;"> if</span><span style="color:#F8F8F2;"> (</span><span style="color:#FF79C6;">!</span><span style="color:#F8F8F2;">children.length) {</span></span>
<span class="line"><span style="color:#6272A4;">        // remove the whitespace-only node right after an opening tag</span></span>
<span class="line"><span style="color:#F8F8F2;">        text </span><span style="color:#FF79C6;">=</span><span style="color:#E9F284;"> &#39;&#39;</span></span>
<span class="line"><span style="color:#F8F8F2;">      } </span><span style="color:#FF79C6;">else</span><span style="color:#FF79C6;"> if</span><span style="color:#F8F8F2;"> (whitespaceOption) {</span></span>
<span class="line"><span style="color:#FF79C6;">        if</span><span style="color:#F8F8F2;"> (whitespaceOption </span><span style="color:#FF79C6;">===</span><span style="color:#E9F284;"> &#39;</span><span style="color:#F1FA8C;">condense</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#6272A4;">          // in condense mode, remove the whitespace node if it contains</span></span>
<span class="line"><span style="color:#6272A4;">          // line break, otherwise condense to a single space</span></span>
<span class="line"><span style="color:#F8F8F2;">          text </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> lineBreakRE.</span><span style="color:#50FA7B;">test</span><span style="color:#F8F8F2;">(text) </span><span style="color:#FF79C6;">?</span><span style="color:#E9F284;"> &#39;&#39;</span><span style="color:#FF79C6;"> :</span><span style="color:#E9F284;"> &#39;</span><span style="color:#E9F284;"> &#39;</span></span>
<span class="line"><span style="color:#F8F8F2;">        } </span><span style="color:#FF79C6;">else</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">          text </span><span style="color:#FF79C6;">=</span><span style="color:#E9F284;"> &#39;</span><span style="color:#E9F284;"> &#39;</span></span>
<span class="line"><span style="color:#F8F8F2;">        }</span></span>
<span class="line"><span style="color:#F8F8F2;">      } </span><span style="color:#FF79C6;">else</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">        text </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> preserveWhitespace </span><span style="color:#FF79C6;">?</span><span style="color:#E9F284;"> &#39;</span><span style="color:#E9F284;"> &#39;</span><span style="color:#FF79C6;"> :</span><span style="color:#E9F284;"> &#39;&#39;</span></span>
<span class="line"><span style="color:#F8F8F2;">      }</span></span>
<span class="line"><span style="color:#FF79C6;">      if</span><span style="color:#F8F8F2;"> (text) {</span></span>
<span class="line"><span style="color:#FF79C6;">        if</span><span style="color:#F8F8F2;"> (</span><span style="color:#FF79C6;">!</span><span style="color:#F8F8F2;">inPre </span><span style="color:#FF79C6;">&amp;&amp;</span><span style="color:#F8F8F2;"> whitespaceOption </span><span style="color:#FF79C6;">===</span><span style="color:#E9F284;"> &#39;</span><span style="color:#F1FA8C;">condense</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#6272A4;">          // condense consecutive whitespaces into single space</span></span>
<span class="line"><span style="color:#F8F8F2;">          text </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> text.</span><span style="color:#50FA7B;">replace</span><span style="color:#F8F8F2;">(whitespaceRE, </span><span style="color:#E9F284;">&#39;</span><span style="color:#E9F284;"> &#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">        }</span></span>
<span class="line"><span style="color:#FF79C6;">        let</span><span style="color:#F8F8F2;"> res</span></span>
<span class="line"><span style="color:#FF79C6;">        let</span><span style="color:#F8F8F2;"> child</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> ASTNode</span><span style="color:#FF79C6;"> |</span><span style="color:#8BE9FD;font-style:italic;"> undefined</span></span>
<span class="line"><span style="color:#FF79C6;">        if</span><span style="color:#F8F8F2;"> (</span><span style="color:#FF79C6;">!</span><span style="color:#F8F8F2;">inVPre </span><span style="color:#FF79C6;">&amp;&amp;</span><span style="color:#F8F8F2;"> text </span><span style="color:#FF79C6;">!==</span><span style="color:#E9F284;"> &#39;</span><span style="color:#E9F284;"> &#39;</span><span style="color:#FF79C6;"> &amp;&amp;</span><span style="color:#F8F8F2;"> (res </span><span style="color:#FF79C6;">=</span><span style="color:#50FA7B;"> parseText</span><span style="color:#F8F8F2;">(text, delimiters))) {</span></span>
<span class="line"><span style="color:#F8F8F2;">          child </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">            type</span><span style="color:#FF79C6;">:</span><span style="color:#BD93F9;"> 2</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">            expression</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> res.expression,</span></span>
<span class="line"><span style="color:#F8F8F2;">            tokens</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> res.tokens,</span></span>
<span class="line"><span style="color:#F8F8F2;">            text</span></span>
<span class="line"><span style="color:#F8F8F2;">          }</span></span>
<span class="line"><span style="color:#F8F8F2;">        } </span><span style="color:#FF79C6;">else</span><span style="color:#FF79C6;"> if</span><span style="color:#F8F8F2;"> (</span></span>
<span class="line"><span style="color:#F8F8F2;">          text </span><span style="color:#FF79C6;">!==</span><span style="color:#E9F284;"> &#39;</span><span style="color:#E9F284;"> &#39;</span><span style="color:#FF79C6;"> ||</span></span>
<span class="line"><span style="color:#FF79C6;">          !</span><span style="color:#F8F8F2;">children.length </span><span style="color:#FF79C6;">||</span></span>
<span class="line"><span style="color:#F8F8F2;">          children[children.length </span><span style="color:#FF79C6;">-</span><span style="color:#BD93F9;"> 1</span><span style="color:#F8F8F2;">].text </span><span style="color:#FF79C6;">!==</span><span style="color:#E9F284;"> &#39;</span><span style="color:#E9F284;"> &#39;</span></span>
<span class="line"><span style="color:#F8F8F2;">        ) {</span></span>
<span class="line"><span style="color:#F8F8F2;">          child </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">            type</span><span style="color:#FF79C6;">:</span><span style="color:#BD93F9;"> 3</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">            text</span></span>
<span class="line"><span style="color:#F8F8F2;">          }</span></span>
<span class="line"><span style="color:#F8F8F2;">        }</span></span>
<span class="line"><span style="color:#FF79C6;">        if</span><span style="color:#F8F8F2;"> (child) {</span></span>
<span class="line"><span style="color:#F8F8F2;">          children.</span><span style="color:#50FA7B;">push</span><span style="color:#F8F8F2;">(child)</span></span>
<span class="line"><span style="color:#F8F8F2;">        }</span></span>
<span class="line"><span style="color:#F8F8F2;">      }</span></span>
<span class="line"><span style="color:#F8F8F2;">    },</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#6272A4;">//text = &quot;我叫{{name}}，我今年{{age}}岁了&quot;</span></span>
<span class="line"><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> res </span><span style="color:#FF79C6;">=</span><span style="color:#50FA7B;"> parseText</span><span style="color:#F8F8F2;">(text)</span></span>
<span class="line"><span style="color:#F8F8F2;">res </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">    expression</span><span style="color:#FF79C6;">:</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">我叫</span><span style="color:#E9F284;">&quot;</span><span style="color:#FF79C6;">+</span><span style="color:#50FA7B;">_s</span><span style="color:#F8F8F2;">(name)</span><span style="color:#FF79C6;">+</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">，我今年</span><span style="color:#E9F284;">&quot;</span><span style="color:#FF79C6;">+</span><span style="color:#50FA7B;">_s</span><span style="color:#F8F8F2;">(age)</span><span style="color:#FF79C6;">+</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">岁了</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">    tokens</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;">[</span></span>
<span class="line"><span style="color:#E9F284;">        &quot;</span><span style="color:#F1FA8C;">我叫</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">        {</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">@binding</span><span style="color:#E9F284;">&#39;</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> name },</span></span>
<span class="line"><span style="color:#E9F284;">        &quot;</span><span style="color:#F1FA8C;">，我今年</span><span style="color:#E9F284;">&quot;</span></span>
<span class="line"><span style="color:#F8F8F2;">        {</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">@binding</span><span style="color:#E9F284;">&#39;</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> age },</span></span>
<span class="line"><span style="color:#E9F284;">     &quot;</span><span style="color:#F1FA8C;">岁了</span><span style="color:#E9F284;">&quot;</span></span>
<span class="line"><span style="color:#F8F8F2;">    ]</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="parsetext" tabindex="-1"><a class="header-anchor" href="#parsetext"><span>parseText</span></a></h3><ul><li>判断传入的文本是否包含变量</li><li>构造 expression</li><li>构造 tokens</li></ul><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> defaultTagRE </span><span style="color:#FF79C6;">=</span><span style="color:#FF5555;"> /</span><span style="color:#F1FA8C;">\\{\\{</span><span style="color:#FFB86C;">((?:</span><span style="color:#BD93F9;">.</span><span style="color:#FF79C6;">|</span><span style="color:#BD93F9;">\\n</span><span style="color:#FFB86C;">)</span><span style="color:#FF79C6;">+?</span><span style="color:#FFB86C;">)</span><span style="color:#F1FA8C;">\\}\\}</span><span style="color:#FF5555;">/</span><span style="color:#FF79C6;">g</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> buildRegex </span><span style="color:#FF79C6;">=</span><span style="color:#50FA7B;"> cached</span><span style="color:#F8F8F2;">((</span><span style="color:#FFB86C;font-style:italic;">delimiters</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#FF79C6;">  const</span><span style="color:#F8F8F2;"> open </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> delimiters[</span><span style="color:#BD93F9;">0</span><span style="color:#F8F8F2;">].</span><span style="color:#50FA7B;">replace</span><span style="color:#F8F8F2;">(regexEscapeRE, </span><span style="color:#E9F284;">&quot;</span><span style="color:#FF79C6;">\\\\</span><span style="color:#F1FA8C;">$&amp;</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#FF79C6;">  const</span><span style="color:#F8F8F2;"> close </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> delimiters[</span><span style="color:#BD93F9;">1</span><span style="color:#F8F8F2;">].</span><span style="color:#50FA7B;">replace</span><span style="color:#F8F8F2;">(regexEscapeRE, </span><span style="color:#E9F284;">&quot;</span><span style="color:#FF79C6;">\\\\</span><span style="color:#F1FA8C;">$&amp;</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#FF79C6;">  return</span><span style="color:#FF79C6;font-weight:bold;"> new</span><span style="color:#50FA7B;"> RegExp</span><span style="color:#F8F8F2;">(open </span><span style="color:#FF79C6;">+</span><span style="color:#E9F284;"> &quot;</span><span style="color:#F1FA8C;">((?:.|</span><span style="color:#FF79C6;">\\\\</span><span style="color:#F1FA8C;">n)+?)</span><span style="color:#E9F284;">&quot;</span><span style="color:#FF79C6;"> +</span><span style="color:#F8F8F2;"> close, </span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">g</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">});</span></span>
<span class="line"><span style="color:#FF79C6;">export</span><span style="color:#FF79C6;"> function</span><span style="color:#50FA7B;"> parseText</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">text</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">delimiters</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#FF79C6;">  const</span><span style="color:#F8F8F2;"> tagRE </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> delimiters </span><span style="color:#FF79C6;">?</span><span style="color:#50FA7B;"> buildRegex</span><span style="color:#F8F8F2;">(delimiters) </span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> defaultTagRE;</span></span>
<span class="line"><span style="color:#FF79C6;">  if</span><span style="color:#F8F8F2;"> (</span><span style="color:#FF79C6;">!</span><span style="color:#F8F8F2;">tagRE.</span><span style="color:#50FA7B;">test</span><span style="color:#F8F8F2;">(text)) {</span></span>
<span class="line"><span style="color:#FF79C6;">    return</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#FF79C6;">  const</span><span style="color:#F8F8F2;"> tokens </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> [];</span></span>
<span class="line"><span style="color:#FF79C6;">  const</span><span style="color:#F8F8F2;"> rawTokens </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> [];</span></span>
<span class="line"><span style="color:#6272A4;">  /**</span></span>
<span class="line"><span style="color:#6272A4;">   * let lastIndex = tagRE.lastIndex = 0</span></span>
<span class="line"><span style="color:#6272A4;">   * 上面这行代码等同于下面这两行代码:</span></span>
<span class="line"><span style="color:#6272A4;">   * tagRE.lastIndex = 0</span></span>
<span class="line"><span style="color:#6272A4;">   * let lastIndex = tagRE.lastIndex</span></span>
<span class="line"><span style="color:#6272A4;">   */</span></span>
<span class="line"><span style="color:#FF79C6;">  let</span><span style="color:#F8F8F2;"> lastIndex </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> (tagRE.lastIndex </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> 0</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#FF79C6;">  let</span><span style="color:#F8F8F2;"> match, index, tokenValue;</span></span>
<span class="line"><span style="color:#FF79C6;">  while</span><span style="color:#F8F8F2;"> ((match </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> tagRE.</span><span style="color:#50FA7B;">exec</span><span style="color:#F8F8F2;">(text))) {</span></span>
<span class="line"><span style="color:#F8F8F2;">    index </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> match.index;</span></span>
<span class="line"><span style="color:#6272A4;">    // push text token</span></span>
<span class="line"><span style="color:#FF79C6;">    if</span><span style="color:#F8F8F2;"> (index </span><span style="color:#FF79C6;">&gt;</span><span style="color:#F8F8F2;"> lastIndex) {</span></span>
<span class="line"><span style="color:#6272A4;">      // 先把&#39;{{&#39;前面的文本放入tokens中
      rawTokens.push((tokenValue = text.slice(lastIndex, index)));
      tokens.push(JSON.stringify(tokenValue));
    }
    // tag token
    // 取出&#39;{{ }}&#39;中间的变量exp</span></span>
<span class="line"><span style="color:#FF79C6;">    const</span><span style="color:#F8F8F2;"> exp </span><span style="color:#FF79C6;">=</span><span style="color:#50FA7B;"> parseFilters</span><span style="color:#F8F8F2;">(match[</span><span style="color:#BD93F9;">1</span><span style="color:#F8F8F2;">].</span><span style="color:#50FA7B;">trim</span><span style="color:#F8F8F2;">());</span></span>
<span class="line"><span style="color:#6272A4;">    // 把变量exp改成_s(exp)形式也放入tokens中</span></span>
<span class="line"><span style="color:#F8F8F2;">    tokens.</span><span style="color:#50FA7B;">push</span><span style="color:#F8F8F2;">(</span><span style="color:#F1FA8C;">\`_s(</span><span style="color:#FF79C6;">\${</span><span style="color:#F8F8F2;">exp</span><span style="color:#FF79C6;">}</span><span style="color:#F1FA8C;">)\`</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">    rawTokens.</span><span style="color:#50FA7B;">push</span><span style="color:#F8F8F2;">({ </span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">@binding</span><span style="color:#E9F284;">&quot;</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> exp });</span></span>
<span class="line"><span style="color:#6272A4;">    // 设置lastIndex 以保证下一轮循环时，只从&#39;}}&#39;后面再开始匹配正则</span></span>
<span class="line"><span style="color:#F8F8F2;">    lastIndex </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> index </span><span style="color:#FF79C6;">+</span><span style="color:#F8F8F2;"> match[</span><span style="color:#BD93F9;">0</span><span style="color:#F8F8F2;">].length;</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#6272A4;">  // 当剩下的text不再被正则匹配上时，表示所有变量已经处理完毕</span></span>
<span class="line"><span style="color:#6272A4;">  // 此时如果lastIndex &lt; text.length，表示在最后一个变量后面还有文本</span></span>
<span class="line"><span style="color:#6272A4;">  // 最后将后面的文本再加入到tokens中</span></span>
<span class="line"><span style="color:#FF79C6;">  if</span><span style="color:#F8F8F2;"> (lastIndex </span><span style="color:#FF79C6;">&lt;</span><span style="color:#F8F8F2;"> text.length) {</span></span>
<span class="line"><span style="color:#F8F8F2;">    rawTokens.</span><span style="color:#50FA7B;">push</span><span style="color:#F8F8F2;">((tokenValue </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> text.</span><span style="color:#50FA7B;">slice</span><span style="color:#F8F8F2;">(lastIndex)));</span></span>
<span class="line"><span style="color:#F8F8F2;">    tokens.</span><span style="color:#50FA7B;">push</span><span style="color:#F8F8F2;">(</span><span style="color:#BD93F9;">JSON</span><span style="color:#F8F8F2;">.</span><span style="color:#50FA7B;">stringify</span><span style="color:#F8F8F2;">(tokenValue));</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">  // 最后把数组tokens中的所有元素用&#39;+&#39;拼接起来</span></span>
<span class="line"><span style="color:#FF79C6;">  return</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">    expression</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> tokens.</span><span style="color:#50FA7B;">join</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">+</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">),</span></span>
<span class="line"><span style="color:#F8F8F2;">    tokens</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> rawTokens,</span></span>
<span class="line"><span style="color:#F8F8F2;">  };</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="optimize" tabindex="-1"><a class="header-anchor" href="#optimize"><span>optimize</span></a></h2><p>在优化阶段将所有静态节点都打上标记，这样在 patch 过程中就可以跳过对比这些节点。</p><ul><li>在 AST 中找出所有静态节点并打上标记；</li><li>在 AST 中找出所有静态根节点并打上标记；</li></ul><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">export</span><span style="color:#FF79C6;"> function</span><span style="color:#50FA7B;"> optimize</span><span style="color:#F8F8F2;">(</span></span>
<span class="line"><span style="color:#FFB86C;font-style:italic;">  root</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> ASTElement</span><span style="color:#FF79C6;"> |</span><span style="color:#8BE9FD;font-style:italic;"> null</span><span style="color:#FF79C6;"> |</span><span style="color:#8BE9FD;font-style:italic;"> undefined</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#FFB86C;font-style:italic;">  options</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> CompilerOptions</span></span>
<span class="line"><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#FF79C6;">  if</span><span style="color:#F8F8F2;"> (</span><span style="color:#FF79C6;">!</span><span style="color:#F8F8F2;">root) </span><span style="color:#FF79C6;">return</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">  isStaticKey </span><span style="color:#FF79C6;">=</span><span style="color:#50FA7B;"> genStaticKeysCached</span><span style="color:#F8F8F2;">(options.staticKeys </span><span style="color:#FF79C6;">||</span><span style="color:#E9F284;"> &quot;&quot;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">  isPlatformReservedTag </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> options.isReservedTag </span><span style="color:#FF79C6;">||</span><span style="color:#F8F8F2;"> no;</span></span>
<span class="line"><span style="color:#6272A4;">  // 标记静态节点</span></span>
<span class="line"><span style="color:#50FA7B;">  markStatic</span><span style="color:#F8F8F2;">(root);</span></span>
<span class="line"><span style="color:#6272A4;">  // 标记静态根节点</span></span>
<span class="line"><span style="color:#50FA7B;">  markStaticRoots</span><span style="color:#F8F8F2;">(root, </span><span style="color:#BD93F9;">false</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="markstatic" tabindex="-1"><a class="header-anchor" href="#markstatic"><span>markStatic</span></a></h3><p><strong>从根节点开始，先标记根节点是否为静态节点，然后看根节点如果是元素节点，那么就去向下递归它的子节点，子节点如果还有子节点那就继续向下递归，直到标记完所有节点。</strong></p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">function</span><span style="color:#50FA7B;"> markStatic</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">node</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> ASTNode</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">  node.static </span><span style="color:#FF79C6;">=</span><span style="color:#50FA7B;"> isStatic</span><span style="color:#F8F8F2;">(node);</span></span>
<span class="line"><span style="color:#FF79C6;">  if</span><span style="color:#F8F8F2;"> (node.type </span><span style="color:#FF79C6;">===</span><span style="color:#BD93F9;"> 1</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#6272A4;">    // do not make component slot content static. this avoids</span></span>
<span class="line"><span style="color:#6272A4;">    // 1. components not able to mutate slot nodes</span></span>
<span class="line"><span style="color:#6272A4;">    // 2. static slot content fails for hot-reloading</span></span>
<span class="line"><span style="color:#FF79C6;">    if</span><span style="color:#F8F8F2;"> (</span></span>
<span class="line"><span style="color:#FF79C6;">      !</span><span style="color:#50FA7B;">isPlatformReservedTag</span><span style="color:#F8F8F2;">(node.tag) </span><span style="color:#FF79C6;">&amp;&amp;</span></span>
<span class="line"><span style="color:#F8F8F2;">      node.tag </span><span style="color:#FF79C6;">!==</span><span style="color:#E9F284;"> &quot;</span><span style="color:#F1FA8C;">slot</span><span style="color:#E9F284;">&quot;</span><span style="color:#FF79C6;"> &amp;&amp;</span></span>
<span class="line"><span style="color:#F8F8F2;">      node.attrsMap[</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">inline-template</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">] </span><span style="color:#FF79C6;">==</span><span style="color:#BD93F9;"> null</span></span>
<span class="line"><span style="color:#F8F8F2;">    ) {</span></span>
<span class="line"><span style="color:#FF79C6;">      return</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#FF79C6;">    for</span><span style="color:#F8F8F2;"> (</span><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> i </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> 0</span><span style="color:#F8F8F2;">, l </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> node.children.length; i </span><span style="color:#FF79C6;">&lt;</span><span style="color:#F8F8F2;"> l; i</span><span style="color:#FF79C6;">++</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#FF79C6;">      const</span><span style="color:#F8F8F2;"> child </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> node.children[i];</span></span>
<span class="line"><span style="color:#50FA7B;">      markStatic</span><span style="color:#F8F8F2;">(child);</span></span>
<span class="line"><span style="color:#FF79C6;">      if</span><span style="color:#F8F8F2;"> (</span><span style="color:#FF79C6;">!</span><span style="color:#F8F8F2;">child.static) {</span></span>
<span class="line"><span style="color:#F8F8F2;">        node.static </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> false</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">      }</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#FF79C6;">    if</span><span style="color:#F8F8F2;"> (node.ifConditions) {</span></span>
<span class="line"><span style="color:#FF79C6;">      for</span><span style="color:#F8F8F2;"> (</span><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> i </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> 1</span><span style="color:#F8F8F2;">, l </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> node.ifConditions.length; i </span><span style="color:#FF79C6;">&lt;</span><span style="color:#F8F8F2;"> l; i</span><span style="color:#FF79C6;">++</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#FF79C6;">        const</span><span style="color:#F8F8F2;"> block </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> node.ifConditions[i].block;</span></span>
<span class="line"><span style="color:#50FA7B;">        markStatic</span><span style="color:#F8F8F2;">(block);</span></span>
<span class="line"><span style="color:#FF79C6;">        if</span><span style="color:#F8F8F2;"> (</span><span style="color:#FF79C6;">!</span><span style="color:#F8F8F2;">block.static) {</span></span>
<span class="line"><span style="color:#F8F8F2;">          node.static </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> false</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">        }</span></span>
<span class="line"><span style="color:#F8F8F2;">      }</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><table><thead><tr><th>type 取值</th><th style="text-align:center;">对应的 AST 节点类型</th></tr></thead><tbody><tr><td>1</td><td style="text-align:center;">元素节点</td></tr><tr><td>2</td><td style="text-align:center;">包含变量的动态文本节点</td></tr><tr><td>3</td><td style="text-align:center;">不包含变量的纯文本节点</td></tr></tbody></table><ul><li>如果节点使用了 v-pre 指令，那就断定它是静态节点；</li><li>如果节点没有使用 v-pre 指令，那它要成为静态节点必须满足： <ul><li>不能使用动态绑定语法，即标签上不能有 v-、@、:开头的属性；</li><li>不能使用 v-if、v-else、v-for 指令；</li><li>不能是内置组件，即标签名不能是 slot 和 component；</li><li>标签名必须是平台保留标签，即不能是组件；</li><li>当前节点的父节点不能是带有 v-for 的 template 标签；</li><li>节点的所有属性的 key 都必须是静态节点才有的 key，注：静态节点的 key 是有限的，它只能是 type,tag,attrsList,attrsMap,plain,parent,children,attrs 之一；</li></ul></li></ul><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">function</span><span style="color:#50FA7B;"> isStatic</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">node</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> ASTNode</span><span style="color:#F8F8F2;">)</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> boolean</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#FF79C6;">  if</span><span style="color:#F8F8F2;"> (node.type </span><span style="color:#FF79C6;">===</span><span style="color:#BD93F9;"> 2</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#6272A4;">    // 包含变量的动态文本节点</span></span>
<span class="line"><span style="color:#FF79C6;">    return</span><span style="color:#BD93F9;"> false</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#FF79C6;">  if</span><span style="color:#F8F8F2;"> (node.type </span><span style="color:#FF79C6;">===</span><span style="color:#BD93F9;"> 3</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#6272A4;">    // 不包含变量的纯文本节点</span></span>
<span class="line"><span style="color:#FF79C6;">    return</span><span style="color:#BD93F9;"> true</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#FF79C6;">  return</span><span style="color:#FF79C6;"> !!</span><span style="color:#F8F8F2;">(</span></span>
<span class="line"><span style="color:#F8F8F2;">    node.pre </span><span style="color:#FF79C6;">||</span></span>
<span class="line"><span style="color:#F8F8F2;">    (</span><span style="color:#FF79C6;">!</span><span style="color:#F8F8F2;">node.hasBindings </span><span style="color:#FF79C6;">&amp;&amp;</span><span style="color:#6272A4;"> // no dynamic bindings</span></span>
<span class="line"><span style="color:#FF79C6;">      !</span><span style="color:#F8F8F2;">node.if </span><span style="color:#FF79C6;">&amp;&amp;</span></span>
<span class="line"><span style="color:#FF79C6;">      !</span><span style="color:#F8F8F2;">node.for </span><span style="color:#FF79C6;">&amp;&amp;</span><span style="color:#6272A4;"> // not v-if or v-for or v-else</span></span>
<span class="line"><span style="color:#FF79C6;">      !</span><span style="color:#50FA7B;">isBuiltInTag</span><span style="color:#F8F8F2;">(node.tag) </span><span style="color:#FF79C6;">&amp;&amp;</span><span style="color:#6272A4;"> // not a built-in</span></span>
<span class="line"><span style="color:#50FA7B;">      isPlatformReservedTag</span><span style="color:#F8F8F2;">(node.tag) </span><span style="color:#FF79C6;">&amp;&amp;</span><span style="color:#6272A4;"> // not a component</span></span>
<span class="line"><span style="color:#FF79C6;">      !</span><span style="color:#50FA7B;">isDirectChildOfTemplateFor</span><span style="color:#F8F8F2;">(node) </span><span style="color:#FF79C6;">&amp;&amp;</span></span>
<span class="line"><span style="color:#F8F8F2;">      Object.</span><span style="color:#50FA7B;">keys</span><span style="color:#F8F8F2;">(node).</span><span style="color:#50FA7B;">every</span><span style="color:#F8F8F2;">(isStaticKey))</span></span>
<span class="line"><span style="color:#F8F8F2;">  );</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="markstaticroots" tabindex="-1"><a class="header-anchor" href="#markstaticroots"><span>markStaticRoots</span></a></h3><ul><li>节点本身必须是静态节点；</li><li>必须拥有子节点 children；</li><li>子节点不能只是只有一个文本节点； 否则的话，对它的优化成本将大于优化后带来的收益。</li></ul><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">function</span><span style="color:#50FA7B;"> markStaticRoots</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">node</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> ASTNode</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">isInFor</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> boolean</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#FF79C6;">  if</span><span style="color:#F8F8F2;"> (node.type </span><span style="color:#FF79C6;">===</span><span style="color:#BD93F9;"> 1</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#FF79C6;">    if</span><span style="color:#F8F8F2;"> (node.static </span><span style="color:#FF79C6;">||</span><span style="color:#F8F8F2;"> node.once) {</span></span>
<span class="line"><span style="color:#F8F8F2;">      node.staticInFor </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> isInFor;</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#6272A4;">    // For a node to qualify as a static root, it should have children that</span></span>
<span class="line"><span style="color:#6272A4;">    // are not just static text. Otherwise the cost of hoisting out will</span></span>
<span class="line"><span style="color:#6272A4;">    // outweigh the benefits and it&#39;s better off to just always render it fresh.</span></span>
<span class="line"><span style="color:#FF79C6;">    if</span><span style="color:#F8F8F2;"> (</span></span>
<span class="line"><span style="color:#F8F8F2;">      node.static </span><span style="color:#FF79C6;">&amp;&amp;</span></span>
<span class="line"><span style="color:#F8F8F2;">      node.children.length </span><span style="color:#FF79C6;">&amp;&amp;</span></span>
<span class="line"><span style="color:#FF79C6;">      !</span><span style="color:#F8F8F2;">(node.children.length </span><span style="color:#FF79C6;">===</span><span style="color:#BD93F9;"> 1</span><span style="color:#FF79C6;"> &amp;&amp;</span><span style="color:#F8F8F2;"> node.children[</span><span style="color:#BD93F9;">0</span><span style="color:#F8F8F2;">].type </span><span style="color:#FF79C6;">===</span><span style="color:#BD93F9;"> 3</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">    ) {</span></span>
<span class="line"><span style="color:#F8F8F2;">      node.staticRoot </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> true</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#FF79C6;">      return</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">    } </span><span style="color:#FF79C6;">else</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">      node.staticRoot </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> false</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#FF79C6;">    if</span><span style="color:#F8F8F2;"> (node.children) {</span></span>
<span class="line"><span style="color:#FF79C6;">      for</span><span style="color:#F8F8F2;"> (</span><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> i </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> 0</span><span style="color:#F8F8F2;">, l </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> node.children.length; i </span><span style="color:#FF79C6;">&lt;</span><span style="color:#F8F8F2;"> l; i</span><span style="color:#FF79C6;">++</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#50FA7B;">        markStaticRoots</span><span style="color:#F8F8F2;">(node.children[i], isInFor </span><span style="color:#FF79C6;">||</span><span style="color:#FF79C6;"> !!</span><span style="color:#F8F8F2;">node.for);</span></span>
<span class="line"><span style="color:#F8F8F2;">      }</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#FF79C6;">    if</span><span style="color:#F8F8F2;"> (node.ifConditions) {</span></span>
<span class="line"><span style="color:#FF79C6;">      for</span><span style="color:#F8F8F2;"> (</span><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> i </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> 1</span><span style="color:#F8F8F2;">, l </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> node.ifConditions.length; i </span><span style="color:#FF79C6;">&lt;</span><span style="color:#F8F8F2;"> l; i</span><span style="color:#FF79C6;">++</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#50FA7B;">        markStaticRoots</span><span style="color:#F8F8F2;">(node.ifConditions[i].block, isInFor);</span></span>
<span class="line"><span style="color:#F8F8F2;">      }</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="generate" tabindex="-1"><a class="header-anchor" href="#generate"><span>generate</span></a></h2><p>AST =&gt; render <code>template</code></p><div class="language-html line-numbers-mode" data-highlighter="shiki" data-ext="html" data-title="html" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#F8F8F2;">&lt;</span><span style="color:#FF79C6;">template</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">  &lt;</span><span style="color:#FF79C6;">div</span><span style="color:#50FA7B;font-style:italic;"> id</span><span style="color:#FF79C6;">=</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">app</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">    &lt;</span><span style="color:#FF79C6;">input</span><span style="color:#50FA7B;font-style:italic;"> v-focus</span><span style="color:#F8F8F2;"> /&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">  &lt;/</span><span style="color:#FF79C6;">div</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">&lt;/</span><span style="color:#FF79C6;">template</span><span style="color:#F8F8F2;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>AST</code><img src="`+r+`" alt="" loading="lazy"><br><code>render</code></p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#50FA7B;">_c</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">div</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">, { attrs</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> { id</span><span style="color:#FF79C6;">:</span><span style="color:#E9F284;"> &quot;</span><span style="color:#F1FA8C;">app</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;"> } }, [</span></span>
<span class="line"><span style="color:#50FA7B;">  _c</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">input</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">, { directives</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> [{ name</span><span style="color:#FF79C6;">:</span><span style="color:#E9F284;"> &quot;</span><span style="color:#F1FA8C;">focus</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">, rawName</span><span style="color:#FF79C6;">:</span><span style="color:#E9F284;"> &quot;</span><span style="color:#F1FA8C;">v-focus</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;"> }] }),</span></span>
<span class="line"><span style="color:#F8F8F2;">]);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> code </span><span style="color:#FF79C6;">=</span><span style="color:#50FA7B;"> generate</span><span style="color:#F8F8F2;">(ast, options);</span></span>
<span class="line"><span style="color:#FF79C6;">return</span><span style="color:#F8F8F2;"> { render</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> code.render };</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">export</span><span style="color:#FF79C6;"> function</span><span style="color:#50FA7B;"> generate</span><span style="color:#F8F8F2;">(</span></span>
<span class="line"><span style="color:#FFB86C;font-style:italic;">  ast</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> ASTElement</span><span style="color:#FF79C6;"> |</span><span style="color:#8BE9FD;font-style:italic;"> void</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#FFB86C;font-style:italic;">  options</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> CompilerOptions</span></span>
<span class="line"><span style="color:#F8F8F2;">)</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> CodegenResult</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#FF79C6;">  const</span><span style="color:#F8F8F2;"> state </span><span style="color:#FF79C6;">=</span><span style="color:#FF79C6;font-weight:bold;"> new</span><span style="color:#50FA7B;"> CodegenState</span><span style="color:#F8F8F2;">(options);</span></span>
<span class="line"><span style="color:#FF79C6;">  const</span><span style="color:#F8F8F2;"> code </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> ast </span><span style="color:#FF79C6;">?</span><span style="color:#50FA7B;"> genSSRElement</span><span style="color:#F8F8F2;">(ast, state) </span><span style="color:#FF79C6;">:</span><span style="color:#E9F284;"> &#39;</span><span style="color:#F1FA8C;">_c(&quot;div&quot;)</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#FF79C6;">  return</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">    render</span><span style="color:#FF79C6;">:</span><span style="color:#F1FA8C;"> \`with(this){return </span><span style="color:#FF79C6;">\${</span><span style="color:#F8F8F2;">code</span><span style="color:#FF79C6;">}</span><span style="color:#F1FA8C;">}\`</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">    staticRenderFns</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> state.staticRenderFns,</span></span>
<span class="line"><span style="color:#F8F8F2;">  };</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">function</span><span style="color:#50FA7B;"> genSSRElement</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">el</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> ASTElement</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">state</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> CodegenState</span><span style="color:#F8F8F2;">)</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> string</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#FF79C6;">  if</span><span style="color:#F8F8F2;"> (el.for </span><span style="color:#FF79C6;">&amp;&amp;</span><span style="color:#FF79C6;"> !</span><span style="color:#F8F8F2;">el.forProcessed) {</span></span>
<span class="line"><span style="color:#FF79C6;">    return</span><span style="color:#50FA7B;"> genFor</span><span style="color:#F8F8F2;">(el, state, genSSRElement);</span></span>
<span class="line"><span style="color:#F8F8F2;">  } </span><span style="color:#FF79C6;">else</span><span style="color:#FF79C6;"> if</span><span style="color:#F8F8F2;"> (el.if </span><span style="color:#FF79C6;">&amp;&amp;</span><span style="color:#FF79C6;"> !</span><span style="color:#F8F8F2;">el.ifProcessed) {</span></span>
<span class="line"><span style="color:#FF79C6;">    return</span><span style="color:#50FA7B;"> genIf</span><span style="color:#F8F8F2;">(el, state, genSSRElement);</span></span>
<span class="line"><span style="color:#F8F8F2;">  } </span><span style="color:#FF79C6;">else</span><span style="color:#FF79C6;"> if</span><span style="color:#F8F8F2;"> (el.tag </span><span style="color:#FF79C6;">===</span><span style="color:#E9F284;"> &quot;</span><span style="color:#F1FA8C;">template</span><span style="color:#E9F284;">&quot;</span><span style="color:#FF79C6;"> &amp;&amp;</span><span style="color:#FF79C6;"> !</span><span style="color:#F8F8F2;">el.slotTarget) {</span></span>
<span class="line"><span style="color:#FF79C6;">    return</span><span style="color:#F8F8F2;"> el.ssrOptimizability </span><span style="color:#FF79C6;">===</span><span style="color:#F8F8F2;"> optimizability.</span><span style="color:#BD93F9;">FULL</span></span>
<span class="line"><span style="color:#FF79C6;">      ?</span><span style="color:#50FA7B;"> genChildrenAsStringNode</span><span style="color:#F8F8F2;">(el, state)</span></span>
<span class="line"><span style="color:#FF79C6;">      :</span><span style="color:#50FA7B;"> genSSRChildren</span><span style="color:#F8F8F2;">(el, state) </span><span style="color:#FF79C6;">||</span><span style="color:#E9F284;"> &quot;</span><span style="color:#F1FA8C;">void 0</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">  switch</span><span style="color:#F8F8F2;"> (el.ssrOptimizability) {</span></span>
<span class="line"><span style="color:#FF79C6;">    case</span><span style="color:#F8F8F2;"> optimizability.</span><span style="color:#BD93F9;">FULL</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#6272A4;">      // stringify whole tree</span></span>
<span class="line"><span style="color:#FF79C6;">      return</span><span style="color:#50FA7B;"> genStringElement</span><span style="color:#F8F8F2;">(el, state);</span></span>
<span class="line"><span style="color:#FF79C6;">    case</span><span style="color:#F8F8F2;"> optimizability.</span><span style="color:#BD93F9;">SELF</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#6272A4;">      // stringify self and check children</span></span>
<span class="line"><span style="color:#FF79C6;">      return</span><span style="color:#50FA7B;"> genStringElementWithChildren</span><span style="color:#F8F8F2;">(el, state);</span></span>
<span class="line"><span style="color:#FF79C6;">    case</span><span style="color:#F8F8F2;"> optimizability.</span><span style="color:#BD93F9;">CHILDREN</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#6272A4;">      // generate self as VNode and stringify children</span></span>
<span class="line"><span style="color:#FF79C6;">      return</span><span style="color:#50FA7B;"> genNormalElement</span><span style="color:#F8F8F2;">(el, state, </span><span style="color:#BD93F9;">true</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#FF79C6;">    case</span><span style="color:#F8F8F2;"> optimizability.</span><span style="color:#BD93F9;">PARTIAL</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#6272A4;">      // generate self as VNode and check children</span></span>
<span class="line"><span style="color:#FF79C6;">      return</span><span style="color:#50FA7B;"> genNormalElement</span><span style="color:#F8F8F2;">(el, state, </span><span style="color:#BD93F9;">false</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#FF79C6;">    default</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#6272A4;">      // bail whole tree</span></span>
<span class="line"><span style="color:#FF79C6;">      return</span><span style="color:#50FA7B;"> genElement</span><span style="color:#F8F8F2;">(el, state);</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>genElement</code></p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">export</span><span style="color:#FF79C6;"> function</span><span style="color:#50FA7B;"> genElement</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">el</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> ASTElement</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">state</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> CodegenState</span><span style="color:#F8F8F2;">)</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> string</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#FF79C6;">  if</span><span style="color:#F8F8F2;"> (el.parent) {</span></span>
<span class="line"><span style="color:#F8F8F2;">    el.pre </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> el.pre </span><span style="color:#FF79C6;">||</span><span style="color:#F8F8F2;"> el.parent.pre;</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">  if</span><span style="color:#F8F8F2;"> (el.staticRoot </span><span style="color:#FF79C6;">&amp;&amp;</span><span style="color:#FF79C6;"> !</span><span style="color:#F8F8F2;">el.staticProcessed) {</span></span>
<span class="line"><span style="color:#FF79C6;">    return</span><span style="color:#50FA7B;"> genStatic</span><span style="color:#F8F8F2;">(el, state);</span></span>
<span class="line"><span style="color:#F8F8F2;">  } </span><span style="color:#FF79C6;">else</span><span style="color:#FF79C6;"> if</span><span style="color:#F8F8F2;"> (el.once </span><span style="color:#FF79C6;">&amp;&amp;</span><span style="color:#FF79C6;"> !</span><span style="color:#F8F8F2;">el.onceProcessed) {</span></span>
<span class="line"><span style="color:#FF79C6;">    return</span><span style="color:#50FA7B;"> genOnce</span><span style="color:#F8F8F2;">(el, state);</span></span>
<span class="line"><span style="color:#F8F8F2;">  } </span><span style="color:#FF79C6;">else</span><span style="color:#FF79C6;"> if</span><span style="color:#F8F8F2;"> (el.for </span><span style="color:#FF79C6;">&amp;&amp;</span><span style="color:#FF79C6;"> !</span><span style="color:#F8F8F2;">el.forProcessed) {</span></span>
<span class="line"><span style="color:#FF79C6;">    return</span><span style="color:#50FA7B;"> genFor</span><span style="color:#F8F8F2;">(el, state);</span></span>
<span class="line"><span style="color:#F8F8F2;">  } </span><span style="color:#FF79C6;">else</span><span style="color:#FF79C6;"> if</span><span style="color:#F8F8F2;"> (el.if </span><span style="color:#FF79C6;">&amp;&amp;</span><span style="color:#FF79C6;"> !</span><span style="color:#F8F8F2;">el.ifProcessed) {</span></span>
<span class="line"><span style="color:#FF79C6;">    return</span><span style="color:#50FA7B;"> genIf</span><span style="color:#F8F8F2;">(el, state);</span></span>
<span class="line"><span style="color:#F8F8F2;">  } </span><span style="color:#FF79C6;">else</span><span style="color:#FF79C6;"> if</span><span style="color:#F8F8F2;"> (el.tag </span><span style="color:#FF79C6;">===</span><span style="color:#E9F284;"> &quot;</span><span style="color:#F1FA8C;">template</span><span style="color:#E9F284;">&quot;</span><span style="color:#FF79C6;"> &amp;&amp;</span><span style="color:#FF79C6;"> !</span><span style="color:#F8F8F2;">el.slotTarget </span><span style="color:#FF79C6;">&amp;&amp;</span><span style="color:#FF79C6;"> !</span><span style="color:#F8F8F2;">state.pre) {</span></span>
<span class="line"><span style="color:#FF79C6;">    return</span><span style="color:#50FA7B;"> genChildren</span><span style="color:#F8F8F2;">(el, state) </span><span style="color:#FF79C6;">||</span><span style="color:#E9F284;"> &quot;</span><span style="color:#F1FA8C;">void 0</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">  } </span><span style="color:#FF79C6;">else</span><span style="color:#FF79C6;"> if</span><span style="color:#F8F8F2;"> (el.tag </span><span style="color:#FF79C6;">===</span><span style="color:#E9F284;"> &quot;</span><span style="color:#F1FA8C;">slot</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#FF79C6;">    return</span><span style="color:#50FA7B;"> genSlot</span><span style="color:#F8F8F2;">(el, state);</span></span>
<span class="line"><span style="color:#F8F8F2;">  } </span><span style="color:#FF79C6;">else</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#6272A4;">    // component or element</span></span>
<span class="line"><span style="color:#FF79C6;">    let</span><span style="color:#F8F8F2;"> code;</span></span>
<span class="line"><span style="color:#FF79C6;">    if</span><span style="color:#F8F8F2;"> (el.component) {</span></span>
<span class="line"><span style="color:#F8F8F2;">      code </span><span style="color:#FF79C6;">=</span><span style="color:#50FA7B;"> genComponent</span><span style="color:#F8F8F2;">(el.component, el, state);</span></span>
<span class="line"><span style="color:#F8F8F2;">    } </span><span style="color:#FF79C6;">else</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#FF79C6;">      let</span><span style="color:#F8F8F2;"> data;</span></span>
<span class="line"><span style="color:#FF79C6;">      if</span><span style="color:#F8F8F2;"> (</span><span style="color:#FF79C6;">!</span><span style="color:#F8F8F2;">el.plain </span><span style="color:#FF79C6;">||</span><span style="color:#F8F8F2;"> (el.pre </span><span style="color:#FF79C6;">&amp;&amp;</span><span style="color:#F8F8F2;"> state.</span><span style="color:#50FA7B;">maybeComponent</span><span style="color:#F8F8F2;">(el))) {</span></span>
<span class="line"><span style="color:#F8F8F2;">        data </span><span style="color:#FF79C6;">=</span><span style="color:#50FA7B;"> genData</span><span style="color:#F8F8F2;">(el, state);</span></span>
<span class="line"><span style="color:#F8F8F2;">      }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">      let</span><span style="color:#F8F8F2;"> tag</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> string</span><span style="color:#FF79C6;"> |</span><span style="color:#8BE9FD;font-style:italic;"> undefined</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#6272A4;">      // check if this is a component in &lt;script setup&gt;</span></span>
<span class="line"><span style="color:#FF79C6;">      const</span><span style="color:#F8F8F2;"> bindings </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> state.options.bindings;</span></span>
<span class="line"><span style="color:#FF79C6;">      if</span><span style="color:#F8F8F2;"> (bindings </span><span style="color:#FF79C6;">&amp;&amp;</span><span style="color:#F8F8F2;"> bindings.__isScriptSetup </span><span style="color:#FF79C6;">!==</span><span style="color:#BD93F9;"> false</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">        tag </span><span style="color:#FF79C6;">=</span></span>
<span class="line"><span style="color:#50FA7B;">          checkBindingType</span><span style="color:#F8F8F2;">(bindings, el.tag) </span><span style="color:#FF79C6;">||</span></span>
<span class="line"><span style="color:#50FA7B;">          checkBindingType</span><span style="color:#F8F8F2;">(bindings, </span><span style="color:#50FA7B;">camelize</span><span style="color:#F8F8F2;">(el.tag)) </span><span style="color:#FF79C6;">||</span></span>
<span class="line"><span style="color:#50FA7B;">          checkBindingType</span><span style="color:#F8F8F2;">(bindings, </span><span style="color:#50FA7B;">capitalize</span><span style="color:#F8F8F2;">(</span><span style="color:#50FA7B;">camelize</span><span style="color:#F8F8F2;">(el.tag)));</span></span>
<span class="line"><span style="color:#F8F8F2;">      }</span></span>
<span class="line"><span style="color:#FF79C6;">      if</span><span style="color:#F8F8F2;"> (</span><span style="color:#FF79C6;">!</span><span style="color:#F8F8F2;">tag) tag </span><span style="color:#FF79C6;">=</span><span style="color:#F1FA8C;"> \`&#39;</span><span style="color:#FF79C6;">\${</span><span style="color:#F8F8F2;">el.tag</span><span style="color:#FF79C6;">}</span><span style="color:#F1FA8C;">&#39;\`</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">      const</span><span style="color:#F8F8F2;"> children </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> el.inlineTemplate </span><span style="color:#FF79C6;">?</span><span style="color:#BD93F9;"> null</span><span style="color:#FF79C6;"> :</span><span style="color:#50FA7B;"> genChildren</span><span style="color:#F8F8F2;">(el, state, </span><span style="color:#BD93F9;">true</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">      code </span><span style="color:#FF79C6;">=</span><span style="color:#F1FA8C;"> \`_c(</span><span style="color:#FF79C6;">\${</span><span style="color:#F8F8F2;">tag</span><span style="color:#FF79C6;">}\${</span></span>
<span class="line"><span style="color:#F8F8F2;">        data</span><span style="color:#FF79C6;"> ?</span><span style="color:#F1FA8C;"> \`,</span><span style="color:#FF79C6;">\${</span><span style="color:#F8F8F2;">data</span><span style="color:#FF79C6;">}</span><span style="color:#F1FA8C;">\`</span><span style="color:#FF79C6;"> :</span><span style="color:#E9F284;"> &quot;&quot;</span><span style="color:#6272A4;"> // data</span></span>
<span class="line"><span style="color:#FF79C6;">      }\${</span></span>
<span class="line"><span style="color:#F8F8F2;">        children</span><span style="color:#FF79C6;"> ?</span><span style="color:#F1FA8C;"> \`,</span><span style="color:#FF79C6;">\${</span><span style="color:#F8F8F2;">children</span><span style="color:#FF79C6;">}</span><span style="color:#F1FA8C;">\`</span><span style="color:#FF79C6;"> :</span><span style="color:#E9F284;"> &quot;&quot;</span><span style="color:#6272A4;"> // children</span></span>
<span class="line"><span style="color:#FF79C6;">      }</span><span style="color:#F1FA8C;">)\`</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#6272A4;">    // module transforms</span></span>
<span class="line"><span style="color:#FF79C6;">    for</span><span style="color:#F8F8F2;"> (</span><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> i </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> 0</span><span style="color:#F8F8F2;">; i </span><span style="color:#FF79C6;">&lt;</span><span style="color:#F8F8F2;"> state.transforms.length; i</span><span style="color:#FF79C6;">++</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">      code </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> state.transforms[i](el, code);</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#FF79C6;">    return</span><span style="color:#F8F8F2;"> code;</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,74)]))}const m=n(y,[["render",d],["__file","parse.html.vue"]]),b=JSON.parse('{"path":"/vue2/parse.html","title":"Vue2.x框架原理分析-编译","lang":"en-US","frontmatter":{"title":"Vue2.x框架原理分析-编译","date":"2021-08-15T00:00:00.000Z","next":"vue-loader-code-analysis","category":["Vue"],"type":["vue2"],"description":"前言 vue 基于源码构建的有两个版本，一个是 runtime only(一个只包含运行时的版本)，另一个是 runtime + compiler(一个同时包含编译器和运行时的完整版本)。而两个版本的区别仅在于后者包含了一个编译器。 完整版本 完整版本 源码中，是先定义只包含运行时版本的$mount方法，再定义完整版本的$mount 方法 plantf...","head":[["meta",{"property":"og:url","content":"https://luxiag.github.io/luxiag/blog/vue2/parse.html"}],["meta",{"property":"og:title","content":"Vue2.x框架原理分析-编译"}],["meta",{"property":"og:description","content":"前言 vue 基于源码构建的有两个版本，一个是 runtime only(一个只包含运行时的版本)，另一个是 runtime + compiler(一个同时包含编译器和运行时的完整版本)。而两个版本的区别仅在于后者包含了一个编译器。 完整版本 完整版本 源码中，是先定义只包含运行时版本的$mount方法，再定义完整版本的$mount 方法 plantf..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2022-12-30T06:28:03.000Z"}],["meta",{"property":"article:published_time","content":"2021-08-15T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2022-12-30T06:28:03.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Vue2.x框架原理分析-编译\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2021-08-15T00:00:00.000Z\\",\\"dateModified\\":\\"2022-12-30T06:28:03.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"luxiag\\",\\"url\\":\\"https://luxiag.github.io/luxiag\\"}]}"]]},"headers":[{"level":2,"title":"前言","slug":"前言","link":"#前言","children":[{"level":3,"title":"完整版本","slug":"完整版本","link":"#完整版本","children":[]},{"level":3,"title":"运行时","slug":"运行时","link":"#运行时","children":[]}]},{"level":2,"title":"流程","slug":"流程","link":"#流程","children":[]},{"level":2,"title":"parse","slug":"parse","link":"#parse","children":[]},{"level":2,"title":"HTML 解析","slug":"html-解析","link":"#html-解析","children":[{"level":3,"title":"parseHTML","slug":"parsehtml","link":"#parsehtml","children":[]},{"level":3,"title":"parseStartTag","slug":"parsestarttag","link":"#parsestarttag","children":[]},{"level":3,"title":"handleStartTag","slug":"handlestarttag","link":"#handlestarttag","children":[]},{"level":3,"title":"start","slug":"start","link":"#start","children":[]}]},{"level":2,"title":"文本解析","slug":"文本解析","link":"#文本解析","children":[{"level":3,"title":"parseText","slug":"parsetext","link":"#parsetext","children":[]}]},{"level":2,"title":"optimize","slug":"optimize","link":"#optimize","children":[{"level":3,"title":"markStatic","slug":"markstatic","link":"#markstatic","children":[]},{"level":3,"title":"markStaticRoots","slug":"markstaticroots","link":"#markstaticroots","children":[]}]},{"level":2,"title":"generate","slug":"generate","link":"#generate","children":[]}],"git":{"createdTime":1663833246000,"updatedTime":1672381683000,"contributors":[{"name":"卢祥","email":"example@gmail.com","commits":6},{"name":"luxiang","email":"luxiag@qq.com","commits":2},{"name":"卢祥","email":"example@qq.com","commits":2},{"name":"luxiag","email":"luxiag@qq.com","commits":1}]},"readingTime":{"minutes":13.03,"words":3909},"filePathRelative":"vue2/parse.md","localizedDate":"August 15, 2021","excerpt":"<h2>前言</h2>\\n<figure><figcaption></figcaption></figure>\\n<p>vue 基于源码构建的有两个版本，一个是 runtime only(一个只包含运行时的版本)，另一个是 runtime + compiler(一个同时包含编译器和运行时的完整版本)。而两个版本的区别仅在于后者包含了一个编译器。</p>","autoDesc":true}');export{m as comp,b as data};
