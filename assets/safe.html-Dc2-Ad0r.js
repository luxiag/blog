import{_ as a,e as t,g as s,o as i}from"./app-BcLUFOMF.js";const r={};function l(o,e){return i(),t("div",null,e[0]||(e[0]=[s('<h2 id="csrf" tabindex="-1"><a class="header-anchor" href="#csrf"><span>CSRF</span></a></h2><p>CSRF（Cross-site request forgery）跨站请求伪造：攻击者诱导受害者进入第三方网站，在第三方网站中，向被攻击网站发送跨站请求。利用受害者在被攻击网站已经获取的注册凭证，绕过后台的用户验证，达到冒充用户对被攻击的网站执行某项操作的目的。</p><ul><li>当用户已经登录成功了一个网站</li><li>然后通过被诱导进了第三方网站「钓鱼网站」</li><li>跳转过去了自动提交表单，冒用受害者信息</li><li>后台则正常走逻辑将用户提交的表单信息进行处理</li></ul><h2 id="xss" tabindex="-1"><a class="header-anchor" href="#xss"><span>XSS</span></a></h2><p>XSS是跨站脚本攻击(Cross Site Scripting)，为不和层叠样式表(Cascading Style Sheets, CSS)的缩写混淆，故将跨站脚本攻击缩写为XSS。</p><h3 id="反射型xss攻击" tabindex="-1"><a class="header-anchor" href="#反射型xss攻击"><span>反射型xss攻击</span></a></h3><ul><li>用户误点开了带攻击的<code>url : http://xxx?keyword=&lt;script&gt;alert(&#39;aaa&#39;)&lt;/script&gt;</code></li><li>网站给受害者的返回中包含了来自URL的的恶意文本</li><li>用户的浏览器收到文本后执行页面，会在网页中弹窗aaa</li></ul><h3 id="储存型xss攻击" tabindex="-1"><a class="header-anchor" href="#储存型xss攻击"><span>储存型xss攻击</span></a></h3><ul><li>攻击者通过评论表单提交将<code>&lt;script&gt;alert(‘aaa’)&lt;/script&gt;</code>提交到网站</li><li>网站后端对提交的评论数据不做任何操作，直接存储到数据库中</li><li>其他用户访问正常访问网站，并且需要请求网站的评论数据</li><li>网站后端会从数据库中取出数据，直接返回给用户</li><li>用户得到页面后，直接运行攻击者提交的代码<code>&lt;script&gt;alert(‘aaa’)&lt;/script&gt;</code>，所有用户都会在网页中弹出aaa的弹窗#</li></ul><h3 id="dom型xss攻击" tabindex="-1"><a class="header-anchor" href="#dom型xss攻击"><span>DOM型xss攻击</span></a></h3><ul><li>用户误点开了带攻击的<code>url : http://xxx?name=&lt;script&gt;alert(&#39;aaa&#39;)&lt;/script&gt;</code></li><li>网站给受害者的返回中正常的网页</li><li>用户的浏览器收到文本后执行页面合法脚本，这时候页面恶意脚本会被执行，会在网页中弹窗aaa</li></ul><h2 id="越权" tabindex="-1"><a class="header-anchor" href="#越权"><span>越权</span></a></h2><p>水平越权:指相同权限下不同的用户可以互相访问</p><p>垂直越权:指使用权限低的用户可以访问到权限较高的用户</p><p>水平越权测试方法：主要通过看看能否通过A用户操作影响到B用户</p><p>垂直越权测试思路：看看低权限用户是否能越权使用高权限用户的功能，比如普通用户可以使用管理员的功能。</p><h2 id="ssrf" tabindex="-1"><a class="header-anchor" href="#ssrf"><span>SSRF</span></a></h2><p>服务端请求伪造(Server-Side Request Forgery),指的是攻击者在未能取得服务器所有权限时，利用服务器漏洞以服务器的身份发送一条构造好的请求给服务器所在内网。SSRF攻击通常针对外部网络无法直接访问的内部系统。</p><h2 id="hpp" tabindex="-1"><a class="header-anchor" href="#hpp"><span>HPP</span></a></h2><p>HPP，即 HTTP Parameter Pollution，HTTP 参数污染。在 HTTP 协议中是运行同样名称的参数出现多次，攻击者通过传播参数的时候传输 key 相同而 value 不同的参数，从而达到绕过某些防护与参数校验的后果。它是一种注入型的漏洞，攻击者通过在 HTTP 请求中插入特定的参数来发起攻击。</p><h2 id="不安全的跳转-钓鱼" tabindex="-1"><a class="header-anchor" href="#不安全的跳转-钓鱼"><span>不安全的跳转(钓鱼)</span></a></h2><ul><li>伪造假网站，攻击者创建一个与受害者所用的合法企业网站（例如银行网站）基本一样的网站。</li><li>预付金诈骗，骗子联系受害者来利用他们的贪婪和同情，声称要偷偷带出一位富有的西班牙囚犯，囚犯愿意以丰厚的报酬感谢受害者，以换取用于贿赂一些狱警所需的金钱。</li><li>帐户停用诈骗，通过操控受害者的紧迫感，使其认为重要帐户将被停用，攻击者便可诱使某些人交出登录凭证等重要信息。</li></ul><h2 id="不安全的npm包" tabindex="-1"><a class="header-anchor" href="#不安全的npm包"><span>不安全的NPM包</span></a></h2><h2 id="目录遍历攻击" tabindex="-1"><a class="header-anchor" href="#目录遍历攻击"><span>目录遍历攻击</span></a></h2><p>目录遍历攻击又称目录穿越、恶意浏览、文件泄露等，攻击者利用系统漏洞访问合法应用之外的数据或文件目录，导致数据泄露或被篡改</p>',25)]))}const p=a(r,[["render",l],["__file","safe.html.vue"]]),c=JSON.parse('{"path":"/nodejs/safe.html","title":"NodeJS安全风险","lang":"en-US","frontmatter":{"title":"NodeJS安全风险","category":["NodeJS"],"date":"2023-06-21T00:00:00.000Z","description":"CSRF CSRF（Cross-site request forgery）跨站请求伪造：攻击者诱导受害者进入第三方网站，在第三方网站中，向被攻击网站发送跨站请求。利用受害者在被攻击网站已经获取的注册凭证，绕过后台的用户验证，达到冒充用户对被攻击的网站执行某项操作的目的。 当用户已经登录成功了一个网站 然后通过被诱导进了第三方网站「钓鱼网站」 跳转过去了...","head":[["meta",{"property":"og:url","content":"https://luxiag.github.io/luxiag/blog/nodejs/safe.html"}],["meta",{"property":"og:title","content":"NodeJS安全风险"}],["meta",{"property":"og:description","content":"CSRF CSRF（Cross-site request forgery）跨站请求伪造：攻击者诱导受害者进入第三方网站，在第三方网站中，向被攻击网站发送跨站请求。利用受害者在被攻击网站已经获取的注册凭证，绕过后台的用户验证，达到冒充用户对被攻击的网站执行某项操作的目的。 当用户已经登录成功了一个网站 然后通过被诱导进了第三方网站「钓鱼网站」 跳转过去了..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2025-02-01T04:07:09.000Z"}],["meta",{"property":"article:published_time","content":"2023-06-21T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-02-01T04:07:09.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"NodeJS安全风险\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-06-21T00:00:00.000Z\\",\\"dateModified\\":\\"2025-02-01T04:07:09.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"luxiag\\",\\"url\\":\\"https://luxiag.github.io/luxiag\\"}]}"]]},"git":{"createdTime":1687318381000,"updatedTime":1738382829000,"contributors":[{"name":"卢祥","username":"卢祥","email":"example@qq.com","commits":1,"url":"https://github.com/卢祥"},{"name":"luxiag","username":"luxiag","email":"luxiag@qq.com","commits":5,"url":"https://github.com/luxiag"}]},"readingTime":{"minutes":3.52,"words":1055},"filePathRelative":"nodejs/safe.md","localizedDate":"June 21, 2023","excerpt":"<h2>CSRF</h2>\\n<p>CSRF（Cross-site request forgery）跨站请求伪造：攻击者诱导受害者进入第三方网站，在第三方网站中，向被攻击网站发送跨站请求。利用受害者在被攻击网站已经获取的注册凭证，绕过后台的用户验证，达到冒充用户对被攻击的网站执行某项操作的目的。</p>","autoDesc":true}');export{p as comp,c as data};
