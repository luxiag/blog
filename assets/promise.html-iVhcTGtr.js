import{_ as n,c as l,b as a,o as e}from"./app-BupRR3ON.js";const p={};function o(F,s){return e(),l("div",null,s[0]||(s[0]=[a(`<table><thead><tr><th><strong>参考</strong></th></tr></thead><tbody><tr><td><strong><a href="https://zhuanlan.zhihu.com/p/83965949" target="_blank" rel="noopener noreferrer">100 行代码实现 Promises/A+ 规范</a></strong></td></tr><tr><td><strong><a href="https://promisesaplus.com/" target="_blank" rel="noopener noreferrer">Promises/A+</a></strong></td></tr></tbody></table><h2 id="_0-前期工作" tabindex="-1"><a class="header-anchor" href="#_0-前期工作"><span><strong>0.前期工作</strong></span></a></h2><p>通过 <code>npm install promises-aplus-tests</code> ，可以下载测试套件。</p><p><strong><a href="https://github.com/promises-aplus/promises-tests" target="_blank" rel="noopener noreferrer">GitHub - promises-aplus/promises-tests: Compliances tests for Promises/A+</a></strong></p><h2 id="_1-术语" tabindex="-1"><a class="header-anchor" href="#_1-术语"><span><strong>1.术语</strong></span></a></h2><p>1.1. promise: 一个拥有符合这个规范的行为的 then 方法的对象或函数。 1.2. thenable: 定义了一个 then 方法的对象或函数。 1.3. 值(value): 任意合法的 JavaScript 值(包括 undefined,thenable,promise)。 1.4. 异常(exception): 使用 throw 语句抛出的一个值 1.5. 原因(reason): 表示 promise 为什么被拒绝的一个值</p><h2 id="_2-必要条件" tabindex="-1"><a class="header-anchor" href="#_2-必要条件"><span><strong>2.必要条件</strong></span></a></h2><h3 id="_2-1-promise-状态" tabindex="-1"><a class="header-anchor" href="#_2-1-promise-状态"><span><strong>2.1 Promise 状态</strong></span></a></h3><p>promise 必须是这三个状态中的一种：等待态 pending/ˈpendɪŋ/,解决态 fulfilled/fʊl; fl/或拒绝态 rejected</p><p>2.1.1. 当一个 promise 处于等待状态的时候： 2.1.1.1. 可能变为解决或者拒绝状态。</p><p>2.1.2. 当一个 promise 处于解决状态的时候： 2.1.2.1. 一定不能转换为任何其它状态 2.1.2.2. 必须有一个不能改变的值</p><p>2.1.3. 当一个 promise 处于拒绝状态的时候： 2.1.3.1. 一定不能转换为任何其它状态 2.1.3.2. 必须有一个不能改变的值</p><p>在这里，&quot;一定不能改变&quot;意味着不变的身份(例如 ===)，但是并不意味着深度不可变性。(译注者：这里应该是说只要值的引用相同即可，并不需要引用中的每一个值都相等)</p><div class="language-jsx line-numbers-mode" data-highlighter="shiki" data-ext="jsx" data-title="jsx" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#6272A4;">//有 3 个常量 pending, fulfilled, rejected，</span></span>
<span class="line"><span style="color:#6272A4;">//一个 Promise 构造函数，有 state 和 result 两个属性。</span></span>
<span class="line"><span style="color:#6272A4;">//当 state 为 fulfilled 时，result 作为 value 看待。</span></span>
<span class="line"><span style="color:#6272A4;">//当 state 为 rejected 时，result 作为 reason 看待。</span></span>
<span class="line"><span style="color:#6272A4;">//一个 transition 状态迁移函数，它只会在 state 为 pending 时，进行状态迁移。</span></span>
<span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> PENDING </span><span style="color:#FF79C6;">=</span><span style="color:#50FA7B;"> Symbol</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">pending</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> FULFILLED </span><span style="color:#FF79C6;">=</span><span style="color:#50FA7B;"> Symbol</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">fulfilled</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> REJECTED </span><span style="color:#FF79C6;">=</span><span style="color:#50FA7B;"> Symbol</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">rejected</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">); </span><span style="color:#6272A4;">//一个 transition 状态迁移函数，它只会在 state 为 pending 时，进行状态迁移。</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">const</span><span style="color:#50FA7B;"> transition</span><span style="color:#FF79C6;"> =</span><span style="color:#F8F8F2;"> (</span><span style="color:#FFB86C;font-style:italic;">promise</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">state</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">result</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#FF79C6;">  if</span><span style="color:#F8F8F2;"> (promise.state </span><span style="color:#FF79C6;">!==</span><span style="color:#F8F8F2;"> PENDING) </span><span style="color:#FF79C6;">return</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">  promise.state </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> state;</span></span>
<span class="line"><span style="color:#F8F8F2;">  promise.result </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> result;</span></span>
<span class="line"><span style="color:#50FA7B;">  notifyAll</span><span style="color:#F8F8F2;">(promise);</span></span>
<span class="line"><span style="color:#F8F8F2;">};</span></span>
<span class="line"><span style="color:#FF79C6;">function</span><span style="color:#50FA7B;"> Promise</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">f</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#BD93F9;font-style:italic;">  this</span><span style="color:#F8F8F2;">.state </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> PENDING;</span></span>
<span class="line"><span style="color:#FF79C6;">  let</span><span style="color:#50FA7B;"> onFulfilled</span><span style="color:#FF79C6;"> =</span><span style="color:#F8F8F2;"> (</span><span style="color:#FFB86C;font-style:italic;">value</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#50FA7B;"> transition</span><span style="color:#F8F8F2;">(</span><span style="color:#BD93F9;font-style:italic;">this</span><span style="color:#F8F8F2;">, FULFILLED, value);</span></span>
<span class="line"><span style="color:#FF79C6;">  let</span><span style="color:#50FA7B;"> onRejected</span><span style="color:#FF79C6;"> =</span><span style="color:#F8F8F2;"> (</span><span style="color:#FFB86C;font-style:italic;">reason</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#50FA7B;"> transition</span><span style="color:#F8F8F2;">(</span><span style="color:#BD93F9;font-style:italic;">this</span><span style="color:#F8F8F2;">, REJECTED, reason);</span></span>
<span class="line"><span style="color:#6272A4;">  //调用只能一次resolve 或者reject</span></span>
<span class="line"><span style="color:#FF79C6;">  let</span><span style="color:#F8F8F2;"> ignore </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> false</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">  let</span><span style="color:#50FA7B;"> resolve</span><span style="color:#FF79C6;"> =</span><span style="color:#F8F8F2;"> (</span><span style="color:#FFB86C;font-style:italic;">value</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#FF79C6;">    if</span><span style="color:#F8F8F2;"> (ignore) </span><span style="color:#FF79C6;">return</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">    ignore </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> true</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#50FA7B;">    onFullfilled</span><span style="color:#F8F8F2;">(value);</span></span>
<span class="line"><span style="color:#F8F8F2;">  };</span></span>
<span class="line"><span style="color:#FF79C6;">  let</span><span style="color:#50FA7B;"> reject</span><span style="color:#FF79C6;"> =</span><span style="color:#F8F8F2;"> (</span><span style="color:#FFB86C;font-style:italic;">reason</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#FF79C6;">    if</span><span style="color:#F8F8F2;"> (ignore) </span><span style="color:#FF79C6;">return</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">    ignore </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> true</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#50FA7B;">    onRejected</span><span style="color:#F8F8F2;">(reason);</span></span>
<span class="line"><span style="color:#F8F8F2;">  };</span></span>
<span class="line"><span style="color:#6272A4;">  //函数必须立即执行</span></span>
<span class="line"><span style="color:#FF79C6;">  try</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#50FA7B;">    f</span><span style="color:#F8F8F2;">(resolve, reject);</span></span>
<span class="line"><span style="color:#F8F8F2;">  } </span><span style="color:#FF79C6;">catch</span><span style="color:#F8F8F2;"> (error) {</span></span>
<span class="line"><span style="color:#50FA7B;">    reject</span><span style="color:#F8F8F2;">(error);</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-2-then-方法" tabindex="-1"><a class="header-anchor" href="#_2-2-then-方法"><span><strong>2.2 Then 方法</strong></span></a></h3><p>2.2.1 onFulfilled 和 onRejected 都是可选的参数</p><p>2.2.1.1. 如果 onFulfilled 不是一个函数，它必须被忽略</p><p>2.2.1.2. 如果 onRejected 不是一个函数，它必须被忽略</p><p>2.2.2. 如果 onFulfilled 是一个函数</p><p>2.2.2.1. 它必须在 promise 被解决后调用，promise 的值作为它的第一个参数。</p><p>2.2.2.2. 它一定不能在 promise 被解决前调用。</p><p>2.2.2.3. 它一定不能被调用多次。</p><p>2.2.3. 如果 onRejected 是一个函数</p><p>2.2.3.1. 它必须在 promise 被拒绝之后调用，用 promise 的原因作为它的第一个参数。</p><p>2.2.3.2. 它一定不能在 promise 被拒绝之前调用。</p><p>2.2.3.3. 它一定不能被调用多次。</p><p>2.2.4. 在执行上下文栈中只包含平台代码之前，onFulfilled 或 onRejected 一定不能被调用 [3.1]</p><p>2.2.5. onFulfilled 和 onRejected 一定被作为函数调用(没有 this 值) [3.2]</p><p>2.2.6. 同一个 promise 上的 then 可能被调用多次</p><p>2.2.6.1. 如果 promise 被解决，所有相应的 onFulfilled 回调必须按照他们原始调用 then 的顺序执行</p><p>2.2.6.2. 如果 promise 被拒绝，所有相应的 onRejected 回调必须按照他们原始调用 then 的顺序执行</p><p><strong>实现：</strong></p><div class="language-jsx line-numbers-mode" data-highlighter="shiki" data-ext="jsx" data-title="jsx" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#8BE9FD;font-style:italic;">Promise</span><span style="color:#F8F8F2;">.prototype.</span><span style="color:#50FA7B;">then</span><span style="color:#FF79C6;"> =</span><span style="color:#FF79C6;"> function</span><span style="color:#F8F8F2;"> (</span><span style="color:#FFB86C;font-style:italic;">onFulfilled</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">onRejected</span><span style="color:#F8F8F2;">) {};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">const</span><span style="color:#50FA7B;"> notify</span><span style="color:#FF79C6;"> =</span><span style="color:#F8F8F2;"> (</span><span style="color:#FFB86C;font-style:italic;">handler</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">state</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">result</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#FF79C6;">  let</span><span style="color:#F8F8F2;"> { onFulfilled, onRejected, resolve, reject } </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> handler;</span></span>
<span class="line"><span style="color:#FF79C6;">  try</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#FF79C6;">    if</span><span style="color:#F8F8F2;"> (state </span><span style="color:#FF79C6;">===</span><span style="color:#F8F8F2;"> FULFILLED) {</span></span>
<span class="line"><span style="color:#50FA7B;">      isFunction</span><span style="color:#F8F8F2;">(onFulfilled) </span><span style="color:#FF79C6;">?</span><span style="color:#50FA7B;"> resolve</span><span style="color:#F8F8F2;">(</span><span style="color:#50FA7B;">onFulfilled</span><span style="color:#F8F8F2;">(result)) </span><span style="color:#FF79C6;">:</span><span style="color:#50FA7B;"> resolve</span><span style="color:#F8F8F2;">(result);</span></span>
<span class="line"><span style="color:#F8F8F2;">    } </span><span style="color:#FF79C6;">else</span><span style="color:#FF79C6;"> if</span><span style="color:#F8F8F2;"> (state </span><span style="color:#FF79C6;">===</span><span style="color:#F8F8F2;"> REJECTED) {</span></span>
<span class="line"><span style="color:#50FA7B;">      isFunction</span><span style="color:#F8F8F2;">(onRejected) </span><span style="color:#FF79C6;">?</span><span style="color:#50FA7B;"> resolve</span><span style="color:#F8F8F2;">(</span><span style="color:#50FA7B;">onRejected</span><span style="color:#F8F8F2;">(result)) </span><span style="color:#FF79C6;">:</span><span style="color:#50FA7B;"> reject</span><span style="color:#F8F8F2;">(result);</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">  } </span><span style="color:#FF79C6;">catch</span><span style="color:#F8F8F2;"> (error) {</span></span>
<span class="line"><span style="color:#50FA7B;">    reject</span><span style="color:#F8F8F2;">(error);</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">};</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>then 方法可以被调用很多次，每次注册一组 onFulfilled 和 onRejected 的 callback。它们如果被调用，必须按照注册顺序调用。</strong></p><div class="language-jsx line-numbers-mode" data-highlighter="shiki" data-ext="jsx" data-title="jsx" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> promise </span><span style="color:#FF79C6;">=</span><span style="color:#FF79C6;font-weight:bold;"> new</span><span style="color:#50FA7B;"> Promsie</span><span style="color:#F8F8F2;">((</span><span style="color:#FFB86C;font-style:italic;">resolve</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">reject</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#6272A4;">  //3秒后才能知道promsie结果</span></span>
<span class="line"><span style="color:#50FA7B;">  setTimeout</span><span style="color:#F8F8F2;">(() </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#50FA7B;">    resolve</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">成功</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">  }, </span><span style="color:#BD93F9;">3000</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">});</span></span>
<span class="line"><span style="color:#F8F8F2;">promise.</span><span style="color:#50FA7B;">then</span><span style="color:#F8F8F2;">(</span></span>
<span class="line"><span style="color:#F8F8F2;">  (</span><span style="color:#FFB86C;font-style:italic;">data</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">    console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">success</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">, data);</span></span>
<span class="line"><span style="color:#F8F8F2;">  },</span></span>
<span class="line"><span style="color:#F8F8F2;">  (</span><span style="color:#FFB86C;font-style:italic;">err</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">    console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">fail</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">, err);</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-jsx line-numbers-mode" data-highlighter="shiki" data-ext="jsx" data-title="jsx" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">function</span><span style="color:#50FA7B;"> Promsie</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#BD93F9;font-style:italic;">  this</span><span style="color:#F8F8F2;">.state </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> PENDING;</span></span>
<span class="line"><span style="color:#BD93F9;font-style:italic;">  this</span><span style="color:#F8F8F2;">.result </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> null</span><span style="color:#F8F8F2;">; </span><span style="color:#6272A4;">//当pending状态时，将then存储起来</span></span>
<span class="line"><span style="color:#BD93F9;font-style:italic;">  this</span><span style="color:#F8F8F2;">.handlers </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> [];</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2.2.7. then 必须返回一个 promise [3.3]</p><div class="language-jsx line-numbers-mode" data-highlighter="shiki" data-ext="jsx" data-title="jsx" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#8BE9FD;font-style:italic;">Promise</span><span style="color:#F8F8F2;">.prototype.</span><span style="color:#50FA7B;">then</span><span style="color:#FF79C6;"> =</span><span style="color:#FF79C6;"> function</span><span style="color:#F8F8F2;"> (</span><span style="color:#FFB86C;font-style:italic;">onFulfilled</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">onRejected</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#FF79C6;">  return</span><span style="color:#FF79C6;font-weight:bold;"> new</span><span style="color:#8BE9FD;font-style:italic;"> Promise</span><span style="color:#F8F8F2;">((</span><span style="color:#FFB86C;font-style:italic;">resolve</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">reject</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> {});</span></span>
<span class="line"><span style="color:#F8F8F2;">};</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2.2.7.1. 如果 onFulfilled 或 onRjected 返回一个值 x，运行 promise 解决程序<code>[[Resolve]](promise2,x)</code></p><p>2.2.7.2. 如果 onFulfilled 或 onRejected 抛出一个异常 e，promise2 必须用 e 作为原因被拒绝</p><p>2.2.7.3. 如果 onFulfilled 不是一个函数并且 promise1 被解决，promise2 必须用与 promise1 相同的值被解决</p><p>2.2.7.4. 如果 onRejected 不是一个函数并且 promise1 被拒绝，promise2 必须用与 promise1 相同的原因被拒绝</p><p><strong>实现：</strong></p><div class="language-jsx line-numbers-mode" data-highlighter="shiki" data-ext="jsx" data-title="jsx" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#8BE9FD;font-style:italic;">Promise</span><span style="color:#F8F8F2;">.prototype.</span><span style="color:#50FA7B;">then</span><span style="color:#FF79C6;"> =</span><span style="color:#FF79C6;"> function</span><span style="color:#F8F8F2;"> (</span><span style="color:#FFB86C;font-style:italic;">onFulfilled</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">onRejected</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#FF79C6;">  return</span><span style="color:#FF79C6;font-weight:bold;"> new</span><span style="color:#8BE9FD;font-style:italic;"> Promise</span><span style="color:#F8F8F2;">((</span><span style="color:#FFB86C;font-style:italic;">resolve</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">reject</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#BD93F9;font-style:italic;">    this</span><span style="color:#F8F8F2;">.handlers.</span><span style="color:#50FA7B;">push</span><span style="color:#F8F8F2;">({ onFulfilled, onRejected, resolve, reject });</span></span>
<span class="line"><span style="color:#BD93F9;font-style:italic;">    this</span><span style="color:#F8F8F2;">.state </span><span style="color:#FF79C6;">!==</span><span style="color:#F8F8F2;"> PENDING </span><span style="color:#FF79C6;">&amp;&amp;</span><span style="color:#50FA7B;"> notifyAll</span><span style="color:#F8F8F2;">(</span><span style="color:#BD93F9;font-style:italic;">this</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">  });</span></span>
<span class="line"><span style="color:#F8F8F2;">};</span></span>
<span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> delay </span><span style="color:#FF79C6;">=</span></span>
<span class="line"><span style="color:#F8F8F2;">  (</span><span style="color:#FFB86C;font-style:italic;">f</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">time</span><span style="color:#FF79C6;"> =</span><span style="color:#BD93F9;"> 0</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">=&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">  (</span><span style="color:#FFB86C;font-style:italic;">value</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">=&gt;</span></span>
<span class="line"><span style="color:#50FA7B;">    setTimeout</span><span style="color:#F8F8F2;">(() </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#50FA7B;"> f</span><span style="color:#F8F8F2;">(value), time); </span><span style="color:#6272A4;">//使用setTimeout包裹目的无法访问 在对此创建完毕之前无法访问this</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> notifyAll </span><span style="color:#FF79C6;">=</span><span style="color:#50FA7B;"> delay</span><span style="color:#F8F8F2;">((</span><span style="color:#FFB86C;font-style:italic;">promise</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#FF79C6;">  let</span><span style="color:#F8F8F2;"> { handlers, state, result } </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> promise;</span></span>
<span class="line"><span style="color:#FF79C6;">  while</span><span style="color:#F8F8F2;"> (handlers.length) </span><span style="color:#50FA7B;">notify</span><span style="color:#F8F8F2;">(handlers.</span><span style="color:#50FA7B;">shift</span><span style="color:#F8F8F2;">(), state, result);</span></span>
<span class="line"><span style="color:#F8F8F2;">});</span></span>
<span class="line"><span style="color:#6272A4;">// 另一种写法</span></span>
<span class="line"><span style="color:#FF79C6;">const</span><span style="color:#50FA7B;"> notifyAll</span><span style="color:#FF79C6;"> =</span><span style="color:#F8F8F2;"> (</span><span style="color:#FFB86C;font-style:italic;">promise</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#50FA7B;">  setTimeout</span><span style="color:#F8F8F2;">(() </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#FF79C6;">    let</span><span style="color:#F8F8F2;"> { handlers, state, result } </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> promise;</span></span>
<span class="line"><span style="color:#FF79C6;">    while</span><span style="color:#F8F8F2;"> (handlers.length) </span><span style="color:#50FA7B;">notify</span><span style="color:#F8F8F2;">(handlers.</span><span style="color:#50FA7B;">shift</span><span style="color:#F8F8F2;">(), state, result);</span></span>
<span class="line"><span style="color:#F8F8F2;">  }, </span><span style="color:#BD93F9;">0</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">};</span></span>
<span class="line"><span style="color:#FF79C6;">const</span><span style="color:#50FA7B;"> notify</span><span style="color:#FF79C6;"> =</span><span style="color:#F8F8F2;"> (</span><span style="color:#FFB86C;font-style:italic;">handler</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">state</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">result</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#FF79C6;">  let</span><span style="color:#F8F8F2;"> { onFulfilled, onRejected, resolve, reject } </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> handler;</span></span>
<span class="line"><span style="color:#FF79C6;">  try</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#FF79C6;">    if</span><span style="color:#F8F8F2;"> (state </span><span style="color:#FF79C6;">===</span><span style="color:#F8F8F2;"> FULFILLED) {</span></span>
<span class="line"><span style="color:#50FA7B;">      isFunction</span><span style="color:#F8F8F2;">(onFulfilled) </span><span style="color:#FF79C6;">?</span><span style="color:#50FA7B;"> resolve</span><span style="color:#F8F8F2;">(</span><span style="color:#50FA7B;">onFulfilled</span><span style="color:#F8F8F2;">(result)) </span><span style="color:#FF79C6;">:</span><span style="color:#50FA7B;"> resolve</span><span style="color:#F8F8F2;">(result);</span></span>
<span class="line"><span style="color:#F8F8F2;">    } </span><span style="color:#FF79C6;">else</span><span style="color:#FF79C6;"> if</span><span style="color:#F8F8F2;"> (state </span><span style="color:#FF79C6;">===</span><span style="color:#F8F8F2;"> REJECTED) {</span></span>
<span class="line"><span style="color:#50FA7B;">      isFunction</span><span style="color:#F8F8F2;">(onRejected) </span><span style="color:#FF79C6;">?</span><span style="color:#50FA7B;"> resolve</span><span style="color:#F8F8F2;">(</span><span style="color:#50FA7B;">onRejected</span><span style="color:#F8F8F2;">(result)) </span><span style="color:#FF79C6;">:</span><span style="color:#50FA7B;"> reject</span><span style="color:#F8F8F2;">(result);</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">  } </span><span style="color:#FF79C6;">catch</span><span style="color:#F8F8F2;"> (error) {</span></span>
<span class="line"><span style="color:#50FA7B;">    reject</span><span style="color:#F8F8F2;">(error);</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">};</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-3-promise-解决程序" tabindex="-1"><a class="header-anchor" href="#_2-3-promise-解决程序"><span><strong>2.3 Promise 解决程序</strong></span></a></h3><p>promise 解决程序是一个抽象操作，它以一个 promise 和一个值作为输入，我们将其表示为<code>[[Resolve]](promise, x)</code>。如果 x 是一个 thenable，它尝试让 promise 采用 x 的状态，并假设 x 的行为至少在某种程度上类似于 promise。否则，它将会用值 x 解决 promise。</p><p>这种 thenable 的特性使得 Promise 的实现更具有通用性：只要其暴露一个遵循 Promise/A+协议的 then 方法即可。这同时也使遵循 Promise/A+规范的实现可以与那些不太规范但可用的实现能良好共存。</p><p>要运行<code>[[Resolve]](promise, x)</code>，需要执行如下步骤：</p><p>2.3.1. 如果 promise 和 x 引用同一个对象，用一个 TypeError 作为原因来拒绝 promise 2.3.2. 如果 x 是一个 promise，采用它的状态：[3.4]</p><p>2.3.2.1. 如果 x 是等待态，promise 必须保持等待状态，直到 x 被解决或拒绝</p><p>2.3.2.2. 如果 x 是解决态，用相同的值解决 promise</p><p>2.3.2.3. 如果 x 是拒绝态，用相同的原因拒绝 promise</p><p>2.3.3. 否则，如果 x 是一个对象或函数</p><p>2.3.3.1. 让 then 成为 x.then。[3.5]</p><p>2.3.3.2. 如果检索属性 x.then 导致抛出了一个异常 e，用 e 作为原因拒绝 promise</p><p>2.3.3.3. 如果 then 是一个函数，用 x 作为 this 调用它。then 方法的参数为俩个回调函数，第一个参数叫做 resolvePromise，第二个参数叫做 rejectPromise：</p><p>2.3.3.3.1. 如果 resolvePromise 用一个值 y 调用，运行**<a href="notion://www.notion.so/promise,%20y" target="_blank" rel="noopener noreferrer">[Resolve]</a><strong>。译者注：这里再次调用</strong><a href="notion://www.notion.so/promise,y" target="_blank" rel="noopener noreferrer">[Resolve]</a>**，因为 y 可能还是 promise</p><p>2.3.3.3.2. 如果 rejectPromise 用一个原因 r 调用，用 r 拒绝 promise。译者注：这里如果 r 为 promise 的话，依旧会直接 reject，拒绝的原因就是 promise。并不会等到 promise 被解决或拒绝</p><p>2.3.3.3.3. 如果 resolvePromise 和 rejectPromise 都被调用，或者对同一个参数进行多次调用，那么第一次调用优先，以后的调用都会被忽略。译者注：这里主要针对 thenable，promise 的状态一旦更改就不会再改变。</p><p>2.3.3.3.4. 如果调用 then 抛出了一个异常 e,</p><p>2.3.3.4.1. 如果 resolvePromise 或 rejectPromise 已经被调用，忽略它</p><p>2.3.3.4.2. 否则，用 e 作为原因拒绝 promise</p><p>2.3.3.4. 如果 then 不是一个函数，用 x 解决 promise</p><p>2.3.4. 如果 x 不是一个对象或函数，用 x 解决 promise</p><p>如果 promise 用一个循环的 thenable 链解决，由于<code>[[Resolve]](promise, thenalbe)</code>的递归特性，最终将导致<code>[[Resolve]](promise, thenable)</code>被再次调用，遵循上面的算法将会导致无限递归。规范中并没有强制要求处理这种情况，但也鼓励实现者检测这样的递归是否存在，并且用一个信息丰富的 TypeError 作为原因拒绝 promise。[3.6]</p><p><strong>实现：</strong></p><div class="language-jsx line-numbers-mode" data-highlighter="shiki" data-ext="jsx" data-title="jsx" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">const</span><span style="color:#50FA7B;"> checkValue</span><span style="color:#FF79C6;"> =</span><span style="color:#F8F8F2;"> (</span><span style="color:#FFB86C;font-style:italic;">promise</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">value</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">onFulfilled</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">onRejected</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#FF79C6;">  if</span><span style="color:#F8F8F2;"> (value </span><span style="color:#FF79C6;">===</span><span style="color:#F8F8F2;"> promise) {</span></span>
<span class="line"><span style="color:#FF79C6;">    let</span><span style="color:#F8F8F2;"> reason </span><span style="color:#FF79C6;">=</span><span style="color:#FF79C6;font-weight:bold;"> new</span><span style="color:#50FA7B;"> TypeError</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">Can not fufill promise with itself</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#FF79C6;">    return</span><span style="color:#50FA7B;"> onRejected</span><span style="color:#F8F8F2;">(reason);</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#FF79C6;">  if</span><span style="color:#F8F8F2;"> (value </span><span style="color:#FF79C6;">instanceof</span><span style="color:#8BE9FD;font-style:italic;"> Promise</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#FF79C6;">    return</span><span style="color:#F8F8F2;"> value.</span><span style="color:#50FA7B;">then</span><span style="color:#F8F8F2;">(onFulfilled, onRejected);</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#FF79C6;">  if</span><span style="color:#F8F8F2;"> (</span><span style="color:#50FA7B;">isThenable</span><span style="color:#F8F8F2;">(value)) {</span></span>
<span class="line"><span style="color:#FF79C6;">    try</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#FF79C6;">      let</span><span style="color:#F8F8F2;"> then </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> value.then;</span></span>
<span class="line"><span style="color:#FF79C6;">      if</span><span style="color:#F8F8F2;"> (</span><span style="color:#50FA7B;">isFunction</span><span style="color:#F8F8F2;">(then)) {</span></span>
<span class="line"><span style="color:#FF79C6;">        return</span><span style="color:#FF79C6;font-weight:bold;"> new</span><span style="color:#8BE9FD;font-style:italic;"> Promise</span><span style="color:#F8F8F2;">(then.</span><span style="color:#50FA7B;">bind</span><span style="color:#F8F8F2;">(value)).</span><span style="color:#50FA7B;">then</span><span style="color:#F8F8F2;">(onFulfilled, onRejected);</span></span>
<span class="line"><span style="color:#F8F8F2;">      }</span></span>
<span class="line"><span style="color:#F8F8F2;">    } </span><span style="color:#FF79C6;">catch</span><span style="color:#F8F8F2;"> (error) {</span></span>
<span class="line"><span style="color:#FF79C6;">      return</span><span style="color:#50FA7B;"> onRejected</span><span style="color:#F8F8F2;">(error);</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#50FA7B;">  onFulfilled</span><span style="color:#F8F8F2;">(value);</span></span>
<span class="line"><span style="color:#F8F8F2;">};</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="function-promise" tabindex="-1"><a class="header-anchor" href="#function-promise"><span>function-promise</span></a></h2><details class="hint-container details"><summary>function-promise</summary><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> delay </span><span style="color:#FF79C6;">=</span></span>
<span class="line"><span style="color:#F8F8F2;">  (</span><span style="color:#FFB86C;font-style:italic;">f</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">time</span><span style="color:#FF79C6;"> =</span><span style="color:#BD93F9;"> 0</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">=&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">  (</span><span style="color:#FFB86C;font-style:italic;">value</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">=&gt;</span></span>
<span class="line"><span style="color:#50FA7B;">    setTimeout</span><span style="color:#F8F8F2;">(() </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#50FA7B;"> f</span><span style="color:#F8F8F2;">(value), time);</span></span>
<span class="line"><span style="color:#FF79C6;">const</span><span style="color:#50FA7B;"> isFunction</span><span style="color:#FF79C6;"> =</span><span style="color:#F8F8F2;"> (</span><span style="color:#FFB86C;font-style:italic;">obj</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#FF79C6;"> typeof</span><span style="color:#F8F8F2;"> obj </span><span style="color:#FF79C6;">===</span><span style="color:#E9F284;"> &quot;</span><span style="color:#F1FA8C;">function</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> toString </span><span style="color:#FF79C6;">=</span><span style="color:#8BE9FD;font-style:italic;"> Object</span><span style="color:#F8F8F2;">.prototype.toString;</span></span>
<span class="line"><span style="color:#FF79C6;">const</span><span style="color:#50FA7B;"> isObject</span><span style="color:#FF79C6;"> =</span><span style="color:#F8F8F2;"> (</span><span style="color:#FFB86C;font-style:italic;">obj</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> toString.</span><span style="color:#50FA7B;">call</span><span style="color:#F8F8F2;">(obj) </span><span style="color:#FF79C6;">===</span><span style="color:#E9F284;"> &quot;</span><span style="color:#F1FA8C;">[object Object]</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#FF79C6;">const</span><span style="color:#50FA7B;"> isThenable</span><span style="color:#FF79C6;"> =</span><span style="color:#F8F8F2;"> (</span><span style="color:#FFB86C;font-style:italic;">obj</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> (</span><span style="color:#50FA7B;">isObject</span><span style="color:#F8F8F2;">(obj) </span><span style="color:#FF79C6;">||</span><span style="color:#50FA7B;"> isFunction</span><span style="color:#F8F8F2;">(obj)) </span><span style="color:#FF79C6;">&amp;&amp;</span><span style="color:#E9F284;"> &quot;</span><span style="color:#F1FA8C;">then</span><span style="color:#E9F284;">&quot;</span><span style="color:#FF79C6;"> in</span><span style="color:#F8F8F2;"> obj;</span></span>
<span class="line"><span style="color:#FF79C6;">const</span><span style="color:#50FA7B;"> isPromise</span><span style="color:#FF79C6;"> =</span><span style="color:#F8F8F2;"> (</span><span style="color:#FFB86C;font-style:italic;">promise</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> promise </span><span style="color:#FF79C6;">instanceof</span><span style="color:#8BE9FD;font-style:italic;"> Promise</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> PENDING </span><span style="color:#FF79C6;">=</span><span style="color:#50FA7B;"> Symbol</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">pending</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> FULFILLED </span><span style="color:#FF79C6;">=</span><span style="color:#50FA7B;"> Symbol</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">fulfilled</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> REJECTED </span><span style="color:#FF79C6;">=</span><span style="color:#50FA7B;"> Symbol</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">rejected</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">const</span><span style="color:#50FA7B;"> notify</span><span style="color:#FF79C6;"> =</span><span style="color:#F8F8F2;"> (</span><span style="color:#FFB86C;font-style:italic;">handler</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">state</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">result</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#FF79C6;">  let</span><span style="color:#F8F8F2;"> { onFulfilled, onRejected, resolve, reject } </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> handler;</span></span>
<span class="line"><span style="color:#FF79C6;">  try</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#FF79C6;">    if</span><span style="color:#F8F8F2;"> (state </span><span style="color:#FF79C6;">===</span><span style="color:#F8F8F2;"> FULFILLED) {</span></span>
<span class="line"><span style="color:#50FA7B;">      isFunction</span><span style="color:#F8F8F2;">(onFulfilled) </span><span style="color:#FF79C6;">?</span><span style="color:#50FA7B;"> resolve</span><span style="color:#F8F8F2;">(</span><span style="color:#50FA7B;">onFulfilled</span><span style="color:#F8F8F2;">(result)) </span><span style="color:#FF79C6;">:</span><span style="color:#50FA7B;"> resolve</span><span style="color:#F8F8F2;">(result);</span></span>
<span class="line"><span style="color:#F8F8F2;">    } </span><span style="color:#FF79C6;">else</span><span style="color:#FF79C6;"> if</span><span style="color:#F8F8F2;"> (state </span><span style="color:#FF79C6;">===</span><span style="color:#F8F8F2;"> REJECTED) {</span></span>
<span class="line"><span style="color:#50FA7B;">      isFunction</span><span style="color:#F8F8F2;">(onRejected) </span><span style="color:#FF79C6;">?</span><span style="color:#50FA7B;"> resolve</span><span style="color:#F8F8F2;">(</span><span style="color:#50FA7B;">onRejected</span><span style="color:#F8F8F2;">(result)) </span><span style="color:#FF79C6;">:</span><span style="color:#50FA7B;"> reject</span><span style="color:#F8F8F2;">(result);</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">  } </span><span style="color:#FF79C6;">catch</span><span style="color:#F8F8F2;"> (error) {</span></span>
<span class="line"><span style="color:#50FA7B;">    reject</span><span style="color:#F8F8F2;">(error);</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">};</span></span>
<span class="line"><span style="color:#FF79C6;">const</span><span style="color:#50FA7B;"> notifyAll</span><span style="color:#FF79C6;"> =</span><span style="color:#F8F8F2;"> (</span><span style="color:#FFB86C;font-style:italic;">promise</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#50FA7B;">  setTimeout</span><span style="color:#F8F8F2;">(() </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#FF79C6;">    let</span><span style="color:#F8F8F2;"> { handlers, state, result } </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> promise;</span></span>
<span class="line"><span style="color:#FF79C6;">    while</span><span style="color:#F8F8F2;"> (handlers.length) </span><span style="color:#50FA7B;">notify</span><span style="color:#F8F8F2;">(handlers.</span><span style="color:#50FA7B;">shift</span><span style="color:#F8F8F2;">(), state, result);</span></span>
<span class="line"><span style="color:#F8F8F2;">  }, </span><span style="color:#BD93F9;">0</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">};</span></span>
<span class="line"><span style="color:#6272A4;">// const notifyAll = delay((promise) =&gt; {</span></span>
<span class="line"><span style="color:#6272A4;">//   let { handlers, state, result } = promise;</span></span>
<span class="line"><span style="color:#6272A4;">//   while (handlers.length) notify(handlers.shift(), state, result);</span></span>
<span class="line"><span style="color:#6272A4;">// });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">const</span><span style="color:#50FA7B;"> transition</span><span style="color:#FF79C6;"> =</span><span style="color:#F8F8F2;"> (</span><span style="color:#FFB86C;font-style:italic;">promise</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">state</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">result</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#FF79C6;">  if</span><span style="color:#F8F8F2;"> (promise.state </span><span style="color:#FF79C6;">!==</span><span style="color:#F8F8F2;"> PENDING) </span><span style="color:#FF79C6;">return</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">  promise.state </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> state;</span></span>
<span class="line"><span style="color:#F8F8F2;">  promise.result </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> result;</span></span>
<span class="line"><span style="color:#50FA7B;">  notifyAll</span><span style="color:#F8F8F2;">(promise);</span></span>
<span class="line"><span style="color:#F8F8F2;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">const</span><span style="color:#50FA7B;"> checkValue</span><span style="color:#FF79C6;"> =</span><span style="color:#F8F8F2;"> (</span><span style="color:#FFB86C;font-style:italic;">promise</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">value</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">onFulfilled</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">onRejected</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#6272A4;">  //如果promise和x引用同一个对象，用一个TypeError作为原因来拒绝promise</span></span>
<span class="line"><span style="color:#FF79C6;">  if</span><span style="color:#F8F8F2;"> (value </span><span style="color:#FF79C6;">===</span><span style="color:#F8F8F2;"> promise) {</span></span>
<span class="line"><span style="color:#FF79C6;">    let</span><span style="color:#F8F8F2;"> reason </span><span style="color:#FF79C6;">=</span><span style="color:#FF79C6;font-weight:bold;"> new</span><span style="color:#50FA7B;"> TypeError</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">Can not fufill promise with itself</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#FF79C6;">    return</span><span style="color:#50FA7B;"> onRejected</span><span style="color:#F8F8F2;">(reason);</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#FF79C6;">  if</span><span style="color:#F8F8F2;"> (value </span><span style="color:#FF79C6;">instanceof</span><span style="color:#8BE9FD;font-style:italic;"> Promise</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#FF79C6;">    return</span><span style="color:#F8F8F2;"> value.</span><span style="color:#50FA7B;">then</span><span style="color:#F8F8F2;">(onFulfilled, onRejected);</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">  if</span><span style="color:#F8F8F2;"> (</span><span style="color:#50FA7B;">isThenable</span><span style="color:#F8F8F2;">(value)) {</span></span>
<span class="line"><span style="color:#FF79C6;">    try</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#FF79C6;">      let</span><span style="color:#F8F8F2;"> then </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> value.then;</span></span>
<span class="line"><span style="color:#FF79C6;">      if</span><span style="color:#F8F8F2;"> (</span><span style="color:#50FA7B;">isFunction</span><span style="color:#F8F8F2;">(then)) {</span></span>
<span class="line"><span style="color:#6272A4;">        // 如果then是一个函数，用x作为this调用它。</span></span>
<span class="line"><span style="color:#FF79C6;">        return</span><span style="color:#FF79C6;font-weight:bold;"> new</span><span style="color:#8BE9FD;font-style:italic;"> Promise</span><span style="color:#F8F8F2;">(then.</span><span style="color:#50FA7B;">bind</span><span style="color:#F8F8F2;">(value)).</span><span style="color:#50FA7B;">then</span><span style="color:#F8F8F2;">(onFulfilled, onRejected);</span></span>
<span class="line"><span style="color:#F8F8F2;">      }</span></span>
<span class="line"><span style="color:#F8F8F2;">    } </span><span style="color:#FF79C6;">catch</span><span style="color:#F8F8F2;"> (error) {</span></span>
<span class="line"><span style="color:#FF79C6;">      return</span><span style="color:#50FA7B;"> onRejected</span><span style="color:#F8F8F2;">(error);</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#50FA7B;">  onFulfilled</span><span style="color:#F8F8F2;">(value);</span></span>
<span class="line"><span style="color:#F8F8F2;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">function</span><span style="color:#50FA7B;"> Promise</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">f</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#BD93F9;font-style:italic;">  this</span><span style="color:#F8F8F2;">.state </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> PENDING;</span></span>
<span class="line"><span style="color:#BD93F9;font-style:italic;">  this</span><span style="color:#F8F8F2;">.handlers </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> [];</span></span>
<span class="line"><span style="color:#FF79C6;">  let</span><span style="color:#50FA7B;"> onFulfilled</span><span style="color:#FF79C6;"> =</span><span style="color:#F8F8F2;"> (</span><span style="color:#FFB86C;font-style:italic;">value</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#50FA7B;"> transition</span><span style="color:#F8F8F2;">(</span><span style="color:#BD93F9;font-style:italic;">this</span><span style="color:#F8F8F2;">, FULFILLED, value);</span></span>
<span class="line"><span style="color:#FF79C6;">  let</span><span style="color:#50FA7B;"> onRejected</span><span style="color:#FF79C6;"> =</span><span style="color:#F8F8F2;"> (</span><span style="color:#FFB86C;font-style:italic;">reason</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#50FA7B;"> transition</span><span style="color:#F8F8F2;">(</span><span style="color:#BD93F9;font-style:italic;">this</span><span style="color:#F8F8F2;">, REJECTED, reason);</span></span>
<span class="line"><span style="color:#FF79C6;">  let</span><span style="color:#F8F8F2;"> ignore </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> false</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#FF79C6;">  let</span><span style="color:#50FA7B;"> resolve</span><span style="color:#FF79C6;"> =</span><span style="color:#F8F8F2;"> (</span><span style="color:#FFB86C;font-style:italic;">value</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#FF79C6;">    if</span><span style="color:#F8F8F2;"> (ignore) </span><span style="color:#FF79C6;">return</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">    ignore </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> true</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#50FA7B;">    checkValue</span><span style="color:#F8F8F2;">(</span><span style="color:#BD93F9;font-style:italic;">this</span><span style="color:#F8F8F2;">, value, onFulfilled, onRejected);</span></span>
<span class="line"><span style="color:#F8F8F2;">  };</span></span>
<span class="line"><span style="color:#FF79C6;">  let</span><span style="color:#50FA7B;"> reject</span><span style="color:#FF79C6;"> =</span><span style="color:#F8F8F2;"> (</span><span style="color:#FFB86C;font-style:italic;">reason</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#FF79C6;">    if</span><span style="color:#F8F8F2;"> (ignore) </span><span style="color:#FF79C6;">return</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">    ignore </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> true</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#50FA7B;">    onRejected</span><span style="color:#F8F8F2;">(reason);</span></span>
<span class="line"><span style="color:#F8F8F2;">  };</span></span>
<span class="line"><span style="color:#FF79C6;">  try</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#50FA7B;">    f</span><span style="color:#F8F8F2;">(resolve, reject);</span></span>
<span class="line"><span style="color:#F8F8F2;">  } </span><span style="color:#FF79C6;">catch</span><span style="color:#F8F8F2;"> (error) {</span></span>
<span class="line"><span style="color:#50FA7B;">    reject</span><span style="color:#F8F8F2;">(error);</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#8BE9FD;font-style:italic;">Promise</span><span style="color:#F8F8F2;">.prototype.</span><span style="color:#50FA7B;">then</span><span style="color:#FF79C6;"> =</span><span style="color:#FF79C6;"> function</span><span style="color:#F8F8F2;"> (</span><span style="color:#FFB86C;font-style:italic;">onFulfilled</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">onRejected</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#FF79C6;">  return</span><span style="color:#FF79C6;font-weight:bold;"> new</span><span style="color:#8BE9FD;font-style:italic;"> Promise</span><span style="color:#F8F8F2;">((</span><span style="color:#FFB86C;font-style:italic;">resolve</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">reject</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#BD93F9;font-style:italic;">    this</span><span style="color:#F8F8F2;">.handlers.</span><span style="color:#50FA7B;">push</span><span style="color:#F8F8F2;">({ onFulfilled, onRejected, resolve, reject });</span></span>
<span class="line"><span style="color:#BD93F9;font-style:italic;">    this</span><span style="color:#F8F8F2;">.state </span><span style="color:#FF79C6;">!==</span><span style="color:#F8F8F2;"> PENDING </span><span style="color:#FF79C6;">&amp;&amp;</span><span style="color:#50FA7B;"> notifyAll</span><span style="color:#F8F8F2;">(</span><span style="color:#BD93F9;font-style:italic;">this</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">  });</span></span>
<span class="line"><span style="color:#F8F8F2;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#8BE9FD;font-style:italic;">Promise</span><span style="color:#F8F8F2;">.prototype.</span><span style="color:#50FA7B;">catch</span><span style="color:#FF79C6;"> =</span><span style="color:#FF79C6;"> function</span><span style="color:#F8F8F2;"> (</span><span style="color:#FFB86C;font-style:italic;">onRejected</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#FF79C6;">  return</span><span style="color:#BD93F9;font-style:italic;"> this</span><span style="color:#F8F8F2;">.</span><span style="color:#50FA7B;">then</span><span style="color:#F8F8F2;">(</span><span style="color:#BD93F9;">null</span><span style="color:#F8F8F2;">, onRejected);</span></span>
<span class="line"><span style="color:#F8F8F2;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#8BE9FD;font-style:italic;">Promise</span><span style="color:#F8F8F2;">.prototype.</span><span style="color:#50FA7B;">finally</span><span style="color:#FF79C6;"> =</span><span style="color:#FF79C6;"> function</span><span style="color:#F8F8F2;"> (</span><span style="color:#FFB86C;font-style:italic;">onFinally</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#FF79C6;">  return</span><span style="color:#BD93F9;font-style:italic;"> this</span><span style="color:#F8F8F2;">.</span><span style="color:#50FA7B;">then</span><span style="color:#F8F8F2;">(</span></span>
<span class="line"><span style="color:#6272A4;">    /* onFulfilled */</span></span>
<span class="line"><span style="color:#F8F8F2;">    (</span><span style="color:#FFB86C;font-style:italic;">res</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#8BE9FD;font-style:italic;"> Promise</span><span style="color:#F8F8F2;">.</span><span style="color:#50FA7B;">resolve</span><span style="color:#F8F8F2;">(</span><span style="color:#50FA7B;">onFinally</span><span style="color:#F8F8F2;">()).</span><span style="color:#50FA7B;">then</span><span style="color:#F8F8F2;">(() </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> res),</span></span>
<span class="line"><span style="color:#6272A4;">    /* onRejected */</span></span>
<span class="line"><span style="color:#F8F8F2;">    (</span><span style="color:#FFB86C;font-style:italic;">err</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">=&gt;</span></span>
<span class="line"><span style="color:#8BE9FD;font-style:italic;">      Promise</span><span style="color:#F8F8F2;">.</span><span style="color:#50FA7B;">resolve</span><span style="color:#F8F8F2;">(</span><span style="color:#50FA7B;">onFinally</span><span style="color:#F8F8F2;">()).</span><span style="color:#50FA7B;">then</span><span style="color:#F8F8F2;">(() </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#FF79C6;">        throw</span><span style="color:#F8F8F2;"> err;</span></span>
<span class="line"><span style="color:#F8F8F2;">      })</span></span>
<span class="line"><span style="color:#F8F8F2;">  );</span></span>
<span class="line"><span style="color:#F8F8F2;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#8BE9FD;font-style:italic;">Promise</span><span style="color:#F8F8F2;">.</span><span style="color:#50FA7B;">resolve</span><span style="color:#FF79C6;"> =</span><span style="color:#F8F8F2;"> (</span><span style="color:#FFB86C;font-style:italic;">value</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#FF79C6;font-weight:bold;"> new</span><span style="color:#8BE9FD;font-style:italic;"> Promise</span><span style="color:#F8F8F2;">((</span><span style="color:#FFB86C;font-style:italic;">resolve</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#50FA7B;"> resolve</span><span style="color:#F8F8F2;">(value));</span></span>
<span class="line"><span style="color:#8BE9FD;font-style:italic;">Promise</span><span style="color:#F8F8F2;">.</span><span style="color:#50FA7B;">reject</span><span style="color:#FF79C6;"> =</span><span style="color:#F8F8F2;"> (</span><span style="color:#FFB86C;font-style:italic;">reason</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#FF79C6;font-weight:bold;"> new</span><span style="color:#8BE9FD;font-style:italic;"> Promise</span><span style="color:#F8F8F2;">((</span><span style="color:#FFB86C;font-style:italic;">_</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">reject</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#50FA7B;"> reject</span><span style="color:#F8F8F2;">(reason));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#8BE9FD;font-style:italic;">Promise</span><span style="color:#F8F8F2;">.</span><span style="color:#50FA7B;">all</span><span style="color:#FF79C6;"> =</span><span style="color:#F8F8F2;"> (</span><span style="color:#FFB86C;font-style:italic;">promises</span><span style="color:#FF79C6;"> =</span><span style="color:#F8F8F2;"> []) </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#FF79C6;">  return</span><span style="color:#FF79C6;font-weight:bold;"> new</span><span style="color:#8BE9FD;font-style:italic;"> Promise</span><span style="color:#F8F8F2;">((</span><span style="color:#FFB86C;font-style:italic;">resolve</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">reject</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#FF79C6;">    let</span><span style="color:#F8F8F2;"> count </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> 0</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#FF79C6;">    let</span><span style="color:#F8F8F2;"> values </span><span style="color:#FF79C6;">=</span><span style="color:#FF79C6;font-weight:bold;"> new</span><span style="color:#50FA7B;"> Array</span><span style="color:#F8F8F2;">(promises.length);</span></span>
<span class="line"><span style="color:#FF79C6;">    let</span><span style="color:#50FA7B;"> collectValue</span><span style="color:#FF79C6;"> =</span><span style="color:#F8F8F2;"> (</span><span style="color:#FFB86C;font-style:italic;">index</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> (</span><span style="color:#FFB86C;font-style:italic;">value</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">      values[index] </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> value;</span></span>
<span class="line"><span style="color:#F8F8F2;">      count </span><span style="color:#FF79C6;">+=</span><span style="color:#BD93F9;"> 1</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">      count </span><span style="color:#FF79C6;">===</span><span style="color:#F8F8F2;"> promises.length </span><span style="color:#FF79C6;">&amp;&amp;</span><span style="color:#50FA7B;"> resolve</span><span style="color:#F8F8F2;">(values);</span></span>
<span class="line"><span style="color:#F8F8F2;">    };</span></span>
<span class="line"><span style="color:#F8F8F2;">    promises.</span><span style="color:#50FA7B;">forEach</span><span style="color:#F8F8F2;">((</span><span style="color:#FFB86C;font-style:italic;">promise</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">i</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#FF79C6;">      if</span><span style="color:#F8F8F2;"> (</span><span style="color:#50FA7B;">isPromise</span><span style="color:#F8F8F2;">(promise)) {</span></span>
<span class="line"><span style="color:#F8F8F2;">        promise.</span><span style="color:#50FA7B;">then</span><span style="color:#F8F8F2;">(</span><span style="color:#50FA7B;">collectValue</span><span style="color:#F8F8F2;">(i), reject);</span></span>
<span class="line"><span style="color:#F8F8F2;">      } </span><span style="color:#FF79C6;">else</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#50FA7B;">        collectValue</span><span style="color:#F8F8F2;">(i)(promise);</span></span>
<span class="line"><span style="color:#F8F8F2;">      }</span></span>
<span class="line"><span style="color:#F8F8F2;">    });</span></span>
<span class="line"><span style="color:#F8F8F2;">  });</span></span>
<span class="line"><span style="color:#F8F8F2;">};</span></span>
<span class="line"><span style="color:#8BE9FD;font-style:italic;">Promise</span><span style="color:#F8F8F2;">.</span><span style="color:#50FA7B;">race</span><span style="color:#FF79C6;"> =</span><span style="color:#F8F8F2;"> (</span><span style="color:#FFB86C;font-style:italic;">promises</span><span style="color:#FF79C6;"> =</span><span style="color:#F8F8F2;"> []) </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#FF79C6;">  return</span><span style="color:#FF79C6;font-weight:bold;"> new</span><span style="color:#8BE9FD;font-style:italic;"> Promise</span><span style="color:#F8F8F2;">((</span><span style="color:#FFB86C;font-style:italic;">resolve</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">reject</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">=&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">    promises.</span><span style="color:#50FA7B;">forEach</span><span style="color:#F8F8F2;">((</span><span style="color:#FFB86C;font-style:italic;">promise</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#FF79C6;">      if</span><span style="color:#F8F8F2;"> (</span><span style="color:#50FA7B;">isPromise</span><span style="color:#F8F8F2;">(promise)) {</span></span>
<span class="line"><span style="color:#F8F8F2;">        promise.</span><span style="color:#50FA7B;">then</span><span style="color:#F8F8F2;">(resolve, reject);</span></span>
<span class="line"><span style="color:#F8F8F2;">      } </span><span style="color:#FF79C6;">else</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#50FA7B;">        resolve</span><span style="color:#F8F8F2;">(promise);</span></span>
<span class="line"><span style="color:#F8F8F2;">      }</span></span>
<span class="line"><span style="color:#F8F8F2;">    })</span></span>
<span class="line"><span style="color:#F8F8F2;">  );</span></span>
<span class="line"><span style="color:#F8F8F2;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#8BE9FD;font-style:italic;">Promise</span><span style="color:#F8F8F2;">.defer </span><span style="color:#FF79C6;">=</span><span style="color:#8BE9FD;font-style:italic;"> Promise</span><span style="color:#F8F8F2;">.</span><span style="color:#50FA7B;">deferred</span><span style="color:#FF79C6;"> =</span><span style="color:#FF79C6;"> function</span><span style="color:#F8F8F2;"> () {</span></span>
<span class="line"><span style="color:#FF79C6;">  let</span><span style="color:#F8F8F2;"> dfd </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> {};</span></span>
<span class="line"><span style="color:#F8F8F2;">  dfd.promise </span><span style="color:#FF79C6;">=</span><span style="color:#FF79C6;font-weight:bold;"> new</span><span style="color:#8BE9FD;font-style:italic;"> Promise</span><span style="color:#F8F8F2;">((</span><span style="color:#FFB86C;font-style:italic;">resolve</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">reject</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">    dfd.resolve </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> resolve;</span></span>
<span class="line"><span style="color:#F8F8F2;">    dfd.reject </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> reject;</span></span>
<span class="line"><span style="color:#F8F8F2;">  });</span></span>
<span class="line"><span style="color:#FF79C6;">  return</span><span style="color:#F8F8F2;"> dfd;</span></span>
<span class="line"><span style="color:#F8F8F2;">};</span></span>
<span class="line"><span style="color:#8BE9FD;font-style:italic;">module</span><span style="color:#F8F8F2;">.</span><span style="color:#8BE9FD;font-style:italic;">exports</span><span style="color:#FF79C6;"> =</span><span style="color:#8BE9FD;font-style:italic;"> Promise</span><span style="color:#F8F8F2;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details>`,69)]))}const r=n(p,[["render",o],["__file","promise.html.vue"]]),c=JSON.parse('{"path":"/javascript/promise.html","title":"Promise实现","lang":"en-US","frontmatter":{"title":"Promise实现","category":["JavaScript"],"date":"2020-10-16T00:00:00.000Z","description":"0.前期工作 通过 npm install promises-aplus-tests ，可以下载测试套件。 GitHub - promises-aplus/promises-tests: Compliances tests for Promises/A+ 1.术语 1.1. promise: 一个拥有符合这个规范的行为的 then 方法的对象或函数。 ...","head":[["meta",{"property":"og:url","content":"https://luxiag.github.io/luxiag/blog/javascript/promise.html"}],["meta",{"property":"og:title","content":"Promise实现"}],["meta",{"property":"og:description","content":"0.前期工作 通过 npm install promises-aplus-tests ，可以下载测试套件。 GitHub - promises-aplus/promises-tests: Compliances tests for Promises/A+ 1.术语 1.1. promise: 一个拥有符合这个规范的行为的 then 方法的对象或函数。 ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2023-01-15T10:46:26.000Z"}],["meta",{"property":"article:published_time","content":"2020-10-16T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-01-15T10:46:26.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Promise实现\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2020-10-16T00:00:00.000Z\\",\\"dateModified\\":\\"2023-01-15T10:46:26.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"luxiag\\",\\"url\\":\\"https://luxiag.github.io/luxiag\\"}]}"]]},"headers":[{"level":2,"title":"0.前期工作","slug":"_0-前期工作","link":"#_0-前期工作","children":[]},{"level":2,"title":"1.术语","slug":"_1-术语","link":"#_1-术语","children":[]},{"level":2,"title":"2.必要条件","slug":"_2-必要条件","link":"#_2-必要条件","children":[{"level":3,"title":"2.1 Promise 状态","slug":"_2-1-promise-状态","link":"#_2-1-promise-状态","children":[]},{"level":3,"title":"2.2 Then 方法","slug":"_2-2-then-方法","link":"#_2-2-then-方法","children":[]},{"level":3,"title":"2.3 Promise 解决程序","slug":"_2-3-promise-解决程序","link":"#_2-3-promise-解决程序","children":[]}]},{"level":2,"title":"function-promise","slug":"function-promise","link":"#function-promise","children":[]}],"git":{"createdTime":1673779586000,"updatedTime":1673779586000,"contributors":[{"name":"luxiag","email":"luxiag@qq.com","commits":1}]},"readingTime":{"minutes":8.12,"words":2435},"filePathRelative":"javascript/promise.md","localizedDate":"October 16, 2020","excerpt":"<table>\\n<thead>\\n<tr>\\n<th><strong>参考</strong></th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td><strong><a href=\\"https://zhuanlan.zhihu.com/p/83965949\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">100 行代码实现 Promises/A+ 规范</a></strong></td>\\n</tr>\\n<tr>\\n<td><strong><a href=\\"https://promisesaplus.com/\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">Promises/A+</a></strong></td>\\n</tr>\\n</tbody>\\n</table>","autoDesc":true}');export{r as comp,c as data};
