import{_ as n}from"./0407071739096838889-3B2l6h4f.js";import{_ as a,e as l,g as e,o as p}from"./app-BcLUFOMF.js";const o="/blog/assets/168012340-12-01-15-21-17-CjnYc5N_.png",t={};function r(i,s){return p(),l("div",null,s[0]||(s[0]=[e(`<p>双指针顾名思义，就是同时使用两个指针，在序列、链表结构上指向的是位置，在树、图结构中指向的是节点，通过或同向移动，或相向移动来维护、统计信息。</p><h1 id="删除有序数组中的重复项" tabindex="-1"><a class="header-anchor" href="#删除有序数组中的重复项"><span><a href="https://leetcode.cn/problems/remove-duplicates-from-sorted-array/description/?envType=problem-list-v2&amp;envId=two-pointers" target="_blank" rel="noopener noreferrer">删除有序数组中的重复项</a></span></a></h1><p>给你一个 非严格递增排列 的数组 nums ，请你 原地 删除重复出现的元素，使每个元素 只出现一次 ，返回删除后数组的新长度。元素的 相对顺序 应该保持 一致 。然后返回 nums 中唯一元素的个数。</p><div class="language-md line-numbers-mode" data-highlighter="shiki" data-ext="md" data-title="md" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#F8F8F2;">输入：nums = [</span><span style="color:#FF79C6;">1,1,2</span><span style="color:#F8F8F2;">]</span></span>
<span class="line"><span style="color:#F8F8F2;">输出：2, nums = [</span><span style="color:#FF79C6;">1,2,_</span><span style="color:#F8F8F2;">]</span></span>
<span class="line"><span style="color:#F8F8F2;">解释：函数应该返回新的长度 2 ，并且原数组 nums 的前两个元素被修改为 1, 2 。不需要考虑数组中超出新长度后面的元素。</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">输入：nums = [</span><span style="color:#FF79C6;">0,0,1,1,1,2,2,3,3,4</span><span style="color:#F8F8F2;">]</span></span>
<span class="line"><span style="color:#F8F8F2;">输出：5, nums = [</span><span style="color:#FF79C6;">0,1,2,3,4</span><span style="color:#F8F8F2;">]</span></span>
<span class="line"><span style="color:#F8F8F2;">解释：函数应该返回新的长度 5 ， 并且原数组 nums 的前五个元素被修改为 0, 1, 2, 3, 4 。不需要考虑数组中超出新长度后面的元素。</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-ts line-numbers-mode" data-highlighter="shiki" data-ext="ts" data-title="ts" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">function</span><span style="color:#50FA7B;"> removeDuplicates</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">nums</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> number</span><span style="color:#F8F8F2;">[])</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> number</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#FF79C6;">    const</span><span style="color:#F8F8F2;"> n </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> nums.length;</span></span>
<span class="line"><span style="color:#FF79C6;">    if</span><span style="color:#F8F8F2;"> (n </span><span style="color:#FF79C6;">===</span><span style="color:#BD93F9;"> 0</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#FF79C6;">        return</span><span style="color:#BD93F9;"> 0</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#FF79C6;">    let</span><span style="color:#F8F8F2;"> fast </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> 1</span><span style="color:#F8F8F2;">, slow </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> 1</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#FF79C6;">    while</span><span style="color:#F8F8F2;"> (fast </span><span style="color:#FF79C6;">&lt;</span><span style="color:#F8F8F2;"> n) {</span></span>
<span class="line"><span style="color:#FF79C6;">        if</span><span style="color:#F8F8F2;"> (nums[fast] </span><span style="color:#FF79C6;">!==</span><span style="color:#F8F8F2;"> nums[fast </span><span style="color:#FF79C6;">-</span><span style="color:#BD93F9;"> 1</span><span style="color:#F8F8F2;">]) {</span></span>
<span class="line"><span style="color:#F8F8F2;">            nums[slow] </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> nums[fast];</span></span>
<span class="line"><span style="color:#FF79C6;">            ++</span><span style="color:#F8F8F2;">slow;</span></span>
<span class="line"><span style="color:#F8F8F2;">        }</span></span>
<span class="line"><span style="color:#FF79C6;">        ++</span><span style="color:#F8F8F2;">fast;</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#FF79C6;">    return</span><span style="color:#F8F8F2;"> slow;</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="盛最多水的容器" tabindex="-1"><a class="header-anchor" href="#盛最多水的容器"><span><a href="https://leetcode.cn/problems/container-with-most-water/description/" target="_blank" rel="noopener noreferrer">盛最多水的容器</a></span></a></h1><figure><img src="`+o+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><div class="language-md line-numbers-mode" data-highlighter="shiki" data-ext="md" data-title="md" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#F8F8F2;">输入：[</span><span style="color:#FF79C6;">1,8,6,2,5,4,8,3,7</span><span style="color:#F8F8F2;">]</span></span>
<span class="line"><span style="color:#F8F8F2;">输出：49</span></span>
<span class="line"><span style="color:#F8F8F2;">解释：图中垂直线代表输入数组 [</span><span style="color:#FF79C6;">1,8,6,2,5,4,8,3,7</span><span style="color:#F8F8F2;">]。在此情况下，容器能够容纳水（表示为蓝色部分）的最大值为 49。</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#6272A4;">//来源：https://leetcode.cn/problems/container-with-most-water/solutions/207215/sheng-zui-duo-shui-de-rong-qi-by-leetcode-solution/</span></span>
<span class="line"><span style="color:#6272A4;">// 总是移动数字较小的那个指针</span></span>
<span class="line"><span style="color:#6272A4;">// [1, 8, 6, 2, 5, 4, 8, 3, 7]</span></span>
<span class="line"><span style="color:#6272A4;">//     ^                    ^</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">function</span><span style="color:#50FA7B;"> maxArea</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">height</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#6272A4;">  // 定义两个指针</span></span>
<span class="line"><span style="color:#FF79C6;">  let</span><span style="color:#F8F8F2;"> l </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> 0</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">    r </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> height.length </span><span style="color:#FF79C6;">-</span><span style="color:#BD93F9;"> 1</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#6272A4;">  // 最大值</span></span>
<span class="line"><span style="color:#FF79C6;">  let</span><span style="color:#F8F8F2;"> ans </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> 0</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#FF79C6;">  while</span><span style="color:#F8F8F2;"> (l </span><span style="color:#FF79C6;">&lt;</span><span style="color:#F8F8F2;"> r) {</span></span>
<span class="line"><span style="color:#FF79C6;">    let</span><span style="color:#F8F8F2;"> area </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> Math.</span><span style="color:#50FA7B;">min</span><span style="color:#F8F8F2;">(height[l], height[r]) </span><span style="color:#FF79C6;">*</span><span style="color:#F8F8F2;"> (r </span><span style="color:#FF79C6;">-</span><span style="color:#F8F8F2;"> l);</span></span>
<span class="line"><span style="color:#F8F8F2;">    ans </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> Math.</span><span style="color:#50FA7B;">max</span><span style="color:#F8F8F2;">(ans,area);</span></span>
<span class="line"><span style="color:#FF79C6;">    if</span><span style="color:#F8F8F2;">(height[l] </span><span style="color:#FF79C6;">&lt;=</span><span style="color:#F8F8F2;"> height[r]) {</span></span>
<span class="line"><span style="color:#FF79C6;">        ++</span><span style="color:#F8F8F2;">l</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span><span style="color:#FF79C6;">else</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#FF79C6;">        --</span><span style="color:#F8F8F2;">r</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#FF79C6;">  return</span><span style="color:#F8F8F2;"> ans</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="接雨水" tabindex="-1"><a class="header-anchor" href="#接雨水"><span><a href="https://leetcode.cn/problems/trapping-rain-water/description/?envType=problem-list-v2&amp;envId=two-pointers" target="_blank" rel="noopener noreferrer">接雨水</a></span></a></h1><p>给定 n 个非负整数表示每个宽度为 1 的柱子的高度图，计算按此排列的柱子，下雨之后能接多少雨水。</p><figure><img src="`+n+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><div class="language-md line-numbers-mode" data-highlighter="shiki" data-ext="md" data-title="md" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#F8F8F2;">输入：height = [</span><span style="color:#FF79C6;">0,1,0,2,1,0,1,3,2,1,2,1</span><span style="color:#F8F8F2;">]</span></span>
<span class="line"><span style="color:#F8F8F2;">输出：6</span></span>
<span class="line"><span style="color:#F8F8F2;">解释：上面是由数组 [</span><span style="color:#FF79C6;">0,1,0,2,1,0,1,3,2,1,2,1</span><span style="color:#F8F8F2;">] 表示的高度图，在这种情况下，可以接 6 个单位的雨水（蓝色部分表示雨水）。 </span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">输入：height = [</span><span style="color:#FF79C6;">4,2,0,3,2,5</span><span style="color:#F8F8F2;">]</span></span>
<span class="line"><span style="color:#F8F8F2;">输出：9</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-ts line-numbers-mode" data-highlighter="shiki" data-ext="ts" data-title="ts" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#6272A4;">// &lt;https://leetcode.cn/problems/trapping-rain-water/solutions/692342/jie-yu-shui-by-leetcode-solution-tuvc/&gt;</span></span>
<span class="line"><span style="color:#FF79C6;">function</span><span style="color:#50FA7B;"> trap</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">height</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> number</span><span style="color:#F8F8F2;">[])</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> number</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#FF79C6;">    let</span><span style="color:#F8F8F2;"> ans </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> 0</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#FF79C6;">    let</span><span style="color:#F8F8F2;"> left </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> 0</span><span style="color:#F8F8F2;">, right </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> height.length </span><span style="color:#FF79C6;">-</span><span style="color:#BD93F9;"> 1</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#FF79C6;">    let</span><span style="color:#F8F8F2;"> leftMax </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> 0</span><span style="color:#F8F8F2;">, rightMax </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> 0</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#FF79C6;">    while</span><span style="color:#F8F8F2;"> (left </span><span style="color:#FF79C6;">&lt;</span><span style="color:#F8F8F2;"> right) {</span></span>
<span class="line"><span style="color:#F8F8F2;">        leftMax </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> Math.</span><span style="color:#50FA7B;">max</span><span style="color:#F8F8F2;">(leftMax, height[left]);</span></span>
<span class="line"><span style="color:#F8F8F2;">        rightMax </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> Math.</span><span style="color:#50FA7B;">max</span><span style="color:#F8F8F2;">(rightMax, height[right]);</span></span>
<span class="line"><span style="color:#FF79C6;">        if</span><span style="color:#F8F8F2;"> (height[left] </span><span style="color:#FF79C6;">&lt;</span><span style="color:#F8F8F2;"> height[right]) {</span></span>
<span class="line"><span style="color:#F8F8F2;">            ans </span><span style="color:#FF79C6;">+=</span><span style="color:#F8F8F2;"> leftMax </span><span style="color:#FF79C6;">-</span><span style="color:#F8F8F2;"> height[left];</span></span>
<span class="line"><span style="color:#FF79C6;">            ++</span><span style="color:#F8F8F2;">left;</span></span>
<span class="line"><span style="color:#F8F8F2;">        } </span><span style="color:#FF79C6;">else</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">            ans </span><span style="color:#FF79C6;">+=</span><span style="color:#F8F8F2;"> rightMax </span><span style="color:#FF79C6;">-</span><span style="color:#F8F8F2;"> height[right];</span></span>
<span class="line"><span style="color:#FF79C6;">            --</span><span style="color:#F8F8F2;">right;</span></span>
<span class="line"><span style="color:#F8F8F2;">        }</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#FF79C6;">    return</span><span style="color:#F8F8F2;"> ans;</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,14)]))}const d=a(t,[["render",r],["__file","double_pointer.html.vue"]]),y=JSON.parse('{"path":"/algorithm/double_pointer.html","title":"双指针","lang":"en-US","frontmatter":{"title":"双指针","reference":"算法图解","date":"2022-12-30T00:00:00.000Z","category":["算法"],"tag":["算法图解"],"description":"双指针顾名思义，就是同时使用两个指针，在序列、链表结构上指向的是位置，在树、图结构中指向的是节点，通过或同向移动，或相向移动来维护、统计信息。 删除有序数组中的重复项 给你一个 非严格递增排列 的数组 nums ，请你 原地 删除重复出现的元素，使每个元素 只出现一次 ，返回删除后数组的新长度。元素的 相对顺序 应该保持 一致 。然后返回 nums 中...","head":[["meta",{"property":"og:url","content":"https://luxiag.github.io/luxiag/blog/algorithm/double_pointer.html"}],["meta",{"property":"og:title","content":"双指针"}],["meta",{"property":"og:description","content":"双指针顾名思义，就是同时使用两个指针，在序列、链表结构上指向的是位置，在树、图结构中指向的是节点，通过或同向移动，或相向移动来维护、统计信息。 删除有序数组中的重复项 给你一个 非严格递增排列 的数组 nums ，请你 原地 删除重复出现的元素，使每个元素 只出现一次 ，返回删除后数组的新长度。元素的 相对顺序 应该保持 一致 。然后返回 nums 中..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2025-02-09T14:06:21.000Z"}],["meta",{"property":"article:tag","content":"算法图解"}],["meta",{"property":"article:published_time","content":"2022-12-30T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-02-09T14:06:21.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"双指针\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-12-30T00:00:00.000Z\\",\\"dateModified\\":\\"2025-02-09T14:06:21.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"luxiag\\",\\"url\\":\\"https://luxiag.github.io/luxiag\\"}]}"]]},"git":{"createdTime":1669883260000,"updatedTime":1739109981000,"contributors":[{"name":"卢祥","username":"卢祥","email":"example@qq.com","commits":6,"url":"https://github.com/卢祥"},{"name":"luxiag","username":"luxiag","email":"luxiag@qq.com","commits":3,"url":"https://github.com/luxiag"}]},"readingTime":{"minutes":2.42,"words":727},"filePathRelative":"algorithm/double_pointer.md","localizedDate":"December 30, 2022","excerpt":"<p>双指针顾名思义，就是同时使用两个指针，在序列、链表结构上指向的是位置，在树、图结构中指向的是节点，通过或同向移动，或相向移动来维护、统计信息。</p>\\n<h1><a class=\\"header-anchor\\" href=\\"#删除有序数组中的重复项\\"><span></span></a><a href=\\"https://leetcode.cn/problems/remove-duplicates-from-sorted-array/description/?envType=problem-list-v2&amp;envId=two-pointers\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">删除有序数组中的重复项</a></h1>","autoDesc":true}');export{d as comp,y as data};
