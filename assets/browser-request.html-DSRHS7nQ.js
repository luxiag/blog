import{_ as e,c as n,a,o as l}from"./app-DwrwhhBt.js";const o={};function p(r,s){return l(),n("div",null,s[0]||(s[0]=[a(`<p>通过 XMLHttpRequest 可以在不刷新页面的情况下请求特定 URL，获取数据。这允许网页在不影响用户操作的情况下，更新页面的局部内容</p><h1 id="_1-创建-xmlhttprequest-实例" tabindex="-1"><a class="header-anchor" href="#_1-创建-xmlhttprequest-实例"><span><strong>1 创建 XMLHttpRequest 实例</strong></span></a></h1><div class="language-jsx line-numbers-mode" data-highlighter="shiki" data-ext="jsx" data-title="jsx" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> xhr </span><span style="color:#FF79C6;">=</span><span style="color:#FF79C6;font-weight:bold;"> new</span><span style="color:#50FA7B;"> XMLHttpRequest</span><span style="color:#F8F8F2;">();</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h1 id="_2-发出-http-请求" tabindex="-1"><a class="header-anchor" href="#_2-发出-http-请求"><span><strong>2 发出 HTTP 请求</strong></span></a></h1><p>调用open()不会实际发送请求，只是为发送请求做好准备。</p><div class="language-jsx line-numbers-mode" data-highlighter="shiki" data-ext="jsx" data-title="jsx" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#F8F8F2;">xhrReq.</span><span style="color:#50FA7B;">open</span><span style="color:#F8F8F2;">(method, url);</span></span>
<span class="line"><span style="color:#F8F8F2;">xhrReq.</span><span style="color:#50FA7B;">open</span><span style="color:#F8F8F2;">(method, url, async);</span></span>
<span class="line"><span style="color:#F8F8F2;">xhrReq.</span><span style="color:#50FA7B;">open</span><span style="color:#F8F8F2;">(method, url, async, user);</span></span>
<span class="line"><span style="color:#F8F8F2;">xhrReq.</span><span style="color:#50FA7B;">open</span><span style="color:#F8F8F2;">(method, url, async, user, password);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong><code>method</code></strong></p><p>要使用的HTTP方法，比如「GET」、「POST」、「PUT」、「DELETE」、等。对于非HTTP(S) URL被忽略。</p><p><strong><code>url</code></strong></p><p>一个<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/DOMString" target="_blank" rel="noopener noreferrer"><code>DOMString</code></a>表示要向其发送请求的URL。</p><p><strong><code>async</code> 可选</strong></p><p>一个可选的布尔参数，表示是否异步执行操作，默认为<code>true</code>。</p><p><strong><code>user</code> 可选</strong></p><p>可选的用户名用于认证用途；默认为<code>null</code></p><p><strong><code>password</code> 可选</strong></p><p>可选的密码用于认证用途，默认为<code>null</code>。</p><div class="language-jsx line-numbers-mode" data-highlighter="shiki" data-ext="jsx" data-title="jsx" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#F8F8F2;">xhr.</span><span style="color:#50FA7B;">open</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">get</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">,</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">example.txt</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">,</span><span style="color:#BD93F9;">false</span><span style="color:#F8F8F2;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="get-请求" tabindex="-1"><a class="header-anchor" href="#get-请求"><span><strong>GET 请求</strong></span></a></h2><p>用于向服务器查询某些信息。必要时，需要在 GET 请求的 URL后面添加查询字符串参数。</p><div class="language-jsx line-numbers-mode" data-highlighter="shiki" data-ext="jsx" data-title="jsx" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#F8F8F2;">xhr.</span><span style="color:#50FA7B;">open</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">get</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">, </span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">example.php?name1=value1&amp;name2=value2</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">true</span><span style="color:#F8F8F2;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="post请求" tabindex="-1"><a class="header-anchor" href="#post请求"><span><strong>POST请求</strong></span></a></h2><p>用于向服务器发送应该保存的数据</p><div class="language-jsx line-numbers-mode" data-highlighter="shiki" data-ext="jsx" data-title="jsx" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#F8F8F2;">xhr.</span><span style="color:#50FA7B;">open</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">post</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">, </span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">example.php</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">true</span><span style="color:#F8F8F2;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h1 id="_3-请求体发送的数据。" tabindex="-1"><a class="header-anchor" href="#_3-请求体发送的数据。"><span><strong>3 请求体发送的数据。</strong></span></a></h1><p>如果不需要发送请求体，则必须传null</p><p>调用send()之后，请求就会发送到服务器。</p><div class="language-jsx line-numbers-mode" data-highlighter="shiki" data-ext="jsx" data-title="jsx" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#F8F8F2;">xhr.</span><span style="color:#50FA7B;">send</span><span style="color:#F8F8F2;">(</span><span style="color:#BD93F9;">null</span><span style="color:#F8F8F2;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="http头部" tabindex="-1"><a class="header-anchor" href="#http头部"><span><strong>HTTP头部</strong></span></a></h2><p>默认情况下，XHR 请求会发送以下头部字段。</p><ul><li>Accept：浏览器可以处理的内容类型。</li><li>Accept-Charset：浏览器可以显示的字符集。</li><li>Accept-Encoding：浏览器可以处理的压缩编码类型。</li><li>Accept-Language：浏览器使用的语言。</li><li>Connection：浏览器与服务器的连接类型。</li><li>Cookie：页面中设置的Cookie。</li><li>Host：发送请求的页面所在的域。</li><li>Referer：发送请求的页面的URI。注意，这个字段在HTTP 规范中就拼错了，所以考虑到兼容 性也必须将错就错。（正确的拼写应该是Referrer。）</li><li>User-Agent：浏览器的用户代理字符串。</li></ul><h2 id="setrequestheader" tabindex="-1"><a class="header-anchor" href="#setrequestheader"><span><strong>setRequestHeader()</strong></span></a></h2><p>设置HTTP请求头部的方法</p><div class="language-jsx line-numbers-mode" data-highlighter="shiki" data-ext="jsx" data-title="jsx" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#F8F8F2;">xhr.</span><span style="color:#50FA7B;">setRequestHeader</span><span style="color:#F8F8F2;">(header, value);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><strong><code>header</code></strong></p><p>属性的名称。</p><p><strong><code>value</code></strong></p><p>属性的值。</p><h2 id="post请求-1" tabindex="-1"><a class="header-anchor" href="#post请求-1"><span><strong>POST请求</strong></span></a></h2><div class="language-jsx line-numbers-mode" data-highlighter="shiki" data-ext="jsx" data-title="jsx" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#F8F8F2;">xhr.</span><span style="color:#50FA7B;">setRequestHeader</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">Content-Type</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">, </span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">application/x-www-form-urlencoded</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> form </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> document.</span><span style="color:#50FA7B;">getElementById</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">user-info</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">xhr.</span><span style="color:#50FA7B;">send</span><span style="color:#F8F8F2;">(</span><span style="color:#50FA7B;">serialize</span><span style="color:#F8F8F2;">(form));</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="_4-接收服务器传回的数据" tabindex="-1"><a class="header-anchor" href="#_4-接收服务器传回的数据"><span><strong>4 接收服务器传回的数据</strong></span></a></h1><p>请求是同步的 JavaScript 代码会等待服务器响应之后再继续执行。 <strong>收到响应后，XHR对象的以下属性会被填充上数据。</strong></p><ul><li>responseText：作为响应体返回的文本。</li><li>responseXML：如果响应的内容类型是&quot;text/xml&quot;或&quot;application/xml&quot;，那就是包含响应 数据的XML DOM 文档。</li><li>status：响应的HTTP 状态。</li><li>statusText：响应的HTTP 状态描述。</li></ul><div class="language-jsx line-numbers-mode" data-highlighter="shiki" data-ext="jsx" data-title="jsx" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">if</span><span style="color:#F8F8F2;"> ((xhr.status </span><span style="color:#FF79C6;">&gt;=</span><span style="color:#BD93F9;"> 200</span><span style="color:#FF79C6;"> &amp;&amp;</span><span style="color:#F8F8F2;"> xhr.status </span><span style="color:#FF79C6;">&lt;</span><span style="color:#BD93F9;"> 300</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">||</span><span style="color:#F8F8F2;"> xhr.status </span><span style="color:#FF79C6;">==</span><span style="color:#BD93F9;"> 304</span><span style="color:#F8F8F2;">) { </span></span>
<span class="line"><span style="color:#50FA7B;">  alert</span><span style="color:#F8F8F2;">(xhr.responseText); </span></span>
<span class="line"><span style="color:#F8F8F2;">} </span><span style="color:#FF79C6;">else</span><span style="color:#F8F8F2;"> { </span></span>
<span class="line"><span style="color:#50FA7B;">  alert</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">Request was unsuccessful: </span><span style="color:#E9F284;">&quot;</span><span style="color:#FF79C6;"> +</span><span style="color:#F8F8F2;"> xhr.status); </span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="readystatechange事件" tabindex="-1"><a class="header-anchor" href="#readystatechange事件"><span>readystatechange事件</span></a></h1><p>XHR 对象有一个readyState 属性，表示当前处在请求/响应过程的哪个阶段。</p><p><strong>每次readyState 从一个值变成另一个值，都会触发readystatechange 事件。</strong></p><h2 id="readystate" tabindex="-1"><a class="header-anchor" href="#readystate"><span>readyState</span></a></h2><ul><li>0：未初始化（Uninitialized）。尚未调用open()方法。</li><li>1：已打开（Open）。已调用open()方法，尚未调用send()方法。</li><li>2：已发送（Sent）。已调用send()方法，尚未收到响应。</li><li>3：接收中（Receiving）。已经收到部分响应。</li><li>4：完成（Complete）。已经收到所有响应，可以使用了。</li></ul><div class="language-jsx line-numbers-mode" data-highlighter="shiki" data-ext="jsx" data-title="jsx" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> xhr </span><span style="color:#FF79C6;">=</span><span style="color:#FF79C6;font-weight:bold;"> new</span><span style="color:#50FA7B;"> XMLHttpRequest</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#F8F8F2;">xhr.</span><span style="color:#50FA7B;">onreadystatechange</span><span style="color:#FF79C6;"> =</span><span style="color:#FF79C6;"> function</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#FF79C6;"> if</span><span style="color:#F8F8F2;"> (xhr.readyState </span><span style="color:#FF79C6;">==</span><span style="color:#BD93F9;"> 4</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#FF79C6;">  if</span><span style="color:#F8F8F2;"> ((xhr.status </span><span style="color:#FF79C6;">&gt;=</span><span style="color:#BD93F9;"> 200</span><span style="color:#FF79C6;"> &amp;&amp;</span><span style="color:#F8F8F2;"> xhr.status </span><span style="color:#FF79C6;">&lt;</span><span style="color:#BD93F9;"> 300</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">||</span><span style="color:#F8F8F2;"> xhr.status </span><span style="color:#FF79C6;">==</span><span style="color:#BD93F9;"> 304</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#50FA7B;">   alert</span><span style="color:#F8F8F2;">(xhr.responseText);</span></span>
<span class="line"><span style="color:#F8F8F2;">  } </span><span style="color:#FF79C6;">else</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#50FA7B;">   alert</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">Request was unsuccessful: </span><span style="color:#E9F284;">&quot;</span><span style="color:#FF79C6;"> +</span><span style="color:#F8F8F2;"> xhr.status);</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;"> }</span></span>
<span class="line"><span style="color:#F8F8F2;">};</span></span>
<span class="line"><span style="color:#F8F8F2;">xhr.</span><span style="color:#50FA7B;">open</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">get</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">, </span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">example.txt</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">true</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">xhr.</span><span style="color:#50FA7B;">send</span><span style="color:#F8F8F2;">(</span><span style="color:#BD93F9;">null</span><span style="color:#F8F8F2;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="formdata" tabindex="-1"><a class="header-anchor" href="#formdata"><span>FormData</span></a></h1><p>XMLHttpRequest Level 2 新增了FormData 类型。</p><div class="language-jsx line-numbers-mode" data-highlighter="shiki" data-ext="jsx" data-title="jsx" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> data </span><span style="color:#FF79C6;">=</span><span style="color:#FF79C6;font-weight:bold;"> new</span><span style="color:#50FA7B;"> FormData</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#F8F8F2;">data.</span><span style="color:#50FA7B;">append</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">name</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">, </span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">Nicholas</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-jsx line-numbers-mode" data-highlighter="shiki" data-ext="jsx" data-title="jsx" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#F8F8F2;">formData.</span><span style="color:#50FA7B;">append</span><span style="color:#F8F8F2;">(name, value);</span></span>
<span class="line"><span style="color:#F8F8F2;">formData.</span><span style="color:#50FA7B;">append</span><span style="color:#F8F8F2;">(name, value, filename)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong><code>name</code></strong></p><p>value中包含的数据对应的表单名称。</p><p><strong><code>value</code></strong></p><p>表单的值。可以是<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/USVString" target="_blank" rel="noopener noreferrer"><code>USVString</code></a> 或 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Blob" target="_blank" rel="noopener noreferrer"><code>Blob</code></a> (包括子类型，如 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/File" target="_blank" rel="noopener noreferrer"><code>File</code></a>)。</p><p><strong><code>filename</code> 可选</strong></p><p>传给服务器的文件名称 (一个 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/USVString" target="_blank" rel="noopener noreferrer"><code>USVString</code></a>), 当一个 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Blob" target="_blank" rel="noopener noreferrer"><code>Blob</code></a> 或 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/File" target="_blank" rel="noopener noreferrer"><code>File</code></a> 被作为第二个参数的时候， <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Blob" target="_blank" rel="noopener noreferrer"><code>Blob</code></a> 对象的默认文件名是 &quot;blob&quot;。 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/File" target="_blank" rel="noopener noreferrer"><code>File</code></a> 对象的默认文件名是该文件的名称。</p><p>不再需要给XHR 对象显式设置任何请求头部</p><p>XHR 对象能够识别作为FormData 实例传入的数据类型并自动配置相应的头部。</p><div class="language-jsx line-numbers-mode" data-highlighter="shiki" data-ext="jsx" data-title="jsx" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> xhr </span><span style="color:#FF79C6;">=</span><span style="color:#FF79C6;font-weight:bold;"> new</span><span style="color:#50FA7B;"> XMLHttpRequest</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#F8F8F2;">xhr.</span><span style="color:#50FA7B;">onreadystatechange</span><span style="color:#FF79C6;"> =</span><span style="color:#FF79C6;"> function</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#FF79C6;"> if</span><span style="color:#F8F8F2;"> (xhr.readyState </span><span style="color:#FF79C6;">==</span><span style="color:#BD93F9;"> 4</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#FF79C6;">  if</span><span style="color:#F8F8F2;"> ((xhr.status </span><span style="color:#FF79C6;">&gt;=</span><span style="color:#BD93F9;"> 200</span><span style="color:#FF79C6;"> &amp;&amp;</span><span style="color:#F8F8F2;"> xhr.status </span><span style="color:#FF79C6;">&lt;</span><span style="color:#BD93F9;"> 300</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">||</span><span style="color:#F8F8F2;"> xhr.status </span><span style="color:#FF79C6;">==</span><span style="color:#BD93F9;"> 304</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#50FA7B;">   alert</span><span style="color:#F8F8F2;">(xhr.responseText);</span></span>
<span class="line"><span style="color:#F8F8F2;">  } </span><span style="color:#FF79C6;">else</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#50FA7B;">   alert</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">Request was unsuccessful: </span><span style="color:#E9F284;">&quot;</span><span style="color:#FF79C6;"> +</span><span style="color:#F8F8F2;"> xhr.status);</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;"> }</span></span>
<span class="line"><span style="color:#F8F8F2;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">xhr.</span><span style="color:#50FA7B;">open</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">post</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">, </span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">postexample.php</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">true</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> form </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> document.</span><span style="color:#50FA7B;">getElementById</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">user-info</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">xhr.</span><span style="color:#50FA7B;">send</span><span style="color:#F8F8F2;">(</span><span style="color:#FF79C6;font-weight:bold;">new</span><span style="color:#50FA7B;"> FormData</span><span style="color:#F8F8F2;">(form));</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="超时" tabindex="-1"><a class="header-anchor" href="#超时"><span>超时</span></a></h1><p>timeout 属性，用于表示发送请求后等待多少毫秒，如果响应不成功就中断请求</p><p>且在该时间过后没有收到响应时，XHR 对象就会触发timeout 事件</p><div class="language-jsx line-numbers-mode" data-highlighter="shiki" data-ext="jsx" data-title="jsx" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> xhr </span><span style="color:#FF79C6;">=</span><span style="color:#FF79C6;font-weight:bold;"> new</span><span style="color:#50FA7B;"> XMLHttpRequest</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#F8F8F2;">xhr.</span><span style="color:#50FA7B;">onreadystatechange</span><span style="color:#FF79C6;"> =</span><span style="color:#FF79C6;"> function</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#FF79C6;"> if</span><span style="color:#F8F8F2;"> (xhr.readyState </span><span style="color:#FF79C6;">==</span><span style="color:#BD93F9;"> 4</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#FF79C6;">  try</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#FF79C6;">   if</span><span style="color:#F8F8F2;"> ((xhr.status </span><span style="color:#FF79C6;">&gt;=</span><span style="color:#BD93F9;"> 200</span><span style="color:#FF79C6;"> &amp;&amp;</span><span style="color:#F8F8F2;"> xhr.status </span><span style="color:#FF79C6;">&lt;</span><span style="color:#BD93F9;"> 300</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">||</span><span style="color:#F8F8F2;"> xhr.status </span><span style="color:#FF79C6;">==</span><span style="color:#BD93F9;"> 304</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#50FA7B;">    alert</span><span style="color:#F8F8F2;">(xhr.responseText);</span></span>
<span class="line"><span style="color:#F8F8F2;">   } </span><span style="color:#FF79C6;">else</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#50FA7B;">    alert</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">Request was unsuccessful: </span><span style="color:#E9F284;">&quot;</span><span style="color:#FF79C6;"> +</span><span style="color:#F8F8F2;"> xhr.status);</span></span>
<span class="line"><span style="color:#F8F8F2;">   }</span></span>
<span class="line"><span style="color:#F8F8F2;">  } </span><span style="color:#FF79C6;">catch</span><span style="color:#F8F8F2;"> (ex) {</span></span>
<span class="line"><span style="color:#6272A4;">  // 假设由ontimeout 处理</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;"> }</span></span>
<span class="line"><span style="color:#F8F8F2;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">xhr.</span><span style="color:#50FA7B;">open</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">get</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">, </span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">timeout.php</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">true</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">xhr.timeout </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> 1000</span><span style="color:#F8F8F2;">; </span><span style="color:#6272A4;">// 设置1 秒超时</span></span>
<span class="line"><span style="color:#F8F8F2;">xhr.</span><span style="color:#50FA7B;">ontimeout</span><span style="color:#FF79C6;"> =</span><span style="color:#FF79C6;"> function</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#50FA7B;"> alert</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">Request did not return in a second.</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">};</span></span>
<span class="line"><span style="color:#F8F8F2;">xhr.</span><span style="color:#50FA7B;">send</span><span style="color:#F8F8F2;">(</span><span style="color:#BD93F9;">null</span><span style="color:#F8F8F2;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="overridemimetype" tabindex="-1"><a class="header-anchor" href="#overridemimetype"><span>overrideMimeType()</span></a></h1><p>重写XHR 响应的MIME 类型。</p><p><strong>媒体类型</strong>（通常称为 <strong>Multipurpose Internet Mail Extensions</strong> 或 <strong>MIME</strong> 类型 ****）是一种标准，用来表示文档、文件或字节流的性质和格式。</p><p>假设服务器实际发送了XML 数据，但响应头设置的MIME 类型是text/plain。结果就会导致虽然数据是XML，但responseXML 属性值是null。此时调用overrideMimeType()可以保证将响应当成XML 而不是纯文本来处理：</p><div class="language-jsx line-numbers-mode" data-highlighter="shiki" data-ext="jsx" data-title="jsx" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> xhr </span><span style="color:#FF79C6;">=</span><span style="color:#FF79C6;font-weight:bold;"> new</span><span style="color:#50FA7B;"> XMLHttpRequest</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#F8F8F2;">xhr.</span><span style="color:#50FA7B;">open</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">get</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">, </span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">text.php</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">true</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">xhr.</span><span style="color:#50FA7B;">overrideMimeType</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">text/xml</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">xhr.</span><span style="color:#50FA7B;">send</span><span style="color:#F8F8F2;">(</span><span style="color:#BD93F9;">null</span><span style="color:#F8F8F2;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="fetch" tabindex="-1"><a class="header-anchor" href="#fetch"><span>Fetch</span></a></h1><p><code>fetch()</code>的功能与 XMLHttpRequest 基本相同，但有三个主要的差异。</p><ul><li><code>fetch()</code>使用 Promise，不使用回调函数，因此大大简化了写法，写起来更简洁。</li><li><code>fetch()</code>采用模块化设计，API 分散在多个对象上（Response 对象、Request 对象、Headers 对象），更合理一些；相比之下，XMLHttpRequest 的 API 设计并不是很好，输入、输出、状态都在同一个接口管理，容易写出非常混乱的代码。</li><li><code>fetch()</code>通过数据流（Stream 对象）处理数据，可以分块读取，有利于提高网站性能表现，减少内存占用，对于请求大文件或者网速慢的场景相当有用。XMLHTTPRequest 对象不支持数据流，所有的数据必须放在缓存里，不支持分块读取，必须等待全部拿到后，再一次性吐出来。</li></ul><h1 id="使用" tabindex="-1"><a class="header-anchor" href="#使用"><span>使用</span></a></h1><p>fetch()的第一个参数是 URL，还可以接受第二个参数，作为配置对象，定制发出的 HTTP 请求。</p><div class="language-jsx line-numbers-mode" data-highlighter="shiki" data-ext="jsx" data-title="jsx" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#50FA7B;">fetch</span><span style="color:#F8F8F2;">(input[, init])</span></span>
<span class="line"><span style="color:#F8F8F2;">  .</span><span style="color:#50FA7B;">then</span><span style="color:#F8F8F2;">(</span><span style="color:#FF79C6;">...</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">  .</span><span style="color:#50FA7B;">catch</span><span style="color:#F8F8F2;">(</span><span style="color:#FF79C6;">...</span><span style="color:#F8F8F2;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong><code>input</code></strong></p><p>定义要获取的资源。这可能是： • 一个 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/USVString" target="_blank" rel="noopener noreferrer"><code>USVString</code></a> 字符串，包含要获取资源的 URL。一些浏览器会接受 <code>blob:</code> 和 <code>data:</code> 作为 schemes. • 一个 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Request" target="_blank" rel="noopener noreferrer"><code>Request</code></a> 对象。</p><p><strong><code>init</code> 可选</strong></p><p>一个配置项对象，包括所有对请求的设置。</p><ul><li><code>method</code>: 请求使用的方法，如 <code>GET、POST。</code></li><li><code>headers</code>: 请求的头信息，形式为 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Headers" target="_blank" rel="noopener noreferrer"><code>Headers</code></a> 的对象或包含 <a href="https://developer.mozilla.org/zh-CN/docs/conflicting/Web/JavaScript/Reference/Global_Objects/String" target="_blank" rel="noopener noreferrer"><code>ByteString</code></a> 值的对象字面量。</li><li><code>body</code>: 请求的 body 信息：可能是一个 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Blob" target="_blank" rel="noopener noreferrer"><code>Blob</code></a>、<a href="https://developer.mozilla.org/en-US/docs/Web/API/BufferSource" target="_blank" rel="noopener noreferrer"><code>BufferSource</code> (en-US)</a>、<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/FormData" target="_blank" rel="noopener noreferrer"><code>FormData</code></a>、<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/URLSearchParams" target="_blank" rel="noopener noreferrer"><code>URLSearchParams</code></a> 或者 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/USVString" target="_blank" rel="noopener noreferrer"><code>USVString</code></a> 对象。注意 GET 或 HEAD 方法的请求不能包含 body 信息。</li><li><code>mode</code>: 请求的模式，如 <code>cors、</code> <code>no-cors 或者</code> <code>same-origin。</code></li><li><code>credentials</code>: 请求的 credentials，如 <code>omit、same-origin 或者</code> <code>include</code>。为了在当前域名内自动发送 cookie ， 必须提供这个选项， 从 Chrome 50 开始， 这个属性也可以接受 <a href="https://developer.mozilla.org/en-US/docs/Web/API/FederatedCredential" target="_blank" rel="noopener noreferrer"><code>FederatedCredential</code> (en-US)</a> 实例或是一个 <a href="https://developer.mozilla.org/en-US/docs/Web/API/PasswordCredential" target="_blank" rel="noopener noreferrer"><code>PasswordCredential</code> (en-US)</a> 实例。</li><li><code>cache</code>: 请求的 cache 模式: <code>default</code>、 <code>no-store</code>、 <code>reload</code> 、 <code>no-cache</code> 、 <code>force-cache</code> 或者 <code>only-if-cached</code> 。</li><li><code>redirect</code>: 可用的 redirect 模式: <code>follow</code> (自动重定向), <code>error</code> (如果产生重定向将自动终止并且抛出一个错误）, 或者 <code>manual</code> (手动处理重定向). 在Chrome中默认使用<code>follow（</code>Chrome 47之前的默认值是<code>manual</code>）。</li><li><code>referrer</code>: 一个 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/USVString" target="_blank" rel="noopener noreferrer"><code>USVString</code></a> 可以是 <code>no-referrer、client</code>或一个 URL。默认是 <code>client。</code></li><li><code>referrerPolicy</code>: 指定了HTTP头部referer字段的值。可能为以下值之一： <code>no-referrer、</code> <code>no-referrer-when-downgrade、</code> <code>origin、</code> <code>origin-when-cross-origin、</code> <code>unsafe-url 。</code></li><li><code>integrity</code>: 包括请求的 <a href="https://developer.mozilla.org/en-US/docs/Web/Security/Subresource_Integrity" target="_blank" rel="noopener noreferrer">subresource integrity</a> 值 （ 例如： <code>sha256-BpfBw7ivV8q2jLiT13fxDYAe2tJllusRSZ273h2nFSE=）。</code></li></ul><p><strong>默认值</strong></p><div class="language-jsx line-numbers-mode" data-highlighter="shiki" data-ext="jsx" data-title="jsx" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> response </span><span style="color:#FF79C6;">=</span><span style="color:#50FA7B;"> fetch</span><span style="color:#F8F8F2;">(url, {</span></span>
<span class="line"><span style="color:#F8F8F2;">  method</span><span style="color:#FF79C6;">:</span><span style="color:#E9F284;"> &quot;</span><span style="color:#F1FA8C;">GET</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">  headers</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#E9F284;">    &quot;</span><span style="color:#F1FA8C;">Content-Type</span><span style="color:#E9F284;">&quot;</span><span style="color:#FF79C6;">:</span><span style="color:#E9F284;"> &quot;</span><span style="color:#F1FA8C;">text/plain;charset=UTF</span><span style="color:#FF5555;font-style:italic;text-decoration:underline;">-</span></span>
<span class="line"><span style="color:#F8F8F2;">  },</span></span>
<span class="line"><span style="color:#F8F8F2;">  body</span><span style="color:#FF79C6;">:</span><span style="color:#BD93F9;"> undefined</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">  referrer</span><span style="color:#FF79C6;">:</span><span style="color:#E9F284;"> &quot;</span><span style="color:#F1FA8C;">about:client</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">  referrerPolicy</span><span style="color:#FF79C6;">:</span><span style="color:#E9F284;"> &quot;</span><span style="color:#F1FA8C;">no-referrer-when-downgrade</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">  mode</span><span style="color:#FF79C6;">:</span><span style="color:#E9F284;"> &quot;</span><span style="color:#F1FA8C;">cors</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">, </span></span>
<span class="line"><span style="color:#F8F8F2;">  credentials</span><span style="color:#FF79C6;">:</span><span style="color:#E9F284;"> &quot;</span><span style="color:#F1FA8C;">same-origin</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">  cache</span><span style="color:#FF79C6;">:</span><span style="color:#E9F284;"> &quot;</span><span style="color:#F1FA8C;">default</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">  redirect</span><span style="color:#FF79C6;">:</span><span style="color:#E9F284;"> &quot;</span><span style="color:#F1FA8C;">follow</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">  integrity</span><span style="color:#FF79C6;">:</span><span style="color:#E9F284;"> &quot;&quot;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">  keepalive</span><span style="color:#FF79C6;">:</span><span style="color:#BD93F9;"> false</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">  signal</span><span style="color:#FF79C6;">:</span><span style="color:#BD93F9;"> undefined</span></span>
<span class="line"><span style="color:#F8F8F2;">});</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="get请求" tabindex="-1"><a class="header-anchor" href="#get请求"><span>GET请求</span></a></h1><div class="language-jsx line-numbers-mode" data-highlighter="shiki" data-ext="jsx" data-title="jsx" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#50FA7B;">fetch</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">https://api.github.com/users/ruanyf</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">  .</span><span style="color:#50FA7B;">then</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">response</span><span style="color:#FF79C6;"> =&gt;</span><span style="color:#F8F8F2;"> response.</span><span style="color:#50FA7B;">json</span><span style="color:#F8F8F2;">())</span></span>
<span class="line"><span style="color:#F8F8F2;">  .</span><span style="color:#50FA7B;">then</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">json</span><span style="color:#FF79C6;"> =&gt;</span><span style="color:#F8F8F2;"> console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(json))</span></span>
<span class="line"><span style="color:#F8F8F2;">  .</span><span style="color:#50FA7B;">catch</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">err</span><span style="color:#FF79C6;"> =&gt;</span><span style="color:#F8F8F2;"> console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">Request Failed</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, err))</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="post请求-2" tabindex="-1"><a class="header-anchor" href="#post请求-2"><span>POST请求</span></a></h1><div class="language-jsx line-numbers-mode" data-highlighter="shiki" data-ext="jsx" data-title="jsx" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> response </span><span style="color:#FF79C6;">=</span><span style="color:#FF79C6;"> await</span><span style="color:#50FA7B;"> fetch</span><span style="color:#F8F8F2;">(url, {</span></span>
<span class="line"><span style="color:#F8F8F2;">  method</span><span style="color:#FF79C6;">:</span><span style="color:#E9F284;"> &#39;</span><span style="color:#F1FA8C;">POST</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">  headers</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#E9F284;">    &quot;</span><span style="color:#F1FA8C;">Content-type</span><span style="color:#E9F284;">&quot;</span><span style="color:#FF79C6;">:</span><span style="color:#E9F284;"> &quot;</span><span style="color:#F1FA8C;">application/x-www-form-urlencoded; charset=UTF-8</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">  },</span></span>
<span class="line"><span style="color:#F8F8F2;">  body</span><span style="color:#FF79C6;">:</span><span style="color:#E9F284;"> &#39;</span><span style="color:#F1FA8C;">foo=bar&amp;lorem=ipsum</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> json </span><span style="color:#FF79C6;">=</span><span style="color:#FF79C6;"> await</span><span style="color:#F8F8F2;"> response.</span><span style="color:#50FA7B;">json</span><span style="color:#F8F8F2;">();</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>method：HTTP 请求的方法，POST、DELETE、PUT都在这个属性设置。</li><li>headers：一个对象，用来定制 HTTP 请求的标头。</li><li>body：POST 请求的数据体</li></ul><h1 id="提交json数据" tabindex="-1"><a class="header-anchor" href="#提交json数据"><span>提交JSON数据</span></a></h1><div class="language-jsx line-numbers-mode" data-highlighter="shiki" data-ext="jsx" data-title="jsx" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> user </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;">  { name</span><span style="color:#FF79C6;">:</span><span style="color:#E9F284;">  &#39;</span><span style="color:#F1FA8C;">John</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, surname</span><span style="color:#FF79C6;">:</span><span style="color:#E9F284;">  &#39;</span><span style="color:#F1FA8C;">Smith</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">  };</span></span>
<span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> response </span><span style="color:#FF79C6;">=</span><span style="color:#FF79C6;"> await</span><span style="color:#50FA7B;"> fetch</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">/article/fetch/post/user</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, {</span></span>
<span class="line"><span style="color:#F8F8F2;">  method</span><span style="color:#FF79C6;">:</span><span style="color:#E9F284;"> &#39;</span><span style="color:#F1FA8C;">POST</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">  headers</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#E9F284;">   &#39;</span><span style="color:#F1FA8C;">Content-Type</span><span style="color:#E9F284;">&#39;</span><span style="color:#FF79C6;">:</span><span style="color:#E9F284;"> &#39;</span><span style="color:#F1FA8C;">application/json;charset=utf-8</span><span style="color:#E9F284;">&#39;</span></span>
<span class="line"><span style="color:#F8F8F2;">  }, </span></span>
<span class="line"><span style="color:#F8F8F2;">  body</span><span style="color:#FF79C6;">:</span><span style="color:#BD93F9;"> JSON</span><span style="color:#F8F8F2;">.</span><span style="color:#50FA7B;">stringify</span><span style="color:#F8F8F2;">(user) </span></span>
<span class="line"><span style="color:#F8F8F2;">});</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="提交表单" tabindex="-1"><a class="header-anchor" href="#提交表单"><span>提交表单</span></a></h1><div class="language-jsx line-numbers-mode" data-highlighter="shiki" data-ext="jsx" data-title="jsx" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> form </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> document.</span><span style="color:#50FA7B;">querySelector</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">form</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> response </span><span style="color:#FF79C6;">=</span><span style="color:#FF79C6;"> await</span><span style="color:#50FA7B;"> fetch</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">/users</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, {</span></span>
<span class="line"><span style="color:#F8F8F2;">  method</span><span style="color:#FF79C6;">:</span><span style="color:#E9F284;"> &#39;</span><span style="color:#F1FA8C;">POST</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">  body</span><span style="color:#FF79C6;">:</span><span style="color:#FF79C6;font-weight:bold;"> new</span><span style="color:#50FA7B;"> FormData</span><span style="color:#F8F8F2;">(form)</span></span>
<span class="line"><span style="color:#F8F8F2;">})</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="文件上传" tabindex="-1"><a class="header-anchor" href="#文件上传"><span>文件上传</span></a></h1><div class="language-jsx line-numbers-mode" data-highlighter="shiki" data-ext="jsx" data-title="jsx" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> input </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> document.</span><span style="color:#50FA7B;">querySelector</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">input[type=&quot;file&quot;]</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> data </span><span style="color:#FF79C6;">=</span><span style="color:#FF79C6;font-weight:bold;"> new</span><span style="color:#50FA7B;"> FormData</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#F8F8F2;">data.</span><span style="color:#50FA7B;">append</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">file</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, input.files[</span><span style="color:#BD93F9;">0</span><span style="color:#F8F8F2;">]);</span></span>
<span class="line"><span style="color:#F8F8F2;">data.</span><span style="color:#50FA7B;">append</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">user</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">foo</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#50FA7B;">fetch</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">/avatars</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, {</span></span>
<span class="line"><span style="color:#F8F8F2;">  method</span><span style="color:#FF79C6;">:</span><span style="color:#E9F284;"> &#39;</span><span style="color:#F1FA8C;">POST</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">  body</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> data</span></span>
<span class="line"><span style="color:#F8F8F2;">});</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="上传二进制数据" tabindex="-1"><a class="header-anchor" href="#上传二进制数据"><span>上传二进制数据</span></a></h1><div class="language-jsx line-numbers-mode" data-highlighter="shiki" data-ext="jsx" data-title="jsx" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> blob </span><span style="color:#FF79C6;">=</span><span style="color:#FF79C6;"> await</span><span style="color:#FF79C6;font-weight:bold;"> new</span><span style="color:#8BE9FD;font-style:italic;"> Promise</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">resolve</span><span style="color:#FF79C6;"> =&gt;</span><span style="color:#F8F8F2;">   </span></span>
<span class="line"><span style="color:#F8F8F2;">  canvasElem.</span><span style="color:#50FA7B;">toBlob</span><span style="color:#F8F8F2;">(resolve,  </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">image/png</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> response </span><span style="color:#FF79C6;">=</span><span style="color:#FF79C6;"> await</span><span style="color:#50FA7B;"> fetch</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">/article/fetch/post/image</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, {</span></span>
<span class="line"><span style="color:#F8F8F2;">  method</span><span style="color:#FF79C6;">:</span><span style="color:#E9F284;">  &#39;</span><span style="color:#F1FA8C;">POST</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">  body</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> blob</span></span>
<span class="line"><span style="color:#F8F8F2;">});</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Headers 对象是所有外发请求和入站响应头部的容器。</strong></p><p>每个外发的Request 实例都包含一个空的Headers 实例，可以通过Request.prototype.headers 访问</p><p>每个入站Response 实例也可以通过Response.prototype.headers 访问包含着响应头部的Headers 对象。</p><div class="language-jsx line-numbers-mode" data-highlighter="shiki" data-ext="jsx" data-title="jsx" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">var</span><span style="color:#F8F8F2;"> myHeaders </span><span style="color:#FF79C6;">=</span><span style="color:#FF79C6;font-weight:bold;"> new</span><span style="color:#50FA7B;"> Headers</span><span style="color:#F8F8F2;">(init);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><strong><code>*init*</code> 可选</strong></p><p>通过一个包含任意 <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers" target="_blank" rel="noopener noreferrer">HTTP headers</a> 的对象来预设你的 <code>Headers</code>.</p><div class="language-jsx line-numbers-mode" data-highlighter="shiki" data-ext="jsx" data-title="jsx" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">var</span><span style="color:#F8F8F2;"> myHeaders </span><span style="color:#FF79C6;">=</span><span style="color:#FF79C6;font-weight:bold;"> new</span><span style="color:#50FA7B;"> Headers</span><span style="color:#F8F8F2;">(); </span><span style="color:#6272A4;">// Currently empty</span></span>
<span class="line"><span style="color:#F8F8F2;">myHeaders.</span><span style="color:#50FA7B;">append</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">Content-Type</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">image/jpeg</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">myHeaders.</span><span style="color:#50FA7B;">get</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">Content-Type</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">); </span><span style="color:#6272A4;">// Returns &#39;image/jpeg&#39;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-jsx line-numbers-mode" data-highlighter="shiki" data-ext="jsx" data-title="jsx" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">var</span><span style="color:#F8F8F2;"> httpHeaders </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> { </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">Content-Type</span><span style="color:#E9F284;">&#39;</span><span style="color:#FF79C6;"> :</span><span style="color:#E9F284;"> &#39;</span><span style="color:#F1FA8C;">image/jpeg</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">Accept-Charset</span><span style="color:#E9F284;">&#39;</span><span style="color:#FF79C6;"> :</span><span style="color:#E9F284;"> &#39;</span><span style="color:#F1FA8C;">utf-8</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">X-My-Custom-Header</span><span style="color:#E9F284;">&#39;</span><span style="color:#FF79C6;"> :</span><span style="color:#E9F284;"> &#39;</span><span style="color:#F1FA8C;">Zeke are cool</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;"> };</span></span>
<span class="line"><span style="color:#FF79C6;">var</span><span style="color:#F8F8F2;"> myHeaders </span><span style="color:#FF79C6;">=</span><span style="color:#FF79C6;font-weight:bold;"> new</span><span style="color:#50FA7B;"> Headers</span><span style="color:#F8F8F2;">(httpHeaders);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Headers.get()：根据指定的键名，返回键值。</li><li>Headers.has()： 返回一个布尔值，表示是否包含某个标头。</li><li>Headers.set()：将指定的键名设置为新的键值，如果该键名不存在则会添加。</li><li>Headers.append()：添加标头。</li><li>Headers.delete()：删除标头。</li><li>Headers.keys()：返回一个遍历器，可以依次遍历所有键名。</li><li>Headers.values()：返回一个遍历器，可以依次遍历所有键值。</li><li>Headers.entries()：返回一个遍历器，可以依次遍历所有键值对（[key, value]）。</li><li>Headers.forEach()：依次遍历标头，每个标头都会执行一次参数函数</li></ul><div class="language-jsx line-numbers-mode" data-highlighter="shiki" data-ext="jsx" data-title="jsx" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> response </span><span style="color:#FF79C6;">=</span><span style="color:#FF79C6;">  await</span><span style="color:#50FA7B;">  fetch</span><span style="color:#F8F8F2;">(url);  </span></span>
<span class="line"><span style="color:#F8F8F2;">response.headers.</span><span style="color:#50FA7B;">get</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">Content-Type</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#6272A4;">// application/json; charset=utf-8</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Request 对象是获取资源请求的接口</p><div class="language-jsx line-numbers-mode" data-highlighter="shiki" data-ext="jsx" data-title="jsx" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">var</span><span style="color:#F8F8F2;"> myRequest </span><span style="color:#FF79C6;">=</span><span style="color:#FF79C6;font-weight:bold;"> new</span><span style="color:#50FA7B;"> Request</span><span style="color:#F8F8F2;">(input[, init]);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Request" target="_blank" rel="noopener noreferrer">Request - Web API 接口参考 | MDN</a></p><div class="language-jsx line-numbers-mode" data-highlighter="shiki" data-ext="jsx" data-title="jsx" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> r </span><span style="color:#FF79C6;">=</span><span style="color:#FF79C6;font-weight:bold;"> new</span><span style="color:#50FA7B;"> Request</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">https://foo.com</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#6272A4;">// 向foo.com 发送GET 请求</span></span>
<span class="line"><span style="color:#50FA7B;">fetch</span><span style="color:#F8F8F2;">(r);</span></span>
<span class="line"><span style="color:#6272A4;">// 向foo.com 发送POST 请求</span></span>
<span class="line"><span style="color:#50FA7B;">fetch</span><span style="color:#F8F8F2;">(r, { method</span><span style="color:#FF79C6;">:</span><span style="color:#E9F284;"> &#39;</span><span style="color:#F1FA8C;">POST</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;"> });</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Response 对象是获取资源响应的接口</p><div class="language-jsx line-numbers-mode" data-highlighter="shiki" data-ext="jsx" data-title="jsx" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> myResponse </span><span style="color:#FF79C6;">=</span><span style="color:#FF79C6;font-weight:bold;"> new</span><span style="color:#50FA7B;"> Response</span><span style="color:#F8F8F2;">(body, init);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><strong><code>body</code>可选</strong></p><p>一个定义 response 中 body 的对象. 可以为 <code>null</code> ，或是以下其中一个: • <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Blob" target="_blank" rel="noopener noreferrer"><code>Blob</code></a> • <a href="https://developer.mozilla.org/en-US/docs/Web/API/BufferSource" target="_blank" rel="noopener noreferrer"><code>BufferSource</code> (en-US)</a> • <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/FormData" target="_blank" rel="noopener noreferrer"><code>FormData</code></a> • <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/ReadableStream" target="_blank" rel="noopener noreferrer"><code>ReadableStream</code></a> • <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/URLSearchParams" target="_blank" rel="noopener noreferrer"><code>URLSearchParams</code></a> • <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/USVString" target="_blank" rel="noopener noreferrer"><code>USVString</code></a></p><p><strong><code>init</code> 可选</strong></p><p>一个参数(options)对象，包含要应用到 response 上的任何自定义设置. 可能参数(options)是: • <code>status</code>: response 的状态码, 例如:<code>200</code>. • <code>statusText</code>: 和状态码关联的状态消息, 例如: <code>OK</code>. • <code>headers</code>: 你想加到 response 上的任何 headers, 包含了一个 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Headers" target="_blank" rel="noopener noreferrer"><code>Headers</code></a> 对象或满足对象语法的 <a href="https://developer.mozilla.org/zh-CN/docs/conflicting/Web/JavaScript/Reference/Global_Objects/String" target="_blank" rel="noopener noreferrer"><code>ByteString</code></a> key/value 对 (详见 <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers" target="_blank" rel="noopener noreferrer">HTTP headers</a>).</p><div class="language-jsx line-numbers-mode" data-highlighter="shiki" data-ext="jsx" data-title="jsx" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#50FA7B;">fetch</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">//foo.com</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">).</span><span style="color:#50FA7B;">then</span><span style="color:#F8F8F2;">(console.log);</span></span>
<span class="line"><span style="color:#6272A4;">// Response {</span></span>
<span class="line"><span style="color:#6272A4;">// body: (...)</span></span>
<span class="line"><span style="color:#6272A4;">// bodyUsed: false</span></span>
<span class="line"><span style="color:#6272A4;">// headers: Headers {}</span></span>
<span class="line"><span style="color:#6272A4;">// ok: true</span></span>
<span class="line"><span style="color:#6272A4;">// redirected: false</span></span>
<span class="line"><span style="color:#6272A4;">// status: 200</span></span>
<span class="line"><span style="color:#6272A4;">// statusText: &quot;OK&quot;</span></span>
<span class="line"><span style="color:#6272A4;">// type: &quot;basic&quot;</span></span>
<span class="line"><span style="color:#6272A4;">// url: &quot;https://foo.com/&quot;</span></span>
<span class="line"><span style="color:#6272A4;">// }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="处理http回应" tabindex="-1"><a class="header-anchor" href="#处理http回应"><span>处理HTTP回应</span></a></h1><div class="language-jsx line-numbers-mode" data-highlighter="shiki" data-ext="jsx" data-title="jsx" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">async</span><span style="color:#FF79C6;"> function</span><span style="color:#50FA7B;"> fetchText</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#FF79C6;">  let</span><span style="color:#F8F8F2;"> response </span><span style="color:#FF79C6;">=</span><span style="color:#FF79C6;"> await</span><span style="color:#50FA7B;"> fetch</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">/readme.txt</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">  console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(response.status); </span></span>
<span class="line"><span style="color:#F8F8F2;">  console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(response.statusText);</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Response/ok" target="_blank" rel="noopener noreferrer">**<code>Response.ok</code></a> 只读**</p><p>包含了一个布尔值，标示该 Response 成功（HTTP 状态码的范围在 200-299）。</p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Response/redirected" target="_blank" rel="noopener noreferrer">**<code>Response.redirected</code></a> 只读**</p><p>表示该 Response 是否来自一个重定向，如果是的话，它的 URL 列表将会有多个条目。</p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Response/status" target="_blank" rel="noopener noreferrer">**<code>Response.status</code></a> 只读**</p><p>包含 Response 的状态码 （例如 <code>200</code> 表示成功）。</p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Response/statusText" target="_blank" rel="noopener noreferrer">**<code>Response.statusText</code></a> 只读**</p><p>包含了与该 Response 状态码一致的状态信息（例如，OK对应 <code>200</code>）。</p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Response/type" target="_blank" rel="noopener noreferrer">**<code>Response.type</code></a> 只读**</p><p>包含 Response 的类型（例如，<code>basic</code>、<code>cors</code>）。</p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Response/url" target="_blank" rel="noopener noreferrer">**<code>Response.url</code></a> 只读**</p><p>包含 Response 的URL。</p><h1 id="读取内容" tabindex="-1"><a class="header-anchor" href="#读取内容"><span>读取内容</span></a></h1><ul><li><code>response.text()</code>：得到文本字符串。</li><li><code>response.json()</code>：得到 JSON 对象。</li><li><code>response.blob()</code>：得到二进制 Blob 对象。</li><li><code>response.formData()</code>：得到 FormData 表单对象。</li><li><code>response.arrayBuffer()</code>：得到二进制 ArrayBuffer 对象。</li></ul><div class="language-jsx line-numbers-mode" data-highlighter="shiki" data-ext="jsx" data-title="jsx" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> response </span><span style="color:#FF79C6;">=</span><span style="color:#FF79C6;"> await</span><span style="color:#50FA7B;"> fetch</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">/users.html</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> body </span><span style="color:#FF79C6;">=</span><span style="color:#FF79C6;"> await</span><span style="color:#F8F8F2;"> response.</span><span style="color:#50FA7B;">text</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#F8F8F2;">document.body.innerHTML </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> body</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="判断请求是否成功" tabindex="-1"><a class="header-anchor" href="#判断请求是否成功"><span>判断请求是否成功</span></a></h1><p>fetch()发出请求以后，有一个很重要的注意点：只有网络错误，或者无法连接时，fetch()才会报错，其他情况都不会报错，而是认为请求成功。</p><p>即使服务器返回的状态码是 4xx 或 5xx，fetch()也不会报错（即 Promise 不会变为 rejected状态）。</p><p>只有通过Response.status属性，得到 HTTP 回应的真实状态码，才能判断请求是否成功。</p><div class="language-jsx line-numbers-mode" data-highlighter="shiki" data-ext="jsx" data-title="jsx" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">async</span><span style="color:#FF79C6;"> function</span><span style="color:#50FA7B;"> fetchText</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#FF79C6;">  let</span><span style="color:#F8F8F2;"> response </span><span style="color:#FF79C6;">=</span><span style="color:#FF79C6;"> await</span><span style="color:#50FA7B;"> fetch</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">/readme.txt</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#FF79C6;">  if</span><span style="color:#F8F8F2;"> (response.status </span><span style="color:#FF79C6;">&gt;=</span><span style="color:#BD93F9;"> 200</span><span style="color:#FF79C6;"> &amp;&amp;</span><span style="color:#F8F8F2;"> response.status </span><span style="color:#FF79C6;">&lt;</span><span style="color:#BD93F9;"> 300</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#FF79C6;">    return</span><span style="color:#FF79C6;"> await</span><span style="color:#F8F8F2;"> response.</span><span style="color:#50FA7B;">text</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#F8F8F2;">  } </span><span style="color:#FF79C6;">else</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#FF79C6;">    throw</span><span style="color:#FF79C6;font-weight:bold;"> new</span><span style="color:#50FA7B;"> Error</span><span style="color:#F8F8F2;">(response.statusText);</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,140)]))}const c=e(o,[["render",p],["__file","browser-request.html.vue"]]),F=JSON.parse('{"path":"/network/browser-request.html","title":"web端的网络请求","lang":"en-US","frontmatter":{"title":"web端的网络请求","category":["Network"],"date":"2021-11-14T00:00:00.000Z","description":"通过 XMLHttpRequest 可以在不刷新页面的情况下请求特定 URL，获取数据。这允许网页在不影响用户操作的情况下，更新页面的局部内容 1 创建 XMLHttpRequest 实例 2 发出 HTTP 请求 调用open()不会实际发送请求，只是为发送请求做好准备。 method 要使用的HTTP方法，比如「GET」、「POST」、「PUT」、...","head":[["meta",{"property":"og:url","content":"https://luxiag.github.io/luxiag/blog/network/browser-request.html"}],["meta",{"property":"og:title","content":"web端的网络请求"}],["meta",{"property":"og:description","content":"通过 XMLHttpRequest 可以在不刷新页面的情况下请求特定 URL，获取数据。这允许网页在不影响用户操作的情况下，更新页面的局部内容 1 创建 XMLHttpRequest 实例 2 发出 HTTP 请求 调用open()不会实际发送请求，只是为发送请求做好准备。 method 要使用的HTTP方法，比如「GET」、「POST」、「PUT」、..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2024-11-03T07:17:49.000Z"}],["meta",{"property":"article:published_time","content":"2021-11-14T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-11-03T07:17:49.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"web端的网络请求\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2021-11-14T00:00:00.000Z\\",\\"dateModified\\":\\"2024-11-03T07:17:49.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"luxiag\\",\\"url\\":\\"https://luxiag.github.io/luxiag\\"}]}"]]},"headers":[{"level":2,"title":"GET 请求","slug":"get-请求","link":"#get-请求","children":[]},{"level":2,"title":"POST请求","slug":"post请求","link":"#post请求","children":[]},{"level":2,"title":"HTTP头部","slug":"http头部","link":"#http头部","children":[]},{"level":2,"title":"setRequestHeader()","slug":"setrequestheader","link":"#setrequestheader","children":[]},{"level":2,"title":"POST请求","slug":"post请求-1","link":"#post请求-1","children":[]},{"level":2,"title":"readyState","slug":"readystate","link":"#readystate","children":[]}],"git":{"createdTime":1730618269000,"updatedTime":1730618269000,"contributors":[{"name":"luxiag","email":"luxiag@qq.com","commits":1}]},"readingTime":{"minutes":10.46,"words":3139},"filePathRelative":"network/browser-request.md","localizedDate":"November 14, 2021","excerpt":"<p>通过 XMLHttpRequest 可以在不刷新页面的情况下请求特定 URL，获取数据。这允许网页在不影响用户操作的情况下，更新页面的局部内容</p>\\n<h1><strong>1 创建 XMLHttpRequest 实例</strong></h1>","autoDesc":true}');export{c as comp,F as data};
