import{_ as n,c as a,b as l,o as e}from"./app-CWCG87Uu.js";const p={};function o(t,s){return e(),a("div",null,s[0]||(s[0]=[l(`<div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">var</span><span style="color:#F8F8F2;"> vm </span><span style="color:#FF79C6;">=</span><span style="color:#FF79C6;font-weight:bold;"> new</span><span style="color:#50FA7B;"> Vue</span><span style="color:#F8F8F2;">({</span></span>
<span class="line"><span style="color:#F8F8F2;">  data</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> { a</span><span style="color:#FF79C6;">:</span><span style="color:#BD93F9;"> 1</span><span style="color:#F8F8F2;"> },</span></span>
<span class="line"><span style="color:#F8F8F2;">  computed</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#6272A4;">    // 仅读取</span></span>
<span class="line"><span style="color:#50FA7B;">    aDouble</span><span style="color:#FF79C6;">:</span><span style="color:#FF79C6;"> function</span><span style="color:#F8F8F2;"> () {</span></span>
<span class="line"><span style="color:#FF79C6;">      return</span><span style="color:#BD93F9;font-style:italic;"> this</span><span style="color:#F8F8F2;">.a </span><span style="color:#FF79C6;">*</span><span style="color:#BD93F9;"> 2</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">    },</span></span>
<span class="line"><span style="color:#6272A4;">    // 读取和设置</span></span>
<span class="line"><span style="color:#F8F8F2;">    aPlus</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#50FA7B;">      get</span><span style="color:#FF79C6;">:</span><span style="color:#FF79C6;"> function</span><span style="color:#F8F8F2;"> () {</span></span>
<span class="line"><span style="color:#FF79C6;">        return</span><span style="color:#BD93F9;font-style:italic;"> this</span><span style="color:#F8F8F2;">.a </span><span style="color:#FF79C6;">+</span><span style="color:#BD93F9;"> 1</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">      },</span></span>
<span class="line"><span style="color:#50FA7B;">      set</span><span style="color:#FF79C6;">:</span><span style="color:#FF79C6;"> function</span><span style="color:#F8F8F2;"> (</span><span style="color:#FFB86C;font-style:italic;">v</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#BD93F9;font-style:italic;">        this</span><span style="color:#F8F8F2;">.a </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> v </span><span style="color:#FF79C6;">-</span><span style="color:#BD93F9;"> 1</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">      },</span></span>
<span class="line"><span style="color:#F8F8F2;">    },</span></span>
<span class="line"><span style="color:#F8F8F2;">  },</span></span>
<span class="line"><span style="color:#F8F8F2;">});</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="init" tabindex="-1"><a class="header-anchor" href="#init"><span>init</span></a></h2><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">export</span><span style="color:#FF79C6;"> function</span><span style="color:#50FA7B;"> initState</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">vm</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> Component</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#FF79C6;">  const</span><span style="color:#F8F8F2;"> opts </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> vm.$options;</span></span>
<span class="line"><span style="color:#FF79C6;">  if</span><span style="color:#F8F8F2;"> (opts.computed) </span><span style="color:#50FA7B;">initComputed</span><span style="color:#F8F8F2;">(vm, opts.computed);</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="initcomputed" tabindex="-1"><a class="header-anchor" href="#initcomputed"><span>initComputed</span></a></h3><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">function</span><span style="color:#50FA7B;"> initComputed</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">vm</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> Component</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">computed</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> Object</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#6272A4;">  // $flow-disable-line</span></span>
<span class="line"><span style="color:#6272A4;">  // 定义一个对象 储存 watcher</span></span>
<span class="line"><span style="color:#FF79C6;">  const</span><span style="color:#F8F8F2;"> watchers </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> (vm._computedWatchers </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> Object.</span><span style="color:#50FA7B;">create</span><span style="color:#F8F8F2;">(</span><span style="color:#BD93F9;">null</span><span style="color:#F8F8F2;">));</span></span>
<span class="line"><span style="color:#6272A4;">  // computed properties are just getters during SSR</span></span>
<span class="line"><span style="color:#FF79C6;">  const</span><span style="color:#F8F8F2;"> isSSR </span><span style="color:#FF79C6;">=</span><span style="color:#50FA7B;"> isServerRendering</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">  for</span><span style="color:#F8F8F2;"> (</span><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> key </span><span style="color:#FF79C6;">in</span><span style="color:#F8F8F2;"> computed) {</span></span>
<span class="line"><span style="color:#FF79C6;">    const</span><span style="color:#F8F8F2;"> userDef </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> computed[key];</span></span>
<span class="line"><span style="color:#FF79C6;">    const</span><span style="color:#F8F8F2;"> getter </span><span style="color:#FF79C6;">=</span><span style="color:#50FA7B;"> isFunction</span><span style="color:#F8F8F2;">(userDef) </span><span style="color:#FF79C6;">?</span><span style="color:#F8F8F2;"> userDef </span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> userDef.get;</span></span>
<span class="line"><span style="color:#FF79C6;">    if</span><span style="color:#F8F8F2;"> (</span><span style="color:#FF79C6;">!</span><span style="color:#F8F8F2;">isSSR) {</span></span>
<span class="line"><span style="color:#6272A4;">      // create internal watcher for the computed property.</span></span>
<span class="line"><span style="color:#6272A4;">      // 创建computedWatcher</span></span>
<span class="line"><span style="color:#F8F8F2;">      watchers[key] </span><span style="color:#FF79C6;">=</span><span style="color:#FF79C6;font-weight:bold;"> new</span><span style="color:#50FA7B;"> Watcher</span><span style="color:#F8F8F2;">(</span></span>
<span class="line"><span style="color:#F8F8F2;">        vm,</span></span>
<span class="line"><span style="color:#F8F8F2;">        getter </span><span style="color:#FF79C6;">||</span><span style="color:#F8F8F2;"> noop,</span></span>
<span class="line"><span style="color:#F8F8F2;">        noop,</span></span>
<span class="line"><span style="color:#F8F8F2;">        computedWatcherOptions </span><span style="color:#6272A4;">// {lazy: true}</span></span>
<span class="line"><span style="color:#F8F8F2;">      );</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">    // component-defined computed properties are already defined on the</span></span>
<span class="line"><span style="color:#6272A4;">    // component prototype. We only need to define computed properties defined</span></span>
<span class="line"><span style="color:#6272A4;">    // at instantiation here.</span></span>
<span class="line"><span style="color:#FF79C6;">    if</span><span style="color:#F8F8F2;"> (</span><span style="color:#FF79C6;">!</span><span style="color:#F8F8F2;">(key </span><span style="color:#FF79C6;">in</span><span style="color:#F8F8F2;"> vm)) {</span></span>
<span class="line"><span style="color:#50FA7B;">      defineComputed</span><span style="color:#F8F8F2;">(vm, key, userDef);</span></span>
<span class="line"><span style="color:#F8F8F2;">    } </span><span style="color:#FF79C6;">else</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#6272A4;">      // ... key不能和data里的属性重名</span></span>
<span class="line"><span style="color:#6272A4;">      // ... key不能和props里的属性重名</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><details class="hint-container details"><summary>Watcher</summary><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">export</span><span style="color:#FF79C6;"> default</span><span style="color:#FF79C6;"> class</span><span style="color:#8BE9FD;"> Watcher</span><span style="color:#FF79C6;"> implements</span><span style="color:#8BE9FD;font-style:italic;"> DepTarget</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#FF79C6;">  constructor</span><span style="color:#F8F8F2;">(</span></span>
<span class="line"><span style="color:#FFB86C;font-style:italic;">    vm</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> Component</span><span style="color:#FF79C6;"> |</span><span style="color:#8BE9FD;font-style:italic;"> null</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#FFB86C;font-style:italic;">    expOrFn</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> string</span><span style="color:#FF79C6;"> |</span><span style="color:#F8F8F2;"> (() </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#8BE9FD;font-style:italic;"> any</span><span style="color:#F8F8F2;">), </span><span style="color:#6272A4;">// computed getter函数</span></span>
<span class="line"><span style="color:#50FA7B;">    cb</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> Function</span><span style="color:#F8F8F2;">, </span><span style="color:#6272A4;">// 空函数</span></span>
<span class="line"><span style="color:#FFB86C;font-style:italic;">    options</span><span style="color:#FF79C6;">?:</span><span style="color:#8BE9FD;font-style:italic;"> WatcherOptions</span><span style="color:#FF79C6;"> |</span><span style="color:#8BE9FD;font-style:italic;"> null</span><span style="color:#F8F8F2;">, </span><span style="color:#6272A4;">//  {lazy: true}</span></span>
<span class="line"><span style="color:#FFB86C;font-style:italic;">    isRenderWatcher</span><span style="color:#FF79C6;">?:</span><span style="color:#8BE9FD;font-style:italic;"> boolean</span></span>
<span class="line"><span style="color:#F8F8F2;">  ) {</span></span>
<span class="line"><span style="color:#BD93F9;font-style:italic;">    this</span><span style="color:#F8F8F2;">.lazy </span><span style="color:#FF79C6;">=</span><span style="color:#FF79C6;"> !!</span><span style="color:#F8F8F2;">options.lazy;</span></span>
<span class="line"><span style="color:#BD93F9;font-style:italic;">    this</span><span style="color:#F8F8F2;">.dirty </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;font-style:italic;"> this</span><span style="color:#F8F8F2;">.lazy;</span></span>
<span class="line"><span style="color:#6272A4;">    // computed getter 函数</span></span>
<span class="line"><span style="color:#BD93F9;font-style:italic;">    this</span><span style="color:#F8F8F2;">.getter </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> expOrFn;</span></span>
<span class="line"><span style="color:#BD93F9;font-style:italic;">    this</span><span style="color:#F8F8F2;">.value </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;font-style:italic;"> this</span><span style="color:#F8F8F2;">.lazy </span><span style="color:#FF79C6;">?</span><span style="color:#BD93F9;"> undefined</span><span style="color:#FF79C6;"> :</span><span style="color:#BD93F9;font-style:italic;"> this</span><span style="color:#F8F8F2;">.</span><span style="color:#50FA7B;">get</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><details class="hint-container details"><summary>defineComputed</summary><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#6272A4;">//  vm</span></span>
<span class="line"><span style="color:#6272A4;">//  computed 中的key</span></span>
<span class="line"><span style="color:#6272A4;">// userDef Computed[key]</span></span>
<span class="line"><span style="color:#FF79C6;">export</span><span style="color:#FF79C6;"> function</span><span style="color:#50FA7B;"> defineComputed</span><span style="color:#F8F8F2;">(</span></span>
<span class="line"><span style="color:#FFB86C;font-style:italic;">  target</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> any</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#FFB86C;font-style:italic;">  key</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> string</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#FFB86C;font-style:italic;">  userDef</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> Record</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#8BE9FD;font-style:italic;">string</span><span style="color:#F8F8F2;">, </span><span style="color:#8BE9FD;font-style:italic;">any</span><span style="color:#F8F8F2;">&gt; </span><span style="color:#FF79C6;">|</span><span style="color:#F8F8F2;"> (() </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#8BE9FD;font-style:italic;"> any</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#FF79C6;">  const</span><span style="color:#F8F8F2;"> shouldCache </span><span style="color:#FF79C6;">=</span><span style="color:#FF79C6;"> !</span><span style="color:#50FA7B;">isServerRendering</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#6272A4;">  // 定义computed的get 和set</span></span>
<span class="line"><span style="color:#6272A4;">  // 通过 defineProperty 进行拦截</span></span>
<span class="line"><span style="color:#FF79C6;">  if</span><span style="color:#F8F8F2;"> (</span><span style="color:#50FA7B;">isFunction</span><span style="color:#F8F8F2;">(userDef)) {</span></span>
<span class="line"><span style="color:#F8F8F2;">    sharedPropertyDefinition.get </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> shouldCache</span></span>
<span class="line"><span style="color:#FF79C6;">      ?</span><span style="color:#50FA7B;"> createComputedGetter</span><span style="color:#F8F8F2;">(key)</span></span>
<span class="line"><span style="color:#FF79C6;">      :</span><span style="color:#50FA7B;"> createGetterInvoker</span><span style="color:#F8F8F2;">(userDef);</span></span>
<span class="line"><span style="color:#F8F8F2;">    sharedPropertyDefinition.set </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> noop;</span></span>
<span class="line"><span style="color:#F8F8F2;">  } </span><span style="color:#FF79C6;">else</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">    sharedPropertyDefinition.get </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> userDef.get</span></span>
<span class="line"><span style="color:#FF79C6;">      ?</span><span style="color:#F8F8F2;"> shouldCache </span><span style="color:#FF79C6;">&amp;&amp;</span><span style="color:#F8F8F2;"> userDef.cache </span><span style="color:#FF79C6;">!==</span><span style="color:#BD93F9;"> false</span></span>
<span class="line"><span style="color:#FF79C6;">        ?</span><span style="color:#50FA7B;"> createComputedGetter</span><span style="color:#F8F8F2;">(key)</span></span>
<span class="line"><span style="color:#FF79C6;">        :</span><span style="color:#50FA7B;"> createGetterInvoker</span><span style="color:#F8F8F2;">(userDef.get)</span></span>
<span class="line"><span style="color:#FF79C6;">      :</span><span style="color:#F8F8F2;"> noop;</span></span>
<span class="line"><span style="color:#F8F8F2;">    sharedPropertyDefinition.set </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> userDef.set </span><span style="color:#FF79C6;">||</span><span style="color:#F8F8F2;"> noop;</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">  Object.</span><span style="color:#50FA7B;">defineProperty</span><span style="color:#F8F8F2;">(target, key, sharedPropertyDefinition);</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><details class="hint-container details"><summary>createComputedGetter</summary><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">function</span><span style="color:#50FA7B;"> createComputedGetter</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">key</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#FF79C6;">  return</span><span style="color:#FF79C6;"> function</span><span style="color:#50FA7B;"> computedGetter</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#FF79C6;">    const</span><span style="color:#F8F8F2;"> watcher </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;font-style:italic;"> this</span><span style="color:#F8F8F2;">._computedWatchers </span><span style="color:#FF79C6;">&amp;&amp;</span><span style="color:#BD93F9;font-style:italic;"> this</span><span style="color:#F8F8F2;">._computedWatchers[key];</span></span>
<span class="line"><span style="color:#FF79C6;">    if</span><span style="color:#F8F8F2;"> (watcher) {</span></span>
<span class="line"><span style="color:#6272A4;">      // 表示 依赖更变 需要重新计算 求知</span></span>
<span class="line"><span style="color:#6272A4;">      // 初始化时 this.dirty = this.lazy = true</span></span>
<span class="line"><span style="color:#FF79C6;">      if</span><span style="color:#F8F8F2;"> (watcher.dirty) {</span></span>
<span class="line"><span style="color:#F8F8F2;">        watcher.</span><span style="color:#50FA7B;">evaluate</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#F8F8F2;">      }</span></span>
<span class="line"><span style="color:#6272A4;">      // Dep.target 是当前操作的Watcher</span></span>
<span class="line"><span style="color:#6272A4;">      // watcher.evaluate()时 调用 this.get() 赋的值</span></span>
<span class="line"><span style="color:#FF79C6;">      if</span><span style="color:#F8F8F2;"> (Dep.target) {</span></span>
<span class="line"><span style="color:#F8F8F2;">        watcher.</span><span style="color:#50FA7B;">depend</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#6272A4;">        // 让每个dep收集当前的watcher</span></span>
<span class="line"><span style="color:#6272A4;">        // 当依赖改变时 通知watcher进行更新</span></span>
<span class="line"><span style="color:#F8F8F2;">      }</span></span>
<span class="line"><span style="color:#FF79C6;">      return</span><span style="color:#F8F8F2;"> watcher.value;</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">  };</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">// -------------------</span></span>
<span class="line"><span style="color:#FF79C6;">class</span><span style="color:#8BE9FD;"> Watcher</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#50FA7B;">  evaluate</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#BD93F9;font-style:italic;">    this</span><span style="color:#F8F8F2;">.value </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;font-style:italic;"> this</span><span style="color:#F8F8F2;">.</span><span style="color:#50FA7B;">get</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#BD93F9;font-style:italic;">    this</span><span style="color:#F8F8F2;">.dirty </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> false</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#50FA7B;">  depend</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#FF79C6;">    let</span><span style="color:#F8F8F2;"> i </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;font-style:italic;"> this</span><span style="color:#F8F8F2;">.deps.length;</span></span>
<span class="line"><span style="color:#FF79C6;">    while</span><span style="color:#F8F8F2;"> (i</span><span style="color:#FF79C6;">--</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#6272A4;">      //  让每个dep收集当前的Watcher</span></span>
<span class="line"><span style="color:#BD93F9;font-style:italic;">      this</span><span style="color:#F8F8F2;">.deps[i].</span><span style="color:#50FA7B;">depend</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#50FA7B;">  get</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#50FA7B;">    pushTarget</span><span style="color:#F8F8F2;">(</span><span style="color:#BD93F9;font-style:italic;">this</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#FF79C6;">    let</span><span style="color:#F8F8F2;"> value</span></span>
<span class="line"><span style="color:#FF79C6;">    const</span><span style="color:#F8F8F2;"> vm </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;font-style:italic;"> this</span><span style="color:#F8F8F2;">.vm</span></span>
<span class="line"><span style="color:#FF79C6;">    try</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">      value </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;font-style:italic;"> this</span><span style="color:#F8F8F2;">.getter.</span><span style="color:#50FA7B;">call</span><span style="color:#F8F8F2;">(vm, vm)</span></span>
<span class="line"><span style="color:#F8F8F2;">    } </span><span style="color:#FF79C6;">catch</span><span style="color:#F8F8F2;"> (</span><span style="color:#FFB86C;font-style:italic;">e</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> any</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#FF79C6;">      if</span><span style="color:#F8F8F2;"> (</span><span style="color:#BD93F9;font-style:italic;">this</span><span style="color:#F8F8F2;">.user) {</span></span>
<span class="line"><span style="color:#50FA7B;">        handleError</span><span style="color:#F8F8F2;">(e, vm, </span><span style="color:#F1FA8C;">\`getter for watcher &quot;</span><span style="color:#FF79C6;">\${</span><span style="color:#BD93F9;font-style:italic;">this</span><span style="color:#F8F8F2;">.expression</span><span style="color:#FF79C6;">}</span><span style="color:#F1FA8C;">&quot;\`</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">      } </span><span style="color:#FF79C6;">else</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#FF79C6;">        throw</span><span style="color:#F8F8F2;"> e</span></span>
<span class="line"><span style="color:#F8F8F2;">      }</span></span>
<span class="line"><span style="color:#F8F8F2;">    } </span><span style="color:#FF79C6;">finally</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#6272A4;">      // &quot;touch&quot; every property so they are all tracked as</span></span>
<span class="line"><span style="color:#6272A4;">      // dependencies for deep watching</span></span>
<span class="line"><span style="color:#FF79C6;">      if</span><span style="color:#F8F8F2;"> (</span><span style="color:#BD93F9;font-style:italic;">this</span><span style="color:#F8F8F2;">.deep) {</span></span>
<span class="line"><span style="color:#50FA7B;">        traverse</span><span style="color:#F8F8F2;">(value)</span></span>
<span class="line"><span style="color:#F8F8F2;">      }</span></span>
<span class="line"><span style="color:#50FA7B;">      popTarget</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"><span style="color:#BD93F9;font-style:italic;">      this</span><span style="color:#F8F8F2;">.</span><span style="color:#50FA7B;">cleanupDeps</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#FF79C6;">    return</span><span style="color:#F8F8F2;"> value</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h2 id="步骤" tabindex="-1"><a class="header-anchor" href="#步骤"><span>步骤</span></a></h2><h3 id="取值" tabindex="-1"><a class="header-anchor" href="#取值"><span>取值</span></a></h3><p>对 computed 进行求值时触发 get()=&gt;createComputedGetter() =&gt; Watcher.get() =&gt; 将 Dep.target 设置为当前 watcher =&gt; 进行 computed getter()求值 =&gt; 触发 computed getter()中的响应式数据中的 get()拦截器 =&gt; get()拦截器 把当前的 computed watcher 添加到 自己的 Dep 中 =&gt; 最后 Dep.target 重置</p><h3 id="更新" tabindex="-1"><a class="header-anchor" href="#更新"><span>更新</span></a></h3><p>computed set 内的响应式式数据发生更新 =&gt; 响应式式数据 set()拦截器触发 =&gt; dep.notify() dep 通知更新 =&gt; subs[i].update() Dep 内收集的 Watcher.update() =&gt; watcher.run() =&gt; this.get() =&gt; computed getter() =&gt; watcher value 更新 =&gt; 响应式数据更新发生 patch =&gt; 视图更新</p>`,13)]))}const i=n(p,[["render",o],["__file","computed-code-analysis.html.vue"]]),F=JSON.parse('{"path":"/vue2/computed-code-analysis.html","title":"Vue2.x computed原理分析","lang":"en-US","frontmatter":{"title":"Vue2.x computed原理分析","date":"2021-09-21T00:00:00.000Z","category":["Vue"],"type":["vue2"],"description":"init initComputed Watcher defineComputed createComputedGetter 步骤 取值 对 computed 进行求值时触发 get()=>createComputedGetter() => Watcher.get() => 将 Dep.target 设置为当前 watcher => 进行 compute...","head":[["meta",{"property":"og:url","content":"https://luxiag.github.io/luxiag/blog/vue2/computed-code-analysis.html"}],["meta",{"property":"og:title","content":"Vue2.x computed原理分析"}],["meta",{"property":"og:description","content":"init initComputed Watcher defineComputed createComputedGetter 步骤 取值 对 computed 进行求值时触发 get()=>createComputedGetter() => Watcher.get() => 将 Dep.target 设置为当前 watcher => 进行 compute..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2022-12-30T06:28:03.000Z"}],["meta",{"property":"article:published_time","content":"2021-09-21T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2022-12-30T06:28:03.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Vue2.x computed原理分析\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2021-09-21T00:00:00.000Z\\",\\"dateModified\\":\\"2022-12-30T06:28:03.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"luxiag\\",\\"url\\":\\"https://luxiag.github.io/luxiag\\"}]}"]]},"headers":[{"level":2,"title":"init","slug":"init","link":"#init","children":[{"level":3,"title":"initComputed","slug":"initcomputed","link":"#initcomputed","children":[]}]},{"level":2,"title":"步骤","slug":"步骤","link":"#步骤","children":[{"level":3,"title":"取值","slug":"取值","link":"#取值","children":[]},{"level":3,"title":"更新","slug":"更新","link":"#更新","children":[]}]}],"git":{"createdTime":1665653759000,"updatedTime":1672381683000,"contributors":[{"name":"卢祥","email":"example@gmail.com","commits":2},{"name":"luxiag","email":"luxiag@qq.com","commits":1},{"name":"luxiang","email":"luxiag@qq.com","commits":1},{"name":"卢祥","email":"example@qq.com","commits":1}]},"readingTime":{"minutes":2.12,"words":635},"filePathRelative":"vue2/computed-code-analysis.md","localizedDate":"September 21, 2021","excerpt":"<div class=\\"language-js line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"js\\" data-title=\\"js\\" style=\\"background-color:#282A36;color:#F8F8F2\\"><pre class=\\"shiki dracula vp-code\\"><code><span class=\\"line\\"><span style=\\"color:#FF79C6\\">var</span><span style=\\"color:#F8F8F2\\"> vm </span><span style=\\"color:#FF79C6\\">=</span><span style=\\"color:#FF79C6;font-weight:bold\\"> new</span><span style=\\"color:#50FA7B\\"> Vue</span><span style=\\"color:#F8F8F2\\">({</span></span>\\n<span class=\\"line\\"><span style=\\"color:#F8F8F2\\">  data</span><span style=\\"color:#FF79C6\\">:</span><span style=\\"color:#F8F8F2\\"> { a</span><span style=\\"color:#FF79C6\\">:</span><span style=\\"color:#BD93F9\\"> 1</span><span style=\\"color:#F8F8F2\\"> },</span></span>\\n<span class=\\"line\\"><span style=\\"color:#F8F8F2\\">  computed</span><span style=\\"color:#FF79C6\\">:</span><span style=\\"color:#F8F8F2\\"> {</span></span>\\n<span class=\\"line\\"><span style=\\"color:#6272A4\\">    // 仅读取</span></span>\\n<span class=\\"line\\"><span style=\\"color:#50FA7B\\">    aDouble</span><span style=\\"color:#FF79C6\\">:</span><span style=\\"color:#FF79C6\\"> function</span><span style=\\"color:#F8F8F2\\"> () {</span></span>\\n<span class=\\"line\\"><span style=\\"color:#FF79C6\\">      return</span><span style=\\"color:#BD93F9;font-style:italic\\"> this</span><span style=\\"color:#F8F8F2\\">.a </span><span style=\\"color:#FF79C6\\">*</span><span style=\\"color:#BD93F9\\"> 2</span><span style=\\"color:#F8F8F2\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color:#F8F8F2\\">    },</span></span>\\n<span class=\\"line\\"><span style=\\"color:#6272A4\\">    // 读取和设置</span></span>\\n<span class=\\"line\\"><span style=\\"color:#F8F8F2\\">    aPlus</span><span style=\\"color:#FF79C6\\">:</span><span style=\\"color:#F8F8F2\\"> {</span></span>\\n<span class=\\"line\\"><span style=\\"color:#50FA7B\\">      get</span><span style=\\"color:#FF79C6\\">:</span><span style=\\"color:#FF79C6\\"> function</span><span style=\\"color:#F8F8F2\\"> () {</span></span>\\n<span class=\\"line\\"><span style=\\"color:#FF79C6\\">        return</span><span style=\\"color:#BD93F9;font-style:italic\\"> this</span><span style=\\"color:#F8F8F2\\">.a </span><span style=\\"color:#FF79C6\\">+</span><span style=\\"color:#BD93F9\\"> 1</span><span style=\\"color:#F8F8F2\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color:#F8F8F2\\">      },</span></span>\\n<span class=\\"line\\"><span style=\\"color:#50FA7B\\">      set</span><span style=\\"color:#FF79C6\\">:</span><span style=\\"color:#FF79C6\\"> function</span><span style=\\"color:#F8F8F2\\"> (</span><span style=\\"color:#FFB86C;font-style:italic\\">v</span><span style=\\"color:#F8F8F2\\">) {</span></span>\\n<span class=\\"line\\"><span style=\\"color:#BD93F9;font-style:italic\\">        this</span><span style=\\"color:#F8F8F2\\">.a </span><span style=\\"color:#FF79C6\\">=</span><span style=\\"color:#F8F8F2\\"> v </span><span style=\\"color:#FF79C6\\">-</span><span style=\\"color:#BD93F9\\"> 1</span><span style=\\"color:#F8F8F2\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color:#F8F8F2\\">      },</span></span>\\n<span class=\\"line\\"><span style=\\"color:#F8F8F2\\">    },</span></span>\\n<span class=\\"line\\"><span style=\\"color:#F8F8F2\\">  },</span></span>\\n<span class=\\"line\\"><span style=\\"color:#F8F8F2\\">});</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{i as comp,F as data};
