import{_ as n,c as l,b as a,o as e}from"./app-C453UOYb.js";const o={};function p(F,s){return e(),l("div",null,s[0]||(s[0]=[a(`<h2 id="浏览器进程" tabindex="-1"><a class="header-anchor" href="#浏览器进程"><span>浏览器进程</span></a></h2><ul><li>浏览器是多进程的</li><li>每一个 TAB 页就是一个进程</li><li>浏览器主进程 <ul><li>控制其它子进程的创建和销毁</li><li>浏览器界面显示，比如用户交互、前进、后退等操作</li><li>将渲染的内容绘制到用户界面上</li></ul></li><li>渲染进程就是我们说的浏览器内核 <ul><li>负责页面的渲染、脚本执行、事件处理</li><li>每个 TAB 页都有一个渲染进程</li></ul></li><li>网络进程 处理网络请求、文件访问等操作</li><li>GPU 进程 用于 3D 绘制</li><li>第三方插件进程</li></ul><h3 id="渲染进程" tabindex="-1"><a class="header-anchor" href="#渲染进程"><span>渲染进程</span></a></h3><ul><li>GUI 渲染线程 <ul><li>渲染、布局和绘制页面</li><li>当页面需要重绘和回流时，此线程就会执行</li><li>与 JS 引擎互斥</li></ul></li><li>JS 引擎线程 <ul><li>负责解析执行 JS 脚本</li><li>只有一个 JS 引擎线程(单线程)</li><li>与 GUI 渲染线程互斥</li></ul></li><li>事件触发线程 <ul><li>用来控制事件循环(鼠标点击、setTimeout、Ajax 等)</li><li>当事件满足触发条件时，把事件放入到 JS 引擎所有的执行队列中</li></ul></li><li>定时器触发线程 <ul><li>setInterval 和 setTimeout 所在线程</li><li>定时任务并不是由 JS 引擎计时，而是由定时触发线程来计时的</li><li>计时完毕后会通知事件触发线程</li></ul></li><li>异步 HTTP 请求线程 <ul><li>浏览器有一个单独的线程处理 AJAX 请求</li><li>当请求完毕后，如果有回调函数，会通知事件触发线程</li></ul></li></ul><h2 id="eventloop" tabindex="-1"><a class="header-anchor" href="#eventloop"><span>EventLoop</span></a></h2><h3 id="宏任务" tabindex="-1"><a class="header-anchor" href="#宏任务"><span>宏任务</span></a></h3><ul><li>页面的大部分任务是在主任务上执行的，比如下面这些都是宏任务 <ul><li>渲染事件(DOM 解析、布局、绘制)</li><li>用户交互(鼠标点击、页面缩放)</li><li>JavaScript 脚本执行</li><li>网络请求</li><li>文件读写</li></ul></li><li>宏任务会添加到消息到消息队列的尾部，当主线程执行到该消息的时候就会执行</li><li>每次从事件队列中获取一个事件回调并且放到执行栈中的就是一个宏任务，宏任务执行过程中不会执行其它内容</li><li>每次宏任务执行完毕后会进行 GUI 渲染线程的渲染，然后再执行下一个宏任务</li><li>宏任务: script（整体代码）, setTimeout, setInterval, setImmediate, I/O, UI rendering</li><li>宏任务颗粒度较大，不适合需要精确控制境的任务</li><li>宏任务是由宿主方控制的</li></ul><h3 id="微任务" tabindex="-1"><a class="header-anchor" href="#微任务"><span>微任务</span></a></h3><ul><li>宏任务结束后会进行渲染然后执行下一个宏任务</li><li>微任务是当前宏任务执行后立即执行的宏任务</li><li>当宏任务执行完，就到达了检查点,会先将执行期间所产生的所有微任务都执行完再去进行渲染</li><li>微任务是由 V8 引擎控制的，在创建全局执行上下文的时候，也会在 V8 引擎内部创建一个微任务队列</li><li>微任务: process.nextTick（Nodejs）, Promises, Object.observe, MutationObserver</li></ul><h2 id="浏览器的-event-loop" tabindex="-1"><a class="header-anchor" href="#浏览器的-event-loop"><span>浏览器的 Event Loop</span></a></h2><ol><li>执行全局 Script 同步代码，这些同步代码有一些是同步语句，有一些是异步语句（比如 setTimeout 等）；</li><li>全局 Script 代码执行完毕后，调用栈 Stack 会清空；</li><li>从微队列 microtask queue 中取出位于队首的回调任务，放入调用栈 Stack 中执行，执行完后 microtask queue 长度减 1；</li><li>继续取出位于队首的任务，放入调用栈 Stack 中执行，以此类推，直到直到把 microtask queue 中的所有任务都执行完毕。<strong>注意，如果在执行 microtask 的过程中，又产生了 microtask，那么会加入到队列的末尾，也会在这个周期被调用执行</strong>；</li><li>microtask queue 中的所有任务都执行完毕，此时 microtask queue 为空队列，调用栈 Stack 也为空；</li><li>取出宏队列 macrotask queue 中位于队首的任务，放入 Stack 中执行；</li><li>执行完毕后，调用栈 Stack 为空；</li><li>重复第 3-7 个步骤；</li></ol><h3 id="promise" tabindex="-1"><a class="header-anchor" href="#promise"><span>promise</span></a></h3><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#BD93F9;">1</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#50FA7B;">setTimeout</span><span style="color:#F8F8F2;">(() </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#BD93F9;">5</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#8BE9FD;font-style:italic;">  Promise</span><span style="color:#F8F8F2;">.</span><span style="color:#50FA7B;">resolve</span><span style="color:#F8F8F2;">().</span><span style="color:#50FA7B;">then</span><span style="color:#F8F8F2;">(() </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">    console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#BD93F9;">6</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">  });</span></span>
<span class="line"><span style="color:#F8F8F2;">});</span></span>
<span class="line"><span style="color:#FF79C6;font-weight:bold;">new</span><span style="color:#8BE9FD;font-style:italic;"> Promise</span><span style="color:#F8F8F2;">((</span><span style="color:#FFB86C;font-style:italic;">resolve</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">reject</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#BD93F9;">2</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#50FA7B;">  resolve</span><span style="color:#F8F8F2;">(</span><span style="color:#BD93F9;">4</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">}).</span><span style="color:#50FA7B;">then</span><span style="color:#F8F8F2;">((</span><span style="color:#FFB86C;font-style:italic;">data</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(data);</span></span>
<span class="line"><span style="color:#F8F8F2;">});</span></span>
<span class="line"><span style="color:#50FA7B;">setTimeout</span><span style="color:#F8F8F2;">(() </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#BD93F9;">7</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">});</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#BD93F9;">3</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#BD93F9;">1</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#BD93F9;">2</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#BD93F9;">3</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#BD93F9;">4</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#BD93F9;">5</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#BD93F9;">6</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#BD93F9;">7</span><span style="color:#F8F8F2;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="async-await" tabindex="-1"><a class="header-anchor" href="#async-await"><span>async/await</span></a></h3><p>如果 await 后面跟的不是一个 Promise，那 await 后面表达式的运算结果就是它等到的东西； 如果 await 后面跟的是一个 Promise 对象，await 它会“阻塞”后面的代码，等着 Promise 对象 resolve，然后得到 resolve 的值作为 await 表达式的运算结果。但是此“阻塞”非彼“阻塞”这就是 await 必须用在 async 函数中的原因。async 函数调用不会造成“阻塞”，它内部所有的“阻塞”都被封装在一个 Promise 对象中异步执行。</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">1</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#FF79C6;">async</span><span style="color:#FF79C6;"> function</span><span style="color:#50FA7B;"> async1</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#F8F8F2;">  console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">2</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#FF79C6;">  await</span><span style="color:#E9F284;"> &quot;</span><span style="color:#F1FA8C;">await的结果</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">  console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">5</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#50FA7B;">async1</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">3</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;font-weight:bold;">new</span><span style="color:#8BE9FD;font-style:italic;"> Promise</span><span style="color:#F8F8F2;">(</span><span style="color:#FF79C6;">function</span><span style="color:#F8F8F2;"> (</span><span style="color:#FFB86C;font-style:italic;">resolve</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">  console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">4</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#50FA7B;">  resolve</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#F8F8F2;">}).</span><span style="color:#50FA7B;">then</span><span style="color:#F8F8F2;">(</span><span style="color:#FF79C6;">function</span><span style="color:#F8F8F2;"> () {</span></span>
<span class="line"><span style="color:#F8F8F2;">  console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">6</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">});</span></span>
<span class="line"><span style="color:#6272A4;">//1 -&gt; 2 -&gt; 3 -&gt; 4 -&gt; 5 -&gt; 6</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">async</span><span style="color:#FF79C6;"> function</span><span style="color:#50FA7B;"> async1</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#F8F8F2;">  console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">2</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#FF79C6;">  await</span><span style="color:#50FA7B;"> async2</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#F8F8F2;">  console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">7</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">async</span><span style="color:#FF79C6;"> function</span><span style="color:#50FA7B;"> async2</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#F8F8F2;">  console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">3</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#50FA7B;">setTimeout</span><span style="color:#F8F8F2;">(</span><span style="color:#FF79C6;">function</span><span style="color:#F8F8F2;"> () {</span></span>
<span class="line"><span style="color:#F8F8F2;">  console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">8</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">}, </span><span style="color:#BD93F9;">0</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">1</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#50FA7B;">async1</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;font-weight:bold;">new</span><span style="color:#8BE9FD;font-style:italic;"> Promise</span><span style="color:#F8F8F2;">(</span><span style="color:#FF79C6;">function</span><span style="color:#F8F8F2;"> (</span><span style="color:#FFB86C;font-style:italic;">resolve</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">  console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">4</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#50FA7B;">  resolve</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#F8F8F2;">}).</span><span style="color:#50FA7B;">then</span><span style="color:#F8F8F2;">(</span><span style="color:#FF79C6;">function</span><span style="color:#F8F8F2;"> () {</span></span>
<span class="line"><span style="color:#F8F8F2;">  console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">6</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">});</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">5</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#6272A4;">//1 -&gt; 2 -&gt; 3 -&gt; 4 -&gt; 5 -&gt; 7 -&gt; 6 -&gt; 8</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="微任务队列" tabindex="-1"><a class="header-anchor" href="#微任务队列"><span>微任务队列</span></a></h3><p>微任务队列会一次性清空</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">function</span><span style="color:#50FA7B;"> loop</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#8BE9FD;font-style:italic;">  Promise</span><span style="color:#F8F8F2;">.</span><span style="color:#50FA7B;">resolve</span><span style="color:#F8F8F2;">().</span><span style="color:#50FA7B;">then</span><span style="color:#F8F8F2;">(loop);</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#50FA7B;">loop</span><span style="color:#F8F8F2;">();</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>微任务会先于渲染执行</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#F8F8F2;">document.body.style </span><span style="color:#FF79C6;">=</span><span style="color:#E9F284;"> &quot;</span><span style="color:#F1FA8C;">background:red</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#BD93F9;">1</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#8BE9FD;font-style:italic;">Promise</span><span style="color:#F8F8F2;">.</span><span style="color:#50FA7B;">resolve</span><span style="color:#F8F8F2;">().</span><span style="color:#50FA7B;">then</span><span style="color:#F8F8F2;">(() </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#BD93F9;">2</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">  document.body.style </span><span style="color:#FF79C6;">=</span><span style="color:#E9F284;"> &quot;</span><span style="color:#F1FA8C;">background:yellow</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">});</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#BD93F9;">3</span><span style="color:#F8F8F2;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>宏任务结束之后会先执行微任务</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#50FA7B;">setTimeout</span><span style="color:#F8F8F2;">(() </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">    console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#BD93F9;">1</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#8BE9FD;font-style:italic;">    Promise</span><span style="color:#F8F8F2;">.</span><span style="color:#50FA7B;">resolve</span><span style="color:#F8F8F2;">(</span><span style="color:#BD93F9;">3</span><span style="color:#F8F8F2;">).</span><span style="color:#50FA7B;">then</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">data</span><span style="color:#FF79C6;"> =&gt;</span><span style="color:#F8F8F2;"> console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(data))</span></span>
<span class="line"><span style="color:#F8F8F2;">}, </span><span style="color:#BD93F9;">0</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#50FA7B;">setTimeout</span><span style="color:#F8F8F2;">(() </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">    console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#BD93F9;">2</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">}, </span><span style="color:#BD93F9;">0</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BD93F9;">1</span><span style="color:#BD93F9;"> 3</span><span style="color:#BD93F9;"> 2</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="node10-xx-中的-eventloop" tabindex="-1"><a class="header-anchor" href="#node10-xx-中的-eventloop"><span>Node10.xx 中的 EventLoop</span></a></h2><p>Node 中的 Event Loop 和浏览器中的是完全不相同的东西。Node.js 采用 V8 作为 js 的解析引擎，而 I/O 处理方面使用了自己设计的 libuv，libuv 是一个基于事件驱动的跨平台抽象层，封装了不同操作系统一些底层特性，对外提供统一的 API，事件循环机制也是它里面的实现（下文会详细介绍）。</p><p>Node.js 的运行机制如下:</p><ul><li>V8 引擎解析 JavaScript 脚本。</li><li>解析后的代码，调用 Node API。</li><li>libuv 库负责 Node API 的执行。它将不同的任务分配给不同的线程，形成一个 Event Loop（事件循环），以异步的方式将任务的执行结果返回给 V8 引擎。</li><li>V8 引擎再将结果返回给用户。</li></ul><h3 id="六个阶段" tabindex="-1"><a class="header-anchor" href="#六个阶段"><span>六个阶段</span></a></h3><p>其中 libuv 引擎中的事件循环分为 6 个阶段，它们会按照顺序反复运行。每当进入某一个阶段的时候，都会从对应的回调队列中取出函数去执行。当队列为空或者执行的回调函数数量到达系统设定的阈值，就会进入下一阶段。</p><p>从上图中，大致看出 node 中的事件循环的顺序：</p><p>外部输入数据–&gt;轮询阶段(poll)–&gt;检查阶段(check)–&gt;关闭事件回调阶段(close callback)–&gt;定时器检测阶段(timer)–&gt;I/O 事件回调阶段(I/O callbacks)–&gt;闲置阶段(idle, prepare)–&gt;轮询阶段（按照该顺序反复运行）…</p><ul><li>timers 阶段：这个阶段执行 timer（setTimeout、setInterval）的回调</li><li>I/O callbacks 阶段：处理一些上一轮循环中的少数未执行的 I/O 回调</li><li>idle, prepare 阶段：仅 node 内部使用</li><li>poll 阶段：获取新的 I/O 事件, 适当的条件下 node 将阻塞在这里</li><li>check 阶段：执行 setImmediate() 的回调</li><li>close callbacks 阶段：执行 socket 的 close 事件回调</li></ul><p>注意：<strong>上面六个阶段都不包括 process.nextTick()</strong>(下文会介绍)</p><p>接下去我们详细介绍<code>timers</code>、<code>poll</code>、<code>check</code>这 3 个阶段，因为日常开发中的绝大部分异步任务都是在这 3 个阶段处理的。</p><p><strong>(1) timer</strong></p><p>timers 阶段会执行 setTimeout 和 setInterval 回调，并且是由 poll 阶段控制的。 同样，<strong>在 Node 中定时器指定的时间也不是准确时间，只能是尽快执行</strong>。</p><p><strong>(2) poll</strong></p><p>poll 是一个至关重要的阶段，这一阶段中，系统会做两件事情</p><ul><li>回到 timer 阶段执行回调</li><li>执行 I/O 回调</li></ul><p>并且在进入该阶段时如果没有设定了 timer 的话，会发生以下两件事情</p><ul><li>如果 poll 队列不为空，会遍历回调队列并同步执行，直到队列为空或者达到系统限制</li><li>如果 poll 队列为空时，会有两件事发生 <ul><li>如果有 setImmediate 回调需要执行，poll 阶段会停止并且进入到 check 阶段执行回调</li><li>如果没有 setImmediate 回调需要执行，会等待回调被加入到队列中并立即执行回调，这里同样会有个超时时间设置防止一直等待下去</li></ul></li></ul><p>当然设定了 timer 的话且 poll 队列为空，则会判断是否有 timer 超时，如果有的话会回到 timer 阶段执行回调。</p><p><strong>(3) check 阶段</strong></p><p>setImmediate()的回调会被加入 check 队列中，从 event loop 的阶段图可以知道，check 阶段的执行顺序在 poll 阶段之后。</p><p>我们先来看个例子:</p><div class="language-jsx line-numbers-mode" data-highlighter="shiki" data-ext="jsx" data-title="jsx" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#F8F8F2;"> console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">start</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#50FA7B;"> setTimeout</span><span style="color:#F8F8F2;">(() </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">   console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">timer1</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#8BE9FD;font-style:italic;">   Promise</span><span style="color:#F8F8F2;">.</span><span style="color:#50FA7B;">resolve</span><span style="color:#F8F8F2;">().</span><span style="color:#50FA7B;">then</span><span style="color:#F8F8F2;">(</span><span style="color:#FF79C6;">function</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#F8F8F2;">     console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">promise1</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">   })</span></span>
<span class="line"><span style="color:#F8F8F2;"> }, </span><span style="color:#BD93F9;">0</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#50FA7B;"> setTimeout</span><span style="color:#F8F8F2;">(() </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">   console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">timer2</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#8BE9FD;font-style:italic;">   Promise</span><span style="color:#F8F8F2;">.</span><span style="color:#50FA7B;">resolve</span><span style="color:#F8F8F2;">().</span><span style="color:#50FA7B;">then</span><span style="color:#F8F8F2;">(</span><span style="color:#FF79C6;">function</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#F8F8F2;">     console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">promise2</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">   })</span></span>
<span class="line"><span style="color:#F8F8F2;"> }, </span><span style="color:#BD93F9;">0</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#8BE9FD;font-style:italic;"> Promise</span><span style="color:#F8F8F2;">.</span><span style="color:#50FA7B;">resolve</span><span style="color:#F8F8F2;">().</span><span style="color:#50FA7B;">then</span><span style="color:#F8F8F2;">(</span><span style="color:#FF79C6;">function</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#F8F8F2;">   console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">promise3</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;"> })</span></span>
<span class="line"><span style="color:#F8F8F2;"> console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">end</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#6272A4;"> //start=&gt;end=&gt;promise3=&gt;timer1=&gt;timer2=&gt;promise1=&gt;promise2</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>一开始执行栈的同步任务（这属于宏任务）执行完毕后（依次打印出 start end，并将 2 个 timer 依次放入 timer 队列）,会先去执行微任务（<strong>这点跟浏览器端的一样</strong>），所以打印出 promise3</li><li>然后进入 timers 阶段，执行 timer1 的回调函数，打印 timer1，并将 promise.then 回调放入 microtask 队列，同样的步骤执行 timer2，打印 timer2；这点跟浏览器端相差比较大，<strong>timers 阶段有几个 setTimeout/setInterval 都会依次执行</strong>，并不像浏览器端，每执行一个宏任务后就去执行一个微任务（关于 Node 与浏览器的 Event Loop 差异，下文还会详细介绍）。</li></ul><h3 id="_3-注意点" tabindex="-1"><a class="header-anchor" href="#_3-注意点"><span><strong>3. 注意点</strong></span></a></h3><p><strong>(1) setTimeout 和 setImmediate</strong></p><p>二者非常相似，区别主要在于调用时机不同。</p><ul><li>setImmediate 设计在 poll 阶段完成时执行，即 check 阶段；</li><li>setTimeout 设计在 poll 阶段为空闲时，且设定时间到达后执行，但它在 timer 阶段执行</li></ul><div class="language-jsx line-numbers-mode" data-highlighter="shiki" data-ext="jsx" data-title="jsx" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#50FA7B;"> setTimeout</span><span style="color:#F8F8F2;">(</span><span style="color:#FF79C6;">function</span><span style="color:#50FA7B;"> timeout</span><span style="color:#F8F8F2;"> () {</span></span>
<span class="line"><span style="color:#F8F8F2;">   console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">timeout</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;"> },</span><span style="color:#BD93F9;">0</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#50FA7B;"> setImmediate</span><span style="color:#F8F8F2;">(</span><span style="color:#FF79C6;">function</span><span style="color:#50FA7B;"> immediate</span><span style="color:#F8F8F2;"> () {</span></span>
<span class="line"><span style="color:#F8F8F2;">   console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">immediate</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;"> });</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>对于以上代码来说，setTimeout 可能执行在前，也可能执行在后。</li><li>首先 setTimeout(fn, 0) === setTimeout(fn, 1)，这是由源码决定的 进入事件循环也是需要成本的，如果在准备时候花费了大于 1ms 的时间，那么在 timer 阶段就会直接执行 setTimeout 回调</li><li>如果准备时间花费小于 1ms，那么就是 setImmediate 回调先执行了</li></ul><p>但当二者在异步 i/o callback 内部调用时，总是先执行 setImmediate，再执行 setTimeout</p><div class="language-jsx line-numbers-mode" data-highlighter="shiki" data-ext="jsx" data-title="jsx" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;"> const</span><span style="color:#F8F8F2;"> fs </span><span style="color:#FF79C6;">=</span><span style="color:#50FA7B;"> require</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">fs</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;"> fs.</span><span style="color:#50FA7B;">readFile</span><span style="color:#F8F8F2;">(__filename, () </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#50FA7B;">     setTimeout</span><span style="color:#F8F8F2;">(() </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">         console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">timeout</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">     }, </span><span style="color:#BD93F9;">0</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#50FA7B;">     setImmediate</span><span style="color:#F8F8F2;">(() </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">         console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">immediate</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">     })</span></span>
<span class="line"><span style="color:#F8F8F2;"> })</span></span>
<span class="line"><span style="color:#6272A4;"> // immediate</span></span>
<span class="line"><span style="color:#6272A4;"> // timeout</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上述代码中，setImmediate 永远先执行。因为两个代码写在 IO 回调中，IO 回调是在 poll 阶段执行，当回调执行完毕后队列为空，发现存在 setImmediate 回调，所以就直接跳转到 check 阶段去执行回调了。</p><p><strong>(2) process.nextTick</strong></p><p>这个函数其实是独立于 Event Loop 之外的，它有一个自己的队列，当每个阶段完成后，如果存在 nextTick 队列，就会清空队列中的所有回调函数，并且优先于其他 microtask 执行。</p><div class="language-jsx line-numbers-mode" data-highlighter="shiki" data-ext="jsx" data-title="jsx" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#50FA7B;"> setTimeout</span><span style="color:#F8F8F2;">(() </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">timer1</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#8BE9FD;font-style:italic;">  Promise</span><span style="color:#F8F8F2;">.</span><span style="color:#50FA7B;">resolve</span><span style="color:#F8F8F2;">().</span><span style="color:#50FA7B;">then</span><span style="color:#F8F8F2;">(</span><span style="color:#FF79C6;">function</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#F8F8F2;">    console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">promise1</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">  })</span></span>
<span class="line"><span style="color:#F8F8F2;"> }, </span><span style="color:#BD93F9;">0</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;"> process.</span><span style="color:#50FA7B;">nextTick</span><span style="color:#F8F8F2;">(() </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">nextTick</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">  process.</span><span style="color:#50FA7B;">nextTick</span><span style="color:#F8F8F2;">(() </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">    console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">nextTick</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">    process.</span><span style="color:#50FA7B;">nextTick</span><span style="color:#F8F8F2;">(() </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">      console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">nextTick</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">      process.</span><span style="color:#50FA7B;">nextTick</span><span style="color:#F8F8F2;">(() </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">        console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">nextTick</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">      })</span></span>
<span class="line"><span style="color:#F8F8F2;">    })</span></span>
<span class="line"><span style="color:#F8F8F2;">  })</span></span>
<span class="line"><span style="color:#F8F8F2;"> })</span></span>
<span class="line"><span style="color:#6272A4;"> // nextTick=&gt;nextTick=&gt;nextTick=&gt;nextTick=&gt;timer1=&gt;promise1</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="node10-xx-与浏览器的-event-loop-差异" tabindex="-1"><a class="header-anchor" href="#node10-xx-与浏览器的-event-loop-差异"><span><strong>Node10.xx 与浏览器的 Event Loop 差异</strong></span></a></h2><p><strong>浏览器环境下，microtask 的任务队列是每个 macrotask 执行完之后执行。而在 Node.js 中，microtask 会在每个 macrotask <code>队列</code>执行完，也就是一个阶段执行完毕，就会去执行 microtask 队列的任务</strong>。</p><p>接下我们通过一个例子来说明两者区别：</p><div class="language-jsx line-numbers-mode" data-highlighter="shiki" data-ext="jsx" data-title="jsx" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#50FA7B;"> setTimeout</span><span style="color:#F8F8F2;">(()</span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;">{</span></span>
<span class="line"><span style="color:#F8F8F2;">     console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">timer1</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#8BE9FD;font-style:italic;">     Promise</span><span style="color:#F8F8F2;">.</span><span style="color:#50FA7B;">resolve</span><span style="color:#F8F8F2;">().</span><span style="color:#50FA7B;">then</span><span style="color:#F8F8F2;">(</span><span style="color:#FF79C6;">function</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#F8F8F2;">         console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">promise1</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">     })</span></span>
<span class="line"><span style="color:#F8F8F2;"> }, </span><span style="color:#BD93F9;">0</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#50FA7B;"> setTimeout</span><span style="color:#F8F8F2;">(()</span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;">{</span></span>
<span class="line"><span style="color:#F8F8F2;">     console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">timer2</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#8BE9FD;font-style:italic;">     Promise</span><span style="color:#F8F8F2;">.</span><span style="color:#50FA7B;">resolve</span><span style="color:#F8F8F2;">().</span><span style="color:#50FA7B;">then</span><span style="color:#F8F8F2;">(</span><span style="color:#FF79C6;">function</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#F8F8F2;">         console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">promise2</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">     })</span></span>
<span class="line"><span style="color:#F8F8F2;"> }, </span><span style="color:#BD93F9;">0</span><span style="color:#F8F8F2;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>浏览器端运行结果：<code>timer1=&gt;promise1=&gt;timer2=&gt;promise2</code></p><p>浏览器端的处理过程如下：</p><p>Node 端运行结果：<code>timer1=&gt;timer2=&gt;promise1=&gt;promise2</code></p><ul><li>全局脚本（main()）执行，将 2 个 timer 依次放入 timer 队列，main()执行完毕，调用栈空闲，任务队列开始执行；</li><li>首先进入 timers 阶段，执行 timer1 的回调函数，打印 timer1，并将 promise1.then 回调放入 microtask 队列，同样的步骤执行 timer2，打印 timer2；</li><li>至此，timer 阶段执行结束，event loop 进入下一个阶段之前，执行 microtask 队列的所有任务，依次打印 promise1、promise2</li></ul>`,68)]))}const c=n(o,[["render",p],["__file","eventloop.html.vue"]]),i=JSON.parse('{"path":"/javascript/eventloop.html","title":"EventLoop","lang":"en-US","frontmatter":{"title":"EventLoop","category":["JavaScript"],"date":"2020-12-03T00:00:00.000Z","description":"浏览器进程 浏览器是多进程的 每一个 TAB 页就是一个进程 浏览器主进程 控制其它子进程的创建和销毁 浏览器界面显示，比如用户交互、前进、后退等操作 将渲染的内容绘制到用户界面上 渲染进程就是我们说的浏览器内核 负责页面的渲染、脚本执行、事件处理 每个 TAB 页都有一个渲染进程 网络进程 处理网络请求、文件访问等操作 GPU 进程 用于 3D 绘制...","head":[["meta",{"property":"og:url","content":"https://luxiag.github.io/luxiag/blog/javascript/eventloop.html"}],["meta",{"property":"og:title","content":"EventLoop"}],["meta",{"property":"og:description","content":"浏览器进程 浏览器是多进程的 每一个 TAB 页就是一个进程 浏览器主进程 控制其它子进程的创建和销毁 浏览器界面显示，比如用户交互、前进、后退等操作 将渲染的内容绘制到用户界面上 渲染进程就是我们说的浏览器内核 负责页面的渲染、脚本执行、事件处理 每个 TAB 页都有一个渲染进程 网络进程 处理网络请求、文件访问等操作 GPU 进程 用于 3D 绘制..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2023-01-15T10:46:26.000Z"}],["meta",{"property":"article:published_time","content":"2020-12-03T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-01-15T10:46:26.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"EventLoop\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2020-12-03T00:00:00.000Z\\",\\"dateModified\\":\\"2023-01-15T10:46:26.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"luxiag\\",\\"url\\":\\"https://luxiag.github.io/luxiag\\"}]}"]]},"headers":[{"level":2,"title":"浏览器进程","slug":"浏览器进程","link":"#浏览器进程","children":[{"level":3,"title":"渲染进程","slug":"渲染进程","link":"#渲染进程","children":[]}]},{"level":2,"title":"EventLoop","slug":"eventloop","link":"#eventloop","children":[{"level":3,"title":"宏任务","slug":"宏任务","link":"#宏任务","children":[]},{"level":3,"title":"微任务","slug":"微任务","link":"#微任务","children":[]}]},{"level":2,"title":"浏览器的 Event Loop","slug":"浏览器的-event-loop","link":"#浏览器的-event-loop","children":[{"level":3,"title":"promise","slug":"promise","link":"#promise","children":[]},{"level":3,"title":"async/await","slug":"async-await","link":"#async-await","children":[]},{"level":3,"title":"微任务队列","slug":"微任务队列","link":"#微任务队列","children":[]}]},{"level":2,"title":"Node10.xx 中的 EventLoop","slug":"node10-xx-中的-eventloop","link":"#node10-xx-中的-eventloop","children":[{"level":3,"title":"六个阶段","slug":"六个阶段","link":"#六个阶段","children":[]},{"level":3,"title":"3. 注意点","slug":"_3-注意点","link":"#_3-注意点","children":[]}]},{"level":2,"title":"Node10.xx 与浏览器的 Event Loop 差异","slug":"node10-xx-与浏览器的-event-loop-差异","link":"#node10-xx-与浏览器的-event-loop-差异","children":[]}],"git":{"createdTime":1673779586000,"updatedTime":1673779586000,"contributors":[{"name":"luxiag","email":"luxiag@qq.com","commits":1}]},"readingTime":{"minutes":10.16,"words":3049},"filePathRelative":"javascript/eventloop.md","localizedDate":"December 3, 2020","excerpt":"<h2>浏览器进程</h2>\\n<ul>\\n<li>浏览器是多进程的</li>\\n<li>每一个 TAB 页就是一个进程</li>\\n<li>浏览器主进程\\n<ul>\\n<li>控制其它子进程的创建和销毁</li>\\n<li>浏览器界面显示，比如用户交互、前进、后退等操作</li>\\n<li>将渲染的内容绘制到用户界面上</li>\\n</ul>\\n</li>\\n<li>渲染进程就是我们说的浏览器内核\\n<ul>\\n<li>负责页面的渲染、脚本执行、事件处理</li>\\n<li>每个 TAB 页都有一个渲染进程</li>\\n</ul>\\n</li>\\n<li>网络进程 处理网络请求、文件访问等操作</li>\\n<li>GPU 进程 用于 3D 绘制</li>\\n<li>第三方插件进程</li>\\n</ul>","autoDesc":true}');export{c as comp,i as data};
