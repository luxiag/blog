import{_ as n,e as l,g as a,o as p}from"./app-BcLUFOMF.js";const o="/blog/assets/0407071739105770968-u6OY_Rjb.png",e="/blog/assets/0407071739105789880-12Ztle02.png",F="/blog/assets/0407071739105812639-BN4LBGeo.png",t="/blog/assets/0407071739105838892-CvDGIf2O.png",c="/blog/assets/0407071739105858755-d-eFkjne.png",r="/blog/assets/29dc30c1546cc73846153359b0fad8fb-CzS93pt-.gif",i="/blog/assets/0407071739109228345-D-2QzC2A.png",y="/blog/assets/0407071739109854194-CURQC_gq.png",d="/blog/assets/0407071739109867402-BlcHQl9k.png",u={};function v(m,s){return p(),l("div",null,s[0]||(s[0]=[a('<p>深度优先遍历(Depth First Search, 简称 DFS) 与广度优先遍历(Breath First Search)是图论中两种非常重要的算法，生产上广泛用于拓扑排序，寻路(走迷宫)，搜索引擎，爬虫等</p><h1 id="深度优先遍历" tabindex="-1"><a class="header-anchor" href="#深度优先遍历"><span>深度优先遍历</span></a></h1><p>主要思路是从图中一个未访问的顶点 V 开始，沿着一条路一直走到底，然后从这条路尽头的节点回退到上一个节点，再从另一条路开始走到底...，不断递归重复此过程，直到所有的顶点都遍历完成，它的特点是不撞南墙不回头，先走完一条路，再换一条路继续走。</p><figure><img src="'+o+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li>我们从根节点 1 开始遍历，它相邻的节点有 2，3，4，先遍历节点 2，再遍历 2 的子节点 5，然后再遍历 5 的子节点 9。</li></ul><figure><img src="'+e+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li>此时就从 9 回退到上一个节点 5，看下节点 5 是否还有除 9 以外的节点，没有继续回退到 2，2 也没有除 5 以外的节点，回退到 1，1 有除 2 以外的节点 3，所以从节点 3 开始进行深度优先遍历</li></ul><figure><img src="'+F+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li>同理从 10 开始往上回溯到 6, 6 没有除 10 以外的子节点，再往上回溯，发现 3 有除 6 以外的子点 7，所以此时会遍历 7。</li></ul><figure><img src="'+t+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li>从 7 往上回溯到 3， 1，发现 1 还有节点 4 未遍历，所以此时沿着 4， 8 进行遍历,这样就遍历完成了。</li></ul><figure><img src="'+c+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h1 id="广度优先遍历" tabindex="-1"><a class="header-anchor" href="#广度优先遍历"><span>广度优先遍历</span></a></h1><p>广度优先遍历，指的是从图的一个未遍历的节点出发，先遍历这个节点的相邻节点，再依次遍历每个相邻节点的相邻节点。</p><figure><img src="'+r+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h1 id="二叉树的最小深度" tabindex="-1"><a class="header-anchor" href="#二叉树的最小深度"><span><a href="https://leetcode.cn/problems/minimum-depth-of-binary-tree/description/?envType=problem-list-v2&amp;envId=depth-first-search" target="_blank" rel="noopener noreferrer">二叉树的最小深度</a></span></a></h1><p>给定一个二叉树，找出其最小深度。</p><p>最小深度是从根节点到最近叶子节点的最短路径上的节点数量。</p><p>说明：叶子节点是指没有子节点的节点。</p><figure><img src="'+i+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><div class="language-md line-numbers-mode" data-highlighter="shiki" data-ext="md" data-title="md" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">输入：root = [</span><span style="color:#FF79C6;">3,9,20,null,null,15,7</span><span style="color:#F8F8F2;">]</span></span>
<span class="line"><span style="color:#F8F8F2;">输出：2</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">输入：root = [</span><span style="color:#FF79C6;">2,null,3,null,4,null,5,null,6</span><span style="color:#F8F8F2;">]</span></span>
<span class="line"><span style="color:#F8F8F2;">输出：5</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-ts line-numbers-mode" data-highlighter="shiki" data-ext="ts" data-title="ts" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#6272A4;">// 深度</span></span>
<span class="line"><span style="color:#FF79C6;">function</span><span style="color:#50FA7B;"> minDepth</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">root</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> TreeNode</span><span style="color:#FF79C6;"> |</span><span style="color:#8BE9FD;font-style:italic;"> null</span><span style="color:#F8F8F2;">)</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> number</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#FF79C6;">  if</span><span style="color:#F8F8F2;"> (</span><span style="color:#FF79C6;">!</span><span style="color:#F8F8F2;">root) </span><span style="color:#FF79C6;">return</span><span style="color:#BD93F9;"> 0</span></span>
<span class="line"><span style="color:#FF79C6;">  if</span><span style="color:#F8F8F2;"> (</span><span style="color:#FF79C6;">!</span><span style="color:#F8F8F2;">root.left </span><span style="color:#FF79C6;">&amp;&amp;</span><span style="color:#FF79C6;"> !</span><span style="color:#F8F8F2;">root.right) </span><span style="color:#FF79C6;">return</span><span style="color:#BD93F9;"> 1</span></span>
<span class="line"><span style="color:#FF79C6;">  let</span><span style="color:#F8F8F2;"> min </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> Number.MAX_SAFE_INTEGER</span></span>
<span class="line"><span style="color:#FF79C6;">  if</span><span style="color:#F8F8F2;"> (root.left) {</span></span>
<span class="line"><span style="color:#F8F8F2;">    min </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> Math.</span><span style="color:#50FA7B;">min</span><span style="color:#F8F8F2;">(</span><span style="color:#50FA7B;">minDepth</span><span style="color:#F8F8F2;">(root.left), min)</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#FF79C6;">  if</span><span style="color:#F8F8F2;"> (root.right) {</span></span>
<span class="line"><span style="color:#F8F8F2;">    min </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> Math.</span><span style="color:#50FA7B;">min</span><span style="color:#F8F8F2;">(</span><span style="color:#50FA7B;">minDepth</span><span style="color:#F8F8F2;">(root.right), min)</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#FF79C6;">  return</span><span style="color:#F8F8F2;"> min </span><span style="color:#FF79C6;">+</span><span style="color:#BD93F9;"> 1</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">// 广度</span></span>
<span class="line"><span style="color:#FF79C6;">function</span><span style="color:#50FA7B;"> minDepth</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">root</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> TreeNode</span><span style="color:#FF79C6;"> |</span><span style="color:#8BE9FD;font-style:italic;"> null</span><span style="color:#F8F8F2;">)</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> number</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#FF79C6;">  if</span><span style="color:#F8F8F2;">(</span><span style="color:#FF79C6;">!</span><span style="color:#F8F8F2;">root) </span><span style="color:#FF79C6;">return</span><span style="color:#BD93F9;"> 0</span></span>
<span class="line"><span style="color:#FF79C6;">  const</span><span style="color:#F8F8F2;"> queue </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> [root]</span></span>
<span class="line"><span style="color:#FF79C6;">  let</span><span style="color:#F8F8F2;"> depth </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> 1</span></span>
<span class="line"><span style="color:#FF79C6;">  while</span><span style="color:#F8F8F2;">(queue.length) {</span></span>
<span class="line"><span style="color:#FF79C6;">    const</span><span style="color:#F8F8F2;"> len </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> queue.length</span></span>
<span class="line"><span style="color:#FF79C6;">    for</span><span style="color:#F8F8F2;">(</span><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> i </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> 0</span><span style="color:#F8F8F2;">; i </span><span style="color:#FF79C6;">&lt;</span><span style="color:#F8F8F2;"> len; i</span><span style="color:#FF79C6;">++</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#FF79C6;">      const</span><span style="color:#F8F8F2;"> node </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> queue.</span><span style="color:#50FA7B;">shift</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"><span style="color:#FF79C6;">      if</span><span style="color:#F8F8F2;">(</span><span style="color:#FF79C6;">!</span><span style="color:#F8F8F2;">node.left </span><span style="color:#FF79C6;">&amp;&amp;</span><span style="color:#FF79C6;"> !</span><span style="color:#F8F8F2;">node.right) </span><span style="color:#FF79C6;">return</span><span style="color:#F8F8F2;"> depth</span></span>
<span class="line"><span style="color:#FF79C6;">      if</span><span style="color:#F8F8F2;">(node.left) queue.</span><span style="color:#50FA7B;">push</span><span style="color:#F8F8F2;">(node.left)</span></span>
<span class="line"><span style="color:#FF79C6;">      if</span><span style="color:#F8F8F2;">(node.right) queue.</span><span style="color:#50FA7B;">push</span><span style="color:#F8F8F2;">(node.right)</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">    depth</span><span style="color:#FF79C6;">++</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#FF79C6;">  return</span><span style="color:#F8F8F2;"> depth</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="岛屿数量" tabindex="-1"><a class="header-anchor" href="#岛屿数量"><span><a href="https://leetcode.cn/problems/number-of-islands/description/?envType=problem-list-v2&amp;envId=depth-first-search" target="_blank" rel="noopener noreferrer">岛屿数量</a></span></a></h1><p>给你一个由 &#39;1&#39;（陆地）和 &#39;0&#39;（水）组成的的二维网格，请你计算网格中岛屿的数量。</p><p>岛屿总是被水包围，并且每座岛屿只能由水平方向和/或竖直方向上相邻的陆地连接形成。</p><p>此外，你可以假设该网格的四条边均被水包围。</p><div class="language-md line-numbers-mode" data-highlighter="shiki" data-ext="md" data-title="md" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">输入：grid = [</span></span>
<span class="line"><span style="color:#F8F8F2;">  [</span><span style="color:#FF79C6;">&quot;1&quot;,&quot;1&quot;,&quot;1&quot;,&quot;1&quot;,&quot;0&quot;</span><span style="color:#F8F8F2;">],</span></span>
<span class="line"><span style="color:#F8F8F2;">  [</span><span style="color:#FF79C6;">&quot;1&quot;,&quot;1&quot;,&quot;0&quot;,&quot;1&quot;,&quot;0&quot;</span><span style="color:#F8F8F2;">],</span></span>
<span class="line"><span style="color:#F8F8F2;">  [</span><span style="color:#FF79C6;">&quot;1&quot;,&quot;1&quot;,&quot;0&quot;,&quot;0&quot;,&quot;0&quot;</span><span style="color:#F8F8F2;">],</span></span>
<span class="line"><span style="color:#F8F8F2;">  [</span><span style="color:#FF79C6;">&quot;0&quot;,&quot;0&quot;,&quot;0&quot;,&quot;0&quot;,&quot;0&quot;</span><span style="color:#F8F8F2;">]</span></span>
<span class="line"><span style="color:#F8F8F2;">]</span></span>
<span class="line"><span style="color:#F8F8F2;">输出：1</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">输入：grid = [</span></span>
<span class="line"><span style="color:#F8F8F2;">  [</span><span style="color:#FF79C6;">&quot;1&quot;,&quot;1&quot;,&quot;0&quot;,&quot;0&quot;,&quot;0&quot;</span><span style="color:#F8F8F2;">],</span></span>
<span class="line"><span style="color:#F8F8F2;">  [</span><span style="color:#FF79C6;">&quot;1&quot;,&quot;1&quot;,&quot;0&quot;,&quot;0&quot;,&quot;0&quot;</span><span style="color:#F8F8F2;">],</span></span>
<span class="line"><span style="color:#F8F8F2;">  [</span><span style="color:#FF79C6;">&quot;0&quot;,&quot;0&quot;,&quot;1&quot;,&quot;0&quot;,&quot;0&quot;</span><span style="color:#F8F8F2;">],</span></span>
<span class="line"><span style="color:#F8F8F2;">  [</span><span style="color:#FF79C6;">&quot;0&quot;,&quot;0&quot;,&quot;0&quot;,&quot;1&quot;,&quot;1&quot;</span><span style="color:#F8F8F2;">]</span></span>
<span class="line"><span style="color:#F8F8F2;">]</span></span>
<span class="line"><span style="color:#F8F8F2;">输出：3</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-ts line-numbers-mode" data-highlighter="shiki" data-ext="ts" data-title="ts" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#6272A4;">// DPS</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">function</span><span style="color:#50FA7B;"> dfs</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">grid</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> string</span><span style="color:#F8F8F2;">[][], </span><span style="color:#FFB86C;font-style:italic;">r</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> number</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">c</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> number</span><span style="color:#F8F8F2;">)</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> void</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#FF79C6;">   const</span><span style="color:#F8F8F2;"> nr </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> grid.length;</span></span>
<span class="line"><span style="color:#FF79C6;">   const</span><span style="color:#F8F8F2;"> nc </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> grid[</span><span style="color:#BD93F9;">0</span><span style="color:#F8F8F2;">].lengt</span></span>
<span class="line"><span style="color:#FF79C6;">   if</span><span style="color:#F8F8F2;"> (r </span><span style="color:#FF79C6;">&lt;</span><span style="color:#BD93F9;"> 0</span><span style="color:#FF79C6;"> ||</span><span style="color:#F8F8F2;"> c </span><span style="color:#FF79C6;">&lt;</span><span style="color:#BD93F9;"> 0</span><span style="color:#FF79C6;"> ||</span><span style="color:#F8F8F2;"> r </span><span style="color:#FF79C6;">&gt;=</span><span style="color:#F8F8F2;"> nr </span><span style="color:#FF79C6;">||</span><span style="color:#F8F8F2;"> c </span><span style="color:#FF79C6;">&gt;=</span><span style="color:#F8F8F2;"> nc </span><span style="color:#FF79C6;">||</span><span style="color:#F8F8F2;"> grid[r][c] </span><span style="color:#FF79C6;">===</span><span style="color:#E9F284;"> &#39;</span><span style="color:#F1FA8C;">0</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#FF79C6;">       return</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span></span>
<span class="line"><span style="color:#F8F8F2;">   grid[r][c] </span><span style="color:#FF79C6;">=</span><span style="color:#E9F284;"> &#39;</span><span style="color:#F1FA8C;">0</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#BD93F9;font-style:italic;">   this</span><span style="color:#F8F8F2;">.</span><span style="color:#50FA7B;">dfs</span><span style="color:#F8F8F2;">(grid, r </span><span style="color:#FF79C6;">-</span><span style="color:#BD93F9;"> 1</span><span style="color:#F8F8F2;">, c);</span></span>
<span class="line"><span style="color:#BD93F9;font-style:italic;">   this</span><span style="color:#F8F8F2;">.</span><span style="color:#50FA7B;">dfs</span><span style="color:#F8F8F2;">(grid, r </span><span style="color:#FF79C6;">+</span><span style="color:#BD93F9;"> 1</span><span style="color:#F8F8F2;">, c);</span></span>
<span class="line"><span style="color:#BD93F9;font-style:italic;">   this</span><span style="color:#F8F8F2;">.</span><span style="color:#50FA7B;">dfs</span><span style="color:#F8F8F2;">(grid, r, c </span><span style="color:#FF79C6;">-</span><span style="color:#BD93F9;"> 1</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#BD93F9;font-style:italic;">   this</span><span style="color:#F8F8F2;">.</span><span style="color:#50FA7B;">dfs</span><span style="color:#F8F8F2;">(grid, r, c </span><span style="color:#FF79C6;">+</span><span style="color:#BD93F9;"> 1</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#FF79C6;">function</span><span style="color:#50FA7B;"> numIslands</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">grid</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> string</span><span style="color:#F8F8F2;">[][])</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> number</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#FF79C6;">        if</span><span style="color:#F8F8F2;"> (grid </span><span style="color:#FF79C6;">==</span><span style="color:#BD93F9;"> null</span><span style="color:#FF79C6;"> ||</span><span style="color:#F8F8F2;"> grid.length </span><span style="color:#FF79C6;">===</span><span style="color:#BD93F9;"> 0</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#FF79C6;">            return</span><span style="color:#BD93F9;"> 0</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">        const</span><span style="color:#F8F8F2;"> nr </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> grid.length;</span></span>
<span class="line"><span style="color:#FF79C6;">        const</span><span style="color:#F8F8F2;"> nc </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> grid[</span><span style="color:#BD93F9;">0</span><span style="color:#F8F8F2;">].length;</span></span>
<span class="line"><span style="color:#FF79C6;">        let</span><span style="color:#F8F8F2;"> num_islands </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> 0</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#FF79C6;">        for</span><span style="color:#F8F8F2;"> (</span><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> r </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> 0</span><span style="color:#F8F8F2;">; r </span><span style="color:#FF79C6;">&lt;</span><span style="color:#F8F8F2;"> nr; </span><span style="color:#FF79C6;">++</span><span style="color:#F8F8F2;">r) {</span></span>
<span class="line"><span style="color:#FF79C6;">            for</span><span style="color:#F8F8F2;"> (</span><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> c </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> 0</span><span style="color:#F8F8F2;">; c </span><span style="color:#FF79C6;">&lt;</span><span style="color:#F8F8F2;"> nc; </span><span style="color:#FF79C6;">++</span><span style="color:#F8F8F2;">c) {</span></span>
<span class="line"><span style="color:#FF79C6;">                if</span><span style="color:#F8F8F2;"> (grid[r][c] </span><span style="color:#FF79C6;">===</span><span style="color:#E9F284;"> &#39;</span><span style="color:#F1FA8C;">1</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#FF79C6;">                    ++</span><span style="color:#F8F8F2;">num_islands;</span></span>
<span class="line"><span style="color:#BD93F9;font-style:italic;">                    this</span><span style="color:#F8F8F2;">.</span><span style="color:#50FA7B;">dfs</span><span style="color:#F8F8F2;">(grid, r, c);</span></span>
<span class="line"><span style="color:#F8F8F2;">                }</span></span>
<span class="line"><span style="color:#F8F8F2;">            }</span></span>
<span class="line"><span style="color:#F8F8F2;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">        return</span><span style="color:#F8F8F2;"> num_islands;</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">// BPS</span></span>
<span class="line"><span style="color:#FF79C6;">function</span><span style="color:#50FA7B;"> numIslands</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">grid</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> string</span><span style="color:#F8F8F2;">[][])</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> number</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#FF79C6;">    if</span><span style="color:#F8F8F2;"> (grid </span><span style="color:#FF79C6;">==</span><span style="color:#BD93F9;"> null</span><span style="color:#FF79C6;"> ||</span><span style="color:#F8F8F2;"> grid.length </span><span style="color:#FF79C6;">==</span><span style="color:#BD93F9;"> 0</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#FF79C6;">        return</span><span style="color:#BD93F9;"> 0</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span></span>
<span class="line"><span style="color:#FF79C6;">    let</span><span style="color:#F8F8F2;"> nr </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> grid.length;</span></span>
<span class="line"><span style="color:#FF79C6;">    let</span><span style="color:#F8F8F2;"> nc </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> grid[</span><span style="color:#BD93F9;">0</span><span style="color:#F8F8F2;">].length;</span></span>
<span class="line"><span style="color:#FF79C6;">    let</span><span style="color:#F8F8F2;"> num_islands </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> 0</span></span>
<span class="line"><span style="color:#FF79C6;">    for</span><span style="color:#F8F8F2;"> (</span><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> r </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> 0</span><span style="color:#F8F8F2;">; r </span><span style="color:#FF79C6;">&lt;</span><span style="color:#F8F8F2;"> nr; </span><span style="color:#FF79C6;">++</span><span style="color:#F8F8F2;">r) {</span></span>
<span class="line"><span style="color:#FF79C6;">        for</span><span style="color:#F8F8F2;"> (</span><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> c </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> 0</span><span style="color:#F8F8F2;">; c </span><span style="color:#FF79C6;">&lt;</span><span style="color:#F8F8F2;"> nc; </span><span style="color:#FF79C6;">++</span><span style="color:#F8F8F2;">c) {</span></span>
<span class="line"><span style="color:#FF79C6;">            if</span><span style="color:#F8F8F2;"> (grid[r][c] </span><span style="color:#FF79C6;">==</span><span style="color:#E9F284;"> &#39;</span><span style="color:#F1FA8C;">1</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#FF79C6;">                ++</span><span style="color:#F8F8F2;">num_islands;</span></span>
<span class="line"><span style="color:#F8F8F2;">                grid[r][c] </span><span style="color:#FF79C6;">=</span><span style="color:#E9F284;"> &#39;</span><span style="color:#F1FA8C;">0</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#FF79C6;">                let</span><span style="color:#F8F8F2;"> neighbors </span><span style="color:#FF79C6;">=</span><span style="color:#FF79C6;font-weight:bold;"> new</span><span style="color:#50FA7B;"> LinkedList</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#8BE9FD;font-style:italic;">number</span><span style="color:#F8F8F2;">&gt;();</span></span>
<span class="line"><span style="color:#F8F8F2;">                neighbors.</span><span style="color:#50FA7B;">add</span><span style="color:#F8F8F2;">(r </span><span style="color:#FF79C6;">*</span><span style="color:#F8F8F2;"> nc </span><span style="color:#FF79C6;">+</span><span style="color:#F8F8F2;"> c);</span></span>
<span class="line"><span style="color:#FF79C6;">                while</span><span style="color:#F8F8F2;"> (</span><span style="color:#FF79C6;">!</span><span style="color:#F8F8F2;">neighbors.</span><span style="color:#50FA7B;">isEmpty</span><span style="color:#F8F8F2;">()) {</span></span>
<span class="line"><span style="color:#FF79C6;">                    let</span><span style="color:#F8F8F2;"> id </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> neighbors.</span><span style="color:#50FA7B;">remove</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#FF79C6;">                    let</span><span style="color:#F8F8F2;"> row </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> Math.</span><span style="color:#50FA7B;">floor</span><span style="color:#F8F8F2;">(id </span><span style="color:#FF79C6;">/</span><span style="color:#F8F8F2;"> nc);</span></span>
<span class="line"><span style="color:#FF79C6;">                    let</span><span style="color:#F8F8F2;"> col </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> id </span><span style="color:#FF79C6;">%</span><span style="color:#F8F8F2;"> nc;</span></span>
<span class="line"><span style="color:#FF79C6;">                    if</span><span style="color:#F8F8F2;"> (row </span><span style="color:#FF79C6;">-</span><span style="color:#BD93F9;"> 1</span><span style="color:#FF79C6;"> &gt;=</span><span style="color:#BD93F9;"> 0</span><span style="color:#FF79C6;"> &amp;&amp;</span><span style="color:#F8F8F2;"> grid[row</span><span style="color:#FF79C6;">-</span><span style="color:#BD93F9;">1</span><span style="color:#F8F8F2;">][col] </span><span style="color:#FF79C6;">==</span><span style="color:#E9F284;"> &#39;</span><span style="color:#F1FA8C;">1</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">                        neighbors.</span><span style="color:#50FA7B;">add</span><span style="color:#F8F8F2;">((row</span><span style="color:#FF79C6;">-</span><span style="color:#BD93F9;">1</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">*</span><span style="color:#F8F8F2;"> nc </span><span style="color:#FF79C6;">+</span><span style="color:#F8F8F2;"> col);</span></span>
<span class="line"><span style="color:#F8F8F2;">                        grid[row</span><span style="color:#FF79C6;">-</span><span style="color:#BD93F9;">1</span><span style="color:#F8F8F2;">][col] </span><span style="color:#FF79C6;">=</span><span style="color:#E9F284;"> &#39;</span><span style="color:#F1FA8C;">0</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">                    }</span></span>
<span class="line"><span style="color:#FF79C6;">                    if</span><span style="color:#F8F8F2;"> (row </span><span style="color:#FF79C6;">+</span><span style="color:#BD93F9;"> 1</span><span style="color:#FF79C6;"> &lt;</span><span style="color:#F8F8F2;"> nr </span><span style="color:#FF79C6;">&amp;&amp;</span><span style="color:#F8F8F2;"> grid[row</span><span style="color:#FF79C6;">+</span><span style="color:#BD93F9;">1</span><span style="color:#F8F8F2;">][col] </span><span style="color:#FF79C6;">==</span><span style="color:#E9F284;"> &#39;</span><span style="color:#F1FA8C;">1</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">                        neighbors.</span><span style="color:#50FA7B;">add</span><span style="color:#F8F8F2;">((row</span><span style="color:#FF79C6;">+</span><span style="color:#BD93F9;">1</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">*</span><span style="color:#F8F8F2;"> nc </span><span style="color:#FF79C6;">+</span><span style="color:#F8F8F2;"> col);</span></span>
<span class="line"><span style="color:#F8F8F2;">                        grid[row</span><span style="color:#FF79C6;">+</span><span style="color:#BD93F9;">1</span><span style="color:#F8F8F2;">][col] </span><span style="color:#FF79C6;">=</span><span style="color:#E9F284;"> &#39;</span><span style="color:#F1FA8C;">0</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">                    }</span></span>
<span class="line"><span style="color:#FF79C6;">                    if</span><span style="color:#F8F8F2;"> (col </span><span style="color:#FF79C6;">-</span><span style="color:#BD93F9;"> 1</span><span style="color:#FF79C6;"> &gt;=</span><span style="color:#BD93F9;"> 0</span><span style="color:#FF79C6;"> &amp;&amp;</span><span style="color:#F8F8F2;"> grid[row][col</span><span style="color:#FF79C6;">-</span><span style="color:#BD93F9;">1</span><span style="color:#F8F8F2;">] </span><span style="color:#FF79C6;">==</span><span style="color:#E9F284;"> &#39;</span><span style="color:#F1FA8C;">1</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">                        neighbors.</span><span style="color:#50FA7B;">add</span><span style="color:#F8F8F2;">(row </span><span style="color:#FF79C6;">*</span><span style="color:#F8F8F2;"> nc </span><span style="color:#FF79C6;">+</span><span style="color:#F8F8F2;"> col</span><span style="color:#FF79C6;">-</span><span style="color:#BD93F9;">1</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">                        grid[row][col</span><span style="color:#FF79C6;">-</span><span style="color:#BD93F9;">1</span><span style="color:#F8F8F2;">] </span><span style="color:#FF79C6;">=</span><span style="color:#E9F284;"> &#39;</span><span style="color:#F1FA8C;">0</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">                    }</span></span>
<span class="line"><span style="color:#FF79C6;">                    if</span><span style="color:#F8F8F2;"> (col </span><span style="color:#FF79C6;">+</span><span style="color:#BD93F9;"> 1</span><span style="color:#FF79C6;"> &lt;</span><span style="color:#F8F8F2;"> nc </span><span style="color:#FF79C6;">&amp;&amp;</span><span style="color:#F8F8F2;"> grid[row][col</span><span style="color:#FF79C6;">+</span><span style="color:#BD93F9;">1</span><span style="color:#F8F8F2;">] </span><span style="color:#FF79C6;">==</span><span style="color:#E9F284;"> &#39;</span><span style="color:#F1FA8C;">1</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">                        neighbors.</span><span style="color:#50FA7B;">add</span><span style="color:#F8F8F2;">(row </span><span style="color:#FF79C6;">*</span><span style="color:#F8F8F2;"> nc </span><span style="color:#FF79C6;">+</span><span style="color:#F8F8F2;"> col</span><span style="color:#FF79C6;">+</span><span style="color:#BD93F9;">1</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">                        grid[row][col</span><span style="color:#FF79C6;">+</span><span style="color:#BD93F9;">1</span><span style="color:#F8F8F2;">] </span><span style="color:#FF79C6;">=</span><span style="color:#E9F284;"> &#39;</span><span style="color:#F1FA8C;">0</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">                    }</span></span>
<span class="line"><span style="color:#F8F8F2;">                }</span></span>
<span class="line"><span style="color:#F8F8F2;">            }</span></span>
<span class="line"><span style="color:#F8F8F2;">        }</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span></span>
<span class="line"><span style="color:#FF79C6;">    return</span><span style="color:#F8F8F2;"> num_islands;</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="省份数量" tabindex="-1"><a class="header-anchor" href="#省份数量"><span><a href="https://leetcode.cn/problems/number-of-provinces/description/?envType=problem-list-v2&amp;envId=depth-first-search" target="_blank" rel="noopener noreferrer">省份数量</a></span></a></h1><p>有 n 个城市，其中一些彼此相连，另一些没有相连。如果城市 a 与城市 b 直接相连，且城市 b 与城市 c 直接相连，那么城市 a 与城市 c 间接相连。</p><p>省份 是一组直接或间接相连的城市，组内不含其他没有相连的城市。</p><p>给你一个 n x n 的矩阵 isConnected ，其中 isConnected[i][j] = 1 表示第 i 个城市和第 j 个城市直接相连，而 isConnected[i][j] = 0 表示二者不直接相连。</p><p>返回矩阵中 省份 的数量。</p><figure><img src="`+y+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><div class="language-md line-numbers-mode" data-highlighter="shiki" data-ext="md" data-title="md" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#F8F8F2;">输入：isConnected = [[</span><span style="color:#FF79C6;">1,1,0</span><span style="color:#F8F8F2;">],[</span><span style="color:#FF79C6;">1,1,0</span><span style="color:#F8F8F2;">],[</span><span style="color:#FF79C6;">0,0,1</span><span style="color:#F8F8F2;">]]</span></span>
<span class="line"><span style="color:#F8F8F2;">输出：2</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+d+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><div class="language-md line-numbers-mode" data-highlighter="shiki" data-ext="md" data-title="md" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#F8F8F2;">输入：isConnected = [[</span><span style="color:#FF79C6;">1,0,0</span><span style="color:#F8F8F2;">],[</span><span style="color:#FF79C6;">0,1,0</span><span style="color:#F8F8F2;">],[</span><span style="color:#FF79C6;">0,0,1</span><span style="color:#F8F8F2;">]]</span></span>
<span class="line"><span style="color:#F8F8F2;">输出：3</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-ts line-numbers-mode" data-highlighter="shiki" data-ext="ts" data-title="ts" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#6272A4;">// DPS</span></span>
<span class="line"><span style="color:#6272A4;">// https://leetcode.cn/problems/number-of-provinces/solutions/549895/sheng-fen-shu-liang-by-leetcode-solution-eyk0/</span></span>
<span class="line"><span style="color:#FF79C6;">function</span><span style="color:#50FA7B;"> findCircleNum</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">isConnected</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> number</span><span style="color:#F8F8F2;">[][])</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> number</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#FF79C6;">    const</span><span style="color:#F8F8F2;"> cities </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> isConnected.length;</span></span>
<span class="line"><span style="color:#FF79C6;">    const</span><span style="color:#F8F8F2;"> visited </span><span style="color:#FF79C6;">=</span><span style="color:#FF79C6;font-weight:bold;"> new</span><span style="color:#50FA7B;"> Set</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#8BE9FD;font-style:italic;">number</span><span style="color:#F8F8F2;">&gt;();</span></span>
<span class="line"><span style="color:#FF79C6;">    let</span><span style="color:#F8F8F2;"> provinces </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> 0</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#FF79C6;">    for</span><span style="color:#F8F8F2;"> (</span><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> i </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> 0</span><span style="color:#F8F8F2;">; i </span><span style="color:#FF79C6;">&lt;</span><span style="color:#F8F8F2;"> cities; i</span><span style="color:#FF79C6;">++</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#FF79C6;">        if</span><span style="color:#F8F8F2;"> (</span><span style="color:#FF79C6;">!</span><span style="color:#F8F8F2;">visited.</span><span style="color:#50FA7B;">has</span><span style="color:#F8F8F2;">(i)) {</span></span>
<span class="line"><span style="color:#50FA7B;">            dfs</span><span style="color:#F8F8F2;">(isConnected, visited, cities, i);</span></span>
<span class="line"><span style="color:#F8F8F2;">            provinces</span><span style="color:#FF79C6;">++</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">        }</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#FF79C6;">    return</span><span style="color:#F8F8F2;"> provinces;</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">const</span><span style="color:#50FA7B;"> dfs</span><span style="color:#FF79C6;"> =</span><span style="color:#F8F8F2;"> (</span><span style="color:#FFB86C;font-style:italic;">isConnected</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> number</span><span style="color:#F8F8F2;">[][], </span><span style="color:#FFB86C;font-style:italic;">visited</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> Set</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#8BE9FD;font-style:italic;">number</span><span style="color:#F8F8F2;">&gt;, </span><span style="color:#FFB86C;font-style:italic;">cities</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> number</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">i</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> number</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#FF79C6;">    for</span><span style="color:#F8F8F2;"> (</span><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> j </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> 0</span><span style="color:#F8F8F2;">; j </span><span style="color:#FF79C6;">&lt;</span><span style="color:#F8F8F2;"> cities; j</span><span style="color:#FF79C6;">++</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#FF79C6;">        if</span><span style="color:#F8F8F2;"> (isConnected[i][j] </span><span style="color:#FF79C6;">==</span><span style="color:#BD93F9;"> 1</span><span style="color:#FF79C6;"> &amp;&amp;</span><span style="color:#FF79C6;"> !</span><span style="color:#F8F8F2;">visited.</span><span style="color:#50FA7B;">has</span><span style="color:#F8F8F2;">(j)) {</span></span>
<span class="line"><span style="color:#F8F8F2;">            visited.</span><span style="color:#50FA7B;">add</span><span style="color:#F8F8F2;">(j);</span></span>
<span class="line"><span style="color:#50FA7B;">            dfs</span><span style="color:#F8F8F2;">(isConnected, visited, cities, j);</span></span>
<span class="line"><span style="color:#F8F8F2;">        }</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">// BPS</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">function</span><span style="color:#50FA7B;"> findCircleNum</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">isConnected</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> number</span><span style="color:#F8F8F2;">[][])</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> number</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#FF79C6;">    const</span><span style="color:#F8F8F2;"> cities </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> isConnected.length;</span></span>
<span class="line"><span style="color:#FF79C6;">    const</span><span style="color:#F8F8F2;"> visited </span><span style="color:#FF79C6;">=</span><span style="color:#FF79C6;font-weight:bold;"> new</span><span style="color:#50FA7B;"> Set</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#8BE9FD;font-style:italic;">number</span><span style="color:#F8F8F2;">&gt;();</span></span>
<span class="line"><span style="color:#FF79C6;">    let</span><span style="color:#F8F8F2;"> provinces </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> 0</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#FF79C6;">    const</span><span style="color:#F8F8F2;"> queue </span><span style="color:#FF79C6;">=</span><span style="color:#FF79C6;font-weight:bold;"> new</span><span style="color:#50FA7B;"> Array</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#8BE9FD;font-style:italic;">number</span><span style="color:#F8F8F2;">&gt;();</span></span>
<span class="line"><span style="color:#FF79C6;">    for</span><span style="color:#F8F8F2;"> (</span><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> i </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> 0</span><span style="color:#F8F8F2;">; i </span><span style="color:#FF79C6;">&lt;</span><span style="color:#F8F8F2;"> cities; i</span><span style="color:#FF79C6;">++</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#FF79C6;">        if</span><span style="color:#F8F8F2;"> (</span><span style="color:#FF79C6;">!</span><span style="color:#F8F8F2;">visited.</span><span style="color:#50FA7B;">has</span><span style="color:#F8F8F2;">(i)) {</span></span>
<span class="line"><span style="color:#F8F8F2;">            queue.</span><span style="color:#50FA7B;">push</span><span style="color:#F8F8F2;">(i);</span></span>
<span class="line"><span style="color:#FF79C6;">            while</span><span style="color:#F8F8F2;"> (queue.length) {</span></span>
<span class="line"><span style="color:#FF79C6;">                const</span><span style="color:#F8F8F2;"> j </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> queue.</span><span style="color:#50FA7B;">shift</span><span style="color:#F8F8F2;">()</span><span style="color:#FF79C6;">!</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">                visited.</span><span style="color:#50FA7B;">add</span><span style="color:#F8F8F2;">(j);</span></span>
<span class="line"><span style="color:#FF79C6;">                for</span><span style="color:#F8F8F2;"> (</span><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> k </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> 0</span><span style="color:#F8F8F2;">; k </span><span style="color:#FF79C6;">&lt;</span><span style="color:#F8F8F2;"> cities; k</span><span style="color:#FF79C6;">++</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#FF79C6;">                    if</span><span style="color:#F8F8F2;"> (isConnected[j][k] </span><span style="color:#FF79C6;">===</span><span style="color:#BD93F9;"> 1</span><span style="color:#FF79C6;"> &amp;&amp;</span><span style="color:#FF79C6;"> !</span><span style="color:#F8F8F2;">visited.</span><span style="color:#50FA7B;">has</span><span style="color:#F8F8F2;">(k)) {</span></span>
<span class="line"><span style="color:#F8F8F2;">                        queue.</span><span style="color:#50FA7B;">push</span><span style="color:#F8F8F2;">(k);</span></span>
<span class="line"><span style="color:#F8F8F2;">                    }</span></span>
<span class="line"><span style="color:#F8F8F2;">                }</span></span>
<span class="line"><span style="color:#F8F8F2;">            }</span></span>
<span class="line"><span style="color:#F8F8F2;">            provinces</span><span style="color:#FF79C6;">++</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">        }</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#FF79C6;">    return</span><span style="color:#F8F8F2;"> provinces;</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="参考" tabindex="-1"><a class="header-anchor" href="#参考"><span>参考</span></a></h1><ul><li><a href="https://www.51cto.com/article/614590.html" target="_blank" rel="noopener noreferrer">图文详解两种算法：深度优先遍历（DFS）和广度优先遍历（BFS）</a></li></ul>`,40)]))}const b=n(u,[["render",v],["__file","preferential-traversal.html.vue"]]),g=JSON.parse('{"path":"/algorithm/preferential-traversal.html","title":"优先遍历搜索","lang":"en-US","frontmatter":{"title":"优先遍历搜索","date":"2022-09-25T00:00:00.000Z","category":["算法"],"tag":["算法图解"],"description":"深度优先遍历(Depth First Search, 简称 DFS) 与广度优先遍历(Breath First Search)是图论中两种非常重要的算法，生产上广泛用于拓扑排序，寻路(走迷宫)，搜索引擎，爬虫等 深度优先遍历 主要思路是从图中一个未访问的顶点 V 开始，沿着一条路一直走到底，然后从这条路尽头的节点回退到上一个节点，再从另一条路开始走到底...","head":[["meta",{"property":"og:url","content":"https://luxiag.github.io/luxiag/blog/algorithm/preferential-traversal.html"}],["meta",{"property":"og:title","content":"优先遍历搜索"}],["meta",{"property":"og:description","content":"深度优先遍历(Depth First Search, 简称 DFS) 与广度优先遍历(Breath First Search)是图论中两种非常重要的算法，生产上广泛用于拓扑排序，寻路(走迷宫)，搜索引擎，爬虫等 深度优先遍历 主要思路是从图中一个未访问的顶点 V 开始，沿着一条路一直走到底，然后从这条路尽头的节点回退到上一个节点，再从另一条路开始走到底..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2025-02-09T14:06:21.000Z"}],["meta",{"property":"article:tag","content":"算法图解"}],["meta",{"property":"article:published_time","content":"2022-09-25T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-02-09T14:06:21.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"优先遍历搜索\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-09-25T00:00:00.000Z\\",\\"dateModified\\":\\"2025-02-09T14:06:21.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"luxiag\\",\\"url\\":\\"https://luxiag.github.io/luxiag\\"}]}"]]},"git":{"createdTime":1663833246000,"updatedTime":1739109981000,"contributors":[{"name":"卢祥","username":"卢祥","email":"example@gmail.com","commits":3,"url":"https://github.com/卢祥"},{"name":"luxiang","username":"luxiang","email":"luxiag@qq.com","commits":3,"url":"https://github.com/luxiang"},{"name":"卢祥","username":"卢祥","email":"example@qq.com","commits":4,"url":"https://github.com/卢祥"},{"name":"luxiag","username":"luxiag","email":"luxiag@qq.com","commits":3,"url":"https://github.com/luxiag"}]},"readingTime":{"minutes":4.84,"words":1451},"filePathRelative":"algorithm/preferential-traversal.md","localizedDate":"September 25, 2022","excerpt":"<p>深度优先遍历(Depth First Search, 简称 DFS) 与广度优先遍历(Breath First Search)是图论中两种非常重要的算法，生产上广泛用于拓扑排序，寻路(走迷宫)，搜索引擎，爬虫等</p>","autoDesc":true}');export{b as comp,g as data};
