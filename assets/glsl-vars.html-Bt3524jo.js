import{_ as a,c as e,b as l,g as n,o}from"./app-CbWMe_xu.js";const p={};function i(c,s){return o(),e("div",null,[s[0]||(s[0]=l(`<h2 id="基本数据类型变量" tabindex="-1"><a class="header-anchor" href="#基本数据类型变量"><span>基本数据类型变量</span></a></h2><ol><li><p><code>float</code></p><ul><li><p>数据类型：单精度浮点数，占用 32 位（4 字节）内存。</p></li><li><p>取值范围：约为 -3.4 × 10^38 到 3.4 × 10^38，可以表示的有效数字位数为 6~7 位左右。</p></li><li><p>示例：</p><div class="language-glsl line-numbers-mode" data-highlighter="shiki" data-ext="glsl" data-title="glsl" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">float</span><span style="color:#F8F8F2;"> radius </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> 1.0</span><span style="color:#F8F8F2;">;</span><span style="color:#6272A4;"> // 声明一个单精度浮点型变量 radius</span></span>
<span class="line"><span style="color:#FF79C6;">float</span><span style="color:#F8F8F2;"> pi </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> 3.14159</span><span style="color:#F8F8F2;">;</span><span style="color:#6272A4;"> // 声明一个单精度浮点型变量 pi</span></span>
<span class="line"><span style="color:#FF79C6;">float</span><span style="color:#F8F8F2;"> volume </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> 4.0</span><span style="color:#FF79C6;"> /</span><span style="color:#BD93F9;"> 3.0</span><span style="color:#FF79C6;"> *</span><span style="color:#F8F8F2;"> pi </span><span style="color:#FF79C6;">*</span><span style="color:#8BE9FD;"> pow</span><span style="color:#F8F8F2;">(radius, </span><span style="color:#BD93F9;">3.0</span><span style="color:#F8F8F2;">);</span><span style="color:#6272A4;"> // 计算球体的体积</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p><code>int</code></p><ul><li><p>数据类型：整型变量，占用 32 位（4 字节）内存。</p></li><li><p>取值范围：约为 -2.1 × 10^9 到 2.1 × 10^9。</p></li><li><p>示例：</p><div class="language-glsl line-numbers-mode" data-highlighter="shiki" data-ext="glsl" data-title="glsl" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">int</span><span style="color:#F8F8F2;"> width </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> 800</span><span style="color:#F8F8F2;">;</span><span style="color:#6272A4;"> // 声明一个整型变量 width，表示画布的宽度</span></span>
<span class="line"><span style="color:#FF79C6;">int</span><span style="color:#F8F8F2;"> height </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> 600</span><span style="color:#F8F8F2;">;</span><span style="color:#6272A4;"> // 声明一个整型变量 height，表示画布的高度</span></span>
<span class="line"><span style="color:#FF79C6;">int</span><span style="color:#F8F8F2;"> area </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> width </span><span style="color:#FF79C6;">*</span><span style="color:#F8F8F2;"> height;</span><span style="color:#6272A4;"> // 计算画布的面积</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p><code>bool</code></p><ul><li><p>数据类型：布尔型变量，只有 true 和 false 两个值，占用 8 位（1 字节）内存。</p></li><li><p>示例：</p><div class="language-glsl line-numbers-mode" data-highlighter="shiki" data-ext="glsl" data-title="glsl" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">bool</span><span style="color:#F8F8F2;"> isBlack </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> true</span><span style="color:#F8F8F2;">;</span><span style="color:#6272A4;"> // 声明一个布尔型变量 isBlack，表示颜色是否为黑色</span></span>
<span class="line"><span style="color:#FF79C6;">bool</span><span style="color:#F8F8F2;"> isWhite </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> false</span><span style="color:#F8F8F2;">;</span><span style="color:#6272A4;"> // 声明一个布尔型变量 isWhite，表示颜色是否为白色</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p><code>double</code></p><ul><li><p>数据类型：双精度浮点数，占用 64 位（8 字节）内存。</p></li><li><p>取值范围：约为 -1.7 × 10^308 到 1.7 × 10^308，可以表示的有效数字位数为 15~16 位左右。</p></li><li><p>示例：</p><div class="language-glsl line-numbers-mode" data-highlighter="shiki" data-ext="glsl" data-title="glsl" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF5555;font-style:italic;text-decoration:underline;">double</span><span style="color:#F8F8F2;"> radius </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> 1.0</span><span style="color:#F8F8F2;">;</span><span style="color:#6272A4;"> // 声明一个双精度浮点型变量 radius</span></span>
<span class="line"><span style="color:#FF5555;font-style:italic;text-decoration:underline;">double</span><span style="color:#F8F8F2;"> pi </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> 3.14159265358979</span><span style="color:#F8F8F2;">;</span><span style="color:#6272A4;"> // 声明一个双精度浮点型变量 pi</span></span>
<span class="line"><span style="color:#FF5555;font-style:italic;text-decoration:underline;">double</span><span style="color:#F8F8F2;"> volume </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> 4.0</span><span style="color:#FF79C6;"> /</span><span style="color:#BD93F9;"> 3.0</span><span style="color:#FF79C6;"> *</span><span style="color:#F8F8F2;"> pi </span><span style="color:#FF79C6;">*</span><span style="color:#8BE9FD;"> pow</span><span style="color:#F8F8F2;">(radius, </span><span style="color:#BD93F9;">3.0</span><span style="color:#F8F8F2;">);</span><span style="color:#6272A4;"> // 计算球体的体积</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p><code>uint</code></p><ul><li><p>数据类型：无符号整型变量，占用 32 位（4 字节）内存。</p></li><li><p>取值范围：约为 0 到 4.2 × 10^9。</p></li><li><p>示例：</p><div class="language-glsl line-numbers-mode" data-highlighter="shiki" data-ext="glsl" data-title="glsl" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">uint</span><span style="color:#F8F8F2;"> num1 </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> 123</span><span style="color:#F8F8F2;">;</span><span style="color:#6272A4;"> // 声明一个无符号整型变量 num1</span></span>
<span class="line"><span style="color:#FF79C6;">uint</span><span style="color:#F8F8F2;"> num2 </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> 456</span><span style="color:#F8F8F2;">;</span><span style="color:#6272A4;"> // 声明一个无符号整型变量 num2</span></span>
<span class="line"><span style="color:#FF79C6;">uint</span><span style="color:#F8F8F2;"> sum </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> num1 </span><span style="color:#FF79C6;">+</span><span style="color:#F8F8F2;"> num2;</span><span style="color:#6272A4;"> // 计算 num1 和 num2 的和</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li></ol>`,2)),n(` | 类型  | 含义                              |
| ----- | --------------------------------- |
| vecn  | 包含 n 个 float 分量的默认向量    |
| bvecn | 包含 n 个 bool 分量的向量         |
| ivecn | 包含 n 个 int 分量的向量          |
| uvecn | 包含 n 个 unsigned int 分量的向量 |
| dvecn | 包含 n 个 double 分量的向量       | `),n(` | 变量类别   | 变量类型                  | 描述                               |
| ---------- | ------------------------- | ---------------------------------- |
| 空         | void                      | 用于无返回值的函数或空的参数列表   |
| 标量       | float, int, bool          | 浮点型，整型，布尔型的标量数据类型 |
| 浮点型向量 | float, vec2, vec3, vec4   | 包含 1，2，3，4 个元素的浮点型向量 |
| 整数型向量 | int, ivec2, ivec3, ivec4  | 包含 1，2，3，4 个元素的整型向量   |
| 布尔型向量 | bool, bvec2, bvec3, bvec4 | 包含 1，2，3，4 个元素的布尔型向量 |
| 矩阵       | mat2, mat3, mat4          | 尺寸为 2x2，3x3，4x4 的浮点型矩阵  |
| 纹理句柄   | sampler2D, samplerCube    | 表示 2D，立方体纹理的句柄          | `),s[1]||(s[1]=l(`<h2 id="向量类型变量" tabindex="-1"><a class="header-anchor" href="#向量类型变量"><span>向量类型变量</span></a></h2><ol><li><p><code>vec2</code></p><ul><li><p>定义格式：<code>vec2(x, y)</code> 或 <code>vec2(v)</code></p></li><li><p>功能：表示二维向量，其中的 <code>x</code> 和 <code>y</code> 分别表示向量在 x 轴和 y 轴方向的分量。</p></li><li><p>参数说明：</p><ul><li><code>x</code>, <code>y</code>：表示向量在 x 轴和 y 轴方向的分量，可以是标量、浮点数或整数；</li><li><code>v</code>：表示长度为 2 的浮点型向量。</li></ul></li><li><p>示例：</p><div class="language-glsl line-numbers-mode" data-highlighter="shiki" data-ext="glsl" data-title="glsl" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#6272A4;">/* 定义一个二维坐标点。 */</span></span>
<span class="line"><span style="color:#FF79C6;">vec2</span><span style="color:#F8F8F2;"> point </span><span style="color:#FF79C6;">=</span><span style="color:#FF79C6;"> vec2</span><span style="color:#F8F8F2;">(</span><span style="color:#BD93F9;">1.0</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">2.0</span><span style="color:#F8F8F2;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p><code>vec3</code></p><ul><li><p>定义格式：<code>vec3(x, y, z)</code> 或 <code>vec3(v, z)</code></p></li><li><p>功能：表示三维向量，其中的 <code>x</code>、<code>y</code> 和 <code>z</code> 分别表示向量在 x 轴、y 轴和 z 轴方向的分量。</p></li><li><p>参数说明：</p><ul><li><code>x</code>, <code>y</code>, <code>z</code>：表示向量在 x 轴、y 轴和 z 轴方向的分量，可以是标量、浮点数或整数；</li><li><code>v</code>：表示长度为 2 或 3 的浮点型向量；</li><li><code>z</code>：表示向量在 z 轴方向的分量，可以是标量、浮点数或整数。</li></ul></li><li><p>示例：</p><div class="language-glsl line-numbers-mode" data-highlighter="shiki" data-ext="glsl" data-title="glsl" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#6272A4;">/* 定义一个颜色。 */</span></span>
<span class="line"><span style="color:#FF79C6;">vec3</span><span style="color:#F8F8F2;"> color </span><span style="color:#FF79C6;">=</span><span style="color:#FF79C6;"> vec3</span><span style="color:#F8F8F2;">(</span><span style="color:#BD93F9;">1.0</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">0.0</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">0.0</span><span style="color:#F8F8F2;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p><code>vec4</code></p><ul><li><p>定义格式：<code>vec4(x, y, z, w)</code> 或 <code>vec4(v, z, w)</code> 或 <code>vec4(v, w)</code></p></li><li><p>功能：表示四维向量，其中的 <code>x</code>、<code>y</code>、<code>z</code> 和 <code>w</code> 分别表示向量在 x 轴、y 轴、z 轴和 w 轴方向的分量。</p></li><li><p>参数说明：</p><ul><li><code>x</code>, <code>y</code>, <code>z</code>, <code>w</code>：表示向量在 x 轴、y 轴、z 轴和 w 轴方向的分量，可以是标量、浮点数或整数；</li><li><code>v</code>：表示长度为 2、3 或 4 的浮点型向量；</li><li><code>z</code>, <code>w</code>：表示向量在 z 轴和 w 轴方向的分量，可以是标量、浮点数或整数。</li></ul></li><li><p>示例：</p><div class="language-glsl line-numbers-mode" data-highlighter="shiki" data-ext="glsl" data-title="glsl" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#6272A4;">/* 定义一个四维坐标点。 */</span></span>
<span class="line"><span style="color:#FF79C6;">vec4</span><span style="color:#F8F8F2;"> point </span><span style="color:#FF79C6;">=</span><span style="color:#FF79C6;"> vec4</span><span style="color:#F8F8F2;">(</span><span style="color:#BD93F9;">1.0</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">2.0</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">3.0</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">1.0</span><span style="color:#F8F8F2;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p><code>bvec2、bvec3、bvec4</code></p><ul><li><p>定义格式：<code>bvec2(x, y)</code>、<code>bvec3(x, y, z)</code> 或 <code>bvec4(x, y, z, w)</code></p></li><li><p>功能：表示布尔类型的向量，其中的 <code>x</code>、<code>y</code>、<code>z</code> 和 <code>w</code> 分别表示向量在不同维度上的布尔值。</p></li><li><p>参数说明：</p><ul><li><code>x</code>, <code>y</code>, <code>z</code>, <code>w</code>：表示向量在不同维度上的布尔值。</li></ul></li><li><p>示例：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span>/* 定义一个布尔向量。 */</span></span>
<span class="line"><span>bvec3 testVec = bvec3(true, false, true);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p><code>ivec2、ivec3、ivec4</code></p><ul><li><p>定义格式：<code>ivec2(x, y)</code>、<code>ivec3(x, y, z)</code> 或 <code>ivec4(x, y, z, w)</code></p></li><li><p>功能：表示整型向量，其中的 <code>x</code>、<code>y</code>、<code>z</code> 和 <code>w</code> 分别表示向量在 x 轴、y 轴、z 轴和 w 轴方向的分量。</p></li><li><p>参数说明：</p><ul><li><code>x</code>, <code>y</code>, <code>z</code>, <code>w</code>：表示向量在不同维度上的整数分量。</li></ul></li><li><p>示例：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span>/* 定义一个整型向量。 */</span></span>
<span class="line"><span>ivec3 pos = ivec3(1, 2, 3);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p><code>uvec2、uvec3、uvec4</code></p><ul><li><p>定义格式：<code>uvec2(x, y)</code>、<code>uvec3(x, y, z)</code> 或 <code>uvec4(x, y, z, w)</code></p></li><li><p>功能：表示无符号整型向量，其中的 <code>x</code>、<code>y</code>、<code>z</code> 和 <code>w</code> 分别表示向量在 x 轴、y 轴、z 轴和 w 轴方向的分量。</p></li><li><p>参数说明：</p><ul><li><code>x</code>, <code>y</code>, <code>z</code>, <code>w</code>：表示向量在不同维度上的无符号整数分量。</li></ul></li><li><p>示例：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span>/* 定义一个无符号整型向量。 */</span></span>
<span class="line"><span>uvec4 indices = uvec4(0, 1, 2, 3);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p><code>dvec2、dvec3、dvec4</code></p><ul><li><p>定义格式：<code>dvec2(x, y)</code>、<code>dvec3(x, y, z)</code> 或 <code>dvec4(x, y, z, w)</code></p></li><li><p>功能：表示双精度浮点型向量，其中的 <code>x</code>、<code>y</code>、<code>z</code> 和 <code>w</code> 分别表示向量在 x 轴、y 轴、z 轴和 w 轴方向的分量。</p></li><li><p>参数说明：</p><ul><li><code>x</code>, <code>y</code>, <code>z</code>, <code>w</code>：表示向量在不同维度上的双精度浮点数分量。</li></ul></li><li><p>示例：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span>/* 定义一个双精度浮点型向量。 */</span></span>
<span class="line"><span>dvec2 pos = dvec2(1.0, 2.0);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li></ol><h2 id="数组类型变量" tabindex="-1"><a class="header-anchor" href="#数组类型变量"><span>数组类型变量</span></a></h2><ol><li>GLSL 中的数组变量可以用来存储一组相同类型的变量。数组的长度需要在定义时指定，且长度必须是一个常量表达式，也就是在编译时就可以确定的值。 例如，定义一个长度为 5 的 float 数组：</li></ol><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span>float array[5];</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ol start="2"><li>可以使用下标运算符（<code>[]</code>）来访问数组中的元素，从 0 开始索引。例如，访问数组 <code>array</code> 中的第三个元素：</li></ol><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span>float value = array[2];</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ol start="3"><li>GLSL 中的数组也支持循环遍历，可以使用 for 循环来遍历数组中的每一个元素。例如，遍历数组 <code>array</code> 中的所有元素并将它们相加：</li></ol><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span>float sum = 0.0;</span></span>
<span class="line"><span>for (int i = 0; i &lt; 5; i++) {</span></span>
<span class="line"><span>    sum += array[i];</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="4"><li>在 GLSL 中，还可以使用数组作为函数的参数，从而方便地将一组数据传递给函数进行处理。例如，定义一个函数 <code>average</code>，求平均值并返回：</li></ol><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span>float average(float values[], int length) {</span></span>
<span class="line"><span>    float sum = 0.0;</span></span>
<span class="line"><span>    for (int i = 0; i &lt; length; i++) {</span></span>
<span class="line"><span>        sum += values[i];</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>    return sum / float(length);</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="5"><li>如果数组变量在着色器中不需要修改，可以将其声明为 <code>const</code> 类型。这样做可以提高代码的可读性和可维护性，因为这样声明后，代码中只有对数组的读取访问，而不会有对数组的写入行为。例如，定义一个常量数组 <code>colors</code>：</li></ol><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span>const vec4 colors[3] = vec4[](vec4(1.0, 0.0, 0.0, 1.0),</span></span>
<span class="line"><span>                               vec4(0.0, 1.0, 0.0, 1.0),</span></span>
<span class="line"><span>                               vec4(0.0, 0.0, 1.0, 1.0));</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="矩阵类型变量" tabindex="-1"><a class="header-anchor" href="#矩阵类型变量"><span>矩阵类型变量</span></a></h2><ol><li><p><code>mat2</code></p><ul><li><p>定义格式：<code>mat2(m00, m01, m10, m11)</code></p></li><li><p>功能：定义一个 2x2 的矩阵，用给定的数值填充矩阵。</p></li><li><p>参数说明：</p><ul><li><code>m00</code>：矩阵中第一行第一列的值。</li><li><code>m01</code>：矩阵中第一行第二列的值。</li><li><code>m10</code>：矩阵中第二行第一列的值。</li><li><code>m11</code>：矩阵中第二行第二列的值。</li></ul></li><li><p>示例：</p><div class="language-glsl line-numbers-mode" data-highlighter="shiki" data-ext="glsl" data-title="glsl" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#6272A4;">/* 使用 mat2 定义一个 2x2 的旋转矩阵。 */</span></span>
<span class="line"><span style="color:#FF79C6;">float</span><span style="color:#F8F8F2;"> angle </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> 90.0</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#FF79C6;">mat2</span><span style="color:#F8F8F2;"> rotationMatrix </span><span style="color:#FF79C6;">=</span><span style="color:#FF79C6;"> mat2</span><span style="color:#F8F8F2;">(</span><span style="color:#50FA7B;">cos</span><span style="color:#F8F8F2;">(angle), </span><span style="color:#FF79C6;">-</span><span style="color:#50FA7B;">sin</span><span style="color:#F8F8F2;">(angle),</span></span>
<span class="line"><span style="color:#50FA7B;">                           sin</span><span style="color:#F8F8F2;">(angle), </span><span style="color:#50FA7B;">cos</span><span style="color:#F8F8F2;">(angle));</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p><code>mat3</code></p><ul><li><p>定义格式：<code>mat3(m00, m01, m02, m10, m11, m12, m20, m21, m22)</code></p></li><li><p>功能：定义一个 3x3 的矩阵，用给定的数值填充矩阵。</p></li><li><p>参数说明：</p><ul><li><code>m00</code>：矩阵中第一行第一列的值。</li><li><code>m01</code>：矩阵中第一行第二列的值。</li><li><code>m02</code>：矩阵中第一行第三列的值。</li><li><code>m10</code>：矩阵中第二行第一列的值。</li><li><code>m11</code>：矩阵中第二行第二列的值。</li><li><code>m12</code>：矩阵中第二行第三列的值。</li><li><code>m20</code>：矩阵中第三行第一列的值。</li><li><code>m21</code>：矩阵中第三行第二列的值。</li><li><code>m22</code>：矩阵中第三行第三列的值。</li></ul></li><li><p>示例：</p><div class="language-glsl line-numbers-mode" data-highlighter="shiki" data-ext="glsl" data-title="glsl" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#6272A4;">/* 使用 mat3 定义一个 3x3 的缩放矩阵。 */</span></span>
<span class="line"><span style="color:#FF79C6;">float</span><span style="color:#F8F8F2;"> scaleX </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> 2.0</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#FF79C6;">float</span><span style="color:#F8F8F2;"> scaleY </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> 3.0</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#FF79C6;">mat3</span><span style="color:#F8F8F2;"> scaleMatrix </span><span style="color:#FF79C6;">=</span><span style="color:#FF79C6;"> mat3</span><span style="color:#F8F8F2;">(scaleX,  </span><span style="color:#BD93F9;">0.0</span><span style="color:#F8F8F2;">,     </span><span style="color:#BD93F9;">0.0</span><span style="color:#F8F8F2;">, </span></span>
<span class="line"><span style="color:#BD93F9;">                        0.0</span><span style="color:#F8F8F2;">,     scaleY,  </span><span style="color:#BD93F9;">0.0</span><span style="color:#F8F8F2;">, </span></span>
<span class="line"><span style="color:#BD93F9;">                        0.0</span><span style="color:#F8F8F2;">,     </span><span style="color:#BD93F9;">0.0</span><span style="color:#F8F8F2;">,     </span><span style="color:#BD93F9;">1.0</span><span style="color:#F8F8F2;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p><code>mat4</code></p><ul><li><p>定义格式：<code>mat4(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33)</code></p></li><li><p>功能：定义一个 4x4 的矩阵，用给定的数值填充矩阵。</p></li><li><p>参数说明：</p><ul><li><code>m00</code>：矩阵中第一行第一列的值。</li><li><code>m01</code>：矩阵中第一行第二列的值。</li><li><code>m02</code>：矩阵中第一行第三列的值。</li><li><code>m03</code>：矩阵中第一行第四列的值。</li><li><code>m10</code>：矩阵中第二行第一列的值。</li><li><code>m11</code>：矩阵中第二行第二列的值。</li><li><code>m12</code>：矩阵中第二行第三列的值。</li><li><code>m13</code>：矩阵中第二行第四列的值。</li><li><code>m20</code>：矩阵中第三行第一列的值。</li><li><code>m21</code>：矩阵中第三行第二列的值。</li><li><code>m22</code>：矩阵中第三行第三列的值。</li><li><code>m23</code>：矩阵中第三行第四列的值。</li><li><code>m30</code>：矩阵中第四行第一列的值。</li><li><code>m31</code>：矩阵中第四行第二列的值。</li><li><code>m32</code>：矩阵中第四行第三列的值。</li><li><code>m33</code>：矩阵中第四行第四列的值。</li></ul></li><li><p>示例：</p><div class="language-glsl line-numbers-mode" data-highlighter="shiki" data-ext="glsl" data-title="glsl" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#6272A4;">/* 使用 mat4 定义一个 4x4 的透视投影矩阵。 */</span></span>
<span class="line"><span style="color:#FF79C6;">float</span><span style="color:#F8F8F2;"> fovy </span><span style="color:#FF79C6;">=</span><span style="color:#8BE9FD;"> radians</span><span style="color:#F8F8F2;">(</span><span style="color:#BD93F9;">45.0</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#FF79C6;">float</span><span style="color:#F8F8F2;"> aspect </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> 1.0</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#FF79C6;">float</span><span style="color:#F8F8F2;"> near </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> 0.1</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#FF79C6;">float</span><span style="color:#F8F8F2;"> far </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> 100.0</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#FF79C6;">mat4</span><span style="color:#F8F8F2;"> perspectiveMatrix </span><span style="color:#FF79C6;">=</span><span style="color:#FF79C6;"> mat4</span><span style="color:#F8F8F2;">(</span><span style="color:#BD93F9;">1.0</span><span style="color:#FF79C6;"> /</span><span style="color:#F8F8F2;"> (aspect </span><span style="color:#FF79C6;">*</span><span style="color:#50FA7B;"> tan</span><span style="color:#F8F8F2;">(fovy</span><span style="color:#FF79C6;">/</span><span style="color:#BD93F9;">2</span><span style="color:#F8F8F2;">)), </span><span style="color:#BD93F9;">0.0</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">0.0</span><span style="color:#F8F8F2;">,                           </span><span style="color:#BD93F9;">0.0</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#BD93F9;">                              0.0</span><span style="color:#F8F8F2;">,                        </span><span style="color:#BD93F9;">1.0</span><span style="color:#FF79C6;"> /</span><span style="color:#50FA7B;"> tan</span><span style="color:#F8F8F2;">(fovy</span><span style="color:#FF79C6;">/</span><span style="color:#BD93F9;">2</span><span style="color:#F8F8F2;">), </span><span style="color:#BD93F9;">0.0</span><span style="color:#F8F8F2;">,          </span><span style="color:#BD93F9;">0.0</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#BD93F9;">                              0.0</span><span style="color:#F8F8F2;">,                        </span><span style="color:#BD93F9;">0.0</span><span style="color:#F8F8F2;">, (</span><span style="color:#FF79C6;">-</span><span style="color:#F8F8F2;">near </span><span style="color:#FF79C6;">-</span><span style="color:#F8F8F2;"> far) </span><span style="color:#FF79C6;">/</span><span style="color:#F8F8F2;"> (near </span><span style="color:#FF79C6;">-</span><span style="color:#F8F8F2;"> far), </span><span style="color:#FF79C6;">-</span><span style="color:#BD93F9;">1.0</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#BD93F9;">                              0.0</span><span style="color:#F8F8F2;">,                        </span><span style="color:#BD93F9;">0.0</span><span style="color:#F8F8F2;">, (</span><span style="color:#BD93F9;">2.0</span><span style="color:#FF79C6;"> *</span><span style="color:#F8F8F2;"> near </span><span style="color:#FF79C6;">*</span><span style="color:#F8F8F2;"> far) </span><span style="color:#FF79C6;">/</span><span style="color:#F8F8F2;"> (near </span><span style="color:#FF79C6;">-</span><span style="color:#F8F8F2;"> far), </span><span style="color:#BD93F9;">0.0</span><span style="color:#F8F8F2;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p><code>mat2x3</code>、<code>mat2x4</code>、<code>mat3x2</code>、<code>mat3x4</code>、<code>mat4x2</code>、<code>mat4x3</code></p><ul><li><p>定义格式：类似 <code>mat2</code>、<code>mat3</code>、<code>mat4</code>，只是中间的 <code>x</code> 后面跟着的数字代表矩阵的列数。</p></li><li><p>功能：定义不同维度的矩阵类型。</p></li><li><p>示例：</p><div class="language-glsl line-numbers-mode" data-highlighter="shiki" data-ext="glsl" data-title="glsl" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#6272A4;">/* 使用 mat3x2 定义一个 3x2 的矩阵。 */</span></span>
<span class="line"><span style="color:#FF79C6;">mat3x2</span><span style="color:#F8F8F2;"> matrix </span><span style="color:#FF79C6;">=</span><span style="color:#FF79C6;"> mat3x2</span><span style="color:#F8F8F2;">(</span><span style="color:#BD93F9;">1.0</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">0.0</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#BD93F9;">                       0.0</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">1.0</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#BD93F9;">                       0.0</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">0.0</span><span style="color:#F8F8F2;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li></ol><h2 id="结构体类型变量" tabindex="-1"><a class="header-anchor" href="#结构体类型变量"><span>结构体类型变量</span></a></h2><ol><li><code>struct</code></li></ol><ul><li><p>使用格式：<code>struct &lt;结构体名&gt; { &lt;成员列表&gt; };</code></p></li><li><p>功能：定义一个结构体类型。</p></li><li><p>参数说明：</p><ul><li><code>&lt;结构体名&gt;</code>：结构体类型的名称。</li><li><code>&lt;成员列表&gt;</code>：结构体类型中成员的定义。</li></ul></li><li><p>示例：</p><div class="language-glsl line-numbers-mode" data-highlighter="shiki" data-ext="glsl" data-title="glsl" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#6272A4;">/* 定义一个点的结构体类型。 */</span></span>
<span class="line"><span style="color:#FF79C6;">struct</span><span style="color:#F8F8F2;"> Point {</span></span>
<span class="line"><span style="color:#F8F8F2;">  vec3 position;</span></span>
<span class="line"><span style="color:#F8F8F2;">  vec3 color;</span></span>
<span class="line"><span style="color:#F8F8F2;">};</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><p>当我们需要管理一组相关的变量时，就可以使用结构体类型。在 GLSL 中，结构体定义方式与 C 语言类似，如下所示：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span>struct MyStruct {</span></span>
<span class="line"><span>   float x;</span></span>
<span class="line"><span>   float y;</span></span>
<span class="line"><span>   float z;</span></span>
<span class="line"><span>};</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个结构体定义了三个浮点数成员变量：x、y、z。我们可以用点运算符来访问结构体的成员变量：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span>MyStruct myStruct;</span></span>
<span class="line"><span>myStruct.x = 1.0;</span></span>
<span class="line"><span>myStruct.y = 2.0;</span></span>
<span class="line"><span>myStruct.z = 3.0;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 GLSL 中，我们也可以在一个结构体中嵌套另一个结构体，例如：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span>struct Material {</span></span>
<span class="line"><span>   vec3 ambient;</span></span>
<span class="line"><span>   vec3 diffuse;</span></span>
<span class="line"><span>   vec3 specular;</span></span>
<span class="line"><span>   float shininess;</span></span>
<span class="line"><span>};</span></span>
<span class="line"><span></span></span>
<span class="line"><span>struct MyObject {</span></span>
<span class="line"><span>   vec3 position;</span></span>
<span class="line"><span>   vec3 rotation;</span></span>
<span class="line"><span>   vec3 scale;</span></span>
<span class="line"><span>   Material material;</span></span>
<span class="line"><span>};</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个例子中，MyObject 包含了一个 vec3 类型的 position、rotation 和 scale，以及一个 Material 类型的 material。有了这个结构体，我们就可以更方便地管理物体的位置、旋转、缩放和材质属性。</p><h2 id="纹理类型变量" tabindex="-1"><a class="header-anchor" href="#纹理类型变量"><span>纹理类型变量</span></a></h2><ol><li><p><code>sampler1D</code></p><ul><li><p>表示一维纹理采样器。</p></li><li><p>示例：</p><div class="language-glsl line-numbers-mode" data-highlighter="shiki" data-ext="glsl" data-title="glsl" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">uniform</span><span style="color:#FF79C6;"> sampler1D</span><span style="color:#F8F8F2;"> myTexture;</span><span style="color:#6272A4;"> // 声明一个一维纹理采样器</span></span>
<span class="line"><span style="color:#FF79C6;">float</span><span style="color:#F8F8F2;"> texCoord </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> 0.5</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#FF79C6;">vec4</span><span style="color:#F8F8F2;"> texColor </span><span style="color:#FF79C6;">=</span><span style="color:#50FA7B;"> texture</span><span style="color:#F8F8F2;">(myTexture, texCoord);</span><span style="color:#6272A4;"> // 在指定纹理采样器和纹理坐标下采样纹理</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p><code>sampler2D</code></p><ul><li><p>表示二维纹理采样器。</p></li><li><p>示例：</p><div class="language-glsl line-numbers-mode" data-highlighter="shiki" data-ext="glsl" data-title="glsl" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">uniform</span><span style="color:#FF79C6;"> sampler2D</span><span style="color:#F8F8F2;"> myTexture;</span><span style="color:#6272A4;"> // 声明一个二维纹理采样器</span></span>
<span class="line"><span style="color:#FF79C6;">vec2</span><span style="color:#F8F8F2;"> texCoord </span><span style="color:#FF79C6;">=</span><span style="color:#FF79C6;"> vec2</span><span style="color:#F8F8F2;">(</span><span style="color:#BD93F9;">0.5</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">0.5</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#FF79C6;">vec4</span><span style="color:#F8F8F2;"> texColor </span><span style="color:#FF79C6;">=</span><span style="color:#50FA7B;"> texture</span><span style="color:#F8F8F2;">(myTexture, texCoord);</span><span style="color:#6272A4;"> // 在指定纹理采样器和纹理坐标下采样纹理</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p><code>sampler3D</code></p><ul><li><p>表示三维纹理采样器。</p></li><li><p>示例：</p><div class="language-glsl line-numbers-mode" data-highlighter="shiki" data-ext="glsl" data-title="glsl" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">uniform</span><span style="color:#FF79C6;"> sampler3D</span><span style="color:#F8F8F2;"> myTexture;</span><span style="color:#6272A4;"> // 声明一个三维纹理采样器</span></span>
<span class="line"><span style="color:#FF79C6;">vec3</span><span style="color:#F8F8F2;"> texCoord </span><span style="color:#FF79C6;">=</span><span style="color:#FF79C6;"> vec3</span><span style="color:#F8F8F2;">(</span><span style="color:#BD93F9;">0.5</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">0.5</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">0.5</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#FF79C6;">vec4</span><span style="color:#F8F8F2;"> texColor </span><span style="color:#FF79C6;">=</span><span style="color:#50FA7B;"> texture</span><span style="color:#F8F8F2;">(myTexture, texCoord);</span><span style="color:#6272A4;"> // 在指定纹理采样器和纹理坐标下采样纹理</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p><code>samplerCube</code></p><ul><li><p>表示立方体纹理采样器。</p></li><li><p>示例：</p><div class="language-glsl line-numbers-mode" data-highlighter="shiki" data-ext="glsl" data-title="glsl" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">uniform</span><span style="color:#FF79C6;"> samplerCube</span><span style="color:#F8F8F2;"> myTexture;</span><span style="color:#6272A4;"> // 声明一个立方体纹理采样器</span></span>
<span class="line"><span style="color:#FF79C6;">vec3</span><span style="color:#F8F8F2;"> texCoord </span><span style="color:#FF79C6;">=</span><span style="color:#FF79C6;"> vec3</span><span style="color:#F8F8F2;">(</span><span style="color:#BD93F9;">0.5</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">0.5</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">0.5</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#FF79C6;">vec4</span><span style="color:#F8F8F2;"> texColor </span><span style="color:#FF79C6;">=</span><span style="color:#50FA7B;"> texture</span><span style="color:#F8F8F2;">(myTexture, texCoord);</span><span style="color:#6272A4;"> // 在指定纹理采样器和纹理坐标下采样纹理</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p><code>sampler1DShadow</code></p><ul><li><p>表示一维纹理阴影采样器。</p></li><li><p>示例：</p><div class="language-glsl line-numbers-mode" data-highlighter="shiki" data-ext="glsl" data-title="glsl" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">uniform</span><span style="color:#FF79C6;"> sampler1DShadow</span><span style="color:#F8F8F2;"> myShadow;</span><span style="color:#6272A4;"> // 声明一个一维纹理阴影采样器</span></span>
<span class="line"><span style="color:#FF79C6;">float</span><span style="color:#F8F8F2;"> texCoord </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> 0.5</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#FF79C6;">float</span><span style="color:#F8F8F2;"> bias </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> 0.01</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#FF79C6;">float</span><span style="color:#F8F8F2;"> shadowValue </span><span style="color:#FF79C6;">=</span><span style="color:#50FA7B;"> texture</span><span style="color:#F8F8F2;">(myShadow, </span><span style="color:#50FA7B;">vec3</span><span style="color:#F8F8F2;">(texCoord, bias));</span><span style="color:#6272A4;"> // 在指定纹理采样器和纹理坐标下采样纹理</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p><code>sampler2DShadow</code></p><ul><li><p>表示二维纹理阴影采样器。</p></li><li><p>示例：</p><div class="language-glsl line-numbers-mode" data-highlighter="shiki" data-ext="glsl" data-title="glsl" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">uniform</span><span style="color:#FF79C6;"> sampler2DShadow</span><span style="color:#F8F8F2;"> myShadow;</span><span style="color:#6272A4;"> // 声明一个二维纹理阴影采样器</span></span>
<span class="line"><span style="color:#FF79C6;">vec2</span><span style="color:#F8F8F2;"> texCoord </span><span style="color:#FF79C6;">=</span><span style="color:#FF79C6;"> vec2</span><span style="color:#F8F8F2;">(</span><span style="color:#BD93F9;">0.5</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">0.5</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#FF79C6;">float</span><span style="color:#F8F8F2;"> bias </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> 0.01</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#FF79C6;">float</span><span style="color:#F8F8F2;"> shadowValue </span><span style="color:#FF79C6;">=</span><span style="color:#50FA7B;"> texture</span><span style="color:#F8F8F2;">(myShadow, </span><span style="color:#50FA7B;">vec3</span><span style="color:#F8F8F2;">(texCoord, bias));</span><span style="color:#6272A4;"> // 在指定纹理采样器和纹理坐标下采样纹理</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li></ol><h2 id="修饰符类型变量" tabindex="-1"><a class="header-anchor" href="#修饰符类型变量"><span>修饰符类型变量</span></a></h2><ol><li><p><code>in</code></p><ul><li><p>使用格式：<code>in &lt;type&gt; &lt;name&gt;</code></p></li><li><p>功能：将外部数据输入到着色器中，用于顶点着色器和片元着色器中声明输入变量。输入变量的值由于渲染管线输出阶段提供。</p></li><li><p>参数说明：</p><ul><li><code>&lt;type&gt;</code>：输入变量的类型。</li><li><code>&lt;name&gt;</code>：输入变量的名称。</li></ul></li><li><p>示例：</p><div class="language-glsl line-numbers-mode" data-highlighter="shiki" data-ext="glsl" data-title="glsl" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#6272A4;">/* 顶点着色器中声明一个输入变量，表示顶点位置。 */</span></span>
<span class="line"><span style="color:#FF79C6;">in</span><span style="color:#FF79C6;"> vec3</span><span style="color:#F8F8F2;"> vertexPosition;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p><code>out</code></p><ul><li><p>使用格式：<code>out &lt;type&gt; &lt;name&gt;</code></p></li><li><p>功能：将着色器输出发送到渲染管线的下一阶段，用于顶点着色器和片元着色器中声明输出变量。输出变量的值由着色器计算。</p></li><li><p>参数说明：</p></li><li><p><code>&lt;type&gt;</code>：输出变量的类型。</p></li><li><p><code>&lt;name&gt;</code>：输出变量的名称。</p></li><li><p>示例：</p><div class="language-glsl line-numbers-mode" data-highlighter="shiki" data-ext="glsl" data-title="glsl" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#6272A4;">/* 顶点着色器中声明一个输出变量，表示变换后的顶点位置。 */</span></span>
<span class="line"><span style="color:#FF79C6;">out</span><span style="color:#FF79C6;"> vec4</span><span style="color:#F8F8F2;"> transformedPosition;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p><code>uniform</code></p><ul><li><p>使用格式：<code>uniform &lt;type&gt; &lt;name&gt;</code></p></li><li><p>功能：在顶点着色器和片元着色器中声明全局变量，并将其作为传递参数的一部分传递到着色器中。这些变量值在渲染管线的各个阶段之间保持不变。</p></li><li><p>参数说明：</p></li><li><p><code>&lt;type&gt;</code>：变量的类型。</p></li><li><p><code>&lt;name&gt;</code>：变量的名称。</p></li><li><p>示例：</p><div class="language-glsl line-numbers-mode" data-highlighter="shiki" data-ext="glsl" data-title="glsl" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#6272A4;">/* 片元着色器中使用 uniform 声明一个颜色变量，表示物体的颜色。 */</span></span>
<span class="line"><span style="color:#FF79C6;">uniform</span><span style="color:#FF79C6;"> vec4</span><span style="color:#F8F8F2;"> objectColor;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p><code>const</code></p><ul><li><p>使用格式：<code>const &lt;type&gt; &lt;name&gt; = &lt;value&gt;</code></p></li><li><p>功能：声明在编译时就已经确定的常量。常量的值不能在程序运行期间更改。</p></li><li><p>参数说明：</p><ul><li><code>&lt;type&gt;</code>：常量的类型。</li><li><code>&lt;name&gt;</code>：常量的名称。</li><li><code>&lt;value&gt;</code>：常量的值。</li></ul></li><li><p>示例：</p><div class="language-glsl line-numbers-mode" data-highlighter="shiki" data-ext="glsl" data-title="glsl" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#6272A4;">/* 声明一个常量表示 pi 的值。 */</span></span>
<span class="line"><span style="color:#FF79C6;">const</span><span style="color:#FF79C6;"> float</span><span style="color:#F8F8F2;"> PI </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> 3.1415926</span><span style="color:#F8F8F2;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p><code>attribute</code></p><ul><li><p>使用格式：<code>attribute &lt;type&gt; &lt;name&gt;</code></p></li><li><p>功能：在顶点着色器中声明输入变量，表示每个顶点的属性。渲染管线输出阶段提供这些变量的值，并将它们传递到片元着色器中的 <code>varying</code> 变量中。</p></li><li><p>参数说明：</p><ul><li><code>&lt;type&gt;</code>：顶点属性的类型。</li><li><code>&lt;name&gt;</code>：顶点属性的名称。</li></ul></li><li><p>示例：</p><div class="language-glsl line-numbers-mode" data-highlighter="shiki" data-ext="glsl" data-title="glsl" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#6272A4;">/* 顶点着色器中声明一个 attribute 变量，表示顶点法向量。 */</span></span>
<span class="line"><span style="color:#FF79C6;">attribute</span><span style="color:#FF79C6;"> vec3</span><span style="color:#F8F8F2;"> vertexNormal;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p><code>varying</code></p><ul><li><p>使用格式：<code>varying &lt;type&gt; &lt;name&gt;</code></p></li><li><p>功能：在顶点着色器和片元着色器之间声明变量，表示顶点属性在顶点到像素的过程中插值的结果。顶点着色器计算 <code>varying</code> 变量的值，然后通过渲染管线输出阶段传递给片元着色器。</p></li><li><p>参数说明：</p><ul><li><code>&lt;type&gt;</code>：变量的类型。</li><li><code>&lt;name&gt;</code>：变量的名称。</li></ul></li><li><p>示例：</p><div class="language-glsl line-numbers-mode" data-highlighter="shiki" data-ext="glsl" data-title="glsl" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#6272A4;">/* 顶点着色器中声明一个 varying 变量，表示变换后的顶点法向量。 */</span></span>
<span class="line"><span style="color:#FF79C6;">varying</span><span style="color:#FF79C6;"> vec3</span><span style="color:#F8F8F2;"> transformedNormal;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li></ol><h3 id="uniforms" tabindex="-1"><a class="header-anchor" href="#uniforms"><span>uniforms</span></a></h3><p>尽管每个线程和其他线程之间不能有数据交换，但我们能从 CPU 给每个线程输入数据。因为显卡的架构，所有线程的输入值必须统一（uniform），而且必须设为只读。</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> uniforms </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  u_time</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> { type</span><span style="color:#FF79C6;">:</span><span style="color:#E9F284;"> &quot;</span><span style="color:#F1FA8C;">f</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">, value</span><span style="color:#FF79C6;">:</span><span style="color:#BD93F9;"> 1.0</span><span style="color:#F8F8F2;"> },</span></span>
<span class="line"><span style="color:#F8F8F2;">  u_resolution</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> { type</span><span style="color:#FF79C6;">:</span><span style="color:#E9F284;"> &quot;</span><span style="color:#F1FA8C;">v2</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">, value</span><span style="color:#FF79C6;">:</span><span style="color:#FF79C6;font-weight:bold;"> new</span><span style="color:#BD93F9;"> THREE</span><span style="color:#F8F8F2;">.</span><span style="color:#50FA7B;">Vector2</span><span style="color:#F8F8F2;">() },</span></span>
<span class="line"><span style="color:#F8F8F2;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> material </span><span style="color:#FF79C6;">=</span><span style="color:#FF79C6;font-weight:bold;"> new</span><span style="color:#BD93F9;"> THREE</span><span style="color:#F8F8F2;">.</span><span style="color:#50FA7B;">ShaderMaterial</span><span style="color:#F8F8F2;">({</span></span>
<span class="line"><span style="color:#F8F8F2;">  uniforms</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> uniforms,</span></span>
<span class="line"><span style="color:#F8F8F2;">  vertexShader</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> document.</span><span style="color:#50FA7B;">getElementById</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">vertexShader</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">).textContent,</span></span>
<span class="line"><span style="color:#F8F8F2;">  fragmentShader</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> document.</span><span style="color:#50FA7B;">getElementById</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">fragmentShader</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">).textContent,</span></span>
<span class="line"><span style="color:#F8F8F2;">});</span></span>
<span class="line"><span style="color:#FF79C6;">function</span><span style="color:#50FA7B;"> onWindowResize</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">event</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">  renderer.</span><span style="color:#50FA7B;">setSize</span><span style="color:#F8F8F2;">(window.innerWidth, window.innerHeight);</span></span>
<span class="line"><span style="color:#F8F8F2;">  uniforms.u_resolution.value.x </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> renderer.domElement.width;</span></span>
<span class="line"><span style="color:#F8F8F2;">  uniforms.u_resolution.value.y </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> renderer.domElement.height;</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> clock </span><span style="color:#FF79C6;">=</span><span style="color:#FF79C6;font-weight:bold;"> new</span><span style="color:#BD93F9;"> THREE</span><span style="color:#F8F8F2;">.</span><span style="color:#50FA7B;">Clock</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#FF79C6;">function</span><span style="color:#50FA7B;"> render</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#F8F8F2;">  uniforms.u_time.value </span><span style="color:#FF79C6;">+=</span><span style="color:#F8F8F2;"> clock.</span><span style="color:#50FA7B;">getDelta</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#F8F8F2;">  renderer.</span><span style="color:#50FA7B;">render</span><span style="color:#F8F8F2;">(scene, camera);</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="特殊类型变量" tabindex="-1"><a class="header-anchor" href="#特殊类型变量"><span>特殊类型变量</span></a></h2><ol><li><p><code>void</code></p><ul><li><p>使用格式：<code>void</code></p></li><li><p>功能：表示无类型、无返回值的函数。通常用于定义一个不返回值的函数。</p></li><li><p>参数说明：无参数。</p></li><li><p>示例：</p><div class="language-glsl line-numbers-mode" data-highlighter="shiki" data-ext="glsl" data-title="glsl" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#6272A4;">/* 定义一个不返回值的函数。 */</span></span>
<span class="line"><span style="color:#FF79C6;">void</span><span style="color:#50FA7B;"> printMessage</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#50FA7B;">    printf</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">Hello, world!</span><span style="color:#FF79C6;">\\n</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p><code>function</code></p><ul><li><p>使用格式：<code>return_type function_name(arguments) { function_body }</code></p></li><li><p>功能：定义一个可以重复使用的函数，根据传入参数不同进行不同的操作。</p></li><li><p>参数说明：</p><ul><li><code>return_type</code>：函数返回值的类型。</li><li><code>function_name</code>：函数名。</li><li><code>arguments</code>：函数参数，用逗号分隔多个参数，每个参数包括类型和名称。</li><li><code>function_body</code>：函数体，包括函数执行的代码。</li></ul></li><li><p>示例：</p><div class="language-glsl line-numbers-mode" data-highlighter="shiki" data-ext="glsl" data-title="glsl" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#6272A4;">/* 定义一个加法函数。 */</span></span>
<span class="line"><span style="color:#FF79C6;">float</span><span style="color:#50FA7B;"> add</span><span style="color:#F8F8F2;">(</span><span style="color:#FF79C6;">float</span><span style="color:#FFB86C;font-style:italic;"> x</span><span style="color:#F8F8F2;">, </span><span style="color:#FF79C6;">float</span><span style="color:#FFB86C;font-style:italic;"> y</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#FF79C6;">    return</span><span style="color:#F8F8F2;"> x </span><span style="color:#FF79C6;">+</span><span style="color:#F8F8F2;"> y;</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p><code>layout</code></p><ul><li><p>使用格式：<code>layout (qualifier) type name</code></p></li><li><p>功能：控制变量如何被存储和传递。</p></li><li><p>参数说明：</p><ul><li><code>qualifier</code>：布局限定符，例如 <code>location</code>、<code>binding</code> 等。</li><li><code>type</code>：变量类型，例如 <code>float</code>、<code>vec2</code>、<code>vec3</code> 等。</li><li><code>name</code>：变量名，用户自定义的标识符。</li></ul></li><li><p>示例：</p><div class="language-glsl line-numbers-mode" data-highlighter="shiki" data-ext="glsl" data-title="glsl" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#6272A4;">/* 使用 layout 限定符标记顶点位置和颜色的位置。 */</span></span>
<span class="line"><span style="color:#50FA7B;">layout</span><span style="color:#F8F8F2;"> (location </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> 0</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">in</span><span style="color:#FF79C6;"> vec3</span><span style="color:#F8F8F2;"> position;</span></span>
<span class="line"><span style="color:#50FA7B;">layout</span><span style="color:#F8F8F2;"> (location </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> 1</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">in</span><span style="color:#FF79C6;"> vec4</span><span style="color:#F8F8F2;"> color;</span></span>
<span class="line"><span style="color:#FF79C6;">void</span><span style="color:#50FA7B;"> main</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#F8F8F2;">    gl_Position </span><span style="color:#FF79C6;">=</span><span style="color:#50FA7B;"> vec4</span><span style="color:#F8F8F2;">(position, </span><span style="color:#BD93F9;">1.0</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p><code>gl_</code></p><ul><li><p>使用格式：内置变量有多种，例如 <code>gl_Position</code>、<code>gl_FragColor</code>、<code>gl_PointSize</code> 等。</p></li><li><p>功能：内置变量由 GLSL 定义和提供，可以用于访问 OpenGL ES 渲染管线中的状态和数据。</p></li><li><p>参数说明：内置变量具体用法和含义根据不同的内置变量而异。</p></li><li><p>示例：</p><div class="language-glsl line-numbers-mode" data-highlighter="shiki" data-ext="glsl" data-title="glsl" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#6272A4;">/* 使用 gl_Position 变量设置顶点位置。 */</span></span>
<span class="line"><span style="color:#FF79C6;">void</span><span style="color:#50FA7B;"> main</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#F8F8F2;">    gl_Position </span><span style="color:#FF79C6;">=</span><span style="color:#50FA7B;"> vec4</span><span style="color:#F8F8F2;">(position, </span><span style="color:#BD93F9;">1.0</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">/* 使用 gl_FragColor 变量设置片元颜色。 */</span></span>
<span class="line"><span style="color:#FF79C6;">void</span><span style="color:#50FA7B;"> main</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#F8F8F2;">    gl_FragColor </span><span style="color:#FF79C6;">=</span><span style="color:#50FA7B;"> vec4</span><span style="color:#F8F8F2;">(</span><span style="color:#BD93F9;">1.0</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">0.0</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">0.0</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">1.0</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li></ol><h2 id="顶点着色器变量" tabindex="-1"><a class="header-anchor" href="#顶点着色器变量"><span>顶点着色器变量</span></a></h2><ol><li><p><code>gl_FogCoord</code></p><ul><li><p>类型：<code>float</code></p></li><li><p>功能：雾的深度值，在雾效果中使用。</p></li><li><p>示例：</p><div class="language-glsl line-numbers-mode" data-highlighter="shiki" data-ext="glsl" data-title="glsl" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#6272A4;">/* 在片元着色器中使用 gl_FogCoord 计算雾效果。</span></span>
<span class="line"><span style="color:#6272A4;">   注意：需启用雾效果，具体方式为调用 glEnable(GL_FOG)。 */</span></span>
<span class="line"><span style="color:#FF79C6;">varying</span><span style="color:#FF79C6;"> vec4</span><span style="color:#F8F8F2;"> v_Position;</span></span>
<span class="line"><span style="color:#FF79C6;">uniform</span><span style="color:#FF79C6;"> vec4</span><span style="color:#F8F8F2;"> u_FogColor;</span></span>
<span class="line"><span style="color:#FF79C6;">uniform</span><span style="color:#FF79C6;"> float</span><span style="color:#F8F8F2;"> u_FogNear;</span></span>
<span class="line"><span style="color:#FF79C6;">uniform</span><span style="color:#FF79C6;"> float</span><span style="color:#F8F8F2;"> u_FogFar;</span></span>
<span class="line"><span style="color:#FF79C6;">void</span><span style="color:#50FA7B;"> main</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#6272A4;">    // 计算顶点到相机的距离。</span></span>
<span class="line"><span style="color:#FF79C6;">    float</span><span style="color:#F8F8F2;"> depth </span><span style="color:#FF79C6;">=</span><span style="color:#50FA7B;"> length</span><span style="color:#F8F8F2;">(v_Position.xyz);</span></span>
<span class="line"><span style="color:#6272A4;">    // 计算雾的深度值。</span></span>
<span class="line"><span style="color:#F8F8F2;">    gl_FogCoord </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> (depth </span><span style="color:#FF79C6;">-</span><span style="color:#F8F8F2;"> u_FogNear) </span><span style="color:#FF79C6;">/</span><span style="color:#F8F8F2;"> (u_FogFar </span><span style="color:#FF79C6;">-</span><span style="color:#F8F8F2;"> u_FogNear);</span></span>
<span class="line"><span style="color:#6272A4;">    // 输出颜色值。</span></span>
<span class="line"><span style="color:#F8F8F2;">    gl_FragColor </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> u_FogColor;</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p><code>gl_ModelViewMatrix</code></p><ul><li><p>类型：<code>mat4</code></p></li><li><p>功能：物体从模型坐标系转换到相机坐标系的矩阵。包括了模型变换和相机变换。</p></li><li><p>示例：</p><div class="language-glsl line-numbers-mode" data-highlighter="shiki" data-ext="glsl" data-title="glsl" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#6272A4;">/* 将物体从模型坐标系转换到相机坐标系。 */</span></span>
<span class="line"><span style="color:#FF79C6;">attribute</span><span style="color:#FF79C6;"> vec3</span><span style="color:#F8F8F2;"> a_Position;</span></span>
<span class="line"><span style="color:#FF79C6;">uniform</span><span style="color:#FF79C6;"> mat4</span><span style="color:#F8F8F2;"> u_ModelViewMatrix;</span></span>
<span class="line"><span style="color:#FF79C6;">uniform</span><span style="color:#FF79C6;"> mat4</span><span style="color:#F8F8F2;"> u_ProjectionMatrix;</span></span>
<span class="line"><span style="color:#FF79C6;">void</span><span style="color:#50FA7B;"> main</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#F8F8F2;">    gl_Position </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> u_ProjectionMatrix </span><span style="color:#FF79C6;">*</span><span style="color:#F8F8F2;"> u_ModelViewMatrix </span><span style="color:#FF79C6;">*</span><span style="color:#50FA7B;"> vec4</span><span style="color:#F8F8F2;">(a_Position, </span><span style="color:#BD93F9;">1.0</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p><code>gl_ProjectionMatrix</code></p><ul><li><p>类型：<code>mat4</code></p></li><li><p>功能：将相机坐标系中的点投影到裁剪空间的矩阵。</p></li><li><p>示例：</p><div class="language-glsl line-numbers-mode" data-highlighter="shiki" data-ext="glsl" data-title="glsl" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#6272A4;">/* 将相机坐标系中的点投影到裁剪空间中。 */</span></span>
<span class="line"><span style="color:#FF79C6;">attribute</span><span style="color:#FF79C6;"> vec3</span><span style="color:#F8F8F2;"> a_Position;</span></span>
<span class="line"><span style="color:#FF79C6;">uniform</span><span style="color:#FF79C6;"> mat4</span><span style="color:#F8F8F2;"> u_ModelViewMatrix;</span></span>
<span class="line"><span style="color:#FF79C6;">uniform</span><span style="color:#FF79C6;"> mat4</span><span style="color:#F8F8F2;"> u_ProjectionMatrix;</span></span>
<span class="line"><span style="color:#FF79C6;">void</span><span style="color:#50FA7B;"> main</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#F8F8F2;">    gl_Position </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> u_ProjectionMatrix </span><span style="color:#FF79C6;">*</span><span style="color:#F8F8F2;"> u_ModelViewMatrix </span><span style="color:#FF79C6;">*</span><span style="color:#50FA7B;"> vec4</span><span style="color:#F8F8F2;">(a_Position, </span><span style="color:#BD93F9;">1.0</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p><code>gl_ModelViewProjectionMatrix</code></p><ul><li><p>类型：<code>mat4</code></p></li><li><p>功能：将物体从模型坐标系转换到裁剪空间的矩阵。包括了模型变换、相机变换和投影变换。</p></li><li><p>示例：</p><div class="language-glsl line-numbers-mode" data-highlighter="shiki" data-ext="glsl" data-title="glsl" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#6272A4;">/* 将物体从模型坐标系转换到裁剪空间中。 */</span></span>
<span class="line"><span style="color:#FF79C6;">attribute</span><span style="color:#FF79C6;"> vec3</span><span style="color:#F8F8F2;"> a_Position;</span></span>
<span class="line"><span style="color:#FF79C6;">uniform</span><span style="color:#FF79C6;"> mat4</span><span style="color:#F8F8F2;"> u_ModelViewProjectionMatrix;</span></span>
<span class="line"><span style="color:#FF79C6;">void</span><span style="color:#50FA7B;"> main</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#F8F8F2;">    gl_Position </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> u_ModelViewProjectionMatrix </span><span style="color:#FF79C6;">*</span><span style="color:#50FA7B;"> vec4</span><span style="color:#F8F8F2;">(a_Position, </span><span style="color:#BD93F9;">1.0</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p><code>gl_TextureMatrix</code></p><ul><li><p>类型：<code>mat4</code></p></li><li><p>功能：纹理坐标变换矩阵。与纹理坐标配合使用，用于实现纹理的旋转、平移和缩放等变换效果。</p></li><li><p>示例：</p><div class="language-glsl line-numbers-mode" data-highlighter="shiki" data-ext="glsl" data-title="glsl" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#6272A4;">/* 在顶点着色器中使用纹理坐标变换矩阵实现纹理旋转效果。 */</span></span>
<span class="line"><span style="color:#FF79C6;">attribute</span><span style="color:#FF79C6;"> vec2</span><span style="color:#F8F8F2;"> a_TexCoord;</span></span>
<span class="line"><span style="color:#FF79C6;">uniform</span><span style="color:#FF79C6;"> mat4</span><span style="color:#F8F8F2;"> u_TextureMatrix;</span></span>
<span class="line"><span style="color:#FF79C6;">varying</span><span style="color:#FF79C6;"> vec2</span><span style="color:#F8F8F2;"> v_TexCoord;</span></span>
<span class="line"><span style="color:#FF79C6;">void</span><span style="color:#50FA7B;"> main</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#F8F8F2;">    v_TexCoord </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> (u_TextureMatrix </span><span style="color:#FF79C6;">*</span><span style="color:#50FA7B;"> vec4</span><span style="color:#F8F8F2;">(a_TexCoord, </span><span style="color:#BD93F9;">0.0</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">1.0</span><span style="color:#F8F8F2;">)).xy;</span></span>
<span class="line"><span style="color:#F8F8F2;">    gl_Position </span><span style="color:#FF79C6;">=</span><span style="color:#50FA7B;"> vec4</span><span style="color:#F8F8F2;">(a_Position, </span><span style="color:#BD93F9;">1.0</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p><code>gl_NormalMatrix</code></p><ul><li><p>类型：<code>mat4</code></p></li><li><p>功能：法向量变换矩阵，在光照计算中使用。用于将物体表面的法向量从模型坐标系变换到相机坐标系，并保持其在坐标系中的垂直性。</p></li><li><p>示例：</p><div class="language-glsl line-numbers-mode" data-highlighter="shiki" data-ext="glsl" data-title="glsl" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#6272A4;">/* 在顶点着色器中使用法向量变换矩阵将法向量从模型坐标系变换到相机坐标系中。 */</span></span>
<span class="line"><span style="color:#FF79C6;">attribute</span><span style="color:#FF79C6;"> vec3</span><span style="color:#F8F8F2;"> a_Normal;</span></span>
<span class="line"><span style="color:#FF79C6;">uniform</span><span style="color:#FF79C6;"> mat4</span><span style="color:#F8F8F2;"> u_NormalMatrix;</span></span>
<span class="line"><span style="color:#FF79C6;">void</span><span style="color:#50FA7B;"> main</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#F8F8F2;">    gl_Normal </span><span style="color:#FF79C6;">=</span><span style="color:#50FA7B;"> mat3</span><span style="color:#F8F8F2;">(u_NormalMatrix) </span><span style="color:#FF79C6;">*</span><span style="color:#F8F8F2;"> a_Normal;</span></span>
<span class="line"><span style="color:#F8F8F2;">    gl_Position </span><span style="color:#FF79C6;">=</span><span style="color:#50FA7B;"> vec4</span><span style="color:#F8F8F2;">(a_Position, </span><span style="color:#BD93F9;">1.0</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p><code>gl_ModelViewMatrixInverse</code></p><ul><li><p>类型：<code>mat4</code>。</p></li><li><p>描述：模型视图矩阵的逆矩阵。用于将顶点从视图空间转换回模型空间。</p></li><li><p>示例：</p><div class="language-glsl line-numbers-mode" data-highlighter="shiki" data-ext="glsl" data-title="glsl" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#6272A4;">/* 使用 gl_ModelViewMatrixInverse 将顶点从视图空间转换回模型空间。 */</span></span>
<span class="line"><span style="color:#FF79C6;">vec4</span><span style="color:#F8F8F2;"> vertexInViewSpace </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> gl_ModelViewMatrix</span><span style="color:#FF79C6;"> *</span><span style="color:#BD93F9;"> gl_Vertex</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#FF79C6;">vec4</span><span style="color:#F8F8F2;"> vertexInModelSpace </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> gl_ModelViewMatrixInverse</span><span style="color:#FF79C6;"> *</span><span style="color:#F8F8F2;"> vertexInViewSpace;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p><code>gl_ProjectionMatrixInverse</code></p><ul><li><p>类型：<code>mat4</code>。</p></li><li><p>描述：投影矩阵的逆矩阵。用于将顶点从裁剪空间转换回标准化设备空间。</p></li><li><p>示例：</p><div class="language-glsl line-numbers-mode" data-highlighter="shiki" data-ext="glsl" data-title="glsl" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#6272A4;">/* 使用 gl_ProjectionMatrixInverse 将顶点从裁剪空间转换回标准化设备空间。 */</span></span>
<span class="line"><span style="color:#FF79C6;">vec4</span><span style="color:#F8F8F2;"> vertexInClipSpace </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> gl_ModelViewProjectionMatrix</span><span style="color:#FF79C6;"> *</span><span style="color:#BD93F9;"> gl_Vertex</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#FF79C6;">vec4</span><span style="color:#F8F8F2;"> vertexInNormalizedDeviceSpace </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> gl_ProjectionMatrixInverse</span><span style="color:#FF79C6;"> *</span><span style="color:#F8F8F2;"> vertexInClipSpace;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p><code>gl_ModelViewProjectionMatrixInverse</code></p><ul><li><p>类型：<code>mat4</code>。</p></li><li><p>描述：模型视图投影矩阵的逆矩阵。用于将顶点从裁剪空间转换回模型空间。</p></li><li><p>示例：</p><div class="language-glsl line-numbers-mode" data-highlighter="shiki" data-ext="glsl" data-title="glsl" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#6272A4;">/* 使用 gl_ModelViewProjectionMatrixInverse 将顶点从裁剪空间转换回模型空间。 */</span></span>
<span class="line"><span style="color:#FF79C6;">vec4</span><span style="color:#F8F8F2;"> vertexInClipSpace </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> gl_ModelViewProjectionMatrix</span><span style="color:#FF79C6;"> *</span><span style="color:#BD93F9;"> gl_Vertex</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#FF79C6;">vec4</span><span style="color:#F8F8F2;"> vertexInModelSpace </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> gl_ModelViewProjectionMatrixInverse</span><span style="color:#FF79C6;"> *</span><span style="color:#F8F8F2;"> vertexInClipSpace;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p><code>gl_TextureMatrixInverse</code></p></li></ol><ul><li><p>类型：<code>mat4</code>。</p></li><li><p>描述：纹理矩阵的逆矩阵。常用于对纹理坐标进行变换。</p></li><li><p>示例：</p><div class="language-glsl line-numbers-mode" data-highlighter="shiki" data-ext="glsl" data-title="glsl" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#6272A4;">/* 使用 gl_TextureMatrixInverse 对纹理坐标进行变换。 */</span></span>
<span class="line"><span style="color:#FF79C6;">vec4</span><span style="color:#F8F8F2;"> texCoord </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> gl_TextureMatrix</span><span style="color:#FF79C6;"> *</span><span style="color:#FF79C6;"> vec4</span><span style="color:#F8F8F2;">(gl_MultiTexCoord0.xy, </span><span style="color:#BD93F9;">0.0</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">1.0</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#FF79C6;">vec4</span><span style="color:#F8F8F2;"> transformedTexCoord </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> gl_TextureMatrixInverse</span><span style="color:#FF79C6;"> *</span><span style="color:#F8F8F2;"> texCoord;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><ol start="11"><li><code>gl_ModelViewMatrixTranspose</code></li></ol><ul><li><p>功能：表示模型视图变换矩阵的转置矩阵。该矩阵可以将当前顶点从模型坐标系变换到视图坐标系。</p></li><li><p>示例：</p><div class="language-glsl line-numbers-mode" data-highlighter="shiki" data-ext="glsl" data-title="glsl" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#6272A4;">/* 假设需要对顶点进行模型视图变换，将模型坐标系下的顶点坐标变换到视图坐标系下，并将变换后的顶点坐标传递给片元着色器。*/</span></span>
<span class="line"><span style="color:#FF79C6;">attribute</span><span style="color:#FF79C6;"> vec3</span><span style="color:#F8F8F2;"> aPosition; </span></span>
<span class="line"><span style="color:#FF79C6;">uniform</span><span style="color:#FF79C6;"> mat4</span><span style="color:#F8F8F2;"> uModelViewMatrix;</span></span>
<span class="line"><span style="color:#FF79C6;">uniform</span><span style="color:#FF79C6;"> mat4</span><span style="color:#F8F8F2;"> uProjectionMatrix;</span></span>
<span class="line"><span style="color:#FF79C6;">void</span><span style="color:#50FA7B;"> main</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#F8F8F2;">    gl_Position </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> uProjectionMatrix </span><span style="color:#FF79C6;">*</span><span style="color:#F8F8F2;"> uModelViewMatrix </span><span style="color:#FF79C6;">*</span><span style="color:#50FA7B;"> vec4</span><span style="color:#F8F8F2;">(aPosition, </span><span style="color:#BD93F9;">1.0</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><ol start="12"><li><code>gl_ProjectionMatrixTranspose</code></li></ol><ul><li><p>功能：表示投影变换矩阵的转置矩阵。该矩阵可以将当前顶点从视图坐标系变换到裁剪坐标系。</p></li><li><p>示例：</p><div class="language-glsl line-numbers-mode" data-highlighter="shiki" data-ext="glsl" data-title="glsl" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#6272A4;">/* 假设需要将顶点从视图坐标系变换到裁剪坐标系，并将变换后的坐标传递给片元着色器。*/</span></span>
<span class="line"><span style="color:#FF79C6;">attribute</span><span style="color:#FF79C6;"> vec4</span><span style="color:#F8F8F2;"> aPosition; </span></span>
<span class="line"><span style="color:#FF79C6;">uniform</span><span style="color:#FF79C6;"> mat4</span><span style="color:#F8F8F2;"> uProjectionMatrix;</span></span>
<span class="line"><span style="color:#FF79C6;">void</span><span style="color:#50FA7B;"> main</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#F8F8F2;">    gl_Position </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> uProjectionMatrix </span><span style="color:#FF79C6;">*</span><span style="color:#F8F8F2;"> aPosition;</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><ol start="13"><li><code>gl_ModelViewProjectionMatrixTranspose</code></li></ol><ul><li><p>功能：表示模型视图投影变换矩阵的转置矩阵。该矩阵可以将当前顶点从模型坐标系变换到裁剪坐标系。</p></li><li><p>示例：</p><div class="language-glsl line-numbers-mode" data-highlighter="shiki" data-ext="glsl" data-title="glsl" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#6272A4;">/* 假设需要对顶点进行模型视图投影变换，将模型坐标系下的顶点坐标变换到裁剪坐标系下，并将变换后的顶点坐标传递给片元着色器。*/</span></span>
<span class="line"><span style="color:#FF79C6;">attribute</span><span style="color:#FF79C6;"> vec3</span><span style="color:#F8F8F2;"> aPosition;</span></span>
<span class="line"><span style="color:#FF79C6;">uniform</span><span style="color:#FF79C6;"> mat4</span><span style="color:#F8F8F2;"> uModelViewProjectionMatrix;</span></span>
<span class="line"><span style="color:#FF79C6;">void</span><span style="color:#50FA7B;"> main</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#F8F8F2;">    gl_Position </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> uModelViewProjectionMatrix </span><span style="color:#FF79C6;">*</span><span style="color:#50FA7B;"> vec4</span><span style="color:#F8F8F2;">(aPosition, </span><span style="color:#BD93F9;">1.0</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><ol start="14"><li><code>gl_TextureMatrixTranspose</code></li></ol><ul><li><p>功能：表示纹理变换矩阵的转置矩阵。该矩阵可以将当前顶点从纹理坐标系变换到纹理单元坐标系。</p></li><li><p>示例：</p><div class="language-glsl line-numbers-mode" data-highlighter="shiki" data-ext="glsl" data-title="glsl" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#6272A4;">/* 假设需要对纹理坐标进行变换，将纹理坐标系下的顶点坐标变换到纹理单元坐标系下，并将变换后的顶点坐标传递给片元着色器。*/</span></span>
<span class="line"><span style="color:#FF79C6;">attribute</span><span style="color:#FF79C6;"> vec2</span><span style="color:#F8F8F2;"> aTexCoord;</span></span>
<span class="line"><span style="color:#FF79C6;">uniform</span><span style="color:#FF79C6;"> mat4</span><span style="color:#F8F8F2;"> uTextureMatrix;</span></span>
<span class="line"><span style="color:#FF79C6;">void</span><span style="color:#50FA7B;"> main</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#F8F8F2;">    gl_TexCoord[</span><span style="color:#BD93F9;">0</span><span style="color:#F8F8F2;">] </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> uTextureMatrix </span><span style="color:#FF79C6;">*</span><span style="color:#50FA7B;"> vec4</span><span style="color:#F8F8F2;">(aTexCoord, </span><span style="color:#BD93F9;">0.0</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">1.0</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><ol start="15"><li><code>gl_ModelViewMatrixInverseTranspose</code></li></ol><ul><li><p>功能：表示模型视图变换的逆转置矩阵，用于对法线进行变换。该矩阵可以将当前法线从模型坐标系变换到视图坐标系。</p></li><li><p>示例：</p><div class="language-glsl line-numbers-mode" data-highlighter="shiki" data-ext="glsl" data-title="glsl" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#6272A4;">/* 假设需要对法线进行变换，将模型坐标系下的法线变换到视图坐标系下，并将变换后的法线传递给片元着色器。*/</span></span>
<span class="line"><span style="color:#FF79C6;">attribute</span><span style="color:#FF79C6;"> vec3</span><span style="color:#F8F8F2;"> aNormal;</span></span>
<span class="line"><span style="color:#FF79C6;">uniform</span><span style="color:#FF79C6;"> mat4</span><span style="color:#F8F8F2;"> uModelViewMatrix;</span></span>
<span class="line"><span style="color:#FF79C6;">uniform</span><span style="color:#FF79C6;"> mat4</span><span style="color:#F8F8F2;"> uNormalMatrix;</span></span>
<span class="line"><span style="color:#FF79C6;">void</span><span style="color:#50FA7B;"> main</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#F8F8F2;">    vec3 transformedNormal </span><span style="color:#FF79C6;">=</span><span style="color:#50FA7B;"> normalize</span><span style="color:#F8F8F2;">(</span><span style="color:#50FA7B;">mat3</span><span style="color:#F8F8F2;">(uModelViewMatrix) </span><span style="color:#FF79C6;">*</span><span style="color:#F8F8F2;"> uNormalMatrix </span><span style="color:#FF79C6;">*</span><span style="color:#F8F8F2;"> aNormal);</span></span>
<span class="line"><span style="color:#6272A4;">    // 使用变换后的法线进行接下来的计算</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><ol start="16"><li><code>gl_ProjectionMatrixInverseTranspose</code></li></ol><ul><li><p>功能：表示投影变换的逆转置矩阵，用于对法线进行变换。该矩阵可以将当前法线从视图坐标系变换到裁剪坐标系。</p></li><li><p>示例：</p><div class="language-glsl line-numbers-mode" data-highlighter="shiki" data-ext="glsl" data-title="glsl" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#6272A4;">/* 假设需要对法线进行变换，将视图坐标系下的法线变换到裁剪坐标系下，并将变换后的法线传递给片元着色器。*/</span></span>
<span class="line"><span style="color:#FF79C6;">attribute</span><span style="color:#FF79C6;"> vec3</span><span style="color:#F8F8F2;"> aNormal;</span></span>
<span class="line"><span style="color:#FF79C6;">uniform</span><span style="color:#FF79C6;"> mat4</span><span style="color:#F8F8F2;"> uProjectionMatrix;</span></span>
<span class="line"><span style="color:#FF79C6;">uniform</span><span style="color:#FF79C6;"> mat4</span><span style="color:#F8F8F2;"> uNormalMatrix;</span></span>
<span class="line"><span style="color:#FF79C6;">void</span><span style="color:#50FA7B;"> main</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#F8F8F2;">    vec3 transformedNormal </span><span style="color:#FF79C6;">=</span><span style="color:#50FA7B;"> normalize</span><span style="color:#F8F8F2;">(</span><span style="color:#50FA7B;">mat3</span><span style="color:#F8F8F2;">(uProjectionMatrix) </span><span style="color:#FF79C6;">*</span><span style="color:#F8F8F2;"> uNormalMatrix </span><span style="color:#FF79C6;">*</span><span style="color:#F8F8F2;"> aNormal);</span></span>
<span class="line"><span style="color:#6272A4;">    // 使用变换后的法线进行接下来的计算</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><ol start="17"><li><code>gl_ModelViewProjectionMatrixInverseTranspose</code></li></ol><ul><li><p>类型：4x4 矩阵</p></li><li><p>功能：计算模型视图投影矩阵的逆转置矩阵，并将其传递给片元着色器，用于法线向量变换。</p></li><li><p>示例：</p><div class="language-glsl line-numbers-mode" data-highlighter="shiki" data-ext="glsl" data-title="glsl" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#6272A4;">/* 将法线向量变换为视图坐标系下的向量。 */</span></span>
<span class="line"><span style="color:#FF79C6;">varying</span><span style="color:#FF79C6;"> vec3</span><span style="color:#F8F8F2;"> vertexNormal;</span></span>
<span class="line"><span style="color:#FF79C6;">uniform</span><span style="color:#FF79C6;"> mat4</span><span style="color:#F8F8F2;"> modelViewProjectionMatrix;</span></span>
<span class="line"><span style="color:#FF79C6;">uniform</span><span style="color:#FF79C6;"> mat4</span><span style="color:#BD93F9;"> gl_ModelViewProjectionMatrixInverseTranspose</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#FF79C6;">void</span><span style="color:#50FA7B;"> main</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#F8F8F2;">    vec3 norm </span><span style="color:#FF79C6;">=</span><span style="color:#50FA7B;"> normalize</span><span style="color:#F8F8F2;">(gl_ModelViewProjectionMatrixInverseTranspose </span><span style="color:#FF79C6;">*</span><span style="color:#50FA7B;"> vec4</span><span style="color:#F8F8F2;">(vertexNormal, </span><span style="color:#BD93F9;">0.0</span><span style="color:#F8F8F2;">)).xyz;</span></span>
<span class="line"><span style="color:#6272A4;">    /* ... */</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><ol start="18"><li><code>gl_TextureMatrixInverseTranspose</code></li></ol><ul><li><p>类型：4x4 矩阵</p></li><li><p>功能：计算纹理矩阵的逆转置矩阵，并将其传递给片元着色器，用于法线向量变换。</p></li><li><p>示例：</p><div class="language-glsl line-numbers-mode" data-highlighter="shiki" data-ext="glsl" data-title="glsl" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#6272A4;">/* 将法线向量变换为纹理坐标系下的向量。 */</span></span>
<span class="line"><span style="color:#FF79C6;">varying</span><span style="color:#FF79C6;"> vec3</span><span style="color:#F8F8F2;"> vertexNormal;</span></span>
<span class="line"><span style="color:#FF79C6;">varying</span><span style="color:#FF79C6;"> vec2</span><span style="color:#F8F8F2;"> vertexTexCoord;</span></span>
<span class="line"><span style="color:#FF79C6;">uniform</span><span style="color:#FF79C6;"> mat4</span><span style="color:#F8F8F2;"> textureMatrix;</span></span>
<span class="line"><span style="color:#FF79C6;">uniform</span><span style="color:#FF79C6;"> mat4</span><span style="color:#BD93F9;"> gl_TextureMatrixInverseTranspose</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#FF79C6;">void</span><span style="color:#50FA7B;"> main</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#F8F8F2;">    vec3 norm </span><span style="color:#FF79C6;">=</span><span style="color:#50FA7B;"> normalize</span><span style="color:#F8F8F2;">(gl_TextureMatrixInverseTranspose </span><span style="color:#FF79C6;">*</span><span style="color:#F8F8F2;"> textureMatrix </span><span style="color:#FF79C6;">*</span><span style="color:#50FA7B;"> vec4</span><span style="color:#F8F8F2;">(vertexNormal, </span><span style="color:#BD93F9;">0.0</span><span style="color:#F8F8F2;">)).xyz;</span></span>
<span class="line"><span style="color:#6272A4;">    /* ... */</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><ol start="19"><li><code>gl_DepthRangeNear</code></li></ol><ul><li><p>类型：浮点数</p></li><li><p>功能：场景深度的近平面。</p></li><li><p>示例：</p><div class="language-glsl line-numbers-mode" data-highlighter="shiki" data-ext="glsl" data-title="glsl" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#6272A4;">/* 计算深度值。 */</span></span>
<span class="line"><span style="color:#FF79C6;">varying</span><span style="color:#FF79C6;"> vec4</span><span style="color:#F8F8F2;"> vertexPosition;</span></span>
<span class="line"><span style="color:#FF79C6;">uniform</span><span style="color:#FF79C6;"> float</span><span style="color:#F8F8F2;"> gl_DepthRangeNear;</span></span>
<span class="line"><span style="color:#FF79C6;">uniform</span><span style="color:#FF79C6;"> float</span><span style="color:#F8F8F2;"> gl_DepthRangeFar;</span></span>
<span class="line"><span style="color:#FF79C6;">void</span><span style="color:#50FA7B;"> main</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#F8F8F2;">    gl_Position </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> gl_ModelViewProjectionMatrix </span><span style="color:#FF79C6;">*</span><span style="color:#F8F8F2;"> vertexPosition;</span></span>
<span class="line"><span style="color:#F8F8F2;">    gl_Position.z </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> (gl_Position.z </span><span style="color:#FF79C6;">/</span><span style="color:#F8F8F2;"> gl_Position.w) </span><span style="color:#FF79C6;">*</span><span style="color:#BD93F9;"> 0.5</span><span style="color:#FF79C6;"> +</span><span style="color:#BD93F9;"> 0.5</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">    gl_Position.z </span><span style="color:#FF79C6;">=</span><span style="color:#50FA7B;"> mix</span><span style="color:#F8F8F2;">(gl_DepthRangeNear, gl_DepthRangeFar, gl_Position.z);</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><ol start="20"><li><code>gl_DepthRangeFar</code></li></ol><ul><li>类型：浮点数</li><li>功能：场景深度的远平面。</li><li>示例：与 <code>gl_DepthRangeNear</code> 用法相同。</li></ul><ol start="21"><li><code>gl_TexCoord[]</code></li></ol><ul><li><p>类型：四维向量数组</p></li><li><p>功能：传递纹理坐标给片元着色器。</p></li><li><p>示例：</p><div class="language-glsl line-numbers-mode" data-highlighter="shiki" data-ext="glsl" data-title="glsl" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#6272A4;">/* 在片元着色器中使用纹理坐标进行纹理采样。 */</span></span>
<span class="line"><span style="color:#FF79C6;">varying</span><span style="color:#FF79C6;"> vec4</span><span style="color:#BD93F9;"> gl_TexCoord</span><span style="color:#F8F8F2;">[</span><span style="color:#BD93F9;">4</span><span style="color:#F8F8F2;">];</span></span>
<span class="line"><span style="color:#FF79C6;">uniform</span><span style="color:#FF79C6;"> sampler2D</span><span style="color:#F8F8F2;"> texture;</span></span>
<span class="line"><span style="color:#FF79C6;">void</span><span style="color:#50FA7B;"> main</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#F8F8F2;">    vec4 color </span><span style="color:#FF79C6;">=</span><span style="color:#50FA7B;"> texture2D</span><span style="color:#F8F8F2;">(texture, gl_TexCoord[</span><span style="color:#BD93F9;">0</span><span style="color:#F8F8F2;">].xy);</span></span>
<span class="line"><span style="color:#6272A4;">    /* ... */</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><ol start="22"><li><code>gl_FogFragCoord</code></li></ol><ul><li><p>类型：浮点数</p></li><li><p>功能：计算像素与雾起点之间的距离，并将这个距离传递给片元着色器，用于计算雾的程度。</p></li><li><p>示例：</p><div class="language-glsl line-numbers-mode" data-highlighter="shiki" data-ext="glsl" data-title="glsl" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#6272A4;">/* 计算与雾起点之间的距离并进行颜色混合。 */</span></span>
<span class="line"><span style="color:#FF79C6;">varying</span><span style="color:#FF79C6;"> float</span><span style="color:#BD93F9;"> gl_FogFragCoord</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#FF79C6;">uniform</span><span style="color:#FF79C6;"> vec4</span><span style="color:#F8F8F2;"> fogColor;</span></span>
<span class="line"><span style="color:#FF79C6;">void</span><span style="color:#50FA7B;"> main</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#6272A4;">    /* ... */</span></span>
<span class="line"><span style="color:#FF79C6;">    float</span><span style="color:#F8F8F2;"> fogFactor </span><span style="color:#FF79C6;">=</span><span style="color:#50FA7B;"> clamp</span><span style="color:#F8F8F2;">((gl_FogFragCoord </span><span style="color:#FF79C6;">-</span><span style="color:#F8F8F2;"> fogStart) </span><span style="color:#FF79C6;">/</span><span style="color:#F8F8F2;"> (fogEnd </span><span style="color:#FF79C6;">-</span><span style="color:#F8F8F2;"> fogStart), </span><span style="color:#BD93F9;">0.0</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">1.0</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">    gl_FragColor </span><span style="color:#FF79C6;">=</span><span style="color:#50FA7B;"> mix</span><span style="color:#F8F8F2;">(fogColor, gl_FragColor, fogFactor);</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><ol start="23"><li><code>gl_Position</code></li></ol><ul><li><p>类型：四维向量</p></li><li><p>功能：计算顶点位置的裁剪坐标，并将其传递给下一阶段的渲染管线。</p></li><li><p>示例：</p><div class="language-glsl line-numbers-mode" data-highlighter="shiki" data-ext="glsl" data-title="glsl" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#6272A4;">/* 计算顶点位置的裁剪坐标。 */</span></span>
<span class="line"><span style="color:#FF79C6;">attribute</span><span style="color:#FF79C6;"> vec4</span><span style="color:#F8F8F2;"> position;</span></span>
<span class="line"><span style="color:#FF79C6;">uniform</span><span style="color:#FF79C6;"> mat4</span><span style="color:#F8F8F2;"> modelViewProjectionMatrix;</span></span>
<span class="line"><span style="color:#FF79C6;">void</span><span style="color:#50FA7B;"> main</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#F8F8F2;">    gl_Position </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> modelViewProjectionMatrix </span><span style="color:#FF79C6;">*</span><span style="color:#F8F8F2;"> position;</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><ol start="24"><li><code>gl_PointSize</code></li></ol><ul><li><p>类型：浮点数</p></li><li><p>功能：设置渲染点的大小。</p></li><li><p>示例：</p><div class="language-glsl line-numbers-mode" data-highlighter="shiki" data-ext="glsl" data-title="glsl" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#6272A4;">/* 设置点的大小并进行颜色混合。 */</span></span>
<span class="line"><span style="color:#FF79C6;">varying</span><span style="color:#FF79C6;"> float</span><span style="color:#F8F8F2;"> dotSize;</span></span>
<span class="line"><span style="color:#FF79C6;">void</span><span style="color:#50FA7B;"> main</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#6272A4;">    /* ... */</span></span>
<span class="line"><span style="color:#F8F8F2;">    gl_PointSize </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> dotSize;</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h2 id="片段着色器" tabindex="-1"><a class="header-anchor" href="#片段着色器"><span>片段着色器</span></a></h2><ol><li><p><code>gl_FragCoord</code></p><ul><li><p>类型：<code>vec4</code></p></li><li><p>功能：表示当前像素的屏幕坐标，其中 <code>x</code> 和 <code>y</code> 表示像素在屏幕上的坐标值，<code>z</code> 表示深度值，<code>w</code> 固定为 1.0。</p></li><li><p>示例：</p><div class="language-glsl line-numbers-mode" data-highlighter="shiki" data-ext="glsl" data-title="glsl" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#6272A4;">/* 将当前像素的屏幕坐标传入 uniform 变量中。 */</span></span>
<span class="line"><span style="color:#FF79C6;">uniform</span><span style="color:#FF79C6;"> vec4</span><span style="color:#F8F8F2;"> u_screenCoord;</span></span>
<span class="line"><span style="color:#FF79C6;">void</span><span style="color:#50FA7B;"> main</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#F8F8F2;">  u_screenCoord </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> gl_FragCoord;</span></span>
<span class="line"><span style="color:#F8F8F2;">  ...</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p><code>gl_FrontFacing</code></p><ul><li><p>类型：<code>bool</code></p></li><li><p>功能：表示当前三角形的正面朝向。如果为 <code>true</code>，表示正面朝向屏幕；如果为 <code>false</code>，表示背面朝向屏幕。</p></li><li><p>示例：</p><div class="language-glsl line-numbers-mode" data-highlighter="shiki" data-ext="glsl" data-title="glsl" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#6272A4;">/* 根据 gl_FrontFacing 来决定片元颜色。 */</span></span>
<span class="line"><span style="color:#FF79C6;">void</span><span style="color:#50FA7B;"> main</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#FF79C6;">  if</span><span style="color:#F8F8F2;"> (gl_FrontFacing) {</span></span>
<span class="line"><span style="color:#F8F8F2;">    gl_FragColor </span><span style="color:#FF79C6;">=</span><span style="color:#50FA7B;"> vec4</span><span style="color:#F8F8F2;">(</span><span style="color:#BD93F9;">1.0</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">0.0</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">0.0</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">1.0</span><span style="color:#F8F8F2;">);</span><span style="color:#6272A4;"> // 正面为红色</span></span>
<span class="line"><span style="color:#F8F8F2;">  } </span><span style="color:#FF79C6;">else</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">    gl_FragColor </span><span style="color:#FF79C6;">=</span><span style="color:#50FA7B;"> vec4</span><span style="color:#F8F8F2;">(</span><span style="color:#BD93F9;">0.0</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">1.0</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">0.0</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">1.0</span><span style="color:#F8F8F2;">);</span><span style="color:#6272A4;"> // 背面为绿色</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p><code>gl_PointCoord</code></p><ul><li><p>类型：<code>vec2</code></p></li><li><p>功能：表示当前片元在点精灵中的坐标，取值范围为 <code>[0, 1]</code>。仅当当前渲染为点精灵时有效。</p></li><li><p>示例：</p><div class="language-glsl line-numbers-mode" data-highlighter="shiki" data-ext="glsl" data-title="glsl" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#6272A4;">/* 使用 gl_PointCoord 来计算片元颜色。 */</span></span>
<span class="line"><span style="color:#FF79C6;">void</span><span style="color:#50FA7B;"> main</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#FF79C6;">  float</span><span style="color:#F8F8F2;"> dist </span><span style="color:#FF79C6;">=</span><span style="color:#50FA7B;"> length</span><span style="color:#F8F8F2;">(gl_PointCoord </span><span style="color:#FF79C6;">-</span><span style="color:#50FA7B;"> vec2</span><span style="color:#F8F8F2;">(</span><span style="color:#BD93F9;">0.5</span><span style="color:#F8F8F2;">));</span></span>
<span class="line"><span style="color:#FF79C6;">  if</span><span style="color:#F8F8F2;"> (dist </span><span style="color:#FF79C6;">&lt;</span><span style="color:#BD93F9;"> 0.5</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">    gl_FragColor </span><span style="color:#FF79C6;">=</span><span style="color:#50FA7B;"> vec4</span><span style="color:#F8F8F2;">(</span><span style="color:#BD93F9;">1.0</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">0.0</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">0.0</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">1.0</span><span style="color:#F8F8F2;">);</span><span style="color:#6272A4;"> // 点中心为红色</span></span>
<span class="line"><span style="color:#F8F8F2;">  } </span><span style="color:#FF79C6;">else</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">    gl_FragColor </span><span style="color:#FF79C6;">=</span><span style="color:#50FA7B;"> vec4</span><span style="color:#F8F8F2;">(</span><span style="color:#BD93F9;">0.0</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">1.0</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">0.0</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">1.0</span><span style="color:#F8F8F2;">);</span><span style="color:#6272A4;"> // 点边缘为绿色</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p><code>gl_FragColor</code></p><ul><li><p>类型：<code>vec4</code></p></li><li><p>功能：表示当前片元的颜色。最终渲染结果将取决于此变量的值。</p></li><li><p>示例：</p><div class="language-glsl line-numbers-mode" data-highlighter="shiki" data-ext="glsl" data-title="glsl" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#6272A4;">/* 将颜色写入 gl_FragColor 中。 */</span></span>
<span class="line"><span style="color:#FF79C6;">void</span><span style="color:#50FA7B;"> main</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#F8F8F2;">  gl_FragColor </span><span style="color:#FF79C6;">=</span><span style="color:#50FA7B;"> vec4</span><span style="color:#F8F8F2;">(</span><span style="color:#BD93F9;">1.0</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">0.0</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">0.0</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">1.0</span><span style="color:#F8F8F2;">);</span><span style="color:#6272A4;"> // 红色</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p><code>gl_FragDepth</code></p><ul><li><p>类型：<code>float</code></p></li><li><p>功能：表示当前片元在深度缓冲中的深度值。如果修改此变量的值，则可以手动控制深度测试的通过情况。</p></li><li><p>示例：</p><div class="language-glsl line-numbers-mode" data-highlighter="shiki" data-ext="glsl" data-title="glsl" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#6272A4;">/* 设置深度值，确保物体不会被遮挡。 */</span></span>
<span class="line"><span style="color:#FF79C6;">void</span><span style="color:#50FA7B;"> main</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#F8F8F2;">  gl_FragDepth </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> 0.5</span><span style="color:#F8F8F2;">;</span><span style="color:#6272A4;"> // 将深度值设置为 0.5</span></span>
<span class="line"><span style="color:#F8F8F2;">  ...</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p><code>gl_FragData</code></p><ul><li><p>类型：<code>vec4[]</code></p></li><li><p>功能：表示当前片元写入的颜色值。如果使用了多个颜色缓冲，则可以使用此变量来指定写入不同的缓冲区。</p></li><li><p>示例：</p><div class="language-glsl line-numbers-mode" data-highlighter="shiki" data-ext="glsl" data-title="glsl" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#6272A4;">/* 使用多个颜色缓冲，分别写入不同的颜色值。 */</span></span>
<span class="line"><span style="color:#50FA7B;">layout</span><span style="color:#F8F8F2;">(location </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> 0</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">out</span><span style="color:#FF79C6;"> vec4</span><span style="color:#F8F8F2;"> outColor1;</span></span>
<span class="line"><span style="color:#50FA7B;">layout</span><span style="color:#F8F8F2;">(location </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> 1</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">out</span><span style="color:#FF79C6;"> vec4</span><span style="color:#F8F8F2;"> outColor2;</span></span>
<span class="line"><span style="color:#FF79C6;">void</span><span style="color:#50FA7B;"> main</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#F8F8F2;">  outColor1 </span><span style="color:#FF79C6;">=</span><span style="color:#50FA7B;"> vec4</span><span style="color:#F8F8F2;">(</span><span style="color:#BD93F9;">1.0</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">0.0</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">0.0</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">1.0</span><span style="color:#F8F8F2;">);</span><span style="color:#6272A4;"> // 将红色写入第一个颜色缓冲</span></span>
<span class="line"><span style="color:#F8F8F2;">  outColor2 </span><span style="color:#FF79C6;">=</span><span style="color:#50FA7B;"> vec4</span><span style="color:#F8F8F2;">(</span><span style="color:#BD93F9;">0.0</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">1.0</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">0.0</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">1.0</span><span style="color:#F8F8F2;">);</span><span style="color:#6272A4;"> // 将绿色写入第二个颜色缓冲</span></span>
<span class="line"><span style="color:#F8F8F2;">  ...</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p><code>gl_SampleMask</code></p><ul><li><p>功能：获取多重采样缓冲区中每个样本的掩码值。掩码值确定哪些样本需要参与着色器的执行。默认情况下，所有样本的掩码值均为 <code>0xFF</code>，表示所有样本都参与着色器的执行。</p></li><li><p>类型：<code>uint</code></p></li><li><p>示例：</p><div class="language-glsl line-numbers-mode" data-highlighter="shiki" data-ext="glsl" data-title="glsl" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#6272A4;">/* 获取当前片元着色器中第 0 个样本的掩码值。*/</span></span>
<span class="line"><span style="color:#FF79C6;">uint</span><span style="color:#F8F8F2;"> mask </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> gl_SampleMask[</span><span style="color:#BD93F9;">0</span><span style="color:#F8F8F2;">];</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p><code>gl_SampleID</code></p><ul><li><p>功能：获取当前片元所在的样本序号。序号从 0 开始，最多可以有 GL_MAX_SAMPLES 个样本。</p></li><li><p>类型：<code>int</code></p></li><li><p>示例：</p><div class="language-glsl line-numbers-mode" data-highlighter="shiki" data-ext="glsl" data-title="glsl" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#6272A4;">/* 获取当前片元所在的样本序号。*/</span></span>
<span class="line"><span style="color:#FF79C6;">int</span><span style="color:#F8F8F2;"> sampleID </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> gl_SampleID;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p><code>gl_SamplePosition</code></p><ul><li><p>功能：获取当前片元所在样本的位置坐标。位置坐标是归一化设备坐标系下的坐标。</p></li><li><p>类型：<code>vec2</code></p></li><li><p>示例：</p><div class="language-glsl line-numbers-mode" data-highlighter="shiki" data-ext="glsl" data-title="glsl" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#6272A4;">/* 获取当前片元所在样本的位置坐标。*/</span></span>
<span class="line"><span style="color:#FF79C6;">vec2</span><span style="color:#F8F8F2;"> position </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> gl_SamplePosition;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p><code>gl_PrimitiveID</code></p></li></ol><ul><li><p>功能：获取当前片元所在的图元 ID。</p></li><li><p>类型：<code>int</code></p></li><li><p>示例：</p><div class="language-glsl line-numbers-mode" data-highlighter="shiki" data-ext="glsl" data-title="glsl" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#6272A4;">/* 获取当前片元所在的图元 ID。*/</span></span>
<span class="line"><span style="color:#FF79C6;">int</span><span style="color:#F8F8F2;"> primitiveID </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> gl_PrimitiveID;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><ol start="11"><li><code>gl_ViewportIndex</code></li></ol><ul><li><p>功能：获取当前片元所在的视口的索引值。</p></li><li><p>类型：<code>int</code></p></li><li><p>示例：</p><div class="language-glsl line-numbers-mode" data-highlighter="shiki" data-ext="glsl" data-title="glsl" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#6272A4;">/* 获取当前片元所在的视口的索引值。*/</span></span>
<span class="line"><span style="color:#FF79C6;">int</span><span style="color:#F8F8F2;"> viewportIndex </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> gl_ViewportIndex;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><ol start="12"><li><code>gl_Layer</code></li></ol><ul><li><p>功能：获取当前片元所在的图元的渲染层次。</p></li><li><p>类型：<code>int</code></p></li><li><p>示例：</p><div class="language-glsl line-numbers-mode" data-highlighter="shiki" data-ext="glsl" data-title="glsl" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#6272A4;">/* 获取当前片元所在的图元的渲染层次。*/</span></span>
<span class="line"><span style="color:#FF79C6;">int</span><span style="color:#F8F8F2;"> layer </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> gl_Layer</span><span style="color:#F8F8F2;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><ol start="13"><li><code>gl_ClipDistance[]</code></li></ol><ul><li><p>功能：获取当前片元到每个裁剪平面的距离值。裁剪平面是由 <code>gl_ClipDistance</code> 顶点输出变量设置的。</p></li><li><p>类型：<code>float</code></p></li><li><p>示例：</p><div class="language-glsl line-numbers-mode" data-highlighter="shiki" data-ext="glsl" data-title="glsl" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#6272A4;">/* 获取当前片元到第 0 个裁剪平面的距离值。*/</span></span>
<span class="line"><span style="color:#FF79C6;">float</span><span style="color:#8BE9FD;"> distance</span><span style="color:#FF79C6;"> =</span><span style="color:#BD93F9;"> gl_ClipDistance</span><span style="color:#F8F8F2;">[</span><span style="color:#BD93F9;">0</span><span style="color:#F8F8F2;">];</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><ol start="14"><li><code>gl_FragStencilRef</code></li></ol><ul><li><p>功能：获取当前片元的模板测试参考值。参考值是由 <code>glStencilFuncSeparate</code> 函数设置的。</p></li><li><p>类型：<code>int</code></p></li><li><p>示例：</p><div class="language-glsl line-numbers-mode" data-highlighter="shiki" data-ext="glsl" data-title="glsl" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#6272A4;">/* 获取当前片元的模板测试参考值。*/</span></span>
<span class="line"><span style="color:#FF79C6;">int</span><span style="color:#F8F8F2;"> stencilRef </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> gl_FragStencilRef;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h2 id="精度限定符" tabindex="-1"><a class="header-anchor" href="#精度限定符"><span>精度限定符</span></a></h2><table><thead><tr><th>限定符</th><th>描述</th></tr></thead><tbody><tr><td>highp</td><td>满足顶点着色语言的最低要求。对片段着色语言是可选项</td></tr><tr><td>mediump</td><td>满足片段着色语言的最低要求，其对于范围和精度的要求必须不低于 lowp 并且不高于 highp</td></tr><tr><td>lowp</td><td>范围和精度可低于 mediump，但仍可以表示所有颜色通道的所有颜色值</td></tr></tbody></table><ol><li><p>精度限定符的使用格式：</p><div class="language-glsl line-numbers-mode" data-highlighter="shiki" data-ext="glsl" data-title="glsl" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#F8F8F2;">precision qualifier type precisionLevel;</span></span>
<span class="line"><span style="color:#6272A4;">//例如 </span></span>
<span class="line"><span style="color:#F8F8F2;">precision highp </span><span style="color:#FF79C6;">float</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">precision mediump </span><span style="color:#FF79C6;">float</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">precision lowp </span><span style="color:#FF79C6;">float</span><span style="color:#F8F8F2;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>precision</code>：表示精度限定符的关键字。</li><li><code>qualifier</code>：限定符的具体类型，包括 <code>lowp</code>、<code>mediump</code> 和 <code>highp</code>。</li><li><code>type</code>：需要指定精度的数据类型，例如 <code>float</code>、<code>vec2</code>、<code>mat3</code> 等。</li><li><code>precisionLevel</code>：指定数据类型的精度级别，必须是 <code>int</code> 值或常量表达式。</li></ul></li><li><p>精度限定符的作用：</p><ul><li>主要作用是控制变量存储的精度，可以用于性能优化，提高代码效率。</li><li>不同的 GPU 和移动设备支持的精度级别不同，使用精度限定符可以确保在不同设备上获得一致的运行结果。</li></ul></li><li><p>精度限定符的三种类型：</p><ul><li><code>lowp</code>：代表低精度，通常用于节省 GPU 资源。</li><li><code>mediump</code>：代表中等精度，通常用于平衡 GPU 资源和图像质量。</li><li><code>highp</code>：代表高精度，通常用于提高图像质量，但会消耗大量 GPU 资源。</li></ul></li></ol><p>举例说明：</p><div class="language-glsl line-numbers-mode" data-highlighter="shiki" data-ext="glsl" data-title="glsl" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#F8F8F2;">precision highp </span><span style="color:#FF79C6;">float</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#FF79C6;">vec2</span><span style="color:#F8F8F2;"> a [</span><span style="color:#BD93F9;">10</span><span style="color:#F8F8F2;">];</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>上述代码中，<code>a</code> 数组的元素将使用 <code>highp</code> 精度级别存储，这可能会占用较多的 GPU 资源，但可以获得更高的图像精度。</p>`,82))])}const t=a(p,[["render",i],["__file","glsl-vars.html.vue"]]),F=JSON.parse('{"path":"/glsl/glsl-vars.html","title":"GLSL的变量","lang":"en-US","frontmatter":{"title":"GLSL的变量","category":["GLSL"],"date":"2022-10-02T00:00:00.000Z","description":"基本数据类型变量 float 数据类型：单精度浮点数，占用 32 位（4 字节）内存。 取值范围：约为 -3.4 × 10^38 到 3.4 × 10^38，可以表示的有效数字位数为 6~7 位左右。 示例： int 数据类型：整型变量，占用 32 位（4 字节）内存。 取值范围：约为 -2.1 × 10^9 到 2.1 × 10^9。 示例： boo...","head":[["meta",{"property":"og:url","content":"https://luxiag.github.io/luxiag/blog/glsl/glsl-vars.html"}],["meta",{"property":"og:title","content":"GLSL的变量"}],["meta",{"property":"og:description","content":"基本数据类型变量 float 数据类型：单精度浮点数，占用 32 位（4 字节）内存。 取值范围：约为 -3.4 × 10^38 到 3.4 × 10^38，可以表示的有效数字位数为 6~7 位左右。 示例： int 数据类型：整型变量，占用 32 位（4 字节）内存。 取值范围：约为 -2.1 × 10^9 到 2.1 × 10^9。 示例： boo..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2024-10-31T11:40:02.000Z"}],["meta",{"property":"article:published_time","content":"2022-10-02T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-10-31T11:40:02.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"GLSL的变量\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-10-02T00:00:00.000Z\\",\\"dateModified\\":\\"2024-10-31T11:40:02.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"luxiag\\",\\"url\\":\\"https://luxiag.github.io/luxiag\\"}]}"]]},"headers":[{"level":2,"title":"基本数据类型变量","slug":"基本数据类型变量","link":"#基本数据类型变量","children":[]},{"level":2,"title":"向量类型变量","slug":"向量类型变量","link":"#向量类型变量","children":[]},{"level":2,"title":"数组类型变量","slug":"数组类型变量","link":"#数组类型变量","children":[]},{"level":2,"title":"矩阵类型变量","slug":"矩阵类型变量","link":"#矩阵类型变量","children":[]},{"level":2,"title":"结构体类型变量","slug":"结构体类型变量","link":"#结构体类型变量","children":[]},{"level":2,"title":"纹理类型变量","slug":"纹理类型变量","link":"#纹理类型变量","children":[]},{"level":2,"title":"修饰符类型变量","slug":"修饰符类型变量","link":"#修饰符类型变量","children":[{"level":3,"title":"uniforms","slug":"uniforms","link":"#uniforms","children":[]}]},{"level":2,"title":"特殊类型变量","slug":"特殊类型变量","link":"#特殊类型变量","children":[]},{"level":2,"title":"顶点着色器变量","slug":"顶点着色器变量","link":"#顶点着色器变量","children":[]},{"level":2,"title":"片段着色器","slug":"片段着色器","link":"#片段着色器","children":[]},{"level":2,"title":"精度限定符","slug":"精度限定符","link":"#精度限定符","children":[]}],"git":{"createdTime":1671175256000,"updatedTime":1730374802000,"contributors":[{"name":"luxiag","email":"luxiag@qq.com","commits":8},{"name":"卢祥","email":"example@qq.com","commits":2}]},"readingTime":{"minutes":26.3,"words":7890},"filePathRelative":"glsl/glsl-vars.md","localizedDate":"October 2, 2022","excerpt":"<h2>基本数据类型变量</h2>\\n<ol>\\n<li>\\n<p><code>float</code></p>\\n<ul>\\n<li>\\n<p>数据类型：单精度浮点数，占用 32 位（4 字节）内存。</p>\\n</li>\\n<li>\\n<p>取值范围：约为 -3.4 × 10^38 到 3.4 × 10^38，可以表示的有效数字位数为 6~7 位左右。</p>\\n</li>\\n<li>\\n<p>示例：</p>\\n<div class=\\"language-glsl line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"glsl\\" data-title=\\"glsl\\" style=\\"background-color:#282A36;color:#F8F8F2\\"><pre class=\\"shiki dracula vp-code\\"><code><span class=\\"line\\"><span style=\\"color:#FF79C6\\">float</span><span style=\\"color:#F8F8F2\\"> radius </span><span style=\\"color:#FF79C6\\">=</span><span style=\\"color:#BD93F9\\"> 1.0</span><span style=\\"color:#F8F8F2\\">;</span><span style=\\"color:#6272A4\\"> // 声明一个单精度浮点型变量 radius</span></span>\\n<span class=\\"line\\"><span style=\\"color:#FF79C6\\">float</span><span style=\\"color:#F8F8F2\\"> pi </span><span style=\\"color:#FF79C6\\">=</span><span style=\\"color:#BD93F9\\"> 3.14159</span><span style=\\"color:#F8F8F2\\">;</span><span style=\\"color:#6272A4\\"> // 声明一个单精度浮点型变量 pi</span></span>\\n<span class=\\"line\\"><span style=\\"color:#FF79C6\\">float</span><span style=\\"color:#F8F8F2\\"> volume </span><span style=\\"color:#FF79C6\\">=</span><span style=\\"color:#BD93F9\\"> 4.0</span><span style=\\"color:#FF79C6\\"> /</span><span style=\\"color:#BD93F9\\"> 3.0</span><span style=\\"color:#FF79C6\\"> *</span><span style=\\"color:#F8F8F2\\"> pi </span><span style=\\"color:#FF79C6\\">*</span><span style=\\"color:#8BE9FD\\"> pow</span><span style=\\"color:#F8F8F2\\">(radius, </span><span style=\\"color:#BD93F9\\">3.0</span><span style=\\"color:#F8F8F2\\">);</span><span style=\\"color:#6272A4\\"> // 计算球体的体积</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div></li>\\n</ul>\\n</li>\\n<li>\\n<p><code>int</code></p>\\n<ul>\\n<li>\\n<p>数据类型：整型变量，占用 32 位（4 字节）内存。</p>\\n</li>\\n<li>\\n<p>取值范围：约为 -2.1 × 10^9 到 2.1 × 10^9。</p>\\n</li>\\n<li>\\n<p>示例：</p>\\n<div class=\\"language-glsl line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"glsl\\" data-title=\\"glsl\\" style=\\"background-color:#282A36;color:#F8F8F2\\"><pre class=\\"shiki dracula vp-code\\"><code><span class=\\"line\\"><span style=\\"color:#FF79C6\\">int</span><span style=\\"color:#F8F8F2\\"> width </span><span style=\\"color:#FF79C6\\">=</span><span style=\\"color:#BD93F9\\"> 800</span><span style=\\"color:#F8F8F2\\">;</span><span style=\\"color:#6272A4\\"> // 声明一个整型变量 width，表示画布的宽度</span></span>\\n<span class=\\"line\\"><span style=\\"color:#FF79C6\\">int</span><span style=\\"color:#F8F8F2\\"> height </span><span style=\\"color:#FF79C6\\">=</span><span style=\\"color:#BD93F9\\"> 600</span><span style=\\"color:#F8F8F2\\">;</span><span style=\\"color:#6272A4\\"> // 声明一个整型变量 height，表示画布的高度</span></span>\\n<span class=\\"line\\"><span style=\\"color:#FF79C6\\">int</span><span style=\\"color:#F8F8F2\\"> area </span><span style=\\"color:#FF79C6\\">=</span><span style=\\"color:#F8F8F2\\"> width </span><span style=\\"color:#FF79C6\\">*</span><span style=\\"color:#F8F8F2\\"> height;</span><span style=\\"color:#6272A4\\"> // 计算画布的面积</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div></li>\\n</ul>\\n</li>\\n<li>\\n<p><code>bool</code></p>\\n<ul>\\n<li>\\n<p>数据类型：布尔型变量，只有 true 和 false 两个值，占用 8 位（1 字节）内存。</p>\\n</li>\\n<li>\\n<p>示例：</p>\\n<div class=\\"language-glsl line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"glsl\\" data-title=\\"glsl\\" style=\\"background-color:#282A36;color:#F8F8F2\\"><pre class=\\"shiki dracula vp-code\\"><code><span class=\\"line\\"><span style=\\"color:#FF79C6\\">bool</span><span style=\\"color:#F8F8F2\\"> isBlack </span><span style=\\"color:#FF79C6\\">=</span><span style=\\"color:#BD93F9\\"> true</span><span style=\\"color:#F8F8F2\\">;</span><span style=\\"color:#6272A4\\"> // 声明一个布尔型变量 isBlack，表示颜色是否为黑色</span></span>\\n<span class=\\"line\\"><span style=\\"color:#FF79C6\\">bool</span><span style=\\"color:#F8F8F2\\"> isWhite </span><span style=\\"color:#FF79C6\\">=</span><span style=\\"color:#BD93F9\\"> false</span><span style=\\"color:#F8F8F2\\">;</span><span style=\\"color:#6272A4\\"> // 声明一个布尔型变量 isWhite，表示颜色是否为白色</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div></li>\\n</ul>\\n</li>\\n<li>\\n<p><code>double</code></p>\\n<ul>\\n<li>\\n<p>数据类型：双精度浮点数，占用 64 位（8 字节）内存。</p>\\n</li>\\n<li>\\n<p>取值范围：约为 -1.7 × 10^308 到 1.7 × 10^308，可以表示的有效数字位数为 15~16 位左右。</p>\\n</li>\\n<li>\\n<p>示例：</p>\\n<div class=\\"language-glsl line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"glsl\\" data-title=\\"glsl\\" style=\\"background-color:#282A36;color:#F8F8F2\\"><pre class=\\"shiki dracula vp-code\\"><code><span class=\\"line\\"><span style=\\"color:#FF5555;font-style:italic;text-decoration:underline\\">double</span><span style=\\"color:#F8F8F2\\"> radius </span><span style=\\"color:#FF79C6\\">=</span><span style=\\"color:#BD93F9\\"> 1.0</span><span style=\\"color:#F8F8F2\\">;</span><span style=\\"color:#6272A4\\"> // 声明一个双精度浮点型变量 radius</span></span>\\n<span class=\\"line\\"><span style=\\"color:#FF5555;font-style:italic;text-decoration:underline\\">double</span><span style=\\"color:#F8F8F2\\"> pi </span><span style=\\"color:#FF79C6\\">=</span><span style=\\"color:#BD93F9\\"> 3.14159265358979</span><span style=\\"color:#F8F8F2\\">;</span><span style=\\"color:#6272A4\\"> // 声明一个双精度浮点型变量 pi</span></span>\\n<span class=\\"line\\"><span style=\\"color:#FF5555;font-style:italic;text-decoration:underline\\">double</span><span style=\\"color:#F8F8F2\\"> volume </span><span style=\\"color:#FF79C6\\">=</span><span style=\\"color:#BD93F9\\"> 4.0</span><span style=\\"color:#FF79C6\\"> /</span><span style=\\"color:#BD93F9\\"> 3.0</span><span style=\\"color:#FF79C6\\"> *</span><span style=\\"color:#F8F8F2\\"> pi </span><span style=\\"color:#FF79C6\\">*</span><span style=\\"color:#8BE9FD\\"> pow</span><span style=\\"color:#F8F8F2\\">(radius, </span><span style=\\"color:#BD93F9\\">3.0</span><span style=\\"color:#F8F8F2\\">);</span><span style=\\"color:#6272A4\\"> // 计算球体的体积</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div></li>\\n</ul>\\n</li>\\n<li>\\n<p><code>uint</code></p>\\n<ul>\\n<li>\\n<p>数据类型：无符号整型变量，占用 32 位（4 字节）内存。</p>\\n</li>\\n<li>\\n<p>取值范围：约为 0 到 4.2 × 10^9。</p>\\n</li>\\n<li>\\n<p>示例：</p>\\n<div class=\\"language-glsl line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"glsl\\" data-title=\\"glsl\\" style=\\"background-color:#282A36;color:#F8F8F2\\"><pre class=\\"shiki dracula vp-code\\"><code><span class=\\"line\\"><span style=\\"color:#FF79C6\\">uint</span><span style=\\"color:#F8F8F2\\"> num1 </span><span style=\\"color:#FF79C6\\">=</span><span style=\\"color:#BD93F9\\"> 123</span><span style=\\"color:#F8F8F2\\">;</span><span style=\\"color:#6272A4\\"> // 声明一个无符号整型变量 num1</span></span>\\n<span class=\\"line\\"><span style=\\"color:#FF79C6\\">uint</span><span style=\\"color:#F8F8F2\\"> num2 </span><span style=\\"color:#FF79C6\\">=</span><span style=\\"color:#BD93F9\\"> 456</span><span style=\\"color:#F8F8F2\\">;</span><span style=\\"color:#6272A4\\"> // 声明一个无符号整型变量 num2</span></span>\\n<span class=\\"line\\"><span style=\\"color:#FF79C6\\">uint</span><span style=\\"color:#F8F8F2\\"> sum </span><span style=\\"color:#FF79C6\\">=</span><span style=\\"color:#F8F8F2\\"> num1 </span><span style=\\"color:#FF79C6\\">+</span><span style=\\"color:#F8F8F2\\"> num2;</span><span style=\\"color:#6272A4\\"> // 计算 num1 和 num2 的和</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div></li>\\n</ul>\\n</li>\\n</ol>","autoDesc":true}');export{t as comp,F as data};
