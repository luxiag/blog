import{_ as me,i as Q,l as $,q as ye,c as ge,a as ee,d as ae,o as Ce}from"./app-CbGq5X0e.js";import{ad as xe,M as j,q as Be,aL as se,a as h,aY as G,V as f,aX as C,aF as T,b0 as K,C as be,m as w,e as _,aT as de,u as N,b1 as Te,D as te,b2 as we,n as Me,S as ne,P as le,aN as Se,aK as De,a8 as re,b3 as Ae,W as oe,b4 as Ee,A as Pe,z as _e,b5 as Re,T as ke,b6 as ie}from"./three.module-DElcEsb7.js";import{O as I}from"./OrbitControls-COOjmuLA.js";import{D as Oe}from"./DRACOLoader-BnAm8R4p.js";import{G as Ue}from"./GLTFLoader-Def6ni-K.js";import{R as Le}from"./RGBELoader-CbWxVjwZ.js";const Y={name:"CopyShader",uniforms:{tDiffuse:{value:null},opacity:{value:1}},vertexShader:`

		varying vec2 vUv;

		void main() {

			vUv = uv;
			gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );

		}`,fragmentShader:`

		uniform float opacity;

		uniform sampler2D tDiffuse;

		varying vec2 vUv;

		void main() {

			vec4 texel = texture2D( tDiffuse, vUv );
			gl_FragColor = opacity * texel;


		}`};class U{constructor(){this.isPass=!0,this.enabled=!0,this.needsSwap=!0,this.clear=!1,this.renderToScreen=!1}setSize(){}render(){console.error("THREE.Pass: .render() must be implemented in derived pass.")}dispose(){}}const ze=new xe(-1,1,1,-1,0,1);class je extends Be{constructor(){super(),this.setAttribute("position",new se([-1,3,0,-1,-1,0,3,-1,0],3)),this.setAttribute("uv",new se([0,2,0,0,2,0],2))}}const Ne=new je;class q{constructor(e){this._mesh=new j(Ne,e)}dispose(){this._mesh.geometry.dispose()}render(e){e.render(this._mesh,ze)}get material(){return this._mesh.material}set material(e){this._mesh.material=e}}class Z extends U{constructor(e,t){super(),this.textureID=t!==void 0?t:"tDiffuse",e instanceof h?(this.uniforms=e.uniforms,this.material=e):e&&(this.uniforms=G.clone(e.uniforms),this.material=new h({name:e.name!==void 0?e.name:"unspecified",defines:Object.assign({},e.defines),uniforms:this.uniforms,vertexShader:e.vertexShader,fragmentShader:e.fragmentShader})),this.fsQuad=new q(this.material)}render(e,t,s){this.uniforms[this.textureID]&&(this.uniforms[this.textureID].value=s.texture),this.fsQuad.material=this.material,this.renderToScreen?(e.setRenderTarget(null),this.fsQuad.render(e)):(e.setRenderTarget(t),this.clear&&e.clear(e.autoClearColor,e.autoClearDepth,e.autoClearStencil),this.fsQuad.render(e))}dispose(){this.material.dispose(),this.fsQuad.dispose()}}class fe extends U{constructor(e,t){super(),this.scene=e,this.camera=t,this.clear=!0,this.needsSwap=!1,this.inverse=!1}render(e,t,s){const n=e.getContext(),a=e.state;a.buffers.color.setMask(!1),a.buffers.depth.setMask(!1),a.buffers.color.setLocked(!0),a.buffers.depth.setLocked(!0);let l,b;this.inverse?(l=0,b=1):(l=1,b=0),a.buffers.stencil.setTest(!0),a.buffers.stencil.setOp(n.REPLACE,n.REPLACE,n.REPLACE),a.buffers.stencil.setFunc(n.ALWAYS,l,4294967295),a.buffers.stencil.setClear(b),a.buffers.stencil.setLocked(!0),e.setRenderTarget(s),this.clear&&e.clear(),e.render(this.scene,this.camera),e.setRenderTarget(t),this.clear&&e.clear(),e.render(this.scene,this.camera),a.buffers.color.setLocked(!1),a.buffers.depth.setLocked(!1),a.buffers.color.setMask(!0),a.buffers.depth.setMask(!0),a.buffers.stencil.setLocked(!1),a.buffers.stencil.setFunc(n.EQUAL,1,4294967295),a.buffers.stencil.setOp(n.KEEP,n.KEEP,n.KEEP),a.buffers.stencil.setLocked(!0)}}class Ve extends U{constructor(){super(),this.needsSwap=!1}render(e){e.state.buffers.stencil.setLocked(!1),e.state.buffers.stencil.setTest(!1)}}class H{constructor(e,t){if(this.renderer=e,this._pixelRatio=e.getPixelRatio(),t===void 0){const s=e.getSize(new f);this._width=s.width,this._height=s.height,t=new C(this._width*this._pixelRatio,this._height*this._pixelRatio,{type:T}),t.texture.name="EffectComposer.rt1"}else this._width=t.width,this._height=t.height;this.renderTarget1=t,this.renderTarget2=t.clone(),this.renderTarget2.texture.name="EffectComposer.rt2",this.writeBuffer=this.renderTarget1,this.readBuffer=this.renderTarget2,this.renderToScreen=!0,this.passes=[],this.copyPass=new Z(Y),this.copyPass.material.blending=K,this.clock=new be}swapBuffers(){const e=this.readBuffer;this.readBuffer=this.writeBuffer,this.writeBuffer=e}addPass(e){this.passes.push(e),e.setSize(this._width*this._pixelRatio,this._height*this._pixelRatio)}insertPass(e,t){this.passes.splice(t,0,e),e.setSize(this._width*this._pixelRatio,this._height*this._pixelRatio)}removePass(e){const t=this.passes.indexOf(e);t!==-1&&this.passes.splice(t,1)}isLastEnabledPass(e){for(let t=e+1;t<this.passes.length;t++)if(this.passes[t].enabled)return!1;return!0}render(e){e===void 0&&(e=this.clock.getDelta());const t=this.renderer.getRenderTarget();let s=!1;for(let n=0,a=this.passes.length;n<a;n++){const l=this.passes[n];if(l.enabled!==!1){if(l.renderToScreen=this.renderToScreen&&this.isLastEnabledPass(n),l.render(this.renderer,this.writeBuffer,this.readBuffer,e,s),l.needsSwap){if(s){const b=this.renderer.getContext(),o=this.renderer.state.buffers.stencil;o.setFunc(b.NOTEQUAL,1,4294967295),this.copyPass.render(this.renderer,this.writeBuffer,this.readBuffer,e),o.setFunc(b.EQUAL,1,4294967295)}this.swapBuffers()}fe!==void 0&&(l instanceof fe?s=!0:l instanceof Ve&&(s=!1))}}this.renderer.setRenderTarget(t)}reset(e){if(e===void 0){const t=this.renderer.getSize(new f);this._pixelRatio=this.renderer.getPixelRatio(),this._width=t.width,this._height=t.height,e=this.renderTarget1.clone(),e.setSize(this._width*this._pixelRatio,this._height*this._pixelRatio)}this.renderTarget1.dispose(),this.renderTarget2.dispose(),this.renderTarget1=e,this.renderTarget2=e.clone(),this.writeBuffer=this.renderTarget1,this.readBuffer=this.renderTarget2}setSize(e,t){this._width=e,this._height=t;const s=this._width*this._pixelRatio,n=this._height*this._pixelRatio;this.renderTarget1.setSize(s,n),this.renderTarget2.setSize(s,n);for(let a=0;a<this.passes.length;a++)this.passes[a].setSize(s,n)}setPixelRatio(e){this._pixelRatio=e,this.setSize(this._width,this._height)}dispose(){this.renderTarget1.dispose(),this.renderTarget2.dispose(),this.copyPass.dispose()}}class X extends U{constructor(e,t,s=null,n=null,a=null){super(),this.scene=e,this.camera=t,this.overrideMaterial=s,this.clearColor=n,this.clearAlpha=a,this.clear=!0,this.clearDepth=!1,this.needsSwap=!1,this._oldClearColor=new w}render(e,t,s){const n=e.autoClear;e.autoClear=!1;let a,l;this.overrideMaterial!==null&&(l=this.scene.overrideMaterial,this.scene.overrideMaterial=this.overrideMaterial),this.clearColor!==null&&(e.getClearColor(this._oldClearColor),e.setClearColor(this.clearColor,e.getClearAlpha())),this.clearAlpha!==null&&(a=e.getClearAlpha(),e.setClearAlpha(this.clearAlpha)),this.clearDepth==!0&&e.clearDepth(),e.setRenderTarget(this.renderToScreen?null:s),this.clear===!0&&e.clear(e.autoClearColor,e.autoClearDepth,e.autoClearStencil),e.render(this.scene,this.camera),this.clearColor!==null&&e.setClearColor(this._oldClearColor),this.clearAlpha!==null&&e.setClearAlpha(a),this.overrideMaterial!==null&&(this.scene.overrideMaterial=l),e.autoClear=n}}const He={name:"LuminosityHighPassShader",shaderID:"luminosityHighPass",uniforms:{tDiffuse:{value:null},luminosityThreshold:{value:1},smoothWidth:{value:1},defaultColor:{value:new w(0)},defaultOpacity:{value:0}},vertexShader:`

		varying vec2 vUv;

		void main() {

			vUv = uv;

			gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );

		}`,fragmentShader:`

		uniform sampler2D tDiffuse;
		uniform vec3 defaultColor;
		uniform float defaultOpacity;
		uniform float luminosityThreshold;
		uniform float smoothWidth;

		varying vec2 vUv;

		void main() {

			vec4 texel = texture2D( tDiffuse, vUv );

			float v = luminance( texel.xyz );

			vec4 outputColor = vec4( defaultColor.rgb, defaultOpacity );

			float alpha = smoothstep( luminosityThreshold, luminosityThreshold + smoothWidth, v );

			gl_FragColor = mix( outputColor, texel, alpha );

		}`};class R extends U{constructor(e,t,s,n){super(),this.strength=t!==void 0?t:1,this.radius=s,this.threshold=n,this.resolution=e!==void 0?new f(e.x,e.y):new f(256,256),this.clearColor=new w(0,0,0),this.renderTargetsHorizontal=[],this.renderTargetsVertical=[],this.nMips=5;let a=Math.round(this.resolution.x/2),l=Math.round(this.resolution.y/2);this.renderTargetBright=new C(a,l,{type:T}),this.renderTargetBright.texture.name="UnrealBloomPass.bright",this.renderTargetBright.texture.generateMipmaps=!1;for(let i=0;i<this.nMips;i++){const m=new C(a,l,{type:T});m.texture.name="UnrealBloomPass.h"+i,m.texture.generateMipmaps=!1,this.renderTargetsHorizontal.push(m);const u=new C(a,l,{type:T});u.texture.name="UnrealBloomPass.v"+i,u.texture.generateMipmaps=!1,this.renderTargetsVertical.push(u),a=Math.round(a/2),l=Math.round(l/2)}const b=He;this.highPassUniforms=G.clone(b.uniforms),this.highPassUniforms.luminosityThreshold.value=n,this.highPassUniforms.smoothWidth.value=.01,this.materialHighPassFilter=new h({uniforms:this.highPassUniforms,vertexShader:b.vertexShader,fragmentShader:b.fragmentShader}),this.separableBlurMaterials=[];const o=[3,5,7,9,11];a=Math.round(this.resolution.x/2),l=Math.round(this.resolution.y/2);for(let i=0;i<this.nMips;i++)this.separableBlurMaterials.push(this.getSeperableBlurMaterial(o[i])),this.separableBlurMaterials[i].uniforms.invSize.value=new f(1/a,1/l),a=Math.round(a/2),l=Math.round(l/2);this.compositeMaterial=this.getCompositeMaterial(this.nMips),this.compositeMaterial.uniforms.blurTexture1.value=this.renderTargetsVertical[0].texture,this.compositeMaterial.uniforms.blurTexture2.value=this.renderTargetsVertical[1].texture,this.compositeMaterial.uniforms.blurTexture3.value=this.renderTargetsVertical[2].texture,this.compositeMaterial.uniforms.blurTexture4.value=this.renderTargetsVertical[3].texture,this.compositeMaterial.uniforms.blurTexture5.value=this.renderTargetsVertical[4].texture,this.compositeMaterial.uniforms.bloomStrength.value=t,this.compositeMaterial.uniforms.bloomRadius.value=.1;const p=[1,.8,.6,.4,.2];this.compositeMaterial.uniforms.bloomFactors.value=p,this.bloomTintColors=[new _(1,1,1),new _(1,1,1),new _(1,1,1),new _(1,1,1),new _(1,1,1)],this.compositeMaterial.uniforms.bloomTintColors.value=this.bloomTintColors;const x=Y;this.copyUniforms=G.clone(x.uniforms),this.blendMaterial=new h({uniforms:this.copyUniforms,vertexShader:x.vertexShader,fragmentShader:x.fragmentShader,blending:de,depthTest:!1,depthWrite:!1,transparent:!0}),this.enabled=!0,this.needsSwap=!1,this._oldClearColor=new w,this.oldClearAlpha=1,this.basic=new N,this.fsQuad=new q(null)}dispose(){for(let e=0;e<this.renderTargetsHorizontal.length;e++)this.renderTargetsHorizontal[e].dispose();for(let e=0;e<this.renderTargetsVertical.length;e++)this.renderTargetsVertical[e].dispose();this.renderTargetBright.dispose();for(let e=0;e<this.separableBlurMaterials.length;e++)this.separableBlurMaterials[e].dispose();this.compositeMaterial.dispose(),this.blendMaterial.dispose(),this.basic.dispose(),this.fsQuad.dispose()}setSize(e,t){let s=Math.round(e/2),n=Math.round(t/2);this.renderTargetBright.setSize(s,n);for(let a=0;a<this.nMips;a++)this.renderTargetsHorizontal[a].setSize(s,n),this.renderTargetsVertical[a].setSize(s,n),this.separableBlurMaterials[a].uniforms.invSize.value=new f(1/s,1/n),s=Math.round(s/2),n=Math.round(n/2)}render(e,t,s,n,a){e.getClearColor(this._oldClearColor),this.oldClearAlpha=e.getClearAlpha();const l=e.autoClear;e.autoClear=!1,e.setClearColor(this.clearColor,0),a&&e.state.buffers.stencil.setTest(!1),this.renderToScreen&&(this.fsQuad.material=this.basic,this.basic.map=s.texture,e.setRenderTarget(null),e.clear(),this.fsQuad.render(e)),this.highPassUniforms.tDiffuse.value=s.texture,this.highPassUniforms.luminosityThreshold.value=this.threshold,this.fsQuad.material=this.materialHighPassFilter,e.setRenderTarget(this.renderTargetBright),e.clear(),this.fsQuad.render(e);let b=this.renderTargetBright;for(let o=0;o<this.nMips;o++)this.fsQuad.material=this.separableBlurMaterials[o],this.separableBlurMaterials[o].uniforms.colorTexture.value=b.texture,this.separableBlurMaterials[o].uniforms.direction.value=R.BlurDirectionX,e.setRenderTarget(this.renderTargetsHorizontal[o]),e.clear(),this.fsQuad.render(e),this.separableBlurMaterials[o].uniforms.colorTexture.value=this.renderTargetsHorizontal[o].texture,this.separableBlurMaterials[o].uniforms.direction.value=R.BlurDirectionY,e.setRenderTarget(this.renderTargetsVertical[o]),e.clear(),this.fsQuad.render(e),b=this.renderTargetsVertical[o];this.fsQuad.material=this.compositeMaterial,this.compositeMaterial.uniforms.bloomStrength.value=this.strength,this.compositeMaterial.uniforms.bloomRadius.value=this.radius,this.compositeMaterial.uniforms.bloomTintColors.value=this.bloomTintColors,e.setRenderTarget(this.renderTargetsHorizontal[0]),e.clear(),this.fsQuad.render(e),this.fsQuad.material=this.blendMaterial,this.copyUniforms.tDiffuse.value=this.renderTargetsHorizontal[0].texture,a&&e.state.buffers.stencil.setTest(!0),this.renderToScreen?(e.setRenderTarget(null),this.fsQuad.render(e)):(e.setRenderTarget(s),this.fsQuad.render(e)),e.setClearColor(this._oldClearColor,this.oldClearAlpha),e.autoClear=l}getSeperableBlurMaterial(e){const t=[];for(let s=0;s<e;s++)t.push(.39894*Math.exp(-.5*s*s/(e*e))/e);return new h({defines:{KERNEL_RADIUS:e},uniforms:{colorTexture:{value:null},invSize:{value:new f(.5,.5)},direction:{value:new f(.5,.5)},gaussianCoefficients:{value:t}},vertexShader:`varying vec2 vUv;
				void main() {
					vUv = uv;
					gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );
				}`,fragmentShader:`#include <common>
				varying vec2 vUv;
				uniform sampler2D colorTexture;
				uniform vec2 invSize;
				uniform vec2 direction;
				uniform float gaussianCoefficients[KERNEL_RADIUS];

				void main() {
					float weightSum = gaussianCoefficients[0];
					vec3 diffuseSum = texture2D( colorTexture, vUv ).rgb * weightSum;
					for( int i = 1; i < KERNEL_RADIUS; i ++ ) {
						float x = float(i);
						float w = gaussianCoefficients[i];
						vec2 uvOffset = direction * invSize * x;
						vec3 sample1 = texture2D( colorTexture, vUv + uvOffset ).rgb;
						vec3 sample2 = texture2D( colorTexture, vUv - uvOffset ).rgb;
						diffuseSum += (sample1 + sample2) * w;
						weightSum += 2.0 * w;
					}
					gl_FragColor = vec4(diffuseSum/weightSum, 1.0);
				}`})}getCompositeMaterial(e){return new h({defines:{NUM_MIPS:e},uniforms:{blurTexture1:{value:null},blurTexture2:{value:null},blurTexture3:{value:null},blurTexture4:{value:null},blurTexture5:{value:null},bloomStrength:{value:1},bloomFactors:{value:null},bloomTintColors:{value:null},bloomRadius:{value:0}},vertexShader:`varying vec2 vUv;
				void main() {
					vUv = uv;
					gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );
				}`,fragmentShader:`varying vec2 vUv;
				uniform sampler2D blurTexture1;
				uniform sampler2D blurTexture2;
				uniform sampler2D blurTexture3;
				uniform sampler2D blurTexture4;
				uniform sampler2D blurTexture5;
				uniform float bloomStrength;
				uniform float bloomRadius;
				uniform float bloomFactors[NUM_MIPS];
				uniform vec3 bloomTintColors[NUM_MIPS];

				float lerpBloomFactor(const in float factor) {
					float mirrorFactor = 1.2 - factor;
					return mix(factor, mirrorFactor, bloomRadius);
				}

				void main() {
					gl_FragColor = bloomStrength * ( lerpBloomFactor(bloomFactors[0]) * vec4(bloomTintColors[0], 1.0) * texture2D(blurTexture1, vUv) +
						lerpBloomFactor(bloomFactors[1]) * vec4(bloomTintColors[1], 1.0) * texture2D(blurTexture2, vUv) +
						lerpBloomFactor(bloomFactors[2]) * vec4(bloomTintColors[2], 1.0) * texture2D(blurTexture3, vUv) +
						lerpBloomFactor(bloomFactors[3]) * vec4(bloomTintColors[3], 1.0) * texture2D(blurTexture4, vUv) +
						lerpBloomFactor(bloomFactors[4]) * vec4(bloomTintColors[4], 1.0) * texture2D(blurTexture5, vUv) );
				}`})}}R.BlurDirectionX=new f(1,0);R.BlurDirectionY=new f(0,1);class D extends U{constructor(e,t,s,n){super(),this.renderScene=t,this.renderCamera=s,this.selectedObjects=n!==void 0?n:[],this.visibleEdgeColor=new w(1,1,1),this.hiddenEdgeColor=new w(.1,.04,.02),this.edgeGlow=0,this.usePatternTexture=!1,this.edgeThickness=1,this.edgeStrength=3,this.downSampleRatio=2,this.pulsePeriod=0,this._visibilityCache=new Map,this._selectionCache=new Set,this.resolution=e!==void 0?new f(e.x,e.y):new f(256,256);const a=Math.round(this.resolution.x/this.downSampleRatio),l=Math.round(this.resolution.y/this.downSampleRatio);this.renderTargetMaskBuffer=new C(this.resolution.x,this.resolution.y),this.renderTargetMaskBuffer.texture.name="OutlinePass.mask",this.renderTargetMaskBuffer.texture.generateMipmaps=!1,this.depthMaterial=new Te,this.depthMaterial.side=te,this.depthMaterial.depthPacking=we,this.depthMaterial.blending=K,this.prepareMaskMaterial=this.getPrepareMaskMaterial(),this.prepareMaskMaterial.side=te,this.prepareMaskMaterial.fragmentShader=x(this.prepareMaskMaterial.fragmentShader,this.renderCamera),this.renderTargetDepthBuffer=new C(this.resolution.x,this.resolution.y,{type:T}),this.renderTargetDepthBuffer.texture.name="OutlinePass.depth",this.renderTargetDepthBuffer.texture.generateMipmaps=!1,this.renderTargetMaskDownSampleBuffer=new C(a,l,{type:T}),this.renderTargetMaskDownSampleBuffer.texture.name="OutlinePass.depthDownSample",this.renderTargetMaskDownSampleBuffer.texture.generateMipmaps=!1,this.renderTargetBlurBuffer1=new C(a,l,{type:T}),this.renderTargetBlurBuffer1.texture.name="OutlinePass.blur1",this.renderTargetBlurBuffer1.texture.generateMipmaps=!1,this.renderTargetBlurBuffer2=new C(Math.round(a/2),Math.round(l/2),{type:T}),this.renderTargetBlurBuffer2.texture.name="OutlinePass.blur2",this.renderTargetBlurBuffer2.texture.generateMipmaps=!1,this.edgeDetectionMaterial=this.getEdgeDetectionMaterial(),this.renderTargetEdgeBuffer1=new C(a,l,{type:T}),this.renderTargetEdgeBuffer1.texture.name="OutlinePass.edge1",this.renderTargetEdgeBuffer1.texture.generateMipmaps=!1,this.renderTargetEdgeBuffer2=new C(Math.round(a/2),Math.round(l/2),{type:T}),this.renderTargetEdgeBuffer2.texture.name="OutlinePass.edge2",this.renderTargetEdgeBuffer2.texture.generateMipmaps=!1;const b=4,o=4;this.separableBlurMaterial1=this.getSeperableBlurMaterial(b),this.separableBlurMaterial1.uniforms.texSize.value.set(a,l),this.separableBlurMaterial1.uniforms.kernelRadius.value=1,this.separableBlurMaterial2=this.getSeperableBlurMaterial(o),this.separableBlurMaterial2.uniforms.texSize.value.set(Math.round(a/2),Math.round(l/2)),this.separableBlurMaterial2.uniforms.kernelRadius.value=o,this.overlayMaterial=this.getOverlayMaterial();const p=Y;this.copyUniforms=G.clone(p.uniforms),this.materialCopy=new h({uniforms:this.copyUniforms,vertexShader:p.vertexShader,fragmentShader:p.fragmentShader,blending:K,depthTest:!1,depthWrite:!1}),this.enabled=!0,this.needsSwap=!1,this._oldClearColor=new w,this.oldClearAlpha=1,this.fsQuad=new q(null),this.tempPulseColor1=new w,this.tempPulseColor2=new w,this.textureMatrix=new Me;function x(i,m){const u=m.isPerspectiveCamera?"perspective":"orthographic";return i.replace(/DEPTH_TO_VIEW_Z/g,u+"DepthToViewZ")}}dispose(){this.renderTargetMaskBuffer.dispose(),this.renderTargetDepthBuffer.dispose(),this.renderTargetMaskDownSampleBuffer.dispose(),this.renderTargetBlurBuffer1.dispose(),this.renderTargetBlurBuffer2.dispose(),this.renderTargetEdgeBuffer1.dispose(),this.renderTargetEdgeBuffer2.dispose(),this.depthMaterial.dispose(),this.prepareMaskMaterial.dispose(),this.edgeDetectionMaterial.dispose(),this.separableBlurMaterial1.dispose(),this.separableBlurMaterial2.dispose(),this.overlayMaterial.dispose(),this.materialCopy.dispose(),this.fsQuad.dispose()}setSize(e,t){this.renderTargetMaskBuffer.setSize(e,t),this.renderTargetDepthBuffer.setSize(e,t);let s=Math.round(e/this.downSampleRatio),n=Math.round(t/this.downSampleRatio);this.renderTargetMaskDownSampleBuffer.setSize(s,n),this.renderTargetBlurBuffer1.setSize(s,n),this.renderTargetEdgeBuffer1.setSize(s,n),this.separableBlurMaterial1.uniforms.texSize.value.set(s,n),s=Math.round(s/2),n=Math.round(n/2),this.renderTargetBlurBuffer2.setSize(s,n),this.renderTargetEdgeBuffer2.setSize(s,n),this.separableBlurMaterial2.uniforms.texSize.value.set(s,n)}updateSelectionCache(){const e=this._selectionCache;function t(s){s.isMesh&&e.add(s)}e.clear();for(let s=0;s<this.selectedObjects.length;s++)this.selectedObjects[s].traverse(t)}changeVisibilityOfSelectedObjects(e){const t=this._visibilityCache;for(const s of this._selectionCache)e===!0?s.visible=t.get(s):(t.set(s,s.visible),s.visible=e)}changeVisibilityOfNonSelectedObjects(e){const t=this._visibilityCache,s=this._selectionCache;function n(a){if(a.isMesh||a.isSprite){if(!s.has(a)){const l=a.visible;(e===!1||t.get(a)===!0)&&(a.visible=e),t.set(a,l)}}else(a.isPoints||a.isLine)&&(e===!0?a.visible=t.get(a):(t.set(a,a.visible),a.visible=e))}this.renderScene.traverse(n)}updateTextureMatrix(){this.textureMatrix.set(.5,0,0,.5,0,.5,0,.5,0,0,.5,.5,0,0,0,1),this.textureMatrix.multiply(this.renderCamera.projectionMatrix),this.textureMatrix.multiply(this.renderCamera.matrixWorldInverse)}render(e,t,s,n,a){if(this.selectedObjects.length>0){e.getClearColor(this._oldClearColor),this.oldClearAlpha=e.getClearAlpha();const l=e.autoClear;e.autoClear=!1,a&&e.state.buffers.stencil.setTest(!1),e.setClearColor(16777215,1),this.updateSelectionCache(),this.changeVisibilityOfSelectedObjects(!1);const b=this.renderScene.background;if(this.renderScene.background=null,this.renderScene.overrideMaterial=this.depthMaterial,e.setRenderTarget(this.renderTargetDepthBuffer),e.clear(),e.render(this.renderScene,this.renderCamera),this.changeVisibilityOfSelectedObjects(!0),this._visibilityCache.clear(),this.updateTextureMatrix(),this.changeVisibilityOfNonSelectedObjects(!1),this.renderScene.overrideMaterial=this.prepareMaskMaterial,this.prepareMaskMaterial.uniforms.cameraNearFar.value.set(this.renderCamera.near,this.renderCamera.far),this.prepareMaskMaterial.uniforms.depthTexture.value=this.renderTargetDepthBuffer.texture,this.prepareMaskMaterial.uniforms.textureMatrix.value=this.textureMatrix,e.setRenderTarget(this.renderTargetMaskBuffer),e.clear(),e.render(this.renderScene,this.renderCamera),this.renderScene.overrideMaterial=null,this.changeVisibilityOfNonSelectedObjects(!0),this._visibilityCache.clear(),this._selectionCache.clear(),this.renderScene.background=b,this.fsQuad.material=this.materialCopy,this.copyUniforms.tDiffuse.value=this.renderTargetMaskBuffer.texture,e.setRenderTarget(this.renderTargetMaskDownSampleBuffer),e.clear(),this.fsQuad.render(e),this.tempPulseColor1.copy(this.visibleEdgeColor),this.tempPulseColor2.copy(this.hiddenEdgeColor),this.pulsePeriod>0){const o=.625+Math.cos(performance.now()*.01/this.pulsePeriod)*.75/2;this.tempPulseColor1.multiplyScalar(o),this.tempPulseColor2.multiplyScalar(o)}this.fsQuad.material=this.edgeDetectionMaterial,this.edgeDetectionMaterial.uniforms.maskTexture.value=this.renderTargetMaskDownSampleBuffer.texture,this.edgeDetectionMaterial.uniforms.texSize.value.set(this.renderTargetMaskDownSampleBuffer.width,this.renderTargetMaskDownSampleBuffer.height),this.edgeDetectionMaterial.uniforms.visibleEdgeColor.value=this.tempPulseColor1,this.edgeDetectionMaterial.uniforms.hiddenEdgeColor.value=this.tempPulseColor2,e.setRenderTarget(this.renderTargetEdgeBuffer1),e.clear(),this.fsQuad.render(e),this.fsQuad.material=this.separableBlurMaterial1,this.separableBlurMaterial1.uniforms.colorTexture.value=this.renderTargetEdgeBuffer1.texture,this.separableBlurMaterial1.uniforms.direction.value=D.BlurDirectionX,this.separableBlurMaterial1.uniforms.kernelRadius.value=this.edgeThickness,e.setRenderTarget(this.renderTargetBlurBuffer1),e.clear(),this.fsQuad.render(e),this.separableBlurMaterial1.uniforms.colorTexture.value=this.renderTargetBlurBuffer1.texture,this.separableBlurMaterial1.uniforms.direction.value=D.BlurDirectionY,e.setRenderTarget(this.renderTargetEdgeBuffer1),e.clear(),this.fsQuad.render(e),this.fsQuad.material=this.separableBlurMaterial2,this.separableBlurMaterial2.uniforms.colorTexture.value=this.renderTargetEdgeBuffer1.texture,this.separableBlurMaterial2.uniforms.direction.value=D.BlurDirectionX,e.setRenderTarget(this.renderTargetBlurBuffer2),e.clear(),this.fsQuad.render(e),this.separableBlurMaterial2.uniforms.colorTexture.value=this.renderTargetBlurBuffer2.texture,this.separableBlurMaterial2.uniforms.direction.value=D.BlurDirectionY,e.setRenderTarget(this.renderTargetEdgeBuffer2),e.clear(),this.fsQuad.render(e),this.fsQuad.material=this.overlayMaterial,this.overlayMaterial.uniforms.maskTexture.value=this.renderTargetMaskBuffer.texture,this.overlayMaterial.uniforms.edgeTexture1.value=this.renderTargetEdgeBuffer1.texture,this.overlayMaterial.uniforms.edgeTexture2.value=this.renderTargetEdgeBuffer2.texture,this.overlayMaterial.uniforms.patternTexture.value=this.patternTexture,this.overlayMaterial.uniforms.edgeStrength.value=this.edgeStrength,this.overlayMaterial.uniforms.edgeGlow.value=this.edgeGlow,this.overlayMaterial.uniforms.usePatternTexture.value=this.usePatternTexture,a&&e.state.buffers.stencil.setTest(!0),e.setRenderTarget(s),this.fsQuad.render(e),e.setClearColor(this._oldClearColor,this.oldClearAlpha),e.autoClear=l}this.renderToScreen&&(this.fsQuad.material=this.materialCopy,this.copyUniforms.tDiffuse.value=s.texture,e.setRenderTarget(null),this.fsQuad.render(e))}getPrepareMaskMaterial(){return new h({uniforms:{depthTexture:{value:null},cameraNearFar:{value:new f(.5,.5)},textureMatrix:{value:null}},vertexShader:`#include <morphtarget_pars_vertex>
				#include <skinning_pars_vertex>

				varying vec4 projTexCoord;
				varying vec4 vPosition;
				uniform mat4 textureMatrix;

				void main() {

					#include <skinbase_vertex>
					#include <begin_vertex>
					#include <morphtarget_vertex>
					#include <skinning_vertex>
					#include <project_vertex>

					vPosition = mvPosition;

					vec4 worldPosition = vec4( transformed, 1.0 );

					#ifdef USE_INSTANCING

						worldPosition = instanceMatrix * worldPosition;

					#endif

					worldPosition = modelMatrix * worldPosition;

					projTexCoord = textureMatrix * worldPosition;

				}`,fragmentShader:`#include <packing>
				varying vec4 vPosition;
				varying vec4 projTexCoord;
				uniform sampler2D depthTexture;
				uniform vec2 cameraNearFar;

				void main() {

					float depth = unpackRGBAToDepth(texture2DProj( depthTexture, projTexCoord ));
					float viewZ = - DEPTH_TO_VIEW_Z( depth, cameraNearFar.x, cameraNearFar.y );
					float depthTest = (-vPosition.z > viewZ) ? 1.0 : 0.0;
					gl_FragColor = vec4(0.0, depthTest, 1.0, 1.0);

				}`})}getEdgeDetectionMaterial(){return new h({uniforms:{maskTexture:{value:null},texSize:{value:new f(.5,.5)},visibleEdgeColor:{value:new _(1,1,1)},hiddenEdgeColor:{value:new _(1,1,1)}},vertexShader:`varying vec2 vUv;

				void main() {
					vUv = uv;
					gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );
				}`,fragmentShader:`varying vec2 vUv;

				uniform sampler2D maskTexture;
				uniform vec2 texSize;
				uniform vec3 visibleEdgeColor;
				uniform vec3 hiddenEdgeColor;

				void main() {
					vec2 invSize = 1.0 / texSize;
					vec4 uvOffset = vec4(1.0, 0.0, 0.0, 1.0) * vec4(invSize, invSize);
					vec4 c1 = texture2D( maskTexture, vUv + uvOffset.xy);
					vec4 c2 = texture2D( maskTexture, vUv - uvOffset.xy);
					vec4 c3 = texture2D( maskTexture, vUv + uvOffset.yw);
					vec4 c4 = texture2D( maskTexture, vUv - uvOffset.yw);
					float diff1 = (c1.r - c2.r)*0.5;
					float diff2 = (c3.r - c4.r)*0.5;
					float d = length( vec2(diff1, diff2) );
					float a1 = min(c1.g, c2.g);
					float a2 = min(c3.g, c4.g);
					float visibilityFactor = min(a1, a2);
					vec3 edgeColor = 1.0 - visibilityFactor > 0.001 ? visibleEdgeColor : hiddenEdgeColor;
					gl_FragColor = vec4(edgeColor, 1.0) * vec4(d);
				}`})}getSeperableBlurMaterial(e){return new h({defines:{MAX_RADIUS:e},uniforms:{colorTexture:{value:null},texSize:{value:new f(.5,.5)},direction:{value:new f(.5,.5)},kernelRadius:{value:1}},vertexShader:`varying vec2 vUv;

				void main() {
					vUv = uv;
					gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );
				}`,fragmentShader:`#include <common>
				varying vec2 vUv;
				uniform sampler2D colorTexture;
				uniform vec2 texSize;
				uniform vec2 direction;
				uniform float kernelRadius;

				float gaussianPdf(in float x, in float sigma) {
					return 0.39894 * exp( -0.5 * x * x/( sigma * sigma))/sigma;
				}

				void main() {
					vec2 invSize = 1.0 / texSize;
					float sigma = kernelRadius/2.0;
					float weightSum = gaussianPdf(0.0, sigma);
					vec4 diffuseSum = texture2D( colorTexture, vUv) * weightSum;
					vec2 delta = direction * invSize * kernelRadius/float(MAX_RADIUS);
					vec2 uvOffset = delta;
					for( int i = 1; i <= MAX_RADIUS; i ++ ) {
						float x = kernelRadius * float(i) / float(MAX_RADIUS);
						float w = gaussianPdf(x, sigma);
						vec4 sample1 = texture2D( colorTexture, vUv + uvOffset);
						vec4 sample2 = texture2D( colorTexture, vUv - uvOffset);
						diffuseSum += ((sample1 + sample2) * w);
						weightSum += (2.0 * w);
						uvOffset += delta;
					}
					gl_FragColor = diffuseSum/weightSum;
				}`})}getOverlayMaterial(){return new h({uniforms:{maskTexture:{value:null},edgeTexture1:{value:null},edgeTexture2:{value:null},patternTexture:{value:null},edgeStrength:{value:1},edgeGlow:{value:1},usePatternTexture:{value:0}},vertexShader:`varying vec2 vUv;

				void main() {
					vUv = uv;
					gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );
				}`,fragmentShader:`varying vec2 vUv;

				uniform sampler2D maskTexture;
				uniform sampler2D edgeTexture1;
				uniform sampler2D edgeTexture2;
				uniform sampler2D patternTexture;
				uniform float edgeStrength;
				uniform float edgeGlow;
				uniform bool usePatternTexture;

				void main() {
					vec4 edgeValue1 = texture2D(edgeTexture1, vUv);
					vec4 edgeValue2 = texture2D(edgeTexture2, vUv);
					vec4 maskColor = texture2D(maskTexture, vUv);
					vec4 patternColor = texture2D(patternTexture, 6.0 * vUv);
					float visibilityFactor = 1.0 - maskColor.g > 0.0 ? 1.0 : 0.5;
					vec4 edgeValue = edgeValue1 + edgeValue2 * edgeGlow;
					vec4 finalColor = edgeStrength * maskColor.r * edgeValue;
					if(usePatternTexture)
						finalColor += + visibilityFactor * (1.0 - maskColor.r) * (1.0 - patternColor.r);
					gl_FragColor = finalColor;
				}`,blending:de,depthTest:!1,depthWrite:!1,transparent:!0})}}D.BlurDirectionX=new f(1,0);D.BlurDirectionY=new f(0,1);const Ge={__name:"threejs-luminous.html",setup(M,{expose:e}){e();let t;const s=Q(),n=()=>{const o=new ne,p=new le(75,2,.1,100);p.position.set(0,0,20),o.add(p);const x=new Se(1,32,32),i=new N({color:"#ffaa33"}),m=new j(x,i);m.position.set(-5,0,0),m.layers.set(1),o.add(m);const u=new De(1,1,1),y=new re({emissive:3407667}),v=new j(u,y);v.position.set(5,0,0),o.add(v);const F=new Ae(1,.3,100,16),k=new re({emissive:3407667}),O=new j(F,k);O.position.set(0,0,0),o.add(O);const d=new oe;d.setSize(s.value.offsetWidth,s.value.offsetWidth/2),d.shadowMap.enabled=!0,d.physicallyCorrectLights=!0,d.autoClear=!1;const c=new H(d);c.setSize(s.value.offsetWidth,s.value.offsetWidth/2);const V=new X(o,p);c.addPass(V);const g=new D(new f(s.value.offsetWidth,s.value.offsetWidth/2),o,p);g.edgeStrength=3,g.edgeGlow=2,g.edgeThickness=3,g.pulsePeriod=2,g.selectedObjects=[O],c.addPass(g),s.value.appendChild(d.domElement);const L=new I(p,d.domElement);L.enableDamping=!0;const z=new be;new N({color:"black"}),new ie().set(0);function E(){z.getDelta(),L.update(),d.clear(),p.layers.set(0),c.render(),d.clearDepth(),p.layers.set(1),d.render(o,p),requestAnimationFrame(E)}E(),window.addEventListener("resize",()=>{d.setSize(s.value.offsetWidth,s.value.offsetWidth/2),d.setPixelRatio(window.devicePixelRatio)}),s.value.addEventListener("click",()=>{v.layers.set(1)})},a=Q(),l=()=>{const x=new ie;x.set(1);const i={exposure:1,bloomStrength:5,bloomThreshold:0,bloomRadius:0,scene:"Scene with Glow"},m=new N({color:"black"}),u={},y=new oe({antialias:!0});y.setSize(a.value.offsetWidth,a.value.offsetWidth/2),y.toneMapping=Ee,a.value.appendChild(y.domElement);const v=new ne,F=new le(40,2,1,200);F.position.set(0,0,20),F.lookAt(0,0,0);const k=new I(F,y.domElement);k.maxPolarAngle=Math.PI*.5,k.minDistance=1,k.maxDistance=100,k.addEventListener("change",S),v.add(new Pe(4210752));const O=new X(v,F),d=new R(new f(window.innerWidth,window.innerHeight),1.5,.4,.85);d.threshold=i.bloomThreshold,d.strength=i.bloomStrength,d.radius=i.bloomRadius;const c=new H(y);c.renderToScreen=!1,c.addPass(O),c.addPass(d);const V=new Z(new h({uniforms:{baseTexture:{value:null},bloomTexture:{value:c.renderTarget2.texture}},vertexShader:`
         varying vec2 vUv;

         void main() {

          vUv = uv;

          gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );

         }
          `,fragmentShader:`
         uniform sampler2D baseTexture;
         uniform sampler2D bloomTexture;

         varying vec2 vUv;

         void main() {

          gl_FragColor = ( texture2D( baseTexture, vUv ) + vec4( 1.0 ) * texture2D( bloomTexture, vUv ) );

         }
          `,defines:{}}),"baseTexture");V.needsSwap=!0;const g=new H(y);g.addPass(O),g.addPass(V);const L=new _e,z=new f;a.value.addEventListener("pointerdown",pe);const A=new t.GUI;A.domElement.style.position="absolute",A.domElement.style.top="0px",A.domElement.style.right="0px",a.value.appendChild(A.domElement),A.add(i,"scene",["Scene with Glow","Glow only","Scene only"]).onChange(function(r){switch(r){case"Scene with Glow":c.renderToScreen=!1;break;case"Glow only":c.renderToScreen=!0;break}S()});const E=A.addFolder("Bloom Parameters");E.add(i,"exposure",.1,2).onChange(function(r){y.toneMappingExposure=Math.pow(r,4),S()}),E.add(i,"bloomThreshold",0,1).onChange(function(r){d.threshold=Number(r),S()}),E.add(i,"bloomStrength",0,10).onChange(function(r){d.strength=Number(r),S()}),E.add(i,"bloomRadius",0,1).step(.01).onChange(function(r){d.radius=Number(r),S()}),ce();function pe(r){z.x=r.clientX/window.innerWidth*2-1,z.y=-(r.clientY/window.innerHeight)*2+1,L.setFromCamera(z,F);const B=L.intersectObjects(v.children,!1);B.length>0&&(B[0].object.layers.toggle(1),S())}window.onresize=function(){const r=a.value.offsetWidth,B=a.value.offsetWidth/2;F.aspect=r/B,F.updateProjectionMatrix(),y.setSize(r,B),c.setSize(r,B),g.setSize(r,B),S()};function ce(){v.traverse(ve),v.children.length=0;const r=new Re(1,15);for(let B=0;B<50;B++){const W=new w;W.setHSL(Math.random(),.7,Math.random()*.2+.05);const he=new N({color:W}),P=new j(r,he);P.position.x=Math.random()*10-5,P.position.y=Math.random()*10-5,P.position.z=Math.random()*10-5,P.position.normalize().multiplyScalar(Math.random()*4+2),P.scale.setScalar(Math.random()*Math.random()+.5),v.add(P),Math.random()<.25&&P.layers.enable(1)}S()}function ve(r){r.material&&r.material.dispose()}function S(){switch(i.scene){case"Scene only":y.render(v,F);break;case"Glow only":J(!1);break;case"Scene with Glow":default:J(!0),g.render();break}}function J(r){r===!0?(v.traverse(ue),c.render(),v.traverse(Fe)):(F.layers.set(1),c.render(),F.layers.set(0))}function ue(r){r.isMesh&&x.test(r.layers)===!1&&(u[r.uuid]=r.material,r.material=m)}function Fe(r){u[r.uuid]&&(r.material=u[r.uuid],delete u[r.uuid])}};$(async()=>{t=await ye(()=>import("./dat.gui.module-DNo137I2.js"),[]),n(),l()});const b={get dat(){return t},set dat(o){t=o},outLine:s,initPoint:n,bloomRef:a,initBloom:l,ref:Q,onMounted:$,get THREE(){return ke},get OrbitControls(){return I},get DRACOLoader(){return Oe},get GLTFLoader(){return Ue},get RGBELoader(){return Le},get EffectComposer(){return H},get RenderPass(){return X},get UnrealBloomPass(){return R},get OutlinePass(){return D},get ShaderPass(){return Z}};return Object.defineProperty(b,"__isScriptSetup",{enumerable:!1,value:!0}),b}},We={ref:"outLine"},Qe={ref:"bloomRef",class:"bloom"};function Ie(M,e,t,s,n,a){return Ce(),ge("div",null,[e[0]||(e[0]=ee(`<p data-v-b9e3b1ff>参考：<a href="https://threejs.org/" target="_blank" rel="noopener noreferrer" data-v-b9e3b1ff>https://threejs.org/</a></p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#282A36;color:#F8F8F2;" data-v-b9e3b1ff><pre class="shiki dracula vp-code" data-v-b9e3b1ff><code data-v-b9e3b1ff><span class="line" data-v-b9e3b1ff><span style="color:#6272A4;" data-v-b9e3b1ff>//outline pass 创建高亮轮廓</span></span>
<span class="line" data-v-b9e3b1ff><span style="color:#6272A4;" data-v-b9e3b1ff>// 创建 Outline Pass，传入轮廓边框的大小，场景以及相机</span></span>
<span class="line" data-v-b9e3b1ff><span style="color:#FF79C6;" data-v-b9e3b1ff>const</span><span style="color:#F8F8F2;" data-v-b9e3b1ff> outLinePass </span><span style="color:#FF79C6;" data-v-b9e3b1ff>=</span><span style="color:#FF79C6;font-weight:bold;" data-v-b9e3b1ff> new</span><span style="color:#50FA7B;" data-v-b9e3b1ff> OutlinePass</span><span style="color:#F8F8F2;" data-v-b9e3b1ff>(</span></span>
<span class="line" data-v-b9e3b1ff><span style="color:#FF79C6;font-weight:bold;" data-v-b9e3b1ff>  new</span><span style="color:#BD93F9;" data-v-b9e3b1ff> THREE</span><span style="color:#F8F8F2;" data-v-b9e3b1ff>.</span><span style="color:#50FA7B;" data-v-b9e3b1ff>Vector2</span><span style="color:#F8F8F2;" data-v-b9e3b1ff>(outLine.value.offsetWidth,outLine.value.offsetWidth</span><span style="color:#FF79C6;" data-v-b9e3b1ff>/</span><span style="color:#BD93F9;" data-v-b9e3b1ff>2</span><span style="color:#F8F8F2;" data-v-b9e3b1ff>), </span><span style="color:#6272A4;" data-v-b9e3b1ff>// 轮廓边框大小</span></span>
<span class="line" data-v-b9e3b1ff><span style="color:#F8F8F2;" data-v-b9e3b1ff>  scene, </span><span style="color:#6272A4;" data-v-b9e3b1ff>// 场景</span></span>
<span class="line" data-v-b9e3b1ff><span style="color:#F8F8F2;" data-v-b9e3b1ff>  camera </span><span style="color:#6272A4;" data-v-b9e3b1ff>// 相机</span></span>
<span class="line" data-v-b9e3b1ff><span style="color:#F8F8F2;" data-v-b9e3b1ff>);</span></span>
<span class="line" data-v-b9e3b1ff></span>
<span class="line" data-v-b9e3b1ff><span style="color:#6272A4;" data-v-b9e3b1ff>// 设置轮廓边框的强度</span></span>
<span class="line" data-v-b9e3b1ff><span style="color:#F8F8F2;" data-v-b9e3b1ff>outLinePass.edgeStrength </span><span style="color:#FF79C6;" data-v-b9e3b1ff>=</span><span style="color:#BD93F9;" data-v-b9e3b1ff> 3</span><span style="color:#F8F8F2;" data-v-b9e3b1ff>;</span></span>
<span class="line" data-v-b9e3b1ff></span>
<span class="line" data-v-b9e3b1ff><span style="color:#6272A4;" data-v-b9e3b1ff>// 设置轮廓边框的炫光强度</span></span>
<span class="line" data-v-b9e3b1ff><span style="color:#F8F8F2;" data-v-b9e3b1ff>outLinePass.edgeGlow </span><span style="color:#FF79C6;" data-v-b9e3b1ff>=</span><span style="color:#BD93F9;" data-v-b9e3b1ff> 2</span><span style="color:#F8F8F2;" data-v-b9e3b1ff>;</span></span>
<span class="line" data-v-b9e3b1ff></span>
<span class="line" data-v-b9e3b1ff><span style="color:#6272A4;" data-v-b9e3b1ff>// 设置轮廓边框的粗细</span></span>
<span class="line" data-v-b9e3b1ff><span style="color:#F8F8F2;" data-v-b9e3b1ff>outLinePass.edgeThickness </span><span style="color:#FF79C6;" data-v-b9e3b1ff>=</span><span style="color:#BD93F9;" data-v-b9e3b1ff> 3</span><span style="color:#F8F8F2;" data-v-b9e3b1ff>;</span></span>
<span class="line" data-v-b9e3b1ff></span>
<span class="line" data-v-b9e3b1ff><span style="color:#6272A4;" data-v-b9e3b1ff>// 设置轮廓边框的动画效果周期（单位为秒）</span></span>
<span class="line" data-v-b9e3b1ff><span style="color:#F8F8F2;" data-v-b9e3b1ff>outLinePass.pulsePeriod </span><span style="color:#FF79C6;" data-v-b9e3b1ff>=</span><span style="color:#BD93F9;" data-v-b9e3b1ff> 2</span><span style="color:#F8F8F2;" data-v-b9e3b1ff>;</span></span>
<span class="line" data-v-b9e3b1ff></span>
<span class="line" data-v-b9e3b1ff><span style="color:#6272A4;" data-v-b9e3b1ff>// 设置需要进行轮廓边框高亮的物体，这里只选择了一个 torusKnot</span></span>
<span class="line" data-v-b9e3b1ff><span style="color:#F8F8F2;" data-v-b9e3b1ff>outLinePass.selectedObjects </span><span style="color:#FF79C6;" data-v-b9e3b1ff>=</span><span style="color:#F8F8F2;" data-v-b9e3b1ff> [torusKnot];</span></span>
<span class="line" data-v-b9e3b1ff></span>
<span class="line" data-v-b9e3b1ff><span style="color:#6272A4;" data-v-b9e3b1ff>// 将 Outline Pass 添加到渲染的 Pass 中</span></span>
<span class="line" data-v-b9e3b1ff><span style="color:#F8F8F2;" data-v-b9e3b1ff>composer.</span><span style="color:#50FA7B;" data-v-b9e3b1ff>addPass</span><span style="color:#F8F8F2;" data-v-b9e3b1ff>(outLinePass);</span></span>
<span class="line" data-v-b9e3b1ff></span>
<span class="line" data-v-b9e3b1ff><span style="color:#6272A4;" data-v-b9e3b1ff>// renderPass</span></span>
<span class="line" data-v-b9e3b1ff><span style="color:#6272A4;" data-v-b9e3b1ff>/*</span></span>
<span class="line" data-v-b9e3b1ff><span style="color:#6272A4;" data-v-b9e3b1ff>RenderPass 是 Three.js 中的一个渲染器通道，它用于将场景中的一部分物体单独渲染到屏幕上。RenderPass 可以用于实现多种效果，</span></span>
<span class="line" data-v-b9e3b1ff><span style="color:#6272A4;" data-v-b9e3b1ff>例如描边（Outline）、后期处理（Post-processing）、阴影等。</span></span>
<span class="line" data-v-b9e3b1ff></span>
<span class="line" data-v-b9e3b1ff><span style="color:#6272A4;" data-v-b9e3b1ff>Renderer 是 Three.js 中的渲染器，它是实现 Three.js 渲染功能的核心组件。</span></span>
<span class="line" data-v-b9e3b1ff><span style="color:#6272A4;" data-v-b9e3b1ff>Renderer 主要负责将场景中的对象转换成可视图像，并输出到屏幕或者图片等媒介上。它支持多种渲染方式，例如 Canvas、WebGL、SVG等。</span></span>
<span class="line" data-v-b9e3b1ff></span>
<span class="line" data-v-b9e3b1ff><span style="color:#6272A4;" data-v-b9e3b1ff>简单来讲，RenderPass 是 Renderer 的一种子组件，它主要用于实现某些特殊效果的渲染流程，</span></span>
<span class="line" data-v-b9e3b1ff><span style="color:#6272A4;" data-v-b9e3b1ff>而 Renderer 则是 Three.js 的主渲染器，它负责将所有物体渲染到屏幕上或其他媒介上。</span></span>
<span class="line" data-v-b9e3b1ff><span style="color:#6272A4;" data-v-b9e3b1ff>*/</span></span>
<span class="line" data-v-b9e3b1ff><span style="color:#6272A4;" data-v-b9e3b1ff>//EffectComposer</span></span>
<span class="line" data-v-b9e3b1ff><span style="color:#6272A4;" data-v-b9e3b1ff>/*</span></span>
<span class="line" data-v-b9e3b1ff><span style="color:#6272A4;" data-v-b9e3b1ff>EffectComposer 是 Three.js 中用于实现后期处理（post-processing）效果的函数。</span></span>
<span class="line" data-v-b9e3b1ff><span style="color:#6272A4;" data-v-b9e3b1ff>它可以将场景、相机和渲染器作为参数，并且可以将不同的 RenderPass 串联起来，形成连续的后期处理效果。</span></span>
<span class="line" data-v-b9e3b1ff><span style="color:#6272A4;" data-v-b9e3b1ff>具体来说，EffectComposer 中会包含多个用于控制后期处理流程的渲染通道，如 RenderPass、ShaderPass 等。</span></span>
<span class="line" data-v-b9e3b1ff></span>
<span class="line" data-v-b9e3b1ff><span style="color:#6272A4;" data-v-b9e3b1ff>实现后期处理效果一般需要多次渲染，其中第一次是将场景渲染到纹理（render-to-texture）中，然后应用渲染通道，最终将结果渲染到屏幕上。</span></span>
<span class="line" data-v-b9e3b1ff></span>
<span class="line" data-v-b9e3b1ff><span style="color:#6272A4;" data-v-b9e3b1ff>*/</span></span>
<span class="line" data-v-b9e3b1ff><span style="color:#FF79C6;" data-v-b9e3b1ff>const</span><span style="color:#F8F8F2;" data-v-b9e3b1ff> composer </span><span style="color:#FF79C6;" data-v-b9e3b1ff>=</span><span style="color:#FF79C6;font-weight:bold;" data-v-b9e3b1ff> new</span><span style="color:#50FA7B;" data-v-b9e3b1ff> EffectComposer</span><span style="color:#F8F8F2;" data-v-b9e3b1ff>(renderer);</span></span>
<span class="line" data-v-b9e3b1ff><span style="color:#F8F8F2;" data-v-b9e3b1ff>composer.</span><span style="color:#50FA7B;" data-v-b9e3b1ff>setSize</span><span style="color:#F8F8F2;" data-v-b9e3b1ff>(outLine.value.offsetWidth,outLine.value.offsetWidth</span><span style="color:#FF79C6;" data-v-b9e3b1ff>/</span><span style="color:#BD93F9;" data-v-b9e3b1ff>2</span><span style="color:#F8F8F2;" data-v-b9e3b1ff>);</span></span>
<span class="line" data-v-b9e3b1ff><span style="color:#FF79C6;" data-v-b9e3b1ff>const</span><span style="color:#F8F8F2;" data-v-b9e3b1ff> renderPass </span><span style="color:#FF79C6;" data-v-b9e3b1ff>=</span><span style="color:#FF79C6;font-weight:bold;" data-v-b9e3b1ff> new</span><span style="color:#50FA7B;" data-v-b9e3b1ff> RenderPass</span><span style="color:#F8F8F2;" data-v-b9e3b1ff>(scene, camera);</span></span>
<span class="line" data-v-b9e3b1ff><span style="color:#F8F8F2;" data-v-b9e3b1ff>composer.</span><span style="color:#50FA7B;" data-v-b9e3b1ff>addPass</span><span style="color:#F8F8F2;" data-v-b9e3b1ff>(renderPass);</span></span>
<span class="line" data-v-b9e3b1ff><span style="color:#F8F8F2;" data-v-b9e3b1ff>composer.</span><span style="color:#50FA7B;" data-v-b9e3b1ff>render</span><span style="color:#F8F8F2;" data-v-b9e3b1ff>();</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;" data-v-b9e3b1ff><div class="line-number" data-v-b9e3b1ff></div><div class="line-number" data-v-b9e3b1ff></div><div class="line-number" data-v-b9e3b1ff></div><div class="line-number" data-v-b9e3b1ff></div><div class="line-number" data-v-b9e3b1ff></div><div class="line-number" data-v-b9e3b1ff></div><div class="line-number" data-v-b9e3b1ff></div><div class="line-number" data-v-b9e3b1ff></div><div class="line-number" data-v-b9e3b1ff></div><div class="line-number" data-v-b9e3b1ff></div><div class="line-number" data-v-b9e3b1ff></div><div class="line-number" data-v-b9e3b1ff></div><div class="line-number" data-v-b9e3b1ff></div><div class="line-number" data-v-b9e3b1ff></div><div class="line-number" data-v-b9e3b1ff></div><div class="line-number" data-v-b9e3b1ff></div><div class="line-number" data-v-b9e3b1ff></div><div class="line-number" data-v-b9e3b1ff></div><div class="line-number" data-v-b9e3b1ff></div><div class="line-number" data-v-b9e3b1ff></div><div class="line-number" data-v-b9e3b1ff></div><div class="line-number" data-v-b9e3b1ff></div><div class="line-number" data-v-b9e3b1ff></div><div class="line-number" data-v-b9e3b1ff></div><div class="line-number" data-v-b9e3b1ff></div><div class="line-number" data-v-b9e3b1ff></div><div class="line-number" data-v-b9e3b1ff></div><div class="line-number" data-v-b9e3b1ff></div><div class="line-number" data-v-b9e3b1ff></div><div class="line-number" data-v-b9e3b1ff></div><div class="line-number" data-v-b9e3b1ff></div><div class="line-number" data-v-b9e3b1ff></div><div class="line-number" data-v-b9e3b1ff></div><div class="line-number" data-v-b9e3b1ff></div><div class="line-number" data-v-b9e3b1ff></div><div class="line-number" data-v-b9e3b1ff></div><div class="line-number" data-v-b9e3b1ff></div><div class="line-number" data-v-b9e3b1ff></div><div class="line-number" data-v-b9e3b1ff></div><div class="line-number" data-v-b9e3b1ff></div><div class="line-number" data-v-b9e3b1ff></div><div class="line-number" data-v-b9e3b1ff></div><div class="line-number" data-v-b9e3b1ff></div><div class="line-number" data-v-b9e3b1ff></div><div class="line-number" data-v-b9e3b1ff></div><div class="line-number" data-v-b9e3b1ff></div><div class="line-number" data-v-b9e3b1ff></div><div class="line-number" data-v-b9e3b1ff></div><div class="line-number" data-v-b9e3b1ff></div><div class="line-number" data-v-b9e3b1ff></div><div class="line-number" data-v-b9e3b1ff></div></div></div>`,2)),ae("div",We,null,512),e[1]||(e[1]=ee(`<p data-v-b9e3b1ff><code data-v-b9e3b1ff>UnrealBloomPass</code> 实现逼真的bloom（即景物周围余晖）效果</p><ul data-v-b9e3b1ff><li data-v-b9e3b1ff><code data-v-b9e3b1ff>new THREE.Vector2( window.innerWidth, window.innerHeight )</code>：表示渲染的分辨率大小。</li><li data-v-b9e3b1ff><code data-v-b9e3b1ff>strength</code>：效果强度，默认值为1。</li><li data-v-b9e3b1ff><code data-v-b9e3b1ff>radius</code>：半径大小，默认值为0。</li><li data-v-b9e3b1ff><code data-v-b9e3b1ff>threshold</code>：阈值大小，影响只有高于这个值的颜色才会产生bloom效果，默认值为0。</li></ul><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#282A36;color:#F8F8F2;" data-v-b9e3b1ff><pre class="shiki dracula vp-code" data-v-b9e3b1ff><code data-v-b9e3b1ff><span class="line" data-v-b9e3b1ff><span style="color:#6272A4;" data-v-b9e3b1ff>// 定义两个场景用于渲染全屏普通场景和只有发光效果的场景</span></span>
<span class="line" data-v-b9e3b1ff><span style="color:#FF79C6;" data-v-b9e3b1ff>const</span><span style="color:#F8F8F2;" data-v-b9e3b1ff> ENTIRE_SCENE </span><span style="color:#FF79C6;" data-v-b9e3b1ff>=</span><span style="color:#BD93F9;" data-v-b9e3b1ff> 0</span><span style="color:#F8F8F2;" data-v-b9e3b1ff>, BLOOM_SCENE </span><span style="color:#FF79C6;" data-v-b9e3b1ff>=</span><span style="color:#BD93F9;" data-v-b9e3b1ff> 1</span><span style="color:#F8F8F2;" data-v-b9e3b1ff>;</span></span>
<span class="line" data-v-b9e3b1ff><span style="color:#6272A4;" data-v-b9e3b1ff>// 定义一个全局变量，用于标识需要渲染发光效果的物体</span></span>
<span class="line" data-v-b9e3b1ff><span style="color:#FF79C6;" data-v-b9e3b1ff>const</span><span style="color:#F8F8F2;" data-v-b9e3b1ff> bloomLayer </span><span style="color:#FF79C6;" data-v-b9e3b1ff>=</span><span style="color:#FF79C6;font-weight:bold;" data-v-b9e3b1ff> new</span><span style="color:#BD93F9;" data-v-b9e3b1ff> THREE</span><span style="color:#F8F8F2;" data-v-b9e3b1ff>.</span><span style="color:#50FA7B;" data-v-b9e3b1ff>Layers</span><span style="color:#F8F8F2;" data-v-b9e3b1ff>();</span></span>
<span class="line" data-v-b9e3b1ff><span style="color:#F8F8F2;" data-v-b9e3b1ff>bloomLayer.</span><span style="color:#50FA7B;" data-v-b9e3b1ff>set</span><span style="color:#F8F8F2;" data-v-b9e3b1ff>( BLOOM_SCENE );</span></span>
<span class="line" data-v-b9e3b1ff></span>
<span class="line" data-v-b9e3b1ff><span style="color:#6272A4;" data-v-b9e3b1ff>// 定义一个黑色材质，用于替换发光物体原来的材质</span></span>
<span class="line" data-v-b9e3b1ff><span style="color:#FF79C6;" data-v-b9e3b1ff>const</span><span style="color:#F8F8F2;" data-v-b9e3b1ff> darkMaterial </span><span style="color:#FF79C6;" data-v-b9e3b1ff>=</span><span style="color:#FF79C6;font-weight:bold;" data-v-b9e3b1ff> new</span><span style="color:#BD93F9;" data-v-b9e3b1ff> THREE</span><span style="color:#F8F8F2;" data-v-b9e3b1ff>.</span><span style="color:#50FA7B;" data-v-b9e3b1ff>MeshBasicMaterial</span><span style="color:#F8F8F2;" data-v-b9e3b1ff>( { color</span><span style="color:#FF79C6;" data-v-b9e3b1ff>:</span><span style="color:#E9F284;" data-v-b9e3b1ff> &#39;</span><span style="color:#F1FA8C;" data-v-b9e3b1ff>black</span><span style="color:#E9F284;" data-v-b9e3b1ff>&#39;</span><span style="color:#F8F8F2;" data-v-b9e3b1ff> } );</span></span>
<span class="line" data-v-b9e3b1ff><span style="color:#FF79C6;" data-v-b9e3b1ff>const</span><span style="color:#F8F8F2;" data-v-b9e3b1ff> materials </span><span style="color:#FF79C6;" data-v-b9e3b1ff>=</span><span style="color:#F8F8F2;" data-v-b9e3b1ff> {};</span></span>
<span class="line" data-v-b9e3b1ff></span>
<span class="line" data-v-b9e3b1ff><span style="color:#6272A4;" data-v-b9e3b1ff>// 定义后期处理参数</span></span>
<span class="line" data-v-b9e3b1ff><span style="color:#FF79C6;" data-v-b9e3b1ff>const</span><span style="color:#F8F8F2;" data-v-b9e3b1ff> params </span><span style="color:#FF79C6;" data-v-b9e3b1ff>=</span><span style="color:#F8F8F2;" data-v-b9e3b1ff> {</span></span>
<span class="line" data-v-b9e3b1ff><span style="color:#F8F8F2;" data-v-b9e3b1ff> exposure</span><span style="color:#FF79C6;" data-v-b9e3b1ff>:</span><span style="color:#BD93F9;" data-v-b9e3b1ff> 1</span><span style="color:#F8F8F2;" data-v-b9e3b1ff>, </span><span style="color:#6272A4;" data-v-b9e3b1ff>// 曝光度</span></span>
<span class="line" data-v-b9e3b1ff><span style="color:#F8F8F2;" data-v-b9e3b1ff> bloomStrength</span><span style="color:#FF79C6;" data-v-b9e3b1ff>:</span><span style="color:#BD93F9;" data-v-b9e3b1ff> 5</span><span style="color:#F8F8F2;" data-v-b9e3b1ff>, </span><span style="color:#6272A4;" data-v-b9e3b1ff>// 发光强度</span></span>
<span class="line" data-v-b9e3b1ff><span style="color:#F8F8F2;" data-v-b9e3b1ff> bloomThreshold</span><span style="color:#FF79C6;" data-v-b9e3b1ff>:</span><span style="color:#BD93F9;" data-v-b9e3b1ff> 0</span><span style="color:#F8F8F2;" data-v-b9e3b1ff>, </span><span style="color:#6272A4;" data-v-b9e3b1ff>// 亮度阈值，用于发光对象的选择</span></span>
<span class="line" data-v-b9e3b1ff><span style="color:#F8F8F2;" data-v-b9e3b1ff> bloomRadius</span><span style="color:#FF79C6;" data-v-b9e3b1ff>:</span><span style="color:#BD93F9;" data-v-b9e3b1ff> 0</span><span style="color:#F8F8F2;" data-v-b9e3b1ff>, </span><span style="color:#6272A4;" data-v-b9e3b1ff>// 发光的扩散半径</span></span>
<span class="line" data-v-b9e3b1ff><span style="color:#F8F8F2;" data-v-b9e3b1ff> scene</span><span style="color:#FF79C6;" data-v-b9e3b1ff>:</span><span style="color:#E9F284;" data-v-b9e3b1ff> &#39;</span><span style="color:#F1FA8C;" data-v-b9e3b1ff>Scene with Glow</span><span style="color:#E9F284;" data-v-b9e3b1ff>&#39;</span><span style="color:#6272A4;" data-v-b9e3b1ff> // 默认场景类型</span></span>
<span class="line" data-v-b9e3b1ff><span style="color:#F8F8F2;" data-v-b9e3b1ff>};</span></span>
<span class="line" data-v-b9e3b1ff><span style="color:#6272A4;" data-v-b9e3b1ff>// 创建 UnrealBloomPass 后期处理器，用于实现物体发光效果</span></span>
<span class="line" data-v-b9e3b1ff><span style="color:#FF79C6;" data-v-b9e3b1ff>const</span><span style="color:#F8F8F2;" data-v-b9e3b1ff> bloomPass </span><span style="color:#FF79C6;" data-v-b9e3b1ff>=</span><span style="color:#FF79C6;font-weight:bold;" data-v-b9e3b1ff> new</span><span style="color:#50FA7B;" data-v-b9e3b1ff> UnrealBloomPass</span><span style="color:#F8F8F2;" data-v-b9e3b1ff>( </span><span style="color:#FF79C6;font-weight:bold;" data-v-b9e3b1ff>new</span><span style="color:#BD93F9;" data-v-b9e3b1ff> THREE</span><span style="color:#F8F8F2;" data-v-b9e3b1ff>.</span><span style="color:#50FA7B;" data-v-b9e3b1ff>Vector2</span><span style="color:#F8F8F2;" data-v-b9e3b1ff>( window.innerWidth, window.innerHeight ), </span><span style="color:#BD93F9;" data-v-b9e3b1ff>1.5</span><span style="color:#F8F8F2;" data-v-b9e3b1ff>, </span><span style="color:#BD93F9;" data-v-b9e3b1ff>0.4</span><span style="color:#F8F8F2;" data-v-b9e3b1ff>, </span><span style="color:#BD93F9;" data-v-b9e3b1ff>0.85</span><span style="color:#F8F8F2;" data-v-b9e3b1ff> );</span></span>
<span class="line" data-v-b9e3b1ff><span style="color:#F8F8F2;" data-v-b9e3b1ff>bloomPass.threshold </span><span style="color:#FF79C6;" data-v-b9e3b1ff>=</span><span style="color:#F8F8F2;" data-v-b9e3b1ff> params.bloomThreshold;</span></span>
<span class="line" data-v-b9e3b1ff><span style="color:#F8F8F2;" data-v-b9e3b1ff>bloomPass.strength </span><span style="color:#FF79C6;" data-v-b9e3b1ff>=</span><span style="color:#F8F8F2;" data-v-b9e3b1ff> params.bloomStrength;</span></span>
<span class="line" data-v-b9e3b1ff><span style="color:#F8F8F2;" data-v-b9e3b1ff>bloomPass.radius </span><span style="color:#FF79C6;" data-v-b9e3b1ff>=</span><span style="color:#F8F8F2;" data-v-b9e3b1ff> params.bloomRadius;</span></span>
<span class="line" data-v-b9e3b1ff></span>
<span class="line" data-v-b9e3b1ff><span style="color:#6272A4;" data-v-b9e3b1ff>// 创建一个普通场景渲染器</span></span>
<span class="line" data-v-b9e3b1ff><span style="color:#FF79C6;" data-v-b9e3b1ff>const</span><span style="color:#F8F8F2;" data-v-b9e3b1ff> renderScene </span><span style="color:#FF79C6;" data-v-b9e3b1ff>=</span><span style="color:#FF79C6;font-weight:bold;" data-v-b9e3b1ff> new</span><span style="color:#50FA7B;" data-v-b9e3b1ff> RenderPass</span><span style="color:#F8F8F2;" data-v-b9e3b1ff>( scene, camera );</span></span>
<span class="line" data-v-b9e3b1ff></span>
<span class="line" data-v-b9e3b1ff><span style="color:#6272A4;" data-v-b9e3b1ff>// 创建渲染器，用于渲染只有发光效果的场景</span></span>
<span class="line" data-v-b9e3b1ff><span style="color:#FF79C6;" data-v-b9e3b1ff>const</span><span style="color:#F8F8F2;" data-v-b9e3b1ff> bloomComposer </span><span style="color:#FF79C6;" data-v-b9e3b1ff>=</span><span style="color:#FF79C6;font-weight:bold;" data-v-b9e3b1ff> new</span><span style="color:#50FA7B;" data-v-b9e3b1ff> EffectComposer</span><span style="color:#F8F8F2;" data-v-b9e3b1ff>( renderer );</span></span>
<span class="line" data-v-b9e3b1ff><span style="color:#F8F8F2;" data-v-b9e3b1ff>bloomComposer.renderToScreen </span><span style="color:#FF79C6;" data-v-b9e3b1ff>=</span><span style="color:#BD93F9;" data-v-b9e3b1ff> false</span><span style="color:#F8F8F2;" data-v-b9e3b1ff>;</span></span>
<span class="line" data-v-b9e3b1ff><span style="color:#F8F8F2;" data-v-b9e3b1ff>bloomComposer.</span><span style="color:#50FA7B;" data-v-b9e3b1ff>addPass</span><span style="color:#F8F8F2;" data-v-b9e3b1ff>( renderScene );</span></span>
<span class="line" data-v-b9e3b1ff><span style="color:#F8F8F2;" data-v-b9e3b1ff>bloomComposer.</span><span style="color:#50FA7B;" data-v-b9e3b1ff>addPass</span><span style="color:#F8F8F2;" data-v-b9e3b1ff>( bloomPass );</span></span>
<span class="line" data-v-b9e3b1ff></span>
<span class="line" data-v-b9e3b1ff><span style="color:#6272A4;" data-v-b9e3b1ff>// 初始化场景</span></span>
<span class="line" data-v-b9e3b1ff><span style="color:#FF79C6;" data-v-b9e3b1ff>function</span><span style="color:#50FA7B;" data-v-b9e3b1ff> setupScene</span><span style="color:#F8F8F2;" data-v-b9e3b1ff>() {</span></span>
<span class="line" data-v-b9e3b1ff><span style="color:#F8F8F2;" data-v-b9e3b1ff> scene.</span><span style="color:#50FA7B;" data-v-b9e3b1ff>traverse</span><span style="color:#F8F8F2;" data-v-b9e3b1ff>( disposeMaterial );</span></span>
<span class="line" data-v-b9e3b1ff><span style="color:#F8F8F2;" data-v-b9e3b1ff> scene.children.length </span><span style="color:#FF79C6;" data-v-b9e3b1ff>=</span><span style="color:#BD93F9;" data-v-b9e3b1ff> 0</span><span style="color:#F8F8F2;" data-v-b9e3b1ff>;</span></span>
<span class="line" data-v-b9e3b1ff></span>
<span class="line" data-v-b9e3b1ff><span style="color:#FF79C6;" data-v-b9e3b1ff> const</span><span style="color:#F8F8F2;" data-v-b9e3b1ff> geometry </span><span style="color:#FF79C6;" data-v-b9e3b1ff>=</span><span style="color:#FF79C6;font-weight:bold;" data-v-b9e3b1ff> new</span><span style="color:#BD93F9;" data-v-b9e3b1ff> THREE</span><span style="color:#F8F8F2;" data-v-b9e3b1ff>.</span><span style="color:#50FA7B;" data-v-b9e3b1ff>IcosahedronGeometry</span><span style="color:#F8F8F2;" data-v-b9e3b1ff>( </span><span style="color:#BD93F9;" data-v-b9e3b1ff>1</span><span style="color:#F8F8F2;" data-v-b9e3b1ff>, </span><span style="color:#BD93F9;" data-v-b9e3b1ff>15</span><span style="color:#F8F8F2;" data-v-b9e3b1ff> );</span></span>
<span class="line" data-v-b9e3b1ff></span>
<span class="line" data-v-b9e3b1ff><span style="color:#FF79C6;" data-v-b9e3b1ff> for</span><span style="color:#F8F8F2;" data-v-b9e3b1ff> ( </span><span style="color:#FF79C6;" data-v-b9e3b1ff>let</span><span style="color:#F8F8F2;" data-v-b9e3b1ff> i </span><span style="color:#FF79C6;" data-v-b9e3b1ff>=</span><span style="color:#BD93F9;" data-v-b9e3b1ff> 0</span><span style="color:#F8F8F2;" data-v-b9e3b1ff>; i </span><span style="color:#FF79C6;" data-v-b9e3b1ff>&lt;</span><span style="color:#BD93F9;" data-v-b9e3b1ff> 50</span><span style="color:#F8F8F2;" data-v-b9e3b1ff>; i </span><span style="color:#FF79C6;" data-v-b9e3b1ff>++</span><span style="color:#F8F8F2;" data-v-b9e3b1ff> ) {</span></span>
<span class="line" data-v-b9e3b1ff><span style="color:#FF79C6;" data-v-b9e3b1ff>  const</span><span style="color:#F8F8F2;" data-v-b9e3b1ff> color </span><span style="color:#FF79C6;" data-v-b9e3b1ff>=</span><span style="color:#FF79C6;font-weight:bold;" data-v-b9e3b1ff> new</span><span style="color:#BD93F9;" data-v-b9e3b1ff> THREE</span><span style="color:#F8F8F2;" data-v-b9e3b1ff>.</span><span style="color:#50FA7B;" data-v-b9e3b1ff>Color</span><span style="color:#F8F8F2;" data-v-b9e3b1ff>();</span></span>
<span class="line" data-v-b9e3b1ff><span style="color:#F8F8F2;" data-v-b9e3b1ff>  color.</span><span style="color:#50FA7B;" data-v-b9e3b1ff>setHSL</span><span style="color:#F8F8F2;" data-v-b9e3b1ff>( Math.</span><span style="color:#50FA7B;" data-v-b9e3b1ff>random</span><span style="color:#F8F8F2;" data-v-b9e3b1ff>(), </span><span style="color:#BD93F9;" data-v-b9e3b1ff>0.7</span><span style="color:#F8F8F2;" data-v-b9e3b1ff>, Math.</span><span style="color:#50FA7B;" data-v-b9e3b1ff>random</span><span style="color:#F8F8F2;" data-v-b9e3b1ff>() </span><span style="color:#FF79C6;" data-v-b9e3b1ff>*</span><span style="color:#BD93F9;" data-v-b9e3b1ff> 0.2</span><span style="color:#FF79C6;" data-v-b9e3b1ff> +</span><span style="color:#BD93F9;" data-v-b9e3b1ff> 0.05</span><span style="color:#F8F8F2;" data-v-b9e3b1ff> );</span></span>
<span class="line" data-v-b9e3b1ff></span>
<span class="line" data-v-b9e3b1ff><span style="color:#FF79C6;" data-v-b9e3b1ff>  const</span><span style="color:#F8F8F2;" data-v-b9e3b1ff> material </span><span style="color:#FF79C6;" data-v-b9e3b1ff>=</span><span style="color:#FF79C6;font-weight:bold;" data-v-b9e3b1ff> new</span><span style="color:#BD93F9;" data-v-b9e3b1ff> THREE</span><span style="color:#F8F8F2;" data-v-b9e3b1ff>.</span><span style="color:#50FA7B;" data-v-b9e3b1ff>MeshBasicMaterial</span><span style="color:#F8F8F2;" data-v-b9e3b1ff>( { color</span><span style="color:#FF79C6;" data-v-b9e3b1ff>:</span><span style="color:#F8F8F2;" data-v-b9e3b1ff> color } );</span></span>
<span class="line" data-v-b9e3b1ff><span style="color:#FF79C6;" data-v-b9e3b1ff>  const</span><span style="color:#F8F8F2;" data-v-b9e3b1ff> sphere </span><span style="color:#FF79C6;" data-v-b9e3b1ff>=</span><span style="color:#FF79C6;font-weight:bold;" data-v-b9e3b1ff> new</span><span style="color:#BD93F9;" data-v-b9e3b1ff> THREE</span><span style="color:#F8F8F2;" data-v-b9e3b1ff>.</span><span style="color:#50FA7B;" data-v-b9e3b1ff>Mesh</span><span style="color:#F8F8F2;" data-v-b9e3b1ff>( geometry, material );</span></span>
<span class="line" data-v-b9e3b1ff><span style="color:#F8F8F2;" data-v-b9e3b1ff>  sphere.position.x </span><span style="color:#FF79C6;" data-v-b9e3b1ff>=</span><span style="color:#F8F8F2;" data-v-b9e3b1ff> Math.</span><span style="color:#50FA7B;" data-v-b9e3b1ff>random</span><span style="color:#F8F8F2;" data-v-b9e3b1ff>() </span><span style="color:#FF79C6;" data-v-b9e3b1ff>*</span><span style="color:#BD93F9;" data-v-b9e3b1ff> 10</span><span style="color:#FF79C6;" data-v-b9e3b1ff> -</span><span style="color:#BD93F9;" data-v-b9e3b1ff> 5</span><span style="color:#F8F8F2;" data-v-b9e3b1ff>;</span></span>
<span class="line" data-v-b9e3b1ff><span style="color:#F8F8F2;" data-v-b9e3b1ff>  sphere.position.y </span><span style="color:#FF79C6;" data-v-b9e3b1ff>=</span><span style="color:#F8F8F2;" data-v-b9e3b1ff> Math.</span><span style="color:#50FA7B;" data-v-b9e3b1ff>random</span><span style="color:#F8F8F2;" data-v-b9e3b1ff>() </span><span style="color:#FF79C6;" data-v-b9e3b1ff>*</span><span style="color:#BD93F9;" data-v-b9e3b1ff> 10</span><span style="color:#FF79C6;" data-v-b9e3b1ff> -</span><span style="color:#BD93F9;" data-v-b9e3b1ff> 5</span><span style="color:#F8F8F2;" data-v-b9e3b1ff>;</span></span>
<span class="line" data-v-b9e3b1ff><span style="color:#F8F8F2;" data-v-b9e3b1ff>  sphere.position.z </span><span style="color:#FF79C6;" data-v-b9e3b1ff>=</span><span style="color:#F8F8F2;" data-v-b9e3b1ff> Math.</span><span style="color:#50FA7B;" data-v-b9e3b1ff>random</span><span style="color:#F8F8F2;" data-v-b9e3b1ff>() </span><span style="color:#FF79C6;" data-v-b9e3b1ff>*</span><span style="color:#BD93F9;" data-v-b9e3b1ff> 10</span><span style="color:#FF79C6;" data-v-b9e3b1ff> -</span><span style="color:#BD93F9;" data-v-b9e3b1ff> 5</span><span style="color:#F8F8F2;" data-v-b9e3b1ff>;</span></span>
<span class="line" data-v-b9e3b1ff><span style="color:#F8F8F2;" data-v-b9e3b1ff>  sphere.position.</span><span style="color:#50FA7B;" data-v-b9e3b1ff>normalize</span><span style="color:#F8F8F2;" data-v-b9e3b1ff>().</span><span style="color:#50FA7B;" data-v-b9e3b1ff>multiplyScalar</span><span style="color:#F8F8F2;" data-v-b9e3b1ff>( Math.</span><span style="color:#50FA7B;" data-v-b9e3b1ff>random</span><span style="color:#F8F8F2;" data-v-b9e3b1ff>() </span><span style="color:#FF79C6;" data-v-b9e3b1ff>*</span><span style="color:#BD93F9;" data-v-b9e3b1ff> 4.0</span><span style="color:#FF79C6;" data-v-b9e3b1ff> +</span><span style="color:#BD93F9;" data-v-b9e3b1ff> 2.0</span><span style="color:#F8F8F2;" data-v-b9e3b1ff> );</span></span>
<span class="line" data-v-b9e3b1ff><span style="color:#F8F8F2;" data-v-b9e3b1ff>  sphere.scale.</span><span style="color:#50FA7B;" data-v-b9e3b1ff>setScalar</span><span style="color:#F8F8F2;" data-v-b9e3b1ff>( Math.</span><span style="color:#50FA7B;" data-v-b9e3b1ff>random</span><span style="color:#F8F8F2;" data-v-b9e3b1ff>() </span><span style="color:#FF79C6;" data-v-b9e3b1ff>*</span><span style="color:#F8F8F2;" data-v-b9e3b1ff> Math.</span><span style="color:#50FA7B;" data-v-b9e3b1ff>random</span><span style="color:#F8F8F2;" data-v-b9e3b1ff>() </span><span style="color:#FF79C6;" data-v-b9e3b1ff>+</span><span style="color:#BD93F9;" data-v-b9e3b1ff> 0.5</span><span style="color:#F8F8F2;" data-v-b9e3b1ff> );</span></span>
<span class="line" data-v-b9e3b1ff><span style="color:#F8F8F2;" data-v-b9e3b1ff>  scene.</span><span style="color:#50FA7B;" data-v-b9e3b1ff>add</span><span style="color:#F8F8F2;" data-v-b9e3b1ff>( sphere );</span></span>
<span class="line" data-v-b9e3b1ff><span style="color:#FF79C6;" data-v-b9e3b1ff>  if</span><span style="color:#F8F8F2;" data-v-b9e3b1ff> ( Math.</span><span style="color:#50FA7B;" data-v-b9e3b1ff>random</span><span style="color:#F8F8F2;" data-v-b9e3b1ff>() </span><span style="color:#FF79C6;" data-v-b9e3b1ff>&lt;</span><span style="color:#BD93F9;" data-v-b9e3b1ff> 0.25</span><span style="color:#F8F8F2;" data-v-b9e3b1ff> ) sphere.layers.</span><span style="color:#50FA7B;" data-v-b9e3b1ff>enable</span><span style="color:#F8F8F2;" data-v-b9e3b1ff>( BLOOM_SCENE );</span></span>
<span class="line" data-v-b9e3b1ff><span style="color:#F8F8F2;" data-v-b9e3b1ff> }</span></span>
<span class="line" data-v-b9e3b1ff></span>
<span class="line" data-v-b9e3b1ff><span style="color:#50FA7B;" data-v-b9e3b1ff> render</span><span style="color:#F8F8F2;" data-v-b9e3b1ff>();</span></span>
<span class="line" data-v-b9e3b1ff><span style="color:#F8F8F2;" data-v-b9e3b1ff>}</span></span>
<span class="line" data-v-b9e3b1ff></span>
<span class="line" data-v-b9e3b1ff><span style="color:#6272A4;" data-v-b9e3b1ff>// 渲染发光效果</span></span>
<span class="line" data-v-b9e3b1ff><span style="color:#FF79C6;" data-v-b9e3b1ff>function</span><span style="color:#50FA7B;" data-v-b9e3b1ff> render</span><span style="color:#F8F8F2;" data-v-b9e3b1ff>(  ) {</span></span>
<span class="line" data-v-b9e3b1ff><span style="color:#F8F8F2;" data-v-b9e3b1ff>  camera.layers.</span><span style="color:#50FA7B;" data-v-b9e3b1ff>set</span><span style="color:#F8F8F2;" data-v-b9e3b1ff>( BLOOM_SCENE );</span></span>
<span class="line" data-v-b9e3b1ff><span style="color:#F8F8F2;" data-v-b9e3b1ff>  bloomComposer.</span><span style="color:#50FA7B;" data-v-b9e3b1ff>render</span><span style="color:#F8F8F2;" data-v-b9e3b1ff>();</span></span>
<span class="line" data-v-b9e3b1ff><span style="color:#F8F8F2;" data-v-b9e3b1ff>  camera.layers.</span><span style="color:#50FA7B;" data-v-b9e3b1ff>set</span><span style="color:#F8F8F2;" data-v-b9e3b1ff>( ENTIRE_SCENE );</span></span>
<span class="line" data-v-b9e3b1ff><span style="color:#F8F8F2;" data-v-b9e3b1ff>}</span></span>
<span class="line" data-v-b9e3b1ff><span style="color:#FF79C6;" data-v-b9e3b1ff>function</span><span style="color:#50FA7B;" data-v-b9e3b1ff> onPointerDown</span><span style="color:#F8F8F2;" data-v-b9e3b1ff>( </span><span style="color:#FFB86C;font-style:italic;" data-v-b9e3b1ff>event</span><span style="color:#F8F8F2;" data-v-b9e3b1ff> ) {</span></span>
<span class="line" data-v-b9e3b1ff><span style="color:#F8F8F2;" data-v-b9e3b1ff> mouse.x </span><span style="color:#FF79C6;" data-v-b9e3b1ff>=</span><span style="color:#F8F8F2;" data-v-b9e3b1ff> ( event.clientX </span><span style="color:#FF79C6;" data-v-b9e3b1ff>/</span><span style="color:#F8F8F2;" data-v-b9e3b1ff> window.innerWidth ) </span><span style="color:#FF79C6;" data-v-b9e3b1ff>*</span><span style="color:#BD93F9;" data-v-b9e3b1ff> 2</span><span style="color:#FF79C6;" data-v-b9e3b1ff> -</span><span style="color:#BD93F9;" data-v-b9e3b1ff> 1</span><span style="color:#F8F8F2;" data-v-b9e3b1ff>;</span></span>
<span class="line" data-v-b9e3b1ff><span style="color:#F8F8F2;" data-v-b9e3b1ff> mouse.y </span><span style="color:#FF79C6;" data-v-b9e3b1ff>=</span><span style="color:#FF79C6;" data-v-b9e3b1ff> -</span><span style="color:#F8F8F2;" data-v-b9e3b1ff> ( event.clientY </span><span style="color:#FF79C6;" data-v-b9e3b1ff>/</span><span style="color:#F8F8F2;" data-v-b9e3b1ff> window.innerHeight ) </span><span style="color:#FF79C6;" data-v-b9e3b1ff>*</span><span style="color:#BD93F9;" data-v-b9e3b1ff> 2</span><span style="color:#FF79C6;" data-v-b9e3b1ff> +</span><span style="color:#BD93F9;" data-v-b9e3b1ff> 1</span><span style="color:#F8F8F2;" data-v-b9e3b1ff>;</span></span>
<span class="line" data-v-b9e3b1ff><span style="color:#F8F8F2;" data-v-b9e3b1ff> raycaster.</span><span style="color:#50FA7B;" data-v-b9e3b1ff>setFromCamera</span><span style="color:#F8F8F2;" data-v-b9e3b1ff>( mouse, camera );</span></span>
<span class="line" data-v-b9e3b1ff><span style="color:#FF79C6;" data-v-b9e3b1ff> const</span><span style="color:#F8F8F2;" data-v-b9e3b1ff> intersects </span><span style="color:#FF79C6;" data-v-b9e3b1ff>=</span><span style="color:#F8F8F2;" data-v-b9e3b1ff> raycaster.</span><span style="color:#50FA7B;" data-v-b9e3b1ff>intersectObjects</span><span style="color:#F8F8F2;" data-v-b9e3b1ff>( scene.children, </span><span style="color:#BD93F9;" data-v-b9e3b1ff>false</span><span style="color:#F8F8F2;" data-v-b9e3b1ff> );</span></span>
<span class="line" data-v-b9e3b1ff><span style="color:#FF79C6;" data-v-b9e3b1ff> if</span><span style="color:#F8F8F2;" data-v-b9e3b1ff> ( intersects.length </span><span style="color:#FF79C6;" data-v-b9e3b1ff>&gt;</span><span style="color:#BD93F9;" data-v-b9e3b1ff> 0</span><span style="color:#F8F8F2;" data-v-b9e3b1ff> ) {</span></span>
<span class="line" data-v-b9e3b1ff><span style="color:#FF79C6;" data-v-b9e3b1ff>  const</span><span style="color:#F8F8F2;" data-v-b9e3b1ff> object </span><span style="color:#FF79C6;" data-v-b9e3b1ff>=</span><span style="color:#F8F8F2;" data-v-b9e3b1ff> intersects[ </span><span style="color:#BD93F9;" data-v-b9e3b1ff>0</span><span style="color:#F8F8F2;" data-v-b9e3b1ff> ].object;</span></span>
<span class="line" data-v-b9e3b1ff><span style="color:#F8F8F2;" data-v-b9e3b1ff>  object.layers.</span><span style="color:#50FA7B;" data-v-b9e3b1ff>toggle</span><span style="color:#F8F8F2;" data-v-b9e3b1ff>( BLOOM_SCENE );</span></span>
<span class="line" data-v-b9e3b1ff><span style="color:#50FA7B;" data-v-b9e3b1ff>  render</span><span style="color:#F8F8F2;" data-v-b9e3b1ff>();</span></span>
<span class="line" data-v-b9e3b1ff><span style="color:#F8F8F2;" data-v-b9e3b1ff> }</span></span>
<span class="line" data-v-b9e3b1ff><span style="color:#F8F8F2;" data-v-b9e3b1ff>}</span></span>
<span class="line" data-v-b9e3b1ff><span style="color:#6272A4;" data-v-b9e3b1ff>//渲染不同的场景</span></span>
<span class="line" data-v-b9e3b1ff><span style="color:#6272A4;" data-v-b9e3b1ff>//</span></span>
<span class="line" data-v-b9e3b1ff><span style="color:#6272A4;" data-v-b9e3b1ff>// 渲染函数，根据 params 中定义的场景类型选择不同的渲染方式</span></span>
<span class="line" data-v-b9e3b1ff><span style="color:#FF79C6;" data-v-b9e3b1ff>function</span><span style="color:#50FA7B;" data-v-b9e3b1ff> render</span><span style="color:#F8F8F2;" data-v-b9e3b1ff>() {</span></span>
<span class="line" data-v-b9e3b1ff><span style="color:#FF79C6;" data-v-b9e3b1ff> switch</span><span style="color:#F8F8F2;" data-v-b9e3b1ff> ( params.scene ) {</span></span>
<span class="line" data-v-b9e3b1ff><span style="color:#FF79C6;" data-v-b9e3b1ff>  case</span><span style="color:#E9F284;" data-v-b9e3b1ff> &#39;</span><span style="color:#F1FA8C;" data-v-b9e3b1ff>Scene only</span><span style="color:#E9F284;" data-v-b9e3b1ff>&#39;</span><span style="color:#F8F8F2;" data-v-b9e3b1ff>:</span></span>
<span class="line" data-v-b9e3b1ff><span style="color:#F8F8F2;" data-v-b9e3b1ff>   renderer.</span><span style="color:#50FA7B;" data-v-b9e3b1ff>render</span><span style="color:#F8F8F2;" data-v-b9e3b1ff>( scene, camera );</span></span>
<span class="line" data-v-b9e3b1ff><span style="color:#FF79C6;" data-v-b9e3b1ff>   break</span><span style="color:#F8F8F2;" data-v-b9e3b1ff>;</span></span>
<span class="line" data-v-b9e3b1ff><span style="color:#FF79C6;" data-v-b9e3b1ff>  case</span><span style="color:#E9F284;" data-v-b9e3b1ff> &#39;</span><span style="color:#F1FA8C;" data-v-b9e3b1ff>Glow only</span><span style="color:#E9F284;" data-v-b9e3b1ff>&#39;</span><span style="color:#F8F8F2;" data-v-b9e3b1ff>:</span></span>
<span class="line" data-v-b9e3b1ff><span style="color:#50FA7B;" data-v-b9e3b1ff>   renderBloom</span><span style="color:#F8F8F2;" data-v-b9e3b1ff>( </span><span style="color:#BD93F9;" data-v-b9e3b1ff>false</span><span style="color:#F8F8F2;" data-v-b9e3b1ff> );</span></span>
<span class="line" data-v-b9e3b1ff><span style="color:#FF79C6;" data-v-b9e3b1ff>   break</span><span style="color:#F8F8F2;" data-v-b9e3b1ff>;</span></span>
<span class="line" data-v-b9e3b1ff><span style="color:#FF79C6;" data-v-b9e3b1ff>  case</span><span style="color:#E9F284;" data-v-b9e3b1ff> &#39;</span><span style="color:#F1FA8C;" data-v-b9e3b1ff>Scene with Glow</span><span style="color:#E9F284;" data-v-b9e3b1ff>&#39;</span><span style="color:#F8F8F2;" data-v-b9e3b1ff>:</span></span>
<span class="line" data-v-b9e3b1ff><span style="color:#FF79C6;" data-v-b9e3b1ff>  default</span><span style="color:#F8F8F2;" data-v-b9e3b1ff>:</span></span>
<span class="line" data-v-b9e3b1ff><span style="color:#6272A4;" data-v-b9e3b1ff>   // render scene with bloom</span></span>
<span class="line" data-v-b9e3b1ff><span style="color:#50FA7B;" data-v-b9e3b1ff>   renderBloom</span><span style="color:#F8F8F2;" data-v-b9e3b1ff>( </span><span style="color:#BD93F9;" data-v-b9e3b1ff>true</span><span style="color:#F8F8F2;" data-v-b9e3b1ff> );</span></span>
<span class="line" data-v-b9e3b1ff></span>
<span class="line" data-v-b9e3b1ff><span style="color:#6272A4;" data-v-b9e3b1ff>   // render the entire scene, then render bloom scene on top</span></span>
<span class="line" data-v-b9e3b1ff><span style="color:#F8F8F2;" data-v-b9e3b1ff>   finalComposer.</span><span style="color:#50FA7B;" data-v-b9e3b1ff>render</span><span style="color:#F8F8F2;" data-v-b9e3b1ff>();</span></span>
<span class="line" data-v-b9e3b1ff><span style="color:#FF79C6;" data-v-b9e3b1ff>   break</span><span style="color:#F8F8F2;" data-v-b9e3b1ff>;</span></span>
<span class="line" data-v-b9e3b1ff><span style="color:#F8F8F2;" data-v-b9e3b1ff> }</span></span>
<span class="line" data-v-b9e3b1ff><span style="color:#F8F8F2;" data-v-b9e3b1ff>}</span></span>
<span class="line" data-v-b9e3b1ff><span style="color:#6272A4;" data-v-b9e3b1ff>// 渲染发光效果</span></span>
<span class="line" data-v-b9e3b1ff><span style="color:#FF79C6;" data-v-b9e3b1ff>function</span><span style="color:#50FA7B;" data-v-b9e3b1ff> renderBloom</span><span style="color:#F8F8F2;" data-v-b9e3b1ff>( </span><span style="color:#FFB86C;font-style:italic;" data-v-b9e3b1ff>mask</span><span style="color:#F8F8F2;" data-v-b9e3b1ff> ) {</span></span>
<span class="line" data-v-b9e3b1ff><span style="color:#FF79C6;" data-v-b9e3b1ff> if</span><span style="color:#F8F8F2;" data-v-b9e3b1ff> ( mask </span><span style="color:#FF79C6;" data-v-b9e3b1ff>===</span><span style="color:#BD93F9;" data-v-b9e3b1ff> true</span><span style="color:#F8F8F2;" data-v-b9e3b1ff> ) { </span><span style="color:#6272A4;" data-v-b9e3b1ff>// 只渲染发光物体</span></span>
<span class="line" data-v-b9e3b1ff><span style="color:#F8F8F2;" data-v-b9e3b1ff>  scene.</span><span style="color:#50FA7B;" data-v-b9e3b1ff>traverse</span><span style="color:#F8F8F2;" data-v-b9e3b1ff>( darkenNonBloomed );</span></span>
<span class="line" data-v-b9e3b1ff><span style="color:#F8F8F2;" data-v-b9e3b1ff>  bloomComposer.</span><span style="color:#50FA7B;" data-v-b9e3b1ff>render</span><span style="color:#F8F8F2;" data-v-b9e3b1ff>();</span></span>
<span class="line" data-v-b9e3b1ff><span style="color:#F8F8F2;" data-v-b9e3b1ff>  scene.</span><span style="color:#50FA7B;" data-v-b9e3b1ff>traverse</span><span style="color:#F8F8F2;" data-v-b9e3b1ff>( restoreMaterial );</span></span>
<span class="line" data-v-b9e3b1ff><span style="color:#F8F8F2;" data-v-b9e3b1ff> } </span><span style="color:#FF79C6;" data-v-b9e3b1ff>else</span><span style="color:#F8F8F2;" data-v-b9e3b1ff> { </span><span style="color:#6272A4;" data-v-b9e3b1ff>// 渲染整个场景包括发光效果</span></span>
<span class="line" data-v-b9e3b1ff><span style="color:#F8F8F2;" data-v-b9e3b1ff>  camera.layers.</span><span style="color:#50FA7B;" data-v-b9e3b1ff>set</span><span style="color:#F8F8F2;" data-v-b9e3b1ff>( BLOOM_SCENE );</span></span>
<span class="line" data-v-b9e3b1ff><span style="color:#F8F8F2;" data-v-b9e3b1ff>  bloomComposer.</span><span style="color:#50FA7B;" data-v-b9e3b1ff>render</span><span style="color:#F8F8F2;" data-v-b9e3b1ff>();</span></span>
<span class="line" data-v-b9e3b1ff><span style="color:#F8F8F2;" data-v-b9e3b1ff>  camera.layers.</span><span style="color:#50FA7B;" data-v-b9e3b1ff>set</span><span style="color:#F8F8F2;" data-v-b9e3b1ff>( ENTIRE_SCENE );</span></span>
<span class="line" data-v-b9e3b1ff><span style="color:#F8F8F2;" data-v-b9e3b1ff> }</span></span>
<span class="line" data-v-b9e3b1ff><span style="color:#F8F8F2;" data-v-b9e3b1ff>}</span></span>
<span class="line" data-v-b9e3b1ff><span style="color:#FF79C6;" data-v-b9e3b1ff>function</span><span style="color:#50FA7B;" data-v-b9e3b1ff> darkenNonBloomed</span><span style="color:#F8F8F2;" data-v-b9e3b1ff>( </span><span style="color:#FFB86C;font-style:italic;" data-v-b9e3b1ff>obj</span><span style="color:#F8F8F2;" data-v-b9e3b1ff> ) {</span></span>
<span class="line" data-v-b9e3b1ff><span style="color:#FF79C6;" data-v-b9e3b1ff> if</span><span style="color:#F8F8F2;" data-v-b9e3b1ff> ( obj.isMesh </span><span style="color:#FF79C6;" data-v-b9e3b1ff>&amp;&amp;</span><span style="color:#F8F8F2;" data-v-b9e3b1ff> bloomLayer.</span><span style="color:#50FA7B;" data-v-b9e3b1ff>test</span><span style="color:#F8F8F2;" data-v-b9e3b1ff>( obj.layers ) </span><span style="color:#FF79C6;" data-v-b9e3b1ff>===</span><span style="color:#BD93F9;" data-v-b9e3b1ff> false</span><span style="color:#F8F8F2;" data-v-b9e3b1ff> ) {</span></span>
<span class="line" data-v-b9e3b1ff><span style="color:#F8F8F2;" data-v-b9e3b1ff>  materials[ obj.uuid ] </span><span style="color:#FF79C6;" data-v-b9e3b1ff>=</span><span style="color:#F8F8F2;" data-v-b9e3b1ff> obj.material;</span></span>
<span class="line" data-v-b9e3b1ff><span style="color:#F8F8F2;" data-v-b9e3b1ff>  obj.material </span><span style="color:#FF79C6;" data-v-b9e3b1ff>=</span><span style="color:#F8F8F2;" data-v-b9e3b1ff> darkMaterial;</span></span>
<span class="line" data-v-b9e3b1ff><span style="color:#F8F8F2;" data-v-b9e3b1ff> }</span></span>
<span class="line" data-v-b9e3b1ff><span style="color:#F8F8F2;" data-v-b9e3b1ff>}</span></span>
<span class="line" data-v-b9e3b1ff><span style="color:#FF79C6;" data-v-b9e3b1ff>function</span><span style="color:#50FA7B;" data-v-b9e3b1ff> restoreMaterial</span><span style="color:#F8F8F2;" data-v-b9e3b1ff>( </span><span style="color:#FFB86C;font-style:italic;" data-v-b9e3b1ff>obj</span><span style="color:#F8F8F2;" data-v-b9e3b1ff> ) {</span></span>
<span class="line" data-v-b9e3b1ff><span style="color:#FF79C6;" data-v-b9e3b1ff> if</span><span style="color:#F8F8F2;" data-v-b9e3b1ff> ( materials[ obj.uuid ] ) {</span></span>
<span class="line" data-v-b9e3b1ff><span style="color:#F8F8F2;" data-v-b9e3b1ff>  obj.material </span><span style="color:#FF79C6;" data-v-b9e3b1ff>=</span><span style="color:#F8F8F2;" data-v-b9e3b1ff> materials[ obj.uuid ];</span></span>
<span class="line" data-v-b9e3b1ff><span style="color:#FF79C6;" data-v-b9e3b1ff>  delete</span><span style="color:#F8F8F2;" data-v-b9e3b1ff> materials[ obj.uuid ];</span></span>
<span class="line" data-v-b9e3b1ff><span style="color:#F8F8F2;" data-v-b9e3b1ff> }</span></span>
<span class="line" data-v-b9e3b1ff><span style="color:#F8F8F2;" data-v-b9e3b1ff>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;" data-v-b9e3b1ff><div class="line-number" data-v-b9e3b1ff></div><div class="line-number" data-v-b9e3b1ff></div><div class="line-number" data-v-b9e3b1ff></div><div class="line-number" data-v-b9e3b1ff></div><div class="line-number" data-v-b9e3b1ff></div><div class="line-number" data-v-b9e3b1ff></div><div class="line-number" data-v-b9e3b1ff></div><div class="line-number" data-v-b9e3b1ff></div><div class="line-number" data-v-b9e3b1ff></div><div class="line-number" data-v-b9e3b1ff></div><div class="line-number" data-v-b9e3b1ff></div><div class="line-number" data-v-b9e3b1ff></div><div class="line-number" data-v-b9e3b1ff></div><div class="line-number" data-v-b9e3b1ff></div><div class="line-number" data-v-b9e3b1ff></div><div class="line-number" data-v-b9e3b1ff></div><div class="line-number" data-v-b9e3b1ff></div><div class="line-number" data-v-b9e3b1ff></div><div class="line-number" data-v-b9e3b1ff></div><div class="line-number" data-v-b9e3b1ff></div><div class="line-number" data-v-b9e3b1ff></div><div class="line-number" data-v-b9e3b1ff></div><div class="line-number" data-v-b9e3b1ff></div><div class="line-number" data-v-b9e3b1ff></div><div class="line-number" data-v-b9e3b1ff></div><div class="line-number" data-v-b9e3b1ff></div><div class="line-number" data-v-b9e3b1ff></div><div class="line-number" data-v-b9e3b1ff></div><div class="line-number" data-v-b9e3b1ff></div><div class="line-number" data-v-b9e3b1ff></div><div class="line-number" data-v-b9e3b1ff></div><div class="line-number" data-v-b9e3b1ff></div><div class="line-number" data-v-b9e3b1ff></div><div class="line-number" data-v-b9e3b1ff></div><div class="line-number" data-v-b9e3b1ff></div><div class="line-number" data-v-b9e3b1ff></div><div class="line-number" data-v-b9e3b1ff></div><div class="line-number" data-v-b9e3b1ff></div><div class="line-number" data-v-b9e3b1ff></div><div class="line-number" data-v-b9e3b1ff></div><div class="line-number" data-v-b9e3b1ff></div><div class="line-number" data-v-b9e3b1ff></div><div class="line-number" data-v-b9e3b1ff></div><div class="line-number" data-v-b9e3b1ff></div><div class="line-number" data-v-b9e3b1ff></div><div class="line-number" data-v-b9e3b1ff></div><div class="line-number" data-v-b9e3b1ff></div><div class="line-number" data-v-b9e3b1ff></div><div class="line-number" data-v-b9e3b1ff></div><div class="line-number" data-v-b9e3b1ff></div><div class="line-number" data-v-b9e3b1ff></div><div class="line-number" data-v-b9e3b1ff></div><div class="line-number" data-v-b9e3b1ff></div><div class="line-number" data-v-b9e3b1ff></div><div class="line-number" data-v-b9e3b1ff></div><div class="line-number" data-v-b9e3b1ff></div><div class="line-number" data-v-b9e3b1ff></div><div class="line-number" data-v-b9e3b1ff></div><div class="line-number" data-v-b9e3b1ff></div><div class="line-number" data-v-b9e3b1ff></div><div class="line-number" data-v-b9e3b1ff></div><div class="line-number" data-v-b9e3b1ff></div><div class="line-number" data-v-b9e3b1ff></div><div class="line-number" data-v-b9e3b1ff></div><div class="line-number" data-v-b9e3b1ff></div><div class="line-number" data-v-b9e3b1ff></div><div class="line-number" data-v-b9e3b1ff></div><div class="line-number" data-v-b9e3b1ff></div><div class="line-number" data-v-b9e3b1ff></div><div class="line-number" data-v-b9e3b1ff></div><div class="line-number" data-v-b9e3b1ff></div><div class="line-number" data-v-b9e3b1ff></div><div class="line-number" data-v-b9e3b1ff></div><div class="line-number" data-v-b9e3b1ff></div><div class="line-number" data-v-b9e3b1ff></div><div class="line-number" data-v-b9e3b1ff></div><div class="line-number" data-v-b9e3b1ff></div><div class="line-number" data-v-b9e3b1ff></div><div class="line-number" data-v-b9e3b1ff></div><div class="line-number" data-v-b9e3b1ff></div><div class="line-number" data-v-b9e3b1ff></div><div class="line-number" data-v-b9e3b1ff></div><div class="line-number" data-v-b9e3b1ff></div><div class="line-number" data-v-b9e3b1ff></div><div class="line-number" data-v-b9e3b1ff></div><div class="line-number" data-v-b9e3b1ff></div><div class="line-number" data-v-b9e3b1ff></div><div class="line-number" data-v-b9e3b1ff></div><div class="line-number" data-v-b9e3b1ff></div><div class="line-number" data-v-b9e3b1ff></div><div class="line-number" data-v-b9e3b1ff></div><div class="line-number" data-v-b9e3b1ff></div><div class="line-number" data-v-b9e3b1ff></div><div class="line-number" data-v-b9e3b1ff></div><div class="line-number" data-v-b9e3b1ff></div><div class="line-number" data-v-b9e3b1ff></div><div class="line-number" data-v-b9e3b1ff></div><div class="line-number" data-v-b9e3b1ff></div><div class="line-number" data-v-b9e3b1ff></div><div class="line-number" data-v-b9e3b1ff></div><div class="line-number" data-v-b9e3b1ff></div><div class="line-number" data-v-b9e3b1ff></div><div class="line-number" data-v-b9e3b1ff></div><div class="line-number" data-v-b9e3b1ff></div><div class="line-number" data-v-b9e3b1ff></div><div class="line-number" data-v-b9e3b1ff></div><div class="line-number" data-v-b9e3b1ff></div><div class="line-number" data-v-b9e3b1ff></div><div class="line-number" data-v-b9e3b1ff></div><div class="line-number" data-v-b9e3b1ff></div><div class="line-number" data-v-b9e3b1ff></div><div class="line-number" data-v-b9e3b1ff></div><div class="line-number" data-v-b9e3b1ff></div><div class="line-number" data-v-b9e3b1ff></div><div class="line-number" data-v-b9e3b1ff></div><div class="line-number" data-v-b9e3b1ff></div><div class="line-number" data-v-b9e3b1ff></div><div class="line-number" data-v-b9e3b1ff></div><div class="line-number" data-v-b9e3b1ff></div><div class="line-number" data-v-b9e3b1ff></div></div></div>`,3)),ae("div",Qe,null,512)])}const $e=me(Ge,[["render",Ie],["__scopeId","data-v-b9e3b1ff"],["__file","threejs-luminous.html.vue"]]),ea=JSON.parse('{"path":"/threejs/threejs-luminous.html","title":"ThreeJS中的效果合成器","lang":"en-US","frontmatter":{"title":"ThreeJS中的效果合成器","category":["ThreeJS"],"date":"2022-03-02T00:00:00.000Z","description":"参考：https://threejs.org/ UnrealBloomPass 实现逼真的bloom（即景物周围余晖）效果 new THREE.Vector2( window.innerWidth, window.innerHeight )：表示渲染的分辨率大小。 strength：效果强度，默认值为1。 radius：半径大小，默认值为0。 thre...","head":[["meta",{"property":"og:url","content":"https://luxiag.github.io/luxiag/blog/threejs/threejs-luminous.html"}],["meta",{"property":"og:title","content":"ThreeJS中的效果合成器"}],["meta",{"property":"og:description","content":"参考：https://threejs.org/ UnrealBloomPass 实现逼真的bloom（即景物周围余晖）效果 new THREE.Vector2( window.innerWidth, window.innerHeight )：表示渲染的分辨率大小。 strength：效果强度，默认值为1。 radius：半径大小，默认值为0。 thre..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2024-11-03T04:27:20.000Z"}],["meta",{"property":"article:published_time","content":"2022-03-02T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-11-03T04:27:20.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"ThreeJS中的效果合成器\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-03-02T00:00:00.000Z\\",\\"dateModified\\":\\"2024-11-03T04:27:20.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"luxiag\\",\\"url\\":\\"https://luxiag.github.io/luxiag\\"}]}"]]},"headers":[],"git":{"createdTime":1681959670000,"updatedTime":1730608040000,"contributors":[{"name":"luxiag","email":"luxiag@qq.com","commits":4},{"name":"卢祥","email":"example@qq.com","commits":2}]},"readingTime":{"minutes":7.06,"words":2118},"filePathRelative":"threejs/threejs-luminous.md","localizedDate":"March 2, 2022","excerpt":"<p>参考：<a href=\\"https://threejs.org/\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">https://threejs.org/</a></p>","autoDesc":true}');export{$e as comp,ea as data};
