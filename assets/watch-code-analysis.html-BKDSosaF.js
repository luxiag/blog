import{_ as n,c as a,a as l,o as e}from"./app-BtF4yjxr.js";const p={};function o(F,s){return e(),a("div",null,s[0]||(s[0]=[l(`<details class="hint-container details"><summary>watch 使用</summary><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">var</span><span style="color:#F8F8F2;"> vm </span><span style="color:#FF79C6;">=</span><span style="color:#FF79C6;font-weight:bold;"> new</span><span style="color:#50FA7B;"> Vue</span><span style="color:#F8F8F2;">({</span></span>
<span class="line"><span style="color:#F8F8F2;">  data</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">    a</span><span style="color:#FF79C6;">:</span><span style="color:#BD93F9;"> 1</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">    b</span><span style="color:#FF79C6;">:</span><span style="color:#BD93F9;"> 2</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">    c</span><span style="color:#FF79C6;">:</span><span style="color:#BD93F9;"> 3</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">    d</span><span style="color:#FF79C6;">:</span><span style="color:#BD93F9;"> 4</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">    e</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">      f</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">        g</span><span style="color:#FF79C6;">:</span><span style="color:#BD93F9;"> 5</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">      },</span></span>
<span class="line"><span style="color:#F8F8F2;">    },</span></span>
<span class="line"><span style="color:#F8F8F2;">  },</span></span>
<span class="line"><span style="color:#F8F8F2;">  watch</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#50FA7B;">    a</span><span style="color:#FF79C6;">:</span><span style="color:#FF79C6;"> function</span><span style="color:#F8F8F2;"> (</span><span style="color:#FFB86C;font-style:italic;">val</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">oldVal</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">      console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">new: %s, old: %s</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">, val, oldVal);</span></span>
<span class="line"><span style="color:#F8F8F2;">    },</span></span>
<span class="line"><span style="color:#6272A4;">    // 方法名</span></span>
<span class="line"><span style="color:#F8F8F2;">    b</span><span style="color:#FF79C6;">:</span><span style="color:#E9F284;"> &quot;</span><span style="color:#F1FA8C;">someMethod</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#6272A4;">    // 该回调会在任何被侦听的对象的 property 改变时被调用，不论其被嵌套多深</span></span>
<span class="line"><span style="color:#F8F8F2;">    c</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#50FA7B;">      handler</span><span style="color:#FF79C6;">:</span><span style="color:#FF79C6;"> function</span><span style="color:#F8F8F2;"> (</span><span style="color:#FFB86C;font-style:italic;">val</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">oldVal</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#6272A4;">        /* ... */</span></span>
<span class="line"><span style="color:#F8F8F2;">      },</span></span>
<span class="line"><span style="color:#F8F8F2;">      deep</span><span style="color:#FF79C6;">:</span><span style="color:#BD93F9;"> true</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">    },</span></span>
<span class="line"><span style="color:#6272A4;">    // 该回调将会在侦听开始之后被立即调用</span></span>
<span class="line"><span style="color:#F8F8F2;">    d</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">      handler</span><span style="color:#FF79C6;">:</span><span style="color:#E9F284;"> &quot;</span><span style="color:#F1FA8C;">someMethod</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">      immediate</span><span style="color:#FF79C6;">:</span><span style="color:#BD93F9;"> true</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">    },</span></span>
<span class="line"><span style="color:#6272A4;">    // 你可以传入回调数组，它们会被逐一调用</span></span>
<span class="line"><span style="color:#F8F8F2;">    e</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> [</span></span>
<span class="line"><span style="color:#E9F284;">      &quot;</span><span style="color:#F1FA8C;">handle1</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#FF79C6;">      function</span><span style="color:#50FA7B;"> handle2</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">val</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">oldVal</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#6272A4;">        /* ... */</span></span>
<span class="line"><span style="color:#F8F8F2;">      },</span></span>
<span class="line"><span style="color:#F8F8F2;">      {</span></span>
<span class="line"><span style="color:#50FA7B;">        handler</span><span style="color:#FF79C6;">:</span><span style="color:#FF79C6;"> function</span><span style="color:#50FA7B;"> handle3</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">val</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">oldVal</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#6272A4;">          /* ... */</span></span>
<span class="line"><span style="color:#F8F8F2;">        },</span></span>
<span class="line"><span style="color:#6272A4;">        /* ... */</span></span>
<span class="line"><span style="color:#F8F8F2;">      },</span></span>
<span class="line"><span style="color:#F8F8F2;">    ],</span></span>
<span class="line"><span style="color:#6272A4;">    // watch vm.e.f&#39;s value: {g: 5}</span></span>
<span class="line"><span style="color:#E9F284;">    &quot;</span><span style="color:#F1FA8C;">e.f</span><span style="color:#E9F284;">&quot;</span><span style="color:#FF79C6;">:</span><span style="color:#FF79C6;"> function</span><span style="color:#F8F8F2;"> (</span><span style="color:#FFB86C;font-style:italic;">val</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">oldVal</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#6272A4;">      /* ... */</span></span>
<span class="line"><span style="color:#F8F8F2;">    },</span></span>
<span class="line"><span style="color:#F8F8F2;">  },</span></span>
<span class="line"><span style="color:#F8F8F2;">});</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#F8F8F2;">watch:{</span></span>
<span class="line"><span style="color:#50FA7B;">    name</span><span style="color:#F8F8F2;">(newName) {</span><span style="color:#FF79C6;">...</span><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BD93F9;font-style:italic;">this</span><span style="color:#F8F8F2;">.</span><span style="color:#50FA7B;">$watch</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">name</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">,</span><span style="color:#FF79C6;">function</span><span style="color:#F8F8F2;"> (</span><span style="color:#FFB86C;font-style:italic;">newName</span><span style="color:#F8F8F2;">) {</span><span style="color:#FF79C6;">...</span><span style="color:#F8F8F2;">})</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="init" tabindex="-1"><a class="header-anchor" href="#init"><span>init</span></a></h2><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">export</span><span style="color:#FF79C6;"> function</span><span style="color:#50FA7B;"> initState</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">vm</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> Component</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#FF79C6;">  const</span><span style="color:#F8F8F2;"> opts </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> vm.$options;</span></span>
<span class="line"><span style="color:#FF79C6;">  if</span><span style="color:#F8F8F2;"> (opts.watch </span><span style="color:#FF79C6;">&amp;&amp;</span><span style="color:#F8F8F2;"> opts.watch </span><span style="color:#FF79C6;">!==</span><span style="color:#F8F8F2;"> nativeWatch) {</span></span>
<span class="line"><span style="color:#50FA7B;">    initWatch</span><span style="color:#F8F8F2;">(vm, opts.watch);</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">function</span><span style="color:#50FA7B;"> initWatch</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">vm</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> Component</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">watch</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> Object</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#FF79C6;">  for</span><span style="color:#F8F8F2;"> (</span><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> key </span><span style="color:#FF79C6;">in</span><span style="color:#F8F8F2;"> watch) {</span></span>
<span class="line"><span style="color:#FF79C6;">    const</span><span style="color:#F8F8F2;"> handler </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> watch[key];</span></span>
<span class="line"><span style="color:#FF79C6;">    if</span><span style="color:#F8F8F2;"> (</span><span style="color:#50FA7B;">isArray</span><span style="color:#F8F8F2;">(handler)) {</span></span>
<span class="line"><span style="color:#FF79C6;">      for</span><span style="color:#F8F8F2;"> (</span><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> i </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> 0</span><span style="color:#F8F8F2;">; i </span><span style="color:#FF79C6;">&lt;</span><span style="color:#F8F8F2;"> handler.length; i</span><span style="color:#FF79C6;">++</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#50FA7B;">        createWatcher</span><span style="color:#F8F8F2;">(vm, key, handler[i]);</span></span>
<span class="line"><span style="color:#F8F8F2;">      }</span></span>
<span class="line"><span style="color:#F8F8F2;">    } </span><span style="color:#FF79C6;">else</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#50FA7B;">      createWatcher</span><span style="color:#F8F8F2;">(vm, key, handler);</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="createwatcher" tabindex="-1"><a class="header-anchor" href="#createwatcher"><span>createWatcher</span></a></h3><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">function</span><span style="color:#50FA7B;"> createWatcher</span><span style="color:#F8F8F2;">(</span></span>
<span class="line"><span style="color:#FFB86C;font-style:italic;">  vm</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> Component</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#FFB86C;font-style:italic;">  expOrFn</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> string</span><span style="color:#FF79C6;"> |</span><span style="color:#F8F8F2;"> (() </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#8BE9FD;font-style:italic;"> any</span><span style="color:#F8F8F2;">), </span><span style="color:#6272A4;">//key</span></span>
<span class="line"><span style="color:#FFB86C;font-style:italic;">  handler</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> any</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#FFB86C;font-style:italic;">  options</span><span style="color:#FF79C6;">?:</span><span style="color:#8BE9FD;font-style:italic;"> Object</span></span>
<span class="line"><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#FF79C6;">  if</span><span style="color:#F8F8F2;"> (</span><span style="color:#50FA7B;">isPlainObject</span><span style="color:#F8F8F2;">(handler)) {</span></span>
<span class="line"><span style="color:#F8F8F2;">    options </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> handler;</span></span>
<span class="line"><span style="color:#F8F8F2;">    handler </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> handler.handler;</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#FF79C6;">  if</span><span style="color:#F8F8F2;"> (</span><span style="color:#FF79C6;">typeof</span><span style="color:#F8F8F2;"> handler </span><span style="color:#FF79C6;">===</span><span style="color:#E9F284;"> &quot;</span><span style="color:#F1FA8C;">string</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">    handler </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> vm[handler];</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#FF79C6;">  return</span><span style="color:#F8F8F2;"> vm.</span><span style="color:#50FA7B;">$watch</span><span style="color:#F8F8F2;">(expOrFn, handler, options);</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="watch" tabindex="-1"><a class="header-anchor" href="#watch"><span>$watch</span></a></h3><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#8BE9FD;font-style:italic;">Vue</span><span style="color:#F8F8F2;">.prototype.</span><span style="color:#50FA7B;">$watch</span><span style="color:#FF79C6;"> =</span><span style="color:#FF79C6;"> function</span><span style="color:#F8F8F2;"> (</span></span>
<span class="line"><span style="color:#FFB86C;font-style:italic;">  expOrFn</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> string</span><span style="color:#FF79C6;"> |</span><span style="color:#F8F8F2;"> (() </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#8BE9FD;font-style:italic;"> any</span><span style="color:#F8F8F2;">),</span></span>
<span class="line"><span style="color:#FFB86C;font-style:italic;">  cb</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> any</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#FFB86C;font-style:italic;">  options</span><span style="color:#FF79C6;">?:</span><span style="color:#8BE9FD;font-style:italic;"> Record</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#8BE9FD;font-style:italic;">string</span><span style="color:#F8F8F2;">, </span><span style="color:#8BE9FD;font-style:italic;">any</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">)</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> Function</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#FF79C6;">  const</span><span style="color:#F8F8F2;"> vm</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> Component</span><span style="color:#FF79C6;"> =</span><span style="color:#BD93F9;font-style:italic;"> this</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#FF79C6;">  if</span><span style="color:#F8F8F2;"> (</span><span style="color:#50FA7B;">isPlainObject</span><span style="color:#F8F8F2;">(cb)) {</span></span>
<span class="line"><span style="color:#6272A4;">    // 如果cb是对象</span></span>
<span class="line"><span style="color:#FF79C6;">    return</span><span style="color:#50FA7B;"> createWatcher</span><span style="color:#F8F8F2;">(vm, expOrFn, cb, options);</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">  options </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> options </span><span style="color:#FF79C6;">||</span><span style="color:#F8F8F2;"> {};</span></span>
<span class="line"><span style="color:#6272A4;">  //   user Watcher 标记</span></span>
<span class="line"><span style="color:#F8F8F2;">  options.user </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> true</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#6272A4;">  // vm = vue</span></span>
<span class="line"><span style="color:#6272A4;">  //expOrFn = key</span></span>
<span class="line"><span style="color:#6272A4;">  // cb handler</span></span>
<span class="line"><span style="color:#6272A4;">  // options = {immediate?: true,deep?:true}</span></span>
<span class="line"><span style="color:#FF79C6;">  const</span><span style="color:#F8F8F2;"> watcher </span><span style="color:#FF79C6;">=</span><span style="color:#FF79C6;font-weight:bold;"> new</span><span style="color:#50FA7B;"> Watcher</span><span style="color:#F8F8F2;">(vm, expOrFn, cb, options);</span></span>
<span class="line"><span style="color:#6272A4;">  //  立刻执行</span></span>
<span class="line"><span style="color:#FF79C6;">  if</span><span style="color:#F8F8F2;"> (options.immediate) {</span></span>
<span class="line"><span style="color:#FF79C6;">    const</span><span style="color:#F8F8F2;"> info </span><span style="color:#FF79C6;">=</span><span style="color:#F1FA8C;"> \`callback for immediate watcher &quot;</span><span style="color:#FF79C6;">\${</span><span style="color:#F8F8F2;">watcher.expression</span><span style="color:#FF79C6;">}</span><span style="color:#F1FA8C;">&quot;\`</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#50FA7B;">    pushTarget</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#50FA7B;">    invokeWithErrorHandling</span><span style="color:#F8F8F2;">(cb, vm, [watcher.value], vm, info);</span></span>
<span class="line"><span style="color:#50FA7B;">    popTarget</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#6272A4;">  //   取消监听</span></span>
<span class="line"><span style="color:#FF79C6;">  return</span><span style="color:#FF79C6;"> function</span><span style="color:#50FA7B;"> unwatchFn</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#F8F8F2;">    watcher.</span><span style="color:#50FA7B;">teardown</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#F8F8F2;">  };</span></span>
<span class="line"><span style="color:#F8F8F2;">};</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><details class="hint-container details"><summary>watcher</summary><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">class</span><span style="color:#8BE9FD;"> Watcher</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#FF79C6;">  constructor</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#BD93F9;font-style:italic;">    this</span><span style="color:#F8F8F2;">.deep </span><span style="color:#FF79C6;">=</span><span style="color:#FF79C6;"> !!</span><span style="color:#F8F8F2;">options.deep;</span></span>
<span class="line"><span style="color:#BD93F9;font-style:italic;">    this</span><span style="color:#F8F8F2;">.user </span><span style="color:#FF79C6;">=</span><span style="color:#FF79C6;"> !!</span><span style="color:#F8F8F2;">options.user;</span></span>
<span class="line"><span style="color:#BD93F9;font-style:italic;">    this</span><span style="color:#F8F8F2;">.sync </span><span style="color:#FF79C6;">=</span><span style="color:#FF79C6;"> !!</span><span style="color:#F8F8F2;">options.sync;</span></span>
<span class="line"><span style="color:#BD93F9;font-style:italic;">    this</span><span style="color:#F8F8F2;">.active </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> true</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#FF79C6;">    if</span><span style="color:#F8F8F2;"> (</span><span style="color:#50FA7B;">isFunction</span><span style="color:#F8F8F2;">(expOrFn)) {</span></span>
<span class="line"><span style="color:#BD93F9;font-style:italic;">      this</span><span style="color:#F8F8F2;">.getter </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> expOrFn;</span></span>
<span class="line"><span style="color:#F8F8F2;">    } </span><span style="color:#FF79C6;">else</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#BD93F9;font-style:italic;">      this</span><span style="color:#F8F8F2;">.getter </span><span style="color:#FF79C6;">=</span><span style="color:#50FA7B;"> parsePath</span><span style="color:#F8F8F2;">(expOrFn);</span></span>
<span class="line"><span style="color:#FF79C6;">      if</span><span style="color:#F8F8F2;"> (</span><span style="color:#FF79C6;">!</span><span style="color:#BD93F9;font-style:italic;">this</span><span style="color:#F8F8F2;">.getter) {</span></span>
<span class="line"><span style="color:#BD93F9;font-style:italic;">        this</span><span style="color:#F8F8F2;">.getter </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> noop;</span></span>
<span class="line"><span style="color:#F8F8F2;">      }</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#BD93F9;font-style:italic;">    this</span><span style="color:#F8F8F2;">.value </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;font-style:italic;"> this</span><span style="color:#F8F8F2;">.</span><span style="color:#50FA7B;">get</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><p>匹配 vm 上的对象</p><details class="hint-container details"><summary>parsePath</summary><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> bailRE </span><span style="color:#FF79C6;">=</span><span style="color:#FF5555;"> /</span><span style="color:#8BE9FD;">[</span><span style="color:#FF5555;">^</span><span style="color:#BD93F9;">\\w.</span><span style="color:#F1FA8C;">$</span><span style="color:#8BE9FD;">]</span><span style="color:#FF5555;">/</span><span style="color:#F8F8F2;">; </span><span style="color:#6272A4;">// 对象结构</span></span>
<span class="line"><span style="color:#FF79C6;">export</span><span style="color:#FF79C6;"> function</span><span style="color:#50FA7B;"> parsePath</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">path</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> string</span><span style="color:#F8F8F2;">)</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> any</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#FF79C6;">  if</span><span style="color:#F8F8F2;"> (bailRE.</span><span style="color:#50FA7B;">test</span><span style="color:#F8F8F2;">(path)) {</span></span>
<span class="line"><span style="color:#FF79C6;">    return</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#FF79C6;">  const</span><span style="color:#F8F8F2;"> segments </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> path.</span><span style="color:#50FA7B;">split</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">.</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#FF79C6;">  return</span><span style="color:#FF79C6;"> function</span><span style="color:#F8F8F2;"> (</span><span style="color:#FFB86C;font-style:italic;">obj</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#6272A4;">    // 调用的时候 obj = vm</span></span>
<span class="line"><span style="color:#6272A4;">    //  vm.a.b.c</span></span>
<span class="line"><span style="color:#FF79C6;">    for</span><span style="color:#F8F8F2;"> (</span><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> i </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> 0</span><span style="color:#F8F8F2;">; i </span><span style="color:#FF79C6;">&lt;</span><span style="color:#F8F8F2;"> segments.length; i</span><span style="color:#FF79C6;">++</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#FF79C6;">      if</span><span style="color:#F8F8F2;"> (</span><span style="color:#FF79C6;">!</span><span style="color:#F8F8F2;">obj) </span><span style="color:#FF79C6;">return</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#6272A4;">      //a.b.c</span></span>
<span class="line"><span style="color:#6272A4;">      // a = a[b]</span></span>
<span class="line"><span style="color:#6272A4;">      // a.b = a.b[c]</span></span>
<span class="line"><span style="color:#6272A4;">      // a.b.c</span></span>
<span class="line"><span style="color:#F8F8F2;">      obj </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> obj[segments[i]];</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#6272A4;">    // 返回该数据</span></span>
<span class="line"><span style="color:#FF79C6;">    return</span><span style="color:#F8F8F2;"> obj;</span></span>
<span class="line"><span style="color:#F8F8F2;">  };</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><details class="hint-container details"><summary>Watcher</summary><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">class</span><span style="color:#8BE9FD;"> Watcher</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#FF79C6;">  constructor</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#BD93F9;font-style:italic;">    this</span><span style="color:#F8F8F2;">.value </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;font-style:italic;"> this</span><span style="color:#F8F8F2;">.</span><span style="color:#50FA7B;">get</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#50FA7B;">  get</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#50FA7B;">    pushTarget</span><span style="color:#F8F8F2;">(</span><span style="color:#BD93F9;font-style:italic;">this</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#FF79C6;">    let</span><span style="color:#F8F8F2;"> value</span></span>
<span class="line"><span style="color:#FF79C6;">    const</span><span style="color:#F8F8F2;"> vm </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;font-style:italic;"> this</span><span style="color:#F8F8F2;">.vm</span></span>
<span class="line"><span style="color:#FF79C6;">    try</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#6272A4;">        // this.getter = 上面的闭包</span></span>
<span class="line"><span style="color:#6272A4;">        // value = vm上的值</span></span>
<span class="line"><span style="color:#6272A4;">        // 触发 vm上的值 的get</span></span>
<span class="line"><span style="color:#6272A4;">        // 进行依赖收集</span></span>
<span class="line"><span style="color:#F8F8F2;">      value </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;font-style:italic;"> this</span><span style="color:#F8F8F2;">.getter.</span><span style="color:#50FA7B;">call</span><span style="color:#F8F8F2;">(vm, vm)</span></span>
<span class="line"><span style="color:#F8F8F2;">    } </span><span style="color:#FF79C6;">catch</span><span style="color:#F8F8F2;"> (</span><span style="color:#FFB86C;font-style:italic;">e</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> any</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#FF79C6;">      if</span><span style="color:#F8F8F2;"> (</span><span style="color:#BD93F9;font-style:italic;">this</span><span style="color:#F8F8F2;">.user) {</span></span>
<span class="line"><span style="color:#50FA7B;">        handleError</span><span style="color:#F8F8F2;">(e, vm, </span><span style="color:#F1FA8C;">\`getter for watcher &quot;</span><span style="color:#FF79C6;">\${</span><span style="color:#BD93F9;font-style:italic;">this</span><span style="color:#F8F8F2;">.expression</span><span style="color:#FF79C6;">}</span><span style="color:#F1FA8C;">&quot;\`</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">      } </span><span style="color:#FF79C6;">else</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#FF79C6;">        throw</span><span style="color:#F8F8F2;"> e</span></span>
<span class="line"><span style="color:#F8F8F2;">      }</span></span>
<span class="line"><span style="color:#F8F8F2;">    } </span><span style="color:#FF79C6;">finally</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#6272A4;">      // &quot;touch&quot; every property so they are all tracked as</span></span>
<span class="line"><span style="color:#6272A4;">      // dependencies for deep watching</span></span>
<span class="line"><span style="color:#6272A4;">     //   判断是否需要深度监听</span></span>
<span class="line"><span style="color:#FF79C6;">      if</span><span style="color:#F8F8F2;"> (</span><span style="color:#BD93F9;font-style:italic;">this</span><span style="color:#F8F8F2;">.deep) {</span></span>
<span class="line"><span style="color:#50FA7B;">        traverse</span><span style="color:#F8F8F2;">(value)</span></span>
<span class="line"><span style="color:#F8F8F2;">      }</span></span>
<span class="line"><span style="color:#50FA7B;">      popTarget</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"><span style="color:#BD93F9;font-style:italic;">      this</span><span style="color:#F8F8F2;">.</span><span style="color:#50FA7B;">cleanupDeps</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#FF79C6;">    return</span><span style="color:#F8F8F2;"> value</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#6272A4;">    //   派发更新</span></span>
<span class="line"><span style="color:#50FA7B;">  run</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#FF79C6;">    if</span><span style="color:#F8F8F2;"> (</span><span style="color:#BD93F9;font-style:italic;">this</span><span style="color:#F8F8F2;">.active) {</span></span>
<span class="line"><span style="color:#FF79C6;">      const</span><span style="color:#F8F8F2;"> value </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;font-style:italic;"> this</span><span style="color:#F8F8F2;">.</span><span style="color:#50FA7B;">get</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"><span style="color:#FF79C6;">      if</span><span style="color:#F8F8F2;"> (</span></span>
<span class="line"><span style="color:#F8F8F2;">        value </span><span style="color:#FF79C6;">!==</span><span style="color:#BD93F9;font-style:italic;"> this</span><span style="color:#F8F8F2;">.value </span><span style="color:#FF79C6;">||</span></span>
<span class="line"><span style="color:#6272A4;">        // Deep watchers and watchers on Object/Arrays should fire even</span></span>
<span class="line"><span style="color:#6272A4;">        // when the value is the same, because the value may</span></span>
<span class="line"><span style="color:#6272A4;">        // have mutated.</span></span>
<span class="line"><span style="color:#50FA7B;">        isObject</span><span style="color:#F8F8F2;">(value) </span><span style="color:#FF79C6;">||</span></span>
<span class="line"><span style="color:#BD93F9;font-style:italic;">        this</span><span style="color:#F8F8F2;">.deep</span></span>
<span class="line"><span style="color:#F8F8F2;">      ) {</span></span>
<span class="line"><span style="color:#6272A4;">        // set new value</span></span>
<span class="line"><span style="color:#FF79C6;">        const</span><span style="color:#F8F8F2;"> oldValue </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;font-style:italic;"> this</span><span style="color:#F8F8F2;">.value</span></span>
<span class="line"><span style="color:#BD93F9;font-style:italic;">        this</span><span style="color:#F8F8F2;">.value </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> value</span></span>
<span class="line"><span style="color:#6272A4;">        // watch 使用的Watcher</span></span>
<span class="line"><span style="color:#FF79C6;">        if</span><span style="color:#F8F8F2;"> (</span><span style="color:#BD93F9;font-style:italic;">this</span><span style="color:#F8F8F2;">.user) {</span></span>
<span class="line"><span style="color:#FF79C6;">          const</span><span style="color:#F8F8F2;"> info </span><span style="color:#FF79C6;">=</span><span style="color:#F1FA8C;"> \`callback for watcher &quot;</span><span style="color:#FF79C6;">\${</span><span style="color:#BD93F9;font-style:italic;">this</span><span style="color:#F8F8F2;">.expression</span><span style="color:#FF79C6;">}</span><span style="color:#F1FA8C;">&quot;\`</span></span>
<span class="line"><span style="color:#50FA7B;">          invokeWithErrorHandling</span><span style="color:#F8F8F2;">(</span></span>
<span class="line"><span style="color:#BD93F9;font-style:italic;">            this</span><span style="color:#F8F8F2;">.cb,</span></span>
<span class="line"><span style="color:#BD93F9;font-style:italic;">            this</span><span style="color:#F8F8F2;">.vm,</span></span>
<span class="line"><span style="color:#F8F8F2;">            [value, oldValue],</span></span>
<span class="line"><span style="color:#BD93F9;font-style:italic;">            this</span><span style="color:#F8F8F2;">.vm,</span></span>
<span class="line"><span style="color:#F8F8F2;">            info</span></span>
<span class="line"><span style="color:#F8F8F2;">          )</span></span>
<span class="line"><span style="color:#F8F8F2;">        } </span><span style="color:#FF79C6;">else</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#BD93F9;font-style:italic;">          this</span><span style="color:#F8F8F2;">.cb.</span><span style="color:#50FA7B;">call</span><span style="color:#F8F8F2;">(</span><span style="color:#BD93F9;font-style:italic;">this</span><span style="color:#F8F8F2;">.vm, value, oldValue)</span></span>
<span class="line"><span style="color:#F8F8F2;">        }</span></span>
<span class="line"><span style="color:#F8F8F2;">      }</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><details class="hint-container details"><summary>invokeWithErrorHandling</summary><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">export</span><span style="color:#FF79C6;"> function</span><span style="color:#50FA7B;"> invokeWithErrorHandling</span><span style="color:#F8F8F2;">(</span></span>
<span class="line"><span style="color:#50FA7B;">  handler</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> Function</span><span style="color:#F8F8F2;">, </span><span style="color:#6272A4;">// watch 的函数</span></span>
<span class="line"><span style="color:#FFB86C;font-style:italic;">  context</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> any</span><span style="color:#F8F8F2;">, </span><span style="color:#6272A4;">// vm</span></span>
<span class="line"><span style="color:#FFB86C;font-style:italic;">  args</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> null</span><span style="color:#FF79C6;"> |</span><span style="color:#8BE9FD;font-style:italic;"> any</span><span style="color:#F8F8F2;">[], </span><span style="color:#6272A4;">// watch 函数 传入的参数</span></span>
<span class="line"><span style="color:#FFB86C;font-style:italic;">  vm</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> any</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#FFB86C;font-style:italic;">  info</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> string</span></span>
<span class="line"><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#FF79C6;">  let</span><span style="color:#F8F8F2;"> res</span></span>
<span class="line"><span style="color:#FF79C6;">  try</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#6272A4;">    // vm.handler(args) 调用 watch的函数</span></span>
<span class="line"><span style="color:#F8F8F2;">    res </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> args </span><span style="color:#FF79C6;">?</span><span style="color:#F8F8F2;"> handler.</span><span style="color:#50FA7B;">apply</span><span style="color:#F8F8F2;">(context, args) </span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> handler.</span><span style="color:#50FA7B;">call</span><span style="color:#F8F8F2;">(context)</span></span>
<span class="line"><span style="color:#FF79C6;">    if</span><span style="color:#F8F8F2;"> (res </span><span style="color:#FF79C6;">&amp;&amp;</span><span style="color:#FF79C6;"> !</span><span style="color:#F8F8F2;">res._isVue </span><span style="color:#FF79C6;">&amp;&amp;</span><span style="color:#50FA7B;"> isPromise</span><span style="color:#F8F8F2;">(res) </span><span style="color:#FF79C6;">&amp;&amp;</span><span style="color:#FF79C6;"> !</span><span style="color:#F8F8F2;">(res </span><span style="color:#FF79C6;">as</span><span style="color:#8BE9FD;font-style:italic;"> any</span><span style="color:#F8F8F2;">)._handled) {</span></span>
<span class="line"><span style="color:#F8F8F2;">      res.</span><span style="color:#50FA7B;">catch</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">e</span><span style="color:#FF79C6;"> =&gt;</span><span style="color:#50FA7B;"> handleError</span><span style="color:#F8F8F2;">(e, vm, info </span><span style="color:#FF79C6;">+</span><span style="color:#F1FA8C;"> \` (Promise/async)\`</span><span style="color:#F8F8F2;">))</span></span>
<span class="line"><span style="color:#6272A4;">      // issue #9511</span></span>
<span class="line"><span style="color:#6272A4;">      // avoid catch triggering multiple times when nested calls</span></span>
<span class="line"><span style="color:#F8F8F2;">      ;(res </span><span style="color:#FF79C6;">as</span><span style="color:#8BE9FD;font-style:italic;"> any</span><span style="color:#F8F8F2;">)._handled </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> true</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">  } </span><span style="color:#FF79C6;">catch</span><span style="color:#F8F8F2;"> (</span><span style="color:#FFB86C;font-style:italic;">e</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> any</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#50FA7B;">    handleError</span><span style="color:#F8F8F2;">(e, vm, info)</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#FF79C6;">  return</span><span style="color:#F8F8F2;"> res</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h2 id="步骤" tabindex="-1"><a class="header-anchor" href="#步骤"><span>步骤</span></a></h2><p><strong>依赖收集</strong></p><p>利用响应式数据 get 时的 dep.depend();进行依赖收集</p><p>new Watcher() =&gt; this.get() pushTarget(this)赋值为当前 watcher =&gt; this.getter() = parsePath(key) 实际是取 vm 上的值 =&gt; 触发 vm 上响应式数据收集 =&gt; dep.depend() 将 Dep.target = watcher 收集起来</p><p><strong>派发更新</strong></p><p>响应式数据发生变化 =&gt; this.set() =&gt; dep.notify() = watcher.update() = watcher.run()=&gt;invokeWithErrorHandling() =&gt;调用 watch 的 handler 函数</p>`,19)]))}const t=n(p,[["render",o],["__file","watch-code-analysis.html.vue"]]),i=JSON.parse(`{"path":"/vue2/watch-code-analysis.html","title":"Vue2.x watch原理分析","lang":"en-US","frontmatter":{"title":"Vue2.x watch原理分析","date":"2021-10-01T00:00:00.000Z","category":["Vue"],"type":["vue2"],"description":"watch 使用 init createWatcher $watch watcher 匹配 vm 上的对象 parsePath Watcher invokeWithErrorHandling 步骤 依赖收集 利用响应式数据 get 时的 dep.depend();进行依赖收集 new Watcher() => this.get() pushTarget...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/vue2/watch-code-analysis.html"}],["meta",{"property":"og:title","content":"Vue2.x watch原理分析"}],["meta",{"property":"og:description","content":"watch 使用 init createWatcher $watch watcher 匹配 vm 上的对象 parsePath Watcher invokeWithErrorHandling 步骤 依赖收集 利用响应式数据 get 时的 dep.depend();进行依赖收集 new Watcher() => this.get() pushTarget..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2022-12-30T06:28:03.000Z"}],["meta",{"property":"article:published_time","content":"2021-10-01T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2022-12-30T06:28:03.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Vue2.x watch原理分析\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2021-10-01T00:00:00.000Z\\",\\"dateModified\\":\\"2022-12-30T06:28:03.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"luxiag\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"init","slug":"init","link":"#init","children":[{"level":3,"title":"createWatcher","slug":"createwatcher","link":"#createwatcher","children":[]},{"level":3,"title":"$watch","slug":"watch","link":"#watch","children":[]}]},{"level":2,"title":"步骤","slug":"步骤","link":"#步骤","children":[]}],"git":{"createdTime":1665653759000,"updatedTime":1672381683000,"contributors":[{"name":"卢祥","email":"example@gmail.com","commits":2},{"name":"luxiag","email":"luxiag@qq.com","commits":1},{"name":"luxiang","email":"luxiag@qq.com","commits":1},{"name":"卢祥","email":"example@qq.com","commits":1}]},"readingTime":{"minutes":2.78,"words":833},"filePathRelative":"vue2/watch-code-analysis.md","localizedDate":"October 1, 2021","excerpt":"<details class=\\"hint-container details\\"><summary>watch 使用</summary>\\n<div class=\\"language-js line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"js\\" data-title=\\"js\\" style=\\"background-color:#282A36;color:#F8F8F2\\"><pre class=\\"shiki dracula vp-code\\"><code><span class=\\"line\\"><span style=\\"color:#FF79C6\\">var</span><span style=\\"color:#F8F8F2\\"> vm </span><span style=\\"color:#FF79C6\\">=</span><span style=\\"color:#FF79C6;font-weight:bold\\"> new</span><span style=\\"color:#50FA7B\\"> Vue</span><span style=\\"color:#F8F8F2\\">({</span></span>\\n<span class=\\"line\\"><span style=\\"color:#F8F8F2\\">  data</span><span style=\\"color:#FF79C6\\">:</span><span style=\\"color:#F8F8F2\\"> {</span></span>\\n<span class=\\"line\\"><span style=\\"color:#F8F8F2\\">    a</span><span style=\\"color:#FF79C6\\">:</span><span style=\\"color:#BD93F9\\"> 1</span><span style=\\"color:#F8F8F2\\">,</span></span>\\n<span class=\\"line\\"><span style=\\"color:#F8F8F2\\">    b</span><span style=\\"color:#FF79C6\\">:</span><span style=\\"color:#BD93F9\\"> 2</span><span style=\\"color:#F8F8F2\\">,</span></span>\\n<span class=\\"line\\"><span style=\\"color:#F8F8F2\\">    c</span><span style=\\"color:#FF79C6\\">:</span><span style=\\"color:#BD93F9\\"> 3</span><span style=\\"color:#F8F8F2\\">,</span></span>\\n<span class=\\"line\\"><span style=\\"color:#F8F8F2\\">    d</span><span style=\\"color:#FF79C6\\">:</span><span style=\\"color:#BD93F9\\"> 4</span><span style=\\"color:#F8F8F2\\">,</span></span>\\n<span class=\\"line\\"><span style=\\"color:#F8F8F2\\">    e</span><span style=\\"color:#FF79C6\\">:</span><span style=\\"color:#F8F8F2\\"> {</span></span>\\n<span class=\\"line\\"><span style=\\"color:#F8F8F2\\">      f</span><span style=\\"color:#FF79C6\\">:</span><span style=\\"color:#F8F8F2\\"> {</span></span>\\n<span class=\\"line\\"><span style=\\"color:#F8F8F2\\">        g</span><span style=\\"color:#FF79C6\\">:</span><span style=\\"color:#BD93F9\\"> 5</span><span style=\\"color:#F8F8F2\\">,</span></span>\\n<span class=\\"line\\"><span style=\\"color:#F8F8F2\\">      },</span></span>\\n<span class=\\"line\\"><span style=\\"color:#F8F8F2\\">    },</span></span>\\n<span class=\\"line\\"><span style=\\"color:#F8F8F2\\">  },</span></span>\\n<span class=\\"line\\"><span style=\\"color:#F8F8F2\\">  watch</span><span style=\\"color:#FF79C6\\">:</span><span style=\\"color:#F8F8F2\\"> {</span></span>\\n<span class=\\"line\\"><span style=\\"color:#50FA7B\\">    a</span><span style=\\"color:#FF79C6\\">:</span><span style=\\"color:#FF79C6\\"> function</span><span style=\\"color:#F8F8F2\\"> (</span><span style=\\"color:#FFB86C;font-style:italic\\">val</span><span style=\\"color:#F8F8F2\\">, </span><span style=\\"color:#FFB86C;font-style:italic\\">oldVal</span><span style=\\"color:#F8F8F2\\">) {</span></span>\\n<span class=\\"line\\"><span style=\\"color:#F8F8F2\\">      console.</span><span style=\\"color:#50FA7B\\">log</span><span style=\\"color:#F8F8F2\\">(</span><span style=\\"color:#E9F284\\">\\"</span><span style=\\"color:#F1FA8C\\">new: %s, old: %s</span><span style=\\"color:#E9F284\\">\\"</span><span style=\\"color:#F8F8F2\\">, val, oldVal);</span></span>\\n<span class=\\"line\\"><span style=\\"color:#F8F8F2\\">    },</span></span>\\n<span class=\\"line\\"><span style=\\"color:#6272A4\\">    // 方法名</span></span>\\n<span class=\\"line\\"><span style=\\"color:#F8F8F2\\">    b</span><span style=\\"color:#FF79C6\\">:</span><span style=\\"color:#E9F284\\"> \\"</span><span style=\\"color:#F1FA8C\\">someMethod</span><span style=\\"color:#E9F284\\">\\"</span><span style=\\"color:#F8F8F2\\">,</span></span>\\n<span class=\\"line\\"><span style=\\"color:#6272A4\\">    // 该回调会在任何被侦听的对象的 property 改变时被调用，不论其被嵌套多深</span></span>\\n<span class=\\"line\\"><span style=\\"color:#F8F8F2\\">    c</span><span style=\\"color:#FF79C6\\">:</span><span style=\\"color:#F8F8F2\\"> {</span></span>\\n<span class=\\"line\\"><span style=\\"color:#50FA7B\\">      handler</span><span style=\\"color:#FF79C6\\">:</span><span style=\\"color:#FF79C6\\"> function</span><span style=\\"color:#F8F8F2\\"> (</span><span style=\\"color:#FFB86C;font-style:italic\\">val</span><span style=\\"color:#F8F8F2\\">, </span><span style=\\"color:#FFB86C;font-style:italic\\">oldVal</span><span style=\\"color:#F8F8F2\\">) {</span></span>\\n<span class=\\"line\\"><span style=\\"color:#6272A4\\">        /* ... */</span></span>\\n<span class=\\"line\\"><span style=\\"color:#F8F8F2\\">      },</span></span>\\n<span class=\\"line\\"><span style=\\"color:#F8F8F2\\">      deep</span><span style=\\"color:#FF79C6\\">:</span><span style=\\"color:#BD93F9\\"> true</span><span style=\\"color:#F8F8F2\\">,</span></span>\\n<span class=\\"line\\"><span style=\\"color:#F8F8F2\\">    },</span></span>\\n<span class=\\"line\\"><span style=\\"color:#6272A4\\">    // 该回调将会在侦听开始之后被立即调用</span></span>\\n<span class=\\"line\\"><span style=\\"color:#F8F8F2\\">    d</span><span style=\\"color:#FF79C6\\">:</span><span style=\\"color:#F8F8F2\\"> {</span></span>\\n<span class=\\"line\\"><span style=\\"color:#F8F8F2\\">      handler</span><span style=\\"color:#FF79C6\\">:</span><span style=\\"color:#E9F284\\"> \\"</span><span style=\\"color:#F1FA8C\\">someMethod</span><span style=\\"color:#E9F284\\">\\"</span><span style=\\"color:#F8F8F2\\">,</span></span>\\n<span class=\\"line\\"><span style=\\"color:#F8F8F2\\">      immediate</span><span style=\\"color:#FF79C6\\">:</span><span style=\\"color:#BD93F9\\"> true</span><span style=\\"color:#F8F8F2\\">,</span></span>\\n<span class=\\"line\\"><span style=\\"color:#F8F8F2\\">    },</span></span>\\n<span class=\\"line\\"><span style=\\"color:#6272A4\\">    // 你可以传入回调数组，它们会被逐一调用</span></span>\\n<span class=\\"line\\"><span style=\\"color:#F8F8F2\\">    e</span><span style=\\"color:#FF79C6\\">:</span><span style=\\"color:#F8F8F2\\"> [</span></span>\\n<span class=\\"line\\"><span style=\\"color:#E9F284\\">      \\"</span><span style=\\"color:#F1FA8C\\">handle1</span><span style=\\"color:#E9F284\\">\\"</span><span style=\\"color:#F8F8F2\\">,</span></span>\\n<span class=\\"line\\"><span style=\\"color:#FF79C6\\">      function</span><span style=\\"color:#50FA7B\\"> handle2</span><span style=\\"color:#F8F8F2\\">(</span><span style=\\"color:#FFB86C;font-style:italic\\">val</span><span style=\\"color:#F8F8F2\\">, </span><span style=\\"color:#FFB86C;font-style:italic\\">oldVal</span><span style=\\"color:#F8F8F2\\">) {</span></span>\\n<span class=\\"line\\"><span style=\\"color:#6272A4\\">        /* ... */</span></span>\\n<span class=\\"line\\"><span style=\\"color:#F8F8F2\\">      },</span></span>\\n<span class=\\"line\\"><span style=\\"color:#F8F8F2\\">      {</span></span>\\n<span class=\\"line\\"><span style=\\"color:#50FA7B\\">        handler</span><span style=\\"color:#FF79C6\\">:</span><span style=\\"color:#FF79C6\\"> function</span><span style=\\"color:#50FA7B\\"> handle3</span><span style=\\"color:#F8F8F2\\">(</span><span style=\\"color:#FFB86C;font-style:italic\\">val</span><span style=\\"color:#F8F8F2\\">, </span><span style=\\"color:#FFB86C;font-style:italic\\">oldVal</span><span style=\\"color:#F8F8F2\\">) {</span></span>\\n<span class=\\"line\\"><span style=\\"color:#6272A4\\">          /* ... */</span></span>\\n<span class=\\"line\\"><span style=\\"color:#F8F8F2\\">        },</span></span>\\n<span class=\\"line\\"><span style=\\"color:#6272A4\\">        /* ... */</span></span>\\n<span class=\\"line\\"><span style=\\"color:#F8F8F2\\">      },</span></span>\\n<span class=\\"line\\"><span style=\\"color:#F8F8F2\\">    ],</span></span>\\n<span class=\\"line\\"><span style=\\"color:#6272A4\\">    // watch vm.e.f's value: {g: 5}</span></span>\\n<span class=\\"line\\"><span style=\\"color:#E9F284\\">    \\"</span><span style=\\"color:#F1FA8C\\">e.f</span><span style=\\"color:#E9F284\\">\\"</span><span style=\\"color:#FF79C6\\">:</span><span style=\\"color:#FF79C6\\"> function</span><span style=\\"color:#F8F8F2\\"> (</span><span style=\\"color:#FFB86C;font-style:italic\\">val</span><span style=\\"color:#F8F8F2\\">, </span><span style=\\"color:#FFB86C;font-style:italic\\">oldVal</span><span style=\\"color:#F8F8F2\\">) {</span></span>\\n<span class=\\"line\\"><span style=\\"color:#6272A4\\">      /* ... */</span></span>\\n<span class=\\"line\\"><span style=\\"color:#F8F8F2\\">    },</span></span>\\n<span class=\\"line\\"><span style=\\"color:#F8F8F2\\">  },</span></span>\\n<span class=\\"line\\"><span style=\\"color:#F8F8F2\\">});</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div></details>","autoDesc":true}`);export{t as comp,i as data};
