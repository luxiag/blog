import{_ as n,e as a,h as l,o as e}from"./app-DPJYBgB6.js";const p={};function o(t,s){return e(),a("div",null,s[0]||(s[0]=[l(`<p>是一种在每一步选择中都采取在当前状态下最好或最优（即最有利）的选择，从而希望导致结果是最好或最优的算法。</p><h1 id="教室调度问题" tabindex="-1"><a class="header-anchor" href="#教室调度问题"><span>教室调度问题</span></a></h1><table><thead><tr><th>课程</th><th>开始时间</th><th>结束时间</th></tr></thead><tbody><tr><td>美术</td><td>9AM</td><td>10AM</td></tr><tr><td>英语</td><td>9:30AM</td><td>10:30AM</td></tr><tr><td>数学</td><td>10AM</td><td>11AM</td></tr><tr><td>计算机</td><td>10:30AM</td><td>11:30AM</td></tr><tr><td>音乐</td><td>11AM</td><td>12PM</td></tr></tbody></table><p>(1) 选出结束最早的课，它就是要在这间教室上的第一堂课。</p><p>(2) 接下来，必须选择第一堂课结束后才开始的课。同样，你选择结束最早的课，这将是要 在这间教室上的第二堂课。</p><table><thead><tr><th>课程</th><th>开始时间</th><th>结束时间</th><th></th></tr></thead><tbody><tr><td>美术</td><td>9AM</td><td>10AM</td><td>✅</td></tr><tr><td>英语</td><td>9:30AM</td><td>10:30AM</td><td>❌</td></tr><tr><td>数学</td><td>10AM</td><td>11AM</td><td>✅</td></tr><tr><td>计算机</td><td>10:30AM</td><td>11:30AM</td><td>❌</td></tr><tr><td>音乐</td><td>11AM</td><td>12PM</td><td>✅</td></tr></tbody></table><h1 id="种花问题" tabindex="-1"><a class="header-anchor" href="#种花问题"><span><a href="https://leetcode.cn/problems/can-place-flowers/description/?envType=problem-list-v2&amp;envId=greedy" target="_blank" rel="noopener noreferrer">种花问题</a></span></a></h1><p>假设有一个很长的花坛，一部分地块种植了花，另一部分却没有。可是，花不能种植在相邻的地块上，它们会争夺水源，两者都会死去。</p><p>给你一个整数数组 flowerbed 表示花坛，由若干 0 和 1 组成，其中 0 表示没种植花，1 表示种植了花。另有一个数 n ，能否在不打破种植规则的情况下种入 n 朵花？能则返回 true ，不能则返回 false 。</p><div class="language-md line-numbers-mode" data-highlighter="shiki" data-ext="md" data-title="md" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#F8F8F2;">输入：flowerbed = [</span><span style="color:#FF79C6;">1,0,0,0,1</span><span style="color:#F8F8F2;">], n = 1</span></span>
<span class="line"><span style="color:#F8F8F2;">输出：true</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">输入：flowerbed = [</span><span style="color:#FF79C6;">1,0,0,0,1</span><span style="color:#F8F8F2;">], n = 2</span></span>
<span class="line"><span style="color:#F8F8F2;">输出：false</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-ts line-numbers-mode" data-highlighter="shiki" data-ext="ts" data-title="ts" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"></span>
<span class="line"><span style="color:#FF79C6;">function</span><span style="color:#50FA7B;"> canPlaceFlowers</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">flowerbed</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> number</span><span style="color:#F8F8F2;">[], </span><span style="color:#FFB86C;font-style:italic;">n</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> number</span><span style="color:#F8F8F2;">)</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> boolean</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#FF79C6;">    let</span><span style="color:#F8F8F2;"> length </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> flowerbed.length;</span></span>
<span class="line"><span style="color:#6272A4;">    /**</span></span>
<span class="line"><span style="color:#6272A4;">     * 贪心</span></span>
<span class="line"><span style="color:#6272A4;">     * 能种花的地方</span></span>
<span class="line"><span style="color:#6272A4;">     *  当前位置没有花</span></span>
<span class="line"><span style="color:#6272A4;">     *  前面要么没有花, 要么是边界</span></span>
<span class="line"><span style="color:#6272A4;">     *  后面要么没有花, 要么是边界</span></span>
<span class="line"><span style="color:#6272A4;">     */</span></span>
<span class="line"><span style="color:#FF79C6;">    for</span><span style="color:#F8F8F2;"> (</span><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> i </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> 0</span><span style="color:#F8F8F2;">; i </span><span style="color:#FF79C6;">&lt;</span><span style="color:#F8F8F2;"> length; i</span><span style="color:#FF79C6;">++</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#FF79C6;">        if</span><span style="color:#F8F8F2;"> (flowerbed[i] </span><span style="color:#FF79C6;">==</span><span style="color:#BD93F9;"> 0</span><span style="color:#FF79C6;"> &amp;&amp;</span><span style="color:#F8F8F2;"> (i </span><span style="color:#FF79C6;">==</span><span style="color:#BD93F9;"> 0</span><span style="color:#FF79C6;"> ||</span><span style="color:#F8F8F2;"> flowerbed[i</span><span style="color:#FF79C6;">-</span><span style="color:#BD93F9;">1</span><span style="color:#F8F8F2;">] </span><span style="color:#FF79C6;">==</span><span style="color:#BD93F9;"> 0</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">&amp;&amp;</span><span style="color:#F8F8F2;"> (i </span><span style="color:#FF79C6;">==</span><span style="color:#F8F8F2;"> length</span><span style="color:#FF79C6;">-</span><span style="color:#BD93F9;">1</span><span style="color:#FF79C6;"> ||</span><span style="color:#F8F8F2;"> flowerbed[i</span><span style="color:#FF79C6;">+</span><span style="color:#BD93F9;">1</span><span style="color:#F8F8F2;">] </span><span style="color:#FF79C6;">==</span><span style="color:#BD93F9;"> 0</span><span style="color:#F8F8F2;">)){</span></span>
<span class="line"><span style="color:#F8F8F2;">            n</span><span style="color:#FF79C6;">--</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">            flowerbed[i] </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> 1</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">        }</span></span>
<span class="line"><span style="color:#FF79C6;">        if</span><span style="color:#F8F8F2;"> (n </span><span style="color:#FF79C6;">&lt;=</span><span style="color:#BD93F9;"> 0</span><span style="color:#F8F8F2;">){</span></span>
<span class="line"><span style="color:#FF79C6;">            return</span><span style="color:#BD93F9;"> true</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">        }</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#FF79C6;">    return</span><span style="color:#BD93F9;"> false</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="跳跃游戏" tabindex="-1"><a class="header-anchor" href="#跳跃游戏"><span><a href="https://leetcode.cn/problems/jump-game/description/?envType=problem-list-v2&amp;envId=greedy" target="_blank" rel="noopener noreferrer">跳跃游戏</a></span></a></h1><p>给定一个非负整数数组 nums ，你最初位于数组的第一个位置。</p><p>数组中的每个元素代表你在该位置可以跳跃的最大长度。</p><p>判断你是否能够到达最后一个位置。</p><div class="language-md line-numbers-mode" data-highlighter="shiki" data-ext="md" data-title="md" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#F8F8F2;">输入：nums = [</span><span style="color:#FF79C6;">2,3,1,1,4</span><span style="color:#F8F8F2;">]</span></span>
<span class="line"><span style="color:#F8F8F2;">输出：true</span></span>
<span class="line"><span style="color:#F8F8F2;">解释：可以先跳 1 步，从位置 0 到达 位置 1, 然后再从位置 1 跳 3 步到达最后一个位置。</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">输入：nums = [</span><span style="color:#FF79C6;">3,2,1,0,4</span><span style="color:#F8F8F2;">]</span></span>
<span class="line"><span style="color:#F8F8F2;">输出：false</span></span>
<span class="line"><span style="color:#F8F8F2;">解释：无论怎样，你总会到达索引为 3 的位置。但该位置的最大跳跃长度是 0 ， 所以你永远不可能到达最后一个位置。</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-ts line-numbers-mode" data-highlighter="shiki" data-ext="ts" data-title="ts" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">function</span><span style="color:#50FA7B;"> canJump</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">nums</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> number</span><span style="color:#F8F8F2;">[])</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> boolean</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#FF79C6;">    const</span><span style="color:#F8F8F2;"> n </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> nums.length;</span></span>
<span class="line"><span style="color:#FF79C6;">    let</span><span style="color:#F8F8F2;"> rightmost </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> 0</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#FF79C6;">    for</span><span style="color:#F8F8F2;"> (</span><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> i </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> 0</span><span style="color:#F8F8F2;">; i </span><span style="color:#FF79C6;">&lt;</span><span style="color:#F8F8F2;"> n; </span><span style="color:#FF79C6;">++</span><span style="color:#F8F8F2;">i) {</span></span>
<span class="line"><span style="color:#FF79C6;">        if</span><span style="color:#F8F8F2;"> (i </span><span style="color:#FF79C6;">&lt;=</span><span style="color:#F8F8F2;"> rightmost) {</span></span>
<span class="line"><span style="color:#6272A4;">          // 每次都拿最大值</span></span>
<span class="line"><span style="color:#F8F8F2;">            rightmost </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> Math.</span><span style="color:#50FA7B;">max</span><span style="color:#F8F8F2;">(rightmost, i </span><span style="color:#FF79C6;">+</span><span style="color:#F8F8F2;"> nums[i]);</span></span>
<span class="line"><span style="color:#FF79C6;">            if</span><span style="color:#F8F8F2;"> (rightmost </span><span style="color:#FF79C6;">&gt;=</span><span style="color:#F8F8F2;"> n </span><span style="color:#FF79C6;">-</span><span style="color:#BD93F9;"> 1</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#FF79C6;">                return</span><span style="color:#BD93F9;"> true</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">            }</span></span>
<span class="line"><span style="color:#F8F8F2;">        }</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#FF79C6;">    return</span><span style="color:#BD93F9;"> false</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="跳跃游戏-ii" tabindex="-1"><a class="header-anchor" href="#跳跃游戏-ii"><span><a href="https://leetcode.cn/problems/jump-game-ii/description/" target="_blank" rel="noopener noreferrer">跳跃游戏 II</a></span></a></h1><div class="language-md line-numbers-mode" data-highlighter="shiki" data-ext="md" data-title="md" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#F8F8F2;">给你一个非负整数数组 nums ，你最初位于数组的第一个位置。</span></span>
<span class="line"><span style="color:#F8F8F2;">数组中的每个元素代表你在该位置可以跳跃的最大长度。</span></span>
<span class="line"><span style="color:#F8F8F2;">你的目标是使用最少的跳跃次数到达数组的最后一个位置。</span></span>
<span class="line"><span style="color:#F8F8F2;">假设你总是可以到达数组的最后一个位置。</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">输入: nums = [</span><span style="color:#FF79C6;">2,3,1,1,4</span><span style="color:#F8F8F2;">]</span></span>
<span class="line"><span style="color:#F8F8F2;">输出: 2</span></span>
<span class="line"><span style="color:#F8F8F2;">解释: 跳到最后一个位置的最小跳跃数是 2。</span></span>
<span class="line"><span style="color:#F8F8F2;">从下标为 0 跳到下标为 1 的位置，跳 1 步，然后跳 3 步到达数组的最后一个位置。</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#6272A4;">// https://leetcode.cn/problems/jump-game-ii/solutions/230241/tiao-yue-you-xi-ii-by-leetcode-solution/</span></span>
<span class="line"><span style="color:#FF79C6;">function</span><span style="color:#50FA7B;"> jump</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">nums</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#FF79C6;">  let</span><span style="color:#F8F8F2;"> length </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> nums.length;</span></span>
<span class="line"><span style="color:#FF79C6;">  let</span><span style="color:#F8F8F2;"> end </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> 0</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#FF79C6;">  let</span><span style="color:#F8F8F2;"> maxPosition </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> 0</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#FF79C6;">  let</span><span style="color:#F8F8F2;"> steps </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> 0</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#FF79C6;">  for</span><span style="color:#F8F8F2;"> (</span><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> i </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> 0</span><span style="color:#F8F8F2;">; i </span><span style="color:#FF79C6;">&lt;</span><span style="color:#F8F8F2;"> length </span><span style="color:#FF79C6;">-</span><span style="color:#BD93F9;"> 1</span><span style="color:#F8F8F2;">; i</span><span style="color:#FF79C6;">++</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#6272A4;">    //每次在上次能跳到的范围（end）内选择一个能跳的最远的位置</span></span>
<span class="line"><span style="color:#F8F8F2;">    maxPosition </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> Math.</span><span style="color:#50FA7B;">max</span><span style="color:#F8F8F2;">(maxPosition, i </span><span style="color:#FF79C6;">+</span><span style="color:#F8F8F2;"> nums[i]);</span></span>
<span class="line"><span style="color:#FF79C6;">    if</span><span style="color:#F8F8F2;"> (i </span><span style="color:#FF79C6;">===</span><span style="color:#F8F8F2;"> end) {</span></span>
<span class="line"><span style="color:#F8F8F2;">      end </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> maxPosition;</span></span>
<span class="line"><span style="color:#F8F8F2;">      steps</span><span style="color:#FF79C6;">++</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#FF79C6;">  return</span><span style="color:#F8F8F2;"> steps;</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="雇佣-k-名工人的最低成本" tabindex="-1"><a class="header-anchor" href="#雇佣-k-名工人的最低成本"><span><a href="https://leetcode.cn/problems/minimum-cost-to-hire-k-workers/description/?envType=problem-list-v2&amp;envId=greedy" target="_blank" rel="noopener noreferrer">雇佣 K 名工人的最低成本</a></span></a></h1><p>有 n 名工人。 给定两个数组 quality 和 wage ，其中，quality[i] 表示第 i 名工人的工作质量，其最低期望工资为 wage[i] 。</p><p>现在我们想雇佣 k 名工人组成一个 工资组。在雇佣 一组 k 名工人时，我们必须按照下述规则向他们支付工资：</p><p>对工资组中的每名工人，应当按其工作质量与同组其他工人的工作质量的比例来支付工资。 工资组中的每名工人至少应当得到他们的最低期望工资</p><div class="language-md line-numbers-mode" data-highlighter="shiki" data-ext="md" data-title="md" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">输入： quality = [</span><span style="color:#FF79C6;">10,20,5</span><span style="color:#F8F8F2;">], wage = [</span><span style="color:#FF79C6;">70,50,30</span><span style="color:#F8F8F2;">], k = 2</span></span>
<span class="line"><span style="color:#F8F8F2;">输出： 105.00000</span></span>
<span class="line"><span style="color:#F8F8F2;">解释： 我们向 0 号工人支付 70，向 2 号工人支付 35。</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">输入： quality = [</span><span style="color:#FF79C6;">3,1,10,10,1</span><span style="color:#F8F8F2;">], wage = [</span><span style="color:#FF79C6;">4,8,2,2,7</span><span style="color:#F8F8F2;">], k = 3</span></span>
<span class="line"><span style="color:#F8F8F2;">输出： 30.66667</span></span>
<span class="line"><span style="color:#F8F8F2;">解释： 我们向 0 号工人支付 4，向 2 号和 3 号分别支付 13.33333。</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-ts line-numbers-mode" data-highlighter="shiki" data-ext="ts" data-title="ts" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">function</span><span style="color:#50FA7B;"> mincostToHireWorkers</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">quality</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> number</span><span style="color:#F8F8F2;">[], </span><span style="color:#FFB86C;font-style:italic;">wage</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> number</span><span style="color:#F8F8F2;">[], </span><span style="color:#FFB86C;font-style:italic;">k</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> number</span><span style="color:#F8F8F2;">)</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> number</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#FF79C6;">    const</span><span style="color:#F8F8F2;"> n </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> quality.length;</span></span>
<span class="line"><span style="color:#FF79C6;">    const</span><span style="color:#F8F8F2;"> h </span><span style="color:#FF79C6;">=</span><span style="color:#FF79C6;font-weight:bold;"> new</span><span style="color:#50FA7B;"> Array</span><span style="color:#F8F8F2;">(n).</span><span style="color:#50FA7B;">fill</span><span style="color:#F8F8F2;">(</span><span style="color:#BD93F9;">0</span><span style="color:#F8F8F2;">).</span><span style="color:#50FA7B;">map</span><span style="color:#F8F8F2;">((</span><span style="color:#FFB86C;font-style:italic;">_</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">i</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> i);</span></span>
<span class="line"><span style="color:#F8F8F2;">    h.</span><span style="color:#50FA7B;">sort</span><span style="color:#F8F8F2;">((</span><span style="color:#FFB86C;font-style:italic;">a</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">b</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#FF79C6;">        return</span><span style="color:#F8F8F2;"> quality[b] </span><span style="color:#FF79C6;">*</span><span style="color:#F8F8F2;"> wage[a] </span><span style="color:#FF79C6;">-</span><span style="color:#F8F8F2;"> quality[a] </span><span style="color:#FF79C6;">*</span><span style="color:#F8F8F2;"> wage[b];</span></span>
<span class="line"><span style="color:#F8F8F2;">    });</span></span>
<span class="line"><span style="color:#FF79C6;">    let</span><span style="color:#F8F8F2;"> res </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> 1e9</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#FF79C6;">    let</span><span style="color:#F8F8F2;"> totalq </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> 0.0</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#FF79C6;">    const</span><span style="color:#F8F8F2;"> pq </span><span style="color:#FF79C6;">=</span><span style="color:#FF79C6;font-weight:bold;"> new</span><span style="color:#50FA7B;"> MaxPriorityQueue</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#FF79C6;">    for</span><span style="color:#F8F8F2;"> (</span><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> i </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> 0</span><span style="color:#F8F8F2;">; i </span><span style="color:#FF79C6;">&lt;</span><span style="color:#F8F8F2;"> k </span><span style="color:#FF79C6;">-</span><span style="color:#BD93F9;"> 1</span><span style="color:#F8F8F2;">; i</span><span style="color:#FF79C6;">++</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">        totalq </span><span style="color:#FF79C6;">+=</span><span style="color:#F8F8F2;"> quality[h[i]];</span></span>
<span class="line"><span style="color:#F8F8F2;">        pq.</span><span style="color:#50FA7B;">enqueue</span><span style="color:#F8F8F2;">(quality[h[i]]);</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#FF79C6;">    for</span><span style="color:#F8F8F2;"> (</span><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> i </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> k </span><span style="color:#FF79C6;">-</span><span style="color:#BD93F9;"> 1</span><span style="color:#F8F8F2;">; i </span><span style="color:#FF79C6;">&lt;</span><span style="color:#F8F8F2;"> n; i</span><span style="color:#FF79C6;">++</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#FF79C6;">        let</span><span style="color:#F8F8F2;"> idx </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> h[i];</span></span>
<span class="line"><span style="color:#F8F8F2;">        totalq </span><span style="color:#FF79C6;">+=</span><span style="color:#F8F8F2;"> quality[idx];</span></span>
<span class="line"><span style="color:#F8F8F2;">        pq.</span><span style="color:#50FA7B;">enqueue</span><span style="color:#F8F8F2;">(quality[idx]);</span></span>
<span class="line"><span style="color:#FF79C6;">        const</span><span style="color:#F8F8F2;"> totalc </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> (wage[idx] </span><span style="color:#FF79C6;">/</span><span style="color:#F8F8F2;"> quality[idx]) </span><span style="color:#FF79C6;">*</span><span style="color:#F8F8F2;"> totalq;</span></span>
<span class="line"><span style="color:#F8F8F2;">        res </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> Math.</span><span style="color:#50FA7B;">min</span><span style="color:#F8F8F2;">(res, totalc);</span></span>
<span class="line"><span style="color:#F8F8F2;">        totalq </span><span style="color:#FF79C6;">-=</span><span style="color:#F8F8F2;"> pq.</span><span style="color:#50FA7B;">dequeue</span><span style="color:#F8F8F2;">().element;</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#FF79C6;">    return</span><span style="color:#F8F8F2;"> res;</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,26)]))}const r=n(p,[["render",o],["__file","greedy-alogrithm.html.vue"]]),c=JSON.parse('{"path":"/algorithm/greedy-alogrithm.html","title":"贪婪算法","lang":"en-US","frontmatter":{"title":"贪婪算法","date":"2022-10-02T00:00:00.000Z","category":["算法"],"tag":["算法图解"],"description":"是一种在每一步选择中都采取在当前状态下最好或最优（即最有利）的选择，从而希望导致结果是最好或最优的算法。 教室调度问题 (1) 选出结束最早的课，它就是要在这间教室上的第一堂课。 (2) 接下来，必须选择第一堂课结束后才开始的课。同样，你选择结束最早的课，这将是要 在这间教室上的第二堂课。 种花问题 假设有一个很长的花坛，一部分地块种植了花，另一部分却...","head":[["meta",{"property":"og:url","content":"https://luxiag.github.io/luxiag/blog/algorithm/greedy-alogrithm.html"}],["meta",{"property":"og:title","content":"贪婪算法"}],["meta",{"property":"og:description","content":"是一种在每一步选择中都采取在当前状态下最好或最优（即最有利）的选择，从而希望导致结果是最好或最优的算法。 教室调度问题 (1) 选出结束最早的课，它就是要在这间教室上的第一堂课。 (2) 接下来，必须选择第一堂课结束后才开始的课。同样，你选择结束最早的课，这将是要 在这间教室上的第二堂课。 种花问题 假设有一个很长的花坛，一部分地块种植了花，另一部分却..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2025-02-09T14:06:21.000Z"}],["meta",{"property":"article:tag","content":"算法图解"}],["meta",{"property":"article:published_time","content":"2022-10-02T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-02-09T14:06:21.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"贪婪算法\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-10-02T00:00:00.000Z\\",\\"dateModified\\":\\"2025-02-09T14:06:21.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"luxiag\\",\\"url\\":\\"https://luxiag.github.io/luxiag\\"}]}"]]},"git":{"createdTime":1665068249000,"updatedTime":1739109981000,"contributors":[{"name":"luxiang","username":"luxiang","email":"luxiag@qq.com","commits":1,"url":"https://github.com/luxiang"},{"name":"卢祥","username":"卢祥","email":"example@qq.com","commits":2,"url":"https://github.com/卢祥"},{"name":"luxiag","username":"luxiag","email":"luxiag@qq.com","commits":3,"url":"https://github.com/luxiag"}]},"readingTime":{"minutes":4.25,"words":1275},"filePathRelative":"algorithm/greedy-alogrithm.md","localizedDate":"October 2, 2022","excerpt":"<p>是一种在每一步选择中都采取在当前状态下最好或最优（即最有利）的选择，从而希望导致结果是最好或最优的算法。</p>\\n<h1>教室调度问题</h1>\\n<table>\\n<thead>\\n<tr>\\n<th>课程</th>\\n<th>开始时间</th>\\n<th>结束时间</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>美术</td>\\n<td>9AM</td>\\n<td>10AM</td>\\n</tr>\\n<tr>\\n<td>英语</td>\\n<td>9:30AM</td>\\n<td>10:30AM</td>\\n</tr>\\n<tr>\\n<td>数学</td>\\n<td>10AM</td>\\n<td>11AM</td>\\n</tr>\\n<tr>\\n<td>计算机</td>\\n<td>10:30AM</td>\\n<td>11:30AM</td>\\n</tr>\\n<tr>\\n<td>音乐</td>\\n<td>11AM</td>\\n<td>12PM</td>\\n</tr>\\n</tbody>\\n</table>","autoDesc":true}');export{r as comp,c as data};
