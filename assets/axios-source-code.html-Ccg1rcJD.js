import{_ as n,c as a,a as l,o as e}from"./app-DwrwhhBt.js";const p={};function o(F,s){return e(),a("div",null,s[0]||(s[0]=[l(`<h1 id="axios-封装使用" tabindex="-1"><a class="header-anchor" href="#axios-封装使用"><span>Axios 封装使用</span></a></h1><div class="language-ts line-numbers-mode" data-highlighter="shiki" data-ext="ts" data-title="ts" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">import</span><span style="color:#F8F8F2;"> axios, </span></span>
<span class="line"><span style="color:#F8F8F2;">    { AxiosInstance,</span></span>
<span class="line"><span style="color:#F8F8F2;">      InternalAxiosRequestConfig, </span></span>
<span class="line"><span style="color:#F8F8F2;">      AxiosRequestConfig, </span></span>
<span class="line"><span style="color:#F8F8F2;">      AxiosError, </span></span>
<span class="line"><span style="color:#F8F8F2;">      AxiosResponse,</span></span>
<span class="line"><span style="color:#F8F8F2;">    } </span><span style="color:#FF79C6;">from</span><span style="color:#E9F284;"> &#39;</span><span style="color:#F1FA8C;">axios</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">interface</span><span style="color:#8BE9FD;font-style:italic;"> ResponseModel</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#FFB86C;font-style:italic;">T</span><span style="color:#FF79C6;"> =</span><span style="color:#8BE9FD;font-style:italic;"> any</span><span style="color:#F8F8F2;">&gt; {</span></span>
<span class="line"><span style="color:#F8F8F2;">    success</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> boolean</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">    message</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> string</span><span style="color:#FF79C6;"> |</span><span style="color:#8BE9FD;font-style:italic;"> null</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">    code</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> number</span><span style="color:#FF79C6;"> |</span><span style="color:#8BE9FD;font-style:italic;"> string</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">    data</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> T</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#FF79C6;">class</span><span style="color:#8BE9FD;"> HttpRequest</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">    service</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> AxiosInstance</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">    constructor</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#BD93F9;font-style:italic;">        this</span><span style="color:#F8F8F2;">.service </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> axios.</span><span style="color:#50FA7B;">create</span><span style="color:#F8F8F2;">({</span></span>
<span class="line"><span style="color:#F8F8F2;">            baseURL</span><span style="color:#FF79C6;">:</span><span style="color:#FF79C6;"> import</span><span style="color:#F8F8F2;">.meta.env.</span><span style="color:#BD93F9;">VITE_APP_BASE_URL</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">            timeout</span><span style="color:#FF79C6;">:</span><span style="color:#BD93F9;"> 5</span><span style="color:#FF79C6;"> *</span><span style="color:#BD93F9;"> 1000</span></span>
<span class="line"><span style="color:#F8F8F2;">        });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BD93F9;font-style:italic;">        this</span><span style="color:#F8F8F2;">.service.interceptors.request.</span><span style="color:#50FA7B;">use</span><span style="color:#F8F8F2;">(</span></span>
<span class="line"><span style="color:#F8F8F2;">            (</span><span style="color:#FFB86C;font-style:italic;">config</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> InternalAxiosRequestConfig</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#6272A4;">                /**</span></span>
<span class="line"><span style="color:#6272A4;">                 * set your config</span></span>
<span class="line"><span style="color:#6272A4;">                 */</span></span>
<span class="line"><span style="color:#FF79C6;">                if</span><span style="color:#F8F8F2;"> (</span><span style="color:#FF79C6;">import</span><span style="color:#F8F8F2;">.meta.env.</span><span style="color:#BD93F9;">VITE_APP_TOKEN_KEY</span><span style="color:#FF79C6;"> &amp;&amp;</span><span style="color:#50FA7B;"> getToken</span><span style="color:#F8F8F2;">()) {</span></span>
<span class="line"><span style="color:#F8F8F2;">                    config.headers[</span><span style="color:#FF79C6;">import</span><span style="color:#F8F8F2;">.meta.env.</span><span style="color:#BD93F9;">VITE_APP_TOKEN_KEY</span><span style="color:#F8F8F2;">] </span><span style="color:#FF79C6;">=</span><span style="color:#50FA7B;"> getToken</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"><span style="color:#F8F8F2;">                }</span></span>
<span class="line"><span style="color:#FF79C6;">                return</span><span style="color:#F8F8F2;"> config</span></span>
<span class="line"><span style="color:#F8F8F2;">            },</span></span>
<span class="line"><span style="color:#F8F8F2;">            (</span><span style="color:#FFB86C;font-style:italic;">error</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> AxiosError</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">                console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">requestError: </span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, error)</span></span>
<span class="line"><span style="color:#FF79C6;">                return</span><span style="color:#8BE9FD;font-style:italic;"> Promise</span><span style="color:#F8F8F2;">.</span><span style="color:#50FA7B;">reject</span><span style="color:#F8F8F2;">(error);</span></span>
<span class="line"><span style="color:#F8F8F2;">            },</span></span>
<span class="line"><span style="color:#F8F8F2;">            {</span></span>
<span class="line"><span style="color:#F8F8F2;">                synchronous</span><span style="color:#FF79C6;">:</span><span style="color:#BD93F9;"> false</span></span>
<span class="line"><span style="color:#F8F8F2;">                runWhen: ((</span><span style="color:#FFB86C;font-style:italic;">config</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> InternalAxiosRequestConfig</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#6272A4;">                    // do something</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">                    // if return true, axios will execution interceptor method</span></span>
<span class="line"><span style="color:#FF79C6;">                    return</span><span style="color:#BD93F9;"> true</span></span>
<span class="line"><span style="color:#F8F8F2;">                })</span></span>
<span class="line"><span style="color:#F8F8F2;">            }</span></span>
<span class="line"><span style="color:#F8F8F2;">        );</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BD93F9;font-style:italic;">        this</span><span style="color:#F8F8F2;">.service.interceptors.response.</span><span style="color:#50FA7B;">use</span><span style="color:#F8F8F2;">(</span></span>
<span class="line"><span style="color:#F8F8F2;">            (</span><span style="color:#FFB86C;font-style:italic;">response</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> AxiosResponse</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#FFB86C;font-style:italic;">ResponseModel</span><span style="color:#F8F8F2;">&gt;)</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> AxiosResponse</span><span style="color:#F8F8F2;">[</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">data</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">] </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#FF79C6;">                const</span><span style="color:#F8F8F2;"> { data } </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> response</span></span>
<span class="line"><span style="color:#FF79C6;">                const</span><span style="color:#F8F8F2;"> { code } </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> data</span></span>
<span class="line"><span style="color:#FF79C6;">                if</span><span style="color:#F8F8F2;"> (code) {</span></span>
<span class="line"><span style="color:#FF79C6;">                    if</span><span style="color:#F8F8F2;"> (code </span><span style="color:#FF79C6;">!=</span><span style="color:#F8F8F2;"> HttpCodeConfig.success) {</span></span>
<span class="line"><span style="color:#FF79C6;">                        switch</span><span style="color:#F8F8F2;"> (code) {</span></span>
<span class="line"><span style="color:#FF79C6;">                            case</span><span style="color:#F8F8F2;"> HttpCodeConfig.notFound:</span></span>
<span class="line"><span style="color:#6272A4;">                                // the method to handle this code</span></span>
<span class="line"><span style="color:#FF79C6;">                                break</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#FF79C6;">                            case</span><span style="color:#F8F8F2;"> HttpCodeConfig.noPermission:</span></span>
<span class="line"><span style="color:#6272A4;">                                // the method to handle this code</span></span>
<span class="line"><span style="color:#FF79C6;">                                break</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#FF79C6;">                            default</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#FF79C6;">                                break</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">                        }</span></span>
<span class="line"><span style="color:#FF79C6;">                        return</span><span style="color:#8BE9FD;font-style:italic;"> Promise</span><span style="color:#F8F8F2;">.</span><span style="color:#50FA7B;">reject</span><span style="color:#F8F8F2;">(data.message)</span></span>
<span class="line"><span style="color:#F8F8F2;">                    } </span><span style="color:#FF79C6;">else</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#FF79C6;">                        return</span><span style="color:#F8F8F2;"> data</span></span>
<span class="line"><span style="color:#F8F8F2;">                    }</span></span>
<span class="line"><span style="color:#F8F8F2;">                } </span><span style="color:#FF79C6;">else</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#FF79C6;">                    return</span><span style="color:#8BE9FD;font-style:italic;"> Promise</span><span style="color:#F8F8F2;">.</span><span style="color:#50FA7B;">reject</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">Error! code missing!</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">                }</span></span>
<span class="line"><span style="color:#F8F8F2;">            },</span></span>
<span class="line"><span style="color:#F8F8F2;">            (</span><span style="color:#FFB86C;font-style:italic;">error</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> any</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#FF79C6;">                return</span><span style="color:#8BE9FD;font-style:italic;"> Promise</span><span style="color:#F8F8F2;">.</span><span style="color:#50FA7B;">reject</span><span style="color:#F8F8F2;">(error);</span></span>
<span class="line"><span style="color:#F8F8F2;">            }</span></span>
<span class="line"><span style="color:#F8F8F2;">        );</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#50FA7B;">    request</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#FFB86C;font-style:italic;">T</span><span style="color:#FF79C6;"> =</span><span style="color:#8BE9FD;font-style:italic;"> any</span><span style="color:#F8F8F2;">&gt;(</span><span style="color:#FFB86C;font-style:italic;">config</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> AxiosRequestConfig</span><span style="color:#F8F8F2;">)</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> Promise</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#FFB86C;font-style:italic;">ResponseModel</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#FFB86C;font-style:italic;">T</span><span style="color:#F8F8F2;">&gt;&gt; {</span></span>
<span class="line"><span style="color:#6272A4;">        /**</span></span>
<span class="line"><span style="color:#6272A4;">         * TODO: execute other methods according to config</span></span>
<span class="line"><span style="color:#6272A4;">         */</span></span>
<span class="line"><span style="color:#FF79C6;">        return</span><span style="color:#FF79C6;font-weight:bold;"> new</span><span style="color:#8BE9FD;font-style:italic;"> Promise</span><span style="color:#F8F8F2;">((</span><span style="color:#FFB86C;font-style:italic;">resolve</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">reject</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#FF79C6;">            try</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#BD93F9;font-style:italic;">                this</span><span style="color:#F8F8F2;">.service.</span><span style="color:#50FA7B;">request</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#FFB86C;font-style:italic;">ResponseModel</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#FFB86C;font-style:italic;">T</span><span style="color:#F8F8F2;">&gt;&gt;(config)</span></span>
<span class="line"><span style="color:#F8F8F2;">                    .</span><span style="color:#50FA7B;">then</span><span style="color:#F8F8F2;">((</span><span style="color:#FFB86C;font-style:italic;">res</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> AxiosResponse</span><span style="color:#F8F8F2;">[</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">data</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">]) </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#50FA7B;">                        resolve</span><span style="color:#F8F8F2;">(res </span><span style="color:#FF79C6;">as</span><span style="color:#8BE9FD;font-style:italic;"> ResponseModel</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#FFB86C;font-style:italic;">T</span><span style="color:#F8F8F2;">&gt;);</span></span>
<span class="line"><span style="color:#F8F8F2;">                    })</span></span>
<span class="line"><span style="color:#F8F8F2;">                    .</span><span style="color:#50FA7B;">catch</span><span style="color:#F8F8F2;">((</span><span style="color:#FFB86C;font-style:italic;">err</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#50FA7B;">                        reject</span><span style="color:#F8F8F2;">(err)</span></span>
<span class="line"><span style="color:#F8F8F2;">                    })</span></span>
<span class="line"><span style="color:#F8F8F2;">            } </span><span style="color:#FF79C6;">catch</span><span style="color:#F8F8F2;"> (err) {</span></span>
<span class="line"><span style="color:#FF79C6;">                return</span><span style="color:#8BE9FD;font-style:italic;"> Promise</span><span style="color:#F8F8F2;">.</span><span style="color:#50FA7B;">reject</span><span style="color:#F8F8F2;">(err)</span></span>
<span class="line"><span style="color:#F8F8F2;">            }</span></span>
<span class="line"><span style="color:#F8F8F2;">        })</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#50FA7B;">    get</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#FFB86C;font-style:italic;">T</span><span style="color:#FF79C6;"> =</span><span style="color:#8BE9FD;font-style:italic;"> any</span><span style="color:#F8F8F2;">&gt;(</span><span style="color:#FFB86C;font-style:italic;">config</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> AxiosRequestConfig</span><span style="color:#F8F8F2;">)</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> Promise</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#FFB86C;font-style:italic;">ResponseModel</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#FFB86C;font-style:italic;">T</span><span style="color:#F8F8F2;">&gt;&gt; {</span></span>
<span class="line"><span style="color:#FF79C6;">        return</span><span style="color:#BD93F9;font-style:italic;"> this</span><span style="color:#F8F8F2;">.</span><span style="color:#50FA7B;">request</span><span style="color:#F8F8F2;">({ method</span><span style="color:#FF79C6;">:</span><span style="color:#E9F284;"> &#39;</span><span style="color:#F1FA8C;">GET</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#FF79C6;">...</span><span style="color:#F8F8F2;">config })</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#50FA7B;">    post</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#FFB86C;font-style:italic;">T</span><span style="color:#FF79C6;"> =</span><span style="color:#8BE9FD;font-style:italic;"> any</span><span style="color:#F8F8F2;">&gt;(</span><span style="color:#FFB86C;font-style:italic;">config</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> AxiosRequestConfig</span><span style="color:#F8F8F2;">)</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> Promise</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#FFB86C;font-style:italic;">ResponseModel</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#FFB86C;font-style:italic;">T</span><span style="color:#F8F8F2;">&gt;&gt; {</span></span>
<span class="line"><span style="color:#FF79C6;">        return</span><span style="color:#BD93F9;font-style:italic;"> this</span><span style="color:#F8F8F2;">.</span><span style="color:#50FA7B;">request</span><span style="color:#F8F8F2;">({ method</span><span style="color:#FF79C6;">:</span><span style="color:#E9F284;"> &#39;</span><span style="color:#F1FA8C;">POST</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#FF79C6;">...</span><span style="color:#F8F8F2;">config })</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#50FA7B;">    put</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#FFB86C;font-style:italic;">T</span><span style="color:#FF79C6;"> =</span><span style="color:#8BE9FD;font-style:italic;"> any</span><span style="color:#F8F8F2;">&gt;(</span><span style="color:#FFB86C;font-style:italic;">config</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> AxiosRequestConfig</span><span style="color:#F8F8F2;">)</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> Promise</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#FFB86C;font-style:italic;">ResponseModel</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#FFB86C;font-style:italic;">T</span><span style="color:#F8F8F2;">&gt;&gt; {</span></span>
<span class="line"><span style="color:#FF79C6;">        return</span><span style="color:#BD93F9;font-style:italic;"> this</span><span style="color:#F8F8F2;">.</span><span style="color:#50FA7B;">request</span><span style="color:#F8F8F2;">({ method</span><span style="color:#FF79C6;">:</span><span style="color:#E9F284;"> &#39;</span><span style="color:#F1FA8C;">PUT</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#FF79C6;">...</span><span style="color:#F8F8F2;">config })</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#50FA7B;">    delete</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#FFB86C;font-style:italic;">T</span><span style="color:#FF79C6;"> =</span><span style="color:#8BE9FD;font-style:italic;"> any</span><span style="color:#F8F8F2;">&gt;(</span><span style="color:#FFB86C;font-style:italic;">config</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> AxiosRequestConfig</span><span style="color:#F8F8F2;">)</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> Promise</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#FFB86C;font-style:italic;">ResponseModel</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#FFB86C;font-style:italic;">T</span><span style="color:#F8F8F2;">&gt;&gt; {</span></span>
<span class="line"><span style="color:#FF79C6;">        return</span><span style="color:#BD93F9;font-style:italic;"> this</span><span style="color:#F8F8F2;">.</span><span style="color:#50FA7B;">request</span><span style="color:#F8F8F2;">({ method</span><span style="color:#FF79C6;">:</span><span style="color:#E9F284;"> &#39;</span><span style="color:#F1FA8C;">DELETE</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#FF79C6;">...</span><span style="color:#F8F8F2;">config })</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#50FA7B;">    upload</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#FFB86C;font-style:italic;">T</span><span style="color:#FF79C6;"> =</span><span style="color:#8BE9FD;font-style:italic;"> string</span><span style="color:#F8F8F2;">&gt;(</span><span style="color:#FFB86C;font-style:italic;">fileItem</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> UploadFileItemModel</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">config</span><span style="color:#FF79C6;">?:</span><span style="color:#8BE9FD;font-style:italic;"> UploadRequestConfig</span><span style="color:#F8F8F2;">)</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> Promise</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#FFB86C;font-style:italic;">ResponseModel</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#FFB86C;font-style:italic;">T</span><span style="color:#F8F8F2;">&gt;&gt; </span><span style="color:#FF79C6;">|</span><span style="color:#8BE9FD;font-style:italic;"> null</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#FF79C6;">        if</span><span style="color:#F8F8F2;"> (</span><span style="color:#FF79C6;">!import</span><span style="color:#F8F8F2;">.meta.env.</span><span style="color:#BD93F9;">VITE_UPLOAD_URL</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">return</span><span style="color:#BD93F9;"> null</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">        let</span><span style="color:#F8F8F2;"> fd </span><span style="color:#FF79C6;">=</span><span style="color:#FF79C6;font-weight:bold;"> new</span><span style="color:#50FA7B;"> FormData</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"><span style="color:#F8F8F2;">        fd.</span><span style="color:#50FA7B;">append</span><span style="color:#F8F8F2;">(fileItem.name, fileItem.value)</span></span>
<span class="line"><span style="color:#FF79C6;">        let</span><span style="color:#F8F8F2;"> configCopy</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> UploadRequestConfig</span></span>
<span class="line"><span style="color:#FF79C6;">        if</span><span style="color:#F8F8F2;"> (</span><span style="color:#FF79C6;">!</span><span style="color:#F8F8F2;">config) {</span></span>
<span class="line"><span style="color:#F8F8F2;">            configCopy </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">                headers</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#E9F284;">                    &#39;</span><span style="color:#F1FA8C;">Content-Type</span><span style="color:#E9F284;">&#39;</span><span style="color:#FF79C6;">:</span><span style="color:#E9F284;"> &#39;</span><span style="color:#F1FA8C;">multipart/form-data</span><span style="color:#E9F284;">&#39;</span></span>
<span class="line"><span style="color:#F8F8F2;">                }</span></span>
<span class="line"><span style="color:#F8F8F2;">            }</span></span>
<span class="line"><span style="color:#F8F8F2;">        } </span><span style="color:#FF79C6;">else</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">            config.headers</span><span style="color:#FF79C6;">!</span><span style="color:#F8F8F2;">[</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">Content-Type</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">] </span><span style="color:#FF79C6;">=</span><span style="color:#E9F284;"> &#39;</span><span style="color:#F1FA8C;">multipart/form-data</span><span style="color:#E9F284;">&#39;</span></span>
<span class="line"><span style="color:#F8F8F2;">            configCopy </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> config</span></span>
<span class="line"><span style="color:#F8F8F2;">        }</span></span>
<span class="line"><span style="color:#FF79C6;">        return</span><span style="color:#BD93F9;font-style:italic;"> this</span><span style="color:#F8F8F2;">.</span><span style="color:#50FA7B;">request</span><span style="color:#F8F8F2;">({ url</span><span style="color:#FF79C6;">:</span><span style="color:#FF79C6;"> import</span><span style="color:#F8F8F2;">.meta.env.</span><span style="color:#BD93F9;">VITE_UPLOAD_URL</span><span style="color:#F8F8F2;">, data</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> fd, </span><span style="color:#FF79C6;">...</span><span style="color:#F8F8F2;">configCopy })</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> httpRequest </span><span style="color:#FF79C6;">=</span><span style="color:#FF79C6;font-weight:bold;"> new</span><span style="color:#50FA7B;"> HttpRequest</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"><span style="color:#FF79C6;">export</span><span style="color:#FF79C6;"> default</span><span style="color:#F8F8F2;"> httpRequest;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="axios实例" tabindex="-1"><a class="header-anchor" href="#axios实例"><span>Axios实例</span></a></h1><p><code>lib/axios.js</code></p><div class="language-ts line-numbers-mode" data-highlighter="shiki" data-ext="ts" data-title="ts" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">import</span><span style="color:#F8F8F2;"> Axios </span><span style="color:#FF79C6;">from</span><span style="color:#E9F284;"> &#39;</span><span style="color:#F1FA8C;">./core/Axios.js</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#FF79C6;">import</span><span style="color:#F8F8F2;"> defaults </span><span style="color:#FF79C6;">from</span><span style="color:#E9F284;"> &#39;</span><span style="color:#F1FA8C;">./defaults/index.js</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#FF79C6;">function</span><span style="color:#50FA7B;"> createInstance</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">defaultConfig</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#FF79C6;">  const</span><span style="color:#F8F8F2;"> context </span><span style="color:#FF79C6;">=</span><span style="color:#FF79C6;font-weight:bold;"> new</span><span style="color:#50FA7B;"> Axios</span><span style="color:#F8F8F2;">(defaultConfig);</span></span>
<span class="line"><span style="color:#FF79C6;">  const</span><span style="color:#F8F8F2;"> instance </span><span style="color:#FF79C6;">=</span><span style="color:#50FA7B;"> bind</span><span style="color:#F8F8F2;">(</span><span style="color:#8BE9FD;font-style:italic;">Axios</span><span style="color:#F8F8F2;">.prototype.request, context);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">  // Copy axios.prototype to instance</span></span>
<span class="line"><span style="color:#F8F8F2;">  utils.</span><span style="color:#50FA7B;">extend</span><span style="color:#F8F8F2;">(instance, </span><span style="color:#8BE9FD;font-style:italic;">Axios</span><span style="color:#F8F8F2;">.prototype, context, {allOwnKeys</span><span style="color:#FF79C6;">:</span><span style="color:#BD93F9;"> true</span><span style="color:#F8F8F2;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">  // Copy context to instance</span></span>
<span class="line"><span style="color:#F8F8F2;">  utils.</span><span style="color:#50FA7B;">extend</span><span style="color:#F8F8F2;">(instance, context, </span><span style="color:#BD93F9;">null</span><span style="color:#F8F8F2;">, {allOwnKeys</span><span style="color:#FF79C6;">:</span><span style="color:#BD93F9;"> true</span><span style="color:#F8F8F2;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">  // Factory for creating new instances</span></span>
<span class="line"><span style="color:#F8F8F2;">  instance.</span><span style="color:#50FA7B;">create</span><span style="color:#FF79C6;"> =</span><span style="color:#FF79C6;"> function</span><span style="color:#50FA7B;"> create</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">instanceConfig</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#FF79C6;">    return</span><span style="color:#50FA7B;"> createInstance</span><span style="color:#F8F8F2;">(</span><span style="color:#50FA7B;">mergeConfig</span><span style="color:#F8F8F2;">(defaultConfig, instanceConfig));</span></span>
<span class="line"><span style="color:#F8F8F2;">  };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">  return</span><span style="color:#F8F8F2;"> instance;</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">// Create the default instance to be exported</span></span>
<span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> axios </span><span style="color:#FF79C6;">=</span><span style="color:#50FA7B;"> createInstance</span><span style="color:#F8F8F2;">(defaults);</span></span>
<span class="line"><span style="color:#F8F8F2;">axios.Axios </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> Axios;</span></span>
<span class="line"><span style="color:#6272A4;">// ...</span></span>
<span class="line"><span style="color:#FF79C6;">export</span><span style="color:#FF79C6;"> default</span><span style="color:#F8F8F2;"> axios</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>bind(Axios.prototype.request, context);</code></p><div class="language-ts line-numbers-mode" data-highlighter="shiki" data-ext="ts" data-title="ts" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">const</span><span style="color:#50FA7B;"> instance</span><span style="color:#FF79C6;"> =</span><span style="color:#FF79C6;"> function</span><span style="color:#50FA7B;"> wrap</span><span style="color:#F8F8F2;">(){</span></span>
<span class="line"><span style="color:#FF79C6;">    return</span><span style="color:#8BE9FD;font-style:italic;"> Axios</span><span style="color:#F8F8F2;">.prototype.request.</span><span style="color:#50FA7B;">apply</span><span style="color:#F8F8F2;">(Axios, </span><span style="color:#BD93F9;font-style:italic;">arguments</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>extend(instance,Axios.prototype)</code>实现Axios更多实例调用</p><ul><li><code>axios#request(config)</code></li><li><code>axios#get(url[, config])</code></li><li><code>axios#delete(url[, config])</code></li><li><code>axios#head(url[, config])</code></li><li><code>axios#options(url[, config])</code></li><li><code>axios#post(url[, data[, config]])</code></li><li><code>axios#put(url[, data[, config]])</code></li><li><code>axios#patch(url[, data[, config]])</code></li><li><code>axios#getUri([config])</code></li></ul><h2 id="axios类" tabindex="-1"><a class="header-anchor" href="#axios类"><span>Axios类</span></a></h2><div class="language-ts line-numbers-mode" data-highlighter="shiki" data-ext="ts" data-title="ts" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">class</span><span style="color:#8BE9FD;"> Axios</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#FF79C6;">  constructor</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">instanceConfig</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#BD93F9;font-style:italic;">    this</span><span style="color:#F8F8F2;">.defaults </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> instanceConfig;</span></span>
<span class="line"><span style="color:#BD93F9;font-style:italic;">    this</span><span style="color:#F8F8F2;">.interceptors </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">      request</span><span style="color:#FF79C6;">:</span><span style="color:#FF79C6;font-weight:bold;"> new</span><span style="color:#50FA7B;"> InterceptorManager</span><span style="color:#F8F8F2;">(),</span></span>
<span class="line"><span style="color:#F8F8F2;">      response</span><span style="color:#FF79C6;">:</span><span style="color:#FF79C6;font-weight:bold;"> new</span><span style="color:#50FA7B;"> InterceptorManager</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"><span style="color:#F8F8F2;">    };</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#FF79C6;">  async</span><span style="color:#50FA7B;"> request</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">configOrUrl</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">config</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#FF79C6;">    try</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#FF79C6;">      return</span><span style="color:#FF79C6;"> await</span><span style="color:#BD93F9;font-style:italic;"> this</span><span style="color:#F8F8F2;">.</span><span style="color:#50FA7B;">_request</span><span style="color:#F8F8F2;">(configOrUrl, config);</span></span>
<span class="line"><span style="color:#F8F8F2;">    } </span><span style="color:#FF79C6;">catch</span><span style="color:#F8F8F2;"> (err) {</span></span>
<span class="line"><span style="color:#6272A4;">      // ...</span></span>
<span class="line"><span style="color:#FF79C6;">      throw</span><span style="color:#F8F8F2;"> err;</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#50FA7B;">  _request</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">configOrUrl</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">config</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#6272A4;">    // ...</span></span>
<span class="line"><span style="color:#FF79C6;">    return</span><span style="color:#F8F8F2;"> promise;</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#50FA7B;">  getUri</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">config</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">// Provide aliases for supported request methods</span></span>
<span class="line"><span style="color:#F8F8F2;">utils.</span><span style="color:#50FA7B;">forEach</span><span style="color:#F8F8F2;">([</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">delete</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">get</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">head</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">options</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">], </span><span style="color:#FF79C6;">function</span><span style="color:#50FA7B;"> forEachMethodNoData</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">method</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#6272A4;">  /*eslint func-names:0*/</span></span>
<span class="line"><span style="color:#8BE9FD;font-style:italic;">  Axios</span><span style="color:#F8F8F2;">.prototype[method] </span><span style="color:#FF79C6;">=</span><span style="color:#FF79C6;"> function</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">url</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">config</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#FF79C6;">    return</span><span style="color:#BD93F9;font-style:italic;"> this</span><span style="color:#F8F8F2;">.</span><span style="color:#50FA7B;">request</span><span style="color:#F8F8F2;">(</span><span style="color:#50FA7B;">mergeConfig</span><span style="color:#F8F8F2;">(config </span><span style="color:#FF79C6;">||</span><span style="color:#F8F8F2;"> {}, {</span></span>
<span class="line"><span style="color:#F8F8F2;">      method,</span></span>
<span class="line"><span style="color:#F8F8F2;">      url,</span></span>
<span class="line"><span style="color:#F8F8F2;">      data</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> (config </span><span style="color:#FF79C6;">||</span><span style="color:#F8F8F2;"> {}).data</span></span>
<span class="line"><span style="color:#F8F8F2;">    }));</span></span>
<span class="line"><span style="color:#F8F8F2;">  };</span></span>
<span class="line"><span style="color:#F8F8F2;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">utils.</span><span style="color:#50FA7B;">forEach</span><span style="color:#F8F8F2;">([</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">post</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">put</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">patch</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">], </span><span style="color:#FF79C6;">function</span><span style="color:#50FA7B;"> forEachMethodWithData</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">method</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#6272A4;">  /*eslint func-names:0*/</span></span>
<span class="line"><span style="color:#F8F8F2;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">export</span><span style="color:#FF79C6;"> default</span><span style="color:#F8F8F2;"> Axios;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="interceptormanager-拦截器" tabindex="-1"><a class="header-anchor" href="#interceptormanager-拦截器"><span>InterceptorManager 拦截器</span></a></h1><div class="language-ts line-numbers-mode" data-highlighter="shiki" data-ext="ts" data-title="ts" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#6272A4;">//  定义了请求和响应拦截器</span></span>
<span class="line"><span style="color:#BD93F9;font-style:italic;">this</span><span style="color:#F8F8F2;">.interceptors </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  request</span><span style="color:#FF79C6;">:</span><span style="color:#FF79C6;font-weight:bold;"> new</span><span style="color:#50FA7B;"> InterceptorManager</span><span style="color:#F8F8F2;">(),</span></span>
<span class="line"><span style="color:#F8F8F2;">  response</span><span style="color:#FF79C6;">:</span><span style="color:#FF79C6;font-weight:bold;"> new</span><span style="color:#50FA7B;"> InterceptorManager</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"><span style="color:#F8F8F2;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BD93F9;font-style:italic;">this</span><span style="color:#F8F8F2;">.interceptors.request.</span><span style="color:#50FA7B;">use</span><span style="color:#F8F8F2;">(</span><span style="color:#FF79C6;">function</span><span style="color:#50FA7B;"> onFulfilled</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">config</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#6272A4;">  // ...</span></span>
<span class="line"><span style="color:#FF79C6;">  return</span><span style="color:#F8F8F2;"> config;</span></span>
<span class="line"><span style="color:#F8F8F2;">}, </span><span style="color:#FF79C6;">function</span><span style="color:#50FA7B;"> onRejected</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">reason</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#6272A4;">  // ...</span></span>
<span class="line"><span style="color:#FF79C6;">  return</span><span style="color:#8BE9FD;font-style:italic;"> Promise</span><span style="color:#F8F8F2;">.</span><span style="color:#50FA7B;">reject</span><span style="color:#F8F8F2;">(reason)</span></span>
<span class="line"><span style="color:#F8F8F2;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BD93F9;font-style:italic;">this</span><span style="color:#F8F8F2;">.interceptors.response.</span><span style="color:#50FA7B;">use</span><span style="color:#F8F8F2;">(</span><span style="color:#FF79C6;">function</span><span style="color:#50FA7B;"> onFulfilled</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">response</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#6272A4;">  // ...</span></span>
<span class="line"><span style="color:#FF79C6;">  return</span><span style="color:#F8F8F2;"> response;</span></span>
<span class="line"><span style="color:#F8F8F2;">}, </span><span style="color:#FF79C6;">function</span><span style="color:#50FA7B;"> onRejected</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">reason</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#6272A4;">  // ...</span></span>
<span class="line"><span style="color:#FF79C6;">  return</span><span style="color:#8BE9FD;font-style:italic;"> Promise</span><span style="color:#F8F8F2;">.</span><span style="color:#50FA7B;">reject</span><span style="color:#F8F8F2;">(reason)</span></span>
<span class="line"><span style="color:#F8F8F2;">})</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>定义一个<code>handlers[]</code>接受对应拦截器 通过forEach循环调用拦截器</p><div class="language-ts line-numbers-mode" data-highlighter="shiki" data-ext="ts" data-title="ts" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">class</span><span style="color:#8BE9FD;"> InterceptorManager</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#FF79C6;">  constructor</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#BD93F9;font-style:italic;">    this</span><span style="color:#F8F8F2;">.handlers </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> [];</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#50FA7B;">  use</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">fulfilled</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">rejected</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">options</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#BD93F9;font-style:italic;">    this</span><span style="color:#F8F8F2;">.handlers.</span><span style="color:#50FA7B;">push</span><span style="color:#F8F8F2;">({</span></span>
<span class="line"><span style="color:#F8F8F2;">      fulfilled,</span></span>
<span class="line"><span style="color:#F8F8F2;">      rejected,</span></span>
<span class="line"><span style="color:#F8F8F2;">      synchronous</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> options </span><span style="color:#FF79C6;">?</span><span style="color:#F8F8F2;"> options.synchronous </span><span style="color:#FF79C6;">:</span><span style="color:#BD93F9;"> false</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">      runWhen</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> options </span><span style="color:#FF79C6;">?</span><span style="color:#F8F8F2;"> options.runWhen </span><span style="color:#FF79C6;">:</span><span style="color:#BD93F9;"> null</span></span>
<span class="line"><span style="color:#F8F8F2;">    });</span></span>
<span class="line"><span style="color:#FF79C6;">    return</span><span style="color:#BD93F9;font-style:italic;"> this</span><span style="color:#F8F8F2;">.handlers.length </span><span style="color:#FF79C6;">-</span><span style="color:#BD93F9;"> 1</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#50FA7B;">  eject</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">id</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#FF79C6;">    if</span><span style="color:#F8F8F2;"> (</span><span style="color:#BD93F9;font-style:italic;">this</span><span style="color:#F8F8F2;">.handlers[id]) {</span></span>
<span class="line"><span style="color:#BD93F9;font-style:italic;">      this</span><span style="color:#F8F8F2;">.handlers[id] </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> null</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#50FA7B;">  clear</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#FF79C6;">    if</span><span style="color:#F8F8F2;"> (</span><span style="color:#BD93F9;font-style:italic;">this</span><span style="color:#F8F8F2;">.handlers) {</span></span>
<span class="line"><span style="color:#BD93F9;font-style:italic;">      this</span><span style="color:#F8F8F2;">.handlers </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> [];</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">  // 循环调用所有拦截器</span></span>
<span class="line"><span style="color:#50FA7B;">  forEach</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">fn</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">    utils.</span><span style="color:#50FA7B;">forEach</span><span style="color:#F8F8F2;">(</span><span style="color:#BD93F9;font-style:italic;">this</span><span style="color:#F8F8F2;">.handlers, </span><span style="color:#FF79C6;">function</span><span style="color:#50FA7B;"> forEachHandler</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">h</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#FF79C6;">      if</span><span style="color:#F8F8F2;"> (h </span><span style="color:#FF79C6;">!==</span><span style="color:#BD93F9;"> null</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#50FA7B;">        fn</span><span style="color:#F8F8F2;">(h);</span></span>
<span class="line"><span style="color:#F8F8F2;">      }</span></span>
<span class="line"><span style="color:#F8F8F2;">    });</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">export</span><span style="color:#FF79C6;"> default</span><span style="color:#F8F8F2;"> InterceptorManager;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>拦截器有同步和异步执行，通过<code>synchronous</code>判断是否同步</p><p>定义<code>InterceptorChain</code>拦截器执行链，通过forEach循环加入 请求拦截器<code>unshift</code>加入，后定义的先执行 响应拦截器<code>push</code>加入，先定义先执行</p><p><strong>异步拦截器</strong></p><p>通过<code>promise = promise.then</code> =&gt; <code>promise.then.then</code>形成链调异步执行</p><div class="language-ts line-numbers-mode" data-highlighter="shiki" data-ext="ts" data-title="ts" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#6272A4;">// dispatchRequest 真正执行http请求</span></span>
<span class="line"><span style="color:#FF79C6;"> const</span><span style="color:#F8F8F2;"> chain </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> [dispatchRequest.</span><span style="color:#50FA7B;">bind</span><span style="color:#F8F8F2;">(</span><span style="color:#BD93F9;font-style:italic;">this</span><span style="color:#F8F8F2;">), </span><span style="color:#BD93F9;">undefined</span><span style="color:#F8F8F2;">];</span></span>
<span class="line"><span style="color:#F8F8F2;">  chain.unshift.</span><span style="color:#50FA7B;">apply</span><span style="color:#F8F8F2;">(chain, requestInterceptorChain);</span></span>
<span class="line"><span style="color:#F8F8F2;">  chain.push.</span><span style="color:#50FA7B;">apply</span><span style="color:#F8F8F2;">(chain, responseInterceptorChain);</span></span>
<span class="line"><span style="color:#F8F8F2;">  len </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> chain.length</span></span>
<span class="line"><span style="color:#F8F8F2;">  promise </span><span style="color:#FF79C6;">=</span><span style="color:#8BE9FD;font-style:italic;"> Promise</span><span style="color:#F8F8F2;">.</span><span style="color:#50FA7B;">resolve</span><span style="color:#F8F8F2;">(config)</span></span>
<span class="line"><span style="color:#FF79C6;">  while</span><span style="color:#F8F8F2;"> (i </span><span style="color:#FF79C6;">&lt;</span><span style="color:#F8F8F2;"> len) {</span></span>
<span class="line"><span style="color:#6272A4;">    // [fulfilled,reject]</span></span>
<span class="line"><span style="color:#6272A4;">    // 0  1</span></span>
<span class="line"><span style="color:#6272A4;">    // promise.then(requestfulfilled,requestrejected).then(dispatchRequest,undefined).then(responsefulfilled,responserejected)</span></span>
<span class="line"><span style="color:#F8F8F2;">    promise </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> promise.</span><span style="color:#50FA7B;">then</span><span style="color:#F8F8F2;">(chain[i</span><span style="color:#FF79C6;">++</span><span style="color:#F8F8F2;">], chain[i</span><span style="color:#FF79C6;">++</span><span style="color:#F8F8F2;">]);</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>同步拦截器</strong></p><p>直接<code>white</code>遍历执行</p><div class="language-ts line-numbers-mode" data-highlighter="shiki" data-ext="ts" data-title="ts" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;"> let</span><span style="color:#F8F8F2;"> newConfig </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> config</span></span>
<span class="line"><span style="color:#F8F8F2;"> i </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> 0</span></span>
<span class="line"><span style="color:#FF79C6;"> while</span><span style="color:#F8F8F2;"> (i </span><span style="color:#FF79C6;">&lt;</span><span style="color:#F8F8F2;"> len) {</span></span>
<span class="line"><span style="color:#FF79C6;">   const</span><span style="color:#F8F8F2;"> onFulfilled </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> requestInterceptorChain[i</span><span style="color:#FF79C6;">++</span><span style="color:#F8F8F2;">];</span></span>
<span class="line"><span style="color:#FF79C6;">   const</span><span style="color:#F8F8F2;"> onRejected </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> requestInterceptorChain[i</span><span style="color:#FF79C6;">++</span><span style="color:#F8F8F2;">];</span></span>
<span class="line"><span style="color:#FF79C6;">   try</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">     newConfig </span><span style="color:#FF79C6;">=</span><span style="color:#50FA7B;"> onFulfilled</span><span style="color:#F8F8F2;">(newConfig);</span></span>
<span class="line"><span style="color:#F8F8F2;">   } </span><span style="color:#FF79C6;">catch</span><span style="color:#F8F8F2;"> (error) {</span></span>
<span class="line"><span style="color:#F8F8F2;">     onRejected.</span><span style="color:#50FA7B;">call</span><span style="color:#F8F8F2;">(</span><span style="color:#BD93F9;font-style:italic;">this</span><span style="color:#F8F8F2;">, error);</span></span>
<span class="line"><span style="color:#FF79C6;">     break</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">   }</span></span>
<span class="line"><span style="color:#F8F8F2;"> </span></span>
<span class="line"><span style="color:#FF79C6;"> try</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">   promise </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> dispatchRequest.</span><span style="color:#50FA7B;">call</span><span style="color:#F8F8F2;">(</span><span style="color:#BD93F9;font-style:italic;">this</span><span style="color:#F8F8F2;">, newConfig);</span></span>
<span class="line"><span style="color:#F8F8F2;"> } </span><span style="color:#FF79C6;">catch</span><span style="color:#F8F8F2;"> (error) {</span></span>
<span class="line"><span style="color:#FF79C6;">   return</span><span style="color:#8BE9FD;font-style:italic;"> Promise</span><span style="color:#F8F8F2;">.</span><span style="color:#50FA7B;">reject</span><span style="color:#F8F8F2;">(error);</span></span>
<span class="line"><span style="color:#F8F8F2;"> </span></span>
<span class="line"><span style="color:#F8F8F2;"> i </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> 0</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;"> len </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> responseInterceptorChain.length</span></span>
<span class="line"><span style="color:#FF79C6;"> while</span><span style="color:#F8F8F2;"> (i </span><span style="color:#FF79C6;">&lt;</span><span style="color:#F8F8F2;"> len) {</span></span>
<span class="line"><span style="color:#F8F8F2;">   promise </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> promise.</span><span style="color:#50FA7B;">then</span><span style="color:#F8F8F2;">(responseInterceptorChain[i</span><span style="color:#FF79C6;">++</span><span style="color:#F8F8F2;">], responseInterceptorChain[i</span><span style="color:#FF79C6;">++</span><span style="color:#F8F8F2;">]);</span></span>
<span class="line"><span style="color:#F8F8F2;"> }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-ts line-numbers-mode" data-highlighter="shiki" data-ext="ts" data-title="ts" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#50FA7B;">  _request</span><span style="color:#F8F8F2;">(configOrUrl, config) {</span></span>
<span class="line"><span style="color:#6272A4;">    /*eslint no-param-reassign:0*/</span></span>
<span class="line"><span style="color:#6272A4;">    // Allow for axios(&#39;example/url&#39;[, config]) a la fetch API</span></span>
<span class="line"><span style="color:#FF79C6;">    if</span><span style="color:#F8F8F2;"> (</span><span style="color:#FF79C6;">typeof</span><span style="color:#F8F8F2;"> configOrUrl </span><span style="color:#FF79C6;">===</span><span style="color:#E9F284;"> &#39;</span><span style="color:#F1FA8C;">string</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">      config </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> config </span><span style="color:#FF79C6;">||</span><span style="color:#F8F8F2;"> {};</span></span>
<span class="line"><span style="color:#F8F8F2;">      config.url </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> configOrUrl;</span></span>
<span class="line"><span style="color:#F8F8F2;">    } </span><span style="color:#FF79C6;">else</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">      config </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> configOrUrl </span><span style="color:#FF79C6;">||</span><span style="color:#F8F8F2;"> {};</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">    config </span><span style="color:#FF79C6;">=</span><span style="color:#50FA7B;"> mergeConfig</span><span style="color:#F8F8F2;">(</span><span style="color:#BD93F9;font-style:italic;">this</span><span style="color:#F8F8F2;">.defaults, config);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">    const</span><span style="color:#F8F8F2;"> {transitional, paramsSerializer, headers} </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> config;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">    if</span><span style="color:#F8F8F2;"> (transitional </span><span style="color:#FF79C6;">!==</span><span style="color:#BD93F9;"> undefined</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">      validator.</span><span style="color:#50FA7B;">assertOptions</span><span style="color:#F8F8F2;">(transitional, {</span></span>
<span class="line"><span style="color:#F8F8F2;">        silentJSONParsing</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> validators.</span><span style="color:#50FA7B;">transitional</span><span style="color:#F8F8F2;">(validators.boolean),</span></span>
<span class="line"><span style="color:#F8F8F2;">        forcedJSONParsing</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> validators.</span><span style="color:#50FA7B;">transitional</span><span style="color:#F8F8F2;">(validators.boolean),</span></span>
<span class="line"><span style="color:#F8F8F2;">        clarifyTimeoutError</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> validators.</span><span style="color:#50FA7B;">transitional</span><span style="color:#F8F8F2;">(validators.boolean)</span></span>
<span class="line"><span style="color:#F8F8F2;">      }, </span><span style="color:#BD93F9;">false</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">    if</span><span style="color:#F8F8F2;"> (paramsSerializer </span><span style="color:#FF79C6;">!=</span><span style="color:#BD93F9;"> null</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#FF79C6;">      if</span><span style="color:#F8F8F2;"> (utils.</span><span style="color:#50FA7B;">isFunction</span><span style="color:#F8F8F2;">(paramsSerializer)) {</span></span>
<span class="line"><span style="color:#F8F8F2;">        config.paramsSerializer </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">          serialize</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> paramsSerializer</span></span>
<span class="line"><span style="color:#F8F8F2;">        }</span></span>
<span class="line"><span style="color:#F8F8F2;">      } </span><span style="color:#FF79C6;">else</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">        validator.</span><span style="color:#50FA7B;">assertOptions</span><span style="color:#F8F8F2;">(paramsSerializer, {</span></span>
<span class="line"><span style="color:#F8F8F2;">          encode</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> validators.function,</span></span>
<span class="line"><span style="color:#F8F8F2;">          serialize</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> validators.function</span></span>
<span class="line"><span style="color:#F8F8F2;">        }, </span><span style="color:#BD93F9;">true</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">      }</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">    validator.</span><span style="color:#50FA7B;">assertOptions</span><span style="color:#F8F8F2;">(config, {</span></span>
<span class="line"><span style="color:#F8F8F2;">      baseUrl</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> validators.</span><span style="color:#50FA7B;">spelling</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">baseURL</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">),</span></span>
<span class="line"><span style="color:#F8F8F2;">      withXsrfToken</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> validators.</span><span style="color:#50FA7B;">spelling</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">withXSRFToken</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">    }, </span><span style="color:#BD93F9;">true</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">    // Set config.method</span></span>
<span class="line"><span style="color:#F8F8F2;">    config.method </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> (config.method </span><span style="color:#FF79C6;">||</span><span style="color:#BD93F9;font-style:italic;"> this</span><span style="color:#F8F8F2;">.defaults.method </span><span style="color:#FF79C6;">||</span><span style="color:#E9F284;"> &#39;</span><span style="color:#F1FA8C;">get</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">).</span><span style="color:#50FA7B;">toLowerCase</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">    // Flatten headers</span></span>
<span class="line"><span style="color:#FF79C6;">    let</span><span style="color:#F8F8F2;"> contextHeaders </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> headers </span><span style="color:#FF79C6;">&amp;&amp;</span><span style="color:#F8F8F2;"> utils.</span><span style="color:#50FA7B;">merge</span><span style="color:#F8F8F2;">(</span></span>
<span class="line"><span style="color:#F8F8F2;">      headers.common,</span></span>
<span class="line"><span style="color:#F8F8F2;">      headers[config.method]</span></span>
<span class="line"><span style="color:#F8F8F2;">    );</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">    headers </span><span style="color:#FF79C6;">&amp;&amp;</span><span style="color:#F8F8F2;"> utils.</span><span style="color:#50FA7B;">forEach</span><span style="color:#F8F8F2;">(</span></span>
<span class="line"><span style="color:#F8F8F2;">      [</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">delete</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">get</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">head</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">post</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">put</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">patch</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">common</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">],</span></span>
<span class="line"><span style="color:#F8F8F2;">      (</span><span style="color:#FFB86C;font-style:italic;">method</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#FF79C6;">        delete</span><span style="color:#F8F8F2;"> headers[method];</span></span>
<span class="line"><span style="color:#F8F8F2;">      }</span></span>
<span class="line"><span style="color:#F8F8F2;">    );</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">    config.headers </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> AxiosHeaders.</span><span style="color:#50FA7B;">concat</span><span style="color:#F8F8F2;">(contextHeaders, headers);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">    // filter out skipped interceptors</span></span>
<span class="line"><span style="color:#FF79C6;">    const</span><span style="color:#F8F8F2;"> requestInterceptorChain </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> [];</span></span>
<span class="line"><span style="color:#FF79C6;">    let</span><span style="color:#F8F8F2;"> synchronousRequestInterceptors </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> true</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#BD93F9;font-style:italic;">    this</span><span style="color:#F8F8F2;">.interceptors.request.</span><span style="color:#50FA7B;">forEach</span><span style="color:#F8F8F2;">(</span><span style="color:#FF79C6;">function</span><span style="color:#50FA7B;"> unshiftRequestInterceptors</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">interceptor</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#FF79C6;">      if</span><span style="color:#F8F8F2;"> (</span><span style="color:#FF79C6;">typeof</span><span style="color:#F8F8F2;"> interceptor.runWhen </span><span style="color:#FF79C6;">===</span><span style="color:#E9F284;"> &#39;</span><span style="color:#F1FA8C;">function</span><span style="color:#E9F284;">&#39;</span><span style="color:#FF79C6;"> &amp;&amp;</span><span style="color:#F8F8F2;"> interceptor.</span><span style="color:#50FA7B;">runWhen</span><span style="color:#F8F8F2;">(config) </span><span style="color:#FF79C6;">===</span><span style="color:#BD93F9;"> false</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#FF79C6;">        return</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">      }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">      synchronousRequestInterceptors </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> synchronousRequestInterceptors </span><span style="color:#FF79C6;">&amp;&amp;</span><span style="color:#F8F8F2;"> interceptor.synchronous;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">      requestInterceptorChain.</span><span style="color:#50FA7B;">unshift</span><span style="color:#F8F8F2;">(interceptor.fulfilled, interceptor.rejected);</span></span>
<span class="line"><span style="color:#F8F8F2;">    });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">    const</span><span style="color:#F8F8F2;"> responseInterceptorChain </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> [];</span></span>
<span class="line"><span style="color:#BD93F9;font-style:italic;">    this</span><span style="color:#F8F8F2;">.interceptors.response.</span><span style="color:#50FA7B;">forEach</span><span style="color:#F8F8F2;">(</span><span style="color:#FF79C6;">function</span><span style="color:#50FA7B;"> pushResponseInterceptors</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">interceptor</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">      responseInterceptorChain.</span><span style="color:#50FA7B;">push</span><span style="color:#F8F8F2;">(interceptor.fulfilled, interceptor.rejected);</span></span>
<span class="line"><span style="color:#F8F8F2;">    });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">    let</span><span style="color:#F8F8F2;"> promise;</span></span>
<span class="line"><span style="color:#FF79C6;">    let</span><span style="color:#F8F8F2;"> i </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> 0</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#FF79C6;">    let</span><span style="color:#F8F8F2;"> len;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">    // 异步</span></span>
<span class="line"><span style="color:#FF79C6;">    if</span><span style="color:#F8F8F2;"> (</span><span style="color:#FF79C6;">!</span><span style="color:#F8F8F2;">synchronousRequestInterceptors) {</span></span>
<span class="line"><span style="color:#6272A4;">      // dispatchRequest 真正执行http请求</span></span>
<span class="line"><span style="color:#FF79C6;">      const</span><span style="color:#F8F8F2;"> chain </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> [dispatchRequest.</span><span style="color:#50FA7B;">bind</span><span style="color:#F8F8F2;">(</span><span style="color:#BD93F9;font-style:italic;">this</span><span style="color:#F8F8F2;">), </span><span style="color:#BD93F9;">undefined</span><span style="color:#F8F8F2;">];</span></span>
<span class="line"><span style="color:#F8F8F2;">      chain.unshift.</span><span style="color:#50FA7B;">apply</span><span style="color:#F8F8F2;">(chain, requestInterceptorChain);</span></span>
<span class="line"><span style="color:#F8F8F2;">      chain.push.</span><span style="color:#50FA7B;">apply</span><span style="color:#F8F8F2;">(chain, responseInterceptorChain);</span></span>
<span class="line"><span style="color:#F8F8F2;">      len </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> chain.length;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">      promise </span><span style="color:#FF79C6;">=</span><span style="color:#8BE9FD;font-style:italic;"> Promise</span><span style="color:#F8F8F2;">.</span><span style="color:#50FA7B;">resolve</span><span style="color:#F8F8F2;">(config);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">      while</span><span style="color:#F8F8F2;"> (i </span><span style="color:#FF79C6;">&lt;</span><span style="color:#F8F8F2;"> len) {</span></span>
<span class="line"><span style="color:#6272A4;">        // [fulfilled,reject]</span></span>
<span class="line"><span style="color:#6272A4;">        // 0  1</span></span>
<span class="line"><span style="color:#6272A4;">        // promise.then(requestfulfilled,requestrejected).then(dispatchRequest,undefined).then(responsefulfilled,responserejected)</span></span>
<span class="line"><span style="color:#F8F8F2;">        promise </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> promise.</span><span style="color:#50FA7B;">then</span><span style="color:#F8F8F2;">(chain[i</span><span style="color:#FF79C6;">++</span><span style="color:#F8F8F2;">], chain[i</span><span style="color:#FF79C6;">++</span><span style="color:#F8F8F2;">]);</span></span>
<span class="line"><span style="color:#F8F8F2;">      }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">      return</span><span style="color:#F8F8F2;"> promise;</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">    // 同步</span></span>
<span class="line"><span style="color:#F8F8F2;">    len </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> requestInterceptorChain.length;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">    let</span><span style="color:#F8F8F2;"> newConfig </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> config;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">    i </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> 0</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">    while</span><span style="color:#F8F8F2;"> (i </span><span style="color:#FF79C6;">&lt;</span><span style="color:#F8F8F2;"> len) {</span></span>
<span class="line"><span style="color:#FF79C6;">      const</span><span style="color:#F8F8F2;"> onFulfilled </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> requestInterceptorChain[i</span><span style="color:#FF79C6;">++</span><span style="color:#F8F8F2;">];</span></span>
<span class="line"><span style="color:#FF79C6;">      const</span><span style="color:#F8F8F2;"> onRejected </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> requestInterceptorChain[i</span><span style="color:#FF79C6;">++</span><span style="color:#F8F8F2;">];</span></span>
<span class="line"><span style="color:#FF79C6;">      try</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">        newConfig </span><span style="color:#FF79C6;">=</span><span style="color:#50FA7B;"> onFulfilled</span><span style="color:#F8F8F2;">(newConfig);</span></span>
<span class="line"><span style="color:#F8F8F2;">      } </span><span style="color:#FF79C6;">catch</span><span style="color:#F8F8F2;"> (error) {</span></span>
<span class="line"><span style="color:#F8F8F2;">        onRejected.</span><span style="color:#50FA7B;">call</span><span style="color:#F8F8F2;">(</span><span style="color:#BD93F9;font-style:italic;">this</span><span style="color:#F8F8F2;">, error);</span></span>
<span class="line"><span style="color:#FF79C6;">        break</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">      }</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">    try</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">      promise </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> dispatchRequest.</span><span style="color:#50FA7B;">call</span><span style="color:#F8F8F2;">(</span><span style="color:#BD93F9;font-style:italic;">this</span><span style="color:#F8F8F2;">, newConfig);</span></span>
<span class="line"><span style="color:#F8F8F2;">    } </span><span style="color:#FF79C6;">catch</span><span style="color:#F8F8F2;"> (error) {</span></span>
<span class="line"><span style="color:#FF79C6;">      return</span><span style="color:#8BE9FD;font-style:italic;"> Promise</span><span style="color:#F8F8F2;">.</span><span style="color:#50FA7B;">reject</span><span style="color:#F8F8F2;">(error);</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">    i </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> 0</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">    len </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> responseInterceptorChain.length;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">    while</span><span style="color:#F8F8F2;"> (i </span><span style="color:#FF79C6;">&lt;</span><span style="color:#F8F8F2;"> len) {</span></span>
<span class="line"><span style="color:#F8F8F2;">      promise </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> promise.</span><span style="color:#50FA7B;">then</span><span style="color:#F8F8F2;">(responseInterceptorChain[i</span><span style="color:#FF79C6;">++</span><span style="color:#F8F8F2;">], responseInterceptorChain[i</span><span style="color:#FF79C6;">++</span><span style="color:#F8F8F2;">]);</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">    return</span><span style="color:#F8F8F2;"> promise;</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="http-调用" tabindex="-1"><a class="header-anchor" href="#http-调用"><span>Http 调用</span></a></h1><p><code>dispatchRequest</code>真正执行http的方法 通过adapter获取要调用http请求的适配器,默认是xhrAdapter 适配器<code>[xhrAdapter,httpAdapter,fetchAdapter]</code></p><div class="language-ts line-numbers-mode" data-highlighter="shiki" data-ext="ts" data-title="ts" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">export</span><span style="color:#FF79C6;"> default</span><span style="color:#FF79C6;"> function</span><span style="color:#50FA7B;"> dispatchRequest</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">config</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#50FA7B;">  throwIfCancellationRequested</span><span style="color:#F8F8F2;">(config);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">  config.headers </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> AxiosHeaders.</span><span style="color:#50FA7B;">from</span><span style="color:#F8F8F2;">(config.headers);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">  // Transform request data</span></span>
<span class="line"><span style="color:#F8F8F2;">  config.data </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> transformData.</span><span style="color:#50FA7B;">call</span><span style="color:#F8F8F2;">(</span></span>
<span class="line"><span style="color:#F8F8F2;">    config,</span></span>
<span class="line"><span style="color:#F8F8F2;">    config.transformRequest</span></span>
<span class="line"><span style="color:#F8F8F2;">  );</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">  if</span><span style="color:#F8F8F2;"> ([</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">post</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">put</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">patch</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">].</span><span style="color:#50FA7B;">indexOf</span><span style="color:#F8F8F2;">(config.method) </span><span style="color:#FF79C6;">!==</span><span style="color:#FF79C6;"> -</span><span style="color:#BD93F9;">1</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">    config.headers.</span><span style="color:#50FA7B;">setContentType</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">application/x-www-form-urlencoded</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">false</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">  const</span><span style="color:#F8F8F2;"> adapter </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> adapters.</span><span style="color:#50FA7B;">getAdapter</span><span style="color:#F8F8F2;">(config.adapter </span><span style="color:#FF79C6;">||</span><span style="color:#F8F8F2;"> defaults.adapter);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">  return</span><span style="color:#50FA7B;"> adapter</span><span style="color:#F8F8F2;">(config).</span><span style="color:#50FA7B;">then</span><span style="color:#F8F8F2;">(</span><span style="color:#FF79C6;">function</span><span style="color:#50FA7B;"> onAdapterResolution</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">response</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#50FA7B;">    throwIfCancellationRequested</span><span style="color:#F8F8F2;">(config);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">    // Transform response data</span></span>
<span class="line"><span style="color:#F8F8F2;">    response.data </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> transformData.</span><span style="color:#50FA7B;">call</span><span style="color:#F8F8F2;">(</span></span>
<span class="line"><span style="color:#F8F8F2;">      config,</span></span>
<span class="line"><span style="color:#F8F8F2;">      config.transformResponse,</span></span>
<span class="line"><span style="color:#F8F8F2;">      response</span></span>
<span class="line"><span style="color:#F8F8F2;">    );</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">    response.headers </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> AxiosHeaders.</span><span style="color:#50FA7B;">from</span><span style="color:#F8F8F2;">(response.headers);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">    return</span><span style="color:#F8F8F2;"> response;</span></span>
<span class="line"><span style="color:#F8F8F2;">  }, </span><span style="color:#FF79C6;">function</span><span style="color:#50FA7B;"> onAdapterRejection</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">reason</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#FF79C6;">    if</span><span style="color:#F8F8F2;"> (</span><span style="color:#FF79C6;">!</span><span style="color:#50FA7B;">isCancel</span><span style="color:#F8F8F2;">(reason)) {</span></span>
<span class="line"><span style="color:#50FA7B;">      throwIfCancellationRequested</span><span style="color:#F8F8F2;">(config);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">      // Transform response data</span></span>
<span class="line"><span style="color:#FF79C6;">      if</span><span style="color:#F8F8F2;"> (reason </span><span style="color:#FF79C6;">&amp;&amp;</span><span style="color:#F8F8F2;"> reason.response) {</span></span>
<span class="line"><span style="color:#F8F8F2;">        reason.response.data </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> transformData.</span><span style="color:#50FA7B;">call</span><span style="color:#F8F8F2;">(</span></span>
<span class="line"><span style="color:#F8F8F2;">          config,</span></span>
<span class="line"><span style="color:#F8F8F2;">          config.transformResponse,</span></span>
<span class="line"><span style="color:#F8F8F2;">          reason.response</span></span>
<span class="line"><span style="color:#F8F8F2;">        );</span></span>
<span class="line"><span style="color:#F8F8F2;">        reason.response.headers </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> AxiosHeaders.</span><span style="color:#50FA7B;">from</span><span style="color:#F8F8F2;">(reason.response.headers);</span></span>
<span class="line"><span style="color:#F8F8F2;">      }</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">    return</span><span style="color:#8BE9FD;font-style:italic;"> Promise</span><span style="color:#F8F8F2;">.</span><span style="color:#50FA7B;">reject</span><span style="color:#F8F8F2;">(reason);</span></span>
<span class="line"><span style="color:#F8F8F2;">  });</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>defaults/index.js</code></p><div class="language-ts line-numbers-mode" data-highlighter="shiki" data-ext="ts" data-title="ts" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> defaults </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">   adapter</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> [</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">xhr</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">http</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">fetch</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">]</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="adapters" tabindex="-1"><a class="header-anchor" href="#adapters"><span>adapters</span></a></h2><div class="language-ts line-numbers-mode" data-highlighter="shiki" data-ext="ts" data-title="ts" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> knownAdapters </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  http</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> httpAdapter,</span></span>
<span class="line"><span style="color:#F8F8F2;">  xhr</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> xhrAdapter,</span></span>
<span class="line"><span style="color:#F8F8F2;">  fetch</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> fetchAdapter</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#FF79C6;">export</span><span style="color:#FF79C6;"> default</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#50FA7B;">  getAdapter</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> (</span><span style="color:#FFB86C;font-style:italic;">adapters</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#6272A4;">    //  adapter: [&#39;xhr&#39;, &#39;http&#39;, &#39;fetch&#39;]</span></span>
<span class="line"><span style="color:#F8F8F2;">    adapters </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> utils.</span><span style="color:#50FA7B;">isArray</span><span style="color:#F8F8F2;">(adapters) </span><span style="color:#FF79C6;">?</span><span style="color:#F8F8F2;"> adapters </span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> [adapters];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">    const</span><span style="color:#F8F8F2;"> {length} </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> adapters;</span></span>
<span class="line"><span style="color:#FF79C6;">    let</span><span style="color:#F8F8F2;"> nameOrAdapter;</span></span>
<span class="line"><span style="color:#FF79C6;">    let</span><span style="color:#F8F8F2;"> adapter;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">    const</span><span style="color:#F8F8F2;"> rejectedReasons </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> {};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">    for</span><span style="color:#F8F8F2;"> (</span><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> i </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> 0</span><span style="color:#F8F8F2;">; i </span><span style="color:#FF79C6;">&lt;</span><span style="color:#F8F8F2;"> length; i</span><span style="color:#FF79C6;">++</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">      nameOrAdapter </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> adapters[i];</span></span>
<span class="line"><span style="color:#FF79C6;">      let</span><span style="color:#F8F8F2;"> id;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">      adapter </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> nameOrAdapter;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">      if</span><span style="color:#F8F8F2;"> (</span><span style="color:#FF79C6;">!</span><span style="color:#50FA7B;">isResolvedHandle</span><span style="color:#F8F8F2;">(nameOrAdapter)) {</span></span>
<span class="line"><span style="color:#6272A4;">        // 获取对应的适配器</span></span>
<span class="line"><span style="color:#F8F8F2;">        adapter </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> knownAdapters[(id </span><span style="color:#FF79C6;">=</span><span style="color:#50FA7B;"> String</span><span style="color:#F8F8F2;">(nameOrAdapter)).</span><span style="color:#50FA7B;">toLowerCase</span><span style="color:#F8F8F2;">()];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">        if</span><span style="color:#F8F8F2;"> (adapter </span><span style="color:#FF79C6;">===</span><span style="color:#BD93F9;"> undefined</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#FF79C6;">          throw</span><span style="color:#FF79C6;font-weight:bold;"> new</span><span style="color:#50FA7B;"> AxiosError</span><span style="color:#F8F8F2;">(</span><span style="color:#F1FA8C;">\`Unknown adapter &#39;</span><span style="color:#FF79C6;">\${</span><span style="color:#F8F8F2;">id</span><span style="color:#FF79C6;">}</span><span style="color:#F1FA8C;">&#39;\`</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">        }</span></span>
<span class="line"><span style="color:#F8F8F2;">      }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">      if</span><span style="color:#F8F8F2;"> (adapter) {</span></span>
<span class="line"><span style="color:#FF79C6;">        break</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">      }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">      rejectedReasons[id </span><span style="color:#FF79C6;">||</span><span style="color:#E9F284;"> &#39;</span><span style="color:#F1FA8C;">#</span><span style="color:#E9F284;">&#39;</span><span style="color:#FF79C6;"> +</span><span style="color:#F8F8F2;"> i] </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> adapter;</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">    if</span><span style="color:#F8F8F2;"> (</span><span style="color:#FF79C6;">!</span><span style="color:#F8F8F2;">adapter) {</span></span>
<span class="line"><span style="color:#6272A4;">      // ..</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">    return</span><span style="color:#F8F8F2;"> adapter;</span></span>
<span class="line"><span style="color:#F8F8F2;">  },</span></span>
<span class="line"><span style="color:#F8F8F2;">  adapters</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> knownAdapters</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="xhr" tabindex="-1"><a class="header-anchor" href="#xhr"><span>XHR</span></a></h1><p>xhr原生使用</p><div class="language-ts line-numbers-mode" data-highlighter="shiki" data-ext="ts" data-title="ts" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> xhr </span><span style="color:#FF79C6;">=</span><span style="color:#FF79C6;font-weight:bold;"> new</span><span style="color:#50FA7B;"> XMLHttpRequest</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">xhr.</span><span style="color:#50FA7B;">open</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">GET</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">/my/url</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">xhr.</span><span style="color:#50FA7B;">send</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">xhr.</span><span style="color:#50FA7B;">onreadystatechange</span><span style="color:#FF79C6;"> =</span><span style="color:#FF79C6;"> function</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#FF79C6;">  if</span><span style="color:#F8F8F2;"> (xhr.readyState </span><span style="color:#FF79C6;">==</span><span style="color:#BD93F9;"> 3</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#6272A4;">    // 加载中</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#FF79C6;">  if</span><span style="color:#F8F8F2;"> (xhr.readyState </span><span style="color:#FF79C6;">==</span><span style="color:#BD93F9;"> 4</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#6272A4;">    // 请求完成</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">// 请求完成</span></span>
<span class="line"><span style="color:#F8F8F2;">xhr.</span><span style="color:#50FA7B;">onload</span><span style="color:#FF79C6;"> =</span><span style="color:#FF79C6;"> function</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#FF79C6;">  if</span><span style="color:#F8F8F2;"> (xhr.status </span><span style="color:#FF79C6;">!=</span><span style="color:#BD93F9;"> 200</span><span style="color:#F8F8F2;">) { </span><span style="color:#6272A4;">// HTTP error?</span></span>
<span class="line"><span style="color:#6272A4;">    // 处理 error</span></span>
<span class="line"><span style="color:#50FA7B;">    alert</span><span style="color:#F8F8F2;">( </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">Error: </span><span style="color:#E9F284;">&#39;</span><span style="color:#FF79C6;"> +</span><span style="color:#F8F8F2;"> xhr.status);</span></span>
<span class="line"><span style="color:#FF79C6;">    return</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">  // 获取来自 xhr.response 的响应</span></span>
<span class="line"><span style="color:#F8F8F2;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">xhr.</span><span style="color:#50FA7B;">onprogress</span><span style="color:#FF79C6;"> =</span><span style="color:#FF79C6;"> function</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">event</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#6272A4;">  // 报告进度</span></span>
<span class="line"><span style="color:#50FA7B;">  alert</span><span style="color:#F8F8F2;">(</span><span style="color:#F1FA8C;">\`Loaded </span><span style="color:#FF79C6;">\${</span><span style="color:#F8F8F2;">event.loaded</span><span style="color:#FF79C6;">}</span><span style="color:#F1FA8C;"> of </span><span style="color:#FF79C6;">\${</span><span style="color:#F8F8F2;">event.total</span><span style="color:#FF79C6;">}</span><span style="color:#F1FA8C;">\`</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">xhr.</span><span style="color:#50FA7B;">onerror</span><span style="color:#FF79C6;"> =</span><span style="color:#FF79C6;"> function</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#6272A4;">  // 处理非 HTTP error（例如网络中断）</span></span>
<span class="line"><span style="color:#F8F8F2;">};</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="axios中xhr内部封装" tabindex="-1"><a class="header-anchor" href="#axios中xhr内部封装"><span>Axios中XHR内部封装</span></a></h2><div class="language-ts line-numbers-mode" data-highlighter="shiki" data-ext="ts" data-title="ts" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> isXHRAdapterSupported </span><span style="color:#FF79C6;">=</span><span style="color:#FF79C6;"> typeof</span><span style="color:#F8F8F2;"> XMLHttpRequest </span><span style="color:#FF79C6;">!==</span><span style="color:#E9F284;"> &#39;</span><span style="color:#F1FA8C;">undefined</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">export</span><span style="color:#FF79C6;"> default</span><span style="color:#F8F8F2;"> isXHRAdapterSupported </span><span style="color:#FF79C6;">&amp;&amp;</span><span style="color:#FF79C6;"> function</span><span style="color:#F8F8F2;"> (</span><span style="color:#FFB86C;font-style:italic;">config</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#FF79C6;">  return</span><span style="color:#FF79C6;font-weight:bold;"> new</span><span style="color:#8BE9FD;font-style:italic;"> Promise</span><span style="color:#F8F8F2;">(</span><span style="color:#FF79C6;">function</span><span style="color:#50FA7B;"> dispatchXhrRequest</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">resolve</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">reject</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#FF79C6;">    const</span><span style="color:#F8F8F2;"> _config </span><span style="color:#FF79C6;">=</span><span style="color:#50FA7B;"> resolveConfig</span><span style="color:#F8F8F2;">(config);</span></span>
<span class="line"><span style="color:#FF79C6;">    let</span><span style="color:#F8F8F2;"> requestData </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> _config.data;</span></span>
<span class="line"><span style="color:#FF79C6;">    const</span><span style="color:#F8F8F2;"> requestHeaders </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> AxiosHeaders.</span><span style="color:#50FA7B;">from</span><span style="color:#F8F8F2;">(_config.headers).</span><span style="color:#50FA7B;">normalize</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#FF79C6;">    let</span><span style="color:#F8F8F2;"> {responseType, onUploadProgress, onDownloadProgress} </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> _config;</span></span>
<span class="line"><span style="color:#FF79C6;">    let</span><span style="color:#F8F8F2;"> onCanceled;</span></span>
<span class="line"><span style="color:#FF79C6;">    let</span><span style="color:#F8F8F2;"> uploadThrottled, downloadThrottled;</span></span>
<span class="line"><span style="color:#FF79C6;">    let</span><span style="color:#F8F8F2;"> flushUpload, flushDownload;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">    function</span><span style="color:#50FA7B;"> done</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#F8F8F2;">      flushUpload </span><span style="color:#FF79C6;">&amp;&amp;</span><span style="color:#50FA7B;"> flushUpload</span><span style="color:#F8F8F2;">(); </span><span style="color:#6272A4;">// flush events</span></span>
<span class="line"><span style="color:#F8F8F2;">      flushDownload </span><span style="color:#FF79C6;">&amp;&amp;</span><span style="color:#50FA7B;"> flushDownload</span><span style="color:#F8F8F2;">(); </span><span style="color:#6272A4;">// flush events</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">      _config.cancelToken </span><span style="color:#FF79C6;">&amp;&amp;</span><span style="color:#F8F8F2;"> _config.cancelToken.</span><span style="color:#50FA7B;">unsubscribe</span><span style="color:#F8F8F2;">(onCanceled);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">      _config.signal </span><span style="color:#FF79C6;">&amp;&amp;</span><span style="color:#F8F8F2;"> _config.signal.</span><span style="color:#50FA7B;">removeEventListener</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">abort</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, onCanceled);</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">    // 创建xhr</span></span>
<span class="line"><span style="color:#FF79C6;">    let</span><span style="color:#F8F8F2;"> request </span><span style="color:#FF79C6;">=</span><span style="color:#FF79C6;font-weight:bold;"> new</span><span style="color:#50FA7B;"> XMLHttpRequest</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#6272A4;">    // 初始化</span></span>
<span class="line"><span style="color:#F8F8F2;">    request.</span><span style="color:#50FA7B;">open</span><span style="color:#F8F8F2;">(_config.method.</span><span style="color:#50FA7B;">toUpperCase</span><span style="color:#F8F8F2;">(), _config.url, </span><span style="color:#BD93F9;">true</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">    // 设置超时时间</span></span>
<span class="line"><span style="color:#6272A4;">    // Set the request timeout in MS</span></span>
<span class="line"><span style="color:#F8F8F2;">    request.timeout </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> _config.timeout;</span></span>
<span class="line"><span style="color:#6272A4;">    // 请求完成</span></span>
<span class="line"><span style="color:#FF79C6;">    function</span><span style="color:#50FA7B;"> onloadend</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#FF79C6;">      if</span><span style="color:#F8F8F2;"> (</span><span style="color:#FF79C6;">!</span><span style="color:#F8F8F2;">request) {</span></span>
<span class="line"><span style="color:#FF79C6;">        return</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">      }</span></span>
<span class="line"><span style="color:#6272A4;">      // Prepare the response</span></span>
<span class="line"><span style="color:#FF79C6;">      const</span><span style="color:#F8F8F2;"> responseHeaders </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> AxiosHeaders.</span><span style="color:#50FA7B;">from</span><span style="color:#F8F8F2;">(</span></span>
<span class="line"><span style="color:#E9F284;">        &#39;</span><span style="color:#F1FA8C;">getAllResponseHeaders</span><span style="color:#E9F284;">&#39;</span><span style="color:#FF79C6;"> in</span><span style="color:#F8F8F2;"> request </span><span style="color:#FF79C6;">&amp;&amp;</span><span style="color:#F8F8F2;"> request.</span><span style="color:#50FA7B;">getAllResponseHeaders</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"><span style="color:#F8F8F2;">      );</span></span>
<span class="line"><span style="color:#FF79C6;">      const</span><span style="color:#F8F8F2;"> responseData </span><span style="color:#FF79C6;">=</span><span style="color:#FF79C6;"> !</span><span style="color:#F8F8F2;">responseType </span><span style="color:#FF79C6;">||</span><span style="color:#F8F8F2;"> responseType </span><span style="color:#FF79C6;">===</span><span style="color:#E9F284;"> &#39;</span><span style="color:#F1FA8C;">text</span><span style="color:#E9F284;">&#39;</span><span style="color:#FF79C6;"> ||</span><span style="color:#F8F8F2;"> responseType </span><span style="color:#FF79C6;">===</span><span style="color:#E9F284;"> &#39;</span><span style="color:#F1FA8C;">json</span><span style="color:#E9F284;">&#39;</span><span style="color:#FF79C6;"> ?</span></span>
<span class="line"><span style="color:#F8F8F2;">        request.responseText </span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> request.response;</span></span>
<span class="line"><span style="color:#FF79C6;">      const</span><span style="color:#F8F8F2;"> response </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">        data</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> responseData,</span></span>
<span class="line"><span style="color:#F8F8F2;">        status</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> request.status,</span></span>
<span class="line"><span style="color:#F8F8F2;">        statusText</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> request.statusText,</span></span>
<span class="line"><span style="color:#F8F8F2;">        headers</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> responseHeaders,</span></span>
<span class="line"><span style="color:#F8F8F2;">        config,</span></span>
<span class="line"><span style="color:#F8F8F2;">        request</span></span>
<span class="line"><span style="color:#F8F8F2;">      };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#50FA7B;">      settle</span><span style="color:#F8F8F2;">(</span><span style="color:#FF79C6;">function</span><span style="color:#50FA7B;"> _resolve</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">value</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#50FA7B;">        resolve</span><span style="color:#F8F8F2;">(value);</span></span>
<span class="line"><span style="color:#50FA7B;">        done</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#F8F8F2;">      }, </span><span style="color:#FF79C6;">function</span><span style="color:#50FA7B;"> _reject</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">err</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#50FA7B;">        reject</span><span style="color:#F8F8F2;">(err);</span></span>
<span class="line"><span style="color:#50FA7B;">        done</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#F8F8F2;">      }, response);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">      // Clean up request</span></span>
<span class="line"><span style="color:#F8F8F2;">      request </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> null</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">    // 兼容加载完成事件</span></span>
<span class="line"><span style="color:#FF79C6;">    if</span><span style="color:#F8F8F2;"> (</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">onloadend</span><span style="color:#E9F284;">&#39;</span><span style="color:#FF79C6;"> in</span><span style="color:#F8F8F2;"> request) {</span></span>
<span class="line"><span style="color:#6272A4;">      // Use onloadend if available</span></span>
<span class="line"><span style="color:#F8F8F2;">      request.onloadend </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> onloadend;</span></span>
<span class="line"><span style="color:#F8F8F2;">    } </span><span style="color:#FF79C6;">else</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#6272A4;">      // Listen for ready state to emulate onloadend</span></span>
<span class="line"><span style="color:#F8F8F2;">      request.</span><span style="color:#50FA7B;">onreadystatechange</span><span style="color:#FF79C6;"> =</span><span style="color:#FF79C6;"> function</span><span style="color:#50FA7B;"> handleLoad</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#FF79C6;">        if</span><span style="color:#F8F8F2;"> (</span><span style="color:#FF79C6;">!</span><span style="color:#F8F8F2;">request </span><span style="color:#FF79C6;">||</span><span style="color:#F8F8F2;"> request.readyState </span><span style="color:#FF79C6;">!==</span><span style="color:#BD93F9;"> 4</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#FF79C6;">          return</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">        // The request errored out and we didn&#39;t get a response, this will be</span></span>
<span class="line"><span style="color:#6272A4;">        // handled by onerror instead</span></span>
<span class="line"><span style="color:#6272A4;">        // With one exception: request that using file: protocol, most browsers</span></span>
<span class="line"><span style="color:#6272A4;">        // will return status as 0 even though it&#39;s a successful request</span></span>
<span class="line"><span style="color:#FF79C6;">        if</span><span style="color:#F8F8F2;"> (request.status </span><span style="color:#FF79C6;">===</span><span style="color:#BD93F9;"> 0</span><span style="color:#FF79C6;"> &amp;&amp;</span><span style="color:#FF79C6;"> !</span><span style="color:#F8F8F2;">(request.responseURL </span><span style="color:#FF79C6;">&amp;&amp;</span><span style="color:#F8F8F2;"> request.responseURL.</span><span style="color:#50FA7B;">indexOf</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">file:</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">===</span><span style="color:#BD93F9;"> 0</span><span style="color:#F8F8F2;">)) {</span></span>
<span class="line"><span style="color:#FF79C6;">          return</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">        }</span></span>
<span class="line"><span style="color:#6272A4;">        // readystate handler is calling before onerror or ontimeout handlers,</span></span>
<span class="line"><span style="color:#6272A4;">        // so we should call onloadend on the next &#39;tick&#39;</span></span>
<span class="line"><span style="color:#50FA7B;">        setTimeout</span><span style="color:#F8F8F2;">(onloadend);</span></span>
<span class="line"><span style="color:#F8F8F2;">      };</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#6272A4;">    // 请求取消事件</span></span>
<span class="line"><span style="color:#6272A4;">    // Handle browser request cancellation (as opposed to a manual cancellation)</span></span>
<span class="line"><span style="color:#F8F8F2;">    request.</span><span style="color:#50FA7B;">onabort</span><span style="color:#FF79C6;"> =</span><span style="color:#FF79C6;"> function</span><span style="color:#50FA7B;"> handleAbort</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#FF79C6;">      if</span><span style="color:#F8F8F2;"> (</span><span style="color:#FF79C6;">!</span><span style="color:#F8F8F2;">request) {</span></span>
<span class="line"><span style="color:#FF79C6;">        return</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">      }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#50FA7B;">      reject</span><span style="color:#F8F8F2;">(</span><span style="color:#FF79C6;font-weight:bold;">new</span><span style="color:#50FA7B;"> AxiosError</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">Request aborted</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, AxiosError.</span><span style="color:#BD93F9;">ECONNABORTED</span><span style="color:#F8F8F2;">, config, request));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">      // Clean up request</span></span>
<span class="line"><span style="color:#F8F8F2;">      request </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> null</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">    };</span></span>
<span class="line"><span style="color:#6272A4;">    // 请求错误事件</span></span>
<span class="line"><span style="color:#6272A4;">    // Handle low level network errors</span></span>
<span class="line"><span style="color:#F8F8F2;">    request.</span><span style="color:#50FA7B;">onerror</span><span style="color:#FF79C6;"> =</span><span style="color:#FF79C6;"> function</span><span style="color:#50FA7B;"> handleError</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#6272A4;">      // Real errors are hidden from us by the browser</span></span>
<span class="line"><span style="color:#6272A4;">      // onerror should only fire if it&#39;s a network error</span></span>
<span class="line"><span style="color:#50FA7B;">      reject</span><span style="color:#F8F8F2;">(</span><span style="color:#FF79C6;font-weight:bold;">new</span><span style="color:#50FA7B;"> AxiosError</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">Network Error</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, AxiosError.</span><span style="color:#BD93F9;">ERR_NETWORK</span><span style="color:#F8F8F2;">, config, request));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">      // Clean up request</span></span>
<span class="line"><span style="color:#F8F8F2;">      request </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> null</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">    };</span></span>
<span class="line"><span style="color:#6272A4;">    // 请求超时事件</span></span>
<span class="line"><span style="color:#6272A4;">    // Handle timeout</span></span>
<span class="line"><span style="color:#F8F8F2;">    request.</span><span style="color:#50FA7B;">ontimeout</span><span style="color:#FF79C6;"> =</span><span style="color:#FF79C6;"> function</span><span style="color:#50FA7B;"> handleTimeout</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#FF79C6;">      let</span><span style="color:#F8F8F2;"> timeoutErrorMessage </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> _config.timeout </span><span style="color:#FF79C6;">?</span><span style="color:#E9F284;"> &#39;</span><span style="color:#F1FA8C;">timeout of </span><span style="color:#E9F284;">&#39;</span><span style="color:#FF79C6;"> +</span><span style="color:#F8F8F2;"> _config.timeout </span><span style="color:#FF79C6;">+</span><span style="color:#E9F284;"> &#39;</span><span style="color:#F1FA8C;">ms exceeded</span><span style="color:#E9F284;">&#39;</span><span style="color:#FF79C6;"> :</span><span style="color:#E9F284;"> &#39;</span><span style="color:#F1FA8C;">timeout exceeded</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#FF79C6;">      const</span><span style="color:#F8F8F2;"> transitional </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> _config.transitional </span><span style="color:#FF79C6;">||</span><span style="color:#F8F8F2;"> transitionalDefaults;</span></span>
<span class="line"><span style="color:#FF79C6;">      if</span><span style="color:#F8F8F2;"> (_config.timeoutErrorMessage) {</span></span>
<span class="line"><span style="color:#F8F8F2;">        timeoutErrorMessage </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> _config.timeoutErrorMessage;</span></span>
<span class="line"><span style="color:#F8F8F2;">      }</span></span>
<span class="line"><span style="color:#50FA7B;">      reject</span><span style="color:#F8F8F2;">(</span><span style="color:#FF79C6;font-weight:bold;">new</span><span style="color:#50FA7B;"> AxiosError</span><span style="color:#F8F8F2;">(</span></span>
<span class="line"><span style="color:#F8F8F2;">        timeoutErrorMessage,</span></span>
<span class="line"><span style="color:#F8F8F2;">        transitional.clarifyTimeoutError </span><span style="color:#FF79C6;">?</span><span style="color:#F8F8F2;"> AxiosError.</span><span style="color:#BD93F9;">ETIMEDOUT</span><span style="color:#FF79C6;"> :</span><span style="color:#F8F8F2;"> AxiosError.</span><span style="color:#BD93F9;">ECONNABORTED</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">        config,</span></span>
<span class="line"><span style="color:#F8F8F2;">        request));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">      // Clean up request</span></span>
<span class="line"><span style="color:#F8F8F2;">      request </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> null</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">    };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">    // Remove Content-Type if data is undefined</span></span>
<span class="line"><span style="color:#F8F8F2;">    requestData </span><span style="color:#FF79C6;">===</span><span style="color:#BD93F9;"> undefined</span><span style="color:#FF79C6;"> &amp;&amp;</span><span style="color:#F8F8F2;"> requestHeaders.</span><span style="color:#50FA7B;">setContentType</span><span style="color:#F8F8F2;">(</span><span style="color:#BD93F9;">null</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">    // Add headers to the request</span></span>
<span class="line"><span style="color:#FF79C6;">    if</span><span style="color:#F8F8F2;"> (</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">setRequestHeader</span><span style="color:#E9F284;">&#39;</span><span style="color:#FF79C6;"> in</span><span style="color:#F8F8F2;"> request) {</span></span>
<span class="line"><span style="color:#F8F8F2;">      utils.</span><span style="color:#50FA7B;">forEach</span><span style="color:#F8F8F2;">(requestHeaders.</span><span style="color:#50FA7B;">toJSON</span><span style="color:#F8F8F2;">(), </span><span style="color:#FF79C6;">function</span><span style="color:#50FA7B;"> setRequestHeader</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">val</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">key</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">        request.</span><span style="color:#50FA7B;">setRequestHeader</span><span style="color:#F8F8F2;">(key, val);</span></span>
<span class="line"><span style="color:#F8F8F2;">      });</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">    // Add withCredentials to request if needed</span></span>
<span class="line"><span style="color:#FF79C6;">    if</span><span style="color:#F8F8F2;"> (</span><span style="color:#FF79C6;">!</span><span style="color:#F8F8F2;">utils.</span><span style="color:#50FA7B;">isUndefined</span><span style="color:#F8F8F2;">(_config.withCredentials)) {</span></span>
<span class="line"><span style="color:#F8F8F2;">      request.withCredentials </span><span style="color:#FF79C6;">=</span><span style="color:#FF79C6;"> !!</span><span style="color:#F8F8F2;">_config.withCredentials;</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">    // Add responseType to request if needed</span></span>
<span class="line"><span style="color:#FF79C6;">    if</span><span style="color:#F8F8F2;"> (responseType </span><span style="color:#FF79C6;">&amp;&amp;</span><span style="color:#F8F8F2;"> responseType </span><span style="color:#FF79C6;">!==</span><span style="color:#E9F284;"> &#39;</span><span style="color:#F1FA8C;">json</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">      request.responseType </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> _config.responseType;</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">    // Handle progress if needed</span></span>
<span class="line"><span style="color:#FF79C6;">    if</span><span style="color:#F8F8F2;"> (onDownloadProgress) {</span></span>
<span class="line"><span style="color:#F8F8F2;">      ([downloadThrottled, flushDownload] </span><span style="color:#FF79C6;">=</span><span style="color:#50FA7B;"> progressEventReducer</span><span style="color:#F8F8F2;">(onDownloadProgress, </span><span style="color:#BD93F9;">true</span><span style="color:#F8F8F2;">));</span></span>
<span class="line"><span style="color:#F8F8F2;">      request.</span><span style="color:#50FA7B;">addEventListener</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">progress</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, downloadThrottled);</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">    // Not all browsers support upload events</span></span>
<span class="line"><span style="color:#FF79C6;">    if</span><span style="color:#F8F8F2;"> (onUploadProgress </span><span style="color:#FF79C6;">&amp;&amp;</span><span style="color:#F8F8F2;"> request.upload) {</span></span>
<span class="line"><span style="color:#F8F8F2;">      ([uploadThrottled, flushUpload] </span><span style="color:#FF79C6;">=</span><span style="color:#50FA7B;"> progressEventReducer</span><span style="color:#F8F8F2;">(onUploadProgress));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">      request.upload.</span><span style="color:#50FA7B;">addEventListener</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">progress</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, uploadThrottled);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">      request.upload.</span><span style="color:#50FA7B;">addEventListener</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">loadend</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, flushUpload);</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#6272A4;">    // 如果配置取消请求 则取消本次请求</span></span>
<span class="line"><span style="color:#FF79C6;">    if</span><span style="color:#F8F8F2;"> (_config.cancelToken </span><span style="color:#FF79C6;">||</span><span style="color:#F8F8F2;"> _config.signal) {</span></span>
<span class="line"><span style="color:#6272A4;">      // Handle cancellation</span></span>
<span class="line"><span style="color:#6272A4;">      // eslint-disable-next-line func-names</span></span>
<span class="line"><span style="color:#50FA7B;">      onCanceled</span><span style="color:#FF79C6;"> =</span><span style="color:#FFB86C;font-style:italic;"> cancel</span><span style="color:#FF79C6;"> =&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#FF79C6;">        if</span><span style="color:#F8F8F2;"> (</span><span style="color:#FF79C6;">!</span><span style="color:#F8F8F2;">request) {</span></span>
<span class="line"><span style="color:#FF79C6;">          return</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">        }</span></span>
<span class="line"><span style="color:#50FA7B;">        reject</span><span style="color:#F8F8F2;">(</span><span style="color:#FF79C6;">!</span><span style="color:#F8F8F2;">cancel </span><span style="color:#FF79C6;">||</span><span style="color:#F8F8F2;"> cancel.type </span><span style="color:#FF79C6;">?</span><span style="color:#FF79C6;font-weight:bold;"> new</span><span style="color:#50FA7B;"> CanceledError</span><span style="color:#F8F8F2;">(</span><span style="color:#BD93F9;">null</span><span style="color:#F8F8F2;">, config, request) </span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> cancel);</span></span>
<span class="line"><span style="color:#F8F8F2;">        request.</span><span style="color:#50FA7B;">abort</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#F8F8F2;">        request </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> null</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">      };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">      _config.cancelToken </span><span style="color:#FF79C6;">&amp;&amp;</span><span style="color:#F8F8F2;"> _config.cancelToken.</span><span style="color:#50FA7B;">subscribe</span><span style="color:#F8F8F2;">(onCanceled);</span></span>
<span class="line"><span style="color:#FF79C6;">      if</span><span style="color:#F8F8F2;"> (_config.signal) {</span></span>
<span class="line"><span style="color:#F8F8F2;">        _config.signal.aborted </span><span style="color:#FF79C6;">?</span><span style="color:#50FA7B;"> onCanceled</span><span style="color:#F8F8F2;">() </span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> _config.signal.</span><span style="color:#50FA7B;">addEventListener</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">abort</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, onCanceled);</span></span>
<span class="line"><span style="color:#F8F8F2;">      }</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">    const</span><span style="color:#F8F8F2;"> protocol </span><span style="color:#FF79C6;">=</span><span style="color:#50FA7B;"> parseProtocol</span><span style="color:#F8F8F2;">(_config.url);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">    if</span><span style="color:#F8F8F2;"> (protocol </span><span style="color:#FF79C6;">&amp;&amp;</span><span style="color:#F8F8F2;"> platform.protocols.</span><span style="color:#50FA7B;">indexOf</span><span style="color:#F8F8F2;">(protocol) </span><span style="color:#FF79C6;">===</span><span style="color:#FF79C6;"> -</span><span style="color:#BD93F9;">1</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#50FA7B;">      reject</span><span style="color:#F8F8F2;">(</span><span style="color:#FF79C6;font-weight:bold;">new</span><span style="color:#50FA7B;"> AxiosError</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">Unsupported protocol </span><span style="color:#E9F284;">&#39;</span><span style="color:#FF79C6;"> +</span><span style="color:#F8F8F2;"> protocol </span><span style="color:#FF79C6;">+</span><span style="color:#E9F284;"> &#39;</span><span style="color:#F1FA8C;">:</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, AxiosError.</span><span style="color:#BD93F9;">ERR_BAD_REQUEST</span><span style="color:#F8F8F2;">, config));</span></span>
<span class="line"><span style="color:#FF79C6;">      return</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">    // 发送http请求</span></span>
<span class="line"><span style="color:#6272A4;">    // Send the request</span></span>
<span class="line"><span style="color:#F8F8F2;">    request.</span><span style="color:#50FA7B;">send</span><span style="color:#F8F8F2;">(requestData </span><span style="color:#FF79C6;">||</span><span style="color:#BD93F9;"> null</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">  });</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="fetch" tabindex="-1"><a class="header-anchor" href="#fetch"><span>Fetch</span></a></h1><div class="language-ts line-numbers-mode" data-highlighter="shiki" data-ext="ts" data-title="ts" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#6272A4;">// Step 1：启动 fetch，并获得一个 reader</span></span>
<span class="line"><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> response </span><span style="color:#FF79C6;">=</span><span style="color:#FF79C6;"> await</span><span style="color:#50FA7B;"> fetch</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">https://api.github.com/repos/javascript-tutorial/en.javascript.info/commits?per_page=100</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> reader </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> response.body.</span><span style="color:#50FA7B;">getReader</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">// Step 2：获得总长度（length）</span></span>
<span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> contentLength </span><span style="color:#FF79C6;">=</span><span style="color:#FF79C6;"> +</span><span style="color:#F8F8F2;">response.headers.</span><span style="color:#50FA7B;">get</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">Content-Length</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">// Step 3：读取数据</span></span>
<span class="line"><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> receivedLength </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> 0</span><span style="color:#F8F8F2;">; </span><span style="color:#6272A4;">// 当前接收到了这么多字节</span></span>
<span class="line"><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> chunks </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> []; </span><span style="color:#6272A4;">// 接收到的二进制块的数组（包括 body）</span></span>
<span class="line"><span style="color:#FF79C6;">while</span><span style="color:#F8F8F2;">(</span><span style="color:#BD93F9;">true</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#FF79C6;">  const</span><span style="color:#F8F8F2;"> {done, value} </span><span style="color:#FF79C6;">=</span><span style="color:#FF79C6;"> await</span><span style="color:#F8F8F2;"> reader.</span><span style="color:#50FA7B;">read</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">  if</span><span style="color:#F8F8F2;"> (done) {</span></span>
<span class="line"><span style="color:#FF79C6;">    break</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">  chunks.</span><span style="color:#50FA7B;">push</span><span style="color:#F8F8F2;">(value);</span></span>
<span class="line"><span style="color:#F8F8F2;">  receivedLength </span><span style="color:#FF79C6;">+=</span><span style="color:#F8F8F2;"> value.length;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">  console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#F1FA8C;">\`Received </span><span style="color:#FF79C6;">\${</span><span style="color:#F8F8F2;">receivedLength</span><span style="color:#FF79C6;">}</span><span style="color:#F1FA8C;"> of </span><span style="color:#FF79C6;">\${</span><span style="color:#F8F8F2;">contentLength</span><span style="color:#FF79C6;">}</span><span style="color:#F1FA8C;">\`</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">// Step 4：将块连接到单个 Uint8Array</span></span>
<span class="line"><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> chunksAll </span><span style="color:#FF79C6;">=</span><span style="color:#FF79C6;font-weight:bold;"> new</span><span style="color:#50FA7B;"> Uint8Array</span><span style="color:#F8F8F2;">(receivedLength); </span><span style="color:#6272A4;">// (4.1)</span></span>
<span class="line"><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> position </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> 0</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#FF79C6;">for</span><span style="color:#F8F8F2;">(</span><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> chunk </span><span style="color:#FF79C6;">of</span><span style="color:#F8F8F2;"> chunks) {</span></span>
<span class="line"><span style="color:#F8F8F2;">  chunksAll.</span><span style="color:#50FA7B;">set</span><span style="color:#F8F8F2;">(chunk, position); </span><span style="color:#6272A4;">// (4.2)</span></span>
<span class="line"><span style="color:#F8F8F2;">  position </span><span style="color:#FF79C6;">+=</span><span style="color:#F8F8F2;"> chunk.length;</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">// Step 5：解码成字符串</span></span>
<span class="line"><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> result </span><span style="color:#FF79C6;">=</span><span style="color:#FF79C6;font-weight:bold;"> new</span><span style="color:#50FA7B;"> TextDecoder</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">utf-8</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">).</span><span style="color:#50FA7B;">decode</span><span style="color:#F8F8F2;">(chunksAll);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">// 我们完成啦！</span></span>
<span class="line"><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> commits </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> JSON</span><span style="color:#F8F8F2;">.</span><span style="color:#50FA7B;">parse</span><span style="color:#F8F8F2;">(result);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="axios中fetch封装" tabindex="-1"><a class="header-anchor" href="#axios中fetch封装"><span>Axios中Fetch封装</span></a></h2><div class="language-ts line-numbers-mode" data-highlighter="shiki" data-ext="ts" data-title="ts" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> isFetchSupported </span><span style="color:#FF79C6;">=</span><span style="color:#FF79C6;"> typeof</span><span style="color:#F8F8F2;"> fetch </span><span style="color:#FF79C6;">===</span><span style="color:#E9F284;"> &#39;</span><span style="color:#F1FA8C;">function</span><span style="color:#E9F284;">&#39;</span><span style="color:#FF79C6;"> &amp;&amp;</span><span style="color:#FF79C6;"> typeof</span><span style="color:#F8F8F2;"> Request </span><span style="color:#FF79C6;">===</span><span style="color:#E9F284;"> &#39;</span><span style="color:#F1FA8C;">function</span><span style="color:#E9F284;">&#39;</span><span style="color:#FF79C6;"> &amp;&amp;</span><span style="color:#FF79C6;"> typeof</span><span style="color:#F8F8F2;"> Response </span><span style="color:#FF79C6;">===</span><span style="color:#E9F284;"> &#39;</span><span style="color:#F1FA8C;">function</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#FF79C6;">export</span><span style="color:#FF79C6;"> default</span><span style="color:#F8F8F2;"> isFetchSupported </span><span style="color:#FF79C6;">&amp;&amp;</span><span style="color:#F8F8F2;"> (</span><span style="color:#FF79C6;">async</span><span style="color:#F8F8F2;"> (</span><span style="color:#FFB86C;font-style:italic;">config</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#FF79C6;">  let</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">    url,</span></span>
<span class="line"><span style="color:#F8F8F2;">    method,</span></span>
<span class="line"><span style="color:#F8F8F2;">    data,</span></span>
<span class="line"><span style="color:#F8F8F2;">    signal,</span></span>
<span class="line"><span style="color:#F8F8F2;">    cancelToken,</span></span>
<span class="line"><span style="color:#F8F8F2;">    timeout,</span></span>
<span class="line"><span style="color:#F8F8F2;">    onDownloadProgress,</span></span>
<span class="line"><span style="color:#F8F8F2;">    onUploadProgress,</span></span>
<span class="line"><span style="color:#F8F8F2;">    responseType,</span></span>
<span class="line"><span style="color:#F8F8F2;">    headers,</span></span>
<span class="line"><span style="color:#F8F8F2;">    withCredentials </span><span style="color:#FF79C6;">=</span><span style="color:#E9F284;"> &#39;</span><span style="color:#F1FA8C;">same-origin</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">    fetchOptions</span></span>
<span class="line"><span style="color:#F8F8F2;">  } </span><span style="color:#FF79C6;">=</span><span style="color:#50FA7B;"> resolveConfig</span><span style="color:#F8F8F2;">(config);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">  responseType </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> responseType </span><span style="color:#FF79C6;">?</span><span style="color:#F8F8F2;"> (responseType </span><span style="color:#FF79C6;">+</span><span style="color:#E9F284;"> &#39;&#39;</span><span style="color:#F8F8F2;">).</span><span style="color:#50FA7B;">toLowerCase</span><span style="color:#F8F8F2;">() </span><span style="color:#FF79C6;">:</span><span style="color:#E9F284;"> &#39;</span><span style="color:#F1FA8C;">text</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">  let</span><span style="color:#F8F8F2;"> composedSignal </span><span style="color:#FF79C6;">=</span><span style="color:#50FA7B;"> composeSignals</span><span style="color:#F8F8F2;">([signal, cancelToken </span><span style="color:#FF79C6;">&amp;&amp;</span><span style="color:#F8F8F2;"> cancelToken.</span><span style="color:#50FA7B;">toAbortSignal</span><span style="color:#F8F8F2;">()], timeout);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">  let</span><span style="color:#F8F8F2;"> request;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">  const</span><span style="color:#F8F8F2;"> unsubscribe </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> composedSignal </span><span style="color:#FF79C6;">&amp;&amp;</span><span style="color:#F8F8F2;"> composedSignal.unsubscribe </span><span style="color:#FF79C6;">&amp;&amp;</span><span style="color:#F8F8F2;"> (() </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">      composedSignal.</span><span style="color:#50FA7B;">unsubscribe</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#F8F8F2;">  });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">  let</span><span style="color:#F8F8F2;"> requestContentLength;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">  try</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#6272A4;">    // 如果有监听下载事件</span></span>
<span class="line"><span style="color:#FF79C6;">    if</span><span style="color:#F8F8F2;"> (</span></span>
<span class="line"><span style="color:#F8F8F2;">      onUploadProgress </span><span style="color:#FF79C6;">&amp;&amp;</span><span style="color:#F8F8F2;"> supportsRequestStream </span><span style="color:#FF79C6;">&amp;&amp;</span><span style="color:#F8F8F2;"> method </span><span style="color:#FF79C6;">!==</span><span style="color:#E9F284;"> &#39;</span><span style="color:#F1FA8C;">get</span><span style="color:#E9F284;">&#39;</span><span style="color:#FF79C6;"> &amp;&amp;</span><span style="color:#F8F8F2;"> method </span><span style="color:#FF79C6;">!==</span><span style="color:#E9F284;"> &#39;</span><span style="color:#F1FA8C;">head</span><span style="color:#E9F284;">&#39;</span><span style="color:#FF79C6;"> &amp;&amp;</span></span>
<span class="line"><span style="color:#F8F8F2;">      (requestContentLength </span><span style="color:#FF79C6;">=</span><span style="color:#FF79C6;"> await</span><span style="color:#50FA7B;"> resolveBodyLength</span><span style="color:#F8F8F2;">(headers, data)) </span><span style="color:#FF79C6;">!==</span><span style="color:#BD93F9;"> 0</span></span>
<span class="line"><span style="color:#F8F8F2;">    ) {</span></span>
<span class="line"><span style="color:#6272A4;">      // 启动fetch，并获得一个 reader</span></span>
<span class="line"><span style="color:#FF79C6;">      let</span><span style="color:#F8F8F2;"> _request </span><span style="color:#FF79C6;">=</span><span style="color:#FF79C6;font-weight:bold;"> new</span><span style="color:#50FA7B;"> Request</span><span style="color:#F8F8F2;">(url, {</span></span>
<span class="line"><span style="color:#F8F8F2;">        method</span><span style="color:#FF79C6;">:</span><span style="color:#E9F284;"> &#39;</span><span style="color:#F1FA8C;">POST</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">        body</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> data,</span></span>
<span class="line"><span style="color:#F8F8F2;">        duplex</span><span style="color:#FF79C6;">:</span><span style="color:#E9F284;"> &quot;</span><span style="color:#F1FA8C;">half</span><span style="color:#E9F284;">&quot;</span></span>
<span class="line"><span style="color:#F8F8F2;">      });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">      let</span><span style="color:#F8F8F2;"> contentTypeHeader;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">      if</span><span style="color:#F8F8F2;"> (utils.</span><span style="color:#50FA7B;">isFormData</span><span style="color:#F8F8F2;">(data) </span><span style="color:#FF79C6;">&amp;&amp;</span><span style="color:#F8F8F2;"> (contentTypeHeader </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> _request.headers.</span><span style="color:#50FA7B;">get</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">content-type</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">))) {</span></span>
<span class="line"><span style="color:#F8F8F2;">        headers.</span><span style="color:#50FA7B;">setContentType</span><span style="color:#F8F8F2;">(contentTypeHeader)</span></span>
<span class="line"><span style="color:#F8F8F2;">      }</span></span>
<span class="line"><span style="color:#6272A4;">      // 添加下载进度事件处理</span></span>
<span class="line"><span style="color:#FF79C6;">      if</span><span style="color:#F8F8F2;"> (_request.body) {</span></span>
<span class="line"><span style="color:#FF79C6;">        const</span><span style="color:#F8F8F2;"> [onProgress, flush] </span><span style="color:#FF79C6;">=</span><span style="color:#50FA7B;"> progressEventDecorator</span><span style="color:#F8F8F2;">(</span></span>
<span class="line"><span style="color:#F8F8F2;">          requestContentLength,</span></span>
<span class="line"><span style="color:#50FA7B;">          progressEventReducer</span><span style="color:#F8F8F2;">(</span><span style="color:#50FA7B;">asyncDecorator</span><span style="color:#F8F8F2;">(onUploadProgress))</span></span>
<span class="line"><span style="color:#F8F8F2;">        );</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">        data </span><span style="color:#FF79C6;">=</span><span style="color:#50FA7B;"> trackStream</span><span style="color:#F8F8F2;">(_request.body, DEFAULT_CHUNK_SIZE, onProgress, flush);</span></span>
<span class="line"><span style="color:#F8F8F2;">      }</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">    if</span><span style="color:#F8F8F2;"> (</span><span style="color:#FF79C6;">!</span><span style="color:#F8F8F2;">utils.</span><span style="color:#50FA7B;">isString</span><span style="color:#F8F8F2;">(withCredentials)) {</span></span>
<span class="line"><span style="color:#F8F8F2;">      withCredentials </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> withCredentials </span><span style="color:#FF79C6;">?</span><span style="color:#E9F284;"> &#39;</span><span style="color:#F1FA8C;">include</span><span style="color:#E9F284;">&#39;</span><span style="color:#FF79C6;"> :</span><span style="color:#E9F284;"> &#39;</span><span style="color:#F1FA8C;">omit</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">    // Cloudflare Workers throws when credentials are defined</span></span>
<span class="line"><span style="color:#6272A4;">    // see https://github.com/cloudflare/workerd/issues/902</span></span>
<span class="line"><span style="color:#FF79C6;">    const</span><span style="color:#F8F8F2;"> isCredentialsSupported </span><span style="color:#FF79C6;">=</span><span style="color:#E9F284;"> &quot;</span><span style="color:#F1FA8C;">credentials</span><span style="color:#E9F284;">&quot;</span><span style="color:#FF79C6;"> in</span><span style="color:#8BE9FD;font-style:italic;"> Request</span><span style="color:#F8F8F2;">.prototype;</span></span>
<span class="line"><span style="color:#F8F8F2;">    request </span><span style="color:#FF79C6;">=</span><span style="color:#FF79C6;font-weight:bold;"> new</span><span style="color:#50FA7B;"> Request</span><span style="color:#F8F8F2;">(url, {</span></span>
<span class="line"><span style="color:#FF79C6;">      ...</span><span style="color:#F8F8F2;">fetchOptions,</span></span>
<span class="line"><span style="color:#F8F8F2;">      signal</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> composedSignal,</span></span>
<span class="line"><span style="color:#F8F8F2;">      method</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> method.</span><span style="color:#50FA7B;">toUpperCase</span><span style="color:#F8F8F2;">(),</span></span>
<span class="line"><span style="color:#F8F8F2;">      headers</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> headers.</span><span style="color:#50FA7B;">normalize</span><span style="color:#F8F8F2;">().</span><span style="color:#50FA7B;">toJSON</span><span style="color:#F8F8F2;">(),</span></span>
<span class="line"><span style="color:#F8F8F2;">      body</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> data,</span></span>
<span class="line"><span style="color:#F8F8F2;">      duplex</span><span style="color:#FF79C6;">:</span><span style="color:#E9F284;"> &quot;</span><span style="color:#F1FA8C;">half</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">      credentials</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> isCredentialsSupported </span><span style="color:#FF79C6;">?</span><span style="color:#F8F8F2;"> withCredentials </span><span style="color:#FF79C6;">:</span><span style="color:#BD93F9;"> undefined</span></span>
<span class="line"><span style="color:#F8F8F2;">    });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">    let</span><span style="color:#F8F8F2;"> response </span><span style="color:#FF79C6;">=</span><span style="color:#FF79C6;"> await</span><span style="color:#50FA7B;"> fetch</span><span style="color:#F8F8F2;">(request);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">    const</span><span style="color:#F8F8F2;"> isStreamResponse </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> supportsResponseStream </span><span style="color:#FF79C6;">&amp;&amp;</span><span style="color:#F8F8F2;"> (responseType </span><span style="color:#FF79C6;">===</span><span style="color:#E9F284;"> &#39;</span><span style="color:#F1FA8C;">stream</span><span style="color:#E9F284;">&#39;</span><span style="color:#FF79C6;"> ||</span><span style="color:#F8F8F2;"> responseType </span><span style="color:#FF79C6;">===</span><span style="color:#E9F284;"> &#39;</span><span style="color:#F1FA8C;">response</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">    if</span><span style="color:#F8F8F2;"> (supportsResponseStream </span><span style="color:#FF79C6;">&amp;&amp;</span><span style="color:#F8F8F2;"> (onDownloadProgress </span><span style="color:#FF79C6;">||</span><span style="color:#F8F8F2;"> (isStreamResponse </span><span style="color:#FF79C6;">&amp;&amp;</span><span style="color:#F8F8F2;"> unsubscribe))) {</span></span>
<span class="line"><span style="color:#FF79C6;">      const</span><span style="color:#F8F8F2;"> options </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> {};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">      [</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">status</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">statusText</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">headers</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">].</span><span style="color:#50FA7B;">forEach</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">prop</span><span style="color:#FF79C6;"> =&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">        options[prop] </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> response[prop];</span></span>
<span class="line"><span style="color:#F8F8F2;">      });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">      const</span><span style="color:#F8F8F2;"> responseContentLength </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> utils.</span><span style="color:#50FA7B;">toFiniteNumber</span><span style="color:#F8F8F2;">(response.headers.</span><span style="color:#50FA7B;">get</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">content-length</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">      const</span><span style="color:#F8F8F2;"> [onProgress, flush] </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> onDownloadProgress </span><span style="color:#FF79C6;">&amp;&amp;</span><span style="color:#50FA7B;"> progressEventDecorator</span><span style="color:#F8F8F2;">(</span></span>
<span class="line"><span style="color:#F8F8F2;">        responseContentLength,</span></span>
<span class="line"><span style="color:#50FA7B;">        progressEventReducer</span><span style="color:#F8F8F2;">(</span><span style="color:#50FA7B;">asyncDecorator</span><span style="color:#F8F8F2;">(onDownloadProgress), </span><span style="color:#BD93F9;">true</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">      ) </span><span style="color:#FF79C6;">||</span><span style="color:#F8F8F2;"> [];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">      response </span><span style="color:#FF79C6;">=</span><span style="color:#FF79C6;font-weight:bold;"> new</span><span style="color:#50FA7B;"> Response</span><span style="color:#F8F8F2;">(</span></span>
<span class="line"><span style="color:#50FA7B;">        trackStream</span><span style="color:#F8F8F2;">(response.body, DEFAULT_CHUNK_SIZE, onProgress, () </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">          flush </span><span style="color:#FF79C6;">&amp;&amp;</span><span style="color:#50FA7B;"> flush</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#F8F8F2;">          unsubscribe </span><span style="color:#FF79C6;">&amp;&amp;</span><span style="color:#50FA7B;"> unsubscribe</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#F8F8F2;">        }),</span></span>
<span class="line"><span style="color:#F8F8F2;">        options</span></span>
<span class="line"><span style="color:#F8F8F2;">      );</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">    responseType </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> responseType </span><span style="color:#FF79C6;">||</span><span style="color:#E9F284;"> &#39;</span><span style="color:#F1FA8C;">text</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">    let</span><span style="color:#F8F8F2;"> responseData </span><span style="color:#FF79C6;">=</span><span style="color:#FF79C6;"> await</span><span style="color:#F8F8F2;"> resolvers[utils.</span><span style="color:#50FA7B;">findKey</span><span style="color:#F8F8F2;">(resolvers, responseType) </span><span style="color:#FF79C6;">||</span><span style="color:#E9F284;"> &#39;</span><span style="color:#F1FA8C;">text</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">](response, config);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">    !</span><span style="color:#F8F8F2;">isStreamResponse </span><span style="color:#FF79C6;">&amp;&amp;</span><span style="color:#F8F8F2;"> unsubscribe </span><span style="color:#FF79C6;">&amp;&amp;</span><span style="color:#50FA7B;"> unsubscribe</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">    return</span><span style="color:#FF79C6;"> await</span><span style="color:#FF79C6;font-weight:bold;"> new</span><span style="color:#8BE9FD;font-style:italic;"> Promise</span><span style="color:#F8F8F2;">((</span><span style="color:#FFB86C;font-style:italic;">resolve</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">reject</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#50FA7B;">      settle</span><span style="color:#F8F8F2;">(resolve, reject, {</span></span>
<span class="line"><span style="color:#F8F8F2;">        data</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> responseData,</span></span>
<span class="line"><span style="color:#F8F8F2;">        headers</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> AxiosHeaders.</span><span style="color:#50FA7B;">from</span><span style="color:#F8F8F2;">(response.headers),</span></span>
<span class="line"><span style="color:#F8F8F2;">        status</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> response.status,</span></span>
<span class="line"><span style="color:#F8F8F2;">        statusText</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> response.statusText,</span></span>
<span class="line"><span style="color:#F8F8F2;">        config,</span></span>
<span class="line"><span style="color:#F8F8F2;">        request</span></span>
<span class="line"><span style="color:#F8F8F2;">      })</span></span>
<span class="line"><span style="color:#F8F8F2;">    })</span></span>
<span class="line"><span style="color:#F8F8F2;">  } </span><span style="color:#FF79C6;">catch</span><span style="color:#F8F8F2;"> (err) {</span></span>
<span class="line"><span style="color:#F8F8F2;">    unsubscribe </span><span style="color:#FF79C6;">&amp;&amp;</span><span style="color:#50FA7B;"> unsubscribe</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">    if</span><span style="color:#F8F8F2;"> (err </span><span style="color:#FF79C6;">&amp;&amp;</span><span style="color:#F8F8F2;"> err.name </span><span style="color:#FF79C6;">===</span><span style="color:#E9F284;"> &#39;</span><span style="color:#F1FA8C;">TypeError</span><span style="color:#E9F284;">&#39;</span><span style="color:#FF79C6;"> &amp;&amp;</span><span style="color:#FF5555;"> /</span><span style="color:#F1FA8C;">fetch</span><span style="color:#FF5555;">/</span><span style="color:#FF79C6;">i</span><span style="color:#F8F8F2;">.</span><span style="color:#50FA7B;">test</span><span style="color:#F8F8F2;">(err.message)) {</span></span>
<span class="line"><span style="color:#FF79C6;">      throw</span><span style="color:#F8F8F2;"> Object.</span><span style="color:#50FA7B;">assign</span><span style="color:#F8F8F2;">(</span></span>
<span class="line"><span style="color:#FF79C6;font-weight:bold;">        new</span><span style="color:#50FA7B;"> AxiosError</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">Network Error</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, AxiosError.</span><span style="color:#BD93F9;">ERR_NETWORK</span><span style="color:#F8F8F2;">, config, request),</span></span>
<span class="line"><span style="color:#F8F8F2;">        {</span></span>
<span class="line"><span style="color:#F8F8F2;">          cause</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> err.cause </span><span style="color:#FF79C6;">||</span><span style="color:#F8F8F2;"> err</span></span>
<span class="line"><span style="color:#F8F8F2;">        }</span></span>
<span class="line"><span style="color:#F8F8F2;">      )</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">    throw</span><span style="color:#F8F8F2;"> AxiosError.</span><span style="color:#50FA7B;">from</span><span style="color:#F8F8F2;">(err, err </span><span style="color:#FF79C6;">&amp;&amp;</span><span style="color:#F8F8F2;"> err.code, config, request);</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">});</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="参考" tabindex="-1"><a class="header-anchor" href="#参考"><span>参考</span></a></h1><ul><li><a href="https://github.com/liushi-cli/v3-ts-tailwind-template/blob/master/src/utils/axios/axios.ts" target="_blank" rel="noopener noreferrer">https://github.com/liushi-cli/v3-ts-tailwind-template/blob/master/src/utils/axios/axios.ts</a></li><li><a href="https://juejin.cn/post/7224415869367943205#heading-5" target="_blank" rel="noopener noreferrer">https://juejin.cn/post/7224415869367943205#heading-5</a></li><li>《现代 JavaScript 教程》</li></ul>`,42)]))}const t=n(p,[["render",o],["__file","axios-source-code.html.vue"]]),r=JSON.parse(`{"path":"/network/axios-source-code.html","title":"Axios 源码解析","lang":"en-US","frontmatter":{"title":"Axios 源码解析","category":["NetWork"],"tag":["Axios"],"date":"2025-02-07T00:00:00.000Z","description":"Axios 封装使用 Axios实例 lib/axios.js bind(Axios.prototype.request, context); extend(instance,Axios.prototype)实现Axios更多实例调用 axios#request(config) axios#get(url[, config]) axios#delete...","head":[["meta",{"property":"og:url","content":"https://luxiag.github.io/luxiag/blog/network/axios-source-code.html"}],["meta",{"property":"og:title","content":"Axios 源码解析"}],["meta",{"property":"og:description","content":"Axios 封装使用 Axios实例 lib/axios.js bind(Axios.prototype.request, context); extend(instance,Axios.prototype)实现Axios更多实例调用 axios#request(config) axios#get(url[, config]) axios#delete..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2025-02-12T13:51:52.000Z"}],["meta",{"property":"article:tag","content":"Axios"}],["meta",{"property":"article:published_time","content":"2025-02-07T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-02-12T13:51:52.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Axios 源码解析\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2025-02-07T00:00:00.000Z\\",\\"dateModified\\":\\"2025-02-12T13:51:52.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"luxiag\\",\\"url\\":\\"https://luxiag.github.io/luxiag\\"}]}"]]},"headers":[{"level":2,"title":"Axios类","slug":"axios类","link":"#axios类","children":[]},{"level":2,"title":"adapters","slug":"adapters","link":"#adapters","children":[]},{"level":2,"title":"Axios中XHR内部封装","slug":"axios中xhr内部封装","link":"#axios中xhr内部封装","children":[]},{"level":2,"title":"Axios中Fetch封装","slug":"axios中fetch封装","link":"#axios中fetch封装","children":[]}],"git":{"createdTime":1739352537000,"updatedTime":1739368312000,"contributors":[{"name":"luxiag","email":"luxiag@qq.com","commits":2}]},"readingTime":{"minutes":8.44,"words":2532},"filePathRelative":"network/axios-source-code.md","localizedDate":"February 7, 2025","excerpt":"\\n<div class=\\"language-ts line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"ts\\" data-title=\\"ts\\" style=\\"background-color:#282A36;color:#F8F8F2\\"><pre class=\\"shiki dracula vp-code\\"><code><span class=\\"line\\"><span style=\\"color:#FF79C6\\">import</span><span style=\\"color:#F8F8F2\\"> axios, </span></span>\\n<span class=\\"line\\"><span style=\\"color:#F8F8F2\\">    { AxiosInstance,</span></span>\\n<span class=\\"line\\"><span style=\\"color:#F8F8F2\\">      InternalAxiosRequestConfig, </span></span>\\n<span class=\\"line\\"><span style=\\"color:#F8F8F2\\">      AxiosRequestConfig, </span></span>\\n<span class=\\"line\\"><span style=\\"color:#F8F8F2\\">      AxiosError, </span></span>\\n<span class=\\"line\\"><span style=\\"color:#F8F8F2\\">      AxiosResponse,</span></span>\\n<span class=\\"line\\"><span style=\\"color:#F8F8F2\\">    } </span><span style=\\"color:#FF79C6\\">from</span><span style=\\"color:#E9F284\\"> '</span><span style=\\"color:#F1FA8C\\">axios</span><span style=\\"color:#E9F284\\">'</span><span style=\\"color:#F8F8F2\\">;</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color:#FF79C6\\">interface</span><span style=\\"color:#8BE9FD;font-style:italic\\"> ResponseModel</span><span style=\\"color:#F8F8F2\\">&lt;</span><span style=\\"color:#FFB86C;font-style:italic\\">T</span><span style=\\"color:#FF79C6\\"> =</span><span style=\\"color:#8BE9FD;font-style:italic\\"> any</span><span style=\\"color:#F8F8F2\\">&gt; {</span></span>\\n<span class=\\"line\\"><span style=\\"color:#F8F8F2\\">    success</span><span style=\\"color:#FF79C6\\">:</span><span style=\\"color:#8BE9FD;font-style:italic\\"> boolean</span><span style=\\"color:#F8F8F2\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color:#F8F8F2\\">    message</span><span style=\\"color:#FF79C6\\">:</span><span style=\\"color:#8BE9FD;font-style:italic\\"> string</span><span style=\\"color:#FF79C6\\"> |</span><span style=\\"color:#8BE9FD;font-style:italic\\"> null</span><span style=\\"color:#F8F8F2\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color:#F8F8F2\\">    code</span><span style=\\"color:#FF79C6\\">:</span><span style=\\"color:#8BE9FD;font-style:italic\\"> number</span><span style=\\"color:#FF79C6\\"> |</span><span style=\\"color:#8BE9FD;font-style:italic\\"> string</span><span style=\\"color:#F8F8F2\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color:#F8F8F2\\">    data</span><span style=\\"color:#FF79C6\\">:</span><span style=\\"color:#8BE9FD;font-style:italic\\"> T</span><span style=\\"color:#F8F8F2\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color:#F8F8F2\\">}</span></span>\\n<span class=\\"line\\"><span style=\\"color:#FF79C6\\">class</span><span style=\\"color:#8BE9FD\\"> HttpRequest</span><span style=\\"color:#F8F8F2\\"> {</span></span>\\n<span class=\\"line\\"><span style=\\"color:#F8F8F2\\">    service</span><span style=\\"color:#FF79C6\\">:</span><span style=\\"color:#8BE9FD;font-style:italic\\"> AxiosInstance</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color:#FF79C6\\">    constructor</span><span style=\\"color:#F8F8F2\\">() {</span></span>\\n<span class=\\"line\\"><span style=\\"color:#BD93F9;font-style:italic\\">        this</span><span style=\\"color:#F8F8F2\\">.service </span><span style=\\"color:#FF79C6\\">=</span><span style=\\"color:#F8F8F2\\"> axios.</span><span style=\\"color:#50FA7B\\">create</span><span style=\\"color:#F8F8F2\\">({</span></span>\\n<span class=\\"line\\"><span style=\\"color:#F8F8F2\\">            baseURL</span><span style=\\"color:#FF79C6\\">:</span><span style=\\"color:#FF79C6\\"> import</span><span style=\\"color:#F8F8F2\\">.meta.env.</span><span style=\\"color:#BD93F9\\">VITE_APP_BASE_URL</span><span style=\\"color:#F8F8F2\\">,</span></span>\\n<span class=\\"line\\"><span style=\\"color:#F8F8F2\\">            timeout</span><span style=\\"color:#FF79C6\\">:</span><span style=\\"color:#BD93F9\\"> 5</span><span style=\\"color:#FF79C6\\"> *</span><span style=\\"color:#BD93F9\\"> 1000</span></span>\\n<span class=\\"line\\"><span style=\\"color:#F8F8F2\\">        });</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color:#BD93F9;font-style:italic\\">        this</span><span style=\\"color:#F8F8F2\\">.service.interceptors.request.</span><span style=\\"color:#50FA7B\\">use</span><span style=\\"color:#F8F8F2\\">(</span></span>\\n<span class=\\"line\\"><span style=\\"color:#F8F8F2\\">            (</span><span style=\\"color:#FFB86C;font-style:italic\\">config</span><span style=\\"color:#FF79C6\\">:</span><span style=\\"color:#8BE9FD;font-style:italic\\"> InternalAxiosRequestConfig</span><span style=\\"color:#F8F8F2\\">) </span><span style=\\"color:#FF79C6\\">=&gt;</span><span style=\\"color:#F8F8F2\\"> {</span></span>\\n<span class=\\"line\\"><span style=\\"color:#6272A4\\">                /**</span></span>\\n<span class=\\"line\\"><span style=\\"color:#6272A4\\">                 * set your config</span></span>\\n<span class=\\"line\\"><span style=\\"color:#6272A4\\">                 */</span></span>\\n<span class=\\"line\\"><span style=\\"color:#FF79C6\\">                if</span><span style=\\"color:#F8F8F2\\"> (</span><span style=\\"color:#FF79C6\\">import</span><span style=\\"color:#F8F8F2\\">.meta.env.</span><span style=\\"color:#BD93F9\\">VITE_APP_TOKEN_KEY</span><span style=\\"color:#FF79C6\\"> &amp;&amp;</span><span style=\\"color:#50FA7B\\"> getToken</span><span style=\\"color:#F8F8F2\\">()) {</span></span>\\n<span class=\\"line\\"><span style=\\"color:#F8F8F2\\">                    config.headers[</span><span style=\\"color:#FF79C6\\">import</span><span style=\\"color:#F8F8F2\\">.meta.env.</span><span style=\\"color:#BD93F9\\">VITE_APP_TOKEN_KEY</span><span style=\\"color:#F8F8F2\\">] </span><span style=\\"color:#FF79C6\\">=</span><span style=\\"color:#50FA7B\\"> getToken</span><span style=\\"color:#F8F8F2\\">()</span></span>\\n<span class=\\"line\\"><span style=\\"color:#F8F8F2\\">                }</span></span>\\n<span class=\\"line\\"><span style=\\"color:#FF79C6\\">                return</span><span style=\\"color:#F8F8F2\\"> config</span></span>\\n<span class=\\"line\\"><span style=\\"color:#F8F8F2\\">            },</span></span>\\n<span class=\\"line\\"><span style=\\"color:#F8F8F2\\">            (</span><span style=\\"color:#FFB86C;font-style:italic\\">error</span><span style=\\"color:#FF79C6\\">:</span><span style=\\"color:#8BE9FD;font-style:italic\\"> AxiosError</span><span style=\\"color:#F8F8F2\\">) </span><span style=\\"color:#FF79C6\\">=&gt;</span><span style=\\"color:#F8F8F2\\"> {</span></span>\\n<span class=\\"line\\"><span style=\\"color:#F8F8F2\\">                console.</span><span style=\\"color:#50FA7B\\">log</span><span style=\\"color:#F8F8F2\\">(</span><span style=\\"color:#E9F284\\">'</span><span style=\\"color:#F1FA8C\\">requestError: </span><span style=\\"color:#E9F284\\">'</span><span style=\\"color:#F8F8F2\\">, error)</span></span>\\n<span class=\\"line\\"><span style=\\"color:#FF79C6\\">                return</span><span style=\\"color:#8BE9FD;font-style:italic\\"> Promise</span><span style=\\"color:#F8F8F2\\">.</span><span style=\\"color:#50FA7B\\">reject</span><span style=\\"color:#F8F8F2\\">(error);</span></span>\\n<span class=\\"line\\"><span style=\\"color:#F8F8F2\\">            },</span></span>\\n<span class=\\"line\\"><span style=\\"color:#F8F8F2\\">            {</span></span>\\n<span class=\\"line\\"><span style=\\"color:#F8F8F2\\">                synchronous</span><span style=\\"color:#FF79C6\\">:</span><span style=\\"color:#BD93F9\\"> false</span></span>\\n<span class=\\"line\\"><span style=\\"color:#F8F8F2\\">                runWhen: ((</span><span style=\\"color:#FFB86C;font-style:italic\\">config</span><span style=\\"color:#FF79C6\\">:</span><span style=\\"color:#8BE9FD;font-style:italic\\"> InternalAxiosRequestConfig</span><span style=\\"color:#F8F8F2\\">) </span><span style=\\"color:#FF79C6\\">=&gt;</span><span style=\\"color:#F8F8F2\\"> {</span></span>\\n<span class=\\"line\\"><span style=\\"color:#6272A4\\">                    // do something</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color:#6272A4\\">                    // if return true, axios will execution interceptor method</span></span>\\n<span class=\\"line\\"><span style=\\"color:#FF79C6\\">                    return</span><span style=\\"color:#BD93F9\\"> true</span></span>\\n<span class=\\"line\\"><span style=\\"color:#F8F8F2\\">                })</span></span>\\n<span class=\\"line\\"><span style=\\"color:#F8F8F2\\">            }</span></span>\\n<span class=\\"line\\"><span style=\\"color:#F8F8F2\\">        );</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color:#BD93F9;font-style:italic\\">        this</span><span style=\\"color:#F8F8F2\\">.service.interceptors.response.</span><span style=\\"color:#50FA7B\\">use</span><span style=\\"color:#F8F8F2\\">(</span></span>\\n<span class=\\"line\\"><span style=\\"color:#F8F8F2\\">            (</span><span style=\\"color:#FFB86C;font-style:italic\\">response</span><span style=\\"color:#FF79C6\\">:</span><span style=\\"color:#8BE9FD;font-style:italic\\"> AxiosResponse</span><span style=\\"color:#F8F8F2\\">&lt;</span><span style=\\"color:#FFB86C;font-style:italic\\">ResponseModel</span><span style=\\"color:#F8F8F2\\">&gt;)</span><span style=\\"color:#FF79C6\\">:</span><span style=\\"color:#8BE9FD;font-style:italic\\"> AxiosResponse</span><span style=\\"color:#F8F8F2\\">[</span><span style=\\"color:#E9F284\\">'</span><span style=\\"color:#F1FA8C\\">data</span><span style=\\"color:#E9F284\\">'</span><span style=\\"color:#F8F8F2\\">] </span><span style=\\"color:#FF79C6\\">=&gt;</span><span style=\\"color:#F8F8F2\\"> {</span></span>\\n<span class=\\"line\\"><span style=\\"color:#FF79C6\\">                const</span><span style=\\"color:#F8F8F2\\"> { data } </span><span style=\\"color:#FF79C6\\">=</span><span style=\\"color:#F8F8F2\\"> response</span></span>\\n<span class=\\"line\\"><span style=\\"color:#FF79C6\\">                const</span><span style=\\"color:#F8F8F2\\"> { code } </span><span style=\\"color:#FF79C6\\">=</span><span style=\\"color:#F8F8F2\\"> data</span></span>\\n<span class=\\"line\\"><span style=\\"color:#FF79C6\\">                if</span><span style=\\"color:#F8F8F2\\"> (code) {</span></span>\\n<span class=\\"line\\"><span style=\\"color:#FF79C6\\">                    if</span><span style=\\"color:#F8F8F2\\"> (code </span><span style=\\"color:#FF79C6\\">!=</span><span style=\\"color:#F8F8F2\\"> HttpCodeConfig.success) {</span></span>\\n<span class=\\"line\\"><span style=\\"color:#FF79C6\\">                        switch</span><span style=\\"color:#F8F8F2\\"> (code) {</span></span>\\n<span class=\\"line\\"><span style=\\"color:#FF79C6\\">                            case</span><span style=\\"color:#F8F8F2\\"> HttpCodeConfig.notFound:</span></span>\\n<span class=\\"line\\"><span style=\\"color:#6272A4\\">                                // the method to handle this code</span></span>\\n<span class=\\"line\\"><span style=\\"color:#FF79C6\\">                                break</span><span style=\\"color:#F8F8F2\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color:#FF79C6\\">                            case</span><span style=\\"color:#F8F8F2\\"> HttpCodeConfig.noPermission:</span></span>\\n<span class=\\"line\\"><span style=\\"color:#6272A4\\">                                // the method to handle this code</span></span>\\n<span class=\\"line\\"><span style=\\"color:#FF79C6\\">                                break</span><span style=\\"color:#F8F8F2\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color:#FF79C6\\">                            default</span><span style=\\"color:#F8F8F2\\">:</span></span>\\n<span class=\\"line\\"><span style=\\"color:#FF79C6\\">                                break</span><span style=\\"color:#F8F8F2\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color:#F8F8F2\\">                        }</span></span>\\n<span class=\\"line\\"><span style=\\"color:#FF79C6\\">                        return</span><span style=\\"color:#8BE9FD;font-style:italic\\"> Promise</span><span style=\\"color:#F8F8F2\\">.</span><span style=\\"color:#50FA7B\\">reject</span><span style=\\"color:#F8F8F2\\">(data.message)</span></span>\\n<span class=\\"line\\"><span style=\\"color:#F8F8F2\\">                    } </span><span style=\\"color:#FF79C6\\">else</span><span style=\\"color:#F8F8F2\\"> {</span></span>\\n<span class=\\"line\\"><span style=\\"color:#FF79C6\\">                        return</span><span style=\\"color:#F8F8F2\\"> data</span></span>\\n<span class=\\"line\\"><span style=\\"color:#F8F8F2\\">                    }</span></span>\\n<span class=\\"line\\"><span style=\\"color:#F8F8F2\\">                } </span><span style=\\"color:#FF79C6\\">else</span><span style=\\"color:#F8F8F2\\"> {</span></span>\\n<span class=\\"line\\"><span style=\\"color:#FF79C6\\">                    return</span><span style=\\"color:#8BE9FD;font-style:italic\\"> Promise</span><span style=\\"color:#F8F8F2\\">.</span><span style=\\"color:#50FA7B\\">reject</span><span style=\\"color:#F8F8F2\\">(</span><span style=\\"color:#E9F284\\">'</span><span style=\\"color:#F1FA8C\\">Error! code missing!</span><span style=\\"color:#E9F284\\">'</span><span style=\\"color:#F8F8F2\\">)</span></span>\\n<span class=\\"line\\"><span style=\\"color:#F8F8F2\\">                }</span></span>\\n<span class=\\"line\\"><span style=\\"color:#F8F8F2\\">            },</span></span>\\n<span class=\\"line\\"><span style=\\"color:#F8F8F2\\">            (</span><span style=\\"color:#FFB86C;font-style:italic\\">error</span><span style=\\"color:#FF79C6\\">:</span><span style=\\"color:#8BE9FD;font-style:italic\\"> any</span><span style=\\"color:#F8F8F2\\">) </span><span style=\\"color:#FF79C6\\">=&gt;</span><span style=\\"color:#F8F8F2\\"> {</span></span>\\n<span class=\\"line\\"><span style=\\"color:#FF79C6\\">                return</span><span style=\\"color:#8BE9FD;font-style:italic\\"> Promise</span><span style=\\"color:#F8F8F2\\">.</span><span style=\\"color:#50FA7B\\">reject</span><span style=\\"color:#F8F8F2\\">(error);</span></span>\\n<span class=\\"line\\"><span style=\\"color:#F8F8F2\\">            }</span></span>\\n<span class=\\"line\\"><span style=\\"color:#F8F8F2\\">        );</span></span>\\n<span class=\\"line\\"><span style=\\"color:#F8F8F2\\">    }</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color:#50FA7B\\">    request</span><span style=\\"color:#F8F8F2\\">&lt;</span><span style=\\"color:#FFB86C;font-style:italic\\">T</span><span style=\\"color:#FF79C6\\"> =</span><span style=\\"color:#8BE9FD;font-style:italic\\"> any</span><span style=\\"color:#F8F8F2\\">&gt;(</span><span style=\\"color:#FFB86C;font-style:italic\\">config</span><span style=\\"color:#FF79C6\\">:</span><span style=\\"color:#8BE9FD;font-style:italic\\"> AxiosRequestConfig</span><span style=\\"color:#F8F8F2\\">)</span><span style=\\"color:#FF79C6\\">:</span><span style=\\"color:#8BE9FD;font-style:italic\\"> Promise</span><span style=\\"color:#F8F8F2\\">&lt;</span><span style=\\"color:#FFB86C;font-style:italic\\">ResponseModel</span><span style=\\"color:#F8F8F2\\">&lt;</span><span style=\\"color:#FFB86C;font-style:italic\\">T</span><span style=\\"color:#F8F8F2\\">&gt;&gt; {</span></span>\\n<span class=\\"line\\"><span style=\\"color:#6272A4\\">        /**</span></span>\\n<span class=\\"line\\"><span style=\\"color:#6272A4\\">         * TODO: execute other methods according to config</span></span>\\n<span class=\\"line\\"><span style=\\"color:#6272A4\\">         */</span></span>\\n<span class=\\"line\\"><span style=\\"color:#FF79C6\\">        return</span><span style=\\"color:#FF79C6;font-weight:bold\\"> new</span><span style=\\"color:#8BE9FD;font-style:italic\\"> Promise</span><span style=\\"color:#F8F8F2\\">((</span><span style=\\"color:#FFB86C;font-style:italic\\">resolve</span><span style=\\"color:#F8F8F2\\">, </span><span style=\\"color:#FFB86C;font-style:italic\\">reject</span><span style=\\"color:#F8F8F2\\">) </span><span style=\\"color:#FF79C6\\">=&gt;</span><span style=\\"color:#F8F8F2\\"> {</span></span>\\n<span class=\\"line\\"><span style=\\"color:#FF79C6\\">            try</span><span style=\\"color:#F8F8F2\\"> {</span></span>\\n<span class=\\"line\\"><span style=\\"color:#BD93F9;font-style:italic\\">                this</span><span style=\\"color:#F8F8F2\\">.service.</span><span style=\\"color:#50FA7B\\">request</span><span style=\\"color:#F8F8F2\\">&lt;</span><span style=\\"color:#FFB86C;font-style:italic\\">ResponseModel</span><span style=\\"color:#F8F8F2\\">&lt;</span><span style=\\"color:#FFB86C;font-style:italic\\">T</span><span style=\\"color:#F8F8F2\\">&gt;&gt;(config)</span></span>\\n<span class=\\"line\\"><span style=\\"color:#F8F8F2\\">                    .</span><span style=\\"color:#50FA7B\\">then</span><span style=\\"color:#F8F8F2\\">((</span><span style=\\"color:#FFB86C;font-style:italic\\">res</span><span style=\\"color:#FF79C6\\">:</span><span style=\\"color:#8BE9FD;font-style:italic\\"> AxiosResponse</span><span style=\\"color:#F8F8F2\\">[</span><span style=\\"color:#E9F284\\">'</span><span style=\\"color:#F1FA8C\\">data</span><span style=\\"color:#E9F284\\">'</span><span style=\\"color:#F8F8F2\\">]) </span><span style=\\"color:#FF79C6\\">=&gt;</span><span style=\\"color:#F8F8F2\\"> {</span></span>\\n<span class=\\"line\\"><span style=\\"color:#50FA7B\\">                        resolve</span><span style=\\"color:#F8F8F2\\">(res </span><span style=\\"color:#FF79C6\\">as</span><span style=\\"color:#8BE9FD;font-style:italic\\"> ResponseModel</span><span style=\\"color:#F8F8F2\\">&lt;</span><span style=\\"color:#FFB86C;font-style:italic\\">T</span><span style=\\"color:#F8F8F2\\">&gt;);</span></span>\\n<span class=\\"line\\"><span style=\\"color:#F8F8F2\\">                    })</span></span>\\n<span class=\\"line\\"><span style=\\"color:#F8F8F2\\">                    .</span><span style=\\"color:#50FA7B\\">catch</span><span style=\\"color:#F8F8F2\\">((</span><span style=\\"color:#FFB86C;font-style:italic\\">err</span><span style=\\"color:#F8F8F2\\">) </span><span style=\\"color:#FF79C6\\">=&gt;</span><span style=\\"color:#F8F8F2\\"> {</span></span>\\n<span class=\\"line\\"><span style=\\"color:#50FA7B\\">                        reject</span><span style=\\"color:#F8F8F2\\">(err)</span></span>\\n<span class=\\"line\\"><span style=\\"color:#F8F8F2\\">                    })</span></span>\\n<span class=\\"line\\"><span style=\\"color:#F8F8F2\\">            } </span><span style=\\"color:#FF79C6\\">catch</span><span style=\\"color:#F8F8F2\\"> (err) {</span></span>\\n<span class=\\"line\\"><span style=\\"color:#FF79C6\\">                return</span><span style=\\"color:#8BE9FD;font-style:italic\\"> Promise</span><span style=\\"color:#F8F8F2\\">.</span><span style=\\"color:#50FA7B\\">reject</span><span style=\\"color:#F8F8F2\\">(err)</span></span>\\n<span class=\\"line\\"><span style=\\"color:#F8F8F2\\">            }</span></span>\\n<span class=\\"line\\"><span style=\\"color:#F8F8F2\\">        })</span></span>\\n<span class=\\"line\\"><span style=\\"color:#F8F8F2\\">    }</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color:#50FA7B\\">    get</span><span style=\\"color:#F8F8F2\\">&lt;</span><span style=\\"color:#FFB86C;font-style:italic\\">T</span><span style=\\"color:#FF79C6\\"> =</span><span style=\\"color:#8BE9FD;font-style:italic\\"> any</span><span style=\\"color:#F8F8F2\\">&gt;(</span><span style=\\"color:#FFB86C;font-style:italic\\">config</span><span style=\\"color:#FF79C6\\">:</span><span style=\\"color:#8BE9FD;font-style:italic\\"> AxiosRequestConfig</span><span style=\\"color:#F8F8F2\\">)</span><span style=\\"color:#FF79C6\\">:</span><span style=\\"color:#8BE9FD;font-style:italic\\"> Promise</span><span style=\\"color:#F8F8F2\\">&lt;</span><span style=\\"color:#FFB86C;font-style:italic\\">ResponseModel</span><span style=\\"color:#F8F8F2\\">&lt;</span><span style=\\"color:#FFB86C;font-style:italic\\">T</span><span style=\\"color:#F8F8F2\\">&gt;&gt; {</span></span>\\n<span class=\\"line\\"><span style=\\"color:#FF79C6\\">        return</span><span style=\\"color:#BD93F9;font-style:italic\\"> this</span><span style=\\"color:#F8F8F2\\">.</span><span style=\\"color:#50FA7B\\">request</span><span style=\\"color:#F8F8F2\\">({ method</span><span style=\\"color:#FF79C6\\">:</span><span style=\\"color:#E9F284\\"> '</span><span style=\\"color:#F1FA8C\\">GET</span><span style=\\"color:#E9F284\\">'</span><span style=\\"color:#F8F8F2\\">, </span><span style=\\"color:#FF79C6\\">...</span><span style=\\"color:#F8F8F2\\">config })</span></span>\\n<span class=\\"line\\"><span style=\\"color:#F8F8F2\\">    }</span></span>\\n<span class=\\"line\\"><span style=\\"color:#50FA7B\\">    post</span><span style=\\"color:#F8F8F2\\">&lt;</span><span style=\\"color:#FFB86C;font-style:italic\\">T</span><span style=\\"color:#FF79C6\\"> =</span><span style=\\"color:#8BE9FD;font-style:italic\\"> any</span><span style=\\"color:#F8F8F2\\">&gt;(</span><span style=\\"color:#FFB86C;font-style:italic\\">config</span><span style=\\"color:#FF79C6\\">:</span><span style=\\"color:#8BE9FD;font-style:italic\\"> AxiosRequestConfig</span><span style=\\"color:#F8F8F2\\">)</span><span style=\\"color:#FF79C6\\">:</span><span style=\\"color:#8BE9FD;font-style:italic\\"> Promise</span><span style=\\"color:#F8F8F2\\">&lt;</span><span style=\\"color:#FFB86C;font-style:italic\\">ResponseModel</span><span style=\\"color:#F8F8F2\\">&lt;</span><span style=\\"color:#FFB86C;font-style:italic\\">T</span><span style=\\"color:#F8F8F2\\">&gt;&gt; {</span></span>\\n<span class=\\"line\\"><span style=\\"color:#FF79C6\\">        return</span><span style=\\"color:#BD93F9;font-style:italic\\"> this</span><span style=\\"color:#F8F8F2\\">.</span><span style=\\"color:#50FA7B\\">request</span><span style=\\"color:#F8F8F2\\">({ method</span><span style=\\"color:#FF79C6\\">:</span><span style=\\"color:#E9F284\\"> '</span><span style=\\"color:#F1FA8C\\">POST</span><span style=\\"color:#E9F284\\">'</span><span style=\\"color:#F8F8F2\\">, </span><span style=\\"color:#FF79C6\\">...</span><span style=\\"color:#F8F8F2\\">config })</span></span>\\n<span class=\\"line\\"><span style=\\"color:#F8F8F2\\">    }</span></span>\\n<span class=\\"line\\"><span style=\\"color:#50FA7B\\">    put</span><span style=\\"color:#F8F8F2\\">&lt;</span><span style=\\"color:#FFB86C;font-style:italic\\">T</span><span style=\\"color:#FF79C6\\"> =</span><span style=\\"color:#8BE9FD;font-style:italic\\"> any</span><span style=\\"color:#F8F8F2\\">&gt;(</span><span style=\\"color:#FFB86C;font-style:italic\\">config</span><span style=\\"color:#FF79C6\\">:</span><span style=\\"color:#8BE9FD;font-style:italic\\"> AxiosRequestConfig</span><span style=\\"color:#F8F8F2\\">)</span><span style=\\"color:#FF79C6\\">:</span><span style=\\"color:#8BE9FD;font-style:italic\\"> Promise</span><span style=\\"color:#F8F8F2\\">&lt;</span><span style=\\"color:#FFB86C;font-style:italic\\">ResponseModel</span><span style=\\"color:#F8F8F2\\">&lt;</span><span style=\\"color:#FFB86C;font-style:italic\\">T</span><span style=\\"color:#F8F8F2\\">&gt;&gt; {</span></span>\\n<span class=\\"line\\"><span style=\\"color:#FF79C6\\">        return</span><span style=\\"color:#BD93F9;font-style:italic\\"> this</span><span style=\\"color:#F8F8F2\\">.</span><span style=\\"color:#50FA7B\\">request</span><span style=\\"color:#F8F8F2\\">({ method</span><span style=\\"color:#FF79C6\\">:</span><span style=\\"color:#E9F284\\"> '</span><span style=\\"color:#F1FA8C\\">PUT</span><span style=\\"color:#E9F284\\">'</span><span style=\\"color:#F8F8F2\\">, </span><span style=\\"color:#FF79C6\\">...</span><span style=\\"color:#F8F8F2\\">config })</span></span>\\n<span class=\\"line\\"><span style=\\"color:#F8F8F2\\">    }</span></span>\\n<span class=\\"line\\"><span style=\\"color:#50FA7B\\">    delete</span><span style=\\"color:#F8F8F2\\">&lt;</span><span style=\\"color:#FFB86C;font-style:italic\\">T</span><span style=\\"color:#FF79C6\\"> =</span><span style=\\"color:#8BE9FD;font-style:italic\\"> any</span><span style=\\"color:#F8F8F2\\">&gt;(</span><span style=\\"color:#FFB86C;font-style:italic\\">config</span><span style=\\"color:#FF79C6\\">:</span><span style=\\"color:#8BE9FD;font-style:italic\\"> AxiosRequestConfig</span><span style=\\"color:#F8F8F2\\">)</span><span style=\\"color:#FF79C6\\">:</span><span style=\\"color:#8BE9FD;font-style:italic\\"> Promise</span><span style=\\"color:#F8F8F2\\">&lt;</span><span style=\\"color:#FFB86C;font-style:italic\\">ResponseModel</span><span style=\\"color:#F8F8F2\\">&lt;</span><span style=\\"color:#FFB86C;font-style:italic\\">T</span><span style=\\"color:#F8F8F2\\">&gt;&gt; {</span></span>\\n<span class=\\"line\\"><span style=\\"color:#FF79C6\\">        return</span><span style=\\"color:#BD93F9;font-style:italic\\"> this</span><span style=\\"color:#F8F8F2\\">.</span><span style=\\"color:#50FA7B\\">request</span><span style=\\"color:#F8F8F2\\">({ method</span><span style=\\"color:#FF79C6\\">:</span><span style=\\"color:#E9F284\\"> '</span><span style=\\"color:#F1FA8C\\">DELETE</span><span style=\\"color:#E9F284\\">'</span><span style=\\"color:#F8F8F2\\">, </span><span style=\\"color:#FF79C6\\">...</span><span style=\\"color:#F8F8F2\\">config })</span></span>\\n<span class=\\"line\\"><span style=\\"color:#F8F8F2\\">    }</span></span>\\n<span class=\\"line\\"><span style=\\"color:#50FA7B\\">    upload</span><span style=\\"color:#F8F8F2\\">&lt;</span><span style=\\"color:#FFB86C;font-style:italic\\">T</span><span style=\\"color:#FF79C6\\"> =</span><span style=\\"color:#8BE9FD;font-style:italic\\"> string</span><span style=\\"color:#F8F8F2\\">&gt;(</span><span style=\\"color:#FFB86C;font-style:italic\\">fileItem</span><span style=\\"color:#FF79C6\\">:</span><span style=\\"color:#8BE9FD;font-style:italic\\"> UploadFileItemModel</span><span style=\\"color:#F8F8F2\\">, </span><span style=\\"color:#FFB86C;font-style:italic\\">config</span><span style=\\"color:#FF79C6\\">?:</span><span style=\\"color:#8BE9FD;font-style:italic\\"> UploadRequestConfig</span><span style=\\"color:#F8F8F2\\">)</span><span style=\\"color:#FF79C6\\">:</span><span style=\\"color:#8BE9FD;font-style:italic\\"> Promise</span><span style=\\"color:#F8F8F2\\">&lt;</span><span style=\\"color:#FFB86C;font-style:italic\\">ResponseModel</span><span style=\\"color:#F8F8F2\\">&lt;</span><span style=\\"color:#FFB86C;font-style:italic\\">T</span><span style=\\"color:#F8F8F2\\">&gt;&gt; </span><span style=\\"color:#FF79C6\\">|</span><span style=\\"color:#8BE9FD;font-style:italic\\"> null</span><span style=\\"color:#F8F8F2\\"> {</span></span>\\n<span class=\\"line\\"><span style=\\"color:#FF79C6\\">        if</span><span style=\\"color:#F8F8F2\\"> (</span><span style=\\"color:#FF79C6\\">!import</span><span style=\\"color:#F8F8F2\\">.meta.env.</span><span style=\\"color:#BD93F9\\">VITE_UPLOAD_URL</span><span style=\\"color:#F8F8F2\\">) </span><span style=\\"color:#FF79C6\\">return</span><span style=\\"color:#BD93F9\\"> null</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color:#FF79C6\\">        let</span><span style=\\"color:#F8F8F2\\"> fd </span><span style=\\"color:#FF79C6\\">=</span><span style=\\"color:#FF79C6;font-weight:bold\\"> new</span><span style=\\"color:#50FA7B\\"> FormData</span><span style=\\"color:#F8F8F2\\">()</span></span>\\n<span class=\\"line\\"><span style=\\"color:#F8F8F2\\">        fd.</span><span style=\\"color:#50FA7B\\">append</span><span style=\\"color:#F8F8F2\\">(fileItem.name, fileItem.value)</span></span>\\n<span class=\\"line\\"><span style=\\"color:#FF79C6\\">        let</span><span style=\\"color:#F8F8F2\\"> configCopy</span><span style=\\"color:#FF79C6\\">:</span><span style=\\"color:#8BE9FD;font-style:italic\\"> UploadRequestConfig</span></span>\\n<span class=\\"line\\"><span style=\\"color:#FF79C6\\">        if</span><span style=\\"color:#F8F8F2\\"> (</span><span style=\\"color:#FF79C6\\">!</span><span style=\\"color:#F8F8F2\\">config) {</span></span>\\n<span class=\\"line\\"><span style=\\"color:#F8F8F2\\">            configCopy </span><span style=\\"color:#FF79C6\\">=</span><span style=\\"color:#F8F8F2\\"> {</span></span>\\n<span class=\\"line\\"><span style=\\"color:#F8F8F2\\">                headers</span><span style=\\"color:#FF79C6\\">:</span><span style=\\"color:#F8F8F2\\"> {</span></span>\\n<span class=\\"line\\"><span style=\\"color:#E9F284\\">                    '</span><span style=\\"color:#F1FA8C\\">Content-Type</span><span style=\\"color:#E9F284\\">'</span><span style=\\"color:#FF79C6\\">:</span><span style=\\"color:#E9F284\\"> '</span><span style=\\"color:#F1FA8C\\">multipart/form-data</span><span style=\\"color:#E9F284\\">'</span></span>\\n<span class=\\"line\\"><span style=\\"color:#F8F8F2\\">                }</span></span>\\n<span class=\\"line\\"><span style=\\"color:#F8F8F2\\">            }</span></span>\\n<span class=\\"line\\"><span style=\\"color:#F8F8F2\\">        } </span><span style=\\"color:#FF79C6\\">else</span><span style=\\"color:#F8F8F2\\"> {</span></span>\\n<span class=\\"line\\"><span style=\\"color:#F8F8F2\\">            config.headers</span><span style=\\"color:#FF79C6\\">!</span><span style=\\"color:#F8F8F2\\">[</span><span style=\\"color:#E9F284\\">'</span><span style=\\"color:#F1FA8C\\">Content-Type</span><span style=\\"color:#E9F284\\">'</span><span style=\\"color:#F8F8F2\\">] </span><span style=\\"color:#FF79C6\\">=</span><span style=\\"color:#E9F284\\"> '</span><span style=\\"color:#F1FA8C\\">multipart/form-data</span><span style=\\"color:#E9F284\\">'</span></span>\\n<span class=\\"line\\"><span style=\\"color:#F8F8F2\\">            configCopy </span><span style=\\"color:#FF79C6\\">=</span><span style=\\"color:#F8F8F2\\"> config</span></span>\\n<span class=\\"line\\"><span style=\\"color:#F8F8F2\\">        }</span></span>\\n<span class=\\"line\\"><span style=\\"color:#FF79C6\\">        return</span><span style=\\"color:#BD93F9;font-style:italic\\"> this</span><span style=\\"color:#F8F8F2\\">.</span><span style=\\"color:#50FA7B\\">request</span><span style=\\"color:#F8F8F2\\">({ url</span><span style=\\"color:#FF79C6\\">:</span><span style=\\"color:#FF79C6\\"> import</span><span style=\\"color:#F8F8F2\\">.meta.env.</span><span style=\\"color:#BD93F9\\">VITE_UPLOAD_URL</span><span style=\\"color:#F8F8F2\\">, data</span><span style=\\"color:#FF79C6\\">:</span><span style=\\"color:#F8F8F2\\"> fd, </span><span style=\\"color:#FF79C6\\">...</span><span style=\\"color:#F8F8F2\\">configCopy })</span></span>\\n<span class=\\"line\\"><span style=\\"color:#F8F8F2\\">    }</span></span>\\n<span class=\\"line\\"><span style=\\"color:#F8F8F2\\">}</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color:#FF79C6\\">const</span><span style=\\"color:#F8F8F2\\"> httpRequest </span><span style=\\"color:#FF79C6\\">=</span><span style=\\"color:#FF79C6;font-weight:bold\\"> new</span><span style=\\"color:#50FA7B\\"> HttpRequest</span><span style=\\"color:#F8F8F2\\">()</span></span>\\n<span class=\\"line\\"><span style=\\"color:#FF79C6\\">export</span><span style=\\"color:#FF79C6\\"> default</span><span style=\\"color:#F8F8F2\\"> httpRequest;</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}`);export{t as comp,r as data};
