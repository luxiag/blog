import{_ as e,c as a,a as n,o as l}from"./app-CtGKufpx.js";const t="/assets/20230618191644-PmmOfK1_.png",o={};function p(r,s){return l(),a("div",null,s[0]||(s[0]=[n(`<h2 id="use-method" tabindex="-1"><a class="header-anchor" href="#use-method"><span>Use Method</span></a></h2><p>utilization: as a percent over a time interval. eg, &quot;one disk is running at 90% utilization&quot;. saturation: as a queue length. eg, &quot;the CPUs have an average run queue length of four&quot;. errors: scalar counts. eg, &quot;this network interface has had fifty late collisions&quot;.</p><h2 id="apm-性能指标" tabindex="-1"><a class="header-anchor" href="#apm-性能指标"><span>APM 性能指标</span></a></h2><p>Application performance monitoring guide</p><h2 id="qps-tps" tabindex="-1"><a class="header-anchor" href="#qps-tps"><span>QPS &amp; TPS</span></a></h2><h2 id="rt-concurrency" tabindex="-1"><a class="header-anchor" href="#rt-concurrency"><span>RT &amp; Concurrency</span></a></h2><h2 id="crafana-graphite" tabindex="-1"><a class="header-anchor" href="#crafana-graphite"><span>Crafana + Graphite</span></a></h2><h2 id="gauges-counter-sets" tabindex="-1"><a class="header-anchor" href="#gauges-counter-sets"><span>Gauges Counter Sets</span></a></h2><h2 id="alinode" tabindex="-1"><a class="header-anchor" href="#alinode"><span>Alinode</span></a></h2><h2 id="网络部署架构" tabindex="-1"><a class="header-anchor" href="#网络部署架构"><span>网络部署架构</span></a></h2><h2 id="负载均衡" tabindex="-1"><a class="header-anchor" href="#负载均衡"><span>负载均衡</span></a></h2><p>https://aws.amazon.com/cn/what-is/load-balancing/</p><h3 id="进程负载均衡和-rpc-负载均衡" tabindex="-1"><a class="header-anchor" href="#进程负载均衡和-rpc-负载均衡"><span>进程负载均衡和 RPC 负载均衡</span></a></h3><h3 id="rpc-调用原理" tabindex="-1"><a class="header-anchor" href="#rpc-调用原理"><span>RPC 调用原理</span></a></h3><h3 id="服务负载均衡-集群-cluster" tabindex="-1"><a class="header-anchor" href="#服务负载均衡-集群-cluster"><span>服务负载均衡 集群 cluster</span></a></h3><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> cluster </span><span style="color:#FF79C6;">=</span><span style="color:#50FA7B;"> require</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">cluster</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> http </span><span style="color:#FF79C6;">=</span><span style="color:#50FA7B;"> require</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">http</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> numCPUs </span><span style="color:#FF79C6;">=</span><span style="color:#50FA7B;"> require</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">os</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">).</span><span style="color:#50FA7B;">cpus</span><span style="color:#F8F8F2;">().length;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">if</span><span style="color:#F8F8F2;">(cluster.isMater) {</span></span>
<span class="line"><span style="color:#FF79C6;">    for</span><span style="color:#F8F8F2;"> (</span><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> i</span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;">0</span><span style="color:#F8F8F2;">;i</span><span style="color:#FF79C6;">&lt;</span><span style="color:#F8F8F2;">numCPUs;i</span><span style="color:#FF79C6;">++</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">        cluster.</span><span style="color:#50FA7B;">fork</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">    cluster.</span><span style="color:#50FA7B;">on</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">exit</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">,(</span><span style="color:#FFB86C;font-style:italic;">work</span><span style="color:#F8F8F2;">,</span><span style="color:#FFB86C;font-style:italic;">code</span><span style="color:#F8F8F2;">,</span><span style="color:#FFB86C;font-style:italic;">signal</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">    })</span></span>
<span class="line"><span style="color:#F8F8F2;">}ele {</span></span>
<span class="line"><span style="color:#F8F8F2;">    http.</span><span style="color:#50FA7B;">createServe</span><span style="color:#F8F8F2;">((</span><span style="color:#FFB86C;font-style:italic;">req</span><span style="color:#F8F8F2;">,</span><span style="color:#FFB86C;font-style:italic;">res</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">    })</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="共享端口、时序图、进程间通信" tabindex="-1"><a class="header-anchor" href="#共享端口、时序图、进程间通信"><span>共享端口、时序图、进程间通信</span></a></h4><h3 id="分布式-rpc-负载均衡" tabindex="-1"><a class="header-anchor" href="#分布式-rpc-负载均衡"><span>分布式 RPC 负载均衡</span></a></h3><h3 id="负载均衡算法-round-robin、weighted-round-robin、source-ip-hash" tabindex="-1"><a class="header-anchor" href="#负载均衡算法-round-robin、weighted-round-robin、source-ip-hash"><span>负载均衡算法： Round Robin、Weighted Round Robin、Source IP hash</span></a></h3><h3 id="布隆过滤器" tabindex="-1"><a class="header-anchor" href="#布隆过滤器"><span>布隆过滤器</span></a></h3><h2 id="nodejs-优雅退出" tabindex="-1"><a class="header-anchor" href="#nodejs-优雅退出"><span>Nodejs 优雅退出</span></a></h2><h3 id="graceful-exit-的概念" tabindex="-1"><a class="header-anchor" href="#graceful-exit-的概念"><span>Graceful exit 的概念</span></a></h3><p>优雅退出</p><h3 id="灰度发布机制-health-check" tabindex="-1"><a class="header-anchor" href="#灰度发布机制-health-check"><span>灰度发布机制 （health check）</span></a></h3><p>灰度发布和金丝雀</p><p>金丝雀滚动发布</p><p>负债均衡+金丝雀发布</p><p>蓝绿发布</p><p>功能开关发布</p><p>LB 发布</p><p>健康检查 health check</p><p>pm2 的启动流程</p><p>守护进程（deamon process）</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> { spawn } </span><span style="color:#FF79C6;">=</span><span style="color:#50FA7B;"> require</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">child_process</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> subprocess </span><span style="color:#FF79C6;">=</span><span style="color:#50FA7B;"> spawn</span><span style="color:#F8F8F2;">(process.argv[</span><span style="color:#BD93F9;">0</span><span style="color:#F8F8F2;">], [</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">child_program.jss</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">], {</span></span>
<span class="line"><span style="color:#F8F8F2;">  detached</span><span style="color:#FF79C6;">:</span><span style="color:#BD93F9;"> true</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">  stdio</span><span style="color:#FF79C6;">:</span><span style="color:#E9F284;"> &quot;</span><span style="color:#F1FA8C;">ignore</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">subprocess.</span><span style="color:#50FA7B;">unref</span><span style="color:#F8F8F2;">();</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>pm2 的 cluster mode</p><figure><img src="`+t+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>egg.js为什么不使用pm2</p>',37)]))}const c=e(o,[["render",p],["__file","apm.html.vue"]]),d=JSON.parse('{"path":"/nodejs/apm.html","title":"NodeJS的APM系统","lang":"en-US","frontmatter":{"title":"NodeJS的APM系统","description":"Use Method utilization: as a percent over a time interval. eg, \\"one disk is running at 90% utilization\\". saturation: as a queue length. eg, \\"the CPUs have an average run queue l...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/nodejs/apm.html"}],["meta",{"property":"og:title","content":"NodeJS的APM系统"}],["meta",{"property":"og:description","content":"Use Method utilization: as a percent over a time interval. eg, \\"one disk is running at 90% utilization\\". saturation: as a queue length. eg, \\"the CPUs have an average run queue l..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2023-06-21T03:33:01.000Z"}],["meta",{"property":"article:modified_time","content":"2023-06-21T03:33:01.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"NodeJS的APM系统\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-06-21T03:33:01.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"luxiag\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"Use Method","slug":"use-method","link":"#use-method","children":[]},{"level":2,"title":"APM 性能指标","slug":"apm-性能指标","link":"#apm-性能指标","children":[]},{"level":2,"title":"QPS & TPS","slug":"qps-tps","link":"#qps-tps","children":[]},{"level":2,"title":"RT & Concurrency","slug":"rt-concurrency","link":"#rt-concurrency","children":[]},{"level":2,"title":"Crafana + Graphite","slug":"crafana-graphite","link":"#crafana-graphite","children":[]},{"level":2,"title":"Gauges Counter Sets","slug":"gauges-counter-sets","link":"#gauges-counter-sets","children":[]},{"level":2,"title":"Alinode","slug":"alinode","link":"#alinode","children":[]},{"level":2,"title":"网络部署架构","slug":"网络部署架构","link":"#网络部署架构","children":[]},{"level":2,"title":"负载均衡","slug":"负载均衡","link":"#负载均衡","children":[{"level":3,"title":"进程负载均衡和 RPC 负载均衡","slug":"进程负载均衡和-rpc-负载均衡","link":"#进程负载均衡和-rpc-负载均衡","children":[]},{"level":3,"title":"RPC 调用原理","slug":"rpc-调用原理","link":"#rpc-调用原理","children":[]},{"level":3,"title":"服务负载均衡 集群 cluster","slug":"服务负载均衡-集群-cluster","link":"#服务负载均衡-集群-cluster","children":[]},{"level":3,"title":"分布式 RPC 负载均衡","slug":"分布式-rpc-负载均衡","link":"#分布式-rpc-负载均衡","children":[]},{"level":3,"title":"负载均衡算法： Round Robin、Weighted Round Robin、Source IP hash","slug":"负载均衡算法-round-robin、weighted-round-robin、source-ip-hash","link":"#负载均衡算法-round-robin、weighted-round-robin、source-ip-hash","children":[]},{"level":3,"title":"布隆过滤器","slug":"布隆过滤器","link":"#布隆过滤器","children":[]}]},{"level":2,"title":"Nodejs 优雅退出","slug":"nodejs-优雅退出","link":"#nodejs-优雅退出","children":[{"level":3,"title":"Graceful exit 的概念","slug":"graceful-exit-的概念","link":"#graceful-exit-的概念","children":[]},{"level":3,"title":"灰度发布机制 （health check）","slug":"灰度发布机制-health-check","link":"#灰度发布机制-health-check","children":[]}]}],"git":{"createdTime":1729609128000,"updatedTime":1687318381000,"contributors":[{"name":"luxiag","email":"luxiag@qq.com","commits":2},{"name":"卢祥","email":"example@qq.com","commits":1}]},"readingTime":{"minutes":0.98,"words":293},"filePathRelative":"nodejs/apm.md","localizedDate":"October 22, 2024","excerpt":"<h2>Use Method</h2>\\n<p>utilization: as a percent over a time interval. eg, \\"one disk is running at 90% utilization\\".\\nsaturation: as a queue length. eg, \\"the CPUs have an average run queue length of four\\".\\nerrors: scalar counts. eg, \\"this network interface has had fifty late collisions\\".</p>","autoDesc":true}');export{c as comp,d as data};
