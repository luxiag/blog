import{_ as n,c as a,a as l,o as e}from"./app-DwrwhhBt.js";const p="/blog/assets/3426491733559038890-T3vc67tU.png",o={};function F(c,s){return e(),a("div",null,s[0]||(s[0]=[l(`<div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> state </span><span style="color:#FF79C6;">=</span><span style="color:#50FA7B;"> reactive</span><span style="color:#F8F8F2;">({</span></span>
<span class="line"><span style="color:#F8F8F2;">  name</span><span style="color:#FF79C6;">:</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">黎明</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">  age</span><span style="color:#FF79C6;">:</span><span style="color:#BD93F9;">18</span></span>
<span class="line"><span style="color:#F8F8F2;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#50FA7B;">effect</span><span style="color:#F8F8F2;">(()</span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;">{</span></span>
<span class="line"><span style="color:#6272A4;">  // 访问对象，触发get方法，收集对象的依赖</span></span>
<span class="line"><span style="color:#F8F8F2;">  console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(state.name,state.age)</span></span>
<span class="line"><span style="color:#F8F8F2;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">// 触发set方法，触发依赖函数</span></span>
<span class="line"><span style="color:#F8F8F2;">state.name </span><span style="color:#FF79C6;">=</span><span style="color:#E9F284;"> &#39;</span><span style="color:#F1FA8C;">黎明</span><span style="color:#E9F284;">&#39;</span></span>
<span class="line"><span style="color:#F8F8F2;">state.age </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> 20</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="proxy" tabindex="-1"><a class="header-anchor" href="#proxy"><span>Proxy</span></a></h1><p>Proxy 对象用于创建一个对象的代理，从而实现基本操作的拦截和自定义（如属性查找、赋值、枚举、函数调用等）。</p><div class="language-ts line-numbers-mode" data-highlighter="shiki" data-ext="ts" data-title="ts" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> handler </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#50FA7B;">  get</span><span style="color:#FF79C6;">:</span><span style="color:#FF79C6;"> function</span><span style="color:#F8F8F2;"> (</span><span style="color:#FFB86C;font-style:italic;">obj</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">prop</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#FF79C6;">    return</span><span style="color:#F8F8F2;"> prop </span><span style="color:#FF79C6;">in</span><span style="color:#F8F8F2;"> obj </span><span style="color:#FF79C6;">?</span><span style="color:#F8F8F2;"> obj[prop] </span><span style="color:#FF79C6;">:</span><span style="color:#BD93F9;"> 37</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">  },</span></span>
<span class="line"><span style="color:#F8F8F2;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> p </span><span style="color:#FF79C6;">=</span><span style="color:#FF79C6;font-weight:bold;"> new</span><span style="color:#50FA7B;"> Proxy</span><span style="color:#F8F8F2;">({}, handler);</span></span>
<span class="line"><span style="color:#F8F8F2;">p.a </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> 1</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">p.b </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> undefined</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(p.a, p.b); </span><span style="color:#6272A4;">// 1, undefined</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">c</span><span style="color:#E9F284;">&quot;</span><span style="color:#FF79C6;"> in</span><span style="color:#F8F8F2;"> p, p.c); </span><span style="color:#6272A4;">// false, 37</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="proxy-limitations" tabindex="-1"><a class="header-anchor" href="#proxy-limitations"><span><a href="https://javascript.info/proxy#proxy-limitations" target="_blank" rel="noopener noreferrer">Proxy Limitations</a></span></a></h2><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> map </span><span style="color:#FF79C6;">=</span><span style="color:#FF79C6;font-weight:bold;"> new</span><span style="color:#50FA7B;"> Map</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> proxy </span><span style="color:#FF79C6;">=</span><span style="color:#FF79C6;font-weight:bold;"> new</span><span style="color:#50FA7B;"> Proxy</span><span style="color:#F8F8F2;">(map, {});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">proxy.</span><span style="color:#50FA7B;">set</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">test</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">1</span><span style="color:#F8F8F2;">); </span><span style="color:#6272A4;">// Error</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Internally, a Map stores all data in its [[MapData]] internal slot. The proxy doesn’t have such a slot. The built-in method Map.prototype.set method tries to access the internal property this.[[MapData]], but because this=proxy, can’t find it in proxy and just fails.</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> map </span><span style="color:#FF79C6;">=</span><span style="color:#FF79C6;font-weight:bold;"> new</span><span style="color:#50FA7B;"> Map</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> proxy </span><span style="color:#FF79C6;">=</span><span style="color:#FF79C6;font-weight:bold;"> new</span><span style="color:#50FA7B;"> Proxy</span><span style="color:#F8F8F2;">(map, {</span></span>
<span class="line"><span style="color:#50FA7B;">  get</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">target</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">prop</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">receiver</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#FF79C6;">    let</span><span style="color:#F8F8F2;"> value </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> Reflect.</span><span style="color:#50FA7B;">get</span><span style="color:#F8F8F2;">(</span><span style="color:#FF79C6;">...</span><span style="color:#BD93F9;font-style:italic;">arguments</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#FF79C6;">    return</span><span style="color:#FF79C6;"> typeof</span><span style="color:#F8F8F2;"> value </span><span style="color:#FF79C6;">==</span><span style="color:#E9F284;"> &#39;</span><span style="color:#F1FA8C;">function</span><span style="color:#E9F284;">&#39;</span><span style="color:#FF79C6;"> ?</span><span style="color:#F8F8F2;"> value.</span><span style="color:#50FA7B;">bind</span><span style="color:#F8F8F2;">(target) </span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> value;</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">proxy.</span><span style="color:#50FA7B;">set</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">test</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">1</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#50FA7B;">alert</span><span style="color:#F8F8F2;">(proxy.</span><span style="color:#50FA7B;">get</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">test</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">)); </span><span style="color:#6272A4;">// 1 (works!)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-html line-numbers-mode" data-highlighter="shiki" data-ext="html" data-title="html" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">&lt;!</span><span style="color:#FF79C6;">DOCTYPE</span><span style="color:#50FA7B;font-style:italic;"> html</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">&lt;</span><span style="color:#FF79C6;">html</span><span style="color:#50FA7B;font-style:italic;"> lang</span><span style="color:#FF79C6;">=</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">en</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">&lt;</span><span style="color:#FF79C6;">head</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">  &lt;</span><span style="color:#FF79C6;">meta</span><span style="color:#50FA7B;font-style:italic;"> charset</span><span style="color:#FF79C6;">=</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">UTF-8</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">  &lt;</span><span style="color:#FF79C6;">link</span><span style="color:#50FA7B;font-style:italic;"> rel</span><span style="color:#FF79C6;">=</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">icon</span><span style="color:#E9F284;">&quot;</span><span style="color:#50FA7B;font-style:italic;"> href</span><span style="color:#FF79C6;">=</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">/favicon.ico</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">  &lt;</span><span style="color:#FF79C6;">meta</span><span style="color:#50FA7B;font-style:italic;"> name</span><span style="color:#FF79C6;">=</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">viewport</span><span style="color:#E9F284;">&quot;</span><span style="color:#50FA7B;font-style:italic;"> content</span><span style="color:#FF79C6;">=</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">width=device-width, initial-scale=1.0</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">  &lt;</span><span style="color:#FF79C6;">title</span><span style="color:#F8F8F2;">&gt;Vite App&lt;/</span><span style="color:#FF79C6;">title</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">  &lt;</span><span style="color:#FF79C6;">script</span><span style="color:#50FA7B;font-style:italic;"> src</span><span style="color:#FF79C6;">=</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">https://unpkg.com/vue@3/dist/vue.global.js</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">&gt;&lt;/</span><span style="color:#FF79C6;">script</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">&lt;/</span><span style="color:#FF79C6;">head</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">&lt;</span><span style="color:#FF79C6;">body</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">  &lt;</span><span style="color:#FF79C6;">div</span><span style="color:#50FA7B;font-style:italic;"> id</span><span style="color:#FF79C6;">=</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">app</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">    {{ state.count }}</span></span>
<span class="line"><span style="color:#F8F8F2;">  &lt;/</span><span style="color:#FF79C6;">div</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">  &lt;</span><span style="color:#FF79C6;">script</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"><span style="color:#FF79C6;">    const</span><span style="color:#F8F8F2;"> { createApp, reactive } </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> Vue</span></span>
<span class="line"><span style="color:#FF79C6;">    debugger</span></span>
<span class="line"><span style="color:#FF79C6;">    const</span><span style="color:#F8F8F2;"> state </span><span style="color:#FF79C6;">=</span><span style="color:#50FA7B;"> reactive</span><span style="color:#F8F8F2;">({</span></span>
<span class="line"><span style="color:#F8F8F2;">      count</span><span style="color:#FF79C6;">:</span><span style="color:#BD93F9;"> 0</span></span>
<span class="line"><span style="color:#F8F8F2;">    })</span></span>
<span class="line"><span style="color:#50FA7B;">    createApp</span><span style="color:#F8F8F2;">({</span></span>
<span class="line"><span style="color:#50FA7B;">      setup</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#FF79C6;">        return</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">          state</span></span>
<span class="line"><span style="color:#F8F8F2;">        }</span></span>
<span class="line"><span style="color:#F8F8F2;">      }</span></span>
<span class="line"><span style="color:#F8F8F2;">    }).</span><span style="color:#50FA7B;">mount</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">#app</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">  &lt;/</span><span style="color:#FF79C6;">script</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">&lt;/</span><span style="color:#FF79C6;">body</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">&lt;/</span><span style="color:#FF79C6;">html</span><span style="color:#F8F8F2;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="reactive" tabindex="-1"><a class="header-anchor" href="#reactive"><span>reactive</span></a></h1><div class="language-ts line-numbers-mode" data-highlighter="shiki" data-ext="ts" data-title="ts" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">function</span><span style="color:#50FA7B;"> reactive</span><span style="color:#F8F8F2;">(){</span></span>
<span class="line"><span style="color:#FF79C6;">  return</span><span style="color:#FF79C6;font-weight:bold;"> new</span><span style="color:#50FA7B;"> Proxy</span><span style="color:#F8F8F2;">(obj,{</span></span>
<span class="line"><span style="color:#50FA7B;">    get</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">target</span><span style="color:#F8F8F2;">,</span><span style="color:#FFB86C;font-style:italic;">key</span><span style="color:#F8F8F2;">){</span></span>
<span class="line"><span style="color:#6272A4;">      //收集依赖</span></span>
<span class="line"><span style="color:#50FA7B;">      track</span><span style="color:#F8F8F2;">(target,key)</span></span>
<span class="line"><span style="color:#FF79C6;">      return</span><span style="color:#F8F8F2;"> Reflect.</span><span style="color:#50FA7B;">get</span><span style="color:#F8F8F2;">(target,key)</span></span>
<span class="line"><span style="color:#F8F8F2;">    },</span></span>
<span class="line"><span style="color:#50FA7B;">    set</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">target</span><span style="color:#F8F8F2;">,</span><span style="color:#FFB86C;font-style:italic;">key</span><span style="color:#F8F8F2;">,</span><span style="color:#FFB86C;font-style:italic;">value</span><span style="color:#F8F8F2;">){</span></span>
<span class="line"><span style="color:#6272A4;">      // 触发依赖</span></span>
<span class="line"><span style="color:#50FA7B;">      trigger</span><span style="color:#F8F8F2;">(target,key,value)</span></span>
<span class="line"><span style="color:#FF79C6;">      return</span><span style="color:#F8F8F2;"> Reflect.</span><span style="color:#50FA7B;">set</span><span style="color:#F8F8F2;">(target,key,value)</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">  })</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><details class="hint-container details"><summary>reactive</summary><div class="language-ts line-numbers-mode" data-highlighter="shiki" data-ext="ts" data-title="ts" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"></span>
<span class="line"><span style="color:#6272A4;">/**</span></span>
<span class="line"><span style="color:#6272A4;"> * Returns a reactive proxy of the object.</span></span>
<span class="line"><span style="color:#6272A4;"> *</span></span>
<span class="line"><span style="color:#6272A4;"> * The reactive conversion is &quot;deep&quot;: it affects all nested properties. A</span></span>
<span class="line"><span style="color:#6272A4;"> * reactive object also deeply unwraps any properties that are refs while</span></span>
<span class="line"><span style="color:#6272A4;"> * maintaining reactivity.</span></span>
<span class="line"><span style="color:#6272A4;"> *</span></span>
<span class="line"><span style="color:#6272A4;"> * </span><span style="color:#FF79C6;">@example</span></span>
<span class="line"><span style="color:#6272A4;"> * \`\`\`js</span></span>
<span class="line"><span style="color:#6272A4;"> * const obj = reactive({ count: 0 })</span></span>
<span class="line"><span style="color:#6272A4;"> * \`\`\`</span></span>
<span class="line"><span style="color:#6272A4;"> *</span></span>
<span class="line"><span style="color:#6272A4;"> * </span><span style="color:#FF79C6;">@param</span><span style="color:#FFB86C;font-style:italic;"> target</span><span style="color:#6272A4;"> - The source object.</span></span>
<span class="line"><span style="color:#6272A4;"> * </span><span style="color:#FF79C6;">@see</span><span style="color:#8BE9FD;font-style:italic;"> {</span><span style="color:#FF79C6;">@link</span><span style="color:#FFB86C;font-style:italic;"> https://vuejs.org/api/reactivity-core.html#reactive</span><span style="color:#8BE9FD;font-style:italic;">}</span></span>
<span class="line"><span style="color:#6272A4;"> */</span></span>
<span class="line"><span style="color:#FF79C6;">export</span><span style="color:#FF79C6;"> function</span><span style="color:#50FA7B;"> reactive</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#FFB86C;font-style:italic;">T</span><span style="color:#FF79C6;"> extends</span><span style="color:#8BE9FD;font-style:italic;"> object</span><span style="color:#F8F8F2;">&gt;(</span><span style="color:#FFB86C;font-style:italic;">target</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> T</span><span style="color:#F8F8F2;">)</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> Reactive</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#FFB86C;font-style:italic;">T</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"><span style="color:#FF79C6;">export</span><span style="color:#FF79C6;"> function</span><span style="color:#50FA7B;"> reactive</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">target</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> object</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#6272A4;">  // if trying to observe a readonly proxy, return the readonly version.</span></span>
<span class="line"><span style="color:#FF79C6;">  if</span><span style="color:#F8F8F2;"> (</span><span style="color:#50FA7B;">isReadonly</span><span style="color:#F8F8F2;">(target)) {</span></span>
<span class="line"><span style="color:#FF79C6;">    return</span><span style="color:#F8F8F2;"> target</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#FF79C6;">  return</span><span style="color:#50FA7B;"> createReactiveObject</span><span style="color:#F8F8F2;">(</span></span>
<span class="line"><span style="color:#F8F8F2;">    target,</span></span>
<span class="line"><span style="color:#BD93F9;">    false</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">    mutableHandlers,</span></span>
<span class="line"><span style="color:#F8F8F2;">    mutableCollectionHandlers,</span></span>
<span class="line"><span style="color:#F8F8F2;">    reactiveMap,</span></span>
<span class="line"><span style="color:#F8F8F2;">  )</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">function</span><span style="color:#50FA7B;"> createReactiveObject</span><span style="color:#F8F8F2;">(</span></span>
<span class="line"><span style="color:#FFB86C;font-style:italic;">  target</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> Target</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#FFB86C;font-style:italic;">  isReadonly</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> boolean</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#FFB86C;font-style:italic;">  baseHandlers</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> ProxyHandler</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#8BE9FD;font-style:italic;">any</span><span style="color:#F8F8F2;">&gt;,</span></span>
<span class="line"><span style="color:#FFB86C;font-style:italic;">  collectionHandlers</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> ProxyHandler</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#8BE9FD;font-style:italic;">any</span><span style="color:#F8F8F2;">&gt;,</span></span>
<span class="line"><span style="color:#FFB86C;font-style:italic;">  proxyMap</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> WeakMap</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#FFB86C;font-style:italic;">Target</span><span style="color:#F8F8F2;">, </span><span style="color:#8BE9FD;font-style:italic;">any</span><span style="color:#F8F8F2;">&gt;,</span></span>
<span class="line"><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#FF79C6;">  if</span><span style="color:#F8F8F2;"> (</span><span style="color:#FF79C6;">!</span><span style="color:#50FA7B;">isObject</span><span style="color:#F8F8F2;">(target)) {</span></span>
<span class="line"><span style="color:#FF79C6;">    if</span><span style="color:#F8F8F2;"> (__DEV__) {</span></span>
<span class="line"><span style="color:#50FA7B;">      warn</span><span style="color:#F8F8F2;">(</span></span>
<span class="line"><span style="color:#F1FA8C;">        \`value cannot be made </span><span style="color:#FF79C6;">\${</span><span style="color:#F8F8F2;">isReadonly</span><span style="color:#FF79C6;"> ?</span><span style="color:#E9F284;"> &#39;</span><span style="color:#F1FA8C;">readonly</span><span style="color:#E9F284;">&#39;</span><span style="color:#FF79C6;"> :</span><span style="color:#E9F284;"> &#39;</span><span style="color:#F1FA8C;">reactive</span><span style="color:#E9F284;">&#39;</span><span style="color:#FF79C6;">}</span><span style="color:#F1FA8C;">: </span><span style="color:#FF79C6;">\${</span><span style="color:#50FA7B;">String</span><span style="color:#F8F8F2;">(</span></span>
<span class="line"><span style="color:#F8F8F2;">          target</span><span style="color:#F1FA8C;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">        )</span><span style="color:#FF79C6;">}</span><span style="color:#F1FA8C;">\`</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">      )</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#FF79C6;">    return</span><span style="color:#F8F8F2;"> target</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#6272A4;">  // target is already a Proxy, return it.</span></span>
<span class="line"><span style="color:#6272A4;">  // exception: calling readonly() on a reactive object</span></span>
<span class="line"><span style="color:#FF79C6;">  if</span><span style="color:#F8F8F2;"> (</span></span>
<span class="line"><span style="color:#F8F8F2;">    target[ReactiveFlags.</span><span style="color:#BD93F9;">RAW</span><span style="color:#F8F8F2;">] </span><span style="color:#FF79C6;">&amp;&amp;</span></span>
<span class="line"><span style="color:#FF79C6;">    !</span><span style="color:#F8F8F2;">(isReadonly </span><span style="color:#FF79C6;">&amp;&amp;</span><span style="color:#F8F8F2;"> target[ReactiveFlags.</span><span style="color:#BD93F9;">IS_REACTIVE</span><span style="color:#F8F8F2;">])</span></span>
<span class="line"><span style="color:#F8F8F2;">  ) {</span></span>
<span class="line"><span style="color:#FF79C6;">    return</span><span style="color:#F8F8F2;"> target</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#6272A4;">  // target already has corresponding Proxy</span></span>
<span class="line"><span style="color:#FF79C6;">  const</span><span style="color:#F8F8F2;"> existingProxy </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> proxyMap.</span><span style="color:#50FA7B;">get</span><span style="color:#F8F8F2;">(target)</span></span>
<span class="line"><span style="color:#FF79C6;">  if</span><span style="color:#F8F8F2;"> (existingProxy) {</span></span>
<span class="line"><span style="color:#FF79C6;">    return</span><span style="color:#F8F8F2;"> existingProxy</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#6272A4;">  // only specific value types can be observed.</span></span>
<span class="line"><span style="color:#FF79C6;">  const</span><span style="color:#F8F8F2;"> targetType </span><span style="color:#FF79C6;">=</span><span style="color:#50FA7B;"> getTargetType</span><span style="color:#F8F8F2;">(target)</span></span>
<span class="line"><span style="color:#FF79C6;">  if</span><span style="color:#F8F8F2;"> (targetType </span><span style="color:#FF79C6;">===</span><span style="color:#F8F8F2;"> TargetType.</span><span style="color:#BD93F9;">INVALID</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#FF79C6;">    return</span><span style="color:#F8F8F2;"> target</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#FF79C6;">  const</span><span style="color:#F8F8F2;"> proxy </span><span style="color:#FF79C6;">=</span><span style="color:#FF79C6;font-weight:bold;"> new</span><span style="color:#50FA7B;"> Proxy</span><span style="color:#F8F8F2;">(</span></span>
<span class="line"><span style="color:#F8F8F2;">    target,</span></span>
<span class="line"><span style="color:#F8F8F2;">    targetType </span><span style="color:#FF79C6;">===</span><span style="color:#F8F8F2;"> TargetType.</span><span style="color:#BD93F9;">COLLECTION</span><span style="color:#FF79C6;"> ?</span><span style="color:#F8F8F2;"> collectionHandlers </span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> baseHandlers,</span></span>
<span class="line"><span style="color:#F8F8F2;">  )</span></span>
<span class="line"><span style="color:#F8F8F2;">  proxyMap.</span><span style="color:#50FA7B;">set</span><span style="color:#F8F8F2;">(target, proxy)</span></span>
<span class="line"><span style="color:#FF79C6;">  return</span><span style="color:#F8F8F2;"> proxy</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">export</span><span style="color:#FF79C6;"> const</span><span style="color:#F8F8F2;"> reactiveMap</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> WeakMap</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#FFB86C;font-style:italic;">Target</span><span style="color:#F8F8F2;">, </span><span style="color:#8BE9FD;font-style:italic;">any</span><span style="color:#F8F8F2;">&gt; </span><span style="color:#FF79C6;">=</span><span style="color:#FF79C6;font-weight:bold;"> new</span><span style="color:#50FA7B;"> WeakMap</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#FFB86C;font-style:italic;">Target</span><span style="color:#F8F8F2;">, </span><span style="color:#8BE9FD;font-style:italic;">any</span><span style="color:#F8F8F2;">&gt;()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">enum</span><span style="color:#8BE9FD;font-style:italic;"> TargetType</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  INVALID </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> 0</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">  COMMON </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> 1</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">  COLLECTION </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> 2</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">function</span><span style="color:#50FA7B;"> targetTypeMap</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">rawType</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> string</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#FF79C6;">  switch</span><span style="color:#F8F8F2;"> (rawType) {</span></span>
<span class="line"><span style="color:#FF79C6;">    case</span><span style="color:#E9F284;"> &#39;</span><span style="color:#F1FA8C;">Object</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#FF79C6;">    case</span><span style="color:#E9F284;"> &#39;</span><span style="color:#F1FA8C;">Array</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#FF79C6;">      return</span><span style="color:#F8F8F2;"> TargetType.</span><span style="color:#BD93F9;">COMMON</span></span>
<span class="line"><span style="color:#FF79C6;">    case</span><span style="color:#E9F284;"> &#39;</span><span style="color:#F1FA8C;">Map</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#FF79C6;">    case</span><span style="color:#E9F284;"> &#39;</span><span style="color:#F1FA8C;">Set</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#FF79C6;">    case</span><span style="color:#E9F284;"> &#39;</span><span style="color:#F1FA8C;">WeakMap</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#FF79C6;">    case</span><span style="color:#E9F284;"> &#39;</span><span style="color:#F1FA8C;">WeakSet</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#FF79C6;">      return</span><span style="color:#F8F8F2;"> TargetType.</span><span style="color:#BD93F9;">COLLECTION</span></span>
<span class="line"><span style="color:#FF79C6;">    default</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#FF79C6;">      return</span><span style="color:#F8F8F2;"> TargetType.</span><span style="color:#BD93F9;">INVALID</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h2 id="handler" tabindex="-1"><a class="header-anchor" href="#handler"><span>handler</span></a></h2><div class="language-ts line-numbers-mode" data-highlighter="shiki" data-ext="ts" data-title="ts" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;font-weight:bold;">new</span><span style="color:#50FA7B;"> Proxy</span><span style="color:#F8F8F2;">(target, handler)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>如果是<code>Map</code>,<code>Set</code>,<code>WeakMap</code>,<code>WeakSet</code>使用<code>collectionHandlers</code>，否则使用<code>baseHandlers</code></p><h3 id="basehandlers" tabindex="-1"><a class="header-anchor" href="#basehandlers"><span>baseHandlers</span></a></h3><p>代理对象是<code>object</code>,<code>Array</code>类型</p><div class="language-ts line-numbers-mode" data-highlighter="shiki" data-ext="ts" data-title="ts" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> baseHandlers</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> ProxyHandler</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#8BE9FD;font-style:italic;">object</span><span style="color:#F8F8F2;">&gt; </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#50FA7B;">  get</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">target</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> Target</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">key</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> string</span><span style="color:#FF79C6;"> |</span><span style="color:#8BE9FD;font-style:italic;"> symbol</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">receiver</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> object</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#FF79C6;">      const</span><span style="color:#F8F8F2;"> targetIsArray </span><span style="color:#FF79C6;">=</span><span style="color:#50FA7B;"> isArray</span><span style="color:#F8F8F2;">(target)</span></span>
<span class="line"><span style="color:#6272A4;">      // 如果是数组就返回数组的实例方法</span></span>
<span class="line"><span style="color:#FF79C6;">      if</span><span style="color:#F8F8F2;">(targetIsArray) {</span></span>
<span class="line"><span style="color:#6272A4;">        // arrayInstrumentations</span></span>
<span class="line"><span style="color:#6272A4;">        /*</span></span>
<span class="line"><span style="color:#6272A4;">        { </span></span>
<span class="line"><span style="color:#6272A4;">           every(</span></span>
<span class="line"><span style="color:#6272A4;">              fn: (item: unknown, index: number, array: unknown[]) =&gt; unknown,</span></span>
<span class="line"><span style="color:#6272A4;">              thisArg?: unknown,</span></span>
<span class="line"><span style="color:#6272A4;">            ) {</span></span>
<span class="line"><span style="color:#6272A4;">              return apply(this, &#39;every&#39;, fn, thisArg, undefined, arguments)</span></span>
<span class="line"><span style="color:#6272A4;">            },</span></span>
<span class="line"><span style="color:#6272A4;">            //。。。</span></span>
<span class="line"><span style="color:#6272A4;">         }</span></span>
<span class="line"><span style="color:#6272A4;">        */</span><span style="color:#F8F8F2;"> </span></span>
<span class="line"><span style="color:#FF79C6;">        return</span><span style="color:#F8F8F2;"> arrayInstrumentations[key]</span></span>
<span class="line"><span style="color:#F8F8F2;">      }</span></span>
<span class="line"><span style="color:#FF79C6;">      const</span><span style="color:#F8F8F2;"> res </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> Reflect.</span><span style="color:#50FA7B;">get</span><span style="color:#F8F8F2;">(</span></span>
<span class="line"><span style="color:#F8F8F2;">        target,</span></span>
<span class="line"><span style="color:#F8F8F2;">        key,</span></span>
<span class="line"><span style="color:#6272A4;">        // if this is a proxy wrapping a ref, return methods using the raw ref</span></span>
<span class="line"><span style="color:#6272A4;">        // as receiver so that we don&#39;t have to call \`toRaw\` on the ref in all</span></span>
<span class="line"><span style="color:#6272A4;">        // its class methods</span></span>
<span class="line"><span style="color:#50FA7B;">        isRef</span><span style="color:#F8F8F2;">(target) </span><span style="color:#FF79C6;">?</span><span style="color:#F8F8F2;"> target </span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> receiver,</span></span>
<span class="line"><span style="color:#F8F8F2;">      )</span></span>
<span class="line"><span style="color:#50FA7B;">      track</span><span style="color:#F8F8F2;">(target, </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">get</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, key)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">      return</span><span style="color:#F8F8F2;"> res</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#50FA7B;">  set</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">target</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> Target</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">key</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> string</span><span style="color:#FF79C6;"> |</span><span style="color:#8BE9FD;font-style:italic;"> symbol</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">value</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> unknown</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">receiver</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> object</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#FF79C6;">      if</span><span style="color:#F8F8F2;"> (</span><span style="color:#FF79C6;">!</span><span style="color:#F8F8F2;">hadKey) {</span></span>
<span class="line"><span style="color:#50FA7B;">        trigger</span><span style="color:#F8F8F2;">(target, TriggerOpTypes.</span><span style="color:#BD93F9;">ADD</span><span style="color:#F8F8F2;">, key, value)</span></span>
<span class="line"><span style="color:#F8F8F2;">      } </span><span style="color:#FF79C6;">else</span><span style="color:#FF79C6;"> if</span><span style="color:#F8F8F2;"> (</span><span style="color:#50FA7B;">hasChanged</span><span style="color:#F8F8F2;">(value, oldValue)) {</span></span>
<span class="line"><span style="color:#50FA7B;">        trigger</span><span style="color:#F8F8F2;">(target, TriggerOpTypes.</span><span style="color:#BD93F9;">SET</span><span style="color:#F8F8F2;">, key, value, oldValue)</span></span>
<span class="line"><span style="color:#F8F8F2;">      }    </span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#50FA7B;">  deleteProperty</span><span style="color:#F8F8F2;">(</span></span>
<span class="line"><span style="color:#FFB86C;font-style:italic;">    target</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> Record</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#8BE9FD;font-style:italic;">string</span><span style="color:#FF79C6;"> |</span><span style="color:#8BE9FD;font-style:italic;"> symbol</span><span style="color:#F8F8F2;">, </span><span style="color:#8BE9FD;font-style:italic;">unknown</span><span style="color:#F8F8F2;">&gt;,</span></span>
<span class="line"><span style="color:#FFB86C;font-style:italic;">    key</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> string</span><span style="color:#FF79C6;"> |</span><span style="color:#8BE9FD;font-style:italic;"> symbol</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">  )</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> boolean</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#FF79C6;">    const</span><span style="color:#F8F8F2;"> hadKey </span><span style="color:#FF79C6;">=</span><span style="color:#50FA7B;"> hasOwn</span><span style="color:#F8F8F2;">(target, key)</span></span>
<span class="line"><span style="color:#FF79C6;">    const</span><span style="color:#F8F8F2;"> oldValue </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> target[key]</span></span>
<span class="line"><span style="color:#FF79C6;">    const</span><span style="color:#F8F8F2;"> result </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> Reflect.</span><span style="color:#50FA7B;">deleteProperty</span><span style="color:#F8F8F2;">(target, key)</span></span>
<span class="line"><span style="color:#FF79C6;">    if</span><span style="color:#F8F8F2;"> (result </span><span style="color:#FF79C6;">&amp;&amp;</span><span style="color:#F8F8F2;"> hadKey) {</span></span>
<span class="line"><span style="color:#50FA7B;">      trigger</span><span style="color:#F8F8F2;">(target, TriggerOpTypes.</span><span style="color:#BD93F9;">DELETE</span><span style="color:#F8F8F2;">, key, </span><span style="color:#BD93F9;">undefined</span><span style="color:#F8F8F2;">, oldValue)</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#FF79C6;">    return</span><span style="color:#F8F8F2;"> result</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#50FA7B;">  has</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">target</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> Record</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#8BE9FD;font-style:italic;">string</span><span style="color:#FF79C6;"> |</span><span style="color:#8BE9FD;font-style:italic;"> symbol</span><span style="color:#F8F8F2;">, </span><span style="color:#8BE9FD;font-style:italic;">unknown</span><span style="color:#F8F8F2;">&gt;, </span><span style="color:#FFB86C;font-style:italic;">key</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> string</span><span style="color:#FF79C6;"> |</span><span style="color:#8BE9FD;font-style:italic;"> symbol</span><span style="color:#F8F8F2;">)</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> boolean</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#FF79C6;">    const</span><span style="color:#F8F8F2;"> result </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> Reflect.</span><span style="color:#50FA7B;">has</span><span style="color:#F8F8F2;">(target, key)</span></span>
<span class="line"><span style="color:#FF79C6;">    if</span><span style="color:#F8F8F2;"> (</span><span style="color:#FF79C6;">!</span><span style="color:#50FA7B;">isSymbol</span><span style="color:#F8F8F2;">(key) </span><span style="color:#FF79C6;">||</span><span style="color:#FF79C6;"> !</span><span style="color:#F8F8F2;">builtInSymbols.</span><span style="color:#50FA7B;">has</span><span style="color:#F8F8F2;">(key)) {</span></span>
<span class="line"><span style="color:#50FA7B;">      track</span><span style="color:#F8F8F2;">(target, TrackOpTypes.</span><span style="color:#BD93F9;">HAS</span><span style="color:#F8F8F2;">, key)</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#FF79C6;">    return</span><span style="color:#F8F8F2;"> result</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#50FA7B;">  ownKeys</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">target</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> Record</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#8BE9FD;font-style:italic;">string</span><span style="color:#FF79C6;"> |</span><span style="color:#8BE9FD;font-style:italic;"> symbol</span><span style="color:#F8F8F2;">, </span><span style="color:#8BE9FD;font-style:italic;">unknown</span><span style="color:#F8F8F2;">&gt;)</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> (</span><span style="color:#8BE9FD;font-style:italic;">string</span><span style="color:#FF79C6;"> |</span><span style="color:#8BE9FD;font-style:italic;"> symbol</span><span style="color:#F8F8F2;">)[] {</span></span>
<span class="line"><span style="color:#50FA7B;">    track</span><span style="color:#F8F8F2;">(</span></span>
<span class="line"><span style="color:#F8F8F2;">      target,</span></span>
<span class="line"><span style="color:#F8F8F2;">      TrackOpTypes.</span><span style="color:#BD93F9;">ITERATE</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#50FA7B;">      isArray</span><span style="color:#F8F8F2;">(target) </span><span style="color:#FF79C6;">?</span><span style="color:#E9F284;"> &#39;</span><span style="color:#F1FA8C;">length</span><span style="color:#E9F284;">&#39;</span><span style="color:#FF79C6;"> :</span><span style="color:#F8F8F2;"> ITERATE_KEY,</span></span>
<span class="line"><span style="color:#F8F8F2;">    )</span></span>
<span class="line"><span style="color:#FF79C6;">    return</span><span style="color:#F8F8F2;"> Reflect.</span><span style="color:#50FA7B;">ownKeys</span><span style="color:#F8F8F2;">(target)</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><details class="hint-container details"><summary>baseHandlers</summary><div class="language-ts line-numbers-mode" data-highlighter="shiki" data-ext="ts" data-title="ts" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"></span>
<span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> baseHandlers </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> mutableHandlers</span></span>
<span class="line"><span style="color:#FF79C6;">export</span><span style="color:#FF79C6;"> const</span><span style="color:#F8F8F2;"> mutableHandlers</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> ProxyHandler</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#8BE9FD;font-style:italic;">object</span><span style="color:#F8F8F2;">&gt; </span><span style="color:#FF79C6;">=</span></span>
<span class="line"><span style="color:#6272A4;">  /*@__PURE__*/</span><span style="color:#FF79C6;font-weight:bold;"> new</span><span style="color:#50FA7B;"> MutableReactiveHandler</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">class</span><span style="color:#8BE9FD;"> MutableReactiveHandler</span><span style="color:#FF79C6;"> extends</span><span style="color:#8BE9FD;font-style:italic;"> BaseReactiveHandler</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#FF79C6;">  constructor</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">isShallow</span><span style="color:#FF79C6;"> =</span><span style="color:#BD93F9;"> false</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#BD93F9;font-style:italic;">    super</span><span style="color:#F8F8F2;">(</span><span style="color:#BD93F9;">false</span><span style="color:#F8F8F2;">, isShallow)</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#50FA7B;">  set</span><span style="color:#F8F8F2;">(</span></span>
<span class="line"><span style="color:#FFB86C;font-style:italic;">    target</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> Record</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#8BE9FD;font-style:italic;">string</span><span style="color:#FF79C6;"> |</span><span style="color:#8BE9FD;font-style:italic;"> symbol</span><span style="color:#F8F8F2;">, </span><span style="color:#8BE9FD;font-style:italic;">unknown</span><span style="color:#F8F8F2;">&gt;,</span></span>
<span class="line"><span style="color:#FFB86C;font-style:italic;">    key</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> string</span><span style="color:#FF79C6;"> |</span><span style="color:#8BE9FD;font-style:italic;"> symbol</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#FFB86C;font-style:italic;">    value</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> unknown</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#FFB86C;font-style:italic;">    receiver</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> object</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">  )</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> boolean</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#FF79C6;">    let</span><span style="color:#F8F8F2;"> oldValue </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> target[key]</span></span>
<span class="line"><span style="color:#FF79C6;">    if</span><span style="color:#F8F8F2;"> (</span><span style="color:#FF79C6;">!</span><span style="color:#BD93F9;font-style:italic;">this</span><span style="color:#F8F8F2;">._isShallow) {</span></span>
<span class="line"><span style="color:#FF79C6;">      const</span><span style="color:#F8F8F2;"> isOldValueReadonly </span><span style="color:#FF79C6;">=</span><span style="color:#50FA7B;"> isReadonly</span><span style="color:#F8F8F2;">(oldValue)</span></span>
<span class="line"><span style="color:#FF79C6;">      if</span><span style="color:#F8F8F2;"> (</span><span style="color:#FF79C6;">!</span><span style="color:#50FA7B;">isShallow</span><span style="color:#F8F8F2;">(value) </span><span style="color:#FF79C6;">&amp;&amp;</span><span style="color:#FF79C6;"> !</span><span style="color:#50FA7B;">isReadonly</span><span style="color:#F8F8F2;">(value)) {</span></span>
<span class="line"><span style="color:#F8F8F2;">        oldValue </span><span style="color:#FF79C6;">=</span><span style="color:#50FA7B;"> toRaw</span><span style="color:#F8F8F2;">(oldValue)</span></span>
<span class="line"><span style="color:#F8F8F2;">        value </span><span style="color:#FF79C6;">=</span><span style="color:#50FA7B;"> toRaw</span><span style="color:#F8F8F2;">(value)</span></span>
<span class="line"><span style="color:#F8F8F2;">      }</span></span>
<span class="line"><span style="color:#FF79C6;">      if</span><span style="color:#F8F8F2;"> (</span><span style="color:#FF79C6;">!</span><span style="color:#50FA7B;">isArray</span><span style="color:#F8F8F2;">(target) </span><span style="color:#FF79C6;">&amp;&amp;</span><span style="color:#50FA7B;"> isRef</span><span style="color:#F8F8F2;">(oldValue) </span><span style="color:#FF79C6;">&amp;&amp;</span><span style="color:#FF79C6;"> !</span><span style="color:#50FA7B;">isRef</span><span style="color:#F8F8F2;">(value)) {</span></span>
<span class="line"><span style="color:#FF79C6;">        if</span><span style="color:#F8F8F2;"> (isOldValueReadonly) {</span></span>
<span class="line"><span style="color:#FF79C6;">          return</span><span style="color:#BD93F9;"> false</span></span>
<span class="line"><span style="color:#F8F8F2;">        } </span><span style="color:#FF79C6;">else</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">          oldValue.value </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> value</span></span>
<span class="line"><span style="color:#FF79C6;">          return</span><span style="color:#BD93F9;"> true</span></span>
<span class="line"><span style="color:#F8F8F2;">        }</span></span>
<span class="line"><span style="color:#F8F8F2;">      }</span></span>
<span class="line"><span style="color:#F8F8F2;">    } </span><span style="color:#FF79C6;">else</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#6272A4;">      // in shallow mode, objects are set as-is regardless of reactive or not</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">    const</span><span style="color:#F8F8F2;"> hadKey </span><span style="color:#FF79C6;">=</span></span>
<span class="line"><span style="color:#50FA7B;">      isArray</span><span style="color:#F8F8F2;">(target) </span><span style="color:#FF79C6;">&amp;&amp;</span><span style="color:#50FA7B;"> isIntegerKey</span><span style="color:#F8F8F2;">(key)</span></span>
<span class="line"><span style="color:#FF79C6;">        ?</span><span style="color:#50FA7B;"> Number</span><span style="color:#F8F8F2;">(key) </span><span style="color:#FF79C6;">&lt;</span><span style="color:#F8F8F2;"> target.length</span></span>
<span class="line"><span style="color:#FF79C6;">        :</span><span style="color:#50FA7B;"> hasOwn</span><span style="color:#F8F8F2;">(target, key)</span></span>
<span class="line"><span style="color:#FF79C6;">    const</span><span style="color:#F8F8F2;"> result </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> Reflect.</span><span style="color:#50FA7B;">set</span><span style="color:#F8F8F2;">(</span></span>
<span class="line"><span style="color:#F8F8F2;">      target,</span></span>
<span class="line"><span style="color:#F8F8F2;">      key,</span></span>
<span class="line"><span style="color:#F8F8F2;">      value,</span></span>
<span class="line"><span style="color:#50FA7B;">      isRef</span><span style="color:#F8F8F2;">(target) </span><span style="color:#FF79C6;">?</span><span style="color:#F8F8F2;"> target </span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> receiver,</span></span>
<span class="line"><span style="color:#F8F8F2;">    )</span></span>
<span class="line"><span style="color:#6272A4;">    // don&#39;t trigger if target is something up in the prototype chain of original</span></span>
<span class="line"><span style="color:#FF79C6;">    if</span><span style="color:#F8F8F2;"> (target </span><span style="color:#FF79C6;">===</span><span style="color:#50FA7B;"> toRaw</span><span style="color:#F8F8F2;">(receiver)) {</span></span>
<span class="line"><span style="color:#FF79C6;">      if</span><span style="color:#F8F8F2;"> (</span><span style="color:#FF79C6;">!</span><span style="color:#F8F8F2;">hadKey) {</span></span>
<span class="line"><span style="color:#50FA7B;">        trigger</span><span style="color:#F8F8F2;">(target, TriggerOpTypes.</span><span style="color:#BD93F9;">ADD</span><span style="color:#F8F8F2;">, key, value)</span></span>
<span class="line"><span style="color:#F8F8F2;">      } </span><span style="color:#FF79C6;">else</span><span style="color:#FF79C6;"> if</span><span style="color:#F8F8F2;"> (</span><span style="color:#50FA7B;">hasChanged</span><span style="color:#F8F8F2;">(value, oldValue)) {</span></span>
<span class="line"><span style="color:#50FA7B;">        trigger</span><span style="color:#F8F8F2;">(target, TriggerOpTypes.</span><span style="color:#BD93F9;">SET</span><span style="color:#F8F8F2;">, key, value, oldValue)</span></span>
<span class="line"><span style="color:#F8F8F2;">      }</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#FF79C6;">    return</span><span style="color:#F8F8F2;"> result</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#50FA7B;">  deleteProperty</span><span style="color:#F8F8F2;">(</span></span>
<span class="line"><span style="color:#FFB86C;font-style:italic;">    target</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> Record</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#8BE9FD;font-style:italic;">string</span><span style="color:#FF79C6;"> |</span><span style="color:#8BE9FD;font-style:italic;"> symbol</span><span style="color:#F8F8F2;">, </span><span style="color:#8BE9FD;font-style:italic;">unknown</span><span style="color:#F8F8F2;">&gt;,</span></span>
<span class="line"><span style="color:#FFB86C;font-style:italic;">    key</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> string</span><span style="color:#FF79C6;"> |</span><span style="color:#8BE9FD;font-style:italic;"> symbol</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">  )</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> boolean</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#FF79C6;">    const</span><span style="color:#F8F8F2;"> hadKey </span><span style="color:#FF79C6;">=</span><span style="color:#50FA7B;"> hasOwn</span><span style="color:#F8F8F2;">(target, key)</span></span>
<span class="line"><span style="color:#FF79C6;">    const</span><span style="color:#F8F8F2;"> oldValue </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> target[key]</span></span>
<span class="line"><span style="color:#FF79C6;">    const</span><span style="color:#F8F8F2;"> result </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> Reflect.</span><span style="color:#50FA7B;">deleteProperty</span><span style="color:#F8F8F2;">(target, key)</span></span>
<span class="line"><span style="color:#FF79C6;">    if</span><span style="color:#F8F8F2;"> (result </span><span style="color:#FF79C6;">&amp;&amp;</span><span style="color:#F8F8F2;"> hadKey) {</span></span>
<span class="line"><span style="color:#50FA7B;">      trigger</span><span style="color:#F8F8F2;">(target, TriggerOpTypes.</span><span style="color:#BD93F9;">DELETE</span><span style="color:#F8F8F2;">, key, </span><span style="color:#BD93F9;">undefined</span><span style="color:#F8F8F2;">, oldValue)</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#FF79C6;">    return</span><span style="color:#F8F8F2;"> result</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#50FA7B;">  has</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">target</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> Record</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#8BE9FD;font-style:italic;">string</span><span style="color:#FF79C6;"> |</span><span style="color:#8BE9FD;font-style:italic;"> symbol</span><span style="color:#F8F8F2;">, </span><span style="color:#8BE9FD;font-style:italic;">unknown</span><span style="color:#F8F8F2;">&gt;, </span><span style="color:#FFB86C;font-style:italic;">key</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> string</span><span style="color:#FF79C6;"> |</span><span style="color:#8BE9FD;font-style:italic;"> symbol</span><span style="color:#F8F8F2;">)</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> boolean</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#FF79C6;">    const</span><span style="color:#F8F8F2;"> result </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> Reflect.</span><span style="color:#50FA7B;">has</span><span style="color:#F8F8F2;">(target, key)</span></span>
<span class="line"><span style="color:#FF79C6;">    if</span><span style="color:#F8F8F2;"> (</span><span style="color:#FF79C6;">!</span><span style="color:#50FA7B;">isSymbol</span><span style="color:#F8F8F2;">(key) </span><span style="color:#FF79C6;">||</span><span style="color:#FF79C6;"> !</span><span style="color:#F8F8F2;">builtInSymbols.</span><span style="color:#50FA7B;">has</span><span style="color:#F8F8F2;">(key)) {</span></span>
<span class="line"><span style="color:#50FA7B;">      track</span><span style="color:#F8F8F2;">(target, TrackOpTypes.</span><span style="color:#BD93F9;">HAS</span><span style="color:#F8F8F2;">, key)</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#FF79C6;">    return</span><span style="color:#F8F8F2;"> result</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#50FA7B;">  ownKeys</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">target</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> Record</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#8BE9FD;font-style:italic;">string</span><span style="color:#FF79C6;"> |</span><span style="color:#8BE9FD;font-style:italic;"> symbol</span><span style="color:#F8F8F2;">, </span><span style="color:#8BE9FD;font-style:italic;">unknown</span><span style="color:#F8F8F2;">&gt;)</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> (</span><span style="color:#8BE9FD;font-style:italic;">string</span><span style="color:#FF79C6;"> |</span><span style="color:#8BE9FD;font-style:italic;"> symbol</span><span style="color:#F8F8F2;">)[] {</span></span>
<span class="line"><span style="color:#50FA7B;">    track</span><span style="color:#F8F8F2;">(</span></span>
<span class="line"><span style="color:#F8F8F2;">      target,</span></span>
<span class="line"><span style="color:#F8F8F2;">      TrackOpTypes.</span><span style="color:#BD93F9;">ITERATE</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#50FA7B;">      isArray</span><span style="color:#F8F8F2;">(target) </span><span style="color:#FF79C6;">?</span><span style="color:#E9F284;"> &#39;</span><span style="color:#F1FA8C;">length</span><span style="color:#E9F284;">&#39;</span><span style="color:#FF79C6;"> :</span><span style="color:#F8F8F2;"> ITERATE_KEY,</span></span>
<span class="line"><span style="color:#F8F8F2;">    )</span></span>
<span class="line"><span style="color:#FF79C6;">    return</span><span style="color:#F8F8F2;"> Reflect.</span><span style="color:#50FA7B;">ownKeys</span><span style="color:#F8F8F2;">(target)</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">class</span><span style="color:#8BE9FD;"> BaseReactiveHandler</span><span style="color:#FF79C6;"> implements</span><span style="color:#8BE9FD;font-style:italic;"> ProxyHandler</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#FFB86C;font-style:italic;">Target</span><span style="color:#F8F8F2;">&gt; {</span></span>
<span class="line"><span style="color:#FF79C6;">  constructor</span><span style="color:#F8F8F2;">(</span></span>
<span class="line"><span style="color:#FF79C6;">    protected</span><span style="color:#FF79C6;"> readonly</span><span style="color:#FFB86C;font-style:italic;"> _isReadonly</span><span style="color:#FF79C6;"> =</span><span style="color:#BD93F9;"> false</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#FF79C6;">    protected</span><span style="color:#FF79C6;"> readonly</span><span style="color:#FFB86C;font-style:italic;"> _isShallow</span><span style="color:#FF79C6;"> =</span><span style="color:#BD93F9;"> false</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">  ) {}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#50FA7B;">  get</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">target</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> Target</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">key</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> string</span><span style="color:#FF79C6;"> |</span><span style="color:#8BE9FD;font-style:italic;"> symbol</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">receiver</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> object</span><span style="color:#F8F8F2;">)</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> any</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#FF79C6;">    const</span><span style="color:#F8F8F2;"> isReadonly </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;font-style:italic;"> this</span><span style="color:#F8F8F2;">._isReadonly,</span></span>
<span class="line"><span style="color:#F8F8F2;">      isShallow </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;font-style:italic;"> this</span><span style="color:#F8F8F2;">._isShallow</span></span>
<span class="line"><span style="color:#FF79C6;">    if</span><span style="color:#F8F8F2;"> (key </span><span style="color:#FF79C6;">===</span><span style="color:#F8F8F2;"> ReactiveFlags.</span><span style="color:#BD93F9;">IS_REACTIVE</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#FF79C6;">      return</span><span style="color:#FF79C6;"> !</span><span style="color:#F8F8F2;">isReadonly</span></span>
<span class="line"><span style="color:#F8F8F2;">    } </span><span style="color:#FF79C6;">else</span><span style="color:#FF79C6;"> if</span><span style="color:#F8F8F2;"> (key </span><span style="color:#FF79C6;">===</span><span style="color:#F8F8F2;"> ReactiveFlags.</span><span style="color:#BD93F9;">IS_READONLY</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#FF79C6;">      return</span><span style="color:#F8F8F2;"> isReadonly</span></span>
<span class="line"><span style="color:#F8F8F2;">    } </span><span style="color:#FF79C6;">else</span><span style="color:#FF79C6;"> if</span><span style="color:#F8F8F2;"> (key </span><span style="color:#FF79C6;">===</span><span style="color:#F8F8F2;"> ReactiveFlags.</span><span style="color:#BD93F9;">IS_SHALLOW</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#FF79C6;">      return</span><span style="color:#F8F8F2;"> isShallow</span></span>
<span class="line"><span style="color:#F8F8F2;">    } </span><span style="color:#FF79C6;">else</span><span style="color:#FF79C6;"> if</span><span style="color:#F8F8F2;"> (key </span><span style="color:#FF79C6;">===</span><span style="color:#F8F8F2;"> ReactiveFlags.</span><span style="color:#BD93F9;">RAW</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#FF79C6;">      if</span><span style="color:#F8F8F2;"> (</span></span>
<span class="line"><span style="color:#F8F8F2;">        receiver </span><span style="color:#FF79C6;">===</span></span>
<span class="line"><span style="color:#F8F8F2;">          (isReadonly</span></span>
<span class="line"><span style="color:#FF79C6;">            ?</span><span style="color:#F8F8F2;"> isShallow</span></span>
<span class="line"><span style="color:#FF79C6;">              ?</span><span style="color:#F8F8F2;"> shallowReadonlyMap</span></span>
<span class="line"><span style="color:#FF79C6;">              :</span><span style="color:#F8F8F2;"> readonlyMap</span></span>
<span class="line"><span style="color:#FF79C6;">            :</span><span style="color:#F8F8F2;"> isShallow</span></span>
<span class="line"><span style="color:#FF79C6;">              ?</span><span style="color:#F8F8F2;"> shallowReactiveMap</span></span>
<span class="line"><span style="color:#FF79C6;">              :</span><span style="color:#F8F8F2;"> reactiveMap</span></span>
<span class="line"><span style="color:#F8F8F2;">          ).</span><span style="color:#50FA7B;">get</span><span style="color:#F8F8F2;">(target) </span><span style="color:#FF79C6;">||</span></span>
<span class="line"><span style="color:#6272A4;">        // receiver is not the reactive proxy, but has the same prototype</span></span>
<span class="line"><span style="color:#6272A4;">        // this means the receiver is a user proxy of the reactive proxy</span></span>
<span class="line"><span style="color:#F8F8F2;">        Object.</span><span style="color:#50FA7B;">getPrototypeOf</span><span style="color:#F8F8F2;">(target) </span><span style="color:#FF79C6;">===</span><span style="color:#F8F8F2;"> Object.</span><span style="color:#50FA7B;">getPrototypeOf</span><span style="color:#F8F8F2;">(receiver)</span></span>
<span class="line"><span style="color:#F8F8F2;">      ) {</span></span>
<span class="line"><span style="color:#FF79C6;">        return</span><span style="color:#F8F8F2;"> target</span></span>
<span class="line"><span style="color:#F8F8F2;">      }</span></span>
<span class="line"><span style="color:#6272A4;">      // early return undefined</span></span>
<span class="line"><span style="color:#FF79C6;">      return</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">    const</span><span style="color:#F8F8F2;"> targetIsArray </span><span style="color:#FF79C6;">=</span><span style="color:#50FA7B;"> isArray</span><span style="color:#F8F8F2;">(target)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">    if</span><span style="color:#F8F8F2;"> (</span><span style="color:#FF79C6;">!</span><span style="color:#F8F8F2;">isReadonly) {</span></span>
<span class="line"><span style="color:#FF79C6;">      let</span><span style="color:#50FA7B;"> fn</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> Function</span><span style="color:#FF79C6;"> |</span><span style="color:#8BE9FD;font-style:italic;"> undefined</span></span>
<span class="line"><span style="color:#FF79C6;">      if</span><span style="color:#F8F8F2;"> (targetIsArray </span><span style="color:#FF79C6;">&amp;&amp;</span><span style="color:#F8F8F2;"> (fn </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> arrayInstrumentations[key])) {</span></span>
<span class="line"><span style="color:#FF79C6;">        return</span><span style="color:#F8F8F2;"> fn</span></span>
<span class="line"><span style="color:#F8F8F2;">      }</span></span>
<span class="line"><span style="color:#FF79C6;">      if</span><span style="color:#F8F8F2;"> (key </span><span style="color:#FF79C6;">===</span><span style="color:#E9F284;"> &#39;</span><span style="color:#F1FA8C;">hasOwnProperty</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#FF79C6;">        return</span><span style="color:#F8F8F2;"> hasOwnProperty</span></span>
<span class="line"><span style="color:#F8F8F2;">      }</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">    const</span><span style="color:#F8F8F2;"> res </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> Reflect.</span><span style="color:#50FA7B;">get</span><span style="color:#F8F8F2;">(</span></span>
<span class="line"><span style="color:#F8F8F2;">      target,</span></span>
<span class="line"><span style="color:#F8F8F2;">      key,</span></span>
<span class="line"><span style="color:#6272A4;">      // if this is a proxy wrapping a ref, return methods using the raw ref</span></span>
<span class="line"><span style="color:#6272A4;">      // as receiver so that we don&#39;t have to call \`toRaw\` on the ref in all</span></span>
<span class="line"><span style="color:#6272A4;">      // its class methods</span></span>
<span class="line"><span style="color:#50FA7B;">      isRef</span><span style="color:#F8F8F2;">(target) </span><span style="color:#FF79C6;">?</span><span style="color:#F8F8F2;"> target </span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> receiver,</span></span>
<span class="line"><span style="color:#F8F8F2;">    )</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">    if</span><span style="color:#F8F8F2;"> (</span><span style="color:#50FA7B;">isSymbol</span><span style="color:#F8F8F2;">(key) </span><span style="color:#FF79C6;">?</span><span style="color:#F8F8F2;"> builtInSymbols.</span><span style="color:#50FA7B;">has</span><span style="color:#F8F8F2;">(key) </span><span style="color:#FF79C6;">:</span><span style="color:#50FA7B;"> isNonTrackableKeys</span><span style="color:#F8F8F2;">(key)) {</span></span>
<span class="line"><span style="color:#FF79C6;">      return</span><span style="color:#F8F8F2;"> res</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">    if</span><span style="color:#F8F8F2;"> (</span><span style="color:#FF79C6;">!</span><span style="color:#F8F8F2;">isReadonly) {</span></span>
<span class="line"><span style="color:#50FA7B;">      track</span><span style="color:#F8F8F2;">(target, TrackOpTypes.</span><span style="color:#BD93F9;">GET</span><span style="color:#F8F8F2;">, key)</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">    if</span><span style="color:#F8F8F2;"> (isShallow) {</span></span>
<span class="line"><span style="color:#FF79C6;">      return</span><span style="color:#F8F8F2;"> res</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">    if</span><span style="color:#F8F8F2;"> (</span><span style="color:#50FA7B;">isRef</span><span style="color:#F8F8F2;">(res)) {</span></span>
<span class="line"><span style="color:#6272A4;">      // ref unwrapping - skip unwrap for Array + integer key.</span></span>
<span class="line"><span style="color:#FF79C6;">      return</span><span style="color:#F8F8F2;"> targetIsArray </span><span style="color:#FF79C6;">&amp;&amp;</span><span style="color:#50FA7B;"> isIntegerKey</span><span style="color:#F8F8F2;">(key) </span><span style="color:#FF79C6;">?</span><span style="color:#F8F8F2;"> res </span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> res.value</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">    if</span><span style="color:#F8F8F2;"> (</span><span style="color:#50FA7B;">isObject</span><span style="color:#F8F8F2;">(res)) {</span></span>
<span class="line"><span style="color:#6272A4;">      // Convert returned value into a proxy as well. we do the isObject check</span></span>
<span class="line"><span style="color:#6272A4;">      // here to avoid invalid value warning. Also need to lazy access readonly</span></span>
<span class="line"><span style="color:#6272A4;">      // and reactive here to avoid circular dependency.</span></span>
<span class="line"><span style="color:#FF79C6;">      return</span><span style="color:#F8F8F2;"> isReadonly </span><span style="color:#FF79C6;">?</span><span style="color:#50FA7B;"> readonly</span><span style="color:#F8F8F2;">(res) </span><span style="color:#FF79C6;">:</span><span style="color:#50FA7B;"> reactive</span><span style="color:#F8F8F2;">(res)</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">    return</span><span style="color:#F8F8F2;"> res</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h3 id="collectionhandlers" tabindex="-1"><a class="header-anchor" href="#collectionhandlers"><span>collectionHandlers</span></a></h3><p><code>Map</code>,<code>Set</code>,<code>WeakMap</code>,<code>WeakSet</code></p><p>集合类型的数据通过劫持原始数据的 get 行为绕过了 Proxy 的缺陷问题 劫持操作，一般都是获取原始数据然后获取原型方法，然后将 this 指向原始数据，再调用相关方法 对于查询操作，插入收集依赖的逻辑，然后返回响应式数据 对于修改操作，插入监听逻辑 对于迭代操作，插入收集依赖的逻辑，迭代过程中将数据转换成响应式的数据</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> collectionHandlers </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#50FA7B;">  get</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">target</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">key</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">receiver</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#6272A4;">    //proxy 局限性 Map,Set等无法直接使用set</span></span>
<span class="line"><span style="color:#FF79C6;">    return</span><span style="color:#F8F8F2;"> Reflect.</span><span style="color:#50FA7B;">get</span><span style="color:#F8F8F2;">(</span><span style="color:#50FA7B;">hasOwn</span><span style="color:#F8F8F2;">(instrumentations,key) </span><span style="color:#FF79C6;">&amp;&amp;</span><span style="color:#F8F8F2;"> key </span><span style="color:#FF79C6;">in</span><span style="color:#F8F8F2;"> target </span><span style="color:#FF79C6;">?</span><span style="color:#F8F8F2;"> instrumentations </span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;">target,key,receiver)</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> instrumentations </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#50FA7B;">  get</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">target</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">key</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">receiver</span><span style="color:#F8F8F2;">) { </span></span>
<span class="line"><span style="color:#50FA7B;">    track</span><span style="color:#F8F8F2;">(target,get,key)</span></span>
<span class="line"><span style="color:#FF79C6;">    return</span><span style="color:#50FA7B;"> wrap</span><span style="color:#F8F8F2;">(target.</span><span style="color:#50FA7B;">get</span><span style="color:#F8F8F2;">(key))</span></span>
<span class="line"><span style="color:#F8F8F2;">  },</span></span>
<span class="line"><span style="color:#50FA7B;">  size</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">target</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#50FA7B;">    track</span><span style="color:#F8F8F2;">(target,</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">iterate</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">,</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">Object iterate</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#FF79C6;">    return</span><span style="color:#F8F8F2;"> Reflect.</span><span style="color:#50FA7B;">get</span><span style="color:#F8F8F2;">(target,</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">size</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">,target)</span></span>
<span class="line"><span style="color:#F8F8F2;">  },</span></span>
<span class="line"><span style="color:#50FA7B;">  has</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">target</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">key</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#50FA7B;">    track</span><span style="color:#F8F8F2;">(target,</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">has</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">,key)</span></span>
<span class="line"><span style="color:#FF79C6;">    return</span><span style="color:#F8F8F2;"> target.</span><span style="color:#50FA7B;">has</span><span style="color:#F8F8F2;">(key)</span></span>
<span class="line"><span style="color:#F8F8F2;">  },</span></span>
<span class="line"><span style="color:#6272A4;">  // set</span></span>
<span class="line"><span style="color:#50FA7B;">  add</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">target</span><span style="color:#F8F8F2;">,</span><span style="color:#FFB86C;font-style:italic;">value</span><span style="color:#F8F8F2;">){</span></span>
<span class="line"><span style="color:#FF79C6;">    if</span><span style="color:#F8F8F2;">(</span><span style="color:#FF79C6;">!</span><span style="color:#F8F8F2;">haskey) {</span></span>
<span class="line"><span style="color:#F8F8F2;">      target.</span><span style="color:#50FA7B;">add</span><span style="color:#F8F8F2;">(value)</span></span>
<span class="line"><span style="color:#50FA7B;">      trigger</span><span style="color:#F8F8F2;">(target,</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">add</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">,key,value)</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#FF79C6;">    return</span><span style="color:#F8F8F2;"> target</span></span>
<span class="line"><span style="color:#F8F8F2;">  },</span></span>
<span class="line"><span style="color:#6272A4;">  // Map类型</span></span>
<span class="line"><span style="color:#50FA7B;">  set</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">target</span><span style="color:#F8F8F2;">,</span><span style="color:#FFB86C;font-style:italic;">key</span><span style="color:#F8F8F2;">,</span><span style="color:#FFB86C;font-style:italic;">value</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#FF79C6;">    if</span><span style="color:#F8F8F2;">(</span><span style="color:#FF79C6;">!</span><span style="color:#F8F8F2;">hasKey){</span></span>
<span class="line"><span style="color:#50FA7B;">      trigger</span><span style="color:#F8F8F2;">(target,</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">add</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">,key,value)</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span><span style="color:#FF79C6;">else</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#50FA7B;">      trigger</span><span style="color:#F8F8F2;">(target,</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">set</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">,key,value)</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#FF79C6;">    return</span><span style="color:#F8F8F2;"> target</span></span>
<span class="line"><span style="color:#F8F8F2;">  },</span></span>
<span class="line"><span style="color:#50FA7B;">  delete</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">target</span><span style="color:#F8F8F2;">,</span><span style="color:#FFB86C;font-style:italic;">key</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#FF79C6;">    const</span><span style="color:#F8F8F2;"> result </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> target.</span><span style="color:#50FA7B;">delete</span><span style="color:#F8F8F2;">(key)</span></span>
<span class="line"><span style="color:#FF79C6;">    return</span><span style="color:#F8F8F2;"> result</span></span>
<span class="line"><span style="color:#F8F8F2;">  },</span></span>
<span class="line"><span style="color:#50FA7B;">  clear</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">target</span><span style="color:#F8F8F2;">){</span></span>
<span class="line"><span style="color:#FF79C6;">    const</span><span style="color:#F8F8F2;"> result </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> target.</span><span style="color:#50FA7B;">clear</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"><span style="color:#FF79C6;">    if</span><span style="color:#F8F8F2;">(hadItem){</span></span>
<span class="line"><span style="color:#50FA7B;">      trigger</span><span style="color:#F8F8F2;">(target,</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">clear</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#FF79C6;">    return</span><span style="color:#F8F8F2;"> result</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#F8F8F2;">[</span></span>
<span class="line"><span style="color:#E9F284;">   &#39;</span><span style="color:#F1FA8C;">keys</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#E9F284;">   &#39;</span><span style="color:#F1FA8C;">values</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#E9F284;">   &#39;</span><span style="color:#F1FA8C;">entries</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">   Symbol.iterator,</span></span>
<span class="line"><span style="color:#F8F8F2;">].</span><span style="color:#50FA7B;">forEach</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">method</span><span style="color:#FF79C6;"> =&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  collectionHandlers[method] </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> ()</span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#6272A4;">    // 返回一个迭代器</span></span>
<span class="line"><span style="color:#FF79C6;">    const</span><span style="color:#F8F8F2;"> isPair </span><span style="color:#FF79C6;">=</span></span>
<span class="line"><span style="color:#F8F8F2;">      method </span><span style="color:#FF79C6;">===</span><span style="color:#E9F284;"> &#39;</span><span style="color:#F1FA8C;">entries</span><span style="color:#E9F284;">&#39;</span><span style="color:#FF79C6;"> ||</span><span style="color:#F8F8F2;"> (method </span><span style="color:#FF79C6;">===</span><span style="color:#F8F8F2;"> Symbol.iterator </span><span style="color:#FF79C6;">&amp;&amp;</span><span style="color:#F8F8F2;"> targetIsMap)</span></span>
<span class="line"><span style="color:#FF79C6;">    return</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#50FA7B;">      next</span><span style="color:#F8F8F2;">(){</span></span>
<span class="line"><span style="color:#FF79C6;">        const</span><span style="color:#F8F8F2;"> {value,done} </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> innerIterator.</span><span style="color:#50FA7B;">next</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"><span style="color:#FF79C6;">        return</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">          value</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;">  isPair </span><span style="color:#FF79C6;">?</span><span style="color:#F8F8F2;"> [</span><span style="color:#50FA7B;">wrap</span><span style="color:#F8F8F2;">(value[</span><span style="color:#BD93F9;">0</span><span style="color:#F8F8F2;">]), </span><span style="color:#50FA7B;">wrap</span><span style="color:#F8F8F2;">(value[</span><span style="color:#BD93F9;">1</span><span style="color:#F8F8F2;">])] </span><span style="color:#FF79C6;">:</span><span style="color:#50FA7B;"> wrap</span><span style="color:#F8F8F2;">(value),</span></span>
<span class="line"><span style="color:#F8F8F2;">          done</span></span>
<span class="line"><span style="color:#F8F8F2;">        }</span></span>
<span class="line"><span style="color:#F8F8F2;">      },</span></span>
<span class="line"><span style="color:#F8F8F2;">      [Symbol.iterator](){</span></span>
<span class="line"><span style="color:#FF79C6;">        return</span><span style="color:#BD93F9;font-style:italic;"> this</span></span>
<span class="line"><span style="color:#F8F8F2;">      }</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">})</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><details class="hint-container details"><summary>collectionHandlers</summary><div class="language-ts line-numbers-mode" data-highlighter="shiki" data-ext="ts" data-title="ts" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> collectionHanders </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> readonlyCollectionHandlers</span></span>
<span class="line"><span style="color:#FF79C6;">export</span><span style="color:#FF79C6;"> const</span><span style="color:#F8F8F2;"> readonlyCollectionHandlers</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> ProxyHandler</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#FFB86C;font-style:italic;">CollectionTypes</span><span style="color:#F8F8F2;">&gt; </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  get</span><span style="color:#FF79C6;">:</span><span style="color:#6272A4;"> /*@__PURE__*/</span><span style="color:#50FA7B;"> createInstrumentationGetter</span><span style="color:#F8F8F2;">(</span><span style="color:#BD93F9;">true</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">false</span><span style="color:#F8F8F2;">),</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">function</span><span style="color:#50FA7B;"> createInstrumentationGetter</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">isReadonly</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> boolean</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">shallow</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> boolean</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#FF79C6;">  const</span><span style="color:#F8F8F2;"> instrumentations </span><span style="color:#FF79C6;">=</span><span style="color:#50FA7B;"> createInstrumentations</span><span style="color:#F8F8F2;">(isReadonly, shallow)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">  return</span><span style="color:#F8F8F2;"> (</span></span>
<span class="line"><span style="color:#FFB86C;font-style:italic;">    target</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> CollectionTypes</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#FFB86C;font-style:italic;">    key</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> string</span><span style="color:#FF79C6;"> |</span><span style="color:#8BE9FD;font-style:italic;"> symbol</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#FFB86C;font-style:italic;">    receiver</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> CollectionTypes</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">  ) </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#FF79C6;">    if</span><span style="color:#F8F8F2;"> (key </span><span style="color:#FF79C6;">===</span><span style="color:#F8F8F2;"> ReactiveFlags.</span><span style="color:#BD93F9;">IS_REACTIVE</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#FF79C6;">      return</span><span style="color:#FF79C6;"> !</span><span style="color:#F8F8F2;">isReadonly</span></span>
<span class="line"><span style="color:#F8F8F2;">    } </span><span style="color:#FF79C6;">else</span><span style="color:#FF79C6;"> if</span><span style="color:#F8F8F2;"> (key </span><span style="color:#FF79C6;">===</span><span style="color:#F8F8F2;"> ReactiveFlags.</span><span style="color:#BD93F9;">IS_READONLY</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#FF79C6;">      return</span><span style="color:#F8F8F2;"> isReadonly</span></span>
<span class="line"><span style="color:#F8F8F2;">    } </span><span style="color:#FF79C6;">else</span><span style="color:#FF79C6;"> if</span><span style="color:#F8F8F2;"> (key </span><span style="color:#FF79C6;">===</span><span style="color:#F8F8F2;"> ReactiveFlags.</span><span style="color:#BD93F9;">RAW</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#FF79C6;">      return</span><span style="color:#F8F8F2;"> target</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">    return</span><span style="color:#F8F8F2;"> Reflect.</span><span style="color:#50FA7B;">get</span><span style="color:#F8F8F2;">(</span></span>
<span class="line"><span style="color:#50FA7B;">      hasOwn</span><span style="color:#F8F8F2;">(instrumentations, key) </span><span style="color:#FF79C6;">&amp;&amp;</span><span style="color:#F8F8F2;"> key </span><span style="color:#FF79C6;">in</span><span style="color:#F8F8F2;"> target</span></span>
<span class="line"><span style="color:#FF79C6;">        ?</span><span style="color:#F8F8F2;"> instrumentations</span></span>
<span class="line"><span style="color:#FF79C6;">        :</span><span style="color:#F8F8F2;"> target,</span></span>
<span class="line"><span style="color:#F8F8F2;">      key,</span></span>
<span class="line"><span style="color:#F8F8F2;">      receiver,</span></span>
<span class="line"><span style="color:#F8F8F2;">    )</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#FF79C6;">function</span><span style="color:#50FA7B;"> createInstrumentations</span><span style="color:#F8F8F2;">(</span></span>
<span class="line"><span style="color:#FFB86C;font-style:italic;">  readonly</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> boolean</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#FFB86C;font-style:italic;">  shallow</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> boolean</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">)</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> Instrumentations</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#FF79C6;">  const</span><span style="color:#F8F8F2;"> instrumentations</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> Instrumentations</span><span style="color:#FF79C6;"> =</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#6272A4;">    /**</span></span>
<span class="line"><span style="color:#6272A4;">    首先获取原始的 target 数据 value 和 key</span></span>
<span class="line"><span style="color:#6272A4;">    如果 key 也是响应式数据的话，对 key 进行依赖收集</span></span>
<span class="line"><span style="color:#6272A4;">    对数据进行响应是处理并返回处理后的数据(即 Reactive 对象)   </span></span>
<span class="line"><span style="color:#6272A4;">     */</span><span style="color:#F8F8F2;">    </span></span>
<span class="line"><span style="color:#50FA7B;">    get</span><span style="color:#F8F8F2;">(</span><span style="color:#BD93F9;font-style:italic;">this</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> MapTypes</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">key</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> unknown</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#6272A4;">      // #1772: readonly(reactive(Map)) should return readonly + reactive version</span></span>
<span class="line"><span style="color:#6272A4;">      // of the value</span></span>
<span class="line"><span style="color:#FF79C6;">      const</span><span style="color:#F8F8F2;"> target </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;font-style:italic;"> this</span><span style="color:#F8F8F2;">[ReactiveFlags.</span><span style="color:#BD93F9;">RAW</span><span style="color:#F8F8F2;">]</span></span>
<span class="line"><span style="color:#6272A4;">      //  //获取原始的key，这里是因为Map中也可以使用对象作为key，所以对象也可能是响应式的</span></span>
<span class="line"><span style="color:#FF79C6;">      const</span><span style="color:#F8F8F2;"> rawTarget </span><span style="color:#FF79C6;">=</span><span style="color:#50FA7B;"> toRaw</span><span style="color:#F8F8F2;">(target)</span></span>
<span class="line"><span style="color:#FF79C6;">      const</span><span style="color:#F8F8F2;"> rawKey </span><span style="color:#FF79C6;">=</span><span style="color:#50FA7B;"> toRaw</span><span style="color:#F8F8F2;">(key)</span></span>
<span class="line"><span style="color:#FF79C6;">      if</span><span style="color:#F8F8F2;"> (</span><span style="color:#FF79C6;">!</span><span style="color:#F8F8F2;">readonly) {</span></span>
<span class="line"><span style="color:#FF79C6;">        if</span><span style="color:#F8F8F2;"> (</span><span style="color:#50FA7B;">hasChanged</span><span style="color:#F8F8F2;">(key, rawKey)) {</span></span>
<span class="line"><span style="color:#50FA7B;">          track</span><span style="color:#F8F8F2;">(rawTarget, TrackOpTypes.</span><span style="color:#BD93F9;">GET</span><span style="color:#F8F8F2;">, key)</span></span>
<span class="line"><span style="color:#F8F8F2;">        }</span></span>
<span class="line"><span style="color:#50FA7B;">        track</span><span style="color:#F8F8F2;">(rawTarget, TrackOpTypes.</span><span style="color:#BD93F9;">GET</span><span style="color:#F8F8F2;">, rawKey)</span></span>
<span class="line"><span style="color:#F8F8F2;">      }</span></span>
<span class="line"><span style="color:#FF79C6;">      const</span><span style="color:#F8F8F2;"> { has } </span><span style="color:#FF79C6;">=</span><span style="color:#50FA7B;"> getProto</span><span style="color:#F8F8F2;">(rawTarget)</span></span>
<span class="line"><span style="color:#FF79C6;">      const</span><span style="color:#F8F8F2;"> wrap </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> shallow </span><span style="color:#FF79C6;">?</span><span style="color:#F8F8F2;"> toShallow </span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> readonly </span><span style="color:#FF79C6;">?</span><span style="color:#F8F8F2;"> toReadonly </span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> toReactive</span></span>
<span class="line"><span style="color:#FF79C6;">      if</span><span style="color:#F8F8F2;"> (has.</span><span style="color:#50FA7B;">call</span><span style="color:#F8F8F2;">(rawTarget, key)) {</span></span>
<span class="line"><span style="color:#FF79C6;">        return</span><span style="color:#50FA7B;"> wrap</span><span style="color:#F8F8F2;">(target.</span><span style="color:#50FA7B;">get</span><span style="color:#F8F8F2;">(key))</span></span>
<span class="line"><span style="color:#F8F8F2;">      } </span><span style="color:#FF79C6;">else</span><span style="color:#FF79C6;"> if</span><span style="color:#F8F8F2;"> (has.</span><span style="color:#50FA7B;">call</span><span style="color:#F8F8F2;">(rawTarget, rawKey)) {</span></span>
<span class="line"><span style="color:#FF79C6;">        return</span><span style="color:#50FA7B;"> wrap</span><span style="color:#F8F8F2;">(target.</span><span style="color:#50FA7B;">get</span><span style="color:#F8F8F2;">(rawKey))</span></span>
<span class="line"><span style="color:#F8F8F2;">      } </span><span style="color:#FF79C6;">else</span><span style="color:#FF79C6;"> if</span><span style="color:#F8F8F2;"> (target </span><span style="color:#FF79C6;">!==</span><span style="color:#F8F8F2;"> rawTarget) {</span></span>
<span class="line"><span style="color:#6272A4;">        // #3602 readonly(reactive(Map))</span></span>
<span class="line"><span style="color:#6272A4;">        // ensure that the nested reactive \`Map\` can do tracking for itself</span></span>
<span class="line"><span style="color:#F8F8F2;">        target.</span><span style="color:#50FA7B;">get</span><span style="color:#F8F8F2;">(key)</span></span>
<span class="line"><span style="color:#F8F8F2;">      }</span></span>
<span class="line"><span style="color:#F8F8F2;">    },</span></span>
<span class="line"><span style="color:#FF79C6;">    get</span><span style="color:#50FA7B;"> size</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#FF79C6;">      const</span><span style="color:#F8F8F2;"> target </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> (</span><span style="color:#BD93F9;font-style:italic;">this</span><span style="color:#FF79C6;"> as</span><span style="color:#8BE9FD;font-style:italic;"> unknown</span><span style="color:#FF79C6;"> as</span><span style="color:#8BE9FD;font-style:italic;"> IterableCollections</span><span style="color:#F8F8F2;">)[ReactiveFlags.</span><span style="color:#BD93F9;">RAW</span><span style="color:#F8F8F2;">]</span></span>
<span class="line"><span style="color:#FF79C6;">      !</span><span style="color:#F8F8F2;">readonly </span><span style="color:#FF79C6;">&amp;&amp;</span><span style="color:#50FA7B;"> track</span><span style="color:#F8F8F2;">(</span><span style="color:#50FA7B;">toRaw</span><span style="color:#F8F8F2;">(target), TrackOpTypes.</span><span style="color:#BD93F9;">ITERATE</span><span style="color:#F8F8F2;">, ITERATE_KEY)</span></span>
<span class="line"><span style="color:#FF79C6;">      return</span><span style="color:#F8F8F2;"> Reflect.</span><span style="color:#50FA7B;">get</span><span style="color:#F8F8F2;">(target, </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">size</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, target)</span></span>
<span class="line"><span style="color:#F8F8F2;">    },</span></span>
<span class="line"><span style="color:#50FA7B;">    has</span><span style="color:#F8F8F2;">(</span><span style="color:#BD93F9;font-style:italic;">this</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> CollectionTypes</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">key</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> unknown</span><span style="color:#F8F8F2;">)</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> boolean</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#FF79C6;">      const</span><span style="color:#F8F8F2;"> target </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;font-style:italic;"> this</span><span style="color:#F8F8F2;">[ReactiveFlags.</span><span style="color:#BD93F9;">RAW</span><span style="color:#F8F8F2;">]</span></span>
<span class="line"><span style="color:#FF79C6;">      const</span><span style="color:#F8F8F2;"> rawTarget </span><span style="color:#FF79C6;">=</span><span style="color:#50FA7B;"> toRaw</span><span style="color:#F8F8F2;">(target)</span></span>
<span class="line"><span style="color:#FF79C6;">      const</span><span style="color:#F8F8F2;"> rawKey </span><span style="color:#FF79C6;">=</span><span style="color:#50FA7B;"> toRaw</span><span style="color:#F8F8F2;">(key)</span></span>
<span class="line"><span style="color:#FF79C6;">      if</span><span style="color:#F8F8F2;"> (</span><span style="color:#FF79C6;">!</span><span style="color:#F8F8F2;">readonly) {</span></span>
<span class="line"><span style="color:#FF79C6;">        if</span><span style="color:#F8F8F2;"> (</span><span style="color:#50FA7B;">hasChanged</span><span style="color:#F8F8F2;">(key, rawKey)) {</span></span>
<span class="line"><span style="color:#50FA7B;">          track</span><span style="color:#F8F8F2;">(rawTarget, TrackOpTypes.</span><span style="color:#BD93F9;">HAS</span><span style="color:#F8F8F2;">, key)</span></span>
<span class="line"><span style="color:#F8F8F2;">        }</span></span>
<span class="line"><span style="color:#50FA7B;">        track</span><span style="color:#F8F8F2;">(rawTarget, TrackOpTypes.</span><span style="color:#BD93F9;">HAS</span><span style="color:#F8F8F2;">, rawKey)</span></span>
<span class="line"><span style="color:#F8F8F2;">      }</span></span>
<span class="line"><span style="color:#FF79C6;">      return</span><span style="color:#F8F8F2;"> key </span><span style="color:#FF79C6;">===</span><span style="color:#F8F8F2;"> rawKey</span></span>
<span class="line"><span style="color:#FF79C6;">        ?</span><span style="color:#F8F8F2;"> target.</span><span style="color:#50FA7B;">has</span><span style="color:#F8F8F2;">(key)</span></span>
<span class="line"><span style="color:#FF79C6;">        :</span><span style="color:#F8F8F2;"> target.</span><span style="color:#50FA7B;">has</span><span style="color:#F8F8F2;">(key) </span><span style="color:#FF79C6;">||</span><span style="color:#F8F8F2;"> target.</span><span style="color:#50FA7B;">has</span><span style="color:#F8F8F2;">(rawKey)</span></span>
<span class="line"><span style="color:#F8F8F2;">    },</span></span>
<span class="line"><span style="color:#50FA7B;">    forEach</span><span style="color:#F8F8F2;">(</span><span style="color:#BD93F9;font-style:italic;">this</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> IterableCollections</span><span style="color:#F8F8F2;">, </span><span style="color:#50FA7B;">callback</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> Function</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">thisArg</span><span style="color:#FF79C6;">?:</span><span style="color:#8BE9FD;font-style:italic;"> unknown</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#FF79C6;">      const</span><span style="color:#F8F8F2;"> observed </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;font-style:italic;"> this</span></span>
<span class="line"><span style="color:#FF79C6;">      const</span><span style="color:#F8F8F2;"> target </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> observed[ReactiveFlags.</span><span style="color:#BD93F9;">RAW</span><span style="color:#F8F8F2;">]</span></span>
<span class="line"><span style="color:#FF79C6;">      const</span><span style="color:#F8F8F2;"> rawTarget </span><span style="color:#FF79C6;">=</span><span style="color:#50FA7B;"> toRaw</span><span style="color:#F8F8F2;">(target)</span></span>
<span class="line"><span style="color:#FF79C6;">      const</span><span style="color:#F8F8F2;"> wrap </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> shallow </span><span style="color:#FF79C6;">?</span><span style="color:#F8F8F2;"> toShallow </span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> readonly </span><span style="color:#FF79C6;">?</span><span style="color:#F8F8F2;"> toReadonly </span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> toReactive</span></span>
<span class="line"><span style="color:#FF79C6;">      !</span><span style="color:#F8F8F2;">readonly </span><span style="color:#FF79C6;">&amp;&amp;</span><span style="color:#50FA7B;"> track</span><span style="color:#F8F8F2;">(rawTarget, TrackOpTypes.</span><span style="color:#BD93F9;">ITERATE</span><span style="color:#F8F8F2;">, ITERATE_KEY)</span></span>
<span class="line"><span style="color:#FF79C6;">      return</span><span style="color:#F8F8F2;"> target.</span><span style="color:#50FA7B;">forEach</span><span style="color:#F8F8F2;">((</span><span style="color:#FFB86C;font-style:italic;">value</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> unknown</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">key</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> unknown</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#6272A4;">        // important: make sure the callback is</span></span>
<span class="line"><span style="color:#6272A4;">        // 1. invoked with the reactive map as \`this\` and 3rd arg</span></span>
<span class="line"><span style="color:#6272A4;">        // 2. the value received should be a corresponding reactive/readonly.</span></span>
<span class="line"><span style="color:#FF79C6;">        return</span><span style="color:#F8F8F2;"> callback.</span><span style="color:#50FA7B;">call</span><span style="color:#F8F8F2;">(thisArg, </span><span style="color:#50FA7B;">wrap</span><span style="color:#F8F8F2;">(value), </span><span style="color:#50FA7B;">wrap</span><span style="color:#F8F8F2;">(key), observed)</span></span>
<span class="line"><span style="color:#F8F8F2;">      })</span></span>
<span class="line"><span style="color:#F8F8F2;">    },</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#50FA7B;">  extend</span><span style="color:#F8F8F2;">(</span></span>
<span class="line"><span style="color:#F8F8F2;">    instrumentations,</span></span>
<span class="line"><span style="color:#F8F8F2;">    readonly</span></span>
<span class="line"><span style="color:#FF79C6;">      ?</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">          add</span><span style="color:#FF79C6;">:</span><span style="color:#50FA7B;"> createReadonlyMethod</span><span style="color:#F8F8F2;">(TriggerOpTypes.</span><span style="color:#BD93F9;">ADD</span><span style="color:#F8F8F2;">),</span></span>
<span class="line"><span style="color:#F8F8F2;">          set</span><span style="color:#FF79C6;">:</span><span style="color:#50FA7B;"> createReadonlyMethod</span><span style="color:#F8F8F2;">(TriggerOpTypes.</span><span style="color:#BD93F9;">SET</span><span style="color:#F8F8F2;">),</span></span>
<span class="line"><span style="color:#F8F8F2;">          delete</span><span style="color:#FF79C6;">:</span><span style="color:#50FA7B;"> createReadonlyMethod</span><span style="color:#F8F8F2;">(TriggerOpTypes.</span><span style="color:#BD93F9;">DELETE</span><span style="color:#F8F8F2;">),</span></span>
<span class="line"><span style="color:#F8F8F2;">          clear</span><span style="color:#FF79C6;">:</span><span style="color:#50FA7B;"> createReadonlyMethod</span><span style="color:#F8F8F2;">(TriggerOpTypes.</span><span style="color:#BD93F9;">CLEAR</span><span style="color:#F8F8F2;">),</span></span>
<span class="line"><span style="color:#F8F8F2;">        }</span></span>
<span class="line"><span style="color:#FF79C6;">      :</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#50FA7B;">          add</span><span style="color:#F8F8F2;">(</span><span style="color:#BD93F9;font-style:italic;">this</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> SetTypes</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">value</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> unknown</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#FF79C6;">            if</span><span style="color:#F8F8F2;"> (</span><span style="color:#FF79C6;">!</span><span style="color:#F8F8F2;">shallow </span><span style="color:#FF79C6;">&amp;&amp;</span><span style="color:#FF79C6;"> !</span><span style="color:#50FA7B;">isShallow</span><span style="color:#F8F8F2;">(value) </span><span style="color:#FF79C6;">&amp;&amp;</span><span style="color:#FF79C6;"> !</span><span style="color:#50FA7B;">isReadonly</span><span style="color:#F8F8F2;">(value)) {</span></span>
<span class="line"><span style="color:#F8F8F2;">              value </span><span style="color:#FF79C6;">=</span><span style="color:#50FA7B;"> toRaw</span><span style="color:#F8F8F2;">(value)</span></span>
<span class="line"><span style="color:#F8F8F2;">            }</span></span>
<span class="line"><span style="color:#FF79C6;">            const</span><span style="color:#F8F8F2;"> target </span><span style="color:#FF79C6;">=</span><span style="color:#50FA7B;"> toRaw</span><span style="color:#F8F8F2;">(</span><span style="color:#BD93F9;font-style:italic;">this</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#FF79C6;">            const</span><span style="color:#F8F8F2;"> proto </span><span style="color:#FF79C6;">=</span><span style="color:#50FA7B;"> getProto</span><span style="color:#F8F8F2;">(target)</span></span>
<span class="line"><span style="color:#FF79C6;">            const</span><span style="color:#F8F8F2;"> hadKey </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> proto.has.</span><span style="color:#50FA7B;">call</span><span style="color:#F8F8F2;">(target, value)</span></span>
<span class="line"><span style="color:#FF79C6;">            if</span><span style="color:#F8F8F2;"> (</span><span style="color:#FF79C6;">!</span><span style="color:#F8F8F2;">hadKey) {</span></span>
<span class="line"><span style="color:#F8F8F2;">              target.</span><span style="color:#50FA7B;">add</span><span style="color:#F8F8F2;">(value)</span></span>
<span class="line"><span style="color:#50FA7B;">              trigger</span><span style="color:#F8F8F2;">(target, TriggerOpTypes.</span><span style="color:#BD93F9;">ADD</span><span style="color:#F8F8F2;">, value, value)</span></span>
<span class="line"><span style="color:#F8F8F2;">            }</span></span>
<span class="line"><span style="color:#FF79C6;">            return</span><span style="color:#BD93F9;font-style:italic;"> this</span></span>
<span class="line"><span style="color:#F8F8F2;">          },</span></span>
<span class="line"><span style="color:#50FA7B;">          set</span><span style="color:#F8F8F2;">(</span><span style="color:#BD93F9;font-style:italic;">this</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> MapTypes</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">key</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> unknown</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">value</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> unknown</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#FF79C6;">            if</span><span style="color:#F8F8F2;"> (</span><span style="color:#FF79C6;">!</span><span style="color:#F8F8F2;">shallow </span><span style="color:#FF79C6;">&amp;&amp;</span><span style="color:#FF79C6;"> !</span><span style="color:#50FA7B;">isShallow</span><span style="color:#F8F8F2;">(value) </span><span style="color:#FF79C6;">&amp;&amp;</span><span style="color:#FF79C6;"> !</span><span style="color:#50FA7B;">isReadonly</span><span style="color:#F8F8F2;">(value)) {</span></span>
<span class="line"><span style="color:#F8F8F2;">              value </span><span style="color:#FF79C6;">=</span><span style="color:#50FA7B;"> toRaw</span><span style="color:#F8F8F2;">(value)</span></span>
<span class="line"><span style="color:#F8F8F2;">            }</span></span>
<span class="line"><span style="color:#FF79C6;">            const</span><span style="color:#F8F8F2;"> target </span><span style="color:#FF79C6;">=</span><span style="color:#50FA7B;"> toRaw</span><span style="color:#F8F8F2;">(</span><span style="color:#BD93F9;font-style:italic;">this</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#FF79C6;">            const</span><span style="color:#F8F8F2;"> { has, get } </span><span style="color:#FF79C6;">=</span><span style="color:#50FA7B;"> getProto</span><span style="color:#F8F8F2;">(target)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">            let</span><span style="color:#F8F8F2;"> hadKey </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> has.</span><span style="color:#50FA7B;">call</span><span style="color:#F8F8F2;">(target, key)</span></span>
<span class="line"><span style="color:#FF79C6;">            if</span><span style="color:#F8F8F2;"> (</span><span style="color:#FF79C6;">!</span><span style="color:#F8F8F2;">hadKey) {</span></span>
<span class="line"><span style="color:#F8F8F2;">              key </span><span style="color:#FF79C6;">=</span><span style="color:#50FA7B;"> toRaw</span><span style="color:#F8F8F2;">(key)</span></span>
<span class="line"><span style="color:#F8F8F2;">              hadKey </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> has.</span><span style="color:#50FA7B;">call</span><span style="color:#F8F8F2;">(target, key)</span></span>
<span class="line"><span style="color:#F8F8F2;">            } </span><span style="color:#FF79C6;">else</span><span style="color:#FF79C6;"> if</span><span style="color:#F8F8F2;"> (__DEV__) {</span></span>
<span class="line"><span style="color:#50FA7B;">              checkIdentityKeys</span><span style="color:#F8F8F2;">(target, has, key)</span></span>
<span class="line"><span style="color:#F8F8F2;">            }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">            const</span><span style="color:#F8F8F2;"> oldValue </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> get.</span><span style="color:#50FA7B;">call</span><span style="color:#F8F8F2;">(target, key)</span></span>
<span class="line"><span style="color:#F8F8F2;">            target.</span><span style="color:#50FA7B;">set</span><span style="color:#F8F8F2;">(key, value)</span></span>
<span class="line"><span style="color:#FF79C6;">            if</span><span style="color:#F8F8F2;"> (</span><span style="color:#FF79C6;">!</span><span style="color:#F8F8F2;">hadKey) {</span></span>
<span class="line"><span style="color:#50FA7B;">              trigger</span><span style="color:#F8F8F2;">(target, TriggerOpTypes.</span><span style="color:#BD93F9;">ADD</span><span style="color:#F8F8F2;">, key, value)</span></span>
<span class="line"><span style="color:#F8F8F2;">            } </span><span style="color:#FF79C6;">else</span><span style="color:#FF79C6;"> if</span><span style="color:#F8F8F2;"> (</span><span style="color:#50FA7B;">hasChanged</span><span style="color:#F8F8F2;">(value, oldValue)) {</span></span>
<span class="line"><span style="color:#50FA7B;">              trigger</span><span style="color:#F8F8F2;">(target, TriggerOpTypes.</span><span style="color:#BD93F9;">SET</span><span style="color:#F8F8F2;">, key, value, oldValue)</span></span>
<span class="line"><span style="color:#F8F8F2;">            }</span></span>
<span class="line"><span style="color:#FF79C6;">            return</span><span style="color:#BD93F9;font-style:italic;"> this</span></span>
<span class="line"><span style="color:#F8F8F2;">          },</span></span>
<span class="line"><span style="color:#50FA7B;">          delete</span><span style="color:#F8F8F2;">(</span><span style="color:#BD93F9;font-style:italic;">this</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> CollectionTypes</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">key</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> unknown</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#FF79C6;">            const</span><span style="color:#F8F8F2;"> target </span><span style="color:#FF79C6;">=</span><span style="color:#50FA7B;"> toRaw</span><span style="color:#F8F8F2;">(</span><span style="color:#BD93F9;font-style:italic;">this</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#FF79C6;">            const</span><span style="color:#F8F8F2;"> { has, get } </span><span style="color:#FF79C6;">=</span><span style="color:#50FA7B;"> getProto</span><span style="color:#F8F8F2;">(target)</span></span>
<span class="line"><span style="color:#FF79C6;">            let</span><span style="color:#F8F8F2;"> hadKey </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> has.</span><span style="color:#50FA7B;">call</span><span style="color:#F8F8F2;">(target, key)</span></span>
<span class="line"><span style="color:#FF79C6;">            if</span><span style="color:#F8F8F2;"> (</span><span style="color:#FF79C6;">!</span><span style="color:#F8F8F2;">hadKey) {</span></span>
<span class="line"><span style="color:#F8F8F2;">              key </span><span style="color:#FF79C6;">=</span><span style="color:#50FA7B;"> toRaw</span><span style="color:#F8F8F2;">(key)</span></span>
<span class="line"><span style="color:#F8F8F2;">              hadKey </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> has.</span><span style="color:#50FA7B;">call</span><span style="color:#F8F8F2;">(target, key)</span></span>
<span class="line"><span style="color:#F8F8F2;">            } </span><span style="color:#FF79C6;">else</span><span style="color:#FF79C6;"> if</span><span style="color:#F8F8F2;"> (__DEV__) {</span></span>
<span class="line"><span style="color:#50FA7B;">              checkIdentityKeys</span><span style="color:#F8F8F2;">(target, has, key)</span></span>
<span class="line"><span style="color:#F8F8F2;">            }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">            const</span><span style="color:#F8F8F2;"> oldValue </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> get </span><span style="color:#FF79C6;">?</span><span style="color:#F8F8F2;"> get.</span><span style="color:#50FA7B;">call</span><span style="color:#F8F8F2;">(target, key) </span><span style="color:#FF79C6;">:</span><span style="color:#BD93F9;"> undefined</span></span>
<span class="line"><span style="color:#6272A4;">            // forward the operation before queueing reactions</span></span>
<span class="line"><span style="color:#FF79C6;">            const</span><span style="color:#F8F8F2;"> result </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> target.</span><span style="color:#50FA7B;">delete</span><span style="color:#F8F8F2;">(key)</span></span>
<span class="line"><span style="color:#FF79C6;">            if</span><span style="color:#F8F8F2;"> (hadKey) {</span></span>
<span class="line"><span style="color:#50FA7B;">              trigger</span><span style="color:#F8F8F2;">(target, TriggerOpTypes.</span><span style="color:#BD93F9;">DELETE</span><span style="color:#F8F8F2;">, key, </span><span style="color:#BD93F9;">undefined</span><span style="color:#F8F8F2;">, oldValue)</span></span>
<span class="line"><span style="color:#F8F8F2;">            }</span></span>
<span class="line"><span style="color:#FF79C6;">            return</span><span style="color:#F8F8F2;"> result</span></span>
<span class="line"><span style="color:#F8F8F2;">          },</span></span>
<span class="line"><span style="color:#50FA7B;">          clear</span><span style="color:#F8F8F2;">(</span><span style="color:#BD93F9;font-style:italic;">this</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> IterableCollections</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#FF79C6;">            const</span><span style="color:#F8F8F2;"> target </span><span style="color:#FF79C6;">=</span><span style="color:#50FA7B;"> toRaw</span><span style="color:#F8F8F2;">(</span><span style="color:#BD93F9;font-style:italic;">this</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#FF79C6;">            const</span><span style="color:#F8F8F2;"> hadItems </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> target.size </span><span style="color:#FF79C6;">!==</span><span style="color:#BD93F9;"> 0</span></span>
<span class="line"><span style="color:#FF79C6;">            const</span><span style="color:#F8F8F2;"> oldTarget </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> __DEV__</span></span>
<span class="line"><span style="color:#FF79C6;">              ?</span><span style="color:#50FA7B;"> isMap</span><span style="color:#F8F8F2;">(target)</span></span>
<span class="line"><span style="color:#FF79C6;">                ?</span><span style="color:#FF79C6;font-weight:bold;"> new</span><span style="color:#50FA7B;"> Map</span><span style="color:#F8F8F2;">(target)</span></span>
<span class="line"><span style="color:#FF79C6;">                :</span><span style="color:#FF79C6;font-weight:bold;"> new</span><span style="color:#50FA7B;"> Set</span><span style="color:#F8F8F2;">(target)</span></span>
<span class="line"><span style="color:#FF79C6;">              :</span><span style="color:#BD93F9;"> undefined</span></span>
<span class="line"><span style="color:#6272A4;">            // forward the operation before queueing reactions</span></span>
<span class="line"><span style="color:#FF79C6;">            const</span><span style="color:#F8F8F2;"> result </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> target.</span><span style="color:#50FA7B;">clear</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"><span style="color:#FF79C6;">            if</span><span style="color:#F8F8F2;"> (hadItems) {</span></span>
<span class="line"><span style="color:#50FA7B;">              trigger</span><span style="color:#F8F8F2;">(</span></span>
<span class="line"><span style="color:#F8F8F2;">                target,</span></span>
<span class="line"><span style="color:#F8F8F2;">                TriggerOpTypes.</span><span style="color:#BD93F9;">CLEAR</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#BD93F9;">                undefined</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#BD93F9;">                undefined</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">                oldTarget,</span></span>
<span class="line"><span style="color:#F8F8F2;">              )</span></span>
<span class="line"><span style="color:#F8F8F2;">            }</span></span>
<span class="line"><span style="color:#FF79C6;">            return</span><span style="color:#F8F8F2;"> result</span></span>
<span class="line"><span style="color:#F8F8F2;">          },</span></span>
<span class="line"><span style="color:#F8F8F2;">        },</span></span>
<span class="line"><span style="color:#F8F8F2;">  )</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">  const</span><span style="color:#F8F8F2;"> iteratorMethods </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> [</span></span>
<span class="line"><span style="color:#E9F284;">    &#39;</span><span style="color:#F1FA8C;">keys</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#E9F284;">    &#39;</span><span style="color:#F1FA8C;">values</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#E9F284;">    &#39;</span><span style="color:#F1FA8C;">entries</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">    Symbol.iterator,</span></span>
<span class="line"><span style="color:#F8F8F2;">  ] </span><span style="color:#FF79C6;">as</span><span style="color:#FF79C6;"> const</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">  iteratorMethods.</span><span style="color:#50FA7B;">forEach</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">method</span><span style="color:#FF79C6;"> =&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">    instrumentations[method] </span><span style="color:#FF79C6;">=</span><span style="color:#50FA7B;"> createIterableMethod</span><span style="color:#F8F8F2;">(method, readonly, shallow)</span></span>
<span class="line"><span style="color:#F8F8F2;">  })</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">  return</span><span style="color:#F8F8F2;"> instrumentations</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#FF79C6;">function</span><span style="color:#50FA7B;"> createIterableMethod</span><span style="color:#F8F8F2;">(</span></span>
<span class="line"><span style="color:#FFB86C;font-style:italic;">  method</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> string</span><span style="color:#FF79C6;"> |</span><span style="color:#8BE9FD;font-style:italic;"> symbol</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#FFB86C;font-style:italic;">  isReadonly</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> boolean</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#FFB86C;font-style:italic;">  isShallow</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> boolean</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#FF79C6;">  return</span><span style="color:#FF79C6;"> function</span><span style="color:#F8F8F2;"> (</span></span>
<span class="line"><span style="color:#BD93F9;font-style:italic;">    this</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> IterableCollections</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#FF79C6;">    ...</span><span style="color:#FFB86C;font-style:italic;">args</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> unknown</span><span style="color:#F8F8F2;">[]</span></span>
<span class="line"><span style="color:#F8F8F2;">  )</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> Iterable</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#8BE9FD;font-style:italic;">unknown</span><span style="color:#F8F8F2;">&gt; </span><span style="color:#FF79C6;">&amp;</span><span style="color:#8BE9FD;font-style:italic;"> Iterator</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#8BE9FD;font-style:italic;">unknown</span><span style="color:#F8F8F2;">&gt; {</span></span>
<span class="line"><span style="color:#FF79C6;">    const</span><span style="color:#F8F8F2;"> target </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;font-style:italic;"> this</span><span style="color:#F8F8F2;">[ReactiveFlags.</span><span style="color:#BD93F9;">RAW</span><span style="color:#F8F8F2;">]</span></span>
<span class="line"><span style="color:#FF79C6;">    const</span><span style="color:#F8F8F2;"> rawTarget </span><span style="color:#FF79C6;">=</span><span style="color:#50FA7B;"> toRaw</span><span style="color:#F8F8F2;">(target)</span></span>
<span class="line"><span style="color:#FF79C6;">    const</span><span style="color:#F8F8F2;"> targetIsMap </span><span style="color:#FF79C6;">=</span><span style="color:#50FA7B;"> isMap</span><span style="color:#F8F8F2;">(rawTarget)</span></span>
<span class="line"><span style="color:#FF79C6;">    const</span><span style="color:#F8F8F2;"> isPair </span><span style="color:#FF79C6;">=</span></span>
<span class="line"><span style="color:#F8F8F2;">      method </span><span style="color:#FF79C6;">===</span><span style="color:#E9F284;"> &#39;</span><span style="color:#F1FA8C;">entries</span><span style="color:#E9F284;">&#39;</span><span style="color:#FF79C6;"> ||</span><span style="color:#F8F8F2;"> (method </span><span style="color:#FF79C6;">===</span><span style="color:#F8F8F2;"> Symbol.iterator </span><span style="color:#FF79C6;">&amp;&amp;</span><span style="color:#F8F8F2;"> targetIsMap)</span></span>
<span class="line"><span style="color:#FF79C6;">    const</span><span style="color:#F8F8F2;"> isKeyOnly </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> method </span><span style="color:#FF79C6;">===</span><span style="color:#E9F284;"> &#39;</span><span style="color:#F1FA8C;">keys</span><span style="color:#E9F284;">&#39;</span><span style="color:#FF79C6;"> &amp;&amp;</span><span style="color:#F8F8F2;"> targetIsMap</span></span>
<span class="line"><span style="color:#FF79C6;">    const</span><span style="color:#F8F8F2;"> innerIterator </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> target[method](</span><span style="color:#FF79C6;">...</span><span style="color:#F8F8F2;">args)</span></span>
<span class="line"><span style="color:#FF79C6;">    const</span><span style="color:#F8F8F2;"> wrap </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> isShallow </span><span style="color:#FF79C6;">?</span><span style="color:#F8F8F2;"> toShallow </span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> isReadonly </span><span style="color:#FF79C6;">?</span><span style="color:#F8F8F2;"> toReadonly </span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> toReactive</span></span>
<span class="line"><span style="color:#FF79C6;">    !</span><span style="color:#F8F8F2;">isReadonly </span><span style="color:#FF79C6;">&amp;&amp;</span></span>
<span class="line"><span style="color:#50FA7B;">      track</span><span style="color:#F8F8F2;">(</span></span>
<span class="line"><span style="color:#F8F8F2;">        rawTarget,</span></span>
<span class="line"><span style="color:#F8F8F2;">        TrackOpTypes.</span><span style="color:#BD93F9;">ITERATE</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">        isKeyOnly </span><span style="color:#FF79C6;">?</span><span style="color:#F8F8F2;"> MAP_KEY_ITERATE_KEY </span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> ITERATE_KEY,</span></span>
<span class="line"><span style="color:#F8F8F2;">      )</span></span>
<span class="line"><span style="color:#6272A4;">    // return a wrapped iterator which returns observed versions of the</span></span>
<span class="line"><span style="color:#6272A4;">    // values emitted from the real iterator</span></span>
<span class="line"><span style="color:#FF79C6;">    return</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#6272A4;">      // iterator protocol</span></span>
<span class="line"><span style="color:#50FA7B;">      next</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#FF79C6;">        const</span><span style="color:#F8F8F2;"> { value, done } </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> innerIterator.</span><span style="color:#50FA7B;">next</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"><span style="color:#FF79C6;">        return</span><span style="color:#F8F8F2;"> done</span></span>
<span class="line"><span style="color:#FF79C6;">          ?</span><span style="color:#F8F8F2;"> { value, done }</span></span>
<span class="line"><span style="color:#FF79C6;">          :</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">              value</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> isPair </span><span style="color:#FF79C6;">?</span><span style="color:#F8F8F2;"> [</span><span style="color:#50FA7B;">wrap</span><span style="color:#F8F8F2;">(value[</span><span style="color:#BD93F9;">0</span><span style="color:#F8F8F2;">]), </span><span style="color:#50FA7B;">wrap</span><span style="color:#F8F8F2;">(value[</span><span style="color:#BD93F9;">1</span><span style="color:#F8F8F2;">])] </span><span style="color:#FF79C6;">:</span><span style="color:#50FA7B;"> wrap</span><span style="color:#F8F8F2;">(value),</span></span>
<span class="line"><span style="color:#F8F8F2;">              done,</span></span>
<span class="line"><span style="color:#F8F8F2;">            }</span></span>
<span class="line"><span style="color:#F8F8F2;">      },</span></span>
<span class="line"><span style="color:#6272A4;">      // iterable protocol</span></span>
<span class="line"><span style="color:#F8F8F2;">      [Symbol.iterator]() {</span></span>
<span class="line"><span style="color:#FF79C6;">        return</span><span style="color:#BD93F9;font-style:italic;"> this</span></span>
<span class="line"><span style="color:#F8F8F2;">      },</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h1 id="ref" tabindex="-1"><a class="header-anchor" href="#ref"><span>ref</span></a></h1><p><code>Getters/setters</code></p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">class</span><span style="color:#8BE9FD;"> User</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">  constructor</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">name</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#6272A4;">    // 调用 setter</span></span>
<span class="line"><span style="color:#BD93F9;font-style:italic;">    this</span><span style="color:#F8F8F2;">.name </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> name;</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">  get</span><span style="color:#50FA7B;"> name</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#FF79C6;">    return</span><span style="color:#BD93F9;font-style:italic;"> this</span><span style="color:#F8F8F2;">._name;</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">  set</span><span style="color:#50FA7B;"> name</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">value</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#FF79C6;">    if</span><span style="color:#F8F8F2;"> (value.length </span><span style="color:#FF79C6;">&lt;</span><span style="color:#BD93F9;"> 4</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#50FA7B;">      alert</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">Name is too short.</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#FF79C6;">      return</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#BD93F9;font-style:italic;">    this</span><span style="color:#F8F8F2;">._name </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> value;</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> user </span><span style="color:#FF79C6;">=</span><span style="color:#FF79C6;font-weight:bold;"> new</span><span style="color:#50FA7B;"> User</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">John</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#50FA7B;">alert</span><span style="color:#F8F8F2;">(user.name); </span><span style="color:#6272A4;">// John</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">user </span><span style="color:#FF79C6;">=</span><span style="color:#FF79C6;font-weight:bold;"> new</span><span style="color:#50FA7B;"> User</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&quot;&quot;</span><span style="color:#F8F8F2;">); </span><span style="color:#6272A4;">// Name is too short.</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>ref</code></p><div class="language-ts line-numbers-mode" data-highlighter="shiki" data-ext="ts" data-title="ts" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">export</span><span style="color:#FF79C6;"> function</span><span style="color:#50FA7B;"> ref</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">value</span><span style="color:#FF79C6;">?:</span><span style="color:#8BE9FD;font-style:italic;"> unknown</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#FF79C6;">  return</span><span style="color:#50FA7B;"> createRef</span><span style="color:#F8F8F2;">(value, </span><span style="color:#BD93F9;">false</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#FF79C6;">function</span><span style="color:#50FA7B;"> createRef</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">rawValue</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> unknown</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">shallow</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> boolean</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#FF79C6;">  if</span><span style="color:#F8F8F2;"> (</span><span style="color:#50FA7B;">isRef</span><span style="color:#F8F8F2;">(rawValue)) {</span></span>
<span class="line"><span style="color:#FF79C6;">    return</span><span style="color:#F8F8F2;"> rawValue</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#FF79C6;">  return</span><span style="color:#FF79C6;font-weight:bold;"> new</span><span style="color:#50FA7B;"> RefImpl</span><span style="color:#F8F8F2;">(rawValue, shallow)</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#FF79C6;">class</span><span style="color:#8BE9FD;"> RefImpl</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#FFB86C;font-style:italic;">T</span><span style="color:#FF79C6;"> =</span><span style="color:#8BE9FD;font-style:italic;"> any</span><span style="color:#F8F8F2;">&gt; {</span></span>
<span class="line"><span style="color:#F8F8F2;">  _value</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> T</span></span>
<span class="line"><span style="color:#FF79C6;">  private</span><span style="color:#F8F8F2;"> _rawValue</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> T</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">  dep</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> Dep</span><span style="color:#FF79C6;"> =</span><span style="color:#FF79C6;font-weight:bold;"> new</span><span style="color:#50FA7B;"> Dep</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"><span style="color:#FF79C6;">  constructor</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">value</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> T</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">isShallow</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> boolean</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#BD93F9;font-style:italic;">    this</span><span style="color:#F8F8F2;">._rawValue </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> isShallow </span><span style="color:#FF79C6;">?</span><span style="color:#F8F8F2;"> value </span><span style="color:#FF79C6;">:</span><span style="color:#50FA7B;"> toRaw</span><span style="color:#F8F8F2;">(value)</span></span>
<span class="line"><span style="color:#BD93F9;font-style:italic;">    this</span><span style="color:#F8F8F2;">._value </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> isShallow </span><span style="color:#FF79C6;">?</span><span style="color:#F8F8F2;"> value </span><span style="color:#FF79C6;">:</span><span style="color:#50FA7B;"> toReactive</span><span style="color:#F8F8F2;">(value)</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">  get</span><span style="color:#50FA7B;"> value</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#BD93F9;font-style:italic;">    this</span><span style="color:#F8F8F2;">.dep.</span><span style="color:#50FA7B;">track</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"><span style="color:#FF79C6;">    return</span><span style="color:#BD93F9;font-style:italic;"> this</span><span style="color:#F8F8F2;">._value</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">  set</span><span style="color:#50FA7B;"> value</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">newValue</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#FF79C6;">    const</span><span style="color:#F8F8F2;"> oldValue </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;font-style:italic;"> this</span><span style="color:#F8F8F2;">._rawValue</span></span>
<span class="line"><span style="color:#FF79C6;">    if</span><span style="color:#F8F8F2;"> (</span><span style="color:#50FA7B;">hasChanged</span><span style="color:#F8F8F2;">(newValue, oldValue)) {</span></span>
<span class="line"><span style="color:#BD93F9;font-style:italic;">      this</span><span style="color:#F8F8F2;">._rawValue </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> newValue</span></span>
<span class="line"><span style="color:#BD93F9;font-style:italic;">      this</span><span style="color:#F8F8F2;">._value </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> newValue </span></span>
<span class="line"><span style="color:#BD93F9;font-style:italic;">      this</span><span style="color:#F8F8F2;">.dep.</span><span style="color:#50FA7B;">trigger</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><details class="hint-container details"><summary>RefImpl</summary><div class="language-ts line-numbers-mode" data-highlighter="shiki" data-ext="ts" data-title="ts" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">class</span><span style="color:#8BE9FD;"> RefImpl</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#FFB86C;font-style:italic;">T</span><span style="color:#FF79C6;"> =</span><span style="color:#8BE9FD;font-style:italic;"> any</span><span style="color:#F8F8F2;">&gt; {</span></span>
<span class="line"><span style="color:#F8F8F2;">  _value</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> T</span></span>
<span class="line"><span style="color:#FF79C6;">  private</span><span style="color:#F8F8F2;"> _rawValue</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> T</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">  dep</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> Dep</span><span style="color:#FF79C6;"> =</span><span style="color:#FF79C6;font-weight:bold;"> new</span><span style="color:#50FA7B;"> Dep</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">  public</span><span style="color:#FF79C6;"> readonly</span><span style="color:#F8F8F2;"> [ReactiveFlags.</span><span style="color:#BD93F9;">IS_REF</span><span style="color:#F8F8F2;">] </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> true</span></span>
<span class="line"><span style="color:#FF79C6;">  public</span><span style="color:#FF79C6;"> readonly</span><span style="color:#F8F8F2;"> [ReactiveFlags.</span><span style="color:#BD93F9;">IS_SHALLOW</span><span style="color:#F8F8F2;">]</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> boolean</span><span style="color:#FF79C6;"> =</span><span style="color:#BD93F9;"> false</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">  constructor</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">value</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> T</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">isShallow</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> boolean</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#BD93F9;font-style:italic;">    this</span><span style="color:#F8F8F2;">._rawValue </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> isShallow </span><span style="color:#FF79C6;">?</span><span style="color:#F8F8F2;"> value </span><span style="color:#FF79C6;">:</span><span style="color:#50FA7B;"> toRaw</span><span style="color:#F8F8F2;">(value)</span></span>
<span class="line"><span style="color:#BD93F9;font-style:italic;">    this</span><span style="color:#F8F8F2;">._value </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> isShallow </span><span style="color:#FF79C6;">?</span><span style="color:#F8F8F2;"> value </span><span style="color:#FF79C6;">:</span><span style="color:#50FA7B;"> toReactive</span><span style="color:#F8F8F2;">(value)</span></span>
<span class="line"><span style="color:#BD93F9;font-style:italic;">    this</span><span style="color:#F8F8F2;">[ReactiveFlags.</span><span style="color:#BD93F9;">IS_SHALLOW</span><span style="color:#F8F8F2;">] </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> isShallow</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">  get</span><span style="color:#50FA7B;"> value</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#FF79C6;">    if</span><span style="color:#F8F8F2;"> (__DEV__) {</span></span>
<span class="line"><span style="color:#BD93F9;font-style:italic;">      this</span><span style="color:#F8F8F2;">.dep.</span><span style="color:#50FA7B;">track</span><span style="color:#F8F8F2;">({</span></span>
<span class="line"><span style="color:#F8F8F2;">        target</span><span style="color:#FF79C6;">:</span><span style="color:#BD93F9;font-style:italic;"> this</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">        type</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> TrackOpTypes.</span><span style="color:#BD93F9;">GET</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">        key</span><span style="color:#FF79C6;">:</span><span style="color:#E9F284;"> &#39;</span><span style="color:#F1FA8C;">value</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">      })</span></span>
<span class="line"><span style="color:#F8F8F2;">    } </span><span style="color:#FF79C6;">else</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#BD93F9;font-style:italic;">      this</span><span style="color:#F8F8F2;">.dep.</span><span style="color:#50FA7B;">track</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#FF79C6;">    return</span><span style="color:#BD93F9;font-style:italic;"> this</span><span style="color:#F8F8F2;">._value</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">  set</span><span style="color:#50FA7B;"> value</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">newValue</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#FF79C6;">    const</span><span style="color:#F8F8F2;"> oldValue </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;font-style:italic;"> this</span><span style="color:#F8F8F2;">._rawValue</span></span>
<span class="line"><span style="color:#FF79C6;">    const</span><span style="color:#F8F8F2;"> useDirectValue </span><span style="color:#FF79C6;">=</span></span>
<span class="line"><span style="color:#BD93F9;font-style:italic;">      this</span><span style="color:#F8F8F2;">[ReactiveFlags.</span><span style="color:#BD93F9;">IS_SHALLOW</span><span style="color:#F8F8F2;">] </span><span style="color:#FF79C6;">||</span></span>
<span class="line"><span style="color:#50FA7B;">      isShallow</span><span style="color:#F8F8F2;">(newValue) </span><span style="color:#FF79C6;">||</span></span>
<span class="line"><span style="color:#50FA7B;">      isReadonly</span><span style="color:#F8F8F2;">(newValue)</span></span>
<span class="line"><span style="color:#F8F8F2;">    newValue </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> useDirectValue </span><span style="color:#FF79C6;">?</span><span style="color:#F8F8F2;"> newValue </span><span style="color:#FF79C6;">:</span><span style="color:#50FA7B;"> toRaw</span><span style="color:#F8F8F2;">(newValue)</span></span>
<span class="line"><span style="color:#FF79C6;">    if</span><span style="color:#F8F8F2;"> (</span><span style="color:#50FA7B;">hasChanged</span><span style="color:#F8F8F2;">(newValue, oldValue)) {</span></span>
<span class="line"><span style="color:#BD93F9;font-style:italic;">      this</span><span style="color:#F8F8F2;">._rawValue </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> newValue</span></span>
<span class="line"><span style="color:#BD93F9;font-style:italic;">      this</span><span style="color:#F8F8F2;">._value </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> useDirectValue </span><span style="color:#FF79C6;">?</span><span style="color:#F8F8F2;"> newValue </span><span style="color:#FF79C6;">:</span><span style="color:#50FA7B;"> toReactive</span><span style="color:#F8F8F2;">(newValue)</span></span>
<span class="line"><span style="color:#FF79C6;">      if</span><span style="color:#F8F8F2;"> (__DEV__) {</span></span>
<span class="line"><span style="color:#BD93F9;font-style:italic;">        this</span><span style="color:#F8F8F2;">.dep.</span><span style="color:#50FA7B;">trigger</span><span style="color:#F8F8F2;">({</span></span>
<span class="line"><span style="color:#F8F8F2;">          target</span><span style="color:#FF79C6;">:</span><span style="color:#BD93F9;font-style:italic;"> this</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">          type</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> TriggerOpTypes.</span><span style="color:#BD93F9;">SET</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">          key</span><span style="color:#FF79C6;">:</span><span style="color:#E9F284;"> &#39;</span><span style="color:#F1FA8C;">value</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">          newValue,</span></span>
<span class="line"><span style="color:#F8F8F2;">          oldValue,</span></span>
<span class="line"><span style="color:#F8F8F2;">        })</span></span>
<span class="line"><span style="color:#F8F8F2;">      } </span><span style="color:#FF79C6;">else</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#BD93F9;font-style:italic;">        this</span><span style="color:#F8F8F2;">.dep.</span><span style="color:#50FA7B;">trigger</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"><span style="color:#F8F8F2;">      }</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h1 id="effect" tabindex="-1"><a class="header-anchor" href="#effect"><span>Effect</span></a></h1><div class="language-ts line-numbers-mode" data-highlighter="shiki" data-ext="ts" data-title="ts" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#50FA7B;">it</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">should observe basic properties</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, () </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#FF79C6;">  let</span><span style="color:#F8F8F2;"> dummy</span></span>
<span class="line"><span style="color:#FF79C6;">  const</span><span style="color:#F8F8F2;"> counter </span><span style="color:#FF79C6;">=</span><span style="color:#50FA7B;"> reactive</span><span style="color:#F8F8F2;">({ num</span><span style="color:#FF79C6;">:</span><span style="color:#BD93F9;"> 0</span><span style="color:#F8F8F2;"> })</span></span>
<span class="line"><span style="color:#50FA7B;">  effect</span><span style="color:#F8F8F2;">(() </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> (dummy </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> counter.num))</span></span>
<span class="line"><span style="color:#50FA7B;">  expect</span><span style="color:#F8F8F2;">(dummy).</span><span style="color:#50FA7B;">toBe</span><span style="color:#F8F8F2;">(</span><span style="color:#BD93F9;">0</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">  counter.num </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> 7</span></span>
<span class="line"><span style="color:#50FA7B;">  expect</span><span style="color:#F8F8F2;">(dummy).</span><span style="color:#50FA7B;">toBe</span><span style="color:#F8F8F2;">(</span><span style="color:#BD93F9;">7</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">})</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>effect是 reactive 的核心，主要负责收集依赖，更新依赖</p><div class="language-ts line-numbers-mode" data-highlighter="shiki" data-ext="ts" data-title="ts" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">function</span><span style="color:#50FA7B;"> effect</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">fn</span><span style="color:#F8F8F2;">){</span></span>
<span class="line"><span style="color:#FF79C6;">  const</span><span style="color:#F8F8F2;"> e </span><span style="color:#FF79C6;">=</span><span style="color:#FF79C6;font-weight:bold;"> new</span><span style="color:#50FA7B;"> ReactiveEffect</span><span style="color:#F8F8F2;">(fn)</span></span>
<span class="line"><span style="color:#F8F8F2;">  e.</span><span style="color:#50FA7B;">run</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#FF79C6;">class</span><span style="color:#8BE9FD;"> ReactiveEffect</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#FF79C6;">  constructor</span><span style="color:#F8F8F2;">(</span><span style="color:#FF79C6;">public</span><span style="color:#FFB86C;font-style:italic;"> fn</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> any</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#FF79C6;">    if</span><span style="color:#F8F8F2;"> (activeEffectScope </span><span style="color:#FF79C6;">&amp;&amp;</span><span style="color:#F8F8F2;"> activeEffectScope.active) {</span></span>
<span class="line"><span style="color:#F8F8F2;">      activeEffectScope.effects.</span><span style="color:#50FA7B;">push</span><span style="color:#F8F8F2;">(</span><span style="color:#BD93F9;font-style:italic;">this</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#50FA7B;">  run</span><span style="color:#F8F8F2;">(){</span></span>
<span class="line"><span style="color:#6272A4;">    //  effect 从 deps 数组中移除，然后清空 deps 数组。</span></span>
<span class="line"><span style="color:#50FA7B;">    cleanupEffect</span><span style="color:#F8F8F2;">(</span><span style="color:#BD93F9;font-style:italic;">this</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#6272A4;">    //  </span></span>
<span class="line"><span style="color:#50FA7B;">    prepareDeps</span><span style="color:#F8F8F2;">(</span><span style="color:#BD93F9;font-style:italic;">this</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">    activeSub </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;font-style:italic;"> this</span></span>
<span class="line"><span style="color:#F8F8F2;">    shouldTrack </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> true</span></span>
<span class="line"><span style="color:#6272A4;">    // 触发track收集</span></span>
<span class="line"><span style="color:#BD93F9;font-style:italic;">    this</span><span style="color:#F8F8F2;">.</span><span style="color:#50FA7B;">fn</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>访问reactive数据会触发get拦截进行track进行依赖收集</p><div class="language-ts line-numbers-mode" data-highlighter="shiki" data-ext="ts" data-title="ts" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">function</span><span style="color:#50FA7B;"> track</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">target</span><span style="color:#F8F8F2;">,</span><span style="color:#FFB86C;font-style:italic;">type</span><span style="color:#F8F8F2;">,</span><span style="color:#FFB86C;font-style:italic;">key</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#FF79C6;">   if</span><span style="color:#F8F8F2;"> (shouldTrack </span><span style="color:#FF79C6;">&amp;&amp;</span><span style="color:#F8F8F2;"> activeSub) { </span></span>
<span class="line"><span style="color:#F8F8F2;">    dep.</span><span style="color:#50FA7B;">track</span><span style="color:#F8F8F2;">({target,type,key})</span></span>
<span class="line"><span style="color:#6272A4;">   //  ....</span></span>
<span class="line"><span style="color:#F8F8F2;">   }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#FF79C6;">class</span><span style="color:#8BE9FD;"> Dep</span><span style="color:#F8F8F2;">{</span></span>
<span class="line"><span style="color:#50FA7B;">  track</span><span style="color:#F8F8F2;">(){</span></span>
<span class="line"><span style="color:#FF79C6;">    let</span><span style="color:#F8F8F2;"> link </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;font-style:italic;"> this</span><span style="color:#F8F8F2;">.activeLink </span><span style="color:#FF79C6;">=</span><span style="color:#FF79C6;font-weight:bold;"> new</span><span style="color:#50FA7B;"> Link</span><span style="color:#F8F8F2;">(activeSub,</span><span style="color:#BD93F9;font-style:italic;">this</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#50FA7B;">    addSub</span><span style="color:#F8F8F2;">(link)</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#6272A4;">// 建立一个链表来管理依赖 link.sub = effect link.dep = Dep</span></span>
<span class="line"><span style="color:#FF79C6;">function</span><span style="color:#50FA7B;"> addSub</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">link</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#FF79C6;">    const</span><span style="color:#F8F8F2;"> currentTail </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> link.dep.subs</span></span>
<span class="line"><span style="color:#6272A4;">    // 更新订阅者链表</span></span>
<span class="line"><span style="color:#FF79C6;">    if</span><span style="color:#F8F8F2;"> (currentTail </span><span style="color:#FF79C6;">!==</span><span style="color:#F8F8F2;"> link) {</span></span>
<span class="line"><span style="color:#F8F8F2;">      link.prevSub </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> currentTail</span></span>
<span class="line"><span style="color:#FF79C6;">      if</span><span style="color:#F8F8F2;"> (currentTail) currentTail.nextSub </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> link</span></span>
<span class="line"><span style="color:#F8F8F2;">    } </span></span>
<span class="line"><span style="color:#6272A4;">    // 更新订阅者链表 </span></span>
<span class="line"><span style="color:#F8F8F2;">    link.dep.subs </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> link</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>更改reactive属性数据，会触发set拦截，进行trigger触发依赖更新</p><div class="language-ts line-numbers-mode" data-highlighter="shiki" data-ext="ts" data-title="ts" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">function</span><span style="color:#50FA7B;"> trigger</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">target</span><span style="color:#F8F8F2;">,</span><span style="color:#FFB86C;font-style:italic;">type</span><span style="color:#F8F8F2;">,</span><span style="color:#FFB86C;font-style:italic;">key</span><span style="color:#F8F8F2;">,</span><span style="color:#FFB86C;font-style:italic;">newValue</span><span style="color:#F8F8F2;">,</span><span style="color:#FFB86C;font-style:italic;">oldValue</span><span style="color:#F8F8F2;">,</span><span style="color:#FFB86C;font-style:italic;">oldTarget</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#FF79C6;">  const</span><span style="color:#50FA7B;"> run</span><span style="color:#FF79C6;"> =</span><span style="color:#F8F8F2;"> (</span><span style="color:#FFB86C;font-style:italic;">dep</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> {dep.</span><span style="color:#50FA7B;">trigger</span><span style="color:#F8F8F2;">()}</span></span>
<span class="line"><span style="color:#50FA7B;">  startBatch</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"><span style="color:#6272A4;">  // 获取收集的依赖</span></span>
<span class="line"><span style="color:#FF79C6;">  const</span><span style="color:#F8F8F2;"> depsMap </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> targetMap.</span><span style="color:#50FA7B;">get</span><span style="color:#F8F8F2;">(target)</span></span>
<span class="line"><span style="color:#F8F8F2;">  depsMap.</span><span style="color:#50FA7B;">forEach</span><span style="color:#F8F8F2;">(run)</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#FF79C6;">class</span><span style="color:#8BE9FD;"> Dep</span><span style="color:#F8F8F2;">{</span></span>
<span class="line"><span style="color:#50FA7B;">  trigger</span><span style="color:#F8F8F2;">(){</span></span>
<span class="line"><span style="color:#BD93F9;font-style:italic;">    this</span><span style="color:#F8F8F2;">.</span><span style="color:#50FA7B;">notify</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"><span style="color:#F8F8F2;">  },</span></span>
<span class="line"><span style="color:#50FA7B;">  notify</span><span style="color:#F8F8F2;">(){</span></span>
<span class="line"><span style="color:#50FA7B;">    starBatch</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"><span style="color:#6272A4;">    // 遍历订阅者链表，触发effect</span></span>
<span class="line"><span style="color:#FF79C6;">      for</span><span style="color:#F8F8F2;"> (</span><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> link </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;font-style:italic;"> this</span><span style="color:#F8F8F2;">.subs; link; link </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> link.prevSub) {</span></span>
<span class="line"><span style="color:#FF79C6;">        if</span><span style="color:#F8F8F2;"> (link.sub.</span><span style="color:#50FA7B;">notify</span><span style="color:#F8F8F2;">()) {</span></span>
<span class="line"><span style="color:#F8F8F2;">          ;(link.sub </span><span style="color:#FF79C6;">as</span><span style="color:#8BE9FD;font-style:italic;"> ComputedRefImpl</span><span style="color:#F8F8F2;">).dep.</span><span style="color:#50FA7B;">notify</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"><span style="color:#F8F8F2;">        }</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#50FA7B;">    endBatch</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#FF79C6;">class</span><span style="color:#8BE9FD;"> ReactiveEffect</span><span style="color:#F8F8F2;">{</span></span>
<span class="line"><span style="color:#50FA7B;">  notify</span><span style="color:#F8F8F2;">(){</span></span>
<span class="line"><span style="color:#50FA7B;">    batch</span><span style="color:#F8F8F2;">(</span><span style="color:#BD93F9;font-style:italic;">this</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">  },</span></span>
<span class="line"><span style="color:#50FA7B;">  trigger</span><span style="color:#F8F8F2;">(){</span></span>
<span class="line"><span style="color:#6272A4;">    //  派发更新</span></span>
<span class="line"><span style="color:#FF79C6;">    if</span><span style="color:#F8F8F2;"> (</span><span style="color:#BD93F9;font-style:italic;">this</span><span style="color:#F8F8F2;">.flags </span><span style="color:#FF79C6;">&amp;</span><span style="color:#F8F8F2;"> EffectFlags.</span><span style="color:#BD93F9;">PAUSED</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">      pausedQueueEffects.</span><span style="color:#50FA7B;">add</span><span style="color:#F8F8F2;">(</span><span style="color:#BD93F9;font-style:italic;">this</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">    } </span><span style="color:#FF79C6;">else</span><span style="color:#FF79C6;"> if</span><span style="color:#F8F8F2;"> (</span><span style="color:#BD93F9;font-style:italic;">this</span><span style="color:#F8F8F2;">.scheduler) {</span></span>
<span class="line"><span style="color:#6272A4;">      // 通过调度器来调用 fn</span></span>
<span class="line"><span style="color:#BD93F9;font-style:italic;">      this</span><span style="color:#F8F8F2;">.</span><span style="color:#50FA7B;">scheduler</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"><span style="color:#F8F8F2;">    } </span><span style="color:#FF79C6;">else</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#6272A4;">      // this.fn()</span></span>
<span class="line"><span style="color:#6272A4;">      // 触发回调函数进行更新</span></span>
<span class="line"><span style="color:#BD93F9;font-style:italic;">      this</span><span style="color:#F8F8F2;">.</span><span style="color:#50FA7B;">runIfDirty</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> batchDepth </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> 0</span></span>
<span class="line"><span style="color:#FF79C6;">function</span><span style="color:#50FA7B;"> starBatch</span><span style="color:#F8F8F2;">(){</span></span>
<span class="line"><span style="color:#F8F8F2;">  batchDepth </span><span style="color:#FF79C6;">++</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#FF79C6;">function</span><span style="color:#50FA7B;"> batch</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">sub</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">   batchedSub </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> sub</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#FF79C6;">function</span><span style="color:#50FA7B;"> endBatch</span><span style="color:#F8F8F2;">(){</span></span>
<span class="line"><span style="color:#FF79C6;">  if</span><span style="color:#F8F8F2;">(</span><span style="color:#FF79C6;">--</span><span style="color:#F8F8F2;">batchDepth </span><span style="color:#FF79C6;">===</span><span style="color:#BD93F9;"> 0</span><span style="color:#F8F8F2;">){</span></span>
<span class="line"><span style="color:#FF79C6;">    return</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">  batchedSub.</span><span style="color:#50FA7B;">trigger</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><details class="hint-container details"><summary>effect</summary><div class="language-ts line-numbers-mode" data-highlighter="shiki" data-ext="ts" data-title="ts" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">export</span><span style="color:#FF79C6;"> function</span><span style="color:#50FA7B;"> effect</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#FFB86C;font-style:italic;">T</span><span style="color:#FF79C6;"> =</span><span style="color:#8BE9FD;font-style:italic;"> any</span><span style="color:#F8F8F2;">&gt;(</span></span>
<span class="line"><span style="color:#50FA7B;">  fn</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> () </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#8BE9FD;font-style:italic;"> T</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#FFB86C;font-style:italic;">  options</span><span style="color:#FF79C6;">?:</span><span style="color:#8BE9FD;font-style:italic;"> ReactiveEffectOptions</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">)</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> ReactiveEffectRunner</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#FFB86C;font-style:italic;">T</span><span style="color:#F8F8F2;">&gt; {</span></span>
<span class="line"><span style="color:#6272A4;">  // // 如果传入的fn本身就是effect，那么就直接执行 effect的副作用</span></span>
<span class="line"><span style="color:#FF79C6;">  if</span><span style="color:#F8F8F2;"> ((fn </span><span style="color:#FF79C6;">as</span><span style="color:#8BE9FD;font-style:italic;"> ReactiveEffectRunner</span><span style="color:#F8F8F2;">).effect </span><span style="color:#FF79C6;">instanceof</span><span style="color:#8BE9FD;font-style:italic;"> ReactiveEffect</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">    fn </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> (fn </span><span style="color:#FF79C6;">as</span><span style="color:#8BE9FD;font-style:italic;"> ReactiveEffectRunner</span><span style="color:#F8F8F2;">).effect.fn</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">  const</span><span style="color:#F8F8F2;"> e </span><span style="color:#FF79C6;">=</span><span style="color:#FF79C6;font-weight:bold;"> new</span><span style="color:#50FA7B;"> ReactiveEffect</span><span style="color:#F8F8F2;">(fn)</span></span>
<span class="line"><span style="color:#FF79C6;">  if</span><span style="color:#F8F8F2;"> (options) {</span></span>
<span class="line"><span style="color:#50FA7B;">    extend</span><span style="color:#F8F8F2;">(e, options)</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#FF79C6;">  try</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">    e.</span><span style="color:#50FA7B;">run</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"><span style="color:#F8F8F2;">  } </span><span style="color:#FF79C6;">catch</span><span style="color:#F8F8F2;"> (err) {</span></span>
<span class="line"><span style="color:#F8F8F2;">    e.</span><span style="color:#50FA7B;">stop</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"><span style="color:#FF79C6;">    throw</span><span style="color:#F8F8F2;"> err</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#FF79C6;">  const</span><span style="color:#F8F8F2;"> runner </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> e.run.</span><span style="color:#50FA7B;">bind</span><span style="color:#F8F8F2;">(e) </span><span style="color:#FF79C6;">as</span><span style="color:#8BE9FD;font-style:italic;"> ReactiveEffectRunner</span></span>
<span class="line"><span style="color:#F8F8F2;">  runner.effect </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> e</span></span>
<span class="line"><span style="color:#FF79C6;">  return</span><span style="color:#F8F8F2;"> runner</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#FF79C6;">export</span><span style="color:#FF79C6;"> let</span><span style="color:#F8F8F2;"> activeEffectScope</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> EffectScope</span><span style="color:#FF79C6;"> |</span><span style="color:#8BE9FD;font-style:italic;"> undefined</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">export</span><span style="color:#FF79C6;"> class</span><span style="color:#8BE9FD;"> ReactiveEffect</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#FFB86C;font-style:italic;">T</span><span style="color:#FF79C6;"> =</span><span style="color:#8BE9FD;font-style:italic;"> any</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"><span style="color:#FF79C6;">  implements</span><span style="color:#8BE9FD;font-style:italic;"> Subscriber</span><span style="color:#F8F8F2;">, </span><span style="color:#8BE9FD;font-style:italic;">ReactiveEffectOptions</span></span>
<span class="line"><span style="color:#F8F8F2;">{</span></span>
<span class="line"><span style="color:#6272A4;">  /**</span></span>
<span class="line"><span style="color:#6272A4;">   * </span><span style="color:#FF79C6;">@internal</span></span>
<span class="line"><span style="color:#6272A4;">   */</span></span>
<span class="line"><span style="color:#F8F8F2;">  deps</span><span style="color:#FF79C6;">?:</span><span style="color:#8BE9FD;font-style:italic;"> Link</span><span style="color:#FF79C6;"> =</span><span style="color:#BD93F9;"> undefined</span></span>
<span class="line"><span style="color:#6272A4;">  /**</span></span>
<span class="line"><span style="color:#6272A4;">   * </span><span style="color:#FF79C6;">@internal</span></span>
<span class="line"><span style="color:#6272A4;">   */</span></span>
<span class="line"><span style="color:#F8F8F2;">  depsTail</span><span style="color:#FF79C6;">?:</span><span style="color:#8BE9FD;font-style:italic;"> Link</span><span style="color:#FF79C6;"> =</span><span style="color:#BD93F9;"> undefined</span></span>
<span class="line"><span style="color:#6272A4;">  /**</span></span>
<span class="line"><span style="color:#6272A4;">   * </span><span style="color:#FF79C6;">@internal</span></span>
<span class="line"><span style="color:#6272A4;">   */</span></span>
<span class="line"><span style="color:#F8F8F2;">  flags</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> EffectFlags</span><span style="color:#FF79C6;"> =</span><span style="color:#F8F8F2;"> EffectFlags.</span><span style="color:#BD93F9;">ACTIVE</span><span style="color:#FF79C6;"> |</span><span style="color:#F8F8F2;"> EffectFlags.</span><span style="color:#BD93F9;">TRACKING</span></span>
<span class="line"><span style="color:#6272A4;">  /**</span></span>
<span class="line"><span style="color:#6272A4;">   * </span><span style="color:#FF79C6;">@internal</span></span>
<span class="line"><span style="color:#6272A4;">   */</span></span>
<span class="line"><span style="color:#F8F8F2;">  next</span><span style="color:#FF79C6;">?:</span><span style="color:#8BE9FD;font-style:italic;"> Subscriber</span><span style="color:#FF79C6;"> =</span><span style="color:#BD93F9;"> undefined</span></span>
<span class="line"><span style="color:#6272A4;">  /**</span></span>
<span class="line"><span style="color:#6272A4;">   * </span><span style="color:#FF79C6;">@internal</span></span>
<span class="line"><span style="color:#6272A4;">   */</span></span>
<span class="line"><span style="color:#50FA7B;">  cleanup</span><span style="color:#FF79C6;">?:</span><span style="color:#F8F8F2;"> () </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#8BE9FD;font-style:italic;"> void</span><span style="color:#FF79C6;"> =</span><span style="color:#BD93F9;"> undefined</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">  scheduler</span><span style="color:#FF79C6;">?:</span><span style="color:#8BE9FD;font-style:italic;"> EffectScheduler</span><span style="color:#FF79C6;"> =</span><span style="color:#BD93F9;"> undefined</span></span>
<span class="line"><span style="color:#50FA7B;">  onStop</span><span style="color:#FF79C6;">?:</span><span style="color:#F8F8F2;"> () </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#8BE9FD;font-style:italic;"> void</span></span>
<span class="line"><span style="color:#50FA7B;">  onTrack</span><span style="color:#FF79C6;">?:</span><span style="color:#F8F8F2;"> (</span><span style="color:#FFB86C;font-style:italic;">event</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> DebuggerEvent</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#8BE9FD;font-style:italic;"> void</span></span>
<span class="line"><span style="color:#50FA7B;">  onTrigger</span><span style="color:#FF79C6;">?:</span><span style="color:#F8F8F2;"> (</span><span style="color:#FFB86C;font-style:italic;">event</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> DebuggerEvent</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#8BE9FD;font-style:italic;"> void</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">  constructor</span><span style="color:#F8F8F2;">(</span><span style="color:#FF79C6;">public</span><span style="color:#50FA7B;"> fn</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> () </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#8BE9FD;font-style:italic;"> T</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#FF79C6;">    if</span><span style="color:#F8F8F2;"> (activeEffectScope </span><span style="color:#FF79C6;">&amp;&amp;</span><span style="color:#F8F8F2;"> activeEffectScope.active) {</span></span>
<span class="line"><span style="color:#F8F8F2;">      activeEffectScope.effects.</span><span style="color:#50FA7B;">push</span><span style="color:#F8F8F2;">(</span><span style="color:#BD93F9;font-style:italic;">this</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#50FA7B;">  pause</span><span style="color:#F8F8F2;">()</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> void</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#BD93F9;font-style:italic;">    this</span><span style="color:#F8F8F2;">.flags </span><span style="color:#FF79C6;">|=</span><span style="color:#F8F8F2;"> EffectFlags.</span><span style="color:#BD93F9;">PAUSED</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#50FA7B;">  resume</span><span style="color:#F8F8F2;">()</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> void</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#FF79C6;">    if</span><span style="color:#F8F8F2;"> (</span><span style="color:#BD93F9;font-style:italic;">this</span><span style="color:#F8F8F2;">.flags </span><span style="color:#FF79C6;">&amp;</span><span style="color:#F8F8F2;"> EffectFlags.</span><span style="color:#BD93F9;">PAUSED</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#BD93F9;font-style:italic;">      this</span><span style="color:#F8F8F2;">.flags </span><span style="color:#FF79C6;">&amp;=</span><span style="color:#FF79C6;"> ~</span><span style="color:#F8F8F2;">EffectFlags.</span><span style="color:#BD93F9;">PAUSED</span></span>
<span class="line"><span style="color:#FF79C6;">      if</span><span style="color:#F8F8F2;"> (pausedQueueEffects.</span><span style="color:#50FA7B;">has</span><span style="color:#F8F8F2;">(</span><span style="color:#BD93F9;font-style:italic;">this</span><span style="color:#F8F8F2;">)) {</span></span>
<span class="line"><span style="color:#F8F8F2;">        pausedQueueEffects.</span><span style="color:#50FA7B;">delete</span><span style="color:#F8F8F2;">(</span><span style="color:#BD93F9;font-style:italic;">this</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#BD93F9;font-style:italic;">        this</span><span style="color:#F8F8F2;">.</span><span style="color:#50FA7B;">trigger</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"><span style="color:#F8F8F2;">      }</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">  /**</span></span>
<span class="line"><span style="color:#6272A4;">   * </span><span style="color:#FF79C6;">@internal</span></span>
<span class="line"><span style="color:#6272A4;">   */</span></span>
<span class="line"><span style="color:#50FA7B;">  notify</span><span style="color:#F8F8F2;">()</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> void</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#FF79C6;">    if</span><span style="color:#F8F8F2;"> (</span></span>
<span class="line"><span style="color:#BD93F9;font-style:italic;">      this</span><span style="color:#F8F8F2;">.flags </span><span style="color:#FF79C6;">&amp;</span><span style="color:#F8F8F2;"> EffectFlags.</span><span style="color:#BD93F9;">RUNNING</span><span style="color:#FF79C6;"> &amp;&amp;</span></span>
<span class="line"><span style="color:#FF79C6;">      !</span><span style="color:#F8F8F2;">(</span><span style="color:#BD93F9;font-style:italic;">this</span><span style="color:#F8F8F2;">.flags </span><span style="color:#FF79C6;">&amp;</span><span style="color:#F8F8F2;"> EffectFlags.</span><span style="color:#BD93F9;">ALLOW_RECURSE</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">    ) {</span></span>
<span class="line"><span style="color:#FF79C6;">      return</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#FF79C6;">    if</span><span style="color:#F8F8F2;"> (</span><span style="color:#FF79C6;">!</span><span style="color:#F8F8F2;">(</span><span style="color:#BD93F9;font-style:italic;">this</span><span style="color:#F8F8F2;">.flags </span><span style="color:#FF79C6;">&amp;</span><span style="color:#F8F8F2;"> EffectFlags.</span><span style="color:#BD93F9;">NOTIFIED</span><span style="color:#F8F8F2;">)) {</span></span>
<span class="line"><span style="color:#50FA7B;">      batch</span><span style="color:#F8F8F2;">(</span><span style="color:#BD93F9;font-style:italic;">this</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#50FA7B;">  run</span><span style="color:#F8F8F2;">()</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> T</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#6272A4;">    // TODO cleanupEffect</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">    if</span><span style="color:#F8F8F2;"> (</span><span style="color:#FF79C6;">!</span><span style="color:#F8F8F2;">(</span><span style="color:#BD93F9;font-style:italic;">this</span><span style="color:#F8F8F2;">.flags </span><span style="color:#FF79C6;">&amp;</span><span style="color:#F8F8F2;"> EffectFlags.</span><span style="color:#BD93F9;">ACTIVE</span><span style="color:#F8F8F2;">)) {</span></span>
<span class="line"><span style="color:#6272A4;">      // stopped during cleanup</span></span>
<span class="line"><span style="color:#FF79C6;">      return</span><span style="color:#BD93F9;font-style:italic;"> this</span><span style="color:#F8F8F2;">.</span><span style="color:#50FA7B;">fn</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BD93F9;font-style:italic;">    this</span><span style="color:#F8F8F2;">.flags </span><span style="color:#FF79C6;">|=</span><span style="color:#F8F8F2;"> EffectFlags.</span><span style="color:#BD93F9;">RUNNING</span></span>
<span class="line"><span style="color:#50FA7B;">    cleanupEffect</span><span style="color:#F8F8F2;">(</span><span style="color:#BD93F9;font-style:italic;">this</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#50FA7B;">    prepareDeps</span><span style="color:#F8F8F2;">(</span><span style="color:#BD93F9;font-style:italic;">this</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#FF79C6;">    const</span><span style="color:#F8F8F2;"> prevEffect </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> activeSub</span></span>
<span class="line"><span style="color:#FF79C6;">    const</span><span style="color:#F8F8F2;"> prevShouldTrack </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> shouldTrack</span></span>
<span class="line"><span style="color:#F8F8F2;">    activeSub </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;font-style:italic;"> this</span></span>
<span class="line"><span style="color:#F8F8F2;">    shouldTrack </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> true</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">    try</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#FF79C6;">      return</span><span style="color:#BD93F9;font-style:italic;"> this</span><span style="color:#F8F8F2;">.</span><span style="color:#50FA7B;">fn</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"><span style="color:#F8F8F2;">    } </span><span style="color:#FF79C6;">finally</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#FF79C6;">      if</span><span style="color:#F8F8F2;"> (__DEV__ </span><span style="color:#FF79C6;">&amp;&amp;</span><span style="color:#F8F8F2;"> activeSub </span><span style="color:#FF79C6;">!==</span><span style="color:#BD93F9;font-style:italic;"> this</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#50FA7B;">        warn</span><span style="color:#F8F8F2;">(</span></span>
<span class="line"><span style="color:#E9F284;">          &#39;</span><span style="color:#F1FA8C;">Active effect was not restored correctly - </span><span style="color:#E9F284;">&#39;</span><span style="color:#FF79C6;"> +</span></span>
<span class="line"><span style="color:#E9F284;">            &#39;</span><span style="color:#F1FA8C;">this is likely a Vue internal bug.</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">        )</span></span>
<span class="line"><span style="color:#F8F8F2;">      }</span></span>
<span class="line"><span style="color:#50FA7B;">      cleanupDeps</span><span style="color:#F8F8F2;">(</span><span style="color:#BD93F9;font-style:italic;">this</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">      activeSub </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> prevEffect</span></span>
<span class="line"><span style="color:#F8F8F2;">      shouldTrack </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> prevShouldTrack</span></span>
<span class="line"><span style="color:#BD93F9;font-style:italic;">      this</span><span style="color:#F8F8F2;">.flags </span><span style="color:#FF79C6;">&amp;=</span><span style="color:#FF79C6;"> ~</span><span style="color:#F8F8F2;">EffectFlags.</span><span style="color:#BD93F9;">RUNNING</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#50FA7B;">  stop</span><span style="color:#F8F8F2;">()</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> void</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#FF79C6;">    if</span><span style="color:#F8F8F2;"> (</span><span style="color:#BD93F9;font-style:italic;">this</span><span style="color:#F8F8F2;">.flags </span><span style="color:#FF79C6;">&amp;</span><span style="color:#F8F8F2;"> EffectFlags.</span><span style="color:#BD93F9;">ACTIVE</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#FF79C6;">      for</span><span style="color:#F8F8F2;"> (</span><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> link </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;font-style:italic;"> this</span><span style="color:#F8F8F2;">.deps; link; link </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> link.nextDep) {</span></span>
<span class="line"><span style="color:#50FA7B;">        removeSub</span><span style="color:#F8F8F2;">(link)</span></span>
<span class="line"><span style="color:#F8F8F2;">      }</span></span>
<span class="line"><span style="color:#BD93F9;font-style:italic;">      this</span><span style="color:#F8F8F2;">.deps </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;font-style:italic;"> this</span><span style="color:#F8F8F2;">.depsTail </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> undefined</span></span>
<span class="line"><span style="color:#50FA7B;">      cleanupEffect</span><span style="color:#F8F8F2;">(</span><span style="color:#BD93F9;font-style:italic;">this</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#BD93F9;font-style:italic;">      this</span><span style="color:#F8F8F2;">.onStop </span><span style="color:#FF79C6;">&amp;&amp;</span><span style="color:#BD93F9;font-style:italic;"> this</span><span style="color:#F8F8F2;">.</span><span style="color:#50FA7B;">onStop</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"><span style="color:#BD93F9;font-style:italic;">      this</span><span style="color:#F8F8F2;">.flags </span><span style="color:#FF79C6;">&amp;=</span><span style="color:#FF79C6;"> ~</span><span style="color:#F8F8F2;">EffectFlags.</span><span style="color:#BD93F9;">ACTIVE</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#50FA7B;">  trigger</span><span style="color:#F8F8F2;">()</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> void</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#FF79C6;">    if</span><span style="color:#F8F8F2;"> (</span><span style="color:#BD93F9;font-style:italic;">this</span><span style="color:#F8F8F2;">.flags </span><span style="color:#FF79C6;">&amp;</span><span style="color:#F8F8F2;"> EffectFlags.</span><span style="color:#BD93F9;">PAUSED</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">      pausedQueueEffects.</span><span style="color:#50FA7B;">add</span><span style="color:#F8F8F2;">(</span><span style="color:#BD93F9;font-style:italic;">this</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">    } </span><span style="color:#FF79C6;">else</span><span style="color:#FF79C6;"> if</span><span style="color:#F8F8F2;"> (</span><span style="color:#BD93F9;font-style:italic;">this</span><span style="color:#F8F8F2;">.scheduler) {</span></span>
<span class="line"><span style="color:#BD93F9;font-style:italic;">      this</span><span style="color:#F8F8F2;">.</span><span style="color:#50FA7B;">scheduler</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"><span style="color:#F8F8F2;">    } </span><span style="color:#FF79C6;">else</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#BD93F9;font-style:italic;">      this</span><span style="color:#F8F8F2;">.</span><span style="color:#50FA7B;">runIfDirty</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">  /**</span></span>
<span class="line"><span style="color:#6272A4;">   * </span><span style="color:#FF79C6;">@internal</span></span>
<span class="line"><span style="color:#6272A4;">   */</span></span>
<span class="line"><span style="color:#50FA7B;">  runIfDirty</span><span style="color:#F8F8F2;">()</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> void</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#FF79C6;">    if</span><span style="color:#F8F8F2;"> (</span><span style="color:#50FA7B;">isDirty</span><span style="color:#F8F8F2;">(</span><span style="color:#BD93F9;font-style:italic;">this</span><span style="color:#F8F8F2;">)) {</span></span>
<span class="line"><span style="color:#BD93F9;font-style:italic;">      this</span><span style="color:#F8F8F2;">.</span><span style="color:#50FA7B;">run</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">  get</span><span style="color:#50FA7B;"> dirty</span><span style="color:#F8F8F2;">()</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> boolean</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#FF79C6;">    return</span><span style="color:#50FA7B;"> isDirty</span><span style="color:#F8F8F2;">(</span><span style="color:#BD93F9;font-style:italic;">this</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h1 id="dep" tabindex="-1"><a class="header-anchor" href="#dep"><span>Dep</span></a></h1><ul><li><code>targetMap</code>:存储了每个 &quot;响应性对象属性&quot; 关联的依赖；类型是 WeakMap</li><li><code>depsMap</code>: 存储了每个属性的依赖；类型是 Map</li><li><code>dep</code>: 存储了 effects ，一个 effects 集，这些 effect 在值发生变化时重新运行;类型是 Set</li></ul><figure><img src="`+p+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><div class="language-ts line-numbers-mode" data-highlighter="shiki" data-ext="ts" data-title="ts" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#6272A4;">//  存储effects ，一个 effects 集，这些 effect 在值发生变化时重新运行</span></span>
<span class="line"><span style="color:#FF79C6;">class</span><span style="color:#8BE9FD;"> Dep</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  activeLink </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> undefined</span></span>
<span class="line"><span style="color:#50FA7B;">  track</span><span style="color:#F8F8F2;">(){</span></span>
<span class="line"><span style="color:#6272A4;">    // activeSub = ReactiveEffect</span></span>
<span class="line"><span style="color:#F8F8F2;">    link </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;font-style:italic;"> this</span><span style="color:#F8F8F2;">.activeLink </span><span style="color:#FF79C6;">=</span><span style="color:#FF79C6;font-weight:bold;"> new</span><span style="color:#50FA7B;"> Link</span><span style="color:#F8F8F2;">(activeSub,</span><span style="color:#BD93F9;font-style:italic;">this</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#6272A4;">    // 建立链表，将链表的当前指向link,上一个link改为prevSub</span></span>
<span class="line"><span style="color:#50FA7B;">    addSub</span><span style="color:#F8F8F2;">(link)</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#50FA7B;">  trigger</span><span style="color:#F8F8F2;">(){</span></span>
<span class="line"><span style="color:#BD93F9;font-style:italic;">    this</span><span style="color:#F8F8F2;">.</span><span style="color:#50FA7B;">notify</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#50FA7B;">  notify</span><span style="color:#F8F8F2;">(){</span></span>
<span class="line"><span style="color:#50FA7B;">    startBatch</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"><span style="color:#FF79C6;">    try</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#6272A4;">      // 循环遍历链表</span></span>
<span class="line"><span style="color:#FF79C6;">      for</span><span style="color:#F8F8F2;"> (</span><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> link </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;font-style:italic;"> this</span><span style="color:#F8F8F2;">.subs; link; link </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> link.prevSub) {</span></span>
<span class="line"><span style="color:#FF79C6;">        if</span><span style="color:#F8F8F2;"> (link.sub.</span><span style="color:#50FA7B;">notify</span><span style="color:#F8F8F2;">()) {</span></span>
<span class="line"><span style="color:#F8F8F2;">          ;(link.sub </span><span style="color:#FF79C6;">as</span><span style="color:#8BE9FD;font-style:italic;"> ComputedRefImpl</span><span style="color:#F8F8F2;">).dep.</span><span style="color:#50FA7B;">notify</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"><span style="color:#F8F8F2;">        }</span></span>
<span class="line"><span style="color:#F8F8F2;">      }</span></span>
<span class="line"><span style="color:#F8F8F2;">    } </span><span style="color:#FF79C6;">finally</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#50FA7B;">      endBatch</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#6272A4;">// 存储了每个 &quot;响应性对象属性&quot; 关联的依赖</span></span>
<span class="line"><span style="color:#FF79C6;">export</span><span style="color:#FF79C6;"> const</span><span style="color:#F8F8F2;"> targetMap</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> WeakMap</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#8BE9FD;font-style:italic;">object</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">KeyToDepMap</span><span style="color:#F8F8F2;">&gt; </span><span style="color:#FF79C6;">=</span><span style="color:#FF79C6;font-weight:bold;"> new</span><span style="color:#50FA7B;"> WeakMap</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">function</span><span style="color:#50FA7B;"> track</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">target</span><span style="color:#F8F8F2;">,</span><span style="color:#FFB86C;font-style:italic;">type</span><span style="color:#F8F8F2;">,</span><span style="color:#FFB86C;font-style:italic;">key</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#FF79C6;">    let</span><span style="color:#F8F8F2;"> depsMap </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> targetMap.</span><span style="color:#50FA7B;">get</span><span style="color:#F8F8F2;">(target)</span></span>
<span class="line"><span style="color:#FF79C6;">    if</span><span style="color:#F8F8F2;"> (</span><span style="color:#FF79C6;">!</span><span style="color:#F8F8F2;">depsMap) {</span></span>
<span class="line"><span style="color:#6272A4;">      //depsMap 存储了每个属性的依赖；</span></span>
<span class="line"><span style="color:#F8F8F2;">      targetMap.</span><span style="color:#50FA7B;">set</span><span style="color:#F8F8F2;">(target, (depsMap </span><span style="color:#FF79C6;">=</span><span style="color:#FF79C6;font-weight:bold;"> new</span><span style="color:#50FA7B;"> Map</span><span style="color:#F8F8F2;">()))</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#FF79C6;">    let</span><span style="color:#F8F8F2;"> dep </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> depsMap.</span><span style="color:#50FA7B;">get</span><span style="color:#F8F8F2;">(key)</span></span>
<span class="line"><span style="color:#FF79C6;">    if</span><span style="color:#F8F8F2;"> (</span><span style="color:#FF79C6;">!</span><span style="color:#F8F8F2;">dep) {</span></span>
<span class="line"><span style="color:#F8F8F2;">      depsMap.</span><span style="color:#50FA7B;">set</span><span style="color:#F8F8F2;">(key, (dep </span><span style="color:#FF79C6;">=</span><span style="color:#FF79C6;font-weight:bold;"> new</span><span style="color:#50FA7B;"> Dep</span><span style="color:#F8F8F2;">()))</span></span>
<span class="line"><span style="color:#F8F8F2;">      dep.map </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> depsMap</span></span>
<span class="line"><span style="color:#F8F8F2;">      dep.key </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> key</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">    dep.</span><span style="color:#50FA7B;">track</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#FF79C6;">function</span><span style="color:#50FA7B;"> trigger</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">target</span><span style="color:#F8F8F2;">,</span><span style="color:#FFB86C;font-style:italic;">type</span><span style="color:#F8F8F2;">,</span><span style="color:#FFB86C;font-style:italic;">key</span><span style="color:#F8F8F2;">,</span><span style="color:#FFB86C;font-style:italic;">newValue</span><span style="color:#F8F8F2;">,</span><span style="color:#FFB86C;font-style:italic;">oldValue</span><span style="color:#F8F8F2;">,</span><span style="color:#FFB86C;font-style:italic;">oldTarget</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#FF79C6;">  const</span><span style="color:#F8F8F2;"> depsMap </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> targetMap.</span><span style="color:#50FA7B;">get</span><span style="color:#F8F8F2;">(target)</span></span>
<span class="line"><span style="color:#FF79C6;">  const</span><span style="color:#50FA7B;"> run</span><span style="color:#FF79C6;"> =</span><span style="color:#FFB86C;font-style:italic;"> dep</span><span style="color:#FF79C6;"> =&gt;</span><span style="color:#F8F8F2;"> dep.</span><span style="color:#50FA7B;">trigger</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"><span style="color:#50FA7B;">  startBatch</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"><span style="color:#F8F8F2;">  depsMap.</span><span style="color:#50FA7B;">forEach</span><span style="color:#F8F8F2;">(run)</span></span>
<span class="line"><span style="color:#50FA7B;">  endBatch</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><details class="hint-container details"><summary>track</summary><div class="language-ts line-numbers-mode" data-highlighter="shiki" data-ext="ts" data-title="ts" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">export</span><span style="color:#FF79C6;"> const</span><span style="color:#F8F8F2;"> targetMap</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> WeakMap</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#8BE9FD;font-style:italic;">object</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">KeyToDepMap</span><span style="color:#F8F8F2;">&gt; </span><span style="color:#FF79C6;">=</span><span style="color:#FF79C6;font-weight:bold;"> new</span><span style="color:#50FA7B;"> WeakMap</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">/**</span></span>
<span class="line"><span style="color:#6272A4;"> * Tracks access to a reactive property.</span></span>
<span class="line"><span style="color:#6272A4;"> *</span></span>
<span class="line"><span style="color:#6272A4;"> * This will check which effect is running at the moment and record it as dep</span></span>
<span class="line"><span style="color:#6272A4;"> * which records all effects that depend on the reactive property.</span></span>
<span class="line"><span style="color:#6272A4;"> *</span></span>
<span class="line"><span style="color:#6272A4;"> * </span><span style="color:#FF79C6;">@param</span><span style="color:#FFB86C;font-style:italic;"> target</span><span style="color:#6272A4;"> - Object holding the reactive property.</span></span>
<span class="line"><span style="color:#6272A4;"> * </span><span style="color:#FF79C6;">@param</span><span style="color:#FFB86C;font-style:italic;"> type</span><span style="color:#6272A4;"> - Defines the type of access to the reactive property.</span></span>
<span class="line"><span style="color:#6272A4;"> * </span><span style="color:#FF79C6;">@param</span><span style="color:#FFB86C;font-style:italic;"> key</span><span style="color:#6272A4;"> - Identifier of the reactive property to track.</span></span>
<span class="line"><span style="color:#6272A4;"> */</span></span>
<span class="line"><span style="color:#FF79C6;">export</span><span style="color:#FF79C6;"> function</span><span style="color:#50FA7B;"> track</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">target</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> object</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">type</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> TrackOpTypes</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">key</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> unknown</span><span style="color:#F8F8F2;">)</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> void</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#FF79C6;">  if</span><span style="color:#F8F8F2;"> (shouldTrack </span><span style="color:#FF79C6;">&amp;&amp;</span><span style="color:#F8F8F2;"> activeSub) {</span></span>
<span class="line"><span style="color:#FF79C6;">    let</span><span style="color:#F8F8F2;"> depsMap </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> targetMap.</span><span style="color:#50FA7B;">get</span><span style="color:#F8F8F2;">(target)</span></span>
<span class="line"><span style="color:#FF79C6;">    if</span><span style="color:#F8F8F2;"> (</span><span style="color:#FF79C6;">!</span><span style="color:#F8F8F2;">depsMap) {</span></span>
<span class="line"><span style="color:#F8F8F2;">      targetMap.</span><span style="color:#50FA7B;">set</span><span style="color:#F8F8F2;">(target, (depsMap </span><span style="color:#FF79C6;">=</span><span style="color:#FF79C6;font-weight:bold;"> new</span><span style="color:#50FA7B;"> Map</span><span style="color:#F8F8F2;">()))</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#FF79C6;">    let</span><span style="color:#F8F8F2;"> dep </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> depsMap.</span><span style="color:#50FA7B;">get</span><span style="color:#F8F8F2;">(key)</span></span>
<span class="line"><span style="color:#FF79C6;">    if</span><span style="color:#F8F8F2;"> (</span><span style="color:#FF79C6;">!</span><span style="color:#F8F8F2;">dep) {</span></span>
<span class="line"><span style="color:#F8F8F2;">      depsMap.</span><span style="color:#50FA7B;">set</span><span style="color:#F8F8F2;">(key, (dep </span><span style="color:#FF79C6;">=</span><span style="color:#FF79C6;font-weight:bold;"> new</span><span style="color:#50FA7B;"> Dep</span><span style="color:#F8F8F2;">()))</span></span>
<span class="line"><span style="color:#F8F8F2;">      dep.map </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> depsMap</span></span>
<span class="line"><span style="color:#F8F8F2;">      dep.key </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> key</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#FF79C6;">    if</span><span style="color:#F8F8F2;"> (__DEV__) {</span></span>
<span class="line"><span style="color:#F8F8F2;">      dep.</span><span style="color:#50FA7B;">track</span><span style="color:#F8F8F2;">({</span></span>
<span class="line"><span style="color:#F8F8F2;">        target,</span></span>
<span class="line"><span style="color:#F8F8F2;">        type,</span></span>
<span class="line"><span style="color:#F8F8F2;">        key,</span></span>
<span class="line"><span style="color:#F8F8F2;">      })</span></span>
<span class="line"><span style="color:#F8F8F2;">    } </span><span style="color:#FF79C6;">else</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">      dep.</span><span style="color:#50FA7B;">track</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><details class="hint-container details"><summary>trigger</summary><div class="language-ts line-numbers-mode" data-highlighter="shiki" data-ext="ts" data-title="ts" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#6272A4;">/**</span></span>
<span class="line"><span style="color:#6272A4;"> * Finds all deps associated with the target (or a specific property) and</span></span>
<span class="line"><span style="color:#6272A4;"> * triggers the effects stored within.</span></span>
<span class="line"><span style="color:#6272A4;"> *</span></span>
<span class="line"><span style="color:#6272A4;"> * </span><span style="color:#FF79C6;">@param</span><span style="color:#FFB86C;font-style:italic;"> target</span><span style="color:#6272A4;"> - The reactive object.</span></span>
<span class="line"><span style="color:#6272A4;"> * </span><span style="color:#FF79C6;">@param</span><span style="color:#FFB86C;font-style:italic;"> type</span><span style="color:#6272A4;"> - Defines the type of the operation that needs to trigger effects.</span></span>
<span class="line"><span style="color:#6272A4;"> * </span><span style="color:#FF79C6;">@param</span><span style="color:#FFB86C;font-style:italic;"> key</span><span style="color:#6272A4;"> - Can be used to target a specific reactive property in the target object.</span></span>
<span class="line"><span style="color:#6272A4;"> */</span></span>
<span class="line"><span style="color:#FF79C6;">export</span><span style="color:#FF79C6;"> function</span><span style="color:#50FA7B;"> trigger</span><span style="color:#F8F8F2;">(</span></span>
<span class="line"><span style="color:#FFB86C;font-style:italic;">  target</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> object</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#FFB86C;font-style:italic;">  type</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> TriggerOpTypes</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#FFB86C;font-style:italic;">  key</span><span style="color:#FF79C6;">?:</span><span style="color:#8BE9FD;font-style:italic;"> unknown</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#FFB86C;font-style:italic;">  newValue</span><span style="color:#FF79C6;">?:</span><span style="color:#8BE9FD;font-style:italic;"> unknown</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#FFB86C;font-style:italic;">  oldValue</span><span style="color:#FF79C6;">?:</span><span style="color:#8BE9FD;font-style:italic;"> unknown</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#FFB86C;font-style:italic;">  oldTarget</span><span style="color:#FF79C6;">?:</span><span style="color:#8BE9FD;font-style:italic;"> Map</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#8BE9FD;font-style:italic;">unknown</span><span style="color:#F8F8F2;">, </span><span style="color:#8BE9FD;font-style:italic;">unknown</span><span style="color:#F8F8F2;">&gt; </span><span style="color:#FF79C6;">|</span><span style="color:#8BE9FD;font-style:italic;"> Set</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#8BE9FD;font-style:italic;">unknown</span><span style="color:#F8F8F2;">&gt;,</span></span>
<span class="line"><span style="color:#F8F8F2;">)</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> void</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#FF79C6;">  const</span><span style="color:#F8F8F2;"> depsMap </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> targetMap.</span><span style="color:#50FA7B;">get</span><span style="color:#F8F8F2;">(target)</span></span>
<span class="line"><span style="color:#FF79C6;">  if</span><span style="color:#F8F8F2;"> (</span><span style="color:#FF79C6;">!</span><span style="color:#F8F8F2;">depsMap) {</span></span>
<span class="line"><span style="color:#6272A4;">    // never been tracked</span></span>
<span class="line"><span style="color:#F8F8F2;">    globalVersion</span><span style="color:#FF79C6;">++</span></span>
<span class="line"><span style="color:#FF79C6;">    return</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">  const</span><span style="color:#50FA7B;"> run</span><span style="color:#FF79C6;"> =</span><span style="color:#F8F8F2;"> (</span><span style="color:#FFB86C;font-style:italic;">dep</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> Dep</span><span style="color:#FF79C6;"> |</span><span style="color:#8BE9FD;font-style:italic;"> undefined</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#FF79C6;">    if</span><span style="color:#F8F8F2;"> (dep) {</span></span>
<span class="line"><span style="color:#FF79C6;">      if</span><span style="color:#F8F8F2;"> (__DEV__) {</span></span>
<span class="line"><span style="color:#F8F8F2;">        dep.</span><span style="color:#50FA7B;">trigger</span><span style="color:#F8F8F2;">({</span></span>
<span class="line"><span style="color:#F8F8F2;">          target,</span></span>
<span class="line"><span style="color:#F8F8F2;">          type,</span></span>
<span class="line"><span style="color:#F8F8F2;">          key,</span></span>
<span class="line"><span style="color:#F8F8F2;">          newValue,</span></span>
<span class="line"><span style="color:#F8F8F2;">          oldValue,</span></span>
<span class="line"><span style="color:#F8F8F2;">          oldTarget,</span></span>
<span class="line"><span style="color:#F8F8F2;">        })</span></span>
<span class="line"><span style="color:#F8F8F2;">      } </span><span style="color:#FF79C6;">else</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">        dep.</span><span style="color:#50FA7B;">trigger</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"><span style="color:#F8F8F2;">      }</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#50FA7B;">  startBatch</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">  if</span><span style="color:#F8F8F2;"> (type </span><span style="color:#FF79C6;">===</span><span style="color:#F8F8F2;"> TriggerOpTypes.</span><span style="color:#BD93F9;">CLEAR</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#6272A4;">    // collection being cleared</span></span>
<span class="line"><span style="color:#6272A4;">    // trigger all effects for target</span></span>
<span class="line"><span style="color:#F8F8F2;">    depsMap.</span><span style="color:#50FA7B;">forEach</span><span style="color:#F8F8F2;">(run)</span></span>
<span class="line"><span style="color:#F8F8F2;">  } </span><span style="color:#FF79C6;">else</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#FF79C6;">    const</span><span style="color:#F8F8F2;"> targetIsArray </span><span style="color:#FF79C6;">=</span><span style="color:#50FA7B;"> isArray</span><span style="color:#F8F8F2;">(target)</span></span>
<span class="line"><span style="color:#FF79C6;">    const</span><span style="color:#F8F8F2;"> isArrayIndex </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> targetIsArray </span><span style="color:#FF79C6;">&amp;&amp;</span><span style="color:#50FA7B;"> isIntegerKey</span><span style="color:#F8F8F2;">(key)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">    if</span><span style="color:#F8F8F2;"> (targetIsArray </span><span style="color:#FF79C6;">&amp;&amp;</span><span style="color:#F8F8F2;"> key </span><span style="color:#FF79C6;">===</span><span style="color:#E9F284;"> &#39;</span><span style="color:#F1FA8C;">length</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#FF79C6;">      const</span><span style="color:#F8F8F2;"> newLength </span><span style="color:#FF79C6;">=</span><span style="color:#50FA7B;"> Number</span><span style="color:#F8F8F2;">(newValue)</span></span>
<span class="line"><span style="color:#F8F8F2;">      depsMap.</span><span style="color:#50FA7B;">forEach</span><span style="color:#F8F8F2;">((</span><span style="color:#FFB86C;font-style:italic;">dep</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">key</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#FF79C6;">        if</span><span style="color:#F8F8F2;"> (</span></span>
<span class="line"><span style="color:#F8F8F2;">          key </span><span style="color:#FF79C6;">===</span><span style="color:#E9F284;"> &#39;</span><span style="color:#F1FA8C;">length</span><span style="color:#E9F284;">&#39;</span><span style="color:#FF79C6;"> ||</span></span>
<span class="line"><span style="color:#F8F8F2;">          key </span><span style="color:#FF79C6;">===</span><span style="color:#F8F8F2;"> ARRAY_ITERATE_KEY </span><span style="color:#FF79C6;">||</span></span>
<span class="line"><span style="color:#F8F8F2;">          (</span><span style="color:#FF79C6;">!</span><span style="color:#50FA7B;">isSymbol</span><span style="color:#F8F8F2;">(key) </span><span style="color:#FF79C6;">&amp;&amp;</span><span style="color:#F8F8F2;"> key </span><span style="color:#FF79C6;">&gt;=</span><span style="color:#F8F8F2;"> newLength)</span></span>
<span class="line"><span style="color:#F8F8F2;">        ) {</span></span>
<span class="line"><span style="color:#50FA7B;">          run</span><span style="color:#F8F8F2;">(dep)</span></span>
<span class="line"><span style="color:#F8F8F2;">        }</span></span>
<span class="line"><span style="color:#F8F8F2;">      })</span></span>
<span class="line"><span style="color:#F8F8F2;">    } </span><span style="color:#FF79C6;">else</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#6272A4;">      // schedule runs for SET | ADD | DELETE</span></span>
<span class="line"><span style="color:#FF79C6;">      if</span><span style="color:#F8F8F2;"> (key </span><span style="color:#FF79C6;">!==</span><span style="color:#FF79C6;"> void</span><span style="color:#BD93F9;"> 0</span><span style="color:#FF79C6;"> ||</span><span style="color:#F8F8F2;"> depsMap.</span><span style="color:#50FA7B;">has</span><span style="color:#F8F8F2;">(</span><span style="color:#FF79C6;">void</span><span style="color:#BD93F9;"> 0</span><span style="color:#F8F8F2;">)) {</span></span>
<span class="line"><span style="color:#50FA7B;">        run</span><span style="color:#F8F8F2;">(depsMap.</span><span style="color:#50FA7B;">get</span><span style="color:#F8F8F2;">(key))</span></span>
<span class="line"><span style="color:#F8F8F2;">      }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">      // schedule ARRAY_ITERATE for any numeric key change (length is handled above)</span></span>
<span class="line"><span style="color:#FF79C6;">      if</span><span style="color:#F8F8F2;"> (isArrayIndex) {</span></span>
<span class="line"><span style="color:#50FA7B;">        run</span><span style="color:#F8F8F2;">(depsMap.</span><span style="color:#50FA7B;">get</span><span style="color:#F8F8F2;">(ARRAY_ITERATE_KEY))</span></span>
<span class="line"><span style="color:#F8F8F2;">      }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">      // also run for iteration key on ADD | DELETE | Map.SET</span></span>
<span class="line"><span style="color:#FF79C6;">      switch</span><span style="color:#F8F8F2;"> (type) {</span></span>
<span class="line"><span style="color:#FF79C6;">        case</span><span style="color:#F8F8F2;"> TriggerOpTypes.</span><span style="color:#BD93F9;">ADD</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#FF79C6;">          if</span><span style="color:#F8F8F2;"> (</span><span style="color:#FF79C6;">!</span><span style="color:#F8F8F2;">targetIsArray) {</span></span>
<span class="line"><span style="color:#50FA7B;">            run</span><span style="color:#F8F8F2;">(depsMap.</span><span style="color:#50FA7B;">get</span><span style="color:#F8F8F2;">(ITERATE_KEY))</span></span>
<span class="line"><span style="color:#FF79C6;">            if</span><span style="color:#F8F8F2;"> (</span><span style="color:#50FA7B;">isMap</span><span style="color:#F8F8F2;">(target)) {</span></span>
<span class="line"><span style="color:#50FA7B;">              run</span><span style="color:#F8F8F2;">(depsMap.</span><span style="color:#50FA7B;">get</span><span style="color:#F8F8F2;">(MAP_KEY_ITERATE_KEY))</span></span>
<span class="line"><span style="color:#F8F8F2;">            }</span></span>
<span class="line"><span style="color:#F8F8F2;">          } </span><span style="color:#FF79C6;">else</span><span style="color:#FF79C6;"> if</span><span style="color:#F8F8F2;"> (isArrayIndex) {</span></span>
<span class="line"><span style="color:#6272A4;">            // new index added to array -&gt; length changes</span></span>
<span class="line"><span style="color:#50FA7B;">            run</span><span style="color:#F8F8F2;">(depsMap.</span><span style="color:#50FA7B;">get</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">length</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">))</span></span>
<span class="line"><span style="color:#F8F8F2;">          }</span></span>
<span class="line"><span style="color:#FF79C6;">          break</span></span>
<span class="line"><span style="color:#FF79C6;">        case</span><span style="color:#F8F8F2;"> TriggerOpTypes.</span><span style="color:#BD93F9;">DELETE</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#FF79C6;">          if</span><span style="color:#F8F8F2;"> (</span><span style="color:#FF79C6;">!</span><span style="color:#F8F8F2;">targetIsArray) {</span></span>
<span class="line"><span style="color:#50FA7B;">            run</span><span style="color:#F8F8F2;">(depsMap.</span><span style="color:#50FA7B;">get</span><span style="color:#F8F8F2;">(ITERATE_KEY))</span></span>
<span class="line"><span style="color:#FF79C6;">            if</span><span style="color:#F8F8F2;"> (</span><span style="color:#50FA7B;">isMap</span><span style="color:#F8F8F2;">(target)) {</span></span>
<span class="line"><span style="color:#50FA7B;">              run</span><span style="color:#F8F8F2;">(depsMap.</span><span style="color:#50FA7B;">get</span><span style="color:#F8F8F2;">(MAP_KEY_ITERATE_KEY))</span></span>
<span class="line"><span style="color:#F8F8F2;">            }</span></span>
<span class="line"><span style="color:#F8F8F2;">          }</span></span>
<span class="line"><span style="color:#FF79C6;">          break</span></span>
<span class="line"><span style="color:#FF79C6;">        case</span><span style="color:#F8F8F2;"> TriggerOpTypes.</span><span style="color:#BD93F9;">SET</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#FF79C6;">          if</span><span style="color:#F8F8F2;"> (</span><span style="color:#50FA7B;">isMap</span><span style="color:#F8F8F2;">(target)) {</span></span>
<span class="line"><span style="color:#50FA7B;">            run</span><span style="color:#F8F8F2;">(depsMap.</span><span style="color:#50FA7B;">get</span><span style="color:#F8F8F2;">(ITERATE_KEY))</span></span>
<span class="line"><span style="color:#F8F8F2;">          }</span></span>
<span class="line"><span style="color:#FF79C6;">          break</span></span>
<span class="line"><span style="color:#F8F8F2;">      }</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#50FA7B;">  endBatch</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><details class="hint-container details"><summary>Dep</summary><div class="language-ts line-numbers-mode" data-highlighter="shiki" data-ext="ts" data-title="ts" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"></span>
<span class="line"><span style="color:#FF79C6;">export</span><span style="color:#FF79C6;"> class</span><span style="color:#8BE9FD;"> Dep</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  version </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> 0</span></span>
<span class="line"><span style="color:#6272A4;">  /**</span></span>
<span class="line"><span style="color:#6272A4;">   * Link between this dep and the current active effect</span></span>
<span class="line"><span style="color:#6272A4;">   */</span></span>
<span class="line"><span style="color:#F8F8F2;">  activeLink</span><span style="color:#FF79C6;">?:</span><span style="color:#8BE9FD;font-style:italic;"> Link</span><span style="color:#FF79C6;"> =</span><span style="color:#BD93F9;"> undefined</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">  /**</span></span>
<span class="line"><span style="color:#6272A4;">   * Doubly linked list representing the subscribing effects (tail)</span></span>
<span class="line"><span style="color:#6272A4;">   */</span></span>
<span class="line"><span style="color:#F8F8F2;">  subs</span><span style="color:#FF79C6;">?:</span><span style="color:#8BE9FD;font-style:italic;"> Link</span><span style="color:#FF79C6;"> =</span><span style="color:#BD93F9;"> undefined</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">  /**</span></span>
<span class="line"><span style="color:#6272A4;">   * Doubly linked list representing the subscribing effects (head)</span></span>
<span class="line"><span style="color:#6272A4;">   * DEV only, for invoking onTrigger hooks in correct order</span></span>
<span class="line"><span style="color:#6272A4;">   */</span></span>
<span class="line"><span style="color:#F8F8F2;">  subsHead</span><span style="color:#FF79C6;">?:</span><span style="color:#8BE9FD;font-style:italic;"> Link</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">  /**</span></span>
<span class="line"><span style="color:#6272A4;">   * For object property deps cleanup</span></span>
<span class="line"><span style="color:#6272A4;">   */</span></span>
<span class="line"><span style="color:#F8F8F2;">  map</span><span style="color:#FF79C6;">?:</span><span style="color:#8BE9FD;font-style:italic;"> KeyToDepMap</span><span style="color:#FF79C6;"> =</span><span style="color:#BD93F9;"> undefined</span></span>
<span class="line"><span style="color:#F8F8F2;">  key</span><span style="color:#FF79C6;">?:</span><span style="color:#8BE9FD;font-style:italic;"> unknown</span><span style="color:#FF79C6;"> =</span><span style="color:#BD93F9;"> undefined</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">  /**</span></span>
<span class="line"><span style="color:#6272A4;">   * Subscriber counter</span></span>
<span class="line"><span style="color:#6272A4;">   */</span></span>
<span class="line"><span style="color:#F8F8F2;">  sc</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> number</span><span style="color:#FF79C6;"> =</span><span style="color:#BD93F9;"> 0</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">  constructor</span><span style="color:#F8F8F2;">(</span><span style="color:#FF79C6;">public</span><span style="color:#FFB86C;font-style:italic;"> computed</span><span style="color:#FF79C6;">?:</span><span style="color:#8BE9FD;font-style:italic;"> ComputedRefImpl</span><span style="color:#FF79C6;"> |</span><span style="color:#8BE9FD;font-style:italic;"> undefined</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#FF79C6;">    if</span><span style="color:#F8F8F2;"> (__DEV__) {</span></span>
<span class="line"><span style="color:#BD93F9;font-style:italic;">      this</span><span style="color:#F8F8F2;">.subsHead </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> undefined</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#50FA7B;">  track</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">debugInfo</span><span style="color:#FF79C6;">?:</span><span style="color:#8BE9FD;font-style:italic;"> DebuggerEventExtraInfo</span><span style="color:#F8F8F2;">)</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> Link</span><span style="color:#FF79C6;"> |</span><span style="color:#8BE9FD;font-style:italic;"> undefined</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#FF79C6;">    if</span><span style="color:#F8F8F2;"> (</span><span style="color:#FF79C6;">!</span><span style="color:#F8F8F2;">activeSub </span><span style="color:#FF79C6;">||</span><span style="color:#FF79C6;"> !</span><span style="color:#F8F8F2;">shouldTrack </span><span style="color:#FF79C6;">||</span><span style="color:#F8F8F2;"> activeSub </span><span style="color:#FF79C6;">===</span><span style="color:#BD93F9;font-style:italic;"> this</span><span style="color:#F8F8F2;">.computed) {</span></span>
<span class="line"><span style="color:#FF79C6;">      return</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">    let</span><span style="color:#F8F8F2;"> link </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;font-style:italic;"> this</span><span style="color:#F8F8F2;">.activeLink</span></span>
<span class="line"><span style="color:#FF79C6;">    if</span><span style="color:#F8F8F2;"> (link </span><span style="color:#FF79C6;">===</span><span style="color:#BD93F9;"> undefined</span><span style="color:#FF79C6;"> ||</span><span style="color:#F8F8F2;"> link.sub </span><span style="color:#FF79C6;">!==</span><span style="color:#F8F8F2;"> activeSub) {</span></span>
<span class="line"><span style="color:#F8F8F2;">      link </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;font-style:italic;"> this</span><span style="color:#F8F8F2;">.activeLink </span><span style="color:#FF79C6;">=</span><span style="color:#FF79C6;font-weight:bold;"> new</span><span style="color:#50FA7B;"> Link</span><span style="color:#F8F8F2;">(activeSub, </span><span style="color:#BD93F9;font-style:italic;">this</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">      // add the link to the activeEffect as a dep (as tail)</span></span>
<span class="line"><span style="color:#FF79C6;">      if</span><span style="color:#F8F8F2;"> (</span><span style="color:#FF79C6;">!</span><span style="color:#F8F8F2;">activeSub.deps) {</span></span>
<span class="line"><span style="color:#F8F8F2;">        activeSub.deps </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> activeSub.depsTail </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> link</span></span>
<span class="line"><span style="color:#F8F8F2;">      } </span><span style="color:#FF79C6;">else</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">        link.prevDep </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> activeSub.depsTail</span></span>
<span class="line"><span style="color:#F8F8F2;">        activeSub.depsTail</span><span style="color:#FF79C6;">!</span><span style="color:#F8F8F2;">.nextDep </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> link</span></span>
<span class="line"><span style="color:#F8F8F2;">        activeSub.depsTail </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> link</span></span>
<span class="line"><span style="color:#F8F8F2;">      }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#50FA7B;">      addSub</span><span style="color:#F8F8F2;">(link)</span></span>
<span class="line"><span style="color:#F8F8F2;">    } </span><span style="color:#FF79C6;">else</span><span style="color:#FF79C6;"> if</span><span style="color:#F8F8F2;"> (link.version </span><span style="color:#FF79C6;">===</span><span style="color:#FF79C6;"> -</span><span style="color:#BD93F9;">1</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#6272A4;">      // reused from last run - already a sub, just sync version</span></span>
<span class="line"><span style="color:#F8F8F2;">      link.version </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;font-style:italic;"> this</span><span style="color:#F8F8F2;">.version</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">      // If this dep has a next, it means it&#39;s not at the tail - move it to the</span></span>
<span class="line"><span style="color:#6272A4;">      // tail. This ensures the effect&#39;s dep list is in the order they are</span></span>
<span class="line"><span style="color:#6272A4;">      // accessed during evaluation.</span></span>
<span class="line"><span style="color:#FF79C6;">      if</span><span style="color:#F8F8F2;"> (link.nextDep) {</span></span>
<span class="line"><span style="color:#FF79C6;">        const</span><span style="color:#F8F8F2;"> next </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> link.nextDep</span></span>
<span class="line"><span style="color:#F8F8F2;">        next.prevDep </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> link.prevDep</span></span>
<span class="line"><span style="color:#FF79C6;">        if</span><span style="color:#F8F8F2;"> (link.prevDep) {</span></span>
<span class="line"><span style="color:#F8F8F2;">          link.prevDep.nextDep </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> next</span></span>
<span class="line"><span style="color:#F8F8F2;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">        link.prevDep </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> activeSub.depsTail</span></span>
<span class="line"><span style="color:#F8F8F2;">        link.nextDep </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> undefined</span></span>
<span class="line"><span style="color:#F8F8F2;">        activeSub.depsTail</span><span style="color:#FF79C6;">!</span><span style="color:#F8F8F2;">.nextDep </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> link</span></span>
<span class="line"><span style="color:#F8F8F2;">        activeSub.depsTail </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> link</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">        // this was the head - point to the new head</span></span>
<span class="line"><span style="color:#FF79C6;">        if</span><span style="color:#F8F8F2;"> (activeSub.deps </span><span style="color:#FF79C6;">===</span><span style="color:#F8F8F2;"> link) {</span></span>
<span class="line"><span style="color:#F8F8F2;">          activeSub.deps </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> next</span></span>
<span class="line"><span style="color:#F8F8F2;">        }</span></span>
<span class="line"><span style="color:#F8F8F2;">      }</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">    if</span><span style="color:#F8F8F2;"> (__DEV__ </span><span style="color:#FF79C6;">&amp;&amp;</span><span style="color:#F8F8F2;"> activeSub.onTrack) {</span></span>
<span class="line"><span style="color:#F8F8F2;">      activeSub.</span><span style="color:#50FA7B;">onTrack</span><span style="color:#F8F8F2;">(</span></span>
<span class="line"><span style="color:#50FA7B;">        extend</span><span style="color:#F8F8F2;">(</span></span>
<span class="line"><span style="color:#F8F8F2;">          {</span></span>
<span class="line"><span style="color:#F8F8F2;">            effect</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> activeSub,</span></span>
<span class="line"><span style="color:#F8F8F2;">          },</span></span>
<span class="line"><span style="color:#F8F8F2;">          debugInfo,</span></span>
<span class="line"><span style="color:#F8F8F2;">        ),</span></span>
<span class="line"><span style="color:#F8F8F2;">      )</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">    return</span><span style="color:#F8F8F2;"> link</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#50FA7B;">  trigger</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">debugInfo</span><span style="color:#FF79C6;">?:</span><span style="color:#8BE9FD;font-style:italic;"> DebuggerEventExtraInfo</span><span style="color:#F8F8F2;">)</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> void</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#BD93F9;font-style:italic;">    this</span><span style="color:#F8F8F2;">.version</span><span style="color:#FF79C6;">++</span></span>
<span class="line"><span style="color:#F8F8F2;">    globalVersion</span><span style="color:#FF79C6;">++</span></span>
<span class="line"><span style="color:#BD93F9;font-style:italic;">    this</span><span style="color:#F8F8F2;">.</span><span style="color:#50FA7B;">notify</span><span style="color:#F8F8F2;">(debugInfo)</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#50FA7B;">  notify</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">debugInfo</span><span style="color:#FF79C6;">?:</span><span style="color:#8BE9FD;font-style:italic;"> DebuggerEventExtraInfo</span><span style="color:#F8F8F2;">)</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> void</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#50FA7B;">    startBatch</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"><span style="color:#FF79C6;">    try</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#FF79C6;">      if</span><span style="color:#F8F8F2;"> (__DEV__) {</span></span>
<span class="line"><span style="color:#6272A4;">        // subs are notified and batched in reverse-order and then invoked in</span></span>
<span class="line"><span style="color:#6272A4;">        // original order at the end of the batch, but onTrigger hooks should</span></span>
<span class="line"><span style="color:#6272A4;">        // be invoked in original order here.</span></span>
<span class="line"><span style="color:#FF79C6;">        for</span><span style="color:#F8F8F2;"> (</span><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> head </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;font-style:italic;"> this</span><span style="color:#F8F8F2;">.subsHead; head; head </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> head.nextSub) {</span></span>
<span class="line"><span style="color:#FF79C6;">          if</span><span style="color:#F8F8F2;"> (head.sub.onTrigger </span><span style="color:#FF79C6;">&amp;&amp;</span><span style="color:#FF79C6;"> !</span><span style="color:#F8F8F2;">(head.sub.flags </span><span style="color:#FF79C6;">&amp;</span><span style="color:#F8F8F2;"> EffectFlags.</span><span style="color:#BD93F9;">NOTIFIED</span><span style="color:#F8F8F2;">)) {</span></span>
<span class="line"><span style="color:#F8F8F2;">            head.sub.</span><span style="color:#50FA7B;">onTrigger</span><span style="color:#F8F8F2;">(</span></span>
<span class="line"><span style="color:#50FA7B;">              extend</span><span style="color:#F8F8F2;">(</span></span>
<span class="line"><span style="color:#F8F8F2;">                {</span></span>
<span class="line"><span style="color:#F8F8F2;">                  effect</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> head.sub,</span></span>
<span class="line"><span style="color:#F8F8F2;">                },</span></span>
<span class="line"><span style="color:#F8F8F2;">                debugInfo,</span></span>
<span class="line"><span style="color:#F8F8F2;">              ),</span></span>
<span class="line"><span style="color:#F8F8F2;">            )</span></span>
<span class="line"><span style="color:#F8F8F2;">          }</span></span>
<span class="line"><span style="color:#F8F8F2;">        }</span></span>
<span class="line"><span style="color:#F8F8F2;">      }</span></span>
<span class="line"><span style="color:#FF79C6;">      for</span><span style="color:#F8F8F2;"> (</span><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> link </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;font-style:italic;"> this</span><span style="color:#F8F8F2;">.subs; link; link </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> link.prevSub) {</span></span>
<span class="line"><span style="color:#FF79C6;">        if</span><span style="color:#F8F8F2;"> (link.sub.</span><span style="color:#50FA7B;">notify</span><span style="color:#F8F8F2;">()) {</span></span>
<span class="line"><span style="color:#6272A4;">          // if notify() returns \`true\`, this is a computed. Also call notify</span></span>
<span class="line"><span style="color:#6272A4;">          // on its dep - it&#39;s called here instead of inside computed&#39;s notify</span></span>
<span class="line"><span style="color:#6272A4;">          // in order to reduce call stack depth.</span></span>
<span class="line"><span style="color:#F8F8F2;">          ;(link.sub </span><span style="color:#FF79C6;">as</span><span style="color:#8BE9FD;font-style:italic;"> ComputedRefImpl</span><span style="color:#F8F8F2;">).dep.</span><span style="color:#50FA7B;">notify</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"><span style="color:#F8F8F2;">        }</span></span>
<span class="line"><span style="color:#F8F8F2;">      }</span></span>
<span class="line"><span style="color:#F8F8F2;">    } </span><span style="color:#FF79C6;">finally</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#50FA7B;">      endBatch</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">function</span><span style="color:#50FA7B;"> addSub</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">link</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> Link</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">  link.dep.sc</span><span style="color:#FF79C6;">++</span></span>
<span class="line"><span style="color:#FF79C6;">  if</span><span style="color:#F8F8F2;"> (link.sub.flags </span><span style="color:#FF79C6;">&amp;</span><span style="color:#F8F8F2;"> EffectFlags.</span><span style="color:#BD93F9;">TRACKING</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#FF79C6;">    const</span><span style="color:#F8F8F2;"> computed </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> link.dep.computed</span></span>
<span class="line"><span style="color:#6272A4;">    // computed getting its first subscriber</span></span>
<span class="line"><span style="color:#6272A4;">    // enable tracking + lazily subscribe to all its deps</span></span>
<span class="line"><span style="color:#FF79C6;">    if</span><span style="color:#F8F8F2;"> (computed </span><span style="color:#FF79C6;">&amp;&amp;</span><span style="color:#FF79C6;"> !</span><span style="color:#F8F8F2;">link.dep.subs) {</span></span>
<span class="line"><span style="color:#F8F8F2;">      computed.flags </span><span style="color:#FF79C6;">|=</span><span style="color:#F8F8F2;"> EffectFlags.</span><span style="color:#BD93F9;">TRACKING</span><span style="color:#FF79C6;"> |</span><span style="color:#F8F8F2;"> EffectFlags.</span><span style="color:#BD93F9;">DIRTY</span></span>
<span class="line"><span style="color:#FF79C6;">      for</span><span style="color:#F8F8F2;"> (</span><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> l </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> computed.deps; l; l </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> l.nextDep) {</span></span>
<span class="line"><span style="color:#50FA7B;">        addSub</span><span style="color:#F8F8F2;">(l)</span></span>
<span class="line"><span style="color:#F8F8F2;">      }</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">    const</span><span style="color:#F8F8F2;"> currentTail </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> link.dep.subs</span></span>
<span class="line"><span style="color:#FF79C6;">    if</span><span style="color:#F8F8F2;"> (currentTail </span><span style="color:#FF79C6;">!==</span><span style="color:#F8F8F2;"> link) {</span></span>
<span class="line"><span style="color:#F8F8F2;">      link.prevSub </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> currentTail</span></span>
<span class="line"><span style="color:#FF79C6;">      if</span><span style="color:#F8F8F2;"> (currentTail) currentTail.nextSub </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> link</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">    if</span><span style="color:#F8F8F2;"> (__DEV__ </span><span style="color:#FF79C6;">&amp;&amp;</span><span style="color:#F8F8F2;"> link.dep.subsHead </span><span style="color:#FF79C6;">===</span><span style="color:#BD93F9;"> undefined</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">      link.dep.subsHead </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> link</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">    link.dep.subs </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> link</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h1 id="summary" tabindex="-1"><a class="header-anchor" href="#summary"><span>summary</span></a></h1><ul><li><code>targetMap</code>:存储了每个 &quot;响应性对象&quot; 关联的依赖；类型是 WeakMap</li><li><code>depsMap</code>: 存储了每个属性的依赖；类型是 Map</li><li><code>dep</code>: 一个class, 存储了 effects ，通过链表的形式存储了effect</li></ul><div class="language-ts line-numbers-mode" data-highlighter="shiki" data-ext="ts" data-title="ts" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">export</span><span style="color:#FF79C6;"> const</span><span style="color:#F8F8F2;"> targetMap</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> WeakMap</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#8BE9FD;font-style:italic;">object</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">KeyToDepMap</span><span style="color:#F8F8F2;">&gt; </span><span style="color:#FF79C6;">=</span><span style="color:#FF79C6;font-weight:bold;"> new</span><span style="color:#50FA7B;"> WeakMap</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"><span style="color:#FF79C6;">export</span><span style="color:#FF79C6;"> function</span><span style="color:#50FA7B;"> track</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">target</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> object</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">type</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> TrackOpTypes</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">key</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> unknown</span><span style="color:#F8F8F2;">)</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> void</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#FF79C6;">  if</span><span style="color:#F8F8F2;"> (shouldTrack </span><span style="color:#FF79C6;">&amp;&amp;</span><span style="color:#F8F8F2;"> activeSub) {</span></span>
<span class="line"><span style="color:#FF79C6;">    let</span><span style="color:#F8F8F2;"> depsMap </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> targetMap.</span><span style="color:#50FA7B;">get</span><span style="color:#F8F8F2;">(target)</span></span>
<span class="line"><span style="color:#FF79C6;">    if</span><span style="color:#F8F8F2;"> (</span><span style="color:#FF79C6;">!</span><span style="color:#F8F8F2;">depsMap) {</span></span>
<span class="line"><span style="color:#6272A4;">      // target代理的对象</span></span>
<span class="line"><span style="color:#6272A4;">      // depsMap: 存储了每个属性的依赖</span></span>
<span class="line"><span style="color:#F8F8F2;">      targetMap.</span><span style="color:#50FA7B;">set</span><span style="color:#F8F8F2;">(target, (depsMap </span><span style="color:#FF79C6;">=</span><span style="color:#FF79C6;font-weight:bold;"> new</span><span style="color:#50FA7B;"> Map</span><span style="color:#F8F8F2;">()))</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#FF79C6;">    let</span><span style="color:#F8F8F2;"> dep </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> depsMap.</span><span style="color:#50FA7B;">get</span><span style="color:#F8F8F2;">(key)</span></span>
<span class="line"><span style="color:#FF79C6;">    if</span><span style="color:#F8F8F2;"> (</span><span style="color:#FF79C6;">!</span><span style="color:#F8F8F2;">dep) {</span></span>
<span class="line"><span style="color:#F8F8F2;">      depsMap.</span><span style="color:#50FA7B;">set</span><span style="color:#F8F8F2;">(key, (dep </span><span style="color:#FF79C6;">=</span><span style="color:#FF79C6;font-weight:bold;"> new</span><span style="color:#50FA7B;"> Dep</span><span style="color:#F8F8F2;">()))</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">    dep.</span><span style="color:#50FA7B;">track</span><span style="color:#F8F8F2;">()    </span></span>
<span class="line"><span style="color:#6272A4;">    // ...</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">class</span><span style="color:#8BE9FD;"> Dep</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#50FA7B;">  track</span><span style="color:#F8F8F2;">(){</span></span>
<span class="line"><span style="color:#6272A4;">    // activeSub 就是ReactiveEffect</span></span>
<span class="line"><span style="color:#FF79C6;">    let</span><span style="color:#F8F8F2;"> link </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;font-style:italic;"> this</span><span style="color:#F8F8F2;">.activeLink </span><span style="color:#FF79C6;">=</span><span style="color:#FF79C6;font-weight:bold;">  new</span><span style="color:#50FA7B;"> Link</span><span style="color:#F8F8F2;">(activeSub, </span><span style="color:#BD93F9;font-style:italic;">this</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#6272A4;">    // 创建一个链表来存储ReactiveEffect,</span></span>
<span class="line"><span style="color:#6272A4;">    // ReactiveEffect 本质就是回调函数，当依赖改变时，会执行回调函数</span></span>
<span class="line"><span style="color:#50FA7B;">    addSub</span><span style="color:#F8F8F2;">(link)</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,49)]))}const i=n(o,[["render",F],["__file","reactive.html.vue"]]),r=JSON.parse(`{"path":"/vue3/reactive.html","title":"Vue3.5 响应式原理","lang":"en-US","frontmatter":{"title":"Vue3.5 响应式原理","date":"2024-12-05T00:00:00.000Z","category":["Vue"],"tag":["Vue3"],"description":"Proxy Proxy 对象用于创建一个对象的代理，从而实现基本操作的拦截和自定义（如属性查找、赋值、枚举、函数调用等）。 Proxy Limitations Internally, a Map stores all data in its [[MapData]] internal slot. The proxy doesn’t have such a...","head":[["meta",{"property":"og:url","content":"https://luxiag.github.io/luxiag/blog/vue3/reactive.html"}],["meta",{"property":"og:title","content":"Vue3.5 响应式原理"}],["meta",{"property":"og:description","content":"Proxy Proxy 对象用于创建一个对象的代理，从而实现基本操作的拦截和自定义（如属性查找、赋值、枚举、函数调用等）。 Proxy Limitations Internally, a Map stores all data in its [[MapData]] internal slot. The proxy doesn’t have such a..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2024-12-19T03:40:00.000Z"}],["meta",{"property":"article:tag","content":"Vue3"}],["meta",{"property":"article:published_time","content":"2024-12-05T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-12-19T03:40:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Vue3.5 响应式原理\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-12-05T00:00:00.000Z\\",\\"dateModified\\":\\"2024-12-19T03:40:00.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"luxiag\\",\\"url\\":\\"https://luxiag.github.io/luxiag\\"}]}"]]},"headers":[{"level":2,"title":"Proxy Limitations","slug":"proxy-limitations","link":"#proxy-limitations","children":[]},{"level":2,"title":"handler","slug":"handler","link":"#handler","children":[{"level":3,"title":"baseHandlers","slug":"basehandlers","link":"#basehandlers","children":[]},{"level":3,"title":"collectionHandlers","slug":"collectionhandlers","link":"#collectionhandlers","children":[]}]}],"git":{"createdTime":1733388993000,"updatedTime":1734579600000,"contributors":[{"name":"luxiag","email":"luxiag@qq.com","commits":5}]},"readingTime":{"minutes":14.79,"words":4437},"filePathRelative":"vue3/reactive.md","localizedDate":"December 5, 2024","excerpt":"<div class=\\"language-js line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"js\\" data-title=\\"js\\" style=\\"background-color:#282A36;color:#F8F8F2\\"><pre class=\\"shiki dracula vp-code\\"><code><span class=\\"line\\"><span style=\\"color:#FF79C6\\">const</span><span style=\\"color:#F8F8F2\\"> state </span><span style=\\"color:#FF79C6\\">=</span><span style=\\"color:#50FA7B\\"> reactive</span><span style=\\"color:#F8F8F2\\">({</span></span>\\n<span class=\\"line\\"><span style=\\"color:#F8F8F2\\">  name</span><span style=\\"color:#FF79C6\\">:</span><span style=\\"color:#E9F284\\">'</span><span style=\\"color:#F1FA8C\\">黎明</span><span style=\\"color:#E9F284\\">'</span><span style=\\"color:#F8F8F2\\">,</span></span>\\n<span class=\\"line\\"><span style=\\"color:#F8F8F2\\">  age</span><span style=\\"color:#FF79C6\\">:</span><span style=\\"color:#BD93F9\\">18</span></span>\\n<span class=\\"line\\"><span style=\\"color:#F8F8F2\\">})</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color:#50FA7B\\">effect</span><span style=\\"color:#F8F8F2\\">(()</span><span style=\\"color:#FF79C6\\">=&gt;</span><span style=\\"color:#F8F8F2\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color:#6272A4\\">  // 访问对象，触发get方法，收集对象的依赖</span></span>\\n<span class=\\"line\\"><span style=\\"color:#F8F8F2\\">  console.</span><span style=\\"color:#50FA7B\\">log</span><span style=\\"color:#F8F8F2\\">(state.name,state.age)</span></span>\\n<span class=\\"line\\"><span style=\\"color:#F8F8F2\\">})</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color:#6272A4\\">// 触发set方法，触发依赖函数</span></span>\\n<span class=\\"line\\"><span style=\\"color:#F8F8F2\\">state.name </span><span style=\\"color:#FF79C6\\">=</span><span style=\\"color:#E9F284\\"> '</span><span style=\\"color:#F1FA8C\\">黎明</span><span style=\\"color:#E9F284\\">'</span></span>\\n<span class=\\"line\\"><span style=\\"color:#F8F8F2\\">state.age </span><span style=\\"color:#FF79C6\\">=</span><span style=\\"color:#BD93F9\\"> 20</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}`);export{i as comp,r as data};
