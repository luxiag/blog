import{_ as n,c as a,b as e,o as l}from"./app-Bcs0tJax.js";const i={};function p(t,s){return l(),a("div",null,s[0]||(s[0]=[e(`<h1 id="控制反转" tabindex="-1"><a class="header-anchor" href="#控制反转"><span>控制反转</span></a></h1><p>设计原则，它将控制权从组件本身转移给了外部容器。依赖注入是控制反转的一种实现方式，通过将依赖的创建和管理权交给外部容器，实现了控制反转。</p><h1 id="依赖注入" tabindex="-1"><a class="header-anchor" href="#依赖注入"><span>依赖注入</span></a></h1><ul><li><p>构造器注入：这是最常见的依赖注入类型，也是最推荐的类型。在这种情况下，依赖性（如服务或组件）通过类的构造函数传递。</p></li><li><p>属性注入：在这种情况下，依赖性通过类的公共属性设置。这种类型的注入一般不推荐，因为它可能会导致对象的状态在创建后被改变。但在某些情况下，例如在处理与框架集成的情况下，属性注入可能是必要的。</p></li><li><p>方法注入：在这种情况下，依赖性通过方法参数传递。这种类型的依赖注入主要用于那些只有在特定方法调用时才需要依赖的情况。</p></li></ul><div class="language-cs line-numbers-mode" data-highlighter="shiki" data-ext="cs" data-title="cs" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">public</span><span style="color:#FF79C6;"> interface</span><span style="color:#8BE9FD;font-style:italic;"> IService</span></span>
<span class="line"><span style="color:#F8F8F2;">{</span></span>
<span class="line"><span style="color:#FF79C6;">    void</span><span style="color:#50FA7B;"> Serve</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">public</span><span style="color:#FF79C6;"> class</span><span style="color:#8BE9FD;"> Service</span><span style="color:#F8F8F2;"> : </span><span style="color:#8BE9FD;font-style:italic;">IService</span></span>
<span class="line"><span style="color:#F8F8F2;">{</span></span>
<span class="line"><span style="color:#FF79C6;">    public</span><span style="color:#FF79C6;"> void</span><span style="color:#50FA7B;"> Serve</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"><span style="color:#F8F8F2;">    {</span></span>
<span class="line"><span style="color:#F8F8F2;">        Console.</span><span style="color:#50FA7B;">WriteLine</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">Service Called</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">        //To Do: Some Stuff</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">public</span><span style="color:#FF79C6;"> class</span><span style="color:#8BE9FD;"> Client</span></span>
<span class="line"><span style="color:#F8F8F2;">{</span></span>
<span class="line"><span style="color:#FF79C6;">    private</span><span style="color:#8BE9FD;font-style:italic;"> IService</span><span style="color:#F8F8F2;"> _service;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">    public</span><span style="color:#50FA7B;"> Client</span><span style="color:#F8F8F2;">(</span><span style="color:#8BE9FD;font-style:italic;">IService</span><span style="color:#FFB86C;font-style:italic;"> service</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">    {</span></span>
<span class="line"><span style="color:#BD93F9;font-style:italic;">        this</span><span style="color:#F8F8F2;">._service </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> service;</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">    public</span><span style="color:#FF79C6;"> void</span><span style="color:#50FA7B;"> Start</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"><span style="color:#F8F8F2;">    {</span></span>
<span class="line"><span style="color:#F8F8F2;">        Console.</span><span style="color:#50FA7B;">WriteLine</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">Service Started</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#BD93F9;font-style:italic;">        this</span><span style="color:#F8F8F2;">._service.</span><span style="color:#50FA7B;">Serve</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#6272A4;">        //To Do: Some Stuff</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="transient" tabindex="-1"><a class="header-anchor" href="#transient"><span>transient</span></a></h2><p>每次被请求的时候都会创建⼀个新对象。这种⽣命周期适合有状态的对象，可以避免多段代码⽤于同⼀个对象⽽造成状态混乱，其缺点是⽣成的对象⽐较多，会浪费内存。</p>`,7)]))}const c=n(i,[["render",p],["__file","dependency-injection-usage.html.vue"]]),r=JSON.parse('{"path":"/dotnet/dependency-injection-usage.html","title":"依赖注入","lang":"en-US","frontmatter":{"title":"依赖注入","category":[".NET"],"description":"控制反转 设计原则，它将控制权从组件本身转移给了外部容器。依赖注入是控制反转的一种实现方式，通过将依赖的创建和管理权交给外部容器，实现了控制反转。 依赖注入 构造器注入：这是最常见的依赖注入类型，也是最推荐的类型。在这种情况下，依赖性（如服务或组件）通过类的构造函数传递。 属性注入：在这种情况下，依赖性通过类的公共属性设置。这种类型的注入一般不推荐，因...","head":[["meta",{"property":"og:url","content":"https://luxiag.github.io/luxiag/blog/dotnet/dependency-injection-usage.html"}],["meta",{"property":"og:title","content":"依赖注入"}],["meta",{"property":"og:description","content":"控制反转 设计原则，它将控制权从组件本身转移给了外部容器。依赖注入是控制反转的一种实现方式，通过将依赖的创建和管理权交给外部容器，实现了控制反转。 依赖注入 构造器注入：这是最常见的依赖注入类型，也是最推荐的类型。在这种情况下，依赖性（如服务或组件）通过类的构造函数传递。 属性注入：在这种情况下，依赖性通过类的公共属性设置。这种类型的注入一般不推荐，因..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2024-11-26T13:15:42.000Z"}],["meta",{"property":"article:modified_time","content":"2024-11-26T13:15:42.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"依赖注入\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-11-26T13:15:42.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"luxiag\\",\\"url\\":\\"https://luxiag.github.io/luxiag\\"}]}"]]},"headers":[{"level":2,"title":"transient","slug":"transient","link":"#transient","children":[]}],"git":{"createdTime":1732626942000,"updatedTime":1732626942000,"contributors":[{"name":"luxiag","email":"luxiag@qq.com","commits":1}]},"readingTime":{"minutes":1.25,"words":375},"filePathRelative":"dotnet/dependency-injection-usage.md","localizedDate":"November 26, 2024","excerpt":"\\n<p>设计原则，它将控制权从组件本身转移给了外部容器。依赖注入是控制反转的一种实现方式，通过将依赖的创建和管理权交给外部容器，实现了控制反转。</p>\\n<h1>依赖注入</h1>\\n<ul>\\n<li>\\n<p>构造器注入：这是最常见的依赖注入类型，也是最推荐的类型。在这种情况下，依赖性（如服务或组件）通过类的构造函数传递。</p>\\n</li>\\n<li>\\n<p>属性注入：在这种情况下，依赖性通过类的公共属性设置。这种类型的注入一般不推荐，因为它可能会导致对象的状态在创建后被改变。但在某些情况下，例如在处理与框架集成的情况下，属性注入可能是必要的。</p>\\n</li>\\n<li>\\n<p>方法注入：在这种情况下，依赖性通过方法参数传递。这种类型的依赖注入主要用于那些只有在特定方法调用时才需要依赖的情况。</p>\\n</li>\\n</ul>","autoDesc":true}');export{c as comp,r as data};
