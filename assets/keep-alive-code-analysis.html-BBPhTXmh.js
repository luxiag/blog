import{_ as n,e as a,g as l,o as e}from"./app-BcLUFOMF.js";const p={};function o(t,s){return e(),a("div",null,s[0]||(s[0]=[l(`<p><code>&lt;keep-alive&gt;</code>是 Vue 中内置的一个抽象组件，自身不会渲染，也不会出现在父组件链中。当它包裹动态组件时，会缓存不活动的组件实例，而不是销毁它们。 组件一旦被 <code>&lt;keep-alive&gt;</code> 缓存，再次渲染的时候不会执行 created、mounted 等钩子函数</p><h2 id="使用" tabindex="-1"><a class="header-anchor" href="#使用"><span>使用</span></a></h2><div class="language-html line-numbers-mode" data-highlighter="shiki" data-ext="html" data-title="html" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#6272A4;">&lt;!-- 失活的组件将会被缓存！ --&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">&lt;</span><span style="color:#FF79C6;">keep-alive</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">  &lt;</span><span style="color:#FF5555;font-style:italic;text-decoration:underline;">component</span><span style="color:#50FA7B;font-style:italic;"> :is</span><span style="color:#FF79C6;">=</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">view</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">&gt;&lt;/</span><span style="color:#FF5555;font-style:italic;text-decoration:underline;">component</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">&lt;/</span><span style="color:#FF79C6;">keep-alive</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"><span style="color:#6272A4;">&lt;!-- include 和 exclude prop 允许组件有条件地缓存。二者都可以用逗号分隔字符串、正则表达式或一个数组来表示： --&gt;</span></span>
<span class="line"><span style="color:#6272A4;">&lt;!-- 逗号分隔字符串 --&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">&lt;</span><span style="color:#FF79C6;">keep-alive</span><span style="color:#50FA7B;font-style:italic;"> include</span><span style="color:#FF79C6;">=</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">a,b</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">  &lt;</span><span style="color:#FF5555;font-style:italic;text-decoration:underline;">component</span><span style="color:#50FA7B;font-style:italic;"> :is</span><span style="color:#FF79C6;">=</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">view</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">&gt;&lt;/</span><span style="color:#FF5555;font-style:italic;text-decoration:underline;">component</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">&lt;/</span><span style="color:#FF79C6;">keep-alive</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">&lt;!-- 正则表达式 (使用 \`v-bind\`) --&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">&lt;</span><span style="color:#FF79C6;">keep-alive</span><span style="color:#50FA7B;font-style:italic;"> :include</span><span style="color:#FF79C6;">=</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">/a|b/</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">  &lt;</span><span style="color:#FF5555;font-style:italic;text-decoration:underline;">component</span><span style="color:#50FA7B;font-style:italic;"> :is</span><span style="color:#FF79C6;">=</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">view</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">&gt;&lt;/</span><span style="color:#FF5555;font-style:italic;text-decoration:underline;">component</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">&lt;/</span><span style="color:#FF79C6;">keep-alive</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">&lt;!-- 数组 (使用 \`v-bind\`) --&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">&lt;</span><span style="color:#FF79C6;">keep-alive</span><span style="color:#50FA7B;font-style:italic;"> :include</span><span style="color:#FF79C6;">=</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">[&#39;a&#39;, &#39;b&#39;]</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">  &lt;</span><span style="color:#FF5555;font-style:italic;text-decoration:underline;">component</span><span style="color:#50FA7B;font-style:italic;"> :is</span><span style="color:#FF79C6;">=</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">view</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">&gt;&lt;/</span><span style="color:#FF5555;font-style:italic;text-decoration:underline;">component</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">&lt;/</span><span style="color:#FF79C6;">keep-alive</span><span style="color:#F8F8F2;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>保证keep-alive直接包裹组件 <ul><li>因为keep-alive会判断第一层dom是不是组件，如果包裹了一层div，则会缓存失败</li></ul></li><li>是否name配置不对 <ul><li>keep-alive的include和exclude属性都是通过单文件组件中的name属性来判断是否缓存此组件；</li></ul></li><li>是否router-view嵌套超过两层 <ul><li>若超过，要在子级router-view处添加一层keep-alive。</li></ul></li></ul><h3 id="结合路由" tabindex="-1"><a class="header-anchor" href="#结合路由"><span>结合路由</span></a></h3><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">export</span><span style="color:#FF79C6;"> default</span><span style="color:#FF79C6;font-weight:bold;"> new</span><span style="color:#50FA7B;"> Router</span><span style="color:#F8F8F2;">({</span></span>
<span class="line"><span style="color:#F8F8F2;">    routes</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;">[</span></span>
<span class="line"><span style="color:#F8F8F2;">        {</span></span>
<span class="line"><span style="color:#F8F8F2;">            path</span><span style="color:#FF79C6;">:</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">/</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#50FA7B;">            component</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> () </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#FF79C6;"> import</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">./views/Home.vue</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">            name: </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">home</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">            meta</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;">{</span></span>
<span class="line"><span style="color:#F8F8F2;">                keepAlive</span><span style="color:#FF79C6;">:</span><span style="color:#BD93F9;">true</span></span>
<span class="line"><span style="color:#F8F8F2;">            }</span></span>
<span class="line"><span style="color:#F8F8F2;">        }</span></span>
<span class="line"><span style="color:#F8F8F2;">    ]</span></span>
<span class="line"><span style="color:#F8F8F2;">})</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-html line-numbers-mode" data-highlighter="shiki" data-ext="html" data-title="html" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#F8F8F2;">&lt;</span><span style="color:#FF79C6;">keep-alive</span><span style="color:#50FA7B;font-style:italic;">  v-if</span><span style="color:#FF79C6;">=</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">$route.meta.keepAlive</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">  &lt;</span><span style="color:#FF79C6;">router-view</span><span style="color:#50FA7B;font-style:italic;"> :is</span><span style="color:#FF79C6;">=</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">view</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">&gt;&lt;/</span><span style="color:#FF79C6;">router-vi</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">&lt;/</span><span style="color:#FF79C6;">keep-alive</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">&lt;</span><span style="color:#FF79C6;">router-view</span><span style="color:#50FA7B;font-style:italic;"> v-if</span><span style="color:#FF79C6;">=</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">!$route.meta.keepAlive</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">&gt;&lt;/</span><span style="color:#FF79C6;">router-view</span><span style="color:#F8F8F2;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="keep-alive" tabindex="-1"><a class="header-anchor" href="#keep-alive"><span>keep-alive</span></a></h2><details class="hint-container details"><summary>keep-alive</summary><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">function</span><span style="color:#50FA7B;"> matches</span><span style="color:#F8F8F2;">(</span></span>
<span class="line"><span style="color:#FFB86C;font-style:italic;">  pattern</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> string</span><span style="color:#FF79C6;"> |</span><span style="color:#8BE9FD;font-style:italic;"> RegExp</span><span style="color:#FF79C6;"> |</span><span style="color:#8BE9FD;font-style:italic;"> Array</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#8BE9FD;font-style:italic;">string</span><span style="color:#F8F8F2;">&gt;,</span></span>
<span class="line"><span style="color:#FFB86C;font-style:italic;">  name</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> string</span></span>
<span class="line"><span style="color:#F8F8F2;">)</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> boolean</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#FF79C6;">  if</span><span style="color:#F8F8F2;"> (</span><span style="color:#50FA7B;">isArray</span><span style="color:#F8F8F2;">(pattern)) {</span></span>
<span class="line"><span style="color:#FF79C6;">    return</span><span style="color:#F8F8F2;"> pattern.</span><span style="color:#50FA7B;">indexOf</span><span style="color:#F8F8F2;">(name) </span><span style="color:#FF79C6;">&gt;</span><span style="color:#FF79C6;"> -</span><span style="color:#BD93F9;">1</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">  } </span><span style="color:#FF79C6;">else</span><span style="color:#FF79C6;"> if</span><span style="color:#F8F8F2;"> (</span><span style="color:#FF79C6;">typeof</span><span style="color:#F8F8F2;"> pattern </span><span style="color:#FF79C6;">===</span><span style="color:#E9F284;"> &quot;</span><span style="color:#F1FA8C;">string</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#FF79C6;">    return</span><span style="color:#F8F8F2;"> pattern.</span><span style="color:#50FA7B;">split</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">,</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">).</span><span style="color:#50FA7B;">indexOf</span><span style="color:#F8F8F2;">(name) </span><span style="color:#FF79C6;">&gt;</span><span style="color:#FF79C6;"> -</span><span style="color:#BD93F9;">1</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">  } </span><span style="color:#FF79C6;">else</span><span style="color:#FF79C6;"> if</span><span style="color:#F8F8F2;"> (</span><span style="color:#50FA7B;">isRegExp</span><span style="color:#F8F8F2;">(pattern)) {</span></span>
<span class="line"><span style="color:#FF79C6;">    return</span><span style="color:#F8F8F2;"> pattern.</span><span style="color:#50FA7B;">test</span><span style="color:#F8F8F2;">(name);</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#6272A4;">  /* istanbul ignore next */</span></span>
<span class="line"><span style="color:#FF79C6;">  return</span><span style="color:#BD93F9;"> false</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">function</span><span style="color:#50FA7B;"> pruneCache</span><span style="color:#F8F8F2;">(</span></span>
<span class="line"><span style="color:#FFB86C;font-style:italic;">  keepAliveInstance</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> { cache</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> CacheEntryMap</span><span style="color:#F8F8F2;">, keys</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> string</span><span style="color:#F8F8F2;">[], _vnode</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> VNode</span><span style="color:#F8F8F2;"> },</span></span>
<span class="line"><span style="color:#50FA7B;">  filter</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> Function</span></span>
<span class="line"><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#FF79C6;">  const</span><span style="color:#F8F8F2;"> { cache, keys, _vnode } </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> keepAliveInstance;</span></span>
<span class="line"><span style="color:#FF79C6;">  for</span><span style="color:#F8F8F2;"> (</span><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> key </span><span style="color:#FF79C6;">in</span><span style="color:#F8F8F2;"> cache) {</span></span>
<span class="line"><span style="color:#FF79C6;">    const</span><span style="color:#F8F8F2;"> entry </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> cache[key];</span></span>
<span class="line"><span style="color:#FF79C6;">    if</span><span style="color:#F8F8F2;"> (entry) {</span></span>
<span class="line"><span style="color:#FF79C6;">      const</span><span style="color:#F8F8F2;"> name </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> entry.name;</span></span>
<span class="line"><span style="color:#FF79C6;">      if</span><span style="color:#F8F8F2;"> (name </span><span style="color:#FF79C6;">&amp;&amp;</span><span style="color:#FF79C6;"> !</span><span style="color:#50FA7B;">filter</span><span style="color:#F8F8F2;">(name)) {</span></span>
<span class="line"><span style="color:#50FA7B;">        pruneCacheEntry</span><span style="color:#F8F8F2;">(cache, key, keys, _vnode);</span></span>
<span class="line"><span style="color:#F8F8F2;">      }</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">// 判断是否存在缓存的组件 将其摧毁</span></span>
<span class="line"><span style="color:#FF79C6;">function</span><span style="color:#50FA7B;"> pruneCacheEntry</span><span style="color:#F8F8F2;">(</span></span>
<span class="line"><span style="color:#FFB86C;font-style:italic;">  cache</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> CacheEntryMap</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#FFB86C;font-style:italic;">  key</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> string</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#FFB86C;font-style:italic;">  keys</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> Array</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#8BE9FD;font-style:italic;">string</span><span style="color:#F8F8F2;">&gt;,</span></span>
<span class="line"><span style="color:#FFB86C;font-style:italic;">  current</span><span style="color:#FF79C6;">?:</span><span style="color:#8BE9FD;font-style:italic;"> VNode</span></span>
<span class="line"><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#FF79C6;">  const</span><span style="color:#F8F8F2;"> entry </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> cache[key];</span></span>
<span class="line"><span style="color:#FF79C6;">  if</span><span style="color:#F8F8F2;"> (entry </span><span style="color:#FF79C6;">&amp;&amp;</span><span style="color:#F8F8F2;"> (</span><span style="color:#FF79C6;">!</span><span style="color:#F8F8F2;">current </span><span style="color:#FF79C6;">||</span><span style="color:#F8F8F2;"> entry.tag </span><span style="color:#FF79C6;">!==</span><span style="color:#F8F8F2;"> current.tag)) {</span></span>
<span class="line"><span style="color:#6272A4;">    // @ts-expect-error can be undefined</span></span>
<span class="line"><span style="color:#6272A4;">    // 执行组件的destory钩子函数</span></span>
<span class="line"><span style="color:#F8F8F2;">    entry.componentInstance.</span><span style="color:#50FA7B;">$destroy</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">  cache[key] </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> null</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#50FA7B;">  remove</span><span style="color:#F8F8F2;">(keys, key);</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> patternTypes</span><span style="color:#FF79C6;">:</span><span style="color:#8BE9FD;font-style:italic;"> Array</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#FFB86C;font-style:italic;">Function</span><span style="color:#F8F8F2;">&gt; </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> [String, RegExp, Array];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">export</span><span style="color:#FF79C6;"> default</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  name</span><span style="color:#FF79C6;">:</span><span style="color:#E9F284;"> &quot;</span><span style="color:#F1FA8C;">keep-alive</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#6272A4;">  // 创建实例时这个属性决定是否忽略某个组件</span></span>
<span class="line"><span style="color:#F8F8F2;">  abstract</span><span style="color:#FF79C6;">:</span><span style="color:#BD93F9;"> true</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">  props</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">    include</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> patternTypes,</span></span>
<span class="line"><span style="color:#F8F8F2;">    exclude</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> patternTypes,</span></span>
<span class="line"><span style="color:#F8F8F2;">    max</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> [String, Number],</span></span>
<span class="line"><span style="color:#F8F8F2;">  },</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">  methods</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#50FA7B;">    cacheVNode</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#FF79C6;">      const</span><span style="color:#F8F8F2;"> { cache, keys, vnodeToCache, keyToCache } </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;font-style:italic;"> this</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#6272A4;">      // 判断是否存在缓存对象</span></span>
<span class="line"><span style="color:#6272A4;">      // 将其缓存起来</span></span>
<span class="line"><span style="color:#FF79C6;">      if</span><span style="color:#F8F8F2;"> (vnodeToCache) {</span></span>
<span class="line"><span style="color:#FF79C6;">        const</span><span style="color:#F8F8F2;"> { tag, componentInstance, componentOptions } </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> vnodeToCache;</span></span>
<span class="line"><span style="color:#F8F8F2;">        cache[keyToCache] </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">          name</span><span style="color:#FF79C6;">:</span><span style="color:#50FA7B;"> getComponentName</span><span style="color:#F8F8F2;">(componentOptions),</span></span>
<span class="line"><span style="color:#F8F8F2;">          tag,</span></span>
<span class="line"><span style="color:#F8F8F2;">          componentInstance,</span></span>
<span class="line"><span style="color:#F8F8F2;">        };</span></span>
<span class="line"><span style="color:#F8F8F2;">        keys.</span><span style="color:#50FA7B;">push</span><span style="color:#F8F8F2;">(keyToCache);</span></span>
<span class="line"><span style="color:#6272A4;">        // prune oldest entry</span></span>
<span class="line"><span style="color:#6272A4;">        // 检查缓存数量是否超过 max设置值</span></span>
<span class="line"><span style="color:#FF79C6;">        if</span><span style="color:#F8F8F2;"> (</span><span style="color:#BD93F9;font-style:italic;">this</span><span style="color:#F8F8F2;">.max </span><span style="color:#FF79C6;">&amp;&amp;</span><span style="color:#F8F8F2;"> keys.length </span><span style="color:#FF79C6;">&gt;</span><span style="color:#50FA7B;"> parseInt</span><span style="color:#F8F8F2;">(</span><span style="color:#BD93F9;font-style:italic;">this</span><span style="color:#F8F8F2;">.max)) {</span></span>
<span class="line"><span style="color:#50FA7B;">          pruneCacheEntry</span><span style="color:#F8F8F2;">(cache, keys[</span><span style="color:#BD93F9;">0</span><span style="color:#F8F8F2;">], keys, </span><span style="color:#BD93F9;font-style:italic;">this</span><span style="color:#F8F8F2;">._vnode);</span></span>
<span class="line"><span style="color:#F8F8F2;">        }</span></span>
<span class="line"><span style="color:#BD93F9;font-style:italic;">        this</span><span style="color:#F8F8F2;">.vnodeToCache </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> null</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">      }</span></span>
<span class="line"><span style="color:#F8F8F2;">    },</span></span>
<span class="line"><span style="color:#F8F8F2;">  },</span></span>
<span class="line"></span>
<span class="line"><span style="color:#50FA7B;">  created</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#BD93F9;font-style:italic;">    this</span><span style="color:#F8F8F2;">.cache </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> Object.</span><span style="color:#50FA7B;">create</span><span style="color:#F8F8F2;">(</span><span style="color:#BD93F9;">null</span><span style="color:#F8F8F2;">); </span><span style="color:#6272A4;">// 缓存虚拟dom</span></span>
<span class="line"><span style="color:#BD93F9;font-style:italic;">    this</span><span style="color:#F8F8F2;">.keys </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> []; </span><span style="color:#6272A4;">// 缓存的虚拟dom的健集合</span></span>
<span class="line"><span style="color:#F8F8F2;">  },</span></span>
<span class="line"></span>
<span class="line"><span style="color:#50FA7B;">  destroyed</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#6272A4;">    // 删除所有的缓存</span></span>
<span class="line"><span style="color:#FF79C6;">    for</span><span style="color:#F8F8F2;"> (</span><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> key </span><span style="color:#FF79C6;">in</span><span style="color:#BD93F9;font-style:italic;"> this</span><span style="color:#F8F8F2;">.cache) {</span></span>
<span class="line"><span style="color:#50FA7B;">      pruneCacheEntry</span><span style="color:#F8F8F2;">(</span><span style="color:#BD93F9;font-style:italic;">this</span><span style="color:#F8F8F2;">.cache, key, </span><span style="color:#BD93F9;font-style:italic;">this</span><span style="color:#F8F8F2;">.keys);</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">  },</span></span>
<span class="line"></span>
<span class="line"><span style="color:#50FA7B;">  mounted</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#BD93F9;font-style:italic;">    this</span><span style="color:#F8F8F2;">.</span><span style="color:#50FA7B;">cacheVNode</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#6272A4;">    // 实时监听黑白名单的变动</span></span>
<span class="line"><span style="color:#BD93F9;font-style:italic;">    this</span><span style="color:#F8F8F2;">.</span><span style="color:#50FA7B;">$watch</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">include</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">, (</span><span style="color:#FFB86C;font-style:italic;">val</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#50FA7B;">      pruneCache</span><span style="color:#F8F8F2;">(</span><span style="color:#BD93F9;font-style:italic;">this</span><span style="color:#F8F8F2;">, (</span><span style="color:#FFB86C;font-style:italic;">name</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#50FA7B;"> matches</span><span style="color:#F8F8F2;">(val, name));</span></span>
<span class="line"><span style="color:#F8F8F2;">    });</span></span>
<span class="line"><span style="color:#BD93F9;font-style:italic;">    this</span><span style="color:#F8F8F2;">.</span><span style="color:#50FA7B;">$watch</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">exclude</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">, (</span><span style="color:#FFB86C;font-style:italic;">val</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#50FA7B;">      pruneCache</span><span style="color:#F8F8F2;">(</span><span style="color:#BD93F9;font-style:italic;">this</span><span style="color:#F8F8F2;">, (</span><span style="color:#FFB86C;font-style:italic;">name</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#FF79C6;"> !</span><span style="color:#50FA7B;">matches</span><span style="color:#F8F8F2;">(val, name));</span></span>
<span class="line"><span style="color:#F8F8F2;">    });</span></span>
<span class="line"><span style="color:#F8F8F2;">  },</span></span>
<span class="line"></span>
<span class="line"><span style="color:#50FA7B;">  updated</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#BD93F9;font-style:italic;">    this</span><span style="color:#F8F8F2;">.</span><span style="color:#50FA7B;">cacheVNode</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#F8F8F2;">  },</span></span>
<span class="line"></span>
<span class="line"><span style="color:#50FA7B;">  render</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#6272A4;">    // this 当前 keep-alive 组件</span></span>
<span class="line"><span style="color:#FF79C6;">    const</span><span style="color:#F8F8F2;"> slot </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;font-style:italic;"> this</span><span style="color:#F8F8F2;">.$slots.default;</span></span>
<span class="line"><span style="color:#FF79C6;">    const</span><span style="color:#F8F8F2;"> vnode </span><span style="color:#FF79C6;">=</span><span style="color:#50FA7B;"> getFirstComponentChild</span><span style="color:#F8F8F2;">(slot);</span></span>
<span class="line"><span style="color:#FF79C6;">    const</span><span style="color:#F8F8F2;"> componentOptions </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> vnode </span><span style="color:#FF79C6;">&amp;&amp;</span><span style="color:#F8F8F2;"> vnode.componentOptions;</span></span>
<span class="line"><span style="color:#FF79C6;">    if</span><span style="color:#F8F8F2;"> (componentOptions) {</span></span>
<span class="line"><span style="color:#6272A4;">      // check pattern</span></span>
<span class="line"><span style="color:#6272A4;">      // 获取组件</span></span>
<span class="line"><span style="color:#FF79C6;">      const</span><span style="color:#F8F8F2;"> name </span><span style="color:#FF79C6;">=</span><span style="color:#50FA7B;"> getComponentName</span><span style="color:#F8F8F2;">(componentOptions);</span></span>
<span class="line"><span style="color:#FF79C6;">      const</span><span style="color:#F8F8F2;"> { include, exclude } </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;font-style:italic;"> this</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#FF79C6;">      if</span><span style="color:#F8F8F2;"> (</span></span>
<span class="line"><span style="color:#6272A4;">        // not included</span></span>
<span class="line"><span style="color:#F8F8F2;">        (include </span><span style="color:#FF79C6;">&amp;&amp;</span><span style="color:#F8F8F2;"> (</span><span style="color:#FF79C6;">!</span><span style="color:#F8F8F2;">name </span><span style="color:#FF79C6;">||</span><span style="color:#FF79C6;"> !</span><span style="color:#50FA7B;">matches</span><span style="color:#F8F8F2;">(include, name))) </span><span style="color:#FF79C6;">||</span></span>
<span class="line"><span style="color:#6272A4;">        // excluded</span></span>
<span class="line"><span style="color:#F8F8F2;">        (exclude </span><span style="color:#FF79C6;">&amp;&amp;</span><span style="color:#F8F8F2;"> name </span><span style="color:#FF79C6;">&amp;&amp;</span><span style="color:#50FA7B;"> matches</span><span style="color:#F8F8F2;">(exclude, name))</span></span>
<span class="line"><span style="color:#F8F8F2;">      ) {</span></span>
<span class="line"><span style="color:#FF79C6;">        return</span><span style="color:#F8F8F2;"> vnode;</span></span>
<span class="line"><span style="color:#F8F8F2;">      }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">      const</span><span style="color:#F8F8F2;"> { cache, keys } </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;font-style:italic;"> this</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#6272A4;">      // 定义组件的缓存key</span></span>
<span class="line"><span style="color:#FF79C6;">      const</span><span style="color:#F8F8F2;"> key </span><span style="color:#FF79C6;">=</span></span>
<span class="line"><span style="color:#F8F8F2;">        vnode.key </span><span style="color:#FF79C6;">==</span><span style="color:#BD93F9;"> null</span></span>
<span class="line"><span style="color:#FF79C6;">          ?</span><span style="color:#6272A4;"> // same constructor may get registered as different local components</span></span>
<span class="line"><span style="color:#6272A4;">            // so cid alone is not enough (#3269)</span></span>
<span class="line"><span style="color:#F8F8F2;">            componentOptions.Ctor.cid </span><span style="color:#FF79C6;">+</span></span>
<span class="line"><span style="color:#F8F8F2;">            (componentOptions.tag </span><span style="color:#FF79C6;">?</span><span style="color:#F1FA8C;"> \`::</span><span style="color:#FF79C6;">\${</span><span style="color:#F8F8F2;">componentOptions.tag</span><span style="color:#FF79C6;">}</span><span style="color:#F1FA8C;">\`</span><span style="color:#FF79C6;"> :</span><span style="color:#E9F284;"> &quot;&quot;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#FF79C6;">          :</span><span style="color:#F8F8F2;"> vnode.key;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">      if</span><span style="color:#F8F8F2;"> (cache[key]) {</span></span>
<span class="line"><span style="color:#F8F8F2;">        vnode.componentInstance </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> cache[key].componentInstance;</span></span>
<span class="line"><span style="color:#6272A4;">        // make current key freshest</span></span>
<span class="line"><span style="color:#50FA7B;">        remove</span><span style="color:#F8F8F2;">(keys, key);</span></span>
<span class="line"><span style="color:#F8F8F2;">        keys.</span><span style="color:#50FA7B;">push</span><span style="color:#F8F8F2;">(key);</span></span>
<span class="line"><span style="color:#F8F8F2;">      } </span><span style="color:#FF79C6;">else</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#6272A4;">        // delay setting the cache until update</span></span>
<span class="line"><span style="color:#6272A4;">        // 调用update的时候会缓存该组件</span></span>
<span class="line"><span style="color:#BD93F9;font-style:italic;">        this</span><span style="color:#F8F8F2;">.vnodeToCache </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> vnode;</span></span>
<span class="line"><span style="color:#BD93F9;font-style:italic;">        this</span><span style="color:#F8F8F2;">.keyToCache </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> key;</span></span>
<span class="line"><span style="color:#F8F8F2;">      }</span></span>
<span class="line"><span style="color:#6272A4;">      // 渲染和执行被包裹组件的钩子函数需要用到</span></span>
<span class="line"><span style="color:#6272A4;">      // @ts-expect-error can vnode.data can be undefined</span></span>
<span class="line"><span style="color:#F8F8F2;">      vnode.data.keepAlive </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> true</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#FF79C6;">    return</span><span style="color:#F8F8F2;"> vnode </span><span style="color:#FF79C6;">||</span><span style="color:#F8F8F2;"> (slot </span><span style="color:#FF79C6;">&amp;&amp;</span><span style="color:#F8F8F2;"> slot[</span><span style="color:#BD93F9;">0</span><span style="color:#F8F8F2;">]);</span></span>
<span class="line"><span style="color:#F8F8F2;">  },</span></span>
<span class="line"><span style="color:#F8F8F2;">};</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h2 id="使用渲染" tabindex="-1"><a class="header-anchor" href="#使用渲染"><span>使用渲染</span></a></h2><p>首次渲染只会在keep-alive建立缓存，其他和普通缓存没有区别</p><p>vnode.elm缓存创建的DOM节点</p><p>patch =&gt; createElm =&gt; 如果是组件 createComponent() =&gt; reactivateComponent() =&gt; 将vnode.elm插入父节点</p><h3 id="createcomponent" tabindex="-1"><a class="header-anchor" href="#createcomponent"><span>createComponent</span></a></h3><details class="hint-container details"><summary>createComponent</summary><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">function</span><span style="color:#50FA7B;"> createComponent</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">vnode</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">insertedVnodeQueue</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">parentElm</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">refElm</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#FF79C6;">  let</span><span style="color:#F8F8F2;"> i </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> vnode.data;</span></span>
<span class="line"><span style="color:#FF79C6;">  if</span><span style="color:#F8F8F2;"> (</span><span style="color:#50FA7B;">isDef</span><span style="color:#F8F8F2;">(i)) {</span></span>
<span class="line"><span style="color:#6272A4;">    // 首次加载 vnode.componentInstance 为undefined</span></span>
<span class="line"><span style="color:#FF79C6;">    const</span><span style="color:#F8F8F2;"> isReactivated </span><span style="color:#FF79C6;">=</span><span style="color:#50FA7B;"> isDef</span><span style="color:#F8F8F2;">(vnode.componentInstance) </span><span style="color:#FF79C6;">&amp;&amp;</span><span style="color:#F8F8F2;"> i.keepAlive;</span></span>
<span class="line"><span style="color:#FF79C6;">    if</span><span style="color:#F8F8F2;"> (</span><span style="color:#50FA7B;">isDef</span><span style="color:#F8F8F2;">((i </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> i.hook)) </span><span style="color:#FF79C6;">&amp;&amp;</span><span style="color:#50FA7B;"> isDef</span><span style="color:#F8F8F2;">((i </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> i.init))) {</span></span>
<span class="line"><span style="color:#6272A4;">      // 执行初始化 init</span></span>
<span class="line"><span style="color:#50FA7B;">      i</span><span style="color:#F8F8F2;">(vnode, </span><span style="color:#BD93F9;">false</span><span style="color:#6272A4;"> /* hydrating */</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#6272A4;">    // after calling the init hook, if the vnode is a child component</span></span>
<span class="line"><span style="color:#6272A4;">    // it should&#39;ve created a child instance and mounted it. the child</span></span>
<span class="line"><span style="color:#6272A4;">    // component also has set the placeholder vnode&#39;s elm.</span></span>
<span class="line"><span style="color:#6272A4;">    // in that case we can just return the element and be done.</span></span>
<span class="line"><span style="color:#FF79C6;">    if</span><span style="color:#F8F8F2;"> (</span><span style="color:#50FA7B;">isDef</span><span style="color:#F8F8F2;">(vnode.componentInstance)) {</span></span>
<span class="line"><span style="color:#6272A4;">      // 将 vnode.elm 赋值为真实DOM</span></span>
<span class="line"><span style="color:#50FA7B;">      initComponent</span><span style="color:#F8F8F2;">(vnode, insertedVnodeQueue);</span></span>
<span class="line"><span style="color:#6272A4;">      // 将组件真实DOM插入到父元素</span></span>
<span class="line"><span style="color:#50FA7B;">      insert</span><span style="color:#F8F8F2;">(parentElm, vnode.elm, refElm);</span></span>
<span class="line"><span style="color:#6272A4;">      // 如果被keep alive 包裹 且不是首次加载</span></span>
<span class="line"><span style="color:#FF79C6;">      if</span><span style="color:#F8F8F2;"> (</span><span style="color:#50FA7B;">isTrue</span><span style="color:#F8F8F2;">(isReactivated)) {</span></span>
<span class="line"><span style="color:#50FA7B;">        reactivateComponent</span><span style="color:#F8F8F2;">(vnode, insertedVnodeQueue, parentElm, refElm);</span></span>
<span class="line"><span style="color:#F8F8F2;">      }</span></span>
<span class="line"><span style="color:#FF79C6;">      return</span><span style="color:#BD93F9;"> true</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#282A36;color:#F8F8F2;"><pre class="shiki dracula vp-code"><code><span class="line"><span style="color:#FF79C6;">  function</span><span style="color:#50FA7B;"> reactivateComponent</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">vnode</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">insertedVnodeQueue</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">parentElm</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">refElm</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#FF79C6;">    let</span><span style="color:#F8F8F2;"> i</span></span>
<span class="line"><span style="color:#6272A4;">    // hack for #4339: a reactivated component with inner transition</span></span>
<span class="line"><span style="color:#6272A4;">    // does not trigger because the inner node&#39;s created hooks are not called</span></span>
<span class="line"><span style="color:#6272A4;">    // again. It&#39;s not ideal to involve module-specific logic in here but</span></span>
<span class="line"><span style="color:#6272A4;">    // there doesn&#39;t seem to be a better way to do it.</span></span>
<span class="line"><span style="color:#FF79C6;">    let</span><span style="color:#F8F8F2;"> innerNode </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> vnode</span></span>
<span class="line"><span style="color:#FF79C6;">    while</span><span style="color:#F8F8F2;"> (innerNode.componentInstance) {</span></span>
<span class="line"><span style="color:#F8F8F2;">      innerNode </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> innerNode.componentInstance._vnode</span></span>
<span class="line"><span style="color:#FF79C6;">      if</span><span style="color:#F8F8F2;"> (</span><span style="color:#50FA7B;">isDef</span><span style="color:#F8F8F2;">((i </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> innerNode.data)) </span><span style="color:#FF79C6;">&amp;&amp;</span><span style="color:#50FA7B;"> isDef</span><span style="color:#F8F8F2;">((i </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> i.transition))) {</span></span>
<span class="line"><span style="color:#FF79C6;">        for</span><span style="color:#F8F8F2;"> (i </span><span style="color:#FF79C6;">=</span><span style="color:#BD93F9;"> 0</span><span style="color:#F8F8F2;">; i </span><span style="color:#FF79C6;">&lt;</span><span style="color:#F8F8F2;"> cbs.activate.length; </span><span style="color:#FF79C6;">++</span><span style="color:#F8F8F2;">i) {</span></span>
<span class="line"><span style="color:#F8F8F2;">          cbs.activate[i](emptyNode, innerNode)</span></span>
<span class="line"><span style="color:#F8F8F2;">        }</span></span>
<span class="line"><span style="color:#F8F8F2;">        insertedVnodeQueue.</span><span style="color:#50FA7B;">push</span><span style="color:#F8F8F2;">(innerNode)</span></span>
<span class="line"><span style="color:#FF79C6;">        break</span></span>
<span class="line"><span style="color:#F8F8F2;">      }</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#6272A4;">    // unlike a newly created component,</span></span>
<span class="line"><span style="color:#6272A4;">    // a reactivated keep-alive component doesn&#39;t insert itself</span></span>
<span class="line"><span style="color:#6272A4;">    // 将缓存的DOM插入父节点</span></span>
<span class="line"><span style="color:#50FA7B;">    insert</span><span style="color:#F8F8F2;">(parentElm, vnode.elm, refElm)</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details>`,15)]))}const F=n(p,[["render",o],["__file","keep-alive-code-analysis.html.vue"]]),i=JSON.parse('{"path":"/vue2/keep-alive-code-analysis.html","title":"Vue2.x keep-alive原理分析","lang":"en-US","frontmatter":{"title":"Vue2.x keep-alive原理分析","date":"2021-09-12T00:00:00.000Z","category":["Vue"],"type":["vue2"],"description":"<keep-alive>是 Vue 中内置的一个抽象组件，自身不会渲染，也不会出现在父组件链中。当它包裹动态组件时，会缓存不活动的组件实例，而不是销毁它们。 组件一旦被 <keep-alive> 缓存，再次渲染的时候不会执行 created、mounted 等钩子函数 使用 保证keep-alive直接包裹组件 因为keep-alive会判断第一层do...","head":[["meta",{"property":"og:url","content":"https://luxiag.github.io/luxiag/blog/vue2/keep-alive-code-analysis.html"}],["meta",{"property":"og:title","content":"Vue2.x keep-alive原理分析"}],["meta",{"property":"og:description","content":"<keep-alive>是 Vue 中内置的一个抽象组件，自身不会渲染，也不会出现在父组件链中。当它包裹动态组件时，会缓存不活动的组件实例，而不是销毁它们。 组件一旦被 <keep-alive> 缓存，再次渲染的时候不会执行 created、mounted 等钩子函数 使用 保证keep-alive直接包裹组件 因为keep-alive会判断第一层do..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2024-10-27T15:30:43.000Z"}],["meta",{"property":"article:published_time","content":"2021-09-12T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-10-27T15:30:43.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Vue2.x keep-alive原理分析\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2021-09-12T00:00:00.000Z\\",\\"dateModified\\":\\"2024-10-27T15:30:43.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"luxiag\\",\\"url\\":\\"https://luxiag.github.io/luxiag\\"}]}"]]},"git":{"createdTime":1666690545000,"updatedTime":1730043043000,"contributors":[{"name":"卢祥","username":"卢祥","email":"example@gmail.com","commits":4,"url":"https://github.com/卢祥"},{"name":"luxiang","username":"luxiang","email":"luxiag@qq.com","commits":1,"url":"https://github.com/luxiang"},{"name":"卢祥","username":"卢祥","email":"example@qq.com","commits":2,"url":"https://github.com/卢祥"},{"name":"luxiag","username":"luxiag","email":"luxiag@qq.com","commits":7,"url":"https://github.com/luxiag"}]},"readingTime":{"minutes":4.01,"words":1203},"filePathRelative":"vue2/keep-alive-code-analysis.md","localizedDate":"September 12, 2021","excerpt":"<p><code>&lt;keep-alive&gt;</code>是 Vue 中内置的一个抽象组件，自身不会渲染，也不会出现在父组件链中。当它包裹动态组件时，会缓存不活动的组件实例，而不是销毁它们。\\n组件一旦被 <code>&lt;keep-alive&gt;</code> 缓存，再次渲染的时候不会执行 created、mounted 等钩子函数</p>","autoDesc":true}');export{F as comp,i as data};
