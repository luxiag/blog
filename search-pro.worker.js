const{entries:V}=Object,{fromEntries:et}=Object,st="ENTRIES",L="KEYS",T="VALUES",_="";class D{set;_type;_path;constructor(t,s){const n=t._tree,o=Array.from(n.keys());this.set=t,this._type=s,this._path=o.length>0?[{node:n,keys:o}]:[]}next(){const t=this.dive();return this.backtrack(),t}dive(){if(this._path.length===0)return{done:!0,value:void 0};const{node:t,keys:s}=E(this._path);if(E(s)===_)return{done:!1,value:this.result()};const n=t.get(E(s));return this._path.push({node:n,keys:Array.from(n.keys())}),this.dive()}backtrack(){if(this._path.length===0)return;const t=E(this._path).keys;t.pop(),!(t.length>0)&&(this._path.pop(),this.backtrack())}key(){return this.set._prefix+this._path.map(({keys:t})=>E(t)).filter(t=>t!==_).join("")}value(){return E(this._path).node.get(_)}result(){switch(this._type){case T:return this.value();case L:return this.key();default:return[this.key(),this.value()]}}[Symbol.iterator](){return this}}const E=e=>e[e.length-1],nt=(e,t,s)=>{const n=new Map;if(t===void 0)return n;const o=t.length+1,u=o+s,i=new Uint8Array(u*o).fill(s+1);for(let r=0;r<o;++r)i[r]=r;for(let r=1;r<u;++r)i[r*o]=r;return R(e,t,s,n,i,1,o,""),n},R=(e,t,s,n,o,u,i,r)=>{const d=u*i;t:for(const c of e.keys())if(c===_){const a=o[d-1];a<=s&&n.set(r,[e.get(c),a])}else{let a=u;for(let h=0;h<c.length;++h,++a){const g=c[h],m=i*a,p=m-i;let l=o[m];const f=Math.max(0,a-s-1),y=Math.min(i-1,a+s);for(let F=f;F<y;++F){const v=g!==t[F],z=o[p+F]+ +v,A=o[p+F+1]+1,w=o[m+F]+1,j=o[m+F+1]=Math.min(z,A,w);j<l&&(l=j)}if(l>s)continue t}R(e.get(c),t,s,n,o,a,i,r+c)}};class C{_tree;_prefix;_size=void 0;constructor(t=new Map,s=""){this._tree=t,this._prefix=s}atPrefix(t){if(!t.startsWith(this._prefix))throw new Error("Mismatched prefix");const[s,n]=x(this._tree,t.slice(this._prefix.length));if(s===void 0){const[o,u]=O(n);for(const i of o.keys())if(i!==_&&i.startsWith(u)){const r=new Map;return r.set(i.slice(u.length),o.get(i)),new C(r,t)}}return new C(s,t)}clear(){this._size=void 0,this._tree.clear()}delete(t){return this._size=void 0,ot(this._tree,t)}entries(){return new D(this,st)}forEach(t){for(const[s,n]of this)t(s,n,this)}fuzzyGet(t,s){return nt(this._tree,t,s)}get(t){const s=k(this._tree,t);return s!==void 0?s.get(_):void 0}has(t){const s=k(this._tree,t);return s!==void 0&&s.has(_)}keys(){return new D(this,L)}set(t,s){if(typeof t!="string")throw new Error("key must be a string");return this._size=void 0,I(this._tree,t).set(_,s),this}get size(){if(this._size)return this._size;this._size=0;const t=this.entries();for(;!t.next().done;)this._size+=1;return this._size}update(t,s){if(typeof t!="string")throw new Error("key must be a string");this._size=void 0;const n=I(this._tree,t);return n.set(_,s(n.get(_))),this}fetch(t,s){if(typeof t!="string")throw new Error("key must be a string");this._size=void 0;const n=I(this._tree,t);let o=n.get(_);return o===void 0&&n.set(_,o=s()),o}values(){return new D(this,T)}[Symbol.iterator](){return this.entries()}static from(t){const s=new C;for(const[n,o]of t)s.set(n,o);return s}static fromObject(t){return C.from(Object.entries(t))}}const x=(e,t,s=[])=>{if(t.length===0||e==null)return[e,s];for(const n of e.keys())if(n!==_&&t.startsWith(n))return s.push([e,n]),x(e.get(n),t.slice(n.length),s);return s.push([e,t]),x(void 0,"",s)},k=(e,t)=>{if(t.length===0||e==null)return e;for(const s of e.keys())if(s!==_&&t.startsWith(s))return k(e.get(s),t.slice(s.length))},I=(e,t)=>{const s=t.length;t:for(let n=0;e&&n<s;){for(const u of e.keys())if(u!==_&&t[n]===u[0]){const i=Math.min(s-n,u.length);let r=1;for(;r<i&&t[n+r]===u[r];)++r;const d=e.get(u);if(r===u.length)e=d;else{const c=new Map;c.set(u.slice(r),d),e.set(t.slice(n,n+r),c),e.delete(u),e=c}n+=r;continue t}const o=new Map;return e.set(t.slice(n),o),o}return e},ot=(e,t)=>{const[s,n]=x(e,t);if(s!==void 0){if(s.delete(_),s.size===0)W(n);else if(s.size===1){const[o,u]=s.entries().next().value;q(n,o,u)}}},W=e=>{if(e.length===0)return;const[t,s]=O(e);if(t.delete(s),t.size===0)W(e.slice(0,-1));else if(t.size===1){const[n,o]=t.entries().next().value;n!==_&&q(e.slice(0,-1),n,o)}},q=(e,t,s)=>{if(e.length===0)return;const[n,o]=O(e);n.set(o+t,s),n.delete(o)},O=e=>e[e.length-1],ut=(e,t)=>{const s=e._idToShortId.get(t);if(s!=null)return e._storedFields.get(s)},it=/[\n\r -#%-*,-/:;?@[-\]_{}\u00A0\u00A1\u00A7\u00AB\u00B6\u00B7\u00BB\u00BF\u037E\u0387\u055A-\u055F\u0589\u058A\u05BE\u05C0\u05C3\u05C6\u05F3\u05F4\u0609\u060A\u060C\u060D\u061B\u061E\u061F\u066A-\u066D\u06D4\u0700-\u070D\u07F7-\u07F9\u0830-\u083E\u085E\u0964\u0965\u0970\u09FD\u0A76\u0AF0\u0C77\u0C84\u0DF4\u0E4F\u0E5A\u0E5B\u0F04-\u0F12\u0F14\u0F3A-\u0F3D\u0F85\u0FD0-\u0FD4\u0FD9\u0FDA\u104A-\u104F\u10FB\u1360-\u1368\u1400\u166E\u1680\u169B\u169C\u16EB-\u16ED\u1735\u1736\u17D4-\u17D6\u17D8-\u17DA\u1800-\u180A\u1944\u1945\u1A1E\u1A1F\u1AA0-\u1AA6\u1AA8-\u1AAD\u1B5A-\u1B60\u1BFC-\u1BFF\u1C3B-\u1C3F\u1C7E\u1C7F\u1CC0-\u1CC7\u1CD3\u2000-\u200A\u2010-\u2029\u202F-\u2043\u2045-\u2051\u2053-\u205F\u207D\u207E\u208D\u208E\u2308-\u230B\u2329\u232A\u2768-\u2775\u27C5\u27C6\u27E6-\u27EF\u2983-\u2998\u29D8-\u29DB\u29FC\u29FD\u2CF9-\u2CFC\u2CFE\u2CFF\u2D70\u2E00-\u2E2E\u2E30-\u2E4F\u3000-\u3003\u3008-\u3011\u3014-\u301F\u3030\u303D\u30A0\u30FB\uA4FE\uA4FF\uA60D-\uA60F\uA673\uA67E\uA6F2-\uA6F7\uA874-\uA877\uA8CE\uA8CF\uA8F8-\uA8FA\uA8FC\uA92E\uA92F\uA95F\uA9C1-\uA9CD\uA9DE\uA9DF\uAA5C-\uAA5F\uAADE\uAADF\uAAF0\uAAF1\uABEB\uFD3E\uFD3F\uFE10-\uFE19\uFE30-\uFE52\uFE54-\uFE61\uFE63\uFE68\uFE6A\uFE6B\uFF01-\uFF03\uFF05-\uFF0A\uFF0C-\uFF0F\uFF1A\uFF1B\uFF1F\uFF20\uFF3B-\uFF3D\uFF3F\uFF5B\uFF5D\uFF5F-\uFF65]+/u,M="or",$="and",rt="and_not",ct=(e,t)=>{e.includes(t)||e.push(t)},N=(e,t)=>{for(const s of t)e.includes(s)||e.push(s)},P=({score:e},{score:t})=>t-e,lt=()=>new Map,b=e=>{const t=new Map;for(const s of Object.keys(e))t.set(parseInt(s,10),e[s]);return t},G=(e,t)=>Object.prototype.hasOwnProperty.call(e,t)?e[t]:void 0,ht={[M]:(e,t)=>{for(const s of t.keys()){const n=e.get(s);if(n==null)e.set(s,t.get(s));else{const{score:o,terms:u,match:i}=t.get(s);n.score=n.score+o,n.match=Object.assign(n.match,i),N(n.terms,u)}}return e},[$]:(e,t)=>{const s=new Map;for(const n of t.keys()){const o=e.get(n);if(o==null)continue;const{score:u,terms:i,match:r}=t.get(n);N(o.terms,i),s.set(n,{score:o.score+u,terms:o.terms,match:Object.assign(o.match,r)})}return s},[rt]:(e,t)=>{for(const s of t.keys())e.delete(s);return e}},dt=(e,t,s,n,o,u)=>{const{k:i,b:r,d}=u;return Math.log(1+(s-t+.5)/(t+.5))*(d+e*(i+1)/(e+i*(1-r+r*n/o)))},at=e=>(t,s,n)=>{const o=typeof e.fuzzy=="function"?e.fuzzy(t,s,n):e.fuzzy||!1,u=typeof e.prefix=="function"?e.prefix(t,s,n):e.prefix===!0;return{term:t,fuzzy:o,prefix:u}},H=(e,t,s,n)=>{for(const o of Object.keys(e._fieldIds))if(e._fieldIds[o]===s){e._options.logger("warn",`SlimSearch: document with ID ${e._documentIds.get(t)} has changed before removal: term "${n}" was not present in field "${o}". Removing a document after it has changed can corrupt the index!`,"version_conflict");return}},ft=(e,t,s,n)=>{if(!e._index.has(n)){H(e,s,t,n);return}const o=e._index.fetch(n,lt),u=o.get(t);u==null||u.get(s)==null?H(e,s,t,n):u.get(s)<=1?u.size<=1?o.delete(t):u.delete(s):u.set(s,u.get(s)-1),e._index.get(n).size===0&&e._index.delete(n)},gt={k:1.2,b:.7,d:.5},mt={idField:"id",extractField:(e,t)=>e[t],tokenize:e=>e.split(it),processTerm:e=>e.toLowerCase(),fields:void 0,searchOptions:void 0,storeFields:[],logger:(e,t)=>{typeof console?.[e]=="function"&&console[e](t)},autoVacuum:!0},J={combineWith:M,prefix:!1,fuzzy:!1,maxFuzzy:6,boost:{},weights:{fuzzy:.45,prefix:.375},bm25:gt},pt={combineWith:$,prefix:(e,t,s)=>t===s.length-1},Ft={batchSize:1e3,batchWait:10},U={minDirtFactor:.1,minDirtCount:20},_t={...Ft,...U},K=Symbol("*"),yt=(e,t)=>{const s=new Map,n={...e._options.searchOptions,...t};for(const[o,u]of e._documentIds){const i=n.boostDocument?n.boostDocument(u,"",e._storedFields.get(o)):1;s.set(o,{score:i,terms:[],match:{}})}return s},X=(e,t=M)=>{if(e.length===0)return new Map;const s=t.toLowerCase(),n=ht[s];if(!n)throw new Error(`Invalid combination operator: ${t}`);return e.reduce(n)||new Map},S=(e,t,s,n,o,u,i,r,d=new Map)=>{if(o==null)return d;for(const c of Object.keys(u)){const a=u[c],h=e._fieldIds[c],g=o.get(h);if(g==null)continue;let m=g.size;const p=e._avgFieldLength[h];for(const l of g.keys()){if(!e._documentIds.has(l)){ft(e,h,l,s),m-=1;continue}const f=i?i(e._documentIds.get(l),s,e._storedFields.get(l)):1;if(!f)continue;const y=g.get(l),F=e._fieldLength.get(l)[h],v=dt(y,m,e._documentCount,F,p,r),z=n*a*f*v,A=d.get(l);if(A){A.score+=z,ct(A.terms,t);const w=G(A.match,s);w?w.push(c):A.match[s]=[c]}else d.set(l,{score:z,terms:[t],match:{[s]:[c]}})}}return d},At=(e,t,s)=>{const n={...e._options.searchOptions,...s},o=(n.fields||e._options.fields).reduce((l,f)=>({...l,[f]:G(n.boost,f)||1}),{}),{boostDocument:u,weights:i,maxFuzzy:r,bm25:d}=n,{fuzzy:c,prefix:a}={...J.weights,...i},h=e._index.get(t.term),g=S(e,t.term,t.term,1,h,o,u,d);let m,p;if(t.prefix&&(m=e._index.atPrefix(t.term)),t.fuzzy){const l=t.fuzzy===!0?.2:t.fuzzy,f=l<1?Math.min(r,Math.round(t.term.length*l)):l;f&&(p=e._index.fuzzyGet(t.term,f))}if(m)for(const[l,f]of m){const y=l.length-t.term.length;if(!y)continue;p?.delete(l);const F=a*l.length/(l.length+.3*y);S(e,t.term,l,F,f,o,u,d,g)}if(p)for(const l of p.keys()){const[f,y]=p.get(l);if(!y)continue;const F=c*l.length/(l.length+y);S(e,t.term,l,F,f,o,u,d,g)}return g},Y=(e,t,s={})=>{if(t===K)return yt(e,s);if(typeof t!="string"){const a={...s,...t,queries:void 0},h=t.queries.map(g=>Y(e,g,a));return X(h,a.combineWith)}const{tokenize:n,processTerm:o,searchOptions:u}=e._options,i={tokenize:n,processTerm:o,...u,...s},{tokenize:r,processTerm:d}=i,c=r(t).flatMap(a=>d(a)).filter(a=>!!a).map(at(i)).map(a=>At(e,a,i));return X(c,i.combineWith)},Q=(e,t,s={})=>{const n=Y(e,t,s),o=[];for(const[u,{score:i,terms:r,match:d}]of n){const c=r.length||1,a={id:e._documentIds.get(u),score:i*c,terms:Object.keys(d),queryTerms:r,match:d};Object.assign(a,e._storedFields.get(u)),(s.filter==null||s.filter(a))&&o.push(a)}return t===K&&s.boostDocument==null&&e._options.searchOptions.boostDocument==null||o.sort(P),o},Ct=(e,t,s={})=>{s={...e._options.autoSuggestOptions,...s};const n=new Map;for(const{score:u,terms:i}of Q(e,t,s)){const r=i.join(" "),d=n.get(r);d!=null?(d.score+=u,d.count+=1):n.set(r,{score:u,terms:i,count:1})}const o=[];for(const[u,{score:i,terms:r,count:d}]of n)o.push({suggestion:u,terms:r,score:i/d});return o.sort(P),o};class Et{_options;_index;_documentCount;_documentIds;_idToShortId;_fieldIds;_fieldLength;_avgFieldLength;_nextId;_storedFields;_dirtCount;_currentVacuum;_enqueuedVacuum;_enqueuedVacuumConditions;constructor(t){if(t?.fields==null)throw new Error('SlimSearch: option "fields" must be provided');const s=t.autoVacuum==null||t.autoVacuum===!0?_t:t.autoVacuum;this._options={...mt,...t,autoVacuum:s,searchOptions:{...J,...t.searchOptions||{}},autoSuggestOptions:{...pt,...t.autoSuggestOptions||{}}},this._index=new C,this._documentCount=0,this._documentIds=new Map,this._idToShortId=new Map,this._fieldIds={},this._fieldLength=new Map,this._avgFieldLength=[],this._nextId=0,this._storedFields=new Map,this._dirtCount=0,this._currentVacuum=null,this._enqueuedVacuum=null,this._enqueuedVacuumConditions=U,this.addFields(this._options.fields)}get isVacuuming(){return this._currentVacuum!=null}get dirtCount(){return this._dirtCount}get dirtFactor(){return this._dirtCount/(1+this._documentCount+this._dirtCount)}get documentCount(){return this._documentCount}get termCount(){return this._index.size}toJSON(){const t=[];for(const[s,n]of this._index){const o={};for(const[u,i]of n)o[u]=Object.fromEntries(i);t.push([s,o])}return{documentCount:this._documentCount,nextId:this._nextId,documentIds:Object.fromEntries(this._documentIds),fieldIds:this._fieldIds,fieldLength:Object.fromEntries(this._fieldLength),averageFieldLength:this._avgFieldLength,storedFields:Object.fromEntries(this._storedFields),dirtCount:this._dirtCount,index:t,serializationVersion:2}}addFields(t){for(let s=0;s<t.length;s++)this._fieldIds[t[s]]=s}}const zt=({index:e,documentCount:t,nextId:s,documentIds:n,fieldIds:o,fieldLength:u,averageFieldLength:i,storedFields:r,dirtCount:d,serializationVersion:c},a)=>{if(c!==1&&c!==2)throw new Error("SlimSearch: cannot deserialize an index created with an incompatible version");const h=new Et(a);h._documentCount=t,h._nextId=s,h._documentIds=b(n),h._idToShortId=new Map,h._fieldIds=o,h._fieldLength=b(u),h._avgFieldLength=i,h._storedFields=b(r),h._dirtCount=d||0,h._index=new C;for(const[g,m]of h._documentIds)h._idToShortId.set(m,g);for(const[g,m]of e){const p=new Map;for(const l of Object.keys(m)){let f=m[l];c===1&&(f=f.ds),p.set(parseInt(l,10),b(f))}h._index.set(g,p)}return h},B=(e,t)=>{const s=e.toLowerCase(),n=t.toLowerCase(),o=[];let u=0,i=0;const r=(c,a=!1)=>{let h="";i===0?h=c.length>20?`… ${c.slice(-20)}`:c:a?h=c.length+i>100?`${c.slice(0,100-i)}… `:c:h=c.length>20?`${c.slice(0,20)} … ${c.slice(-20)}`:c,h&&o.push(h),i+=h.length,a||(o.push(["mark",t]),i+=t.length,i>=100&&o.push(" …"))};let d=s.indexOf(n,u);if(d===-1)return null;for(;d>=0;){const c=d+n.length;if(r(e.slice(u,d)),u=c,i>100)break;d=s.indexOf(n,u)}return i<100&&r(e.slice(u),!0),o},wt=(e,t)=>t.contents.reduce((s,[,n])=>s+n,0)-e.contents.reduce((s,[,n])=>s+n,0),xt=(e,t)=>Math.max(...t.contents.map(([,s])=>s))-Math.max(...e.contents.map(([,s])=>s)),Z=(e,t,s={})=>{const n={};return Q(t,e,{boost:{h:2,t:1,c:4},prefix:!0,...s}).forEach(o=>{const{id:u,terms:i,score:r}=o,d=u.includes("@"),c=u.includes("#"),[a,h]=u.split(/[#@]/),g=Number(a),m=i.sort((l,f)=>l.length-f.length).filter((l,f)=>i.slice(f+1).every(y=>!y.includes(l))),{contents:p}=n[g]??={title:"",contents:[]};if(d)p.push([{type:"customField",id:g,index:h,display:m.map(l=>o.c.map(f=>B(f,l))).flat().filter(l=>l!==null)},r]);else{const l=m.map(f=>B(o.h,f)).filter(f=>f!==null);if(l.length&&p.push([{type:c?"heading":"title",id:g,...c&&{anchor:h},display:l},r]),"t"in o)for(const f of o.t){const y=m.map(F=>B(f,F)).filter(F=>F!==null);y.length&&p.push([{type:"text",id:g,...c&&{anchor:h},display:y},r])}}}),V(n).sort(([,o],[,u])=>"max"==="total"?wt(o,u):xt(o,u)).map(([o,{title:u,contents:i}])=>{if(!u){const r=ut(t,o);r&&(u=r.h)}return{title:u,contents:i.map(([r])=>r)}})},tt=(e,t,s={})=>{const n=Ct(t,e,{fuzzy:.2,maxFuzzy:3,...s}).map(({suggestion:o})=>o);return e.includes(" ")?n:n.filter(o=>!o.includes(" "))},bt=et(V(JSON.parse("{\"/\":{\"documentCount\":823,\"nextId\":823,\"documentIds\":{\"0\":\"1\",\"1\":\"1#狄克斯特拉算法\",\"2\":\"1@0\",\"3\":\"1@1\",\"4\":\"2\",\"5\":\"2@0\",\"6\":\"2@1\",\"7\":\"3\",\"8\":\"3#在排序数组中查找元素的第一个和最后一个位置\",\"9\":\"3#寻找两个正序数组的中位数\",\"10\":\"3@0\",\"11\":\"3@1\",\"12\":\"4\",\"13\":\"4#盛最多水的容器\",\"14\":\"4@0\",\"15\":\"4@1\",\"16\":\"5\",\"17\":\"5#拿走最有价值的物品\",\"18\":\"5#k-站中转内最便宜的航班\",\"19\":\"5@0\",\"20\":\"5@1\",\"21\":\"6\",\"22\":\"6#教室调度问题\",\"23\":\"6#跳跃游戏\",\"24\":\"6@0\",\"25\":\"6@1\",\"26\":\"7\",\"27\":\"7@0\",\"28\":\"7@1\",\"29\":\"8\",\"30\":\"8@0\",\"31\":\"8@1\",\"32\":\"9\",\"33\":\"9#时间复杂度\",\"34\":\"9#空间复杂度\",\"35\":\"9@0\",\"36\":\"9@1\",\"37\":\"10\",\"38\":\"10@0\",\"39\":\"10@1\",\"40\":\"11\",\"41\":\"11@0\",\"42\":\"11@1\",\"43\":\"12\",\"44\":\"12@0\",\"45\":\"13\",\"46\":\"13#基线条件和递归条件\",\"47\":\"13@0\",\"48\":\"13@1\",\"49\":\"14\",\"50\":\"14@0\",\"51\":\"14@1\",\"52\":\"15\",\"53\":\"15#冒泡排序\",\"54\":\"15#选择排序\",\"55\":\"15#插入排序\",\"56\":\"15#希尔排序\",\"57\":\"15#归并排序\",\"58\":\"15#快速排序\",\"59\":\"15#堆排序\",\"60\":\"15#计数排序\",\"61\":\"15#桶排序\",\"62\":\"15#基数排序\",\"63\":\"15@0\",\"64\":\"16\",\"65\":\"16#net和c-的关系\",\"66\":\"16#标识符\",\"67\":\"16#关键字\",\"68\":\"16#main方法\",\"69\":\"16#cli和clr\",\"70\":\"16#cli\",\"71\":\"16#clr\",\"72\":\"16#jit编译器\",\"73\":\"16#aot编译器\",\"74\":\"16#命名空间\",\"75\":\"16#using指令\",\"76\":\"16#类\",\"77\":\"16#成员\",\"78\":\"16#字段\",\"79\":\"16#属性\",\"80\":\"16#索引器\",\"81\":\"16#静态成员\",\"82\":\"16#构造函数\",\"83\":\"16#重载\",\"84\":\"16#继承\",\"85\":\"16#记录\",\"86\":\"16#接口\",\"87\":\"16#泛型\",\"88\":\"16@0\",\"89\":\"17\",\"90\":\"17@0\",\"91\":\"18\",\"92\":\"18#iqueryable\",\"93\":\"21\",\"94\":\"21#进程架构\",\"95\":\"21#chrome-的进程架构\",\"96\":\"21#html-加载\",\"97\":\"21#渲染过程\",\"98\":\"21#html-转-dom-树\",\"99\":\"21#css-转-stylesheet\",\"100\":\"21#计算出-dom-节点的样式\",\"101\":\"21#构建布局树\",\"102\":\"21#计算布局\",\"103\":\"21#生成分层树\",\"104\":\"21#绘制\",\"105\":\"21#合成线程\",\"106\":\"21#图块\",\"107\":\"21#栅格化\",\"108\":\"21#资源加载\",\"109\":\"21@0\",\"110\":\"22\",\"111\":\"22#解析\",\"112\":\"22@0\",\"113\":\"23\",\"114\":\"23#变量提升\",\"115\":\"23#变量提升-hoisting\",\"116\":\"23#javascript代码的执行流程\",\"117\":\"23#栈溢出\",\"118\":\"23#浏览器查看调用栈\",\"119\":\"23#作用域-scope\",\"120\":\"23#变量提升的问题\",\"121\":\"23#es6解决变量提升的缺陷\",\"122\":\"23#如何支持块级作用域\",\"123\":\"23#作用域链和闭包\",\"124\":\"23#作用域链\",\"125\":\"23#词法作用域\",\"126\":\"23#变量查找\",\"127\":\"23#闭包\",\"128\":\"23#闭包回收\",\"129\":\"23#this\",\"130\":\"24\",\"131\":\"24#chrome开发者工具\",\"132\":\"24#网络面板\",\"133\":\"24#dom树\",\"134\":\"24#dom树的生成\",\"135\":\"25\",\"136\":\"25#animation\",\"137\":\"25#transition\",\"138\":\"26\",\"139\":\"26#b代表区块-block\",\"140\":\"26#e代表元素-elements\",\"141\":\"26#m代表修饰符-modifiers\",\"142\":\"26@0\",\"143\":\"27\",\"144\":\"27#bfc-清除浮动\",\"145\":\"27#clear-清除浮动\",\"146\":\"27#zoom\",\"147\":\"27#zoom和scale\",\"148\":\"27@0\",\"149\":\"28\",\"150\":\"28#色彩关键字\",\"151\":\"28#transparent\",\"152\":\"28#currentcolor\",\"153\":\"28#rgb-和-rgba\",\"154\":\"28#hsl-和-hsla\",\"155\":\"28@0\",\"156\":\"29\",\"157\":\"29#文本类型\",\"158\":\"29#custom-ident\",\"159\":\"29#预定义的关键值\",\"160\":\"29#string\",\"161\":\"29#url\",\"162\":\"29#数值数据类型\",\"163\":\"29#integer\",\"164\":\"29#number\",\"165\":\"29#dimension\",\"166\":\"29#percentage\",\"167\":\"29@0\",\"168\":\"30\",\"169\":\"30#可替换元素实现固定宽高比\",\"170\":\"30#padding-bottom-实现\",\"171\":\"30#aspect-ratio-属性实现\",\"172\":\"30@0\",\"173\":\"31\",\"174\":\"31#bfc\",\"175\":\"31#ifc\",\"176\":\"31#ffc\",\"177\":\"31#gfc\",\"178\":\"31@0\",\"179\":\"32\",\"180\":\"32#响应式布局\",\"181\":\"32#自适应布局\",\"182\":\"32@0\",\"183\":\"33\",\"184\":\"33#outer-display-type\",\"185\":\"33#块级元素\",\"186\":\"33#行内元素\",\"187\":\"33#inner-display-type\",\"188\":\"33@0\",\"189\":\"34\",\"190\":\"34#造型函数\",\"191\":\"34#smoothstep\",\"192\":\"34#clamp\",\"193\":\"34#控制函数\",\"194\":\"34#函数可视化\",\"195\":\"34#数学函数\",\"196\":\"34#矩阵函数\",\"197\":\"34#向量函数\",\"198\":\"34#计算函数\",\"199\":\"34#纹理函数\",\"200\":\"34#自定义函数\",\"201\":\"34@0\",\"202\":\"35\",\"203\":\"35@0\",\"204\":\"36\",\"205\":\"36@0\",\"206\":\"37\",\"207\":\"37@0\",\"208\":\"38\",\"209\":\"38#fragment-shader-片段着色器\",\"210\":\"38#uniform\",\"211\":\"38#gl-fragcoord\",\"212\":\"38#glsl\",\"213\":\"38@0\",\"214\":\"39\",\"215\":\"39#平移\",\"216\":\"39#旋转\",\"217\":\"39#缩放\",\"218\":\"39#雷达\",\"219\":\"39@0\",\"220\":\"40\",\"221\":\"40#操作符\",\"222\":\"40@0\",\"223\":\"41\",\"224\":\"41#长方形\",\"225\":\"41#圆\",\"226\":\"41#距离场\",\"227\":\"41#极坐标下的图形\",\"228\":\"41@0\",\"229\":\"42\",\"230\":\"42#基本数据类型变量\",\"231\":\"42#向量类型变量\",\"232\":\"42#数组类型变量\",\"233\":\"42#矩阵类型变量\",\"234\":\"42#结构体类型变量\",\"235\":\"42#纹理类型变量\",\"236\":\"42#修饰符类型变量\",\"237\":\"42#uniforms\",\"238\":\"42#特殊类型变量\",\"239\":\"42#顶点着色器变量\",\"240\":\"42#片段着色器\",\"241\":\"42#精度限定符\",\"242\":\"42@0\",\"243\":\"43\",\"244\":\"43@0\",\"245\":\"44\",\"246\":\"44#浏览器进程\",\"247\":\"44#渲染进程\",\"248\":\"44#eventloop\",\"249\":\"44#宏任务\",\"250\":\"44#微任务\",\"251\":\"44#浏览器的-event-loop\",\"252\":\"44#promise\",\"253\":\"44#async-await\",\"254\":\"44#微任务队列\",\"255\":\"44#node10-xx-中的-eventloop\",\"256\":\"44#六个阶段\",\"257\":\"44#_3-注意点\",\"258\":\"44#node10-xx-与浏览器的-event-loop-差异\",\"259\":\"44@0\",\"260\":\"45\",\"261\":\"45#symbol-iterator\",\"262\":\"45#迭代器模式\",\"263\":\"45#可迭代协议\",\"264\":\"45#实现可迭代对象\",\"265\":\"45#迭代器协议\",\"266\":\"45#实现迭代器对象\",\"267\":\"45#生成器\",\"268\":\"45#生成器基础\",\"269\":\"45#通过-yield-中断执行\",\"270\":\"45#生成器对象作为可迭代对象\",\"271\":\"45#使用-yield-实现输入和输出\",\"272\":\"45#产生可迭代对象\",\"273\":\"45#生成器作为默认迭代器\",\"274\":\"45#提前终止生成器\",\"275\":\"45@0\",\"276\":\"46\",\"277\":\"46#_0-前期工作\",\"278\":\"46#_1-术语\",\"279\":\"46#_2-必要条件\",\"280\":\"46#_2-1-promise-状态\",\"281\":\"46#_2-2-then-方法\",\"282\":\"46#_2-3-promise-解决程序\",\"283\":\"46#function-promise\",\"284\":\"46@0\",\"285\":\"47\",\"286\":\"47#代理基础\",\"287\":\"47#创建空代理\",\"288\":\"47#定义捕获器\",\"289\":\"47#捕获器参数和反射-api\",\"290\":\"47#捕获器不变式\",\"291\":\"47#可撤销代理\",\"292\":\"47#实用反射-api\",\"293\":\"47#反射-api-与对象-api\",\"294\":\"47#状态标记\",\"295\":\"47#一等函数代替操作符\",\"296\":\"47#安全地应用函数\",\"297\":\"47#代理另一个代理\",\"298\":\"47#代理的问题与不足\",\"299\":\"47#代理中的-this\",\"300\":\"47#代理与内部插槽\",\"301\":\"47#代理捕获器与反射方法\",\"302\":\"47#get-对应-reflect-get\",\"303\":\"47#set-对应-reflect-set\",\"304\":\"47#has-对应-reflect-has\",\"305\":\"47#defineproperty-对应-reflect-defineproperty\",\"306\":\"47#getownpropertydescriptor-对应-reflect-getownpropertydescriptor\",\"307\":\"47#deleteproperty-对应-reflect-deleteproperty\",\"308\":\"47#ownkeys-对应-reflect-ownkeys\",\"309\":\"47#getprototypeof-对应-reflect-getprototypeof\",\"310\":\"47#setprototypeof-对应-reflect-setprototypeof\",\"311\":\"47#isextensible-对应-reflect-isextensible\",\"312\":\"47#preventextensions-对应-reflect-preventextensions\",\"313\":\"47#apply-对应-reflect-apply\",\"314\":\"47#construct-对应-reflect-construct\",\"315\":\"47#代理模式\",\"316\":\"47#跟踪属性访问\",\"317\":\"47#隐藏属性\",\"318\":\"47#属性验证\",\"319\":\"47#函数与构造函数参数验证\",\"320\":\"47#数据绑定与可观测对象\",\"321\":\"47@0\",\"322\":\"48\",\"323\":\"48#小程序启动\",\"324\":\"48#前台和后台\",\"325\":\"48#生命周期\",\"326\":\"48#小程序\",\"327\":\"48#页面\",\"328\":\"48#组件\",\"329\":\"48@0\",\"330\":\"49\",\"331\":\"49#生成http请求信息\",\"332\":\"49#url\",\"333\":\"49#解析url\",\"334\":\"49#省略文件名\",\"335\":\"49#http\",\"336\":\"49#生成http请求信息-1\",\"337\":\"49#发送请求收到响应\",\"338\":\"49#向dns服务查询ip\",\"339\":\"49#ip地址\",\"340\":\"49#域名和ip地址并用理由\",\"341\":\"49#socket库提供查询ip地址\",\"342\":\"49#通过解析器向dns查询\",\"343\":\"49#解析器的内部原理\",\"344\":\"49#dns服务器\",\"345\":\"49#dns基本工作\",\"346\":\"49#域名的层次结构\",\"347\":\"49#通过缓存加快dns服务器的响应\",\"348\":\"49#委托协议栈发送消息\",\"349\":\"49#数据收发操作概览\",\"350\":\"49#创建套接字阶段\",\"351\":\"49@0\",\"352\":\"49@1\",\"353\":\"50\",\"354\":\"50#创建嵌套字\",\"355\":\"50#协议栈的内部结构\",\"356\":\"50#套接字的实体就是通信控制信息\",\"357\":\"50#调用socket时的操作\",\"358\":\"50#连接服务器\",\"359\":\"50#保存控制信息的头部\",\"360\":\"50#连接操作的实际过程\",\"361\":\"50#收发数据\",\"362\":\"50#将http-请求消息交给协议栈\",\"363\":\"50#对较大的数据进行拆分\",\"364\":\"50#使用ack号确认网络包已收到\",\"365\":\"50#根据网络包平均往返时间调整ack-号等待时间\",\"366\":\"50#使用窗口有效管理ack号\",\"367\":\"50#ack与窗口的合并\",\"368\":\"50#接受http响应消息\",\"369\":\"50#从服务器断开并删除嵌套字\",\"370\":\"50#数据发送完毕后断开连接\",\"371\":\"50#删除套接字\",\"372\":\"50#数据收发操作小结\",\"373\":\"50#ip与以太网的包收发操\",\"374\":\"50#包的基本知识\",\"375\":\"50#包收发操作概览\",\"376\":\"50#生成包含接收方ip地址的ip头部\",\"377\":\"50#生成以太网用的mac头部\",\"378\":\"50#通过arp查询目标路由器的mac地址\",\"379\":\"50#以太网的基本知识\",\"380\":\"50#将ip包转换为电或光信号发送出去\",\"381\":\"50#给网络包加3个控制数据\",\"382\":\"50#向集线器发送网络包\",\"383\":\"50@0\",\"384\":\"50@1\",\"385\":\"51\",\"386\":\"51#信号在网线和集线器中传输\",\"387\":\"51#每个包都是独立传输的\",\"388\":\"51#防止网线中的信号衰减很重要\",\"389\":\"51#双绞-是为了抑制噪声\",\"390\":\"51#集线器将信号发往所有线路\",\"391\":\"51#交换机的包转发操作\",\"392\":\"51#交换机根据地址表进行转发\",\"393\":\"51#mac-地址表的维护\",\"394\":\"51#特殊操作\",\"395\":\"51#全双工模式可以同时进行发送和接收\",\"396\":\"51#自动协商-确定最优的传输速率\",\"397\":\"51#路由器的包转发操作\",\"398\":\"51#路由器的基本知识\",\"399\":\"51#路由表中的信息\",\"400\":\"51#路由器的包接收操作\",\"401\":\"51#查询路由表确定输出端口\",\"402\":\"51#找不到匹配路由时选择默认路由\",\"403\":\"51#包的有效期\",\"404\":\"51#通过分片功能拆分大网络包\",\"405\":\"51#路由器的发送操作和计算机相同\",\"406\":\"51#路由器与交换机的关系\",\"407\":\"51#路由器的附加功能\",\"408\":\"51#通过地址转换有效利用-ip-地址\",\"409\":\"51#地址转换的基本原理\",\"410\":\"51#改写端口号的原因\",\"411\":\"51#从互联网访问公司内网\",\"412\":\"51#路由器的包过滤功能\",\"413\":\"51@0\",\"414\":\"51@1\",\"415\":\"52\",\"416\":\"52#adsl-接入网的结构和工作方式\",\"417\":\"52#互联网的基本结构和家庭、公司网络是相同的\",\"418\":\"52#连接用户与互联网的接入网\",\"419\":\"52#adsl-modem-将包拆分成信元\",\"420\":\"52#adsl-将信元-调制-成信号\",\"421\":\"52#adsl-通过使用多个波来提高速率\",\"422\":\"52#分离器的作用\",\"423\":\"52#光纤接入网-ftth\",\"424\":\"52#光纤的基本知识\",\"425\":\"52#单模与多模\",\"426\":\"52#接入网中使用的-ppp-和隧道\",\"427\":\"52#网络运营商的内部\",\"428\":\"52#跨越运营商的网络包\",\"429\":\"52@0\",\"430\":\"52@1\",\"431\":\"53\",\"432\":\"53#特性\",\"433\":\"54\",\"434\":\"54#use-method\",\"435\":\"54#apm-性能指标\",\"436\":\"54#qps-tps\",\"437\":\"54#rt-concurrency\",\"438\":\"54#crafana-graphite\",\"439\":\"54#gauges-counter-sets\",\"440\":\"54#alinode\",\"441\":\"54#网络部署架构\",\"442\":\"54#负载均衡\",\"443\":\"54#进程负载均衡和-rpc-负载均衡\",\"444\":\"54#rpc-调用原理\",\"445\":\"54#服务负载均衡-集群-cluster\",\"446\":\"54#共享端口、时序图、进程间通信\",\"447\":\"54#分布式-rpc-负载均衡\",\"448\":\"54#负载均衡算法-round-robin、weighted-round-robin、source-ip-hash\",\"449\":\"54#布隆过滤器\",\"450\":\"54#nodejs-优雅退出\",\"451\":\"54#graceful-exit-的概念\",\"452\":\"54#灰度发布机制-health-check\",\"453\":\"55\",\"454\":\"55#日志\",\"455\":\"55#console\",\"456\":\"55#服务器应用日志\",\"457\":\"55#日志的级别介绍\",\"458\":\"55#好的日志\",\"459\":\"55#避免\",\"460\":\"55#日志切割技术-logrotate\",\"461\":\"55#create-copytruncate\",\"462\":\"55#命令行日志\",\"463\":\"55#彩色日志\",\"464\":\"55#elk\",\"465\":\"55#sentry\",\"466\":\"55#sentry和elk\",\"467\":\"55@0\",\"468\":\"56\",\"469\":\"56#csrf\",\"470\":\"56#xss\",\"471\":\"56#反射型xss攻击\",\"472\":\"56#储存型xss攻击\",\"473\":\"56#dom型xss攻击\",\"474\":\"56#越权\",\"475\":\"56#ssrf\",\"476\":\"56#hpp\",\"477\":\"56#不安全的跳转-钓鱼\",\"478\":\"56#不安全的npm包\",\"479\":\"56#目录遍历攻击\",\"480\":\"56@0\",\"481\":\"57\",\"482\":\"57#单元测试\",\"483\":\"57#意义\",\"484\":\"57#mocha\",\"485\":\"58\",\"486\":\"58#代码压缩\",\"487\":\"58#uglifyjs\",\"488\":\"58#文本压缩\",\"489\":\"58#tree-shaking\",\"490\":\"58#code-splitting\",\"491\":\"59\",\"492\":\"59#骨架屏\",\"493\":\"59#snapshot\",\"494\":\"59#loading\",\"495\":\"60\",\"496\":\"60#懒加载\",\"497\":\"60#dns预解析、预加载、预渲染\",\"498\":\"60#离线化\",\"499\":\"60#http缓存\",\"500\":\"60#数据缓存\",\"501\":\"60#资源加载\",\"502\":\"60#请求合并\",\"503\":\"60#http2\",\"504\":\"60#cdn\",\"505\":\"61\",\"506\":\"61#css代码优化-选择器、启动gpu、避免表达式\",\"507\":\"61#使用requestanimationframe实现视觉变化\",\"508\":\"61#降低复杂度或使用web-worker\",\"509\":\"61#避免大型、复杂的布局和布局抖动\",\"510\":\"61#简化绘制复杂度、减少绘制区域\",\"511\":\"61#输入处理程序防抖\",\"512\":\"62\",\"513\":\"62#小图优化\",\"514\":\"62#图片格式选择\",\"515\":\"62#压缩\",\"516\":\"62#响应式\",\"517\":\"63\",\"518\":\"63@0\",\"519\":\"64\",\"520\":\"64#init\",\"521\":\"64#initcomputed\",\"522\":\"64#步骤\",\"523\":\"64#取值\",\"524\":\"64#更新\",\"525\":\"64@0\",\"526\":\"65\",\"527\":\"65#内置指令\",\"528\":\"65#v-model\",\"529\":\"65#v-if\",\"530\":\"65#v-for\",\"531\":\"65#自定义指令\",\"532\":\"65#全局方法\",\"533\":\"65#局部方法\",\"534\":\"65#指令解析\",\"535\":\"65#指令生效\",\"536\":\"65@0\",\"537\":\"66\",\"538\":\"66#开始\",\"539\":\"66#vue-loader\",\"540\":\"66#entry\",\"541\":\"66#vue\",\"542\":\"66#initglobalapi\",\"543\":\"66#instance\",\"544\":\"66#init\",\"545\":\"66#vm-options-处理\",\"546\":\"66#resolveconstructoroptions\",\"547\":\"66#mergeoptions\",\"548\":\"66#callhook\",\"549\":\"66#initstate\",\"550\":\"66#proxy\",\"551\":\"66#initprops\",\"552\":\"66#initmethods\",\"553\":\"66#initdata\",\"554\":\"66#initcomputed\",\"555\":\"66#initwatch\",\"556\":\"66#响应式原理\",\"557\":\"66#更新过程\",\"558\":\"66#flushschedulerqueue\",\"559\":\"66#watcher-run\",\"560\":\"66#observe\",\"561\":\"66#observer\",\"562\":\"66#arraymethods\",\"563\":\"66#definereactive\",\"564\":\"66#dep\",\"565\":\"66#watcher\",\"566\":\"66#初始化过程分析\",\"567\":\"66#nexttick\",\"568\":\"66#timerfunc\",\"569\":\"66@0\",\"570\":\"67\",\"571\":\"67#使用\",\"572\":\"67#结合路由\",\"573\":\"67#keep-alive\",\"574\":\"67#使用渲染\",\"575\":\"67#createcomponent\",\"576\":\"67@0\",\"577\":\"68\",\"578\":\"68#父子生命周期\",\"579\":\"68@0\",\"580\":\"69\",\"581\":\"69#mount\",\"582\":\"69#mountcomponent\",\"583\":\"69#render\",\"584\":\"69#createelement\",\"585\":\"69#createcomponent\",\"586\":\"69#update\",\"587\":\"69#createpathfunction\",\"588\":\"69#path\",\"589\":\"69#samevnode\",\"590\":\"69#createelm\",\"591\":\"69#createcomponent-1\",\"592\":\"69#initcomponent\",\"593\":\"69#insert\",\"594\":\"69#removenode\",\"595\":\"69#invokecreatehooks\",\"596\":\"69#patchvnode\",\"597\":\"69#updatechildren\",\"598\":\"69@0\",\"599\":\"70\",\"600\":\"70#前言\",\"601\":\"70#完整版本\",\"602\":\"70#运行时\",\"603\":\"70#流程\",\"604\":\"70#parse\",\"605\":\"70#html-解析\",\"606\":\"70#parsehtml\",\"607\":\"70#parsestarttag\",\"608\":\"70#handlestarttag\",\"609\":\"70#start\",\"610\":\"70#文本解析\",\"611\":\"70#parsetext\",\"612\":\"70#optimize\",\"613\":\"70#markstatic\",\"614\":\"70#markstaticroots\",\"615\":\"70#generate\",\"616\":\"70@0\",\"617\":\"71\",\"618\":\"71#用法\",\"619\":\"71#scoped-css\",\"620\":\"71#混用本地和全局样式\",\"621\":\"71#子组件的根元素\",\"622\":\"71#深度作用选择器\",\"623\":\"71#动态生成的内容\",\"624\":\"71#还有一些要留意\",\"625\":\"71#template-处理\",\"626\":\"71#pitcher-loader\",\"627\":\"71#templateloaderpath\",\"628\":\"71#style-处理\",\"629\":\"71#vue-loader\",\"630\":\"71#pitch-loader\",\"631\":\"71#stylepostloader\",\"632\":\"71@0\",\"633\":\"73\",\"634\":\"73#loader-执行顺序\",\"635\":\"73#vue-loader\",\"636\":\"73#vueloaderplugin\",\"637\":\"73#pitchloader\",\"638\":\"73#匹配过程\",\"639\":\"73@0\",\"640\":\"73@1\",\"641\":\"74\",\"642\":\"74#install\",\"643\":\"74#vuerouter\",\"644\":\"74#creatematcher\",\"645\":\"74#路由跳转\",\"646\":\"74#html5\",\"647\":\"74#hash\",\"648\":\"74#路由守卫\",\"649\":\"74#transitionto\",\"650\":\"74#match\",\"651\":\"74#confirmtransition\",\"652\":\"74#resolvequeue\",\"653\":\"74#resolveasynccomponents\",\"654\":\"74#extractguards\",\"655\":\"74#runqueue\",\"656\":\"74#router-view-更新机制\",\"657\":\"74@0\",\"658\":\"75\",\"659\":\"75#vue-use-安装\",\"660\":\"75#store-类\",\"661\":\"75#dispatch\",\"662\":\"75#commit\",\"663\":\"75#module-安装\",\"664\":\"75#辅助函数\",\"665\":\"75#min-vux\",\"666\":\"75@0\",\"667\":\"76\",\"668\":\"76#init\",\"669\":\"76#createwatcher\",\"670\":\"76#watch\",\"671\":\"76#步骤\",\"672\":\"76@0\",\"673\":\"77\",\"674\":\"77#performance\",\"675\":\"77#diff-算法的优化\",\"676\":\"77#hoiststatic-静态提升\",\"677\":\"77#更高效的组件初始化\",\"678\":\"77#cachehandlers-事件侦听器缓存\",\"679\":\"77#three-shaking\",\"680\":\"77#更好的ts支持\",\"681\":\"77#composition-api\",\"682\":\"77#fragment\",\"683\":\"77#teleport\",\"684\":\"77@0\",\"685\":\"77@1\",\"686\":\"78\",\"687\":\"78#解析过程\",\"688\":\"78#语法单元\",\"689\":\"78#词法分析\",\"690\":\"78#语法分析\",\"691\":\"78@0\",\"692\":\"79\",\"693\":\"79#plugins\",\"694\":\"79#babel-plugin-transform-runtime\",\"695\":\"79#babel-plugin-transform-block-scoping\",\"696\":\"79#preset\",\"697\":\"79#babel-preset-env\",\"698\":\"79#babel-preset-react\",\"699\":\"79#polyfill\",\"700\":\"79#plugin-transform-runtime\",\"701\":\"79#babel命令行使用\",\"702\":\"79#插件的使用\",\"703\":\"79#在webpack中使用\",\"704\":\"79#使用plugins\",\"705\":\"79#使用preset\",\"706\":\"79#独立babel配置\",\"707\":\"79#babel底层原理\",\"708\":\"79@0\",\"709\":\"80\",\"710\":\"80#浏览器兼容\",\"711\":\"80#浏览器市场占有率\",\"712\":\"80#浏览器查询过程\",\"713\":\"80#编写规则\",\"714\":\"80#命令行使用-browserslist\",\"715\":\"80#配置-browserslist\",\"716\":\"80@0\",\"717\":\"81\",\"718\":\"81#webpack-base-js\",\"719\":\"81#webpack-dev-js\",\"720\":\"81#webpack-prod-js\",\"721\":\"81@0\",\"722\":\"82\",\"723\":\"82#loader本质\",\"724\":\"82#resolveloader\",\"725\":\"82#loader执行顺序\",\"726\":\"82#enforce\",\"727\":\"82#同步loader\",\"728\":\"82#异步loader\",\"729\":\"82#获取传入参数\",\"730\":\"82#校验传入参数\",\"731\":\"82@0\",\"732\":\"82@1\",\"733\":\"83\",\"734\":\"83#plugin\",\"735\":\"83#可以加载插件的常用对象\",\"736\":\"83#创建插件\",\"737\":\"83#compiler-和-compilation\",\"738\":\"83#基本插件架构\",\"739\":\"83#同步\",\"740\":\"83#异步\",\"741\":\"83@0\",\"742\":\"83@1\",\"743\":\"84\",\"744\":\"84#loader-本质\",\"745\":\"84#loader-的使用\",\"746\":\"84#loader-的分类\",\"747\":\"84#inline-方式的-loader\",\"748\":\"84#loader-的优先级\",\"749\":\"84#pitch-函数\",\"750\":\"85\",\"751\":\"85#打包时间分析\",\"752\":\"85#打包后文件分析\",\"753\":\"85@0\",\"754\":\"86\",\"755\":\"86#postcss-loader\",\"756\":\"87\",\"757\":\"87#source-map\",\"758\":\"87#使用source-map\",\"759\":\"87#source-map源码\",\"760\":\"87#生成source-map\",\"761\":\"87#eval\",\"762\":\"87#source-map-1\",\"763\":\"87#eval-source-map\",\"764\":\"87#inline-source-map\",\"765\":\"87#cheap-source-map\",\"766\":\"87#cheap-module-source-map\",\"767\":\"87#hidden-source-map\",\"768\":\"87#nosources-source-map\",\"769\":\"87#多个值的组合\",\"770\":\"87@0\",\"771\":\"88\",\"772\":\"88#直接启动webpack\",\"773\":\"88#webpack源码\",\"774\":\"88@0\",\"775\":\"89\",\"776\":\"89#webpack-的插件机制\",\"777\":\"89#hook-分类\",\"778\":\"89#synchook\",\"779\":\"89#syncbailhook\",\"780\":\"89#syncloophook\",\"781\":\"89#syncwaterfallhook\",\"782\":\"89#asyncserieshook\",\"783\":\"89#asyncparallelhook\",\"784\":\"89#toppromise\",\"785\":\"89@0\",\"786\":\"89@1\",\"787\":\"90\",\"788\":\"90#特点\",\"789\":\"90#使用\",\"790\":\"90@0\",\"791\":\"91\",\"792\":\"91#双向通信\",\"793\":\"91#轮询\",\"794\":\"91#长轮询\",\"795\":\"91#iframe\",\"796\":\"91#websocket\",\"797\":\"91#使用\",\"798\":\"91#websocket-连接过程\",\"799\":\"91#客户端发起-申请协议升级\",\"800\":\"91#服务器响应协议升级\",\"801\":\"91#sec-websocket-accept-的计算\",\"802\":\"91#websocket-数据帧\",\"803\":\"91#数据帧格式\",\"804\":\"91#掩码算法\",\"805\":\"91@0\",\"806\":\"92\",\"807\":\"93\",\"808\":\"94\",\"809\":\"95\",\"810\":\"96\",\"811\":\"97\",\"812\":\"98\",\"813\":\"99\",\"814\":\"100\",\"815\":\"101\",\"816\":\"102\",\"817\":\"103\",\"818\":\"104\",\"819\":\"105\",\"820\":\"106\",\"821\":\"107\",\"822\":\"108\"},\"fieldIds\":{\"h\":0,\"t\":1,\"c\":2},\"fieldLength\":{\"0\":[1],\"1\":[1,103],\"2\":[null,null,1],\"3\":[null,null,1],\"4\":[1],\"5\":[null,null,1],\"6\":[null,null,1],\"7\":[1,37],\"8\":[1,78],\"9\":[1,33],\"10\":[null,null,1],\"11\":[null,null,1],\"12\":[1],\"13\":[1,64],\"14\":[null,null,1],\"15\":[null,null,1],\"16\":[1],\"17\":[1,29],\"18\":[2,110],\"19\":[null,null,1],\"20\":[null,null,1],\"21\":[1],\"22\":[1,28],\"23\":[1,60],\"24\":[null,null,1],\"25\":[null,null,1],\"26\":[1,9],\"27\":[null,null,1],\"28\":[null,null,1],\"29\":[1],\"30\":[null,null,1],\"31\":[null,null,1],\"32\":[1,6],\"33\":[1,26],\"34\":[1,3],\"35\":[null,null,1],\"36\":[null,null,1],\"37\":[1],\"38\":[null,null,1],\"39\":[null,null,1],\"40\":[1,6],\"41\":[null,null,1],\"42\":[null,null,1],\"43\":[2,74],\"44\":[null,null,1],\"45\":[1],\"46\":[1,7],\"47\":[null,null,1],\"48\":[null,null,1],\"49\":[1,33],\"50\":[null,null,1],\"51\":[null,null,1],\"52\":[1],\"53\":[1,36],\"54\":[1,32],\"55\":[1,31],\"56\":[1,48],\"57\":[1,45],\"58\":[1,38],\"59\":[1,46],\"60\":[1,50],\"61\":[1,48],\"62\":[1,45],\"63\":[null,null,1],\"64\":[2,16],\"65\":[3,65],\"66\":[1,82],\"67\":[1,13],\"68\":[1,17],\"69\":[1],\"70\":[1,75],\"71\":[1,29],\"72\":[1,16],\"73\":[1,14],\"74\":[1,14],\"75\":[1,20],\"76\":[1,28],\"77\":[1,126],\"78\":[1,53],\"79\":[1,53],\"80\":[1,41],\"81\":[1,33],\"82\":[1,31],\"83\":[1,14],\"84\":[1,32],\"85\":[1],\"86\":[1],\"87\":[1,9],\"88\":[null,null,2],\"89\":[1,76],\"90\":[null,null,2],\"91\":[1],\"92\":[1],\"93\":[1],\"94\":[1,8],\"95\":[2,21],\"96\":[2,15],\"97\":[1,30],\"98\":[4,24],\"99\":[3,14],\"100\":[3,8],\"101\":[1,3],\"102\":[1,181],\"103\":[1,196],\"104\":[1,218],\"105\":[1,13],\"106\":[1,5],\"107\":[1,5],\"108\":[1,11],\"109\":[null,null,1],\"110\":[1],\"111\":[1],\"112\":[null,null,1],\"113\":[1,2],\"114\":[1,18],\"115\":[3,11],\"116\":[1],\"117\":[1,50],\"118\":[1,25],\"119\":[3,15],\"120\":[1,22],\"121\":[1,16],\"122\":[1,43],\"123\":[1,11],\"124\":[1,3],\"125\":[1,3],\"126\":[1,24],\"127\":[1,22],\"128\":[1,13],\"129\":[1,16],\"130\":[1],\"131\":[1],\"132\":[1],\"133\":[1,23],\"134\":[1,43],\"135\":[1],\"136\":[1],\"137\":[1],\"138\":[1,6],\"139\":[1,90],\"140\":[1,73],\"141\":[1,111],\"142\":[null,null,1],\"143\":[1],\"144\":[2,5],\"145\":[2,26],\"146\":[1,11],\"147\":[1,12],\"148\":[null,null,1],\"149\":[1,8],\"150\":[1],\"151\":[1,5],\"152\":[1,27],\"153\":[4,16],\"154\":[4,31],\"155\":[null,null,1],\"156\":[1],\"157\":[1,7],\"158\":[2,39],\"159\":[1,7],\"160\":[1,7],\"161\":[1,8],\"162\":[1,4],\"163\":[1,14],\"164\":[1,13],\"165\":[1,8],\"166\":[1,5],\"167\":[null,null,1],\"168\":[1],\"169\":[1,7],\"170\":[3,5],\"171\":[3,3],\"172\":[null,null,1],\"173\":[1,9],\"174\":[1,91],\"175\":[1,66],\"176\":[1,23],\"177\":[1,31],\"178\":[null,null,1],\"179\":[1],\"180\":[1,6],\"181\":[1,4],\"182\":[null,null,1],\"183\":[1,27],\"184\":[3,27],\"185\":[1,39],\"186\":[1,31],\"187\":[3,37],\"188\":[null,null,1],\"189\":[1,8],\"190\":[1,179],\"191\":[1,25],\"192\":[1,22],\"193\":[1,91],\"194\":[1],\"195\":[1,262],\"196\":[1,104],\"197\":[1,114],\"198\":[1,106],\"199\":[1,275],\"200\":[1,56],\"201\":[null,null,1],\"202\":[3,47],\"203\":[null,null,1],\"204\":[3,48],\"205\":[null,null,1],\"206\":[3,138],\"207\":[null,null,1],\"208\":[2,6],\"209\":[4,63],\"210\":[1,39],\"211\":[2,32],\"212\":[1,6],\"213\":[null,null,1],\"214\":[1],\"215\":[1,64],\"216\":[1,74],\"217\":[1,65],\"218\":[1,192],\"219\":[null,null,1],\"220\":[1,27],\"221\":[1,40],\"222\":[null,null,1],\"223\":[1,8],\"224\":[1,55],\"225\":[1,99],\"226\":[1,97],\"227\":[1,60],\"228\":[null,null,1],\"229\":[1],\"230\":[1,74],\"231\":[1,69],\"232\":[1,58],\"233\":[1,86],\"234\":[1,58],\"235\":[1,36],\"236\":[1,72],\"237\":[1,51],\"238\":[1,75],\"239\":[1,195],\"240\":[1,130],\"241\":[1,58],\"242\":[null,null,1],\"243\":[1,146],\"244\":[null,null,1],\"245\":[1],\"246\":[1,26],\"247\":[1,41],\"248\":[1],\"249\":[1,35],\"250\":[1,19],\"251\":[3,46],\"252\":[1,18],\"253\":[2,45],\"254\":[1,24],\"255\":[4,36],\"256\":[1,154],\"257\":[1,86],\"258\":[1,60],\"259\":[null,null,1],\"260\":[1,46],\"261\":[2,23],\"262\":[1],\"263\":[1,109],\"264\":[1,39],\"265\":[1,76],\"266\":[1,45],\"267\":[1],\"268\":[1,53],\"269\":[3,49],\"270\":[1,23],\"271\":[3,59],\"272\":[1,20],\"273\":[1,25],\"274\":[1,43],\"275\":[null,null,1],\"276\":[1,6],\"277\":[1,12],\"278\":[1,26],\"279\":[1],\"280\":[1,80],\"281\":[1,121],\"282\":[1,136],\"283\":[2,100],\"284\":[null,null,1],\"285\":[1,9],\"286\":[1],\"287\":[1,49],\"288\":[1,27],\"289\":[2,41],\"290\":[1,27],\"291\":[1,26],\"292\":[2],\"293\":[3,13],\"294\":[1,45],\"295\":[1,17],\"296\":[1,20],\"297\":[1,24],\"298\":[1],\"299\":[2,39],\"300\":[1,42],\"301\":[1,11],\"302\":[4,43],\"303\":[4,50],\"304\":[4,39],\"305\":[4,43],\"306\":[4,43],\"307\":[4,33],\"308\":[4,33],\"309\":[4,35],\"310\":[4,44],\"311\":[4,34],\"312\":[4,36],\"313\":[4,35],\"314\":[4,23],\"315\":[1],\"316\":[1,37],\"317\":[1,35],\"318\":[1,28],\"319\":[1,60],\"320\":[1,65],\"321\":[null,null,1],\"322\":[1],\"323\":[1,11],\"324\":[1,28],\"325\":[1,16],\"326\":[1,24],\"327\":[1,52],\"328\":[1,14],\"329\":[null,null,1],\"330\":[1,16],\"331\":[1],\"332\":[1,1],\"333\":[1,4],\"334\":[1,37],\"335\":[1,29],\"336\":[1,7],\"337\":[1,7],\"338\":[1],\"339\":[1,17],\"340\":[1,3],\"341\":[1,31],\"342\":[1,14],\"343\":[1,53],\"344\":[1],\"345\":[1,23],\"346\":[1,1],\"347\":[1,15],\"348\":[1],\"349\":[1,22],\"350\":[1,8],\"351\":[null,null,1],\"352\":[null,null,1],\"353\":[2],\"354\":[1],\"355\":[1,5],\"356\":[1,8],\"357\":[1,4],\"358\":[1,6],\"359\":[1,14],\"360\":[1,5],\"361\":[1],\"362\":[2],\"363\":[1,1],\"364\":[1,1],\"365\":[2,1],\"366\":[1,5],\"367\":[1,15],\"368\":[1,10],\"369\":[1],\"370\":[1,1],\"371\":[1,10],\"372\":[1,7],\"373\":[1],\"374\":[1,15],\"375\":[1,23],\"376\":[1,1],\"377\":[1],\"378\":[1,3],\"379\":[1,2],\"380\":[1,16],\"381\":[1,15],\"382\":[1,8],\"383\":[null,null,1],\"384\":[null,null,1],\"385\":[1,3],\"386\":[1,11],\"387\":[1,12],\"388\":[1,24],\"389\":[3,20],\"390\":[1,25],\"391\":[1],\"392\":[1,15],\"393\":[2,12],\"394\":[1,7],\"395\":[1,3],\"396\":[2,5],\"397\":[1,7],\"398\":[1,12],\"399\":[1,12],\"400\":[1,19],\"401\":[1,13],\"402\":[1,5],\"403\":[1,19],\"404\":[1],\"405\":[1,16],\"406\":[1,18],\"407\":[1,6],\"408\":[3,5],\"409\":[1,12],\"410\":[1,8],\"411\":[1,3],\"412\":[1,11],\"413\":[null,null,1],\"414\":[null,null,1],\"415\":[1],\"416\":[2,8],\"417\":[2,8],\"418\":[1,20],\"419\":[3,22],\"420\":[4,19],\"421\":[2,12],\"422\":[1],\"423\":[3,7],\"424\":[1,4],\"425\":[1],\"426\":[3,5],\"427\":[1,12],\"428\":[1,3],\"429\":[null,null,1],\"430\":[null,null,1],\"431\":[1],\"432\":[1,2],\"433\":[1],\"434\":[2,37],\"435\":[2,4],\"436\":[2],\"437\":[2],\"438\":[3],\"439\":[3],\"440\":[1],\"441\":[1],\"442\":[1,10],\"443\":[3],\"444\":[2],\"445\":[3,28],\"446\":[3],\"447\":[3],\"448\":[7],\"449\":[1],\"450\":[2],\"451\":[3,1],\"452\":[4,35],\"453\":[1],\"454\":[1,13],\"455\":[1,89],\"456\":[1],\"457\":[1,45],\"458\":[1,9],\"459\":[1,3],\"460\":[3,2],\"461\":[2,10],\"462\":[1],\"463\":[1,29],\"464\":[1,91],\"465\":[1],\"466\":[1,13],\"467\":[null,null,1],\"468\":[1],\"469\":[1,18],\"470\":[1,12],\"471\":[1,10],\"472\":[1,15],\"473\":[1,11],\"474\":[1,10],\"475\":[1,9],\"476\":[1,18],\"477\":[3,14],\"478\":[1],\"479\":[1,5],\"480\":[null,null,1],\"481\":[1],\"482\":[1,11],\"483\":[1,33],\"484\":[1],\"485\":[1],\"486\":[1],\"487\":[1],\"488\":[1],\"489\":[2],\"490\":[2],\"491\":[1],\"492\":[1],\"493\":[1],\"494\":[1],\"495\":[1],\"496\":[1],\"497\":[3],\"498\":[1],\"499\":[1],\"500\":[1],\"501\":[1],\"502\":[1],\"503\":[1],\"504\":[1],\"505\":[1],\"506\":[5],\"507\":[1],\"508\":[2],\"509\":[2],\"510\":[2],\"511\":[1],\"512\":[1],\"513\":[1],\"514\":[1],\"515\":[1],\"516\":[1],\"517\":[1,267],\"518\":[null,null,2],\"519\":[3,22],\"520\":[1,13],\"521\":[1,154],\"522\":[1],\"523\":[1,24],\"524\":[1,25],\"525\":[null,null,1],\"526\":[3],\"527\":[1],\"528\":[2,63],\"529\":[2,21],\"530\":[2],\"531\":[1],\"532\":[1,60],\"533\":[1,7],\"534\":[1,147],\"535\":[1,72],\"536\":[null,null,1],\"537\":[4],\"538\":[1,19],\"539\":[2,7],\"540\":[1,80],\"541\":[1,18],\"542\":[1,108],\"543\":[1,134],\"544\":[2,137],\"545\":[3,11],\"546\":[1,51],\"547\":[1,113],\"548\":[1,45],\"549\":[1,47],\"550\":[1,31],\"551\":[1,90],\"552\":[1,30],\"553\":[1,33],\"554\":[1,129],\"555\":[1,103],\"556\":[1,66],\"557\":[1,96],\"558\":[1,168],\"559\":[2,100],\"560\":[1,57],\"561\":[1,132],\"562\":[1,49],\"563\":[1,137],\"564\":[1,51],\"565\":[1,182],\"566\":[1,97],\"567\":[1,68],\"568\":[1,98],\"569\":[null,null,1],\"570\":[4,16],\"571\":[1,43],\"572\":[1,33],\"573\":[2,147],\"574\":[1,13],\"575\":[1,114],\"576\":[null,null,1],\"577\":[3],\"578\":[1,16],\"579\":[null,null,1],\"580\":[3,30],\"581\":[1,24],\"582\":[1,100],\"583\":[1,101],\"584\":[1,180],\"585\":[1,124],\"586\":[2,64],\"587\":[1,52],\"588\":[1,211],\"589\":[1,67],\"590\":[1,122],\"591\":[2,93],\"592\":[1,40],\"593\":[1,15],\"594\":[1,25],\"595\":[1,38],\"596\":[1,125],\"597\":[1,127],\"598\":[null,null,1],\"599\":[3],\"600\":[1,12],\"601\":[1,68],\"602\":[1,28],\"603\":[1,186],\"604\":[1,54],\"605\":[2,2],\"606\":[1,137],\"607\":[1,80],\"608\":[1,70],\"609\":[1,78],\"610\":[1,89],\"611\":[1,75],\"612\":[1,34],\"613\":[1,114],\"614\":[1,68],\"615\":[1,128],\"616\":[null,null,1],\"617\":[3,8],\"618\":[1],\"619\":[2,36],\"620\":[1,11],\"621\":[1,11],\"622\":[1,29],\"623\":[1,10],\"624\":[1,33],\"625\":[2,74],\"626\":[2,77],\"627\":[1,26],\"628\":[2],\"629\":[2,89],\"630\":[2,33],\"631\":[1,70],\"632\":[null,null,1],\"633\":[5],\"634\":[2,8],\"635\":[2,255],\"636\":[1,71],\"637\":[1,79],\"638\":[1,68],\"639\":[null,null,2],\"640\":[null,null,2],\"641\":[4,31],\"642\":[1,200],\"643\":[1,50],\"644\":[1,124],\"645\":[1,16],\"646\":[1,123],\"647\":[1,48],\"648\":[1,59],\"649\":[1,94],\"650\":[1,82],\"651\":[1,162],\"652\":[1,39],\"653\":[1,139],\"654\":[1,89],\"655\":[1,104],\"656\":[3,186],\"657\":[null,null,1],\"658\":[4,24],\"659\":[3,54],\"660\":[2,103],\"661\":[1,49],\"662\":[1,56],\"663\":[2,237],\"664\":[1,62],\"665\":[2,66],\"666\":[null,null,1],\"667\":[3,49],\"668\":[1,29],\"669\":[1,21],\"670\":[1,160],\"671\":[1,39],\"672\":[null,null,1],\"673\":[3],\"674\":[1],\"675\":[2,18],\"676\":[2,7],\"677\":[1,7],\"678\":[2,17],\"679\":[2,14],\"680\":[1],\"681\":[2],\"682\":[1,3],\"683\":[1,7],\"684\":[null,null,1],\"685\":[null,null,1],\"686\":[1],\"687\":[1,6],\"688\":[1,20],\"689\":[1,51],\"690\":[1,72],\"691\":[null,null,1],\"692\":[1,5],\"693\":[1,10],\"694\":[5,1],\"695\":[1,2],\"696\":[1,7],\"697\":[4,14],\"698\":[4,2],\"699\":[1,64],\"700\":[1,20],\"701\":[1,10],\"702\":[1,18],\"703\":[1,13],\"704\":[1,21],\"705\":[1,27],\"706\":[1,22],\"707\":[1,10],\"708\":[null,null,2],\"709\":[1,22],\"710\":[1,18],\"711\":[1,1],\"712\":[1,21],\"713\":[1,139],\"714\":[1,9],\"715\":[1,13],\"716\":[null,null,1],\"717\":[1],\"718\":[1,125],\"719\":[1,29],\"720\":[1,111],\"721\":[null,null,1],\"722\":[1,9],\"723\":[1,36],\"724\":[1,28],\"725\":[1,23],\"726\":[1,32],\"727\":[1,23],\"728\":[1,17],\"729\":[1,38],\"730\":[1,50],\"731\":[null,null,1],\"732\":[null,null,1],\"733\":[1],\"734\":[1,7],\"735\":[1,33],\"736\":[1,17],\"737\":[3,33],\"738\":[1,50],\"739\":[1,20],\"740\":[1,21],\"741\":[null,null,1],\"742\":[null,null,1],\"743\":[1],\"744\":[2,13],\"745\":[2,27],\"746\":[2,22],\"747\":[3,22],\"748\":[2,29],\"749\":[2,32],\"750\":[1],\"751\":[1,21],\"752\":[1,18],\"753\":[null,null,1],\"754\":[1,24],\"755\":[1,44],\"756\":[2],\"757\":[2,16],\"758\":[2,23],\"759\":[2,31],\"760\":[2,19],\"761\":[1,13],\"762\":[1,17],\"763\":[3,7],\"764\":[3,11],\"765\":[3,15],\"766\":[4,22],\"767\":[3,5],\"768\":[3,5],\"769\":[1,12],\"770\":[null,null,1],\"771\":[1,43],\"772\":[1,17],\"773\":[1,1],\"774\":[null,null,1],\"775\":[1],\"776\":[2,41],\"777\":[2,32],\"778\":[1,28],\"779\":[1,33],\"780\":[1,44],\"781\":[1,36],\"782\":[1,31],\"783\":[1,32],\"784\":[1,35],\"785\":[null,null,1],\"786\":[null,null,1],\"787\":[2,11],\"788\":[1,21],\"789\":[1,44],\"790\":[null,null,1],\"791\":[1],\"792\":[1,16],\"793\":[1,62],\"794\":[1,52],\"795\":[1,50],\"796\":[1,29],\"797\":[1,51],\"798\":[2,29],\"799\":[2,35],\"800\":[1,18],\"801\":[4,59],\"802\":[2,13],\"803\":[1,175],\"804\":[1,37],\"805\":[null,null,1],\"806\":[1,3],\"807\":[1],\"808\":[2],\"809\":[1],\"810\":[1],\"811\":[1],\"812\":[1],\"813\":[1],\"814\":[1],\"815\":[1],\"816\":[1],\"817\":[1],\"818\":[1],\"819\":[1],\"820\":[1],\"821\":[1],\"822\":[1]},\"averageFieldLength\":[1.3636023959229047,43.01867485003949,0.9087867791787099],\"storedFields\":{\"0\":{\"h\":\"狄克斯特拉算法\"},\"1\":{\"h\":\"狄克斯特拉算法\",\"t\":[\"Dijkstra 算法是一种贪心算法\",\"(1) 找出最便宜的节点，即可在最短时间内前往的节点。\",\"(2) 对于该节点的邻居，检查是否有前往它们的更短路径，如果有，就更新其开销。\",\"(3) 重复这个过程，直到对图中的每个节点都这样做了。\",\"(4) 计算最终路径。\",\"//A B C D E F let graph = [ [0, 2, 4, 0, 0, 0], //A A=>B=2 A=>C=4 [0, 0, 1, 4, 2, 0], //B B=>C=1 B=>D=4 B=>E=2 [0, 0, 0, 0, 3, 0], //C [0, 0, 0, 0, 0, 2], //D [0, 0, 0, 3, 0, 2], //E [0, 0, 0, 0, 0, 0], //F ];\",\"// graph 邻接矩阵 // src 起点 const dijkstra = (graph: number[][], src: number) => { let dist = []; // 储存当前A顶点到其它各个顶点间的距离 let visited = []; //储存ABCDEF顶点是否被访问过，以免重复访问，形成环 let length = graph.length; //储存所有顶点的数量 let INF = Number.MAX_SAFE_INTEGER; //Number javascript的最大整数 9007199254740991 //初始化 for (let i = 0; i < length; i++) { dist[i] = INF; visited[i] = false; } //第一个节点 dist[src] = 0; let i = 0; while (i < length - 1) { //此时对应节点 已经访问设置 true visited[src] = true; //找到对应节点 的 对应的边集合 let currentEdges = graph[src]; //遍历边,更新路径 for (let i = 0; i < currentEdges.length; i++) { if (currentEdges[i] !== 0) { //存在边 , 找到最短路径 例如 //A=>B=>C 最短路径的权 //为 A=>B 的权(dist[src]) + B=>C的权(currentEdegs[i]) 和 A=>C(dist[i]) 的权 进行比较 if (dist[src] + currentEdges[i] < dist[i]) { //符合上面条件 更新dist[i] 保证dist[i]是每次探路的最短路径 dist[i] = currentEdges[i] + dist[src]; } } } //迪杰斯特拉的核心算法 , 找到最短路径 重新探路. //选择最短路径 let min = INF; let minIndex = -2; for (let i = 0; i < dist.length; i++) { if (!visited[i] && dist[i] < min) { min = dist[i]; minIndex = i; } } //进入下一次循环 src = minIndex; i++; } return dist; };\",\"参考：https://zhuanlan.zhihu.com/p/114203860\"]},\"2\":{\"c\":[\"算法\"]},\"3\":{\"c\":[\"算法图解\"]},\"4\":{\"h\":\"算法图解\"},\"5\":{\"c\":[\"算法\"]},\"6\":{\"c\":[\"算法图解\"]},\"7\":{\"h\":\"二分查找\",\"t\":[\"仅当列表是有序的时候，二分查找才管用\",\"找到列表的中间值，如果中间值大于查找值，则往数组的左边继续查找，如果小于查找值这往右边继续查找。\",\"const binary_search = (list, aim) => { let low = 0; let hight = list.length - 1; let mid = 0; let guess; while (low <= hight) { mid = parseInt((low + hight) / 2); guess = list[mid]; if (guess == aim) { return mid; } else if (guess > aim) { high = mid - 1; } else { low = mid + 1; } } return null; }; // 运行时间 log2(n)\"]},\"8\":{\"h\":\"在排序数组中查找元素的第一个和最后一个位置\",\"t\":[\"https://leetcode.cn/problems/find-first-and-last-position-of-element-in-sorted-array/ 给你一个按照非递减顺序排列的整数数组 nums，和一个目标值 target。请你找出给定目标值在数组中的开始位置和结束位置。\",\"如果数组中不存在目标值 target，返回 [-1, -1]。\",\"你必须设计并实现时间复杂度为 O(log n) 的算法解决此问题。\",\"输入：nums = [5,7,7,8,8,10], target = 8 输出：[3,4] 输入：nums = [5,7,7,8,8,10], target = 6 输出：[-1,-1]\",\"function searchRange(nums: number[], target: number): number[] { let result:number[] = [-1,-1] const leftIdx = search(nums,target,true) const rightIdx = search(nums,target,false) -1 if(leftIdx <= rightIdx && rightIdx< nums.length && nums[leftIdx ]=== target && nums[rightIdx] === target) { result = [leftIdx,rightIdx] } return result } // lower = true 获取左边界 // lower = false 获取右边界 function search(nums: number[], target: number, lower: boolean): number { let left = 0, right = nums.length - 1; while (left <= right) { const mid = Math.floor((left + right) / 2); // > right 最终会得到比target大的第一位数 右边界 // >= right 最终会得到target所在位置，right -1后，即target已经离开匹配范围，左边界 if (nums[mid] > target || (lower && nums[mid] >= target)) { right = mid - 1; } else { left = mid + 1; } } return right + 1; }\"]},\"9\":{\"h\":\"寻找两个正序数组的中位数\",\"t\":[\"https://leetcode.cn/problems/median-of-two-sorted-arrays/\",\"给定两个大小分别为 m 和 n 的正序（从小到大）数组 nums1 和 nums2。请你找出并返回这两个正序数组的 中位数 算法的时间复杂度应该为 O(log (m+n)) 。\",\"输入：nums1 = [1,3], nums2 = [2] 输出：2.00000 解释：合并数组 = [1,2,3] ，中位数 2\"]},\"10\":{\"c\":[\"算法\"]},\"11\":{\"c\":[\"算法图解\"]},\"12\":{\"h\":\"双指针\"},\"13\":{\"h\":\"盛最多水的容器\",\"t\":[\"来源： https://leetcode.cn/problems/container-with-most-water/description/\",\"输入：[1,8,6,2,5,4,8,3,7] 输出：49 解释：图中垂直线代表输入数组 [1,8,6,2,5,4,8,3,7]。在此情况下，容器能够容纳水（表示为蓝色部分）的最大值为 49。\",\"//来源：https://leetcode.cn/problems/container-with-most-water/solutions/207215/sheng-zui-duo-shui-de-rong-qi-by-leetcode-solution/ // 总是移动数字较小的那个指针 // [1, 8, 6, 2, 5, 4, 8, 3, 7] // ^ ^ function maxArea(height) { // 定义两个指针 let l = 0, r = height.length - 1; // 最大值 let ans = 0; while (l < r) { let area = Math.min(height[l], height[r]) * (r - l); ans = Math.max(ans,area); if(height[l] <= height[r]) { ++l }else { --r } } return ans }\"]},\"14\":{\"c\":[\"算法\"]},\"15\":{\"c\":[\"算法图解\"]},\"16\":{\"h\":\"动态规划\"},\"17\":{\"h\":\"拿走最有价值的物品\",\"t\":[\"背包可装 3kg,商品有 3 件\",\"音响\",\"笔记本电脑\",\"吉他\",\"3000 元\",\"2000 元\",\"1500 元\",\"4 kg\",\"3 kg\",\"1 kg\",\"将问题分成一个个网格\",\"商品/重量\",\"1kg\",\"2kg\",\"3kg\",\"4kg\",\"吉他\",\"音响\",\"笔记本电脑\",\"商品/重量\",\"1kg\",\"2kg\",\"3kg\",\"4kg\",\"吉他\",\"¥1500\",\"¥1500\",\"¥1500\",\"¥1500\",\"音响\",\"笔记本电脑\",\"商品/重量\",\"1kg\",\"2kg\",\"3kg\",\"4kg\",\"吉他\",\"¥1500\",\"¥1500\",\"¥1500\",\"¥1500\",\"音响\",\"¥1500\",\"¥1500\",\"¥1500\",\"¥3000\",\"笔记本电脑\",\"商品/重量\",\"1kg\",\"2kg\",\"3kg\",\"4kg\",\"吉他\",\"¥1500\",\"¥1500\",\"¥1500\",\"¥1500\",\"音响\",\"¥1500\",\"¥1500\",\"¥1500\",\"¥3000\",\"笔记本电脑\",\"¥1500\",\"¥1500\",\"¥2000\",\"¥3500\",\"发现第四件商品 iPhone\",\"音响\",\"笔记本电脑\",\"吉他\",\"iphone\",\"3000 元\",\"2000 元\",\"1500 元\",\"2000 元\",\"4 kg\",\"3 kg\",\"1 kg\",\"1kg\",\"商品/重量\",\"1kg\",\"2kg\",\"3kg\",\"4kg\",\"吉他\",\"¥1500\",\"¥1500\",\"¥1500\",\"¥1500\",\"音响\",\"¥1500\",\"¥1500\",\"¥1500\",\"¥3000\",\"笔记本电脑\",\"¥1500\",\"¥1500\",\"¥2000\",\"¥3500\",\"iphone\",\"¥2000\",\"¥3500\",\"¥3500\",\"¥4000\"]},\"18\":{\"h\":\"K 站中转内最便宜的航班\",\"t\":[\"来源：https://leetcode.cn/problems/cheapest-flights-within-k-stops/\",\"有 n 个城市通过一些航班连接。给你一个数组 flights ，其中 flights[i] = [fromi, toi, pricei] ，表示该航班都从城市 fromi 开始，以价格 pricei 抵达 toi。\",\"现在给定所有的城市和航班，以及出发城市 src 和目的地 dst，你的任务是找到出一条最多经过 k 站中转的路线，使得从 src 到 dst 的 价格最便宜 ，并返回该价格。 如果不存在这样的路线，则输出 -1。\",\"输入: n 三个城市 0->1 100 元,1 -> 2 100 元 ， 0 -> 2 500 元 n = 3, edges = [[0,1,100],[1,2,100],[0,2,500]] src 出发城市 dst 目的地 k 经过一站 src = 0, dst = 2, k = 1 输出: 200\",\"//来源 https://leetcode.cn/problems/cheapest-flights-within-k-stops/solutions/954402/k-zhan-zhong-zhuan-nei-zui-bian-yi-de-ha-abzi/ var findCheapestPrice = function (n, flights, src, dst, k) { const INF = 10000 * 101 + 1; /* 1 2 3 航班 1 花费 2 3 城市 */ // 最多达成k+1次航班 =》 生成 k+2的数组 // n 个城市 // f => 一个二维数组 城市和航班次数 const f = new Array(k + 2).fill(0).map(() => new Array(n).fill(INF)); //0城市 话费为0 f[0][src] = 0; for (let t = 1; t <= k + 1; ++t) { for (const flight of flights) { const j = flight[0], i = flight[1], cost = flight[2]; // t 航班 i 城市 = 话费 f[t][i] = Math.min(f[t][i], f[t - 1][j] + cost); } } let ans = INF; // 遍历航班次数 筛选最小话费 for (let t = 1; t <= k + 1; ++t) { ans = Math.min(ans, f[t][dst]); } return ans == INF ? -1 : ans; };\"]},\"19\":{\"c\":[\"算法\"]},\"20\":{\"c\":[\"算法图解\"]},\"21\":{\"h\":\"贪婪算法\"},\"22\":{\"h\":\"教室调度问题\",\"t\":[\"课程\",\"开始时间\",\"结束时间\",\"美术\",\"9AM\",\"10AM\",\"英语\",\"9:30AM\",\"10:30AM\",\"数学\",\"10AM\",\"11AM\",\"计算机\",\"10:30AM\",\"11:30AM\",\"音乐\",\"11AM\",\"12PM\",\"(1) 选出结束最早的课，它就是要在这间教室上的第一堂课。\",\"(2) 接下来，必须选择第一堂课结束后才开始的课。同样，你选择结束最早的课，这将是要 在这间教室上的第二堂课。\",\"课程\",\"开始时间\",\"结束时间\",\"美术\",\"9AM\",\"10AM\",\"✅\",\"英语\",\"9:30AM\",\"10:30AM\",\"❌\",\"数学\",\"10AM\",\"11AM\",\"✅\",\"计算机\",\"10:30AM\",\"11:30AM\",\"❌\",\"音乐\",\"11AM\",\"12PM\",\"✅\"]},\"23\":{\"h\":\"跳跃游戏\",\"t\":[\"来源：https://leetcode.cn/problems/jump-game-ii/description/\",\"给你一个非负整数数组 nums ，你最初位于数组的第一个位置。 数组中的每个元素代表你在该位置可以跳跃的最大长度。 你的目标是使用最少的跳跃次数到达数组的最后一个位置。 假设你总是可以到达数组的最后一个位置。 输入: nums = [2,3,1,1,4] 输出: 2 解释: 跳到最后一个位置的最小跳跃数是 2。 从下标为 0 跳到下标为 1 的位置，跳 1 步，然后跳 3 步到达数组的最后一个位置。\",\"来源：https://leetcode.cn/problems/jump-game-ii/solutions/230241/tiao-yue-you-xi-ii-by-leetcode-solution/\",\"function jump(nums) { let length = nums.length; let end = 0; let maxPosition = 0; let steps = 0; for (let i = 0; i < length - 1; i++) { //每次在上次能跳到的范围（end）内选择一个能跳的最远的位置 maxPosition = Math.max(maxPosition, i + nums[i]); if (i === end) { end = maxPosition; steps++; } } return steps; }\"]},\"24\":{\"c\":[\"算法\"]},\"25\":{\"c\":[\"算法图解\"]},\"26\":{\"h\":\"散列表\",\"t\":[\"打造一个让你能够迅速获悉商品价格的工具\",\"const table = []; table[\\\"apple\\\"] = \\\"5块\\\"; table[\\\"milk\\\"] = \\\"4块\\\";\"]},\"27\":{\"c\":[\"算法\"]},\"28\":{\"c\":[\"算法图解\"]},\"29\":{\"h\":\"K最近邻算法\"},\"30\":{\"c\":[\"算法\"]},\"31\":{\"c\":[\"算法图解\"]},\"32\":{\"h\":\"大O表示法\",\"t\":[\"大 O 表示法是一种特殊的表示法，指出了算法的速度有多快。 将算法的所有步骤转换为代数项，然后排除不会对问题的整体复杂度产生较大影响的较低阶常数和系数\"]},\"33\":{\"h\":\"时间复杂度\",\"t\":[\"用于评估执行程序所消耗的时间，可以估算出程序对处理器的使用程度。 时间复杂度的公式是：T(n) = O( f(n) )，其中f(n) 表示每行代码执行次数之和，而 O 表示正比例关系，这个公式的全称是：算法的渐进时间复杂度。\",\"常见算法\",\"时间复杂度\",\"简单查找\",\"O(n)\",\"二分查找\",\"O($log_{}{n}$)\",\"快速排序\",\"O($nlog_{}{n}$)\",\"选择排序\",\"O($n^{2}$)\"]},\"34\":{\"h\":\"空间复杂度\",\"t\":[\"用于评估执行程序所占用的内存空间，可以估算出程序对计算机内存的使用程度。\"]},\"35\":{\"c\":[\"算法\"]},\"36\":{\"c\":[\"算法图解\"]},\"37\":{\"h\":\"线性规划\"},\"38\":{\"c\":[\"算法\"]},\"39\":{\"c\":[\"算法图解\"]},\"40\":{\"h\":\"优先遍历搜索\",\"t\":[\"graph TB D((连接)) E((连接)) D --> E\"]},\"41\":{\"c\":[\"算法\"]},\"42\":{\"c\":[\"算法图解\"]},\"43\":{\"h\":\"算法图解笔记-快速排序\",\"t\":[\"(1) 找出基线条件，这种条件必须尽可能简单。 (2) 不断将问题分解（或者说缩小规模），直到符合基线条件 将一块 1680 x 640 的图片分成方块，方块要尽可能的大 \",\"1680 x 640=> 640x640 + 640x640 + 640x400\",\"640x 400 => 400x 400 + 400x240\",\"400x240 => 240x240 + 240x160\",\"240x160 => 160x 160 + 160 x80\",\"160x80 => 80x80 +80x80 适用的方块为 80x80\",\"// 计算数组的值 const sum = (arrays, total = 0) => { if (arrays.length === 1) return arrays[0] + total; total += arrays.pop(); sum(arrays, total); };\",\"(1) 选择基准值。 (2) 将数组分成两个子数组：小于基准值的元素和大于基准值的元素。 (3) 对这两个子数组进行快速排序。\",\"有[2,4,3,9,1,6,5]数组 选 2 作为基准值，挑选比 2 小的数值组成左侧数组，比 2 大的组成右侧数组 对挑选出的 2 个数组，重复上述操作\",\"来源(https://www.cnblogs.com/MOBIN/p/4681369.html)\"]},\"44\":{\"c\":[\"算法\"]},\"45\":{\"h\":\"递归\"},\"46\":{\"h\":\"基线条件和递归条件\",\"t\":[\"基线条件（base case）和递归条件（recursive case） 递归条件指的是函数调用自己，而基线条件则指的是函数不再调用自己\"]},\"47\":{\"c\":[\"算法\"]},\"48\":{\"c\":[\"算法图解\"]},\"49\":{\"h\":\"选择排序\",\"t\":[\"在内存中开辟空间需要连接一起的空间\",\"当加入新的数据时，内存空间不够需要重新分批一开可以连接一起的空间\",\"知道一个元素位置可以知道所有元素位置\",\"链表中的元素可存储在内存的任何地方。\",\"链表的每个元素都存储了下一个元素的地址，从而使一系列随机的内存地址串在一起。\",\"要获取最后一个元素位置需要知道前面所有元素位置\",\"有一组歌单，按照歌曲播放次数，进行排序 选择排序：找出播放次数最多的歌曲，添加到一个新的列表中，依次找出播放次数第二的乐队 第一次需要检查 n 个元素，但随后检查的元素数依次为 n  1, n – 2, …, 2 和 1。平均每次检查的元素数为 1/2 × n，因此运行时间为 O(n × 1/2 × n)。但大 O 表示法省略诸如 1/2 这样的常数 ，为 O(n2)\"]},\"50\":{\"c\":[\"算法\"]},\"51\":{\"c\":[\"算法图解\"]},\"52\":{\"h\":\"排序算法\"},\"53\":{\"h\":\"冒泡排序\",\"t\":[\"比较相邻的元素。如果第一个比第二个大，就交换它们两个；\",\"对每一对相邻元素作同样的工作，从开始第一对到结尾的最后一对，这样在最后的元素应该会是最大的数；\",\"针对所有的元素重复以上的步骤，除了最后一个；\",\"重复步骤 1~3，直到排序完成。\",\"function bubbleSort(oldArr) { let arr = oldArr; for (let i = 0; i < arr.length - 1; i++) { // -i 跟i后面的元素进行比较 for (let j = 0; j < arr.length - 1 - i; j++) { // 相邻元素比较 if (arr[j] > arr[j + 1]) { // 元素交换 const TEMP = arr[j + 1]; arr[j + 1] = arr[j]; arr[j] = TEMP; } } } return arr; }\"]},\"54\":{\"h\":\"选择排序\",\"t\":[\"首先在未排序序列中找到最小（大）元素，存放到排序序列的起始位置\",\"再从剩余未排序元素中继续寻找最小（大）元素，然后放到已排序序列的末尾\",\"以此类推，直到所有元素均排序完毕。\",\"function selectionSort(oldArr) { let arr = oldArr; let minIndex, temp; for (let i = 0; i < arr.length - 1; i++) { minIndex = j; // 比较后面的元素 for (let j = i + 1; j < arr.length; j++) { if (arr[j] < arr[minIndex]) { // 获取最小元素的index minIndex = j; } } // 将最小元素移动到已排序的末尾 temp = arr[i]; arr[i] = arr[minIndex]; arr[minIndex] = temp; } return arr; }\"]},\"55\":{\"h\":\"插入排序\",\"t\":[\"以第一个元素建立排序序列\",\"取出下一个元素，在排序好的序列中进行对比排序插入\",\"以此类推，直到所有元素均排序完毕。\",\"function insertionSort(oldArr) { let arr = oldArr; let preIndex, current; for (let i = 1; i < arr.length; i++) { // 获取序列末尾元素 preIndex = i - 1; current = arr[i]; // 与末尾元素进行比较 末尾元素大于比较元素 进行后移 while (preIndex >= 0 && arr[preIndex] > current) { arr[preIndex + 1] = arr[preIndex]; preIndex--; } // 插入小于的元素前面 arr[preIndex + 1] = current; } return arr; }\"]},\"56\":{\"h\":\"希尔排序\",\"t\":[\"先将整个待排序的记录序列分割成为若干子序列分别进行直接插入排序\",\"待整个序列中的记录\\\"基本有序\\\"时，再对全体记录进行依次直接插入排序。\",\"平均时间复杂度\",\"最好情况\",\"最坏情况\",\"空间复杂度\",\"排序方式\",\"稳定性\",\"O(nlogn)\",\"O(nlog2 n)\",\"O(nlog2 n)\",\"O(1)\",\"In-place\",\"不稳定\",\"function shellSort(oldArr) { let arr = oldArr; const len = arr.length; //以第gap个元素建立 排序序列 分为若干个子序列进行插入排序 for (let gap = Math.floor(len / 2); gap > 0; gap = Math.floor(gap / 2)) { // 开始插入排序 for (let i = gap; i < len; i++) { let j = i; let current = arr[i]; while (j - gap >= 0 && current < arr[j - gap]) { arr[j] = arr[j - gap]; j = j - gap; } arr[j] = current; } } return arr; }\"]},\"57\":{\"h\":\"归并排序\",\"t\":[\"先使每个子序列有序，再使子序列段间有序\",\"将已有序的子序列合并 \",\"平均时间复杂度\",\"最好情况\",\"最坏情况\",\"空间复杂度\",\"排序方式\",\"稳定性\",\"O(nlogn)\",\"O(nlog n)\",\"O(nlog n)\",\"O(n)\",\"In-place\",\"不稳定\",\"function mergeSort(oldArr) { let arr = oldArr; const len = arr.length; if (len < 2) { return arr; } let middle = Math.floor(len / 2), left = arr.slice(0, middle), right = arr.slice(middle); return merge(mergeSort(left), mergeSort(right)); } function merge(left, right) { const result = []; while (left.length > 0 && right.length > 0) { if (left[0] <= right[0]) { result.push(left.shift()); } else { result.push(right.shift()); } } while (left.length) { result.push(left.shift()); } while (right.length) { result.push(right.shift()); } return result; }\"]},\"58\":{\"h\":\"快速排序\",\"t\":[\"从数列中挑出一个元素，称为 “基准”（pivot）\",\"把比基准值小的摆放在基准前面，比基准值大的摆在基准的后面\",\"对左右两边数组重复上述操作\",\"function quickSort(arr, left, right) { let len = arr.length, partitionIndex, left = typeof left != \\\"number\\\" ? 0 : left, right = typeof right != \\\"number\\\" ? len - 1 : right; if (left < right) { partitionIndex = partition(arr, left, right); quickSort(arr, left, partitionIndex - 1); quickSort(arr, partitionIndex + 1, right); } return arr; } function partition(arr, left, right) { // 基准值 let pivot = left, index = pivot + 1; for (let i = index; i <= right; i++) { if (arr[i] < arr[pivot]) { // 交换位置 swap(arr, i, index); index++; } } swap(arr, pivot, (index = 1)); return index - 1; } function swap(arr, i, j) { let temp = arr[i]; arr[i] = arr[j]; arr[j] = temp; }\"]},\"59\":{\"h\":\"堆排序\",\"t\":[\"二叉树每个结点的值都大于其左孩子和右孩子结点的值，称之为大根堆\",\"首先将待排序的数组构造成一个大根堆，此时，整个数组的最大值就是堆结构的顶端\",\"将顶端的数与末尾的数交换，此时，末尾的数为最大值，剩余待排序数组个数为 n-1\",\"将剩余的 n-1 个数再构造成大根堆，再将顶端数与 n-1 位置的数交换，如此反复执行，便能得到有序数组\",\"function heapSort(arr) { heapInsert(arr); let size = arr.length; while (size > 1) { swap(arr, 0, size - 1); size--; heapify(arr, 0, size); } } function heapInsert(arr) { for (let i = 0; i < arr.length; i++) { let currentIndex = i; let fatherIndex = (currentIndex - 1) / 2; while (arr[currentIndex] > arr[fatherIndex]) { swap(arr, currentIndex, fatherIndex); currentIndex = fatherIndex; fatherIndex = (currentIndex - 1) / 2; } } } function heapify(arr, index, size) { let left = 2 * index + 1; let right = 2 * index + 2; while (left < size) { let largestIndex; if (arr[left] < arr[right] && right < size) { largestIndex = right; } else { largestIndex = left; } if (arr[index > arr[largestIndex]]) { largestIndex = index; } if (index === largestIndex) { break; } swap(arr, largestIndex, index); index = largestIndex; left = 2 * index + 1; right = 2 * index + 2; } }\"]},\"60\":{\"h\":\"计数排序\",\"t\":[\"找出数组中的最大值 max、最小值 min。\",\"创建一个新数组 count，其长度是 max-min 加 1，其元素默认值都为 0。\",\"遍历原数组中的元素，以原数组中的元素值作为 count 数组的索引，以原数组中的元素出现次数作为 count 数组的元素值。\",\"创建结果数组 result,将每个元素 i 放在新数组的第[i]项，每放一个元素就将 count[i]减去 1。\",\"function countingSort(arr, maxValue) { let bucket = new Array(maxValue + 1), sortedIndex = 0; (arrLen = arr.length), (bucketLen = maxValue + 1); for (let i = 0; i < arrLen; i++) { if (!bucket[arr[i]]) { bucket[arr[i]] = 0; } bucket[arr[i]]++; } for (let j = 0; j < bucketLen; j++) { while (bucket[j] > 0) { arr[sortedIndex++] = j; bucket[j]--; } } return arr; }\"]},\"61\":{\"h\":\"桶排序\",\"t\":[\"设多个数组为桶\",\"将数据分到桶里\",\"对桶内数据进行排序\",\"将排序好的桶进行拼接\",\"function bucketSort(arr, bucketSize) { if (arr.length === 0) { return arr; } let i; let minValue = arr[0]; let maxValue = arr[0]; for (i = 1; i < arr.length; i++) { if (arr[i] < minValue) { minValue = arr[i]; // 输入数据的最小值 } else if (arr[i] > maxValue) { maxValue = arr[i]; // 输入数据的最大值 } } // 桶的初始化 let DEFAULT_BUCKET_SIZE = 5; // 设置桶的默认数量为5 bucketSize = bucketSize || DEFAULT_BUCKET_SIZE; let bucketCount = Math.floor((maxValue - minValue) / bucketSize) + 1; let buckets = new Array(bucketCount); for (i = 0; i < buckets.length; i++) { buckets[i] = []; } // 利用映射函数将数据分配到各个桶中 for (i = 0; i < arr.length; i++) { buckets[Math.floor((arr[i] - minValue) / bucketSize)].push(arr[i]); } arr.length = 0; for (i = 0; i < buckets.length; i++) { insertionSort(buckets[i]); // 对每个桶进行排序，这里使用了插入排序 for (let j = 0; j < buckets[i].length; j++) { arr.push(buckets[i][j]); } } return arr; }\"]},\"62\":{\"h\":\"基数排序\",\"t\":[\"将所有待比较数值（正整数）统一为同样的数位长度（个十百千万），数位较短的数前面补零\",\"从最低位开始，依次进行一次排序。 \",\"按照个位数进行排序。\",\"按照十位数进行排序。\",\"按照百位数进行排序。\",\"这样从最低位排序一直到最高位排序完成以后, 数列就变成一个有序序列。\",\"let counter = []; function radixSort(arr, maxDigit) { let mod = 10; let dev = 1; for (let i = 0; i < maxDigit; i++, dev *= 10, mod *= 10) { for(let j = 0; j < arr.length; j++) { let bucket = parseInt((arr[j] % mod) / dev); if(counter[bucket]==null) { counter[bucket] = []; } counter[bucket].push(arr[j]); } let pos = 0; for(let j = 0; j < counter.length; j++) { let value = null; if(counter[j]!=null) { while ((value = counter[j].shift()) != null) { arr[pos++] = value; } } } } return arr; }\"]},\"63\":{\"c\":[\"算法\"]},\"64\":{\"h\":\"C# 基础\",\"t\":[\"// 命名空间 using System; // 命名空间 namespace Simple { // 类 class Program { // static void Main(){ Console.WriteLine(\\\"Hello World!\\\"); } } }\"]},\"65\":{\"h\":\".Net和C#的关系\",\"t\":[\"一、http://asp.net是一种用来快速创建动态Web网站的技术，不是语言，它使用C#(或者http://vb.net)为开发语言。C#是一种面向对象的编程语言；net只是一个框架，.net中所有的编程语言，比如c# http://vb.net等编写的程序必须在.net framework框架下运行。\",\".NET 分成两个方面：WinForm和WebForm，http://ASP.NET就是属于WebForm，也就是平时说的B/S模式的开发。而WinForm就是属于C/S模式。\",\"http://Asp.NET可以用C#或http://VB.NET来开发。编译后形成CLR，通过服务器的IIS+.NET FrameWork再次编译来运行。\",\"二、.Net全称.NET Framework是一个开发和运行环境，该战略是微软的一项全新创意，它将使得“互联网行业进入一个更先进的阶段”，.NET不是一种编程语言。简单说就是一组类库框架。\",\".NET有很多种语言组成，比如C#、 http://VB.NET、J#、Jsript、Managed C++，但是都是运行在.NET FrameWork Run Time底下的。其中，C#是主流。\",\"三、C#是.NET Framework框架支持的一种主力开发语言，可用于开发http://ASP.NET网站,Windows程序，控制台程序，甚至于手机软件(Windows Phone)。\"]},\"66\":{\"h\":\"标识符\",\"t\":[\"在C#中，标识符是用于表示变量、方法、类、接口、属性、事件等程序实体的名称。标识符可以由字母（A-Z，a-z）、数字（0-9）、下划线（_）和@符号组成，但是不能以数字开头。C#是区分大小写的，因此大写字母和小写字母被认为是不同的字符。标识符的命名应该遵循以下规则：\",\"合法性：标识符必须以字母、下划线或@开头，后面可以跟任意数量的字母、数字、下划线或@符号。\",\"命名约定：C#有一套命名约定，虽然不是强制性的，但遵循这些约定可以提高代码的可读性和一致性。例如： \",\"类名和接口名应该使用帕斯卡命名法（PascalCase），即每个单词的首字母大写，如MyClass、IDataService。\",\"方法和属性名也应该使用帕斯卡命名法，如CalculateTotal、ProductName。\",\"变量和参数名应该使用骆驼命名法（camelCase），即第一个单词的首字母小写，后续单词的首字母大写，如backgroundColor、indexOf。\",\"私有字段通常以一个下划线开头，如_privateField。\",\"常量名应该使用全大写字母，单词之间可以用下划线分隔，如MAX_HEIGHT、DEFAULT_TIMEOUT。\",\"关键字：C#中有一些关键字，这些关键字有特定的语言含义，不能用作标识符。例如class、int、if等。如果确实需要使用与关键字相同的名称，可以在名称前后添加@符号，如@class。\",\"作用域：标识符的作用域是指它们在代码中的可见性。在C#中，标识符可以在类、方法或代码块内部声明，其作用域限定在声明它们的区域。\",\"不推荐使用的字符：虽然@符号是合法的，但通常不推荐在标识符中使用，除非是为了解决与关键字冲突的情况。 遵循这些规则和约定可以帮助创建清晰、易于理解和维护的C#代码。\"]},\"67\":{\"h\":\"关键字\",\"t\":[\"C#中有一些关键字，这些关键字有特定的语言含义，不能用作标识符。例如class、int、if等。如果确实需要使用与关键字相同的名称，可以在名称前后添加@符号，如@class。\"]},\"68\":{\"h\":\"Main方法\",\"t\":[\"在C#中，Main方法是程序的入口点。当程序启动时，CLR会调用Main方法。Main方法通常返回一个整数类型，表示程序的退出代码。Main方法可以接受一个字符串数组作为参数，该数组包含传递给程序的命令行参数。\",\"class Program { static void Main(string[] args) { } }\"]},\"69\":{\"h\":\"CLI和CLR\"},\"70\":{\"h\":\"CLI\",\"t\":[\"CLI（Common Language Infrastructure）是微软为.NET框架开发的一种语言无关的、平台无关的虚拟机规范。CLI包括以下几个部分：\",\"公共中间语言（Common Intermediate Language，CIL）：CIL是一种低级、平台无关的中间语言，它将源代码编译成CIL代码。CIL代码可以在任何支持CLI的平台上运行。\",\"元数据（Metadata）：元数据是CIL代码的一部分，它包含了关于代码的元数据信息，如类型信息、方法信息、字段信息等。元数据用于在运行时解析和执行代码。\",\"类型系统（Type System）：CLI定义了一个类型系统，它支持值类型和引用类型，以及它们的继承和接口实现。\",\"垃圾回收（Garbage Collection）：CLI提供了一个自动垃圾回收机制，用于管理内存的分配和释放。\",\"异常处理（Exception Handling）：CLI支持异常处理机制，用于处理运行时错误。\",\"CLI的全部体系结构，提供公共类型系统（CTS，Common Type System）、虚拟执行系统（VES，Virtual Execution System）和公共语言规范（CLS，Common Language Specification）的标准化描述，还提供对元数据（Metadata）的信息性描述。\",\"通用类型系统（CTS）：规范.NET中数据的类型。\",\"元数据系统（Metadata）：是.NET中描述数据的数据。\",\"通用语言规范（CLS）：描述多语言之间进行交互的语言规范，.NET系统包括的语言有C#、C++、VB、J#，它们都遵守通用语言规范。\",\"虚拟执行系统（VES）：是一个可运行受管理代码（Managed Code）的运行环境，它提供了运行受管理代码所需要的内置数据类型（data type），以及假定的机器型态与状态设置、流程控制与例外处理等参数。\"]},\"71\":{\"h\":\"CLR\",\"t\":[\"CLR（Common Language Runtime，公共语言运行时）是CLI的实现，它是.NET框架的核心组件。CLR提供了运行CIL代码的环境，并提供了以下功能：\",\"代码执行：CLR负责将CIL代码转换为机器代码，并在支持CLI的平台上执行。\",\"内存管理：CLR提供了自动垃圾回收机制，用于管理内存的分配和释放。\",\"类型检查：CLR在运行时检查类型信息，确保代码的正确性。\",\"异常处理：CLR支持异常处理机制，用于处理运行时错误。\",\"跨语言互操作性：CLR支持不同编程语言之间的互操作性，允许使用不同语言编写的代码相互调用。\",\"安全：CLR提供了安全机制，用于保护代码免受恶意攻击。\"]},\"72\":{\"h\":\"JIT编译器\",\"t\":[\"JIT编译器（Just-In-Time编译器）是一种在程序运行时将中间语言（如CIL）编译为机器代码的编译器。JIT编译器在程序运行时将CIL代码转换为机器代码，并在需要时执行。这种编译策略的优点是可以在运行时根据程序的实际需求进行优化，从而提高程序的执行效率。JIT编译器通常用于.NET框架中，它将CIL代码编译为机器代码，并在运行时执行。\"]},\"73\":{\"h\":\"AOT编译器\",\"t\":[\"AOT编译器（Ahead-Of-Time编译器）是一种在程序编译时将中间语言（如CIL）编译为机器代码的编译器。AOT编译器在程序编译时将CIL代码转换为机器代码，并将机器代码嵌入到最终的可执行文件中。这种编译策略的优点是可以在程序运行时直接执行机器代码，而不需要再进行编译。AOT编译器通常用于移动平台和嵌入式系统，它将CIL代码编译为机器代码，并将机器代码嵌入到最终的可执行文件中。\"]},\"74\":{\"h\":\"命名空间\",\"t\":[\"命名空间是C#中用于组织代码的一种机制，它可以将相关的类、接口、结构体等组织在一起，避免命名冲突。命名空间可以嵌套，例如：\",\"namespace MyNamespace { namespace SubNamespace { class MyClass { // ... } } }\"]},\"75\":{\"h\":\"using指令\",\"t\":[\"using指令是C#中用于引入命名空间的一种机制，它可以将命名空间中的类型引入到当前代码文件中，从而可以直接使用这些类型，而不需要使用命名空间限定。例如：\",\"using System; using MyNamespace.SubNamespace; class Program { static void Main() { MyClass myClass = new MyClass(); // ... } }\"]},\"76\":{\"h\":\"类\",\"t\":[\"类是C#中的一种基本数据类型，它是一种用户自定义的数据类型，可以包含字段、属性、方法、事件等成员。类可以继承自其他类，也可以实现接口。例如：\",\"class Program { private int age; // 字段 public int Age { get; set; }; // 属性 public Program (age) // 构造函数 { this.age = age; } public int Next() // 方法 { return age + 1; } }\"]},\"77\":{\"h\":\"成员\",\"t\":[\"using System; // 1. 定义一个名为 SampleClass 的类 public class SampleClass { // 常量 (Constant): 与类关联的常量值 public const double PI = 3.14159; // 字段 (Field): 类的变量 private string name; // 属性 (Property): 与读取和写入类的已命名属性相关联的操作 public string Name { get { return name; } set { name = value; } } // 索引器 (Indexer): 与将类实例编入索引相关联的操作 private string[] elements = new string[10]; public string this[int index] { get { return elements[index]; } set { elements[index] = value; } } // 事件 (Event): 类可以生成的通知 public event EventHandler NameChanged; // 运算符重载 (Operator Overloading): 类支持的运算符 public static SampleClass operator +(SampleClass a, SampleClass b) { return new SampleClass { Name = a.Name + \\\" \\\" + b.Name }; } // 构造函数 (Constructor): 初始化实例或类本身所需的操作 public SampleClass() { name = \\\"Default Name\\\"; Console.WriteLine(\\\"SampleClass Constructor called\\\"); } // 方法 (Method): 类可以执行的计算和操作 public void DisplayInfo() { Console.WriteLine($\\\"Name: {Name}\\\"); } // 构造函数重载 (Constructor Overloading) public SampleClass(string initialName) { name = initialName; Console.WriteLine($\\\"SampleClass Constructor with parameter called, Name set to {initialName}\\\"); } // 终结器 (Destructor): 永久放弃类实例前要执行的操作 ~SampleClass() { Console.WriteLine(\\\"SampleClass Destructor called\\\"); } // 嵌套类型 (Nested Type): 类声明的嵌套类型 public class NestedClass { public void NestedMethod() { Console.WriteLine(\\\"Method inside NestedClass\\\"); } } // 引发事件的方法 protected virtual void OnNameChanged(EventArgs e) { NameChanged?.Invoke(this, e); } // 示例方法来更改名称并引发事件 public void ChangeName(string newName) { if (name != newName) { name = newName; OnNameChanged(EventArgs.Empty); } } } class Program { static void Main(string[] args) { // 使用构造函数创建类的实例 SampleClass instance1 = new SampleClass(); SampleClass instance2 = new SampleClass(\\\"Instance 2\\\"); // 设置属性 instance1.Name = \\\"New Name\\\"; Console.WriteLine($\\\"Instance1 Name: {instance1.Name}\\\"); // 使用方法 instance1.DisplayInfo(); instance2.DisplayInfo(); // 使用索引器 instance1[0] = \\\"Element 0\\\"; Console.WriteLine($\\\"Index 0 of instance1: {instance1[0]}\\\"); // 事件处理 instance1.NameChanged += (sender, e) => Console.WriteLine(\\\"Name has changed.\\\"); instance1.ChangeName(\\\"Another Name\\\"); // 使用嵌套类 SampleClass.NestedClass nestedInstance = new SampleClass.NestedClass(); nestedInstance.NestedMethod(); // 运算符重载的使用 SampleClass combinedInstance = instance1 + instance2; combinedInstance.DisplayInfo(); // 程序结束时终结器被调用 } }\"]},\"78\":{\"h\":\"字段\",\"t\":[\"在C#中，字段（field）是类或结构中的变量，用于存储数据。字段可以是公开的、私有的、保护的或内部的，具体取决于它们的访问修饰符。\",\"public class Person { // 字段 private string name; private int age; // 公共字段 public string Address; }\",\"字段通常在类或结构的主体内声明。可以为字段指定数据类型和访问修饰符。\",\"字段可以在声明时初始化，也可以在构造函数中进行初始化。\",\"字段也可以声明为静态字段，属于类而不是类的实例。\",\"访问修饰符决定了字段的可访问性，包括public、private、protected和internal。\",\"字段通常用于存储对象的状态，但过多的公共字段可能会导致封装破坏。通常推荐使用属性（properties）来访问字段。\",\"修饰符\",\"public：可以在任何地方访问。\",\"private：只能在声明它的类或结构内部访问。\",\"protected：可以在声明它的类或结构及其派生类中访问。\",\"internal：可以在同一程序集内访问。\",\"public class Example { public int PublicValue; // 公开成员 private int PrivateValue; // 私有成员 protected int ProtectedValue; // 受保护成员 internal int InternalValue; // 内部成员 protected internal int ProtectedInternalValue; // 受保护的内部成员 }\"]},\"79\":{\"h\":\"属性\",\"t\":[\"public class Person { private string name; // 私有字段 // 属性 public string Name { get { return name; } // 读取 name 字段 set { name = value; } // 修改 name 字段 } // 带有验证的属性示例 private int score; public int Score { get { return score; } set { if (value < 0 || value > 100) throw new ArgumentOutOfRangeException(\\\"Score must be between 0 and 100.\\\"); score = value; } } // 自动属性 public string Model { get; set; } public int Year { get; set; } public double Radius { get { return radius; } // 只读属性 } public double Area { get { return Math.PI * radius * radius; } // 计算面积 } } // 使用属性 Person person = new Person(); person.Name = \\\"Alice\\\"; // 调用 set 访问器 Console.WriteLine(person.Name); // 调用 get 访问器，输出: Alice\"]},\"80\":{\"h\":\"索引器\",\"t\":[\"索引器让你能够通过索引（类似数组的方式）来访问类的内部数据。\",\"public class StringCollection { private List<string> _strings = new List<string>(); // 定义索引器 public string this[int index] { get { return _strings[index]; // 返回指定索引的值 } set { _strings[index] = value; // 设置指定索引的值 } } public void Add(string value) { _strings.Add(value); // 向集合中添加一个字符串 } public int Count => _strings.Count; // 返回集合中元素的数量 } var collection = new StringCollection(); collection.Add(\\\"Hello\\\"); collection.Add(\\\"World\\\"); // 使用索引器访问元素 Console.WriteLine(collection[0]); // 输出: Hello // 使用索引器设置元素 collection[1] = \\\"C#\\\"; Console.WriteLine(collection[1]); // 输出: C#\"]},\"81\":{\"h\":\"静态成员\",\"t\":[\"静态成员是属于类本身的，而不是类的实例。这意味着你可以不创建类的实例就可以访问静态成员。\",\"共享：静态成员在所有实例之间共享。\",\"无需实例化：可以直接通过类名访问静态成员。\",\"生命周期：静态成员的生命周期从类加载开始，直到程序结束。\",\"public class MathHelper { // 静态字段 public static double Pi = 3.14159; // 静态方法 public static double CalculateArea(double radius) { return Pi * radius * radius; } } // 使用静态成员 double area = MathHelper.CalculateArea(5.0); Console.WriteLine(\\\"Area: \\\" + area);\"]},\"82\":{\"h\":\"构造函数\",\"t\":[\"using System; namespace LineApplication { class Line { private double length; // 线条的长度 public Line() { Console.WriteLine(\\\"对象已创建\\\"); } public void setLength( double len ) { length = len; } public double getLength() { return length; } static void Main(string[] args) { Line line = new Line(); // 设置线条长度 line.setLength(6.0); Console.WriteLine(\\\"线条的长度： {0}\\\", line.getLength()); Console.ReadKey(); } } } // 输出： // 对象已创建 // 线条的长度： 6\"]},\"83\":{\"h\":\"重载\",\"t\":[\"public class Rectangle { public double Width { get; } public double Height { get; } // 默认构造函数 public Rectangle() { Width = 1; Height = 1; } // 带参数的构造函数 public Rectangle(double width, double height) { Width = width; Height = height; } }\"]},\"84\":{\"h\":\"继承\",\"t\":[\"使用 : 符号表示继承关系\",\"// 定义一个基类 public class Animal { public void Eat() { Console.WriteLine(\\\"Eating...\\\"); } } // 定义一个派生类 public class Dog : Animal { public void Bark() { Console.WriteLine(\\\"Barking...\\\"); } } class Program { static void Main(string[] args) { Dog myDog = new Dog(); myDog.Eat(); // 输出: Eating... myDog.Bark(); // 输出: Barking... } }\",\"public class Animal { public virtual void MakeSound() { Console.WriteLine(\\\"Some generic animal sound\\\"); } } public class Dog : Animal { public override void MakeSound() { Console.WriteLine(\\\"Barking...\\\"); } }\"]},\"85\":{\"h\":\"记录\"},\"86\":{\"h\":\"接口\"},\"87\":{\"h\":\"泛型\",\"t\":[\"https://blog.csdn.net/qq_51040417/article/details/141551584\"]},\"88\":{\"c\":[\"c-sharp\"]},\"89\":{\"h\":\"配置系统\",\"t\":[\"创建一个json文件，例如test.json,右键设置“如果较新则复制”\",\"NuGet安装Microsoft.Extensions.Configuration和Microsoft.Extensions.Configuration.Json\",\"test.json\",\"{ \\\"port\\\":8080, \\\"proxy\\\":{ \\\"address\\\": \\\"https://example.com\\\", \\\"class\\\":{ \\\"className\\\":\\\"red\\\" } } }\",\"xxx.cs\",\"using Microsoft.Extensions.Configuration; static void Main(string[] args) { ConfigurationBuilder configBuilder = new ConfigurationBuilder(); //optional参数:表示文件是否可选，初学时，建议optional设置为false，这样写错了的话能够及时发现。 //reloadOnChange参数：表示如果文件修改了，是否重新加载配置 configBuilder.AddJsonFile(\\\"config.json\\\", optional: false, reloadOnChange: false); IConfigurationRoot config = configBuilder.Build(); //json的单结构读取 string port = config[\\\"port\\\"]; Console.WriteLine($\\\"port={port}\\\"); //json的多级结构采用proxy:address string proxyAddress = config.GetSection(\\\"proxy:address\\\").Value; string className=config.GetSection(\\\"proxy:class:className\\\").Value; Console.WriteLine($\\\"Address:{proxyAddress}\\\"); Console.WriteLine($\\\"ClassName:{className}\\\"); }\",\"绑定读取JSON方式\",\"NuGet安装：Microsoft.Extensions.Configuration.Binder\",\"xxx.cs\",\"class Config { public int port {get;set;} public Proxy Proxy {get;set;} } class Proxy { public string address {get;set;} } static void Main(string[] args) { ConfigurationBuilder configBuilder = new ConfigurationBuilder(); //optional参数:表示文件是否可选，初学时，建议optional设置为false，这样写错了的话能够及时发现。 //reloadOnChange参数：表示如果文件修改了，是否重新加载配置 configBuilder.AddJsonFile(\\\"config.json\\\", optional: false, reloadOnChange: false); IConfigurationRoot configRoot = configBuilder.Build(); // Proxy proxy = configRoot.GetSection(\\\"proxy\\\").Get<Proxy>(); Console.WriteLine($\\\"{proxy.address}\\\"); //多级结构 Config config = configRoot.Get<config>(); Console.WriteLine(config.Name) }\"]},\"90\":{\"c\":[\".Net\"]},\"91\":{\"h\":\"\"},\"92\":{\"h\":\"IQueryable\"},\"93\":{\"h\":\"浏览器渲染过程\"},\"94\":{\"h\":\"进程架构\",\"t\":[\"当启动一个程序时，操作系统会为该程序分配内存，用来存放代码、运行过程中的数据，这样的运行环境叫做进程\",\"一个进程可以启动和管理多个线程，线程之间可以共享进行数据，任何一个线程出错都可能会导致进程崩溃\"]},\"95\":{\"h\":\"Chrome 的进程架构\",\"t\":[\"浏览器主进程 负责界面显示、用户交互和子进程管理\",\"渲染进程 排版引擎和 V8 引擎运行在该进程中，负责把 HTML、CSS 和 JavaScript 转变成网页\",\"网络进程 用来加载网络资源的\",\"GPU 进程 用来实现 CSS3 和 3D 效果\"]},\"96\":{\"h\":\"HTML 加载\",\"t\":[\"主进程接收用户输入的 URL\",\"主进程把该 URL 转发给网络进程\",\"在网络进程中发起 URL 请求\",\"网络进程接收到响应头数据并转发给主进程\",\"主进程发送提交导航消息到渲染进程\",\"渲染进程开始从网络进程接收 HTML 数据\",\"HTML 接收接受完毕后通知主进程确认导航\",\"渲染进程开始 HTML 解析和加载子资源\",\"HTML 解析完毕和加载子资源页面加载完成后会通知主进程页面加载完成\"]},\"97\":{\"h\":\"渲染过程\",\"t\":[\"渲染进程把 HTML 转变为 DOM 树型结构\",\"渲染进程把 CSS 文本转为浏览器中的 stylesheet\",\"通过 stylesheet 计算出 DOM 节点的样式\",\"根据 DOM 树创建布局树\",\"并计算各个元素的布局信息\",\"根据布局树生成分层树\",\"根据分层树进行生成绘制步骤\",\"把绘制步骤交给渲染进程中的合成线程进行合成\",\"合成线程将图层分成图块(tile)\",\"合成线程会把分好的图块发给栅格化线程池，栅格化线程会把图片(tile)转化为位图\",\"而其实栅格化线程在工作的时候会把栅格化的工作交给 GPU 进程来完成，最终生成的位图就保存在了 GPU 内存中\",\"当所有的图块都光栅化之后合成线程会发送绘制图块的命令给浏览器主进程\",\"浏览器主进程然后会从 GPU 内存中取出位图显示到页面上\"]},\"98\":{\"h\":\"HTML 转 DOM 树\",\"t\":[\"浏览器中的 HTML 解析器可以把 HTML 字符串转换成 DOM 结构\",\"HTML 解析器边接收网络数据边解析 HTML\",\"解析 DOM \",\"HTML 字符串转 Token\",\"Token 栈用来维护节点之间的父子关系，Token 会依次压入栈中\",\"如果是开始标签，把 Token 压入栈中并且创建新的 DOM 节点并添加到父节点的 children 中\",\"如果是文本 Token，则把文本节点添加到栈顶元素的 children 中，文本 Token 不需要入栈\",\"如果是结束标签，此开始标签出栈\"]},\"99\":{\"h\":\"CSS 转 stylesheet\",\"t\":[\"渲染进程把 CSS 文本转为浏览器中的 stylesheet\",\"CSS 来源可能有 link 标签、style 标签和 style 行内样式\",\"渲染引擎会把 CSS 转换为 document.styleSheets\"]},\"100\":{\"h\":\"计算出 DOM 节点的样式\",\"t\":[\"根据 CSS 的继承和层叠规则计算 DOM 节点的样式\",\"DOM 节点的样式保存在了 ComputedStyle 中\"]},\"101\":{\"h\":\"构建布局树\",\"t\":[\"创建布局树\",\"创建一棵只包含可见元素的布局树 \"]},\"102\":{\"h\":\"计算布局\",\"t\":[\"计算各个元素的布局\",\"request\",\"const htmlparser2 = require('htmlparser2'); const http = require('http'); const css = require(\\\"css\\\"); const main = require('./main.js'); const network = require('./network.js'); const render = require('./render.js'); const host = 'localhost'; const port = 80; Array.prototype.top = function () { return this[this.length - 1]; } /** 浏览器主进程 **/ main.on('request', function (options) { //2.主进程把该URL转发给网络进程 network.emit('request', options); }) //开始准备渲染页面 main.on('prepareRender', function (response) { //5.主进程发送提交导航消息到渲染进程 render.emit('commitNavigation', response); }) main.on('confirmNavigation', function () { console.log('confirmNavigation'); }) main.on('DOMContentLoaded', function () { console.log('DOMContentLoaded'); }) main.on('Load', function () { console.log('Load'); }) /** 网络进程 **/ network.on('request', function (options) { //3.在网络进程中发起URL请求 let request = http.request(options, (response) => { //4.网络进程接收到响应头数据并转发给主进程 main.emit('prepareRender', response); }); //结束请求体 request.end(); }) /** 渲染进程 **/ //6.渲染进程开始从网络进程接收HTML数据 render.on('commitNavigation', function (response) { const headers = response.headers; const contentType = headers['content-type']; if (contentType.indexOf('text/html') !== -1) { //1. 渲染进程把HTML转变为DOM树型结构 const document = { type: 'document', attributes: {}, children: [] }; const cssRules = []; const tokenStack = [document]; const parser = new htmlparser2.Parser({ onopentag(name, attributes = {}) { const parent = tokenStack.top(); const element = { type: 'element', tagName: name, children: [], attributes, parent } parent.children.push(element); tokenStack.push(element); }, ontext(text) { if (!/^[\\\\r\\\\n\\\\s]*$/.test(text)) { const parent = tokenStack.top(); const textNode = { type: 'text', children: [], attributes: {}, parent, text } parent.children.push(textNode); } }, /** * 在预解析阶段，HTML发现CSS和JS文件会并行下载，等全部下载后先把CSS生成CSSOM，然后再执行JS脚本 * 然后再构建DOM树，重新计算样式，构建布局树，绘制页面 * @param {*} tagname */ onclosetag(tagname) { switch (tagname) { case 'style': const styleToken = tokenStack.top(); const cssAST = css.parse(styleToken.children[0].text); cssRules.push(...cssAST.stylesheet.rules); break; default: break; } tokenStack.pop(); }, }); //开始接收响应体 response.on('data', (buffer) => { //8.渲染进程开始HTML解析和加载子资源 //网络进程加载了多少数据，HTML 解析器便解析多少数据。 parser.write(buffer.toString()); }); response.on('end', () => { //7.HTML接收接受完毕后通知主进程确认导航 main.emit('confirmNavigation'); //3. 通过stylesheet计算出DOM节点的样式 recalculateStyle(cssRules, document); //4. 根据DOM树创建布局树,就是复制DOM结构并过滤掉不显示的元素 const html = document.children[0]; const body = html.children[1]; const layoutTree = createLayout(body); + //5.并计算各个元素的布局信息 + updateLayoutTree(layoutTree); //触发DOMContentLoaded事件 main.emit('DOMContentLoaded'); //9.HTML解析完毕和加载子资源页面加载完成后会通知主进程页面加载完成 main.emit('Load'); }); } }) +function updateLayoutTree(element, top = 0, parentTop = 0) { + const computedStyle = element.computedStyle; + element.layout = { + top: top + parentTop, + left: 0, + width: computedStyle.width, + height: computedStyle.height, + background: computedStyle.background, + color: computedStyle.color + } + let childTop = 0; + element.children.forEach(child => { + updateLayoutTree(child, childTop, element.layout.top); + childTop += parseInt(child.computedStyle.height || 0); + }); +} function createLayout(element) { element.children = element.children.filter(isShow); element.children.forEach(child => createLayout(child)); return element; } function isShow(element) { let isShow = true; if (element.tagName === 'head' || element.tagName === 'script') { isShow = false; } const attributes = element.attributes; Object.entries(attributes).forEach(([key, value]) => { if (key === 'style') { const attributes = value.split(';'); attributes.forEach((attribute) => { const [property, value] = attribute.split(/:\\\\s*/); if (property === 'display' && value === 'none') { isShow = false; } }); } }); return isShow; } function recalculateStyle(cssRules, element, parentComputedStyle = {}) { const attributes = element.attributes; element.computedStyle = {color:parentComputedStyle.color}; // 计算样式 Object.entries(attributes).forEach(([key, value]) => { //stylesheets cssRules.forEach(rule => { let selector = rule.selectors[0].replace(/\\\\s+/g, ''); if ((selector == '#' + value && key == 'id') || (selector == '.' + value && key == 'class')) { rule.declarations.forEach(({ property, value }) => { element.computedStyle[property] = value; }) } }) //行内样式 if (key === 'style') { const attributes = value.split(';'); attributes.forEach((attribute) => { const [property, value] = attribute.split(/:\\\\s*/); element.computedStyle[property] = value; }); } }); element.children.forEach(child => recalculateStyle(cssRules, child,element.computedStyle)); } //1.主进程接收用户输入的URL main.emit('request', { host, port, path: '/index.html' });\"]},\"103\":{\"h\":\"生成分层树\",\"t\":[\"根据布局树生成分层树\",\"渲染引擎需要为某些节点生成单独的图层，并组合成图层树 \",\"z-index\",\"绝对定位和固定定位\",\"滤镜\",\"透明\",\"裁剪\",\"这些图层合成最终的页面\",\"request\",\"const htmlparser2 = require('htmlparser2'); const http = require('http'); const css = require(\\\"css\\\"); const main = require('./main.js'); const network = require('./network.js'); const render = require('./render.js'); const host = 'localhost'; const port = 80; Array.prototype.top = function () { return this[this.length - 1]; } /** 浏览器主进程 **/ main.on('request', function (options) { //2.主进程把该URL转发给网络进程 network.emit('request', options); }) //开始准备渲染页面 main.on('prepareRender', function (response) { //5.主进程发送提交导航消息到渲染进程 render.emit('commitNavigation', response); }) main.on('confirmNavigation', function () { console.log('confirmNavigation'); }) main.on('DOMContentLoaded', function () { console.log('DOMContentLoaded'); }) main.on('Load', function () { console.log('Load'); }) /** 网络进程 **/ network.on('request', function (options) { //3.在网络进程中发起URL请求 let request = http.request(options, (response) => { //4.网络进程接收到响应头数据并转发给主进程 main.emit('prepareRender', response); }); //结束请求体 request.end(); }) /** 渲染进程 **/ //6.渲染进程开始从网络进程接收HTML数据 render.on('commitNavigation', function (response) { const headers = response.headers; const contentType = headers['content-type']; if (contentType.indexOf('text/html') !== -1) { //1. 渲染进程把HTML转变为DOM树型结构 const document = { type: 'document', attributes: {}, children: [] }; const cssRules = []; const tokenStack = [document]; const parser = new htmlparser2.Parser({ onopentag(name, attributes = {}) { const parent = tokenStack.top(); const element = { type: 'element', tagName: name, children: [], attributes, parent } parent.children.push(element); tokenStack.push(element); }, ontext(text) { if (!/^[\\\\r\\\\n\\\\s]*$/.test(text)) { const parent = tokenStack.top(); const textNode = { type: 'text', children: [], attributes: {}, parent, text } parent.children.push(textNode); } }, /** * 在预解析阶段，HTML发现CSS和JS文件会并行下载，等全部下载后先把CSS生成CSSOM，然后再执行JS脚本 * 然后再构建DOM树，重新计算样式，构建布局树，绘制页面 * @param {*} tagname */ onclosetag(tagname) { switch (tagname) { case 'style': const styleToken = tokenStack.top(); const cssAST = css.parse(styleToken.children[0].text); cssRules.push(...cssAST.stylesheet.rules); break; default: break; } tokenStack.pop(); }, }); //开始接收响应体 response.on('data', (buffer) => { //8.渲染进程开始HTML解析和加载子资源 //网络进程加载了多少数据，HTML 解析器便解析多少数据。 parser.write(buffer.toString()); }); response.on('end', () => { //7.HTML接收接受完毕后通知主进程确认导航 main.emit('confirmNavigation'); //3. 通过stylesheet计算出DOM节点的样式 recalculateStyle(cssRules, document); //4. 根据DOM树创建布局树,就是复制DOM结构并过滤掉不显示的元素 const html = document.children[0]; const body = html.children[1]; const layoutTree = createLayout(body); //5.并计算各个元素的布局信息 updateLayoutTree(layoutTree); + //6. 根据布局树生成分层树 + const layers = [layoutTree]; + createLayerTree(layoutTree, layers); + console.log(layers); //触发DOMContentLoaded事件 main.emit('DOMContentLoaded'); //9.HTML解析完毕和加载子资源页面加载完成后会通知主进程页面加载完成 main.emit('Load'); }); } }) +function createLayerTree(element, layers) { + element.children = element.children.filter((child) => createNewLayer(child, layers)); + element.children.forEach(child => createLayerTree(child, layers)); + return layers; +} +function createNewLayer(element, layers) { + let created = true; + const attributes = element.attributes; + Object.entries(attributes).forEach(([key, value]) => { + if (key === 'style') { + const attributes = value.split(';'); + attributes.forEach((attribute) => { + const [property, value] = attribute.split(/:\\\\s*/); + if (property === 'position' && value === 'absolute') { + updateLayoutTree(element);//对单独的层重新计算位置 + layers.push(element); + created = false; + } + }); + } + }); + return created; +} function updateLayoutTree(element, top = 0, parentTop = 0) { const computedStyle = element.computedStyle; element.layout = { top: top + parentTop, left: 0, width: computedStyle.width, height: computedStyle.height, background: computedStyle.background, color: computedStyle.color } let childTop = 0; element.children.forEach(child => { updateLayoutTree(child, childTop, element.layout.top); childTop += parseInt(child.computedStyle.height || 0); }); } function createLayout(element) { element.children = element.children.filter(isShow); element.children.forEach(child => createLayout(child)); return element; } function isShow(element) { let isShow = true; if (element.tagName === 'head' || element.tagName === 'script') { isShow = false; } const attributes = element.attributes; Object.entries(attributes).forEach(([key, value]) => { if (key === 'style') { const attributes = value.split(';'); attributes.forEach((attribute) => { const [property, value] = attribute.split(/:\\\\s*/); if (property === 'display' && value === 'none') { isShow = false; } }); } }); return isShow; } function recalculateStyle(cssRules, element, parentComputedStyle = {}) { const attributes = element.attributes; element.computedStyle = {color:parentComputedStyle.color}; // 计算样式 Object.entries(attributes).forEach(([key, value]) => { //stylesheets cssRules.forEach(rule => { let selector = rule.selectors[0].replace(/\\\\s+/g, ''); if ((selector == '#' + value && key == 'id') || (selector == '.' + value && key == 'class')) { rule.declarations.forEach(({ property, value }) => { element.computedStyle[property] = value; }) } }) //行内样式 if (key === 'style') { const attributes = value.split(';'); attributes.forEach((attribute) => { const [property, value] = attribute.split(/:\\\\s*/); element.computedStyle[property] = value; }); } }); element.children.forEach(child => recalculateStyle(cssRules, child,element.computedStyle)); } //1.主进程接收用户输入的URL main.emit('request', { host, port, path: '/index.html' });\"]},\"104\":{\"h\":\"绘制\",\"t\":[\"根据分层树进行生成绘制步骤复合图层\",\"每个图层会拆分成多个绘制指令，这些指令组合在一起成为绘制列表\",\"request\",\"const htmlparser2 = require('htmlparser2'); const http = require('http'); const css = require(\\\"css\\\"); const main = require('./main.js'); const network = require('./network.js'); const render = require('./render.js'); const host = 'localhost'; const port = 80; Array.prototype.top = function () { return this[this.length - 1]; } /** 浏览器主进程 **/ main.on('request', function (options) { //2.主进程把该URL转发给网络进程 network.emit('request', options); }) //开始准备渲染页面 main.on('prepareRender', function (response) { //5.主进程发送提交导航消息到渲染进程 render.emit('commitNavigation', response); }) main.on('confirmNavigation', function () { console.log('confirmNavigation'); }) main.on('DOMContentLoaded', function () { console.log('DOMContentLoaded'); }) main.on('Load', function () { console.log('Load'); }) /** 网络进程 **/ network.on('request', function (options) { //3.在网络进程中发起URL请求 let request = http.request(options, (response) => { //4.网络进程接收到响应头数据并转发给主进程 main.emit('prepareRender', response); }); //结束请求体 request.end(); }) /** 渲染进程 **/ //6.渲染进程开始从网络进程接收HTML数据 render.on('commitNavigation', function (response) { const headers = response.headers; const contentType = headers['content-type']; if (contentType.indexOf('text/html') !== -1) { //1. 渲染进程把HTML转变为DOM树型结构 const document = { type: 'document', attributes: {}, children: [] }; const cssRules = []; const tokenStack = [document]; const parser = new htmlparser2.Parser({ onopentag(name, attributes = {}) { const parent = tokenStack.top(); const element = { type: 'element', tagName: name, children: [], attributes, parent } parent.children.push(element); tokenStack.push(element); }, ontext(text) { if (!/^[\\\\r\\\\n\\\\s]*$/.test(text)) { const parent = tokenStack.top(); const textNode = { type: 'text', children: [], attributes: {}, parent, text } parent.children.push(textNode); } }, /** * 在预解析阶段，HTML发现CSS和JS文件会并行下载，等全部下载后先把CSS生成CSSOM，然后再执行JS脚本 * 然后再构建DOM树，重新计算样式，构建布局树，绘制页面 * @param {*} tagname */ onclosetag(tagname) { switch (tagname) { case 'style': const styleToken = tokenStack.top(); const cssAST = css.parse(styleToken.children[0].text); cssRules.push(...cssAST.stylesheet.rules); break; default: break; } tokenStack.pop(); }, }); //开始接收响应体 response.on('data', (buffer) => { //8.渲染进程开始HTML解析和加载子资源 //网络进程加载了多少数据，HTML 解析器便解析多少数据。 parser.write(buffer.toString()); }); response.on('end', () => { //7.HTML接收接受完毕后通知主进程确认导航 main.emit('confirmNavigation'); //3. 通过stylesheet计算出DOM节点的样式 recalculateStyle(cssRules, document); //4. 根据DOM树创建布局树,就是复制DOM结构并过滤掉不显示的元素 const html = document.children[0]; const body = html.children[1]; const layoutTree = createLayout(body); //5.并计算各个元素的布局信息 updateLayoutTree(layoutTree); //6. 根据布局树生成分层树 const layers = [layoutTree]; createLayerTree(layoutTree, layers); + //7. 根据分层树进行生成绘制步骤并复合图层 + const paintSteps = compositeLayers(layers); + console.log(paintSteps.flat().join('\\\\r\\\\n')); //触发DOMContentLoaded事件 main.emit('DOMContentLoaded'); //9.HTML解析完毕和加载子资源页面加载完成后会通知主进程页面加载完成 main.emit('Load'); }); } }) +function compositeLayers(layers) { + //10.合成线程会把分好的图块发给栅格化线程池，栅格化线程会把图片(tile)转化为位图 + return layers.map(layout => paint(layout)); +} +function paint(element, paintSteps = []) { + const { background = 'black', color = 'black', top = 0, left = 0, width = 100, height = 0 } = element.layout; + if (element.type === 'text') { + paintSteps.push(`ctx.font = '20px Impact;'`); + paintSteps.push(`ctx.strokeStyle = '${color}';`); + paintSteps.push(`ctx.strokeText(\\\"${element.text.replace(/(^\\\\s+|\\\\s+$)/g, '')}\\\", ${left},${top + 20});`); + } else { + paintSteps.push(`ctx.fillStyle=\\\"${background}\\\";`); + paintSteps.push(`ctx.fillRect(${left},${top}, ${parseInt(width)}, ${parseInt(height)});`); + } + element.children.forEach(child => paint(child, paintSteps)); + return paintSteps; +} function createLayerTree(element, layers) { element.children = element.children.filter((child) => createNewLayer(child, layers)); element.children.forEach(child => createLayerTree(child, layers)); return layers; } function createNewLayer(element, layers) { let created = true; const attributes = element.attributes; Object.entries(attributes).forEach(([key, value]) => { if (key === 'style') { const attributes = value.split(';'); attributes.forEach((attribute) => { const [property, value] = attribute.split(/:\\\\s*/); if (property === 'position' && value === 'absolute') { updateLayoutTree(element);//对单独的层重新计算位置 layers.push(element); created = false; } }); } }); return created; } function updateLayoutTree(element, top = 0, parentTop = 0) { const computedStyle = element.computedStyle; element.layout = { top: top + parentTop, left: 0, width: computedStyle.width, height: computedStyle.height, background: computedStyle.background, color: computedStyle.color } let childTop = 0; element.children.forEach(child => { updateLayoutTree(child, childTop, element.layout.top); childTop += parseInt(child.computedStyle.height || 0); }); } function createLayout(element) { element.children = element.children.filter(isShow); element.children.forEach(child => createLayout(child)); return element; } function isShow(element) { let isShow = true; if (element.tagName === 'head' || element.tagName === 'script') { isShow = false; } const attributes = element.attributes; Object.entries(attributes).forEach(([key, value]) => { if (key === 'style') { const attributes = value.split(';'); attributes.forEach((attribute) => { const [property, value] = attribute.split(/:\\\\s*/); if (property === 'display' && value === 'none') { isShow = false; } }); } }); return isShow; } function recalculateStyle(cssRules, element, parentComputedStyle = {}) { const attributes = element.attributes; element.computedStyle = {color:parentComputedStyle.color};// 计算样式 Object.entries(attributes).forEach(([key, value]) => { //stylesheets cssRules.forEach(rule => { let selector = rule.selectors[0].replace(/\\\\s+/g, ''); if ((selector == '#' + value && key == 'id') || (selector == '.' + value && key == 'class')) { rule.declarations.forEach(({ property, value }) => { element.computedStyle[property] = value; }) } }) //行内样式 if (key === 'style') { const attributes = value.split(';'); attributes.forEach((attribute) => { const [property, value] = attribute.split(/:\\\\s*/); element.computedStyle[property] = value; }); } }); element.children.forEach(child => recalculateStyle(cssRules, child,element.computedStyle)); } //1.主进程接收用户输入的URL main.emit('request', { host, port, path: '/index.html' });\"]},\"105\":{\"h\":\"合成线程\",\"t\":[\"合成线程将图层分成图块(tile)\",\"合成线程会把分好的图块发给栅格化线程池，栅格化线程会把图片(tile)转化为位图\",\"而其实栅格化线程在工作的时候会把栅格化的工作交给 GPU 进程来完成，最终生成的位图就保存在了 GPU 内存中\",\"当所有的图块都光栅化之后合成线程会发送绘制图块的命令给浏览器主进程\",\"浏览器主进程然后会从 GPU 内存中取出位图显示到页面上\"]},\"106\":{\"h\":\"图块\",\"t\":[\"图块渲染也称基于瓦片渲染或基于小方块渲染\",\"它是一种通过规则的网格细分计算机图形图像并分别渲染图块(tile)各部分的过程 \"]},\"107\":{\"h\":\"栅格化\",\"t\":[\"栅格化是将矢量图形格式表示的图像转换成位图以用于显示器输出的过程\",\"栅格即像素\",\"栅格化即将矢量图形转化为位图(栅格图像)\"]},\"108\":{\"h\":\"资源加载\",\"t\":[\"CSS 加载不会影响 DOM 解析\",\"CSS 加载不会阻塞 JS 加载，但是会阻塞 JS 执行\",\"JS 会依赖 CSS 加载，JS 会阻塞 DOM 解析\"]},\"109\":{\"c\":[\"Browse\"]},\"110\":{\"h\":\"浏览器的工作原理\"},\"111\":{\"h\":\"解析\"},\"112\":{\"c\":[\"browse\"]},\"113\":{\"h\":\"JavaScript执行机制\",\"t\":[\"参考: 浏览器工作原理与实践\"]},\"114\":{\"h\":\"变量提升\",\"t\":[\"showName() console.log(myname) var myname = '极客时间' function showName() { console.log('函数showName被执行'); }\",\"执行过程中，若使用了未声明的变量，那么JavaScript执行会报错。\",\"在一个变量定义之前使用它，不会出错，但是该变量的值会为undefined，而不是定义时的值。\",\"在一个函数定义之前使用它，不会出错，且函数能正确执行\"]},\"115\":{\"h\":\"变量提升(Hoisting)\",\"t\":[\"var myName = '变量提升' //等同于 var myName; myName = '变量提升'\",\"function foo(){ console.log('foo') } var bar = function(){ console.log('bar') }\"]},\"116\":{\"h\":\"JavaScript代码的执行流程\"},\"117\":{\"h\":\"栈溢出\",\"t\":[\"执行上下文\",\"当JavaScript执行全局代码的时候，会编译全局代码并创建全局执行上下文，而且在整个页面的生存周期内，全局执行上下文只有一份。\",\"当调用一个函数的时候，函数体内的代码会被编译，并创建函数执行上下文，一般情况下，函数执行结束之后，创建的函数执行上下文会被销毁。\",\"当使用eval函数的时候，eval的代码也会被编译，并创建执行上下文。\",\"var a = 2 function add(){ var b = 10 return a+b } add()\",\"JavaScript引擎通过一种叫栈的数据结构来管理执行上下文\",\"调用栈\",\"JavaScript引擎正是利用栈的这种结构来管理执行上下文的。在执行上下文创建好后，JavaScript引擎会将执行上下文压入栈中，通常把这种用来管理执行上下文的栈称为执行上下文栈，又称调用栈。\",\"var a = 2 function add(b,c){ return b+c } function addAll(b,c){ var d = 10 result = add(b,c) return a+result+d } addAll(3,6)\",\"第一步，创建全局上下文，并将其压入栈底\",\"第二步是调用addAll函数\",\"第三步，当执行到add函数调用语句时，同样会为其创建执行上下文，并将其压入调用栈\",\"当add函数返回时，该函数的执行上下文就会从栈顶弹出，并将result的值设置为add函数的返回值\"]},\"118\":{\"h\":\"浏览器查看调用栈\",\"t\":[\"如何利用浏览器查看调用栈的信息\",\"栈溢出（Stack Overflow）\",\"function division(a,b){ return division(a,b) } console.log(division(1,2))\",\"当JavaScript引擎开始执行这段代码时，它首先调用函数division，并创建执行上下文，压入栈中；然而，这个函数是递归的，并且没有任何终止条件，所以它会一直创建新的函数执行上下文，并反复将其压入栈中，但栈是有容量限制的，超过最大数量后就会出现栈溢出的错误。\"]},\"119\":{\"h\":\"作用域 （scope)\",\"t\":[\"作用域是指在程序中定义变量的区域，该位置决定了变量的生命周期。通俗地理解，作用域就是变量与函数的可访问范围，即作用域控制着变量和函数的可见性和生命周期\",\"在ES6之前，ES的作用域只有两种：全局作用域和函数作用域。\",\"全局作用域中的对象在代码中的任何地方都能访问，其生命周期伴随着页面的生命周期。\",\"函数作用域就是在函数内部定义的变量或者函数，并且定义的变量或者函数只能在函数内部被访问。函数执行结束之后，函数内部定义的变量会被销毁。\"]},\"120\":{\"h\":\"变量提升的问题\",\"t\":[\"变量容易在不被察觉的情况下被覆盖掉\",\"var myname = \\\"极客时间\\\" function showName(){ console.log(myname); if(0){ var myname = \\\"极客邦\\\" } console.log(myname); } showName()\",\"本应销毁的变量没有被销毁\",\"function foo(){ for (var i = 0; i < 7; i++) { } // i的值并未被销毁，所以最后打印出来的是7 console.log(i); } foo()\"]},\"121\":{\"h\":\"ES6解决变量提升的缺陷\",\"t\":[\"function varTest() { var x = 1; if (true) { var x = 2; // 同样的变量! console.log(x); // 2 } console.log(x); // 2 }\",\"function letTest() { let x = 1; if (true) { let x = 2; // 不同的变量 console.log(x); // 2 } console.log(x); // 1 }\"]},\"122\":{\"h\":\"如何支持块级作用域\",\"t\":[\"function foo(){ var a = 1 let b = 2 { let b = 3 var c = 4 let d = 5 console.log(a) console.log(b) } console.log(b) console.log(c) console.log(d) } foo()\",\"第一步是编译并创建执行上下文\",\"函数内部通过var声明的变量，在编译阶段全都被存放到变量环境里面了。\",\"通过let声明的变量，在编译阶段会被存放到词法环境（Lexical Environment）中。\",\"在函数的作用域内部，通过let声明的变量并没有被存放到词法环境中。\",\"接下来，第二步继续执行代码，当执行到代码块里面时，变量环境中a的值已经被设置成了1，词法环境中b的值已经被设置成了2，\",\"在词法环境内部，维护了一个小型栈结构，栈底是函数最外层的变量，进入一个作用域块后，就会把该作用域块内部的变量压到栈顶；当作用域执行完成之后，该作用域的信息就会从栈顶弹出，这就是词法环境的结构。\",\"当作用域块执行结束之后，其内部定义的变量就会从词法环境的栈顶弹出，最终执行上下文如下图所示：\"]},\"123\":{\"h\":\"作用域链和闭包\",\"t\":[\"function bar() { console.log(myName) } function foo() { var myName = \\\" 极客邦 \\\" bar() } var myName = \\\" 极客时间 \\\" foo()\"]},\"124\":{\"h\":\"作用域链\",\"t\":[\"每个执行上下文的变量环境中，都包含了一个外部引用，用来指向外部的执行上下文\"]},\"125\":{\"h\":\"词法作用域\",\"t\":[\"词法作用域就是指作用域是由代码中函数声明的位置来决定的，所以词法作用域是静态的作用域，通过它就能够预测代码在执行过程中如何查找标识符\"]},\"126\":{\"h\":\"变量查找\",\"t\":[\"function bar() { var myName = \\\" 极客世界 \\\" let test1 = 100 if (1) { let myName = \\\"Chrome 浏览器 \\\" console.log(test) } } function foo() { var myName = \\\" 极客邦 \\\" let test = 2 { let test = 3 bar() } } var myName = \\\" 极客时间 \\\" let myAge = 10 let test = 1 foo()\"]},\"127\":{\"h\":\"闭包\",\"t\":[\"function foo() { var myName = \\\" 极客时间 \\\" let test1 = 1 const test2 = 2 var innerBar = { getName:function(){ console.log(test1) return myName }, setName:function(newName){ myName = newName } } return innerBar } var bar = foo() bar.setName(\\\" 极客邦 \\\") bar.getName() console.log(bar.getName())\"]},\"128\":{\"h\":\"闭包回收\",\"t\":[\"如果引用闭包的函数是一个全局变量，那么闭包会一直存在直到页面关闭；但如果这个闭包以后不再使用的话，就会造成内存泄漏。\",\"引用闭包的函数是个局部变量，等函数销毁后，在下次 JavaScript 引擎执行垃圾回收时，判断闭包这块内容如果已经不再被使用了，那么 JavaScript 引擎的垃圾回收器就会回收这块内存。\"]},\"129\":{\"h\":\"this\",\"t\":[\"当函数作为对象的方法调用时，函数中的 this 就是该对象； 当函数被正常调用时，在严格模式下，this 值是 undefined，非严格模式下 this 指向的是全局对象 window； 嵌套函数中的 this 不会继承外层函数的 this 值。\",\"this 是和执行上下文绑定的 \"]},\"130\":{\"h\":\"浏览器的页面\"},\"131\":{\"h\":\"Chrome开发者工具\"},\"132\":{\"h\":\"网络面板\"},\"133\":{\"h\":\"DOM树\",\"t\":[\"从网络传给渲染引擎的 HTML 文件字节流是无法直接被渲染引擎理解的，所以要将其转化为渲染引擎能够理解的内部结构，这个结构就是 DOM。\",\"从页面的视角来看，DOM 是生成页面的基础数据结构。\",\"从 JavaScript 脚本视角来看，DOM 提供给 JavaScript 脚本操作的接口，通过这套接口，JavaScript 可以对 DOM 结构进行访问，从而改变文档的结构、样式和内容。\",\"从安全视角来看，DOM 是一道安全防护线，一些不安全的内容在 DOM 解析阶段就被拒之门外了。\"]},\"134\":{\"h\":\"DOM树的生成\",\"t\":[\"在渲染引擎内部，有一个叫HTML 解析器（HTMLParser）的模块，它的职责就是负责将 HTML 字节流转换为 DOM 结构。\",\"HTML 解析器并不是等整个文档加载完成之后再解析的，而是网络进程加载了多少数据，HTML 解析器便解析多少数据。\",\"网络进程接收到响应头之后，会根据响应头中的 content-type 字段来判断文件的类型，比如 content-type 的值是“text/html”，那么浏览器就会判断这是一个 HTML 类型的文件，然后为该请求选择或者创建一个渲染进程。渲染进程准备好之后，网络进程和渲染进程之间会建立一个共享数据的管道，网络进程接收到数据后就往这个管道里面放，而渲染进程则从管道的另外一端不断地读取数据，并同时将读取的数据“喂”给 HTML 解析器。你可以把这个管道想象成一个“水管”，网络进程接收到的字节流像水一样倒进这个“水管”，而“水管”的另外一端是渲染进程的 HTML 解析器，它会动态接收字节流，并将其解析为 DOM。\",\"第一个阶段，通过分词器将字节流转换为 Token。\"]},\"135\":{\"h\":\"动画\"},\"136\":{\"h\":\"Animation\"},\"137\":{\"h\":\"transition\"},\"138\":{\"h\":\"BEM规范\",\"t\":[\"仅从名字就能知道一个 CSS 选择器具体做什么\",\"从名字能大致清楚一个选择器可以在哪里使用\",\"从 CSS 类的名称可以看出它们之间的联系\"]},\"139\":{\"h\":\"\",\"t\":[\"在实际中，这里『区块』可以表示一个网站导航、页眉、页脚或者其他一些设计区块。\",\"Encapsulates a standalone entity that is meaningful on its own. While blocks can be nested and interact with each other, semantically they remain equal; there is no precedence or hierarchy. Holistic entities without DOM representation (such as controllers or models) can be blocks as well.\",\"Naming\",\"Block names may consist of Latin letters, digits, and dashes. To form a CSS class, add a short prefix for namespacing: .block\",\"html\",\"Any DOM node can be a block if it accepts a class name.\",\" <div class=\\\"block\\\">...</div>\",\"css\",\"Use class name selector only\",\"No tag name or ids\",\"No dependency on other blocks/elements on a page\",\" .block { color: #042; }\"]},\"140\":{\"h\":\"\",\"t\":[\"Parts of a block and have no standalone meaning. Any element is semantically tied to its block.\",\"Naming\",\"Element names may consist of Latin letters, digits, dashes and underscores. CSS class is formed as block name plus two underscores plus element name: .block__elem\",\"HTML\",\"Any DOM node within a block can be an element. Within a given block, all elements are semantically equal.\",\" <div class=\\\"block\\\"> ... <span class=\\\"block__elem\\\"></span> </div>\",\"CSS\",\"Use class name selector only\",\"No tag name or ids\",\"No dependency on other blocks/elements on a page\",\"Good\",\" .block__elem { color: #042; }\",\"Bad\",\" .block .block__elem { color: #042; } div.block__elem { color: #042; }\"]},\"141\":{\"h\":\"\",\"t\":[\"Flags on blocks or elements. Use them to change appearance, behavior or state.\",\"Naming\",\"Modifier names may consist of Latin letters, digits, dashes and underscores. CSS class is formed as block’s or element’s name plus two dashes: .block--mod or .block__elem--mod and .block--color-black with .block--color-red. Spaces in complicated modifiers are replaced by dash.\",\"HTML\",\"Modifier is an extra class name which you add to a block/element DOM node. Add modifier classes only to blocks/elements they modify, and keep the original class:\",\"Good\",\" <div class=\\\"block block--mod\\\">...</div> <div class=\\\"block block--size-big block--shadow-yes\\\">...</div>\",\"Bad\",\" <div class=\\\"block--mod\\\">...</div>\",\"CSS\",\"Use modifier class name as selector:\",\" .block--hidden { }\",\"To alter elements based on a block-level modifier:\",\" .block--mod .block__elem { }\",\"Element modifier:\",\" .block__elem--mod { }\",\"Example\",\"Suppose you have block form with modifiers theme: \\\"xmas\\\" and simple: true and with elements input and submit, and element submit with its own modifier disabled: true for not submitting form while it is not filled:\",\"HTML\",\"/səbˈmɪt/\",\" <form class=\\\"form form--theme-xmas form--simple\\\"> <input class=\\\"form__input\\\" type=\\\"text\\\" /> <input class=\\\"form__submit form__submit--disabled\\\" type=\\\"submit\\\" /> </form>\",\"CSS\",\".form { } .form--theme-xmas { } .form--simple { } .form__input { } .form__submit { } .form__submit--disabled { }\"]},\"142\":{\"c\":[\"CSS\"]},\"143\":{\"h\":\"清楚浮动原理\"},\"144\":{\"h\":\"BFC 清除浮动\",\"t\":[\".parent { overflow: hidden; /* 开启BFC */ }\"]},\"145\":{\"h\":\"clear 清除浮动\",\"t\":[\"原理：利用clear属性 将伪元素挤下来\",\".clear-fix { //在旧的web时代。*zoom: 1可以给IE6/IE7浏览器增加haslayout, 用来清除浮动 zoom: 1; } /* 在父元素上创建伪元素 */ .clear-fix::after { content: \\\"\\\"; /* 设置元素类型为块 占据一行 */ display: block; /* both 两边不能有浮动元素 将伪元素 挤下去 撑开父元素 = 父元素有高度 */ clear: both; }\"]},\"146\":{\"h\":\"zoom\",\"t\":[\"百分比值：zoom:50%，表示缩小到原来的一半。\",\"数值：zoom:0.5，表示缩小到原来的一半。\",\"normal关键字：zoom:normal等同于zoom:1.\"]},\"147\":{\"h\":\"zoom和scale\",\"t\":[\"浏览器兼容性。IE全族/Chrome/Safari和IE9+现代浏览器的差别。\",\"控制缩放的值不一样。zoom更全面，但是不能是负数，只能等比例控制；而scale虽然只能是数值，但是能负数，可以只控制1个维度。\"]},\"148\":{\"c\":[\"CSS\"]},\"149\":{\"h\":\"CSS颜色体系\",\"t\":[\"flowchart TB CSS颜色体系-->色彩关键字 CSS颜色体系-->透明 CSS颜色体系-->原始color值 CSS颜色体系-->rgb和rgba CSS颜色体系-->hsl和hsla\"]},\"150\":{\"h\":\"色彩关键字\"},\"151\":{\"h\":\"transparent\",\"t\":[\"transparent 的字面意思就是透明 类似rgba(0,0,0,0)\"]},\"152\":{\"h\":\"currentColor\",\"t\":[\"表示当前颜色\",\"元素继承的值\",\"元素的文本内容\",\"文本的轮廓\",\"元素的边框\",\"元素的盒阴影\",\"filter:drop-shadow()\",\"<img> 的 alt 文本。也就是，当无法显示图像时，代替图像出现的文本，会继承这个颜色值。\",\"列表项的小黑点和边框\",\"一些浏览器（比如 Chrome）水平线（ <hr>）的边框颜色。（没有边框的话，颜色就不会受影响）。\"]},\"153\":{\"h\":\"rgb()和 rgba()\",\"t\":[\"rgb() 表示颜色的红-绿-蓝（red-green-blue (RGB)）模式 rgba() 多一个 a ，表示其透明度，取值为 0-1\"]},\"154\":{\"h\":\"hsl()和 hsla()\",\"t\":[\"hsl()被定义为色相-饱和度-明度（Hue-saturation-lightness）\",\"hsla() 多一个 a ，表示其透明度，取值为 0-1\",\"色相（H）是色彩的基本属性，就是平常所说的颜色名称，如红色、黄色等。\",\"饱和度（S）是指色彩的纯度，越高色彩越纯，低则逐渐变灰，取 0-100%的数值。\",\"明度（V），亮度（L），取 0-100%。\"]},\"155\":{\"c\":[\"CSS\"]},\"156\":{\"h\":\"CSS中的数据类型\"},\"157\":{\"h\":\"文本类型\",\"t\":[\"<custom-ident>\",\"作为 <ident> 预定义的关键字\",\"<string>\",\"<url>\"]},\"158\":{\"h\":\"custom-ident\",\"t\":[\"用户自定义字符串标识符\",\"<custom-ident> 语法同 CSS 属性名相似，但它是区分大小写的。可以由以下字符组成：\",\"字母 (A - Z, a - z),\",\"十进制数 (0 - 9),\",\"连字符 (``),\",\"下划线 (_),\",\"转义字符 ( \\\\),\",\"Unicode 编码（格式：转义字符（\\\\）后跟 1 到 6 位十六进制数）\",\"/* validIdent*/ @keyframe validIdent { /* keyframes go here */ } @keyframe 'validString' { /* keyframes go here */ } .item { /*content*/ grid-area: content; }\"]},\"159\":{\"h\":\"预定义的关键值\",\"t\":[\"预定义的关键值是由 CSS 标准为属性定义的文本值\",\".box { /*left*/ float: left; }\"]},\"160\":{\"h\":\"\",\"t\":[\".item::after { content: \\\"This is my content.\\\"; }\"]},\"161\":{\"h\":\"\",\"t\":[\".box { background-image: url(\\\"images/my-background.png\\\"); }\"]},\"162\":{\"h\":\"数值数据类型\",\"t\":[\"<integer>\",\"<number>\",\"<dimension>\",\"<percentage>\"]},\"163\":{\"h\":\"integer\",\"t\":[\"一个整数包含 0 到 9 的一个或多个十进制数字，例如 1024 或 -55。一个整数可能额外包含 + 或 - 前缀，在正负号和数值之间没有任何空格。\"]},\"164\":{\"h\":\"number\",\"t\":[\"表示一个真正的数，有可能又或者没有小数点和小数部分。例如 0.255，128 或 -1.2。数值也可能包含前缀 + 或 - 标识正负。\"]},\"165\":{\"h\":\"dimension\",\"t\":[\"是一个包含单位的 number，例如 45deg，100ms，或者 10px。\"]},\"166\":{\"h\":\"percentage\",\"t\":[\"百分比\",\".box { width: 50%; }\"]},\"167\":{\"c\":[\"CSS\"]},\"168\":{\"h\":\"固定宽高比\"},\"169\":{\"h\":\"可替换元素实现固定宽高比\",\"t\":[\"可替换元素(如<img>、<video>)和其他元素不同，它们本身有像素宽度和高度的概念\",\"指定其宽度或者高度值，另一边自动计算就可以\"]},\"170\":{\"h\":\"padding-bottom 实现\",\"t\":[\"垂直方向上的内外边距使用百分比做单位时，是基于包含块的宽度来计算的。\",\"4/3 的固定宽高比的空盒子\"]},\"171\":{\"h\":\"aspect-ratio 属性实现\",\"t\":[\"16/9 的固定宽高比的空盒子\"]},\"172\":{\"c\":[\"CSS\"]},\"173\":{\"h\":\"格式化上下文\",\"t\":[\"格式化上下文（Formatting Context）是 CSS2.1 规范中的一个概念，大概说的是页面中的一块渲染区域，规定了渲染区域内部的子元素是如何排版以及相互作用的\"]},\"174\":{\"h\":\"BFC\",\"t\":[\"块格式化上下文，它是一个独立的渲染区域，只有块级盒子参与，它规定了内部的块级盒子如何布局，并且与这个区域外部毫不相干。\",\"内部的盒子会在垂直方向，一个接一个地放置；\",\"盒子垂直方向的距离由 margin 决定，属于同一个 BFC 的两个相邻盒子的 margin 会发生重叠；\",\"每个元素的 margin 的左边，与包含块 border 的左边相接触(对于从左往右的格式化，否则相反)，即使存在浮动也是如此；\",\"BFC 的区域不会与 float 盒子重叠；\",\"BFC 就是页面上的一个隔离的独立容器，容器里面的子元素不会影响到外面的元素。反之也如此。\",\"计算 BFC 的高度时，浮动元素也参与计算。\",\"创建 BFC\",\"根元素：html\",\"非溢出的可见元素：overflow 不为 visible\",\"设置浮动：float 属性不为 none\",\"设置定位：position 为 absolute 或 fixed\",\"定义成块级的非块级元素：display: inline-block/table-cell/table-caption/flex/inline-flex/grid/inline-grid\",\" display:block \",\" display:block \",\" display:block \",\" display:block \",\" display:block \",\" float \",\"应用场景\",\"1、 自适应两栏布局\",\"应用原理：BFC 的区域不会和浮动区域重叠，所以就可以把侧边栏固定宽度且左浮动，而对右侧内容触发 BFC，使得它的宽度自适应该行剩余宽度。\",\"2、清除内部浮动\",\"浮动造成的问题就是父元素高度坍塌，所以清除浮动需要解决的问题就是让父元素的高度恢复正常。而用 BFC 清除浮动的原理就是：计算 BFC 的高度时，浮动元素也参与计算。只要触发父元素的 BFC 即可。\",\"3、 防止垂直 margin 合并\",\"BFC 渲染原理之一：同一个 BFC 下的垂直 margin 会发生合并。所以如果让 2 个元素不在同一个 BFC 中即可阻止垂直 margin 合并。那如何让 2 个相邻的兄弟元素不在同一个 BFC 中呢？可以给其中一个元素外面包裹一层，然后触发其包裹层的 BFC，这样一来 2 个元素就不会在同一个 BFC 中了。\"]},\"175\":{\"h\":\"IFC\",\"t\":[\"IFC 的形成条件非常简单，块级元素中仅包含内联级别元素，需要注意的是当 IFC 中有块级元素插入时，会产生两个匿名块将父元素分割开来，产生两个 IFC。\",\"子元素在水平方向上一个接一个排列，在垂直方向上将以容器顶部开始向下排列；\",\"节点无法声明宽高，其中 margin 和 padding 在水平方向有效在垂直方向无效；\",\"节点在垂直方向上以不同形式对齐；\",\"能把在一行上的框都完全包含进去的一个矩形区域，被称为该行的线盒（line box）。线盒的宽度是由包含块（containing box）和与其中的浮动来决定；\",\"IFC 中的 line box 一般左右边贴紧其包含块，但 float 元素会优先排列。\",\"IFC 中的 line box 高度由 line-height 计算规则来确定，同个 IFC 下的多个 line box 高度可能会不同；\",\"当内联级盒子的总宽度少于包含它们的 line box 时，其水平渲染规则由 text-align 属性值来决定；\",\"当一个内联盒子超过父元素的宽度时，它会被分割成多盒子，这些盒子分布在多个 line box 中。如果子元素未设置强制换行的情况下，inline box 将不可被分割，将会溢出父元素\",\" display:incline \",\" display:incline \",\" display:incline \",\" display:incline \",\" display:incline \",\" display:incline \",\" float \",\"应用场景\",\"水平居中：当一个块要在环境中水平居中时，设置其为 inline-block 则会在外层产生 IFC，通过 text-align 则可以使其水平居中。\",\"垂直居中：创建一个 IFC，用其中一个元素撑开父元素的高度，然后设置其 vertical-align: middle，其他行内元素则可以在此父元素下垂直居中。\"]},\"176\":{\"h\":\"FFC\",\"t\":[\"FFC(Flex Formatting Contexts)直译为\\\"自适应格式化上下文\\\"，display值为flex或者inline-flex的元素将会生成自适应容器（flex container）。\",\"Flex Box 由伸缩容器和伸缩项目组成。通过设置元素的 display 属性为 flex 或 inline-flex 可以得到一个伸缩容器。设置为 flex 的容器被渲染为一个块级元素，而设置为 inline-flex 的容器则渲染为一个行内元素。\"]},\"177\":{\"h\":\"GFC\",\"t\":[\"GFC(GridLayout Formatting Contexts)直译为\\\"网格布局格式化上下文\\\"，当为一个元素设置display值为grid的时候，此元素将会获得一个独立的渲染区域，我们可以通过在网格容器（grid container）上定义网格定义行（grid definition rows）和网格定义列（grid definition columns）属性各在网格项目（grid item）上定义网格行（grid row）和网格列（grid columns）为每一个网格项目（grid item）定义位置和空间。\",\"GFC将改变传统的布局模式，他将让布局从一维布局变成了二维布局。简单的说，有了GFC之后，布局不再局限于单个维度了。这个时候你要实现类似九宫格，拼图之类的布局效果显得格外的容易。\"]},\"178\":{\"c\":[\"CSS\"]},\"179\":{\"h\":\"响应式与自适应布局\"},\"180\":{\"h\":\"响应式布局\",\"t\":[\"一套布局，自动适配不同屏幕。 em、vh/vw、%\"]},\"181\":{\"h\":\"自适应布局\",\"t\":[\"根据不同设备或屏幕大小，定义不同的布局。\",\"@media、rem\"]},\"182\":{\"c\":[\"CSS\"]},\"183\":{\"h\":\"视觉格式化模型\",\"t\":[\"CSS 视觉格式化模型（visual formatting model）是用来处理和在视觉媒体上显示文档时使用的计算规则。该模型是 CSS 的基础概念之一。\",\"盒子类型由 display 决定，同时给一个元素设置 display 后，将会决定这个盒子的 2 个显示类型（display type）：\",\"outer display type（对外显示）：决定了该元素本身是如何布局的，即参与何种格式化上下文；\",\"inner display type（对内显示）：其实就相当于把该元素当成了容器，规定了其内部子元素是如何布局的，参与何种格式化上下文；\"]},\"184\":{\"h\":\"outer display type\",\"t\":[\"对外显示方面，盒子类型可以分成 2 类：\",\"block-level box（块级盒子） 和 inline-level box（行内级盒子）\",\"块级盒子：display 为 block、list-item、table、flex、grid、flow-root 等；\",\"行内级盒子：display 为 inline、inline-block、inline-table 等；\",\"所有块级盒子都会参与 BFC，呈现垂直排列；而所有行内级盒子都参会 IFC，呈现水平排列\"]},\"185\":{\"h\":\"块级元素\",\"t\":[\"address联系方式信息。article 文章内容。aside 伴随内容。blockquote块引用。dd定义列表中定义条目描述。div文档分区。dl定义列表。fieldset表单元素分组。figcaption 图文信息组标题figure 图文信息组 (参照 figcaption)。footer 区段尾或页尾。form表单。h1, h2, h3, h4, h5, h6标题级别 1-6.header 区段头或页头。hgroup 标题组。hr水平分割线。ol有序列表。p行。pre预格式化文本。section 一个页面区段。table表格。ul\",\"无序列表。\"]},\"186\":{\"h\":\"行内元素\",\"t\":[\"b, big, i, small, tt\",\"abbr, acronym, cite, code, dfn, em, kbd, strong, samp, var\",\"a, bdo, br, img, map, object, q, script, span, sub, sup\",\"button, input, label, select, textarea\"]},\"187\":{\"h\":\"inner display type\",\"t\":[\"对内方面，其实就是把元素当成了容器，里面包裹着文本或者其他子元素。container box 的类型依据 display 的值不同，分为 4 种：\",\"block container：建立 BFC 或者 IFC；\",\"flex container：建立 FFC；\",\"grid container：建立 GFC;\",\"ruby container：接触不多，不做介绍。\",\"值得一提的是如果把 img 这种替换元素（replaced element）申明为 block 是不会产生 container box 的，因为替换元素比如 img 设计的初衷就仅仅是通过 src 把内容替换成图片，完全没考虑过会把它当成容器。\"]},\"188\":{\"c\":[\"CSS\"]},\"189\":{\"h\":\"GLSL中的函数\",\"t\":[\"部分参考： 《OpenGL 编程指南》、《The Book of Shader》\"]},\"190\":{\"h\":\"造型函数\",\"t\":[\"// 指定GLSL版本和浮点数精度 #ifdef GL_ES precision mediump float; #endif // 声明需要用到的uniform数据，分别是画布大小和鼠标位置和时间 uniform vec2 u_resolution; uniform vec2 u_mouse; uniform float u_time; // Plot a line on Y using a value between 0.0-1.0 // 定义一个绘制Y轴上线条的函数，接受一个vec2类型的参数st，可以表示屏幕上的任意位置 float plot(vec2 st) { // 使用smoothstep函数定义线条形状，参数分别为线条宽度（0.0-1.0）、起点、终点 // smoothstep函数会将参数在起点和终点之间线性插值，返回一个0.0-1.0之间的值，用于表示线条的明暗程度 return smoothstep(0.02, 0.0, abs(st.y - st.x)); } /* plot 函数返回一个介于 0 到 1 之间的值 pct，表示当前像素在曲线上的位置占总曲线长度的比例。为了让这条曲线具有动态效果，我们需要将原本的灰色线条逐步变成绿色。 这时候，这行代码起到的作用就是根据 pct 来控制从灰色逐渐过渡到绿色的过程。 首先，(1.0-pct)*color 表示计算出当前像素的颜色混合值， 其中 (1.0-pct) 表示一个从 1 到 0 的过渡值， 表示当前像素离曲线终点越来越近，因此越来越接近绿色； 而 color 表示原本的灰色线条的颜色混合值。 同时，pct*vec3(0.0,1.0,0.0) 表示一个绿色条条的混合值， 其中 pct 表示从 0 到 1 的过渡值，表示当前像素离曲线起点越来越近， 因此越来越应该有绿色条条的颜色混合； 而 vec3(0.0,1.0,0.0) 表示绿色条条的 RGB 值。 通过这两个混合值的相加，就得到了逐步从灰色到绿色的颜色过渡效果。 具体而言，当 pct 为 0 时，(1.0-pct)*color 计算出的混合值是灰色线条的颜色混合值； 当 pct 为 1 时，pct*vec3(0.0,1.0,0.0) 计算出的混合值是绿色条条的颜色混合值； 而在中间的过程中，灰色的混合值和绿色的混合值按比例相加，得到的颜色就逐步过渡从灰色到绿色。 */ void main() { // 获取当前像素在屏幕中的位置，将其转换为归一化的坐标系（0.0-1.0之间） vec2 st = gl_FragCoord.xy/u_resolution; // 将当前位置的x坐标作为y值 float y = st.x; // 设置颜色为y对应的灰色 vec3 color = vec3(y); // 使用plot函数绘制一条线条 // 将plot函数的返回值作为透明度，使线条逐渐出现 float pct = plot(st); color = (1.0-pct)*color+pct*vec3(0.0,1.0,0.0); // 输出颜色 gl_FragColor = vec4(color,1.0); }\",\"// Author: Inigo Quiles // Title: Expo // 精度修饰符 #ifdef GL_ES precision mediump float; #endif // 定义常量PI #define PI 3.14159265359 // 顶点着色器传入的变量 uniform vec2 u_resolution; // 屏幕分辨率 uniform vec2 u_mouse; // 鼠标位置 uniform float u_time; // 时间戳 // 定义一个用于绘制曲线的函数 float plot(vec2 st, float pct){ return smoothstep( pct-0.02, pct, st.y) - smoothstep( pct, pct+0.02, st.y); // smoothstep函数是一个常用的插值函数，用于进行平滑过渡， //具体实现可见链接：http://lolengine.net/blog/2015/03/14/better-function-for-linearly-interpolating-between-two-values } // 主函数 void main() { vec2 st = gl_FragCoord.xy/u_resolution; // 获取片元坐标，转化为0~1范围内的值 float y = pow(st.x,5.0); // 计算x的5次方 vec3 color = vec3(y); // 用y的值作为RGB颜色通道，生成一个颜色向量 float pct = plot(st,y); // 计算st点在曲线上的位置 // 根据st点在曲线上的位置来改变渲染颜色 color = (1.0-pct)*color+pct*vec3(0.0,1.0,0.0); gl_FragColor = vec4(color,1.0); // 把颜色向量转化为，最终的片元颜色 }\",\"#ifdef GL_ES precision mediump float; #endif #define PI 3.14159265359 uniform vec2 u_resolution; uniform float u_time; /* smoothstep(edge0, edge1, x) 函数的作用是在 edge0 和 edge1 之间， 按照第二个自变量 x 的值进行插值计算，返回一个0到1之间的值。 当 x 小于等于 edge0 时，返回0.0，当 x 大于等于 edge1 时，返回1.0。 st = gl_FragCoord.xy pct = step(0.5,st.x) */ float plot(vec2 st, float pct){ return smoothstep( pct-0.02, pct, st.y) - smoothstep( pct, pct+0.02, st.y); } void main() { vec2 st = gl_FragCoord.xy/u_resolution; /* edge 的值被设为0.5，而 x 的值是当前像素点的横坐标 st.x 。 由于 x 只有大于0.5时，step函数才会返回1.0， 所以，当 st.x 大于0.5时， y 的值为1.0，也就是白色， 反之则是0.0，也就是黑色。 */ float y = step(0.5,st.x); vec3 color = vec3(y); /* ct=0时的颜色值为color； pct * vec3(0.0, 1.0, 0.0) 表示当前像素在曲线上的位置是绿色区域时，即pct=1时颜色值为绿色， */ float pct = plot(st,y); color = (1.0-pct)*color+pct*vec3(0.0,1.0,0.0); gl_FragColor = vec4(color,1.0); }\"]},\"191\":{\"h\":\"smoothstep\",\"t\":[\"/* 当x等于t1时，结果值为0； 当x等于t2时，结果值为1 */ float smoothstep(float t1, float t2, float x) { // Scale, bias and saturate x to 0..1 range x = clamp((x - t1) / (t2 - t1), 0.0, 1.0); // Evaluate polynomial return x * x * (3 - 2 * x); }\"]},\"192\":{\"h\":\"clamp\",\"t\":[\"是一个用于将值限制在指定范围内的 GLSL 函数。\",\"这个函数接收三个参数：x 表示要限制的值，minVal 表示值允许的最小值，maxVal 表示值允许的最大值。函数的具体作用是：\",\"如果 x 小于最小值，则返回最小值 minVal。\",\"如果 x 大于最大值，则返回最大值 maxVal。\",\"float clamp(float x, float minVal, float maxVal) { return min(max(x, minVal), maxVal); }\"]},\"193\":{\"h\":\"控制函数\",\"t\":[\"布尔类型 bool\",\"描述：只有两个可能取值 true/false 的类型。\",\"示例：\",\"/* 声明一个布尔类型变量。*/ bool b = true;\",\"浮点数类型 float\",\"描述：浮点数类型变量，用于存储实数。\",\"示例：\",\"/* 声明一个浮点数类型变量。*/ float f = 1.0;\",\"整数类型 int\",\"描述：用于表示整数类型的变量。\",\"示例：\",\"/* 声明一个整数类型变量。*/ int i = 1;\",\"无符号整数类型 uint\",\"描述：只有正整数的整数类型。\",\"示例：\",\"/* 声明一个无符号整数类型的变量。*/ uint u = 1u;\",\"双精度浮点数类型 double\",\"描述：用于存储双精度浮点数的类型变量。\",\"示例：\",\"/* 声明一个双精度浮点数类型变量。*/ double d = 1.0;\",\"布尔向量类型 bvec2, bvec3, bvec4\",\"描述：由布尔类型组成的矢量类型。\",\"示例：\",\"/* 声明一个长度为2的布尔向量类型变量。*/ bvec2 b = bvec2(true, false);\",\"整数向量类型 ivec2, ivec3, ivec4\",\"描述：由整数类型组成的矢量类型。\",\"示例：\",\"/* 声明一个长度为2的整数向量类型变量。*/ ivec2 i = ivec2(1, 2);\",\"无符号整数向量类型 uvec2, uvec3, uvec4\",\"描述：由无符号整数类型组成的矢量类型。\",\"示例：\",\"/* 声明一个长度为2的无符号整数向量类型变量。*/ uvec2 u = uvec2(1u, 2u);\",\"浮点数向量类型 vec2, vec3, vec4\",\"描述：由浮点数类型组成的矢量类型。\",\"示例：\",\"/* 声明一个长度为2的浮点数向量类型变量。*/ vec2 v = vec2(1.0, 2.0);\",\"2x2、3x3、4x4 矩阵类型 mat2, mat3, mat4\",\"描述：由浮点数类型组成的矩阵类型，可用于表示变换矩阵。\",\"示例：\",\"/* 声明一个2x2矩阵类型变量。*/ mat2 M = mat2(1.0, 2.0, 3.0, 4.0);\",\"2x3、2x4、3x2、3x4、4x2、4x3 矩阵类型 mat2x3, mat2x4, mat3x2, mat3x4, mat4x2, mat4x3\",\"描述：由浮点数类型组成的矩阵类型，可用于表示变换矩阵。\",\"示例：\",\"/* 声明一个2x3矩阵类型变量。*/ mat2x3 M = mat2x3(1.0, 2.0, 3.0, 4.0, 5.0, 6.0);\"]},\"194\":{\"h\":\"函数可视化\"},\"195\":{\"h\":\"数学函数\",\"t\":[\"abs\",\"使用格式：abs(x)\",\"功能：计算参数 x 的绝对值。\",\"参数说明：x 可以是标量或矢量。\",\"示例：\",\"/* 计算标量的绝对值。 */ float a = 3.14159; float absA = abs(a); /* 计算矢量的绝对值。 */ vec3 v = vec3(-1.0, 2.0, -3.0); vec3 absV = abs(v);\",\"sign\",\"使用格式：sign(x)\",\"功能：返回参数 x 的符号，如果 x 是正数则返回 1.0，如果 x 是负数则返回 -1.0，如果 x 是零则返回 0.0。\",\"参数说明：x 可以是标量或矢量。\",\"示例：\",\"/* 计算标量的符号。 */ float a = -8.6; float sgnA = sign(a); /* 计算矢量的符号。 */ vec4 v = vec4(1.5, -2.7, 0.0, 12.6); vec4 sgnV = sign(v);\",\"floor\",\"使用格式：floor(x)\",\"功能：返回比参数 x 小的最大整数。如果 x 为正数，则返回小于或等于 x 的最大整数；如果 x 为负数，则返回小于 x 的最大整数。\",\"参数说明：x 可以是标量或矢量。\",\"示例：\",\"/* 计算标量的下舍整数。 */ float a = 3.8; float floorA = floor(a); /* 计算矢量的下舍整数。 */ vec3 v = vec3(-1.2, 2.7, 3.9); vec3 floorV = floor(v);\",\"trunc\",\"使用格式：trunc(x)\",\"功能：返回与参数 x 相等或比它小的最大整数。如果 x 为正数，则返回小于或等于 x 的最大整数；如果 x 为负数，则返回大于或等于 x 的最大整数。\",\"参数说明：x 可以是标量或矢量。\",\"示例：\",\"/* 计算标量的截断整数。 */ float a = -2.7; float truncA = trunc(a); /* 计算矢量的截断整数。 */ vec3 v = vec3(-1.2, 2.7, 3.9); vec3 truncV = trunc(v);\",\"round\",\"使用格式：round(x)\",\"功能：将参数 x 四舍五入到最接近的整数。\",\"参数说明：x 可以是标量或矢量。\",\"示例：\",\"/* 四舍五入标量到最接近的整数。 */ float a = 3.8; float roundA = round(a); /* 四舍五入矢量到最接近的整数。 */ vec3 v = vec3(-1.2, 2.7, 3.9); vec3 roundV = round(v);\",\"roundEven\",\"使用格式：roundEven(x)\",\"功能：将参数 x 四舍五入到最接近的偶数。\",\"参数说明：x 可以是标量或矢量。\",\"示例：\",\"/* 四舍五入标量到最接近的偶数。 */ float a = 3.5; float roundEvenA = roundEven(a); /* 四舍五入矢量到最接近的偶数。 */ vec3 v = vec3(-1.2, 2.5, 3.9); vec3 roundEvenV = roundEven(v);\",\"ceil\",\"使用格式：ceil(x)\",\"功能：返回比参数 x 大的最小整数，即返回大于或等于 x 的最小整数。\",\"参数说明：x 可以是标量或矢量。\",\"示例：\",\"/* 计算标量的上舍整数。 */ float a = -1.8; float ceilA = ceil(a); /* 计算矢量的上舍整数。 */ vec3 v = vec3(-1.2, 2.7, 3.9); vec3 ceilV = ceil(v);\",\"fract\",\"使用格式：fract(x)\",\"功能：返回参数 x 的小数部分，即返回 x - floor(x)。\",\"参数说明：x 可以是标量或矢量。\",\"示例：\",\"/* 计算标量的小数部分。 */ float a = 3.8; float fractA = fract(a); /* 计算矢量的小数部分。 */ vec3 v = vec3(-1.2, 2.7, 3.9); vec3 fractV = fract(v);\",\"mod\",\"使用格式：mod(x, y)\",\"功能：计算 x 除以 y 的余数。返回值的符号与 y 相同。\",\"参数说明：x、y 可以是标量或矢量，但它们必须是同维度的。\",\"示例：\",\"/* 计算标量的余数。 */ float a = -11.3; float b = 3.0; float modAB = mod(a, b); /* 计算矢量的余数。 */ vec4 v1 = vec4(-5.8, 7.6, -9.9, 12.3); vec4 v2 = vec4(2.0, 3.0, -2.2, 10.0); vec4 modV = mod(v1, v2);\",\"modf\",\"使用格式：modf(x, ip)\",\"功能：返回 x 的小数部分和整数部分。将整数部分存储在 ip 中，返回值为 x 的小数部分。\",\"参数说明：\",\"x：任意类型的数值。\",\"ip：与 x 相同类型的变量，用于存储 x 的整数部分。\",\"示例：\",\"/* 使用 modf 函数将一个浮点数分解为整数部分和小数部分。 */ float num = 3.14159; float ipart; float fpart = modf(num, ipart); /* ipart 等于 3，fpart 等于 0.14159 */\",\"min\",\"使用格式：min(x, y) 或 min(x, y, z) 或 min(v1, v2)（其中 v1 和 v2 为向量类型，且长度相同）\",\"功能：返回 x 和 y 中的最小值，或返回 x、y、z 中的最小值，或返回向量 v1 和 v2 中每个对应位置的最小值。\",\"参数说明：\",\"x：任意类型的数值。\",\"y：任意类型的数值，或 z（如果使用三个参数的形式）。\",\"z：任意类型的数值（如果使用三个参数的形式）。\",\"v1：与 v2 相同长度的向量。\",\"v2：与 v1 相同长度的向量。\",\"示例：\",\"/* 使用 min 函数比较两个数的大小。 */ float num1 = 10.0; float num2 = 20.0; float minValue = min(num1, num2); if (minValue == num1) { /* num1 是最小值 */ } else { /* num2 是最小值 */ }\",\"max\",\"使用格式：max(x, y) 或 max(x, y, z) 或 max(v1, v2)（其中 v1 和 v2 为向量类型，且长度相同）\",\"功能：返回 x 和 y 中的最大值，或返回 x、y、z 中的最大值，或返回向量 v1 和 v2 中每个对应位置的最大值。\",\"参数说明：\",\"x：任意类型的数值。\",\"y：任意类型的数值，或 z（如果使用三个参数的形式）。\",\"z：任意类型的数值（如果使用三个参数的形式）。\",\"v1：与 v2 相同长度的向量。\",\"v2：与 v1 相同长度的向量。\",\"示例：\",\"/* 使用 max 函数比较两个数的大小。 */ float num1 = 10.0; float num2 = 20.0; float maxValue = max(num1, num2); if (maxValue == num1) { /* num1 是最大值 */ } else { /* num2 是最大值 */ }\",\"clamp\",\"使用格式：clamp(x, minVal, maxVal) 或 clamp(v, minVal, maxVal)（其中 v 为向量类型）\",\"功能：对 x 进行范围约束，返回在最小值 minVal 和最大值 maxVal 之间的值。对于向量 v，与 x 的处理方式相同。\",\"参数说明：\",\"x：任意类型的数值。\",\"v：任意长度的向量。\",\"minVal：任意类型的数值，表示下限。\",\"maxVal：任意类型的数值，表示上限。\",\"示例：\",\"/* 使用 clamp 函数限制一个角度在 0 到 360 度之间。 */ float angle = 420.0; angle = clamp(angle, 0.0, 360.0); /* angle 被约束在 0 到 360 度之间 */\",\"mix\",\"使用格式：mix(x, y, a)\",\"功能：对 x 和 y 进行线性插值，系数为 a。若 a = 0，则结果为 x；若 a = 1，则结果为 y；若 a = 0.5，则结果为 x 和 y 的平均值。\",\"参数说明：\",\"x：类型和长度与 y 相同的矢量或标量。\",\"y：类型和长度与 x 相同的矢量或标量。\",\"a：类型和长度与 x 和 y 相同的矢量或标量。表示进行线性插值的系数。\",\"示例：\",\"/* 使用 mix 函数将两个颜色进行混合。 */ vec4 color1 = vec4(1.0, 0.0, 0.0, 1.0); vec4 color2 = vec4(0.0, 1.0, 0.0, 1.0); float alpha = 0.5; vec4 blendedColor = mix(color1, color2, alpha);\",\"step\",\"使用格式：step(edge, x) 或 step(v, x)（其中 v 为向量类型）\",\"功能：将 x 与阈值 edge 进行比较，若 x 小于等于 edge，则返回 0，否则返回 1。对于向量 v，与 x 的处理方式相同。\",\"参数说明：\",\"edge：任意类型的数值，表示阈值。\",\"x：任意类型的数值。\",\"v：任意长度的向量。\",\"示例：\",\"/* 使用 step 函数判断一个数是否在指定范围内。 */ float num = 3.0; float low = 2.0; float high = 4.0; float result = step(low, num) * step(num, high); if (result == 1.0) { /* num 在指定范围内 */ } else { /* num 不在指定范围内 */ }\",\"smoothstep\",\"使用格式：smoothstep(edge0, edge1, x)\",\"功能：对一个输入值 x 进行插值，返回一个在 edge0 和 edge1 之间的值，插值函数会在 edge0 和 edge1 之外返回 0 和 1。\",\"参数说明：\",\"edge0：类型和长度与 x 相同的矢量或标量。表示左插值边缘。\",\"edge1：类型和长度与 x 相同的矢量或标量。表示右插值边缘。\",\"x：类型和长度与 edge0 和 edge1 相同的矢量或标量。表示插值位置。\",\"示例：\",\"/* 使用 smoothstep 函数创建一个渐变效果。 */ float start = 0.3; float end = 0.7; float value = 0.5; float smoothValue = smoothstep(start, end, value);\",\"isnan\",\"使用格式：isnan(x)\",\"功能：判断输入值是否为 NaN。\",\"参数说明：\",\"x：类型和长度可以是任何 GLSL 支持的数值类型和矢量类型，表示需要检查的值。\",\"示例：\",\"/* 使用 isnan 函数检查值是否为 NaN。 */ float value = 0.0 / 0.0; if (isnan(value)) { /* 处理 NaN 值 */ }\",\"isinf\",\"使用格式：isinf(x)\",\"功能：判断输入值是否为正无穷或负无穷。\",\"参数说明：\",\"x：类型和长度可以是任何 GLSL 支持的数值类型和矢量类型，表示需要检查的值。\",\"示例：\",\"/* 使用 isinf 函数检查值是否为正无穷或负无穷。 */ float value = 1.0 / 0.0; if (isinf(value)) { /* 处理无穷大值 */ }\",\"floatBitsToInt\",\"使用格式：int floatBitsToInt(float value)\",\"功能：将 value 浮点数的位表示转换为整数。例如，若 value 的二进制表示为 01000000100100000000000000000000，则对应的整数为 1071225248。\",\"参数说明：\",\"value：需要转换为整数的单精度浮点数。\",\"示例：\",\"/* 将浮点数转换为整数。 */ float myFloat = 3.14; int myInt = floatBitsToInt(myFloat);\",\"floatBitsToUint\",\"使用格式：uint floatBitsToUint(float value)\",\"功能：将 value 浮点数的位表示转换为无符号整数。例如，若 value 的二进制表示为 01000000100100000000000000000000，则对应的无符号整数为 1071225248。\",\"参数说明：\",\"value：需要转换为无符号整数的单精度浮点数。\",\"示例：\",\"/* 将浮点数转换为无符号整数。 */ float myFloat = 3.14; uint myUint = floatBitsToUint(myFloat);\",\"intBitsToFloat\",\"使用格式：float intBitsToFloat(int value)\",\"功能：将 value 整数的位表示转换为单精度浮点数。例如，若 value 的二进制表示为 01000000100100000000000000000000，则对应的浮点数为 3.1400001049041748。\",\"参数说明：\",\"value：需要转换为浮点数的有符号整数。\",\"示例：\",\"/* 将整数转换为浮点数。 */ int myInt = 1071225248; float myFloat = intBitsToFloat(myInt);\",\"uintBitsToFloat\",\"使用格式：float uintBitsToFloat(uint value)\",\"功能：将 value 无符号整数的位表示转换为单精度浮点数。例如，若 value 的二进制表示为 01000000100100000000000000000000，则对应的浮点数为 3.1400001049041748。\",\"参数说明：\",\"value：需要转换为浮点数的无符号整数。\",\"示例：\",\"/* 将无符号整数转换为浮点数。 */ uint myUint = 1071225248; float myFloat = uintBitsToFloat(myUint);\"]},\"196\":{\"h\":\"矩阵函数\",\"t\":[\"determinant\",\"使用格式：determinant(m)\",\"功能：求矩阵 m 的行列式，表示矩阵的线性变换对面积或体积的伸缩因子。\",\"参数说明：\",\"m：类型为矩阵的变量。要求矩阵是方阵，即行数和列数相等。\",\"返回值：类型为浮点数的变量，表示矩阵 m 的行列式值。\",\"示例：\",\"/* 使用 determinant 函数计算一个矩阵的行列式值。 */ mat2 m = mat2( vec2(1.0, 2.0), vec2(3.0, 4.0) ); float det = determinant(m);\",\"mat4 translate(vec3 v)\",\"使用格式：mat4 translate(vec3 v)\",\"功能：返回一个平移变换矩阵，将向量 v 指定的距离沿着坐标轴进行平移变换。\",\"参数说明：\",\"v：一个包含三个浮点数的向量，表示沿着 x、y 和 z 轴平移的距离。\",\"示例：\",\"/* 将一个三维物体沿着 x 轴平移 2.0 个单位。 */ mat4 modelMatrix = translate(vec3(2.0, 0.0, 0.0));\",\"mat4 rotate(float angle, vec3 axis)\",\"使用格式：mat4 rotate(float angle, vec3 axis)\",\"功能：返回一个旋转变换矩阵，将绕着向量 axis 指定的轴进行 angle 度的旋转变换。\",\"参数说明：\",\"angle：旋转角度，单位为度数。正值表示逆时针旋转，负值表示顺时针旋转。\",\"axis：一个包含三个浮点数的向量，表示旋转轴的方向。\",\"示例：\",\"/* 将一个三维物体绕着 y 轴旋转 45 度。 */ mat4 modelMatrix = rotate(45.0, vec3(0.0, 1.0, 0.0));\",\"mat4 scale(vec3 v)\",\"使用格式：mat4 scale(vec3 v)\",\"功能：返回一个缩放变换矩阵，将物体在三个轴向上分别按照向量 v 指定的比例进行缩放。\",\"参数说明：\",\"v：一个包含三个浮点数的向量，表示在 x、y 和 z 轴上进行缩放的比例。\",\"示例：\",\"/* 将一个三维物体在 x 轴上缩小至原来的一半，y 和 z 轴上进行标准比例的缩放。 */ mat4 modelMatrix = scale(vec3(0.5, 1.0, 1.0));\",\"mat4 transpose(mat4 m)\",\"使用格式：mat4 transpose(mat4 m)\",\"功能：返回一个矩阵，其中输入矩阵 m 的行和列互换。\",\"参数说明：\",\"m：一个 4x4 的浮点数矩阵。\",\"示例：\",\"/* 计算一个转置矩阵。 */ mat4 originalMatrix = mat4(1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0); mat4 transposedMatrix = transpose(originalMatrix);\",\"mat4 inverse(mat4 m)\",\"使用格式：mat4 inverse(mat4 m)\",\"功能：返回投影矩阵的逆矩阵。一个逆矩阵与其投影矩阵相乘的结果等于单位矩阵。\",\"参数说明：\",\"m：一个 4x4 的浮点数矩阵，表示投影矩阵。\",\"示例：\",\"/* 计算逆矩阵。 */ mat4 projectionMatrix = perspective(radians(45.0), 1.0, 0.1, 100.0); mat4 invertedMatrix = inverse(projectionMatrix);\"]},\"197\":{\"h\":\"向量函数\",\"t\":[\"length\",\"使用格式：length(x)\",\"功能：返回矢量 x 的长度，即欧几里得范数（Euclidean norm）。\",\"参数说明：\",\"x：一个矢量，可以是 2D、3D 或 4D。\",\"示例：\",\"/* 使用 length 函数计算一个 2D 矢量的长度。 */ vec2 vector = vec2(3.0, 4.0); float length = length(vector); // 结果为 5.0\",\"distance\",\"使用格式：distance(p0, p1)\",\"功能：返回两个点 p0 和 p1 之间的距离。\",\"参数说明：\",\"p0：表示一个点的矢量，可以是 2D、3D 或 4D。\",\"p1：表示一个点的矢量，可以是 2D、3D 或 4D。需要与 p0 支持相同的维度。\",\"示例：\",\"/* 使用 distance 函数计算两个 3D 点的距离。 */ vec3 pointA = vec3(1.0, 2.0, 3.0); vec3 pointB = vec3(4.0, 5.0, 6.0); float distance = distance(pointA, pointB); // 结果为 5.196\",\"dot\",\"使用格式：dot(x, y)\",\"功能：返回矢量 x 和矢量 y 的点积（dot product）。\",\"参数说明：\",\"x：一个矢量，可以是 2D、3D 或 4D。\",\"y：另一个矢量，需要和 x 支持相同的维度。\",\"示例：\",\"/* 使用 dot 函数计算两个 3D 矢量的点积。 */ vec3 vectorA = vec3(1.0, 2.0, 3.0); vec3 vectorB = vec3(-2.0, 0.0, 1.0); float dotProduct = dot(vectorA, vectorB); // 结果为 -1.0\",\"cross\",\"使用格式：cross(x, y)\",\"功能：返回矢量 x 和矢量 y 的叉积（cross product）。\",\"参数说明：\",\"x：一个 3D 矢量。\",\"y：另一个 3D 矢量。\",\"示例：\",\"/* 使用 cross 函数计算两个 3D 矢量的叉积。 */ vec3 vectorA = vec3(1.0, 0.0, 0.0); vec3 vectorB = vec3(0.0, 1.0, 0.0); vec3 crossProduct = cross(vectorA, vectorB); // 结果为 vec3(0.0, 0.0, 1.0)\",\"normalize\",\"使用格式：normalize(x)\",\"功能：返回矢量 x 的单位矢量。\",\"参数说明：\",\"x：一个矢量，可以是 2D、3D 或 4D。\",\"示例：\",\"/* 使用 normalize 函数将一个 3D 矢量转换为单位矢量。 */ vec3 vector = vec3(1.0, 2.0, 2.0); vec3 normalizedVector = normalize(vector); // 结果为 vec3(0.333, 0.667, 0.667)\",\"faceforward\",\"使用格式：faceforward(N, I, Nref)\",\"功能：返回与出射矢量 I 方向一致的矢量。如果矢量 N 和矢量 Nref 点积的结果为负数，则返回 -N；否则返回 N。\",\"参数说明：\",\"N：表示表面法向量的矢量。\",\"I：表示出射矢量的矢量。\",\"Nref：表示参考表面法向量的矢量。用于确定翻转法向量的方向。\",\"示例：\",\"/* 使用 faceforward 函数将法向量翻转到和出射矢量方向一致。 */ vec3 normal = vec3(0.0, 1.0, 0.0); vec3 incident = vec3(1.0, 0.0, 0.0); vec3 reflected = reflect(incident, normal); vec3 flippedNormal = faceforward(normal, incident, normal);\",\"reflect\",\"使用格式：reflect(I, N)\",\"功能：返回矢量 I 关于表面法向量 N 的反射矢量。\",\"参数说明：\",\"I：表示入射矢量的矢量。\",\"N：表示表面法向量的矢量。\",\"示例：\",\"/* 使用 reflect 函数计算一个 3D 矢量的反射矢量。 */ vec3 incident = vec3(1.0, 0.0, 0.0); vec3 normal = vec3(0.0, 1.0, 0.0); vec3 reflected = reflect(incident, normal); // 结果为 vec3(-1.0, 0.0, 0.0)\",\"refract\",\"使用格式：refract(I, N, eta)\",\"功能：返回从介质 1（即光线所处的介质）向介质 2（即光线所将要进入的介质）折射的矢量，并且矢量与法向量的夹角为 theta_t。\",\"参数说明：\",\"I：表示入射矢量的矢量。\",\"N：表示表面法向量的矢量。\",\"eta：表示介质 1 的折射率与介质 2 的折射率的比值。\",\"示例：\",\"/* 使用 refract 函数计算一个 3D 矢量经过表面折射后的矢量。 */ vec3 incident = vec3(1.0, 0.0, 0.0); vec3 normal = vec3(0.0, 1.0, 0.0); float eta = 1.33; // 玻璃的折射率 vec3 refracted = refract(incident, normal, eta);\"]},\"198\":{\"h\":\"计算函数\",\"t\":[\"pow\",\"使用格式：pow(x, y)\",\"功能：计算底数为 x，指数为 y 的幂。\",\"参数说明：\",\"x：类型和长度为标量或矢量。表示幂的底数。\",\"y：类型和长度为标量或矢量。表示幂的指数。\",\"示例：\",\"/* 计算 2 的 3 次方。 */ float result = pow(2.0, 3.0);\",\"exp\",\"使用格式：exp(x)\",\"功能：计算 e 的 x 次幂，其中 e 为自然对数的底。\",\"参数说明：\",\"x：类型和长度为标量或矢量。表示指数。\",\"示例：\",\"/* 计算 e 的 2 次幂。 */ float result = exp(2.0);\",\"log\",\"使用格式：log(x)\",\"功能：计算以 e 为底的对数。\",\"参数说明：\",\"x：类型和长度为标量或矢量。表示需要求对数的值。\",\"示例：\",\"/* 计算 log(10)。 */ float result = log(10.0);\",\"exp2\",\"使用格式：exp2(x)\",\"功能：计算 2 的 x 次幂。\",\"参数说明：\",\"x：类型和长度为标量或矢量。表示指数。\",\"示例：\",\"/* 计算 2 的 3 次幂。 */ float result = exp2(3.0);\",\"log2\",\"使用格式：log2(x)\",\"功能：计算以 2 为底的对数。\",\"参数说明：\",\"x：类型和长度为标量或矢量。表示需要求对数的值。\",\"示例：\",\"/* 计算 log2(8)。 */ float result = log2(8.0);\",\"sqrt\",\"使用格式：sqrt(x)\",\"功能：计算平方根。\",\"参数说明：\",\"x：类型和长度为标量或矢量。表示需要求平方根的值。\",\"示例：\",\"/* 计算 25 的平方根。 */ float result = sqrt(25.0);\",\"inversesqrt\",\"使用格式：inversesqrt(x)\",\"功能：计算平方根的倒数。\",\"参数说明：\",\"x：类型和长度为标量或矢量。表示需要求平方根倒数的值。\",\"示例：\",\"/* 计算 1/3 的平方根的倒数。 */ float result = inversesqrt(1.0 / 3.0);\",\"sin\",\"使用格式：sin(x)\",\"功能：计算正弦值。\",\"参数说明：\",\"x：类型和长度为标量或矢量。表示需要求正弦值的角度，单位为弧度。\",\"示例：\",\"/* 计算 30 度的正弦值。 */ float result = sin(radians(30.0));\",\"cos\",\"使用格式：cos(x)\",\"功能：计算余弦值。\",\"参数说明：\",\"x：类型和长度为标量或矢量。表示需要求余弦值的角度，单位为弧度。\",\"示例：\",\"/* 计算 60 度的余弦值。 */ float result = cos(radians(60.0));\",\"tan\",\"使用格式：tan(x)\",\"功能：计算正切值。\",\"参数说明：\",\"x：类型和长度为标量或矢量。表示需要求正切值的角度，单位为弧度。\",\"示例：\",\"/* 计算 45 度的正切值。 */ float result = tan(radians(45.0));\",\"asin\",\"使用格式：asin(x)\",\"功能：计算反正弦值。\",\"参数说明：\",\"x：类型和长度为标量或矢量。表示需要求反正弦值的值。值域为 [-1, 1]。\",\"示例：\",\"/* 计算 sin(30) 的反正弦值。 */ float result = asin(sin(radians(30.0)));\",\"acos\",\"使用格式：acos(x)\",\"功能：计算反余弦值。\",\"参数说明：\",\"x：类型和长度为标量或矢量。表示需要求反余弦值的值。值域为 [-1, 1]。\",\"示例：\",\"/* 计算 cos(60) 的反余弦值。 */ float result = acos(cos(radians(60.0)));\",\"atan\",\"使用格式：atan(y, x)\",\"功能：计算反正切值。\",\"参数说明：\",\"y：类型和长度为标量或矢量。表示直角三角形的对边。\",\"x：类型和长度为标量或矢量。表示直角三角形的临边。\",\"示例：\",\"/* 计算直角三角形的角度。 */ float result = degrees(atan(5.0, 12.0));\",\"atanh\",\"使用格式：atanh(x)\",\"功能：计算反双曲正切值。\",\"参数说明：\",\"x：类型和长度为标量或矢量。表示需要求反双曲正切值的值。值域为 [-1, 1]。\",\"示例：\",\"/* 计算双曲正切为 0.5 的反双曲正切值。 */ float result = atanh(0.5);\",\"sinh\",\"使用格式：sinh(x)\",\"功能：计算双曲正弦函数（hyperbolic sine）的值。\",\"参数说明：\",\"x：标量或矢量，表示角度（以弧度为单位）。\",\"示例：\",\"/* 计算双曲正弦函数的值。 */ float x = 0.5; float sinhx = sinh(x);\",\"cosh\",\"使用格式：cosh(x)\",\"功能：计算双曲余弦函数（hyperbolic cosine）的值。\",\"参数说明：\",\"x：标量或矢量，表示角度（以弧度为单位）。\",\"示例：\",\"/* 计算双曲余弦函数的值。 */ float x = 0.5; float coshx = cosh(x);\",\"tanh\",\"使用格式：tanh(x)\",\"功能：计算双曲正切函数（hyperbolic tangent）的值。\",\"参数说明：\",\"x：标量或矢量，表示角度（以弧度为单位）。\",\"示例：\",\"/* 计算双曲正切函数的值。 */ float x = 0.5; float tanhx = tanh(x);\"]},\"199\":{\"h\":\"纹理函数\",\"t\":[\"texture\",\"使用格式：texture(sampler, coord [,bias])\",\"功能：从纹理采样器中获取给定坐标处的颜色值（或纹理值）。\",\"参数说明：\",\"sampler：类型为 sampler* 的纹理采样器。\",\"coord：类型为 vec 的纹理坐标。在 2D 纹理中，通常使用 vec2 来表示坐标。在 3D 纹理中，通常使用 vec3 来表示坐标。\",\"bias（可选）：一个偏差值，类型为 float。将用于对采样纹理值进行偏移，以使结果更加平滑。\",\"示例：\",\"/* 使用 texture 函数从 sampler2D 中获取纹理颜色值。*/ uniform sampler2D textureSampler; varying vec2 texCoord; void main() { vec4 textureColor = texture(textureSampler, texCoord); gl_FragColor = textureColor; }\",\"textureLod\",\"使用格式：textureLod(sampler, coord, lod)\",\"功能：从纹理采样器中获取给定坐标处，指定级别的颜色值或纹理值。\",\"参数说明：\",\"sampler：类型为 sampler* 的纹理采样器。\",\"coord：类型为 vec 的纹理坐标。\",\"lod：采样级别，类型为 float。\",\"示例：\",\"/* 使用 textureLod 函数获取某个纹理的 mipmap 级别为 3 的颜色值。*/ uniform sampler2D textureSampler; varying vec2 texCoord; void main() { vec4 textureColor = textureLod(textureSampler, texCoord, 3.0); gl_FragColor = textureColor; }\",\"textureOffset\",\"使用格式：textureOffset(sampler, coord, offset [, bias])\",\"功能：从纹理采样器中获取给定坐标和偏移量处的颜色值或纹理值。\",\"参数说明：\",\"sampler：类型为 sampler* 的纹理采样器。\",\"coord：类型为 vec 的纹理坐标。\",\"offset：一个偏移量，类型为 ivec（整数向量）。表示从给定坐标处移动的像素偏移量。\",\"bias（可选）：一个偏差值，类型为 float。\",\"示例：\",\"/* 使用 textureOffset 函数获取从纹理坐标为 (0.25, 0.25) 位置开始，偏移 2 个像素处的颜色值。*/ uniform sampler2D textureSampler; varying vec2 texCoord; void main() { vec4 textureColor = textureOffset(textureSampler, texCoord, ivec2(2, 2), 0.0); gl_FragColor = textureColor; }\",\"texelFetch\",\"使用格式：texelFetch(sampler, coord, lod)\",\"功能：从纹理采样器中直接获取指定级别和坐标处的纹素值，不会进行插值处理。可以用于执行基于像素级别的操作。\",\"参数说明：\",\"sampler：类型为 sampler* 的纹理采样器。\",\"coord：类型为 ivec 的纹理坐标。表示整数级别的坐标。\",\"lod：采样级别，类型为 int。指定的值必须与指定的纹理采样器关联的实际纹理级别匹配。在级别不匹配的情况下，结果未定义。\",\"示例：\",\"/* 使用 texelFetch 函数获取纹理采样器中具有特定坐标和级别的纹素值。*/ uniform sampler2D textureSampler; void main() { ivec2 coord = ivec2(1, 1); int lod = 0; vec4 textureColor = texelFetch(textureSampler, coord, lod); gl_FragColor = textureColor; }\",\"texelFetchOffset\",\"使用格式：texelFetchOffset(sampler, coord, lod, offset)\",\"功能：从纹理采样器中直接获取指定级别、偏移量和坐标处的纹素值。\",\"参数说明：\",\"sampler：类型为 sampler* 的纹理采样器。\",\"coord：类型为 ivec 的纹理坐标。\",\"lod：采样级别，类型为 int。\",\"offset：类型为 ivec 的像素偏移量。\",\"示例：\",\"/* 使用 texelFetchOffset 函数获取从纹理坐标为 (1, 1) 位置开始，偏移 2 个像素，mipmap 级别为 0 处的纹素值。*/ uniform sampler2D textureSampler; void main() { ivec2 coord = ivec2(1, 1); int lod = 0; ivec2 offset = ivec2(2, 2); vec4 textureColor = texelFetchOffset(textureSampler, coord, lod, offset); gl_FragColor = textureColor; }\",\"textureProj\",\"使用格式：textureProj(sampler, coord [, bias])\",\"功能：在执行纹理采样时，将给定的纹理坐标进行透视除法。通常用于执行弯曲的表面纹理采样，例如物体的表面。\",\"参数说明：\",\"sampler：类型为 sampler* 的纹理采样器。\",\"coord：类型为 vec 的纹理坐标。\",\"bias（可选）：一个偏差值，类型为 float。\",\"示例：\",\"/* 使用 textureProj 函数在物体表面进行纹理采样。*/ uniform sampler2D textureSampler; varying vec4 worldPos; varying mat4 projectionMatrix; void main() { vec3 projectedCoord = (projectionMatrix * worldPos).xyz / (projectionMatrix * worldPos).w; vec4 textureColor = textureProj(textureSampler, projectedCoord); gl_FragColor = textureColor; }\",\"textureProjOffset\",\"使用格式：textureProjOffset(sampler, coord, offset [, bias])\",\"功能：在执行纹理采样时，将给定的纹理坐标和偏移量进行透视除法。\",\"参数说明：\",\"sampler：类型为 sampler* 的纹理采样器。\",\"coord：类型为 vec 的纹理坐标。\",\"offset：类型为 vec 的像素偏移量。\",\"bias（可选）：一个偏差值，类型为 float。\",\"示例：\",\"/* 使用 textureProjOffset 函数在物体表面进行带有偏移量的纹理采样。*/ uniform sampler2D textureSampler; varying vec4 worldPos; varying mat4 projectionMatrix; void main() { vec3 projectedCoord = (projectionMatrix * worldPos).xyz / (projectionMatrix * worldPos).w; vec4 textureColor = textureProjOffset(textureSampler, projectedCoord, vec2(2.0, 2.0), 0.0); gl_FragColor = textureColor; }\",\"textureGrad\",\"使用格式：textureGrad(sampler2D sampler, vec2 coord, vec2 dPdx, vec2 dPdy)\",\"功能：使用给定的采样器和纹理坐标，按照给定的变化率获取纹理值。\",\"参数说明：\",\"sampler：采样器类型的纹理。\",\"coord：类型为 vec2 的纹理坐标。\",\"dPdx：类型为 vec2 的横向变化率。\",\"dPdy：类型为 vec2 的纵向变化率。\",\"示例：\",\"/* 使用 textureGrad 函数获取纹理值。 */ uniform sampler2D textureSampler; vec2 uv = vec2(0.5, 0.5); vec2 dPdx = dFdx(uv); vec2 dPdy = dFdy(uv); vec4 texel = textureGrad(textureSampler, uv, dPdx, dPdy);\",\"textureGradOffset\",\"使用格式：textureGradOffset(sampler2D sampler, vec2 coord, vec2 dPdx, vec2 dPdy, ivec2 offset)\",\"功能：使用给定的采样器和纹理坐标，按照给定的变化率和偏移值获取纹理值。\",\"参数说明：\",\"sampler：采样器类型的纹理。\",\"coord：类型为 vec2 的纹理坐标。\",\"dPdx：类型为 vec2 的横向变化率。\",\"dPdy：类型为 vec2 的纵向变化率。\",\"offset：类型为 ivec2 的纹理偏移值。\",\"示例：\",\"/* 使用 textureGradOffset 函数获取纹理值。 */ uniform sampler2D textureSampler; vec2 uv = vec2(0.5, 0.5); vec2 dPdx = dFdx(uv); vec2 dPdy = dFdy(uv); ivec2 offset = ivec2(1, -1); vec4 texel = textureGradOffset(textureSampler, uv, dPdx, dPdy, offset);\",\"textureSize\",\"使用格式：textureSize(sampler2D sampler, int lod)\",\"功能：获取指定 LOD 级别的纹理大小。\",\"参数说明：\",\"sampler：采样器类型的纹理。\",\"lod：整数类型，指定纹理的 LOD 级别。\",\"示例：\",\"/* 使用 textureSize 函数获取指定 LOD 级别的纹理大小。 */ uniform sampler2D textureSampler; int lod = 0; ivec2 textureSize = textureSize(textureSampler, lod);\",\"texture1D\",\"使用格式：texture1D(sampler, coord, [lod])\",\"功能：从一维纹理图像中获取纹素颜色值。\",\"参数说明：\",\"sampler：采样器对象。\",\"coord：要获取的纹素在纹理坐标系中的位置，只有一个浮点数。\",\"lod：可选参数，LOD 级别。\",\"返回值：返回颜色值，通常是 vec4 类型。\",\"示例：\",\"vec4 color = texture1D(textureSampler, textureCoord);\",\"texture2D\",\"使用格式：texture2D(sampler, coord, [lod])\",\"功能：从二维纹理图像中获取纹素颜色值。\",\"参数说明：\",\"sampler：采样器对象。\",\"coord：要获取的纹素在纹理坐标系中的位置，有两个浮点数。\",\"lod：可选参数，LOD 级别。\",\"返回值：返回颜色值，通常是 vec4 类型。\",\"示例：\",\"vec4 color = texture2D(textureSampler, textureCoord);\",\"texture3D\",\"使用格式：texture3D(sampler, coord, [lod])\",\"功能：从三维纹理图像中获取纹素颜色值。\",\"参数说明：\",\"sampler：采样器对象。\",\"coord：要获取的纹素在纹理坐标系中的位置，有三个浮点数。\",\"lod：可选参数，LOD 级别。\",\"返回值：返回颜色值，通常是 vec4 类型。\",\"示例：\",\"vec4 color = texture3D(textureSampler, textureCoord);\",\"textureCube\",\"使用格式：textureCube(sampler, coord, [lod])\",\"功能：从立方体贴图中获取纹素颜色值。\",\"参数说明：\",\"sampler：采样器对象。\",\"coord：要获取的纹素在纹理坐标系中的位置，是一个三维向量。\",\"lod：可选参数，LOD 级别。\",\"返回值：返回颜色值，通常是 vec4 类型。\",\"示例：\",\"vec4 color = textureCube(textureSampler, textureCoord);\",\"texture1DArray\",\"使用格式：texture1DArray(sampler, coord, layer[, lod])\",\"功能：从一维纹理数组中获取纹素颜色值。\",\"参数说明：\",\"sampler：采样器对象。\",\"coord：要获取的纹素在纹理坐标系中的位置，只有一个浮点数。\",\"layer：要获取的纹理数组中的层数。\",\"lod：可选参数，LOD 级别。\",\"返回值：返回颜色值，通常是 vec4 类型。\",\"示例：\",\"vec4 color = texture1DArray(textureSampler, textureCoord, 0);\",\"texture2DArray\",\"使用格式：texture2DArray(sampler, coord, layer[, lod])\",\"功能：从二维纹理数组中获取纹素颜色值。\",\"参数说明：\",\"sampler：采样器对象。\",\"coord：要获取的纹素在纹理坐标系中的位置，有两个浮点数。\",\"layer：要获取的纹理数组中的层数。\",\"lod：可选参数，LOD 级别。\",\"返回值：返回颜色值，通常是 vec4 类型。\",\"示例：\",\"vec4 color = texture2DArray(textureSampler, textureCoord, 0);\",\"textureCubeArray\",\"使用格式：textureCubeArray(sampler, coord, layer[, lod])\",\"功能：从立方体贴图数组中获取纹素颜色值。\",\"参数说明：\",\"sampler：采样器对象。\",\"coord：要获取的纹素在纹理坐标系中的位置，是一个四维向量，前三个分量表示立方体贴图的坐标，第四个分量表示贴图数组的层数。\",\"layer：要获取的纹理数组中的层数。\",\"lod：可选参数，LOD 级别。\",\"返回值：返回颜色值，通常是 vec4 类型。\",\"示例：\",\"vec4 color = textureCubeArray(textureSampler, textureCoord, 0);\",\"shadow1D\",\"使用格式：shadow1D(sampler, coord[, bias])\",\"功能：从一维深度纹理图像中获取纹素深度值。\",\"参数说明：\",\"sampler：采样器对象。\",\"coord：要获取的纹素在纹理坐标系中的位置，只有一个浮点数。\",\"bias：可选参数，偏差值。\",\"返回值：返回深度值，通常是 float 类型。\",\"示例：\",\"float depth = shadow1D(shadowSampler, shadowCoord);\",\"shadow2D\",\"使用格式：shadow2D(sampler, coord[, bias])\",\"功能：从二维深度纹理图像中获取纹素深度值。\",\"参数说明：\",\"sampler：采样器对象。\",\"coord：要获取的纹素在纹理坐标系中的位置，有两个浮点数。\",\"bias：可选参数，偏差值。\",\"返回值：返回深度值，通常是 float 类型。\",\"示例：\",\"float depth = shadow2D(shadowSampler, shadowCoord);\",\"shadow1DArray\",\"使用格式：shadow1DArray(sampler, coord[, bias])\",\"功能：从一维深度纹理数组中获取纹素深度值。\",\"参数说明：\",\"sampler：采样器对象。\",\"coord：要获取的纹素在纹理坐标系中的位置，只有一个浮点数。\",\"bias：可选参数，偏差值。\",\"返回值：返回深度值，通常是 float 类型。\",\"示例：\",\"float depth = shadow1DArray(shadowSampler, shadowCoord);\",\"shadow2DArray\",\"使用格式：shadow2DArray(sampler, coord[, bias])\",\"功能：从二维深度纹理数组中获取纹素深度值。\",\"参数说明：\",\"sampler：采样器对象。\",\"coord：要获取的纹素在纹理坐标系中的位置，有两个浮点数。\",\"bias：可选参数，偏差值。\",\"返回值：返回深度值，通常是 float 类型。\",\"示例：\",\"float depth = shadow2DArray(shadowSampler, shadowCoord);\",\"shadowCube\",\"使用格式：float shadowCube(samplerCubeShadow sampler, vec4 coord)\",\"功能：计算一个立方体纹理的阴影值。\",\"参数说明：\",\"sampler：表示一个立方体纹理采样器。\",\"coord：一个 vec4 类型，其中的前三个分量表示所需要计算的纹理坐标，最后一个分量表示深度比较值。\",\"返回值：返回一个浮点数，表示阴影值。\",\"示例：\",\"/* 使用 shadowCube 函数计算立方体纹理的阴影值。 */ uniform samplerCubeShadow shadowMap; vec4 lightPos = vec4(1.0, 1.0, 1.0, 1.0); vec4 fragPos = vec4(position, 1.0); float shadow = shadowCube(shadowMap, vec4(direction, 1.0));\",\"shadowCubeArray\",\"使用格式：float shadowCubeArray(samplerCubeArrayShadow sampler, vec4 coord)\",\"功能：计算一个立方体数组纹理的阴影值。\",\"参数说明：\",\"sampler：表示一个立方体数组纹理采样器。\",\"coord：一个 vec4 类型，其中的前三个分量表示所需要计算的纹理坐标，最后一个分量表示深度比较值。\",\"返回值：返回一个浮点数，表示阴影值。\",\"示例：\",\"/* 使用 shadowCubeArray 函数计算立方体数组纹理的阴影值。 */ uniform samplerCubeArrayShadow shadowMap; vec4 lightPos = vec4(1.0, 1.0, 1.0, 1.0); vec4 fragPos = vec4(position, 1.0); float shadow = shadowCubeArray(shadowMap, vec4(direction, 1.0));\",\"texelFetch\",\"使用格式：<return type> texelFetch(sampler* sampler, ivec* coord, int lod = 0)\",\"功能：从特定 mipmap 级别的纹理中取回单个纹理元素的值。\",\"参数说明：\",\"sampler：表示一个纹理采样器，类型可以是sampler2D，sampler3D或samplerCube。\",\"coord：类型为 ivec*，表示从中检索纹理值的整数纹理坐标。对于sampler2D和samplerCube类型的采样器，请设置coord.z为0或1。\",\"lod：表示用于取样的mipmap级别。默认为0表示使用基本级别（没有降采样）。\",\"返回值：根据采样的纹理类型返回需要的值，例如，对于sampler2D类型的采样器，返回类型为vec4。\",\"示例：\",\"/* 从纹理中获取单个像素的颜色。 */ uniform sampler2D textureSampler; ivec2 texCoord = ivec2(10,20); vec4 texel = texelFetch(textureSampler, texCoord, 0);\",\"texelFetchOffset\",\"使用格式：<return type> texelFetchOffset(sampler* sampler, ivec* coord, int lod, ivec* offset)\",\"功能：从纹理中检索带有偏移量的单个颜色值。\",\"参数说明：\",\"sampler：表示一个纹理采样器，类型可以是sampler2D，sampler3D或samplerCube。\",\"coord：类型为 ivec*，表示从中检索纹理值的整数纹理坐标。对于sampler2D和samplerCube类型的采样器，请设置coord.z为0或1。\",\"lod：表示用于取样的mipmap级别。\",\"offset：表示相对于coord的偏移量，类型为ivec*。在sampler2D和samplerCube类型的采样器中，通常将其设置为(0,0)或(1,1)。\",\"返回值：根据采样的纹理类型返回需要的值，例如，对于sampler2D类型的采样器，返回类型为vec4。\",\"示例：\",\"/* 带有偏移量的从纹理中获取单个像素的颜色。 */ uniform sampler2D textureSampler; ivec2 texCoord = ivec2(10,20); ivec2 offset = ivec2(1, 0); vec4 texel = texelFetchOffset(textureSampler, texCoord, 0, offset);\",\"textureGrad\",\"使用格式：<return type> textureGrad(sampler* sampler, vec* coord, vec* dPdx, vec* dPdy)\",\"功能：在给定纹理坐标和x,y方向的偏导数下，从纹理中返回插值颜色。通常用于在片元着色器中获取法向量等。\",\"参数说明：\",\"sampler：表示一个纹理采样器，类型可以是sampler2D，sampler3D或samplerCube。\",\"coord：类型为 vec*，表示纹理坐标。\",\"dPdx：类型为 vec*，表示相对于窗口坐标的x方向偏导数。\",\"dPdy：类型为 vec*，表示相对于窗口坐标的y方向偏导数。\",\"返回值：根据采样的纹理类型返回需要的值，例如，对于sampler2D类型的采样器，返回类型为vec4。\",\"示例：\",\"/* 对从纹理中获取的颜色进行梯度计算。 */ uniform sampler2D textureSampler; vec2 texCoord = vec2(0.5, 0.3); vec2 dPdx = dFdx(texCoord); vec2 dPdy = dFdy(texCoord); vec4 texelGrad = textureGrad(textureSampler, texCoord, dPdx, dPdy);\",\"textureLod\",\"使用格式：textureLod(sampler, coord, lod)\",\"功能：根据给定的采样器 sampler 和纹理坐标 coord 取样，并手动指定 mipmap 等级 lod。如果 lod 的值为 0.0，则取最高分辨率的纹理；如果 lod 的值为 -1.0，则自动计算最合适的 mipmap 级别。\",\"参数说明：\",\"sampler：采样器，用于指定纹理的各种属性，如过滤方式、重复方式等。\",\"coord：vec2、vec3 或 vec4 类型的纹理坐标。\",\"lod：mipmap 等级，类型为 float。\",\"示例：\",\"/* 从纹理中手动指定 mipmap 等级取样。 */ uniform sampler2D tex; varying vec2 uv; void main() { gl_FragColor = textureLod(tex, uv, 2.0); }\",\"textureLodOffset\",\"使用格式：textureLodOffset(sampler, coord, lod, offset)\",\"功能：根据给定的采样器 sampler、纹理坐标 coord 和纹理坐标偏移量 offset 取样，并手动指定 mipmap 等级 lod。如果 lod 的值为 0.0，则取最高分辨率的纹理；如果 lod 的值为 -1.0，则自动计算最合适的 mipmap 级别。\",\"参数说明：\",\"sampler：采样器，用于指定纹理的各种属性，如过滤方式、重复方式等。\",\"coord：vec2、vec3 或 vec4 类型的纹理坐标。\",\"lod：mipmap 等级，类型为 float。\",\"offset：vec2、vec3 或 vec4 类型的纹理坐标偏移量。\",\"示例：\",\"/* 从纹理中手动指定 mipmap 等级取样，并对纹理坐标进行偏移。 */ uniform sampler2D tex; varying vec2 uv; void main() { gl_FragColor = textureLodOffset(tex, uv, 2.0, vec2(0.1, 0.1)); }\",\"textureProj\",\"使用格式：textureProj(sampler, coord)\",\"功能：将三维纹理坐标 coord 转换成二维纹理坐标，并根据给定的采样器 sampler 取样，返回采样结果。\",\"参数说明：\",\"sampler：采样器，用于指定纹理的各种属性，如过滤方式、重复方式等。\",\"coord：vec4 类型的三维纹理坐标。\",\"示例：\",\"/* 将三维纹理坐标转换成二维纹理坐标，然后从纹理中取样。 */ uniform sampler2D tex; varying vec4 uvw; void main() { gl_FragColor = textureProj(tex, uvw); }\",\"textureProjOffset\",\"使用格式：textureProjOffset(sampler, coord, offset)\",\"功能：将三维纹理坐标 coord 转换成二维纹理坐标，并根据给定的采样器 sampler 和纹理坐标偏移量 offset 取样。返回采样结果。\",\"参数说明：\",\"sampler：采样器，用于指定纹理的各种属性，如过滤方式、重复方式等。\",\"coord：vec4 类型的三维纹理坐标。\",\"offset：vec2、vec3 或 vec4 类型的纹理坐标偏移量。\",\"示例：\",\"/* 将三维纹理坐标转换成二维纹理坐标，并根据偏移量从纹理中取样。 */ uniform sampler2D tex; varying vec4 uvw; void main() { gl_FragColor = textureProjOffset(tex, uvw, vec2(0.1, 0.1)); }\",\"textureSize\",\"使用格式：textureSize(sampler, level)\",\"功能：返回给定纹理 sampler 某个 mipmap 级别 level 的宽度和高度。\",\"参数说明：\",\"sampler：采样器，用于指定纹理的各种属性，如过滤方式、重复方式等。\",\"level：mipmap 等级，类型为 int。\",\"返回值：ivec2 类型，表示该 mipmap 级别的宽度和高度。\",\"示例：\",\"/* 获取纹理某个 mipmap 级别的宽度和高度。 */ uniform sampler2D tex; int level = 2; void main() { ivec2 size = textureSize(tex, level); /* 其他操作... */ }\",\"textureSamples\",\"使用格式：textureSamples(sampler)\",\"功能：返回给定采样器 sampler 关联的纹理的样本数。\",\"参数说明：\",\"sampler：采样器，用于指定纹理的各种属性，如过滤方式、重复方式等。\",\"返回值：int 类型，表示纹理的样本数。\",\"示例：\",\"/* 获取纹理的样本数。 */ uniform sampler2DMS tex; void main() { int samples = textureSamples(tex); /* 其他操作... */ }\"]},\"200\":{\"h\":\"自定义函数\",\"t\":[\"自定义函数规则和 C 语言差不多，每个 shader 中必须有一个 main 函数。\",\" // 随机函数 float random (vec2 st) { return fract(sin(dot(st.xy,vec2(12.9898,78.233)))*43758.5453123); } // 旋转函数 vec2 rotate(vec2 uv, float rotation, vec2 mid) { return vec2( cos(rotation) * (uv.x - mid.x) + sin(rotation) * (uv.y - mid.y) + mid.x, cos(rotation) * (uv.y - mid.y) - sin(rotation) * (uv.x - mid.x) + mid.y ); } // 噪声函数 float noise (in vec2 _st) { vec2 i = floor(_st); vec2 f = fract(_st); // Four corners in 2D of a tile float a = random(i); float b = random(i + vec2(1.0, 0.0)); float c = random(i + vec2(0.0, 1.0)); float d = random(i + vec2(1.0, 1.0)); vec2 u = f * f * (3.0 - 2.0 * f); return mix(a, b, u.x) + (c - a)* u.y * (1.0 - u.x) + (d - b) * u.x * u.y; }\"]},\"201\":{\"c\":[\"GLSL\"]},\"202\":{\"h\":\"GLSL图形（一）\",\"t\":[\"precision lowp float; varying vec2 vUv; void main(){ gl_FragColor =vec4(vUv,0,1); }\",\"precision lowp float; varying vec2 vUv; void main(){ gl_FragColor =vec4(vUv,1,1); }\",\"precision lowp float; varying vec2 vUv; void main(){ float strength = vUv.x; gl_FragColor =vec4(strength,strength,strength,1); }\",\"precision lowp float; varying vec2 vUv; void main(){ float strength = vUv.y; gl_FragColor =vec4(strength,strength,strength,1); }\",\"precision lowp float; varying vec2 vUv; void main(){ float strength = 1.0-vUv.y; gl_FragColor =vec4(strength,strength,strength,1); }\",\"precision lowp float; varying vec2 vUv; void main(){ //利用uv实现短范围内渐变 float strength = vUv.y * 10.0; gl_FragColor =vec4(strength,strength,strength,1); }\",\"precision lowp float; varying vec2 vUv; void main(){ //7利用通过取模达到反复效果 float strength = mod(vUv.y * 10.0 , 1.0) ; gl_FragColor =vec4(strength,strength,strength,1); }\",\"precision lowp float; varying vec2 vUv; void main(){ //8利用step(edge, x)如果x < edge，返回0.0，否则返回1.0 float strength = mod(vUv.y * 10.0 , 1.0) ; strength = step(0.5,strength); gl_FragColor =vec4(strength,strength,strength,1); }\",\"precision lowp float; varying vec2 vUv; void main(){ //9利用step(edge, x)如果x < edge，返回0.0，否则返回1.0 float strength = mod(vUv.y * 10.0 , 1.0) ; strength = step(0.8,strength); gl_FragColor =vec4(strength,strength,strength,1); }\",\"precision lowp float; varying vec2 vUv; void main(){ //10利用step(edge, x)如果x < edge，返回0.0，否则返回1.0 float strength = mod(vUv.x * 10.0 , 1.0) ; strength = step(0.8,strength); gl_FragColor =vec4(strength,strength,strength,1); }\",\"precision lowp float; varying vec2 vUv; void main(){ // 11条纹相加 float strength = step(0.8, mod(vUv.x * 10.0 , 1.0)) ; strength += step(0.8, mod(vUv.y * 10.0 , 1.0)) ; gl_FragColor =vec4(strength,strength,strength,1); }\",\"precision lowp float; varying vec2 vUv; void main(){ // 12条纹相乘 float strength = step(0.8, mod(vUv.x * 10.0 , 1.0)) ; strength *= step(0.8, mod(vUv.y * 10.0 , 1.0)) ; gl_FragColor =vec4(strength,strength,strength,1); }\",\"precision lowp float; varying vec2 vUv; void main(){ // 13条纹相减 float strength = step(0.8, mod(vUv.x * 10.0 , 1.0)) ; strength -= step(0.8, mod(vUv.y * 10.0 , 1.0)) ; gl_FragColor =vec4(strength,strength,strength,1); }\",\"precision lowp float; varying vec2 vUv; void main(){ // 14方块图形 float strength = step(0.2, mod(vUv.x * 10.0 , 1.0)) ; strength *= step(0.2, mod(vUv.y * 10.0 , 1.0)) ; gl_FragColor =vec4(strength,strength,strength,1); }\",\"precision lowp float; uniform float uTime; varying vec2 vUv; void main(){ float barX = step(0.4, mod((vUv.x+uTime*0.1) * 10.0 , 1.0))*step(0.8, mod(vUv.y * 10.0 , 1.0)) ; float barX = step(0.4, mod(vUv.x * 10.0 - 0.2 , 1.0))*step(0.8, mod(vUv.y * 10.0 , 1.0)) ; float barY = step(0.4, mod(vUv.y * 10.0 , 1.0))*step(0.8, mod(vUv.x * 10.0 , 1.0)) ; float strength = barX+barY; gl_FragColor =vec4(strength,strength,strength,1); }\",\"precision lowp float; uniform float uTime; varying vec2 vUv; void main(){ float barX = step(0.4, mod((vUv.x+uTime*0.1) * 10.0 , 1.0))*step(0.8, mod(vUv.y * 10.0 , 1.0)) ; float barX = step(0.4, mod(vUv.x * 10.0 - 0.2 , 1.0))*step(0.8, mod(vUv.y * 10.0 , 1.0)) ; float barY = step(0.4, mod(vUv.y * 10.0 , 1.0))*step(0.8, mod(vUv.x * 10.0 , 1.0)) ; float strength = barX+barY; gl_FragColor = vec4(vUv,1,strength); }\"]},\"203\":{\"c\":[\"GLSL\"]},\"204\":{\"h\":\"GLSL图形（二）\",\"t\":[\"precision lowp float; varying vec2 vUv; void main(){ float strength = abs(vUv.x - 0.5) ; gl_FragColor =vec4(strength,strength,strength,1); }\",\"precision lowp float; varying vec2 vUv; void main(){ float strength =min(abs(vUv.x - 0.5), abs(vUv.y - 0.5)); gl_FragColor =vec4(strength,strength,strength,1); }\",\"precision lowp float; varying vec2 vUv; void main(){ float strength =max(abs(vUv.x - 0.5), abs(vUv.y - 0.5)) ; gl_FragColor =vec4(strength,strength,strength,1); }\",\"precision lowp float; varying vec2 vUv; void main(){ float strength =step(0.2,max(abs(vUv.x - 0.5), abs(vUv.y - 0.5))) ; gl_FragColor =vec4(strength,strength,strength,1); }\",\"precision lowp float; varying vec2 vUv; void main(){ float strength =1.0-step(0.2,max(abs(vUv.x - 0.5), abs(vUv.y - 0.5))) ; gl_FragColor =vec4(strength,strength,strength,1); }\",\"precision lowp float; varying vec2 vUv; void main(){ float strength = floor(vUv.x*10.0)/10.0; gl_FragColor =vec4(strength,strength,strength,1); }\",\"precision lowp float; varying vec2 vUv; void main(){ float strength = floor(vUv.y*10.0)/10.0; gl_FragColor =vec4(strength,strength,strength,1); }\",\"precision lowp float; varying vec2 vUv; void main(){ float strength = floor(vUv.x*10.0)/10.0*floor(vUv.y*10.0)/10.0; gl_FragColor =vec4(strength,strength,strength,1); }\",\"precision lowp float; varying vec2 vUv; void main(){ float strength = ceil(vUv.x*10.0)/10.0*ceil(vUv.y*10.0)/10.0; gl_FragColor =vec4(strength,strength,strength,1); }\",\"precision lowp float; varying vec2 vUv; float random (vec2 st) { return fract(sin(dot(st.xy,vec2(12.9898,78.233)))*43758.5453123); } void main(){ float strength = random(vUv); gl_FragColor =vec4(strength,strength,strength,1); }\",\"precision lowp float; varying vec2 vUv; float random (vec2 st) { return fract(sin(dot(st.xy,vec2(12.9898,78.233)))*43758.5453123); } void main(){ float strength = ceil(vUv.x*10.0)/10.0*ceil(vUv.y*10.0)/10.0; strength = random(vec2(strength,strength)); gl_FragColor =vec4(strength,strength,strength,1); }\",\"precision lowp float; varying vec2 vUv; void main(){ float strength = length(vUv); gl_FragColor =vec4(strength,strength,strength,1); }\",\"precision lowp float; varying vec2 vUv; void main(){ float strength =1.0 - distance(vUv,vec2(0.5,0.5)); gl_FragColor =vec4(strength,strength,strength,1); }\",\"precision lowp float; varying vec2 vUv; void main(){ float strength = 1.0 - step(0.5,distance(vUv,vec2(0.5))+0.25) ; gl_FragColor =vec4(strength,strength,strength,1); }\",\"precision lowp float; varying vec2 vUv; void main(){ float strength = step(0.5,distance(vUv,vec2(0.5))+0.35) ; strength *= (1.0 - step(0.5,distance(vUv,vec2(0.5))+0.25)) ; gl_FragColor =vec4(strength,strength,strength,1); }\",\"precision lowp float; varying vec2 vUv; void main(){ float strength = abs(distance(vUv,vec2(0.5))-0.25) ; gl_FragColor =vec4(strength,strength,strength,1); }\"]},\"205\":{\"c\":[\"GLSL\"]},\"206\":{\"h\":\"GLSL图形（三）\",\"t\":[\"precision lowp float; varying vec2 vUv; void main(){ float strength = step(0.1,abs(distance(vUv,vec2(0.5))-0.25)) ; gl_FragColor =vec4(strength,strength,strength,1); }\",\"precision lowp float; varying vec2 vUv; void main(){ float strength = 1.0 - step(0.1,abs(distance(vUv,vec2(0.5))-0.25)) ; gl_FragColor =vec4(strength,strength,strength,1); }\",\"precision lowp float; varying vec2 vUv; void main(){ vec2 waveUv = vec2( vUv.x, vUv.y+sin(vUv.x*30.0)*0.1 ); float strength = 1.0 - step(0.01,abs(distance(waveUv,vec2(0.5))-0.25)) ; gl_FragColor =vec4(strength,strength,strength,1); }\",\"precision lowp float; varying vec2 vUv; void main(){ vec2 waveUv = vec2( vUv.x+sin(vUv.y*30.0)*0.1, vUv.y+sin(vUv.x*30.0)*0.1 ); float strength = 1.0 - step(0.01,abs(distance(waveUv,vec2(0.5))-0.25)) ; gl_FragColor =vec4(strength,strength,strength,1); }\",\"precision lowp float; varying vec2 vUv; void main(){ vec2 waveUv = vec2( vUv.x+sin(vUv.y*100.0)*0.1, vUv.y+sin(vUv.x*100.0)*0.1 ); float strength = 1.0 - step(0.01,abs(distance(waveUv,vec2(0.5))-0.25)) ; gl_FragColor =vec4(strength,strength,strength,1); }\",\"precision lowp float; varying vec2 vUv; void main(){ float angle = atan(vUv.x,vUv.y); float strength = angle; gl_FragColor =vec4(strength,strength,strength,1); }\",\"precision lowp float; varying vec2 vUv; void main(){ float angle = atan(vUv.x-0.5,vUv.y-0.5); float strength = (angle+3.14)/6.28; gl_FragColor =vec4(strength,strength,strength,1); }\",\"precision lowp float; varying vec2 vUv; void main(){ float alpha = 1.0 - step(0.5,distance(vUv,vec2(0.5))); float angle = atan(vUv.x-0.5,vUv.y-0.5); float strength = (angle+3.14)/6.28; gl_FragColor =vec4(strength,strength,strength,alpha); }\",\"precision lowp float; varying vec2 vUv; uniform float uTime; // 旋转函数 vec2 rotate(vec2 uv, float rotation, vec2 mid) { return vec2( cos(rotation) * (uv.x - mid.x) + sin(rotation) * (uv.y - mid.y) + mid.x, cos(rotation) * (uv.y - mid.y) - sin(rotation) * (uv.x - mid.x) + mid.y ); } void main(){ // vec2 rotateUv = rotate(vUv,3.14*0.25,vec2(0.5)); vec2 rotateUv = rotate(vUv,-uTime*5.0,vec2(0.5)); float alpha = 1.0 - step(0.5,distance(vUv,vec2(0.5))); float angle = atan(rotateUv.x-0.5,rotateUv.y-0.5); float strength = (angle+3.14)/6.28; gl_FragColor =vec4(strength,strength,strength,alpha); }\",\"precision lowp float; varying vec2 vUv; uniform float uTime; #define PI 3.1415926535897932384626433832795 void main(){ float angle = atan(vUv.x-0.5,vUv.y-0.5)/PI; float strength = mod(angle*10.0,1.0); gl_FragColor =vec4(strength,strength,strength,1); }\",\"precision lowp float; varying vec2 vUv; uniform float uTime; #define PI 3.1415926535897932384626433832795 void main(){ float angle = atan(vUv.x-0.5,vUv.y-0.5)/(2.0*PI); float strength = sin(angle*100.0); gl_FragColor =vec4(strength,strength,strength,1); }\",\"precision lowp float; varying vec2 vUv; uniform float uTime; // 随机函数 float random (vec2 st) { return fract(sin(dot(st.xy,vec2(12.9898,78.233)))*43758.5453123); } // 噪声函数 float noise (in vec2 _st) { vec2 i = floor(_st); vec2 f = fract(_st); // Four corners in 2D of a tile float a = random(i); float b = random(i + vec2(1.0, 0.0)); float c = random(i + vec2(0.0, 1.0)); float d = random(i + vec2(1.0, 1.0)); vec2 u = f * f * (3.0 - 2.0 * f); return mix(a, b, u.x) + (c - a)* u.y * (1.0 - u.x) + (d - b) * u.x * u.y; } void main(){ float strength = noise(vUv); gl_FragColor =vec4(strength,strength,strength,1); }\",\"precision lowp float; varying vec2 vUv; uniform float uTime; // 随机函数 float random (vec2 st) { return fract(sin(dot(st.xy,vec2(12.9898,78.233)))*43758.5453123); } // 噪声函数 float noise (in vec2 _st) { vec2 i = floor(_st); vec2 f = fract(_st); // Four corners in 2D of a tile float a = random(i); float b = random(i + vec2(1.0, 0.0)); float c = random(i + vec2(0.0, 1.0)); float d = random(i + vec2(1.0, 1.0)); vec2 u = f * f * (3.0 - 2.0 * f); return mix(a, b, u.x) + (c - a)* u.y * (1.0 - u.x) + (d - b) * u.x * u.y; } void main(){ float strength = step(0.5,noise(vUv * 100.0)) ; gl_FragColor =vec4(strength,strength,strength,1); }\",\"precision lowp float; varying vec2 vUv; uniform float uTime; vec4 permute(vec4 x) { return mod(((x*34.0)+1.0)*x, 289.0); } vec2 fade(vec2 t) { return t*t*t*(t*(t*6.0-15.0)+10.0); } // 噪声函数 float cnoise(vec2 P) { vec4 Pi = floor(P.xyxy) + vec4(0.0, 0.0, 1.0, 1.0); vec4 Pf = fract(P.xyxy) - vec4(0.0, 0.0, 1.0, 1.0); Pi = mod(Pi, 289.0); // To avoid truncation effects in permutation vec4 ix = Pi.xzxz; vec4 iy = Pi.yyww; vec4 fx = Pf.xzxz; vec4 fy = Pf.yyww; vec4 i = permute(permute(ix) + iy); vec4 gx = 2.0 * fract(i * 0.0243902439) - 1.0; // 1/41 = 0.024... vec4 gy = abs(gx) - 0.5; vec4 tx = floor(gx + 0.5); gx = gx - tx; vec2 g00 = vec2(gx.x,gy.x); vec2 g10 = vec2(gx.y,gy.y); vec2 g01 = vec2(gx.z,gy.z); vec2 g11 = vec2(gx.w,gy.w); vec4 norm = 1.79284291400159 - 0.85373472095314 * vec4(dot(g00, g00), dot(g01, g01), dot(g10, g10), dot(g11, g11)); g00 *= norm.x; g01 *= norm.y; g10 *= norm.z; g11 *= norm.w; float n00 = dot(g00, vec2(fx.x, fy.x)); float n10 = dot(g10, vec2(fx.y, fy.y)); float n01 = dot(g01, vec2(fx.z, fy.z)); float n11 = dot(g11, vec2(fx.w, fy.w)); vec2 fade_xy = fade(Pf.xy); vec2 n_x = mix(vec2(n00, n01), vec2(n10, n11), fade_xy.x); float n_xy = mix(n_x.x, n_x.y, fade_xy.y); return 2.3 * n_xy; } void main(){ float strength = sin(cnoise(vUv * 10.0)*5.0+uTime) ; gl_FragColor =vec4(strength,strength,strength,1); }\",\"precision lowp float; varying vec2 vUv; uniform float uTime; vec4 permute(vec4 x) { return mod(((x*34.0)+1.0)*x, 289.0); } vec2 fade(vec2 t) { return t*t*t*(t*(t*6.0-15.0)+10.0); } // 噪声函数 float cnoise(vec2 P) { vec4 Pi = floor(P.xyxy) + vec4(0.0, 0.0, 1.0, 1.0); vec4 Pf = fract(P.xyxy) - vec4(0.0, 0.0, 1.0, 1.0); Pi = mod(Pi, 289.0); // To avoid truncation effects in permutation vec4 ix = Pi.xzxz; vec4 iy = Pi.yyww; vec4 fx = Pf.xzxz; vec4 fy = Pf.yyww; vec4 i = permute(permute(ix) + iy); vec4 gx = 2.0 * fract(i * 0.0243902439) - 1.0; // 1/41 = 0.024... vec4 gy = abs(gx) - 0.5; vec4 tx = floor(gx + 0.5); gx = gx - tx; vec2 g00 = vec2(gx.x,gy.x); vec2 g10 = vec2(gx.y,gy.y); vec2 g01 = vec2(gx.z,gy.z); vec2 g11 = vec2(gx.w,gy.w); vec4 norm = 1.79284291400159 - 0.85373472095314 * vec4(dot(g00, g00), dot(g01, g01), dot(g10, g10), dot(g11, g11)); g00 *= norm.x; g01 *= norm.y; g10 *= norm.z; g11 *= norm.w; float n00 = dot(g00, vec2(fx.x, fy.x)); float n10 = dot(g10, vec2(fx.y, fy.y)); float n01 = dot(g01, vec2(fx.z, fy.z)); float n11 = dot(g11, vec2(fx.w, fy.w)); vec2 fade_xy = fade(Pf.xy); vec2 n_x = mix(vec2(n00, n01), vec2(n10, n11), fade_xy.x); float n_xy = mix(n_x.x, n_x.y, fade_xy.y); return 2.3 * n_xy; } void main(){ float strength =1.0 - abs(cnoise(vUv * 10.0)) ; gl_FragColor =vec4(strength,strength,strength,1); }\",\"precision lowp float; varying vec2 vUv; uniform float uTime; vec4 permute(vec4 x) { return mod(((x*34.0)+1.0)*x, 289.0); } vec2 fade(vec2 t) { return t*t*t*(t*(t*6.0-15.0)+10.0); } // 噪声函数 float cnoise(vec2 P) { vec4 Pi = floor(P.xyxy) + vec4(0.0, 0.0, 1.0, 1.0); vec4 Pf = fract(P.xyxy) - vec4(0.0, 0.0, 1.0, 1.0); Pi = mod(Pi, 289.0); // To avoid truncation effects in permutation vec4 ix = Pi.xzxz; vec4 iy = Pi.yyww; vec4 fx = Pf.xzxz; vec4 fy = Pf.yyww; vec4 i = permute(permute(ix) + iy); vec4 gx = 2.0 * fract(i * 0.0243902439) - 1.0; // 1/41 = 0.024... vec4 gy = abs(gx) - 0.5; vec4 tx = floor(gx + 0.5); gx = gx - tx; vec2 g00 = vec2(gx.x,gy.x); vec2 g10 = vec2(gx.y,gy.y); vec2 g01 = vec2(gx.z,gy.z); vec2 g11 = vec2(gx.w,gy.w); vec4 norm = 1.79284291400159 - 0.85373472095314 * vec4(dot(g00, g00), dot(g01, g01), dot(g10, g10), dot(g11, g11)); g00 *= norm.x; g01 *= norm.y; g10 *= norm.z; g11 *= norm.w; float n00 = dot(g00, vec2(fx.x, fy.x)); float n10 = dot(g10, vec2(fx.y, fy.y)); float n01 = dot(g01, vec2(fx.z, fy.z)); float n11 = dot(g11, vec2(fx.w, fy.w)); vec2 fade_xy = fade(Pf.xy); vec2 n_x = mix(vec2(n00, n01), vec2(n10, n11), fade_xy.x); float n_xy = mix(n_x.x, n_x.y, fade_xy.y); return 2.3 * n_xy; } void main(){ vec3 purpleColor = vec3(1.0, 0.0, 1.0); vec3 greenColor = vec3(1.0, 1.0, 1.0); vec3 uvColor = vec3(vUv,1.0); float strength = step(0.9,sin(cnoise(vUv * 10.0)*20.0)) ; vec3 mixColor = mix(greenColor,uvColor,strength); // gl_FragColor =vec4(mixColor,1.0); gl_FragColor =vec4(mixColor,1.0); }\"]},\"207\":{\"c\":[\"GLSL\"]},\"208\":{\"h\":\"Hello GLSL\",\"t\":[\"参考：《The Book of Shaders》\"]},\"209\":{\"h\":\"Fragment Shader(片段着色器)\",\"t\":[\"#ifdef GL_ES precision mediump float; #endif uniform float u_time; void main() { gl_FragColor = vec4(1.0,0.0,1.0,1.0); }\",\"Shaders 是一系列的指令，但是这些指令会对屏幕上的每个像素同时下达。\",\"shader 语言 有一个 main 函数，会在最后返回颜色值。这点和 C 语言很像。\",\"最终的像素颜色取决于预设的全局变量 gl_FragColor。\",\"这个类 C 语言有内建的变量（像 gl_FragColor），函数和数据类型。\",\"vec4 类型，可以推测这四个变元分别响应红，绿，蓝和透明度通道。\",\"所有的宏都以 # 开头。预编译会在编译前一刻发生，把所有的命令复制到 #defines 里，检查#ifdef 条件句是否已被定义， #ifndef 条件句是否没有被定义。\",\"loat 类型在 shaders 中非常重要，所以精度非常重要。更低的精度会有更快的渲染速度，但是会以质量为代价。“低”（precision lowp float;），“高”（precision highp float;）。\",\"GLSL 语言规范并不保证变量会被自动转换类别。\",\"void main() { gl_FragColor = vec4(1,0,0,1); // 出错 }\"]},\"210\":{\"h\":\"uniform\",\"t\":[\"每个线程和其他线程之间不能有数据交换，但我们能从 CPU 给每个线程输入数据。因为显卡的架构，所有线程的输入值必须统一（uniform），而且必须设为只读。 输入值叫做 uniform （统一值），它们的数据类型通常为：float, vec2, vec3, vec4, mat2, mat3, mat4, sampler2D and samplerCube。\",\"#ifdef GL_ES precision mediump float; #endif uniform float u_time; void main() { gl_FragColor = vec4(abs(sin(u_time)),0.0,0.0,1.0); }\"]},\"211\":{\"h\":\"gl_FragCoord\",\"t\":[\"gl_FragCoord存储了活动线程正在处理的像素或屏幕碎片的坐标。 因为每个像素的坐标都不同，所以我们把它叫做 varying （变化值）。\",\" #ifdef GL_ES precision mediump float; #endif uniform vec2 u_resolution; uniform vec2 u_mouse; uniform float u_time; void main() { vec2 st = gl_FragCoord.xy/u_resolution; gl_FragColor = vec4(st.x,st.y,0.0,1.0); }\"]},\"212\":{\"h\":\"GLSL\",\"t\":[\"GLSL 代表 openGL Shading Language，openGL 着色语言\"]},\"213\":{\"c\":[\"GLSL\"]},\"214\":{\"h\":\"GLSL中的矩阵\"},\"215\":{\"h\":\"平移\",\"t\":[\"// Author @patriciogv ( patriciogonzalezvivo.com ) - 2015 #ifdef GL_ES precision mediump float; #endif uniform vec2 u_resolution; uniform float u_time; float box(in vec2 _st, in vec2 _size){ _size = vec2(0.5) - _size*0.5; vec2 uv = smoothstep(_size, _size+vec2(0.001), _st); uv *= smoothstep(_size, _size+vec2(0.001), vec2(1.0)-_st); return uv.x*uv.y; } float cross(in vec2 _st, float _size){ return box(_st, vec2(_size,_size/4.)) + box(_st, vec2(_size/4.,_size)); } void main(){ vec2 st = gl_FragCoord.xy/u_resolution.xy; vec3 color = vec3(0.0); // To move the cross we move the space vec2 translate = vec2(cos(u_time),sin(u_time)); st += translate*0.35; // Show the coordinates of the space on the background // color = vec3(st.x,st.y,0.0); // Add the shape on the foreground color += vec3(cross(st,0.25)); gl_FragColor = vec4(color,1.0); }\"]},\"216\":{\"h\":\"旋转\",\"t\":[\"// Author @patriciogv ( patriciogonzalezvivo.com ) - 2015 #ifdef GL_ES precision mediump float; #endif #define PI 3.14159265359 uniform vec2 u_resolution; uniform float u_time; mat2 rotate2d(float _angle){ return mat2(cos(_angle),-sin(_angle), sin(_angle),cos(_angle)); } float box(in vec2 _st, in vec2 _size){ _size = vec2(0.5) - _size*0.5; vec2 uv = smoothstep(_size, _size+vec2(0.001), _st); uv *= smoothstep(_size, _size+vec2(0.001), vec2(1.0)-_st); return uv.x*uv.y; } float cross(in vec2 _st, float _size){ return box(_st, vec2(_size,_size/4.)) + box(_st, vec2(_size/4.,_size)); } void main(){ vec2 st = gl_FragCoord.xy/u_resolution.xy; vec3 color = vec3(0.0); // move space from the center to the vec2(0.0) st -= vec2(0.5); // rotate the space st = rotate2d( sin(u_time)*PI ) * st; // move it back to the original place st += vec2(0.5); // Show the coordinates of the space on the background // color = vec3(st.x,st.y,0.0); // Add the shape on the foreground color += vec3(cross(st,0.4)); gl_FragColor = vec4(color,1.0); }\"]},\"217\":{\"h\":\"缩放\",\"t\":[\"// Author @patriciogv ( patriciogonzalezvivo.com ) - 2015 #ifdef GL_ES precision mediump float; #endif #define PI 3.14159265359 uniform vec2 u_resolution; uniform float u_time; mat2 scale(vec2 _scale){ return mat2(_scale.x,0.0, 0.0,_scale.y); } float box(in vec2 _st, in vec2 _size){ _size = vec2(0.5) - _size*0.5; vec2 uv = smoothstep(_size, _size+vec2(0.001), _st); uv *= smoothstep(_size, _size+vec2(0.001), vec2(1.0)-_st); return uv.x*uv.y; } float cross(in vec2 _st, float _size){ return box(_st, vec2(_size,_size/4.)) + box(_st, vec2(_size/4.,_size)); } void main(){ vec2 st = gl_FragCoord.xy/u_resolution.xy; vec3 color = vec3(0.0); st -= vec2(0.5); st = scale( vec2(sin(u_time)+1.0) ) * st; st += vec2(0.5); // Show the coordinates of the space on the background // color = vec3(st.x,st.y,0.0); // Add the shape on the foreground color += vec3(cross(st,0.2)); gl_FragColor = vec4(color,1.0); }\"]},\"218\":{\"h\":\"雷达\",\"t\":[\"//作者： https://www.shadertoy.com/view/4s2SRt # ifdef GL_ES precision mediump float; # endif uniform vec3 iResolution; uniform float iTime; uniform vec4 iDate; //Sci-fi radar based on the work of gmunk for Oblivion //http://work.gmunk.com/OBLIVION-GFX #define SMOOTH(r,R) (1.0-smoothstep(R-1.0,R+1.0, r)) #define RANGE(a,b,x) ( step(a,x)*(1.0-step(b,x)) ) #define RS(a,b,x) ( smoothstep(a-1.0,a+1.0,x)*(1.0-smoothstep(b-1.0,b+1.0,x)) ) #define M_PI 3.1415926535897932384626433832795 #define blue1 vec3(0.74,0.95,1.00) #define blue2 vec3(0.87,0.98,1.00) #define blue3 vec3(0.35,0.76,0.83) #define blue4 vec3(0.953,0.969,0.89) #define red vec3(1.00,0.38,0.227) #define MOV(a,b,c,d,t) (vec2(a*cos(t)+b*cos(0.1*(t)), c*sin(t)+d*cos(0.1*(t)))) float movingLine(vec2 uv, vec2 center, float radius) { //angle of the line float theta0 = 90.0 * iTime; vec2 d = uv - center; float r = sqrt( dot( d, d ) ); if(r<radius) { //compute the distance to the line theta=theta0 vec2 p = radius*vec2(cos(theta0*M_PI/180.0), -sin(theta0*M_PI/180.0)); float l = length( d - p*clamp( dot(d,p)/dot(p,p), 0.0, 1.0) ); d = normalize(d); //compute gradient based on angle difference to theta0 float theta = mod(180.0*atan(d.y,d.x)/M_PI+theta0,360.0); float gradient = clamp(1.0-theta/90.0,0.0,1.0); return SMOOTH(l,1.0)+0.5*gradient; } else return 0.0; } float circle(vec2 uv, vec2 center, float radius, float width) { float r = length(uv - center); return SMOOTH(r-width/2.0,radius)-SMOOTH(r+width/2.0,radius); } float circle2(vec2 uv, vec2 center, float radius, float width, float opening) { vec2 d = uv - center; float r = sqrt( dot( d, d ) ); d = normalize(d); if( abs(d.y) > opening ) return SMOOTH(r-width/2.0,radius)-SMOOTH(r+width/2.0,radius); else return 0.0; } float circle3(vec2 uv, vec2 center, float radius, float width) { vec2 d = uv - center; float r = sqrt( dot( d, d ) ); d = normalize(d); float theta = 180.0*(atan(d.y,d.x)/M_PI); return smoothstep(2.0, 2.1, abs(mod(theta+2.0,45.0)-2.0)) * mix( 0.5, 1.0, step(45.0, abs(mod(theta, 180.0)-90.0)) ) * (SMOOTH(r-width/2.0,radius)-SMOOTH(r+width/2.0,radius)); } float triangles(vec2 uv, vec2 center, float radius) { vec2 d = uv - center; return RS(-8.0, 0.0, d.x-radius) * (1.0-smoothstep( 7.0+d.x-radius,9.0+d.x-radius, abs(d.y))) + RS( 0.0, 8.0, d.x+radius) * (1.0-smoothstep( 7.0-d.x-radius,9.0-d.x-radius, abs(d.y))) + RS(-8.0, 0.0, d.y-radius) * (1.0-smoothstep( 7.0+d.y-radius,9.0+d.y-radius, abs(d.x))) + RS( 0.0, 8.0, d.y+radius) * (1.0-smoothstep( 7.0-d.y-radius,9.0-d.y-radius, abs(d.x))); } float _cross(vec2 uv, vec2 center, float radius) { vec2 d = uv - center; int x = int(d.x); int y = int(d.y); float r = sqrt( dot( d, d ) ); if( (r<radius) && ( (x==y) || (x==-y) ) ) return 1.0; else return 0.0; } float dots(vec2 uv, vec2 center, float radius) { vec2 d = uv - center; float r = sqrt( dot( d, d ) ); if( r <= 2.5 ) return 1.0; if( ( r<= radius) && ( (abs(d.y+0.5)<=1.0) && ( mod(d.x+1.0, 50.0) < 2.0 ) ) ) return 1.0; else if ( (abs(d.y+0.5)<=1.0) && ( r >= 50.0 ) && ( r < 115.0 ) ) return 0.5; else return 0.0; } float bip1(vec2 uv, vec2 center) { return SMOOTH(length(uv - center),3.0); } float bip2(vec2 uv, vec2 center) { float r = length(uv - center); float R = 8.0+mod(87.0*iTime, 80.0); return (0.5-0.5*cos(30.0*iTime)) * SMOOTH(r,5.0) + SMOOTH(6.0,r)-SMOOTH(8.0,r) + smoothstep(max(8.0,R-20.0),R,r)-SMOOTH(R,r); } void main( ) { vec3 finalColor; vec2 uv = gl_FragCoord.xy; //center of the image vec2 c = iResolution.xy/2.0; finalColor = vec3( 0.3*_cross(uv, c, 240.0) ); finalColor += ( circle(uv, c, 100.0, 1.0) + circle(uv, c, 165.0, 1.0) ) * blue1; finalColor += (circle(uv, c, 240.0, 2.0) );//+ dots(uv,c,240.0)) * blue4; finalColor += circle3(uv, c, 313.0, 4.0) * blue1; finalColor += triangles(uv, c, 315.0 + 30.0*sin(iTime)) * blue2; finalColor += movingLine(uv, c, 240.0) * blue3; finalColor += circle(uv, c, 10.0, 1.0) * blue3; finalColor += 0.7 * circle2(uv, c, 262.0, 1.0, 0.5+0.2*cos(iTime)) * blue3; if( length(uv-c) < 240.0 ) { //animate some bips with random movements vec2 p = 130.0*MOV(1.3,1.0,1.0,1.4,3.0+0.1*iTime); finalColor += bip1(uv, c+p) * vec3(1,1,1); p = 130.0*MOV(0.9,-1.1,1.7,0.8,-2.0+sin(0.1*iTime)+0.15*iTime); finalColor += bip1(uv, c+p) * vec3(1,1,1); p = 50.0*MOV(1.54,1.7,1.37,1.8,sin(0.1*iTime+7.0)+0.2*iTime); finalColor += bip2(uv,c+p) * red; } gl_FragColor = vec4( finalColor, 1.0 ); }\"]},\"219\":{\"c\":[\"GLSL\"]},\"220\":{\"h\":\"GLSL中的语句\",\"t\":[\"参考：\",\"https://zhuanlan.zhihu.com/p/349296191\",\"https://colin1994.github.io/2017/11/11/OpenGLES-Lesson04/\",\"https://learnopengl.com/Advanced-OpenGL/Advanced-GLSL\",\"https://learnopengl-cn.readthedocs.io/\",\"https://registry.khronos.org/OpenGL-Refpages/gl4/\",\"《OpenGL 编程指南》\"]},\"221\":{\"h\":\"操作符\",\"t\":[\"操作符\",\"描述\",\"()\",\"用于表达式组合，函数调用，构造\",\"[]\",\"数组下标，向量或矩阵的选择器\",\".\",\"结构体和向量的成员选择\",\"++ –\",\"前缀或后缀的自增自减操作符\",\"+ – !\",\"一元操作符，表示正 负 逻辑非\",\"_ /\",\"乘 除操作符\",\"+ -\",\"二元操作符 表示加 减操作\",\"<> <= >= == !=\",\"小于，大于，小于等于， 大于等于，等于，不等于 判断符\",\"&& ^^\",\"逻辑与 ，或， 异或\",\"?:\",\"条件判断符\",\"= += –= _= /=\",\"赋值操作符\",\",\",\"表示序列\"]},\"222\":{\"c\":[\"GLSL\"]},\"223\":{\"h\":\"GLSL中的形状\",\"t\":[\"部分参考： 《OpenGL 编程指南》、《The Book of Shader》\"]},\"224\":{\"h\":\"长方形\",\"t\":[\"// Author @patriciogv - 2015 // http://patriciogonzalezvivo.com #ifdef GL_ES precision mediump float; #endif uniform vec2 u_resolution; uniform vec2 u_mouse; uniform float u_time; void main(){ vec2 st = gl_FragCoord.xy/u_resolution.xy; vec3 color = vec3(0.0); // bottom-left // step 比0.1大 1 小 0 vec2 bl = step(vec2(0.1),st); //放大边框 float pct = bl.x * bl.y; // top-right // vec2 tr = step(vec2(0.1),1.0-st); // pct *= tr.x * tr.y; color = vec3(pct); gl_FragColor = vec4(color,1.0); }\",\"#ifdef GL_ES precision mediump float; # endif uniform vec2 u_resolution; void main() { vec2 uv = gl_FragCoord.xy / u_resolution.xy; vec4 color = vec4(0.129, 0.588, 0.953, 1.0); if (uv.x < 0.6 && uv.y < 0.6) { gl_FragColor = color; } else { gl_FragColor = vec4(1.0, 1.0, 1.0, 1.0); // gl_FragColor = color; } }\"]},\"225\":{\"h\":\"圆\",\"t\":[\"// Author @patriciogv - 2015 // http://patriciogonzalezvivo.com #ifdef GL_ES precision mediump float; #endif uniform vec2 u_resolution; uniform vec2 u_mouse; uniform float u_time; void main(){ vec2 st = gl_FragCoord.xy/u_resolution; float pct = 0.0; // a. The DISTANCE from the pixel to the center pct = distance(st,vec2(0.5)); // b. The LENGTH of the vector // from the pixel to the center // vec2 toCenter = vec2(0.5)-st; // pct = length(toCenter); // c. The SQUARE ROOT of the vector // from the pixel to the center // vec2 tC = vec2(0.5)-st; // pct = sqrt(tC.x*tC.x+tC.y*tC.y); vec3 color = vec3(pct); gl_FragColor = vec4( color, 1.0 ); }\",\"//作者：https://www.shadertoy.com/view/XdlSDs # ifdef GL_ES precision mediump float; # endif uniform vec3 iResolution; uniform float iTime; uniform vec4 iDate; void main() { vec2 p = (2.0*gl_FragCoord.xy-iResolution.xy)/iResolution.y; float tau = 3.1415926535*2.0; float a = atan(p.x,p.y); float r = length(p)*0.75; vec2 uv = vec2(a/tau,r); //get the color float xCol = (uv.x - (iTime / 3.0)) * 3.0; xCol = mod(xCol, 3.0); vec3 horColour = vec3(0.25, 0.25, 0.25); if (xCol < 1.0) { horColour.r += 1.0 - xCol; horColour.g += xCol; } else if (xCol < 2.0) { xCol -= 1.0; horColour.g += 1.0 - xCol; horColour.b += xCol; } else { xCol -= 2.0; horColour.b += 1.0 - xCol; horColour.r += xCol; } // draw color beam uv = (2.0 *uv) - 1.0; float beamWidth = (0.7+0.5*cos(uv.x*10.0*tau*0.15*clamp(floor(5.0 + 10.0*cos(iTime)), 0.0, 10.0)))* abs(1.0 / (30.0 *uv.y)); vec3 horBeam = vec3(beamWidth); gl_FragColor = vec4((( horBeam)* horColour), 1.0); }\"]},\"226\":{\"h\":\"距离场\",\"t\":[\"通过“空间距离”来重新解释什么是图形。这种技巧被称之为“距离场”\",\"// Author @patriciogv - 2015 // http://patriciogonzalezvivo.com #ifdef GL_ES precision mediump float; #endif uniform vec2 u_resolution; uniform vec2 u_mouse; uniform float u_time; float circle(in vec2 _st, in float _radius){ vec2 dist = _st-vec2(0.5); return 1.-smoothstep(_radius-(_radius*0.01), _radius+(_radius*0.01), dot(dist,dist)*4.0); } void main(){ vec2 st = gl_FragCoord.xy/u_resolution.xy; vec3 color = vec3(circle(st,0.9)); gl_FragColor = vec4( color, 1.0 ); }\",\"#ifdef GL_ES precision mediump float; #endif #define PI 3.14159265359 #define TWO_PI 6.28318530718 uniform vec2 u_resolution; uniform vec2 u_mouse; uniform float u_time; // Reference to // http://thndl.com/square-shaped-shaders.html void main(){ vec2 st = gl_FragCoord.xy/u_resolution.xy; st.x *= u_resolution.x/u_resolution.y; vec3 color = vec3(0.0); float d = 0.0; // Remap the space to -1. to 1. st = st *2.-1.; // Number of sides of your shape int N = 3; // Angle and radius from the current pixel float a = atan(st.x,st.y)+PI; float r = TWO_PI/float(N); // Shaping function that modulate the distance d = cos(floor(.5+a/r)*r-a)*length(st); color = vec3(1.0-smoothstep(.4,.41,d)); // color = vec3(d); gl_FragColor = vec4(color,1.0); }\"]},\"227\":{\"h\":\"极坐标下的图形\",\"t\":[\"Robert Mangold - Untitled (2008)\",\"y = cos(x*3.); //y = abs(cos(x*3.)); //y = abs(cos(x*2.5))*0.5+0.3; //y = abs(cos(x*12.)*sin(x*3.))*.8+.1; //y = smoothstep(-.5,1., cos(x*10.))*0.2+0.5;\",\"// Author @patriciogv - 2015 // http://patriciogonzalezvivo.com #ifdef GL_ES precision mediump float; #endif uniform vec2 u_resolution; uniform vec2 u_mouse; uniform float u_time; void main(){ vec2 st = gl_FragCoord.xy/u_resolution.xy; vec3 color = vec3(0.0); vec2 pos = vec2(0.5)-st; float r = length(pos)*2.0; float a = atan(pos.y,pos.x); float f = cos(a*3.); // f = abs(cos(a*3.)); // f = abs(cos(a*2.5))*.5+.3; // f = abs(cos(a*12.)*sin(a*3.))*.8+.1; // f = smoothstep(-.5,1., cos(a*10.))*0.2+0.5; color = vec3( 1.-smoothstep(f,f+0.02,r) ); gl_FragColor = vec4(color, 1.0); }\"]},\"228\":{\"c\":[\"GLSL\"]},\"229\":{\"h\":\"GLSL的变量\"},\"230\":{\"h\":\"基本数据类型变量\",\"t\":[\"float\",\"数据类型：单精度浮点数，占用 32 位（4 字节）内存。\",\"取值范围：约为 -3.4 × 10^38 到 3.4 × 10^38，可以表示的有效数字位数为 6~7 位左右。\",\"示例：\",\"float radius = 1.0; // 声明一个单精度浮点型变量 radius float pi = 3.14159; // 声明一个单精度浮点型变量 pi float volume = 4.0 / 3.0 * pi * pow(radius, 3.0); // 计算球体的体积\",\"int\",\"数据类型：整型变量，占用 32 位（4 字节）内存。\",\"取值范围：约为 -2.1 × 10^9 到 2.1 × 10^9。\",\"示例：\",\"int width = 800; // 声明一个整型变量 width，表示画布的宽度 int height = 600; // 声明一个整型变量 height，表示画布的高度 int area = width * height; // 计算画布的面积\",\"bool\",\"数据类型：布尔型变量，只有 true 和 false 两个值，占用 8 位（1 字节）内存。\",\"示例：\",\"bool isBlack = true; // 声明一个布尔型变量 isBlack，表示颜色是否为黑色 bool isWhite = false; // 声明一个布尔型变量 isWhite，表示颜色是否为白色\",\"double\",\"数据类型：双精度浮点数，占用 64 位（8 字节）内存。\",\"取值范围：约为 -1.7 × 10^308 到 1.7 × 10^308，可以表示的有效数字位数为 15~16 位左右。\",\"示例：\",\"double radius = 1.0; // 声明一个双精度浮点型变量 radius double pi = 3.14159265358979; // 声明一个双精度浮点型变量 pi double volume = 4.0 / 3.0 * pi * pow(radius, 3.0); // 计算球体的体积\",\"uint\",\"数据类型：无符号整型变量，占用 32 位（4 字节）内存。\",\"取值范围：约为 0 到 4.2 × 10^9。\",\"示例：\",\"uint num1 = 123; // 声明一个无符号整型变量 num1 uint num2 = 456; // 声明一个无符号整型变量 num2 uint sum = num1 + num2; // 计算 num1 和 num2 的和\"]},\"231\":{\"h\":\"向量类型变量\",\"t\":[\"vec2\",\"定义格式：vec2(x, y) 或 vec2(v)\",\"功能：表示二维向量，其中的 x 和 y 分别表示向量在 x 轴和 y 轴方向的分量。\",\"参数说明：\",\"x, y：表示向量在 x 轴和 y 轴方向的分量，可以是标量、浮点数或整数；\",\"v：表示长度为 2 的浮点型向量。\",\"示例：\",\"/* 定义一个二维坐标点。 */ vec2 point = vec2(1.0, 2.0);\",\"vec3\",\"定义格式：vec3(x, y, z) 或 vec3(v, z)\",\"功能：表示三维向量，其中的 x、y 和 z 分别表示向量在 x 轴、y 轴和 z 轴方向的分量。\",\"参数说明：\",\"x, y, z：表示向量在 x 轴、y 轴和 z 轴方向的分量，可以是标量、浮点数或整数；\",\"v：表示长度为 2 或 3 的浮点型向量；\",\"z：表示向量在 z 轴方向的分量，可以是标量、浮点数或整数。\",\"示例：\",\"/* 定义一个颜色。 */ vec3 color = vec3(1.0, 0.0, 0.0);\",\"vec4\",\"定义格式：vec4(x, y, z, w) 或 vec4(v, z, w) 或 vec4(v, w)\",\"功能：表示四维向量，其中的 x、y、z 和 w 分别表示向量在 x 轴、y 轴、z 轴和 w 轴方向的分量。\",\"参数说明：\",\"x, y, z, w：表示向量在 x 轴、y 轴、z 轴和 w 轴方向的分量，可以是标量、浮点数或整数；\",\"v：表示长度为 2、3 或 4 的浮点型向量；\",\"z, w：表示向量在 z 轴和 w 轴方向的分量，可以是标量、浮点数或整数。\",\"示例：\",\"/* 定义一个四维坐标点。 */ vec4 point = vec4(1.0, 2.0, 3.0, 1.0);\",\"bvec2、bvec3、bvec4\",\"定义格式：bvec2(x, y)、bvec3(x, y, z) 或 bvec4(x, y, z, w)\",\"功能：表示布尔类型的向量，其中的 x、y、z 和 w 分别表示向量在不同维度上的布尔值。\",\"参数说明：\",\"x, y, z, w：表示向量在不同维度上的布尔值。\",\"示例：\",\"/* 定义一个布尔向量。 */ bvec3 testVec = bvec3(true, false, true);\",\"ivec2、ivec3、ivec4\",\"定义格式：ivec2(x, y)、ivec3(x, y, z) 或 ivec4(x, y, z, w)\",\"功能：表示整型向量，其中的 x、y、z 和 w 分别表示向量在 x 轴、y 轴、z 轴和 w 轴方向的分量。\",\"参数说明：\",\"x, y, z, w：表示向量在不同维度上的整数分量。\",\"示例：\",\"/* 定义一个整型向量。 */ ivec3 pos = ivec3(1, 2, 3);\",\"uvec2、uvec3、uvec4\",\"定义格式：uvec2(x, y)、uvec3(x, y, z) 或 uvec4(x, y, z, w)\",\"功能：表示无符号整型向量，其中的 x、y、z 和 w 分别表示向量在 x 轴、y 轴、z 轴和 w 轴方向的分量。\",\"参数说明：\",\"x, y, z, w：表示向量在不同维度上的无符号整数分量。\",\"示例：\",\"/* 定义一个无符号整型向量。 */ uvec4 indices = uvec4(0, 1, 2, 3);\",\"dvec2、dvec3、dvec4\",\"定义格式：dvec2(x, y)、dvec3(x, y, z) 或 dvec4(x, y, z, w)\",\"功能：表示双精度浮点型向量，其中的 x、y、z 和 w 分别表示向量在 x 轴、y 轴、z 轴和 w 轴方向的分量。\",\"参数说明：\",\"x, y, z, w：表示向量在不同维度上的双精度浮点数分量。\",\"示例：\",\"/* 定义一个双精度浮点型向量。 */ dvec2 pos = dvec2(1.0, 2.0);\"]},\"232\":{\"h\":\"数组类型变量\",\"t\":[\"GLSL 中的数组变量可以用来存储一组相同类型的变量。数组的长度需要在定义时指定，且长度必须是一个常量表达式，也就是在编译时就可以确定的值。 例如，定义一个长度为 5 的 float 数组：\",\"float array[5];\",\"可以使用下标运算符（[]）来访问数组中的元素，从 0 开始索引。例如，访问数组 array 中的第三个元素：\",\"float value = array[2];\",\"GLSL 中的数组也支持循环遍历，可以使用 for 循环来遍历数组中的每一个元素。例如，遍历数组 array 中的所有元素并将它们相加：\",\"float sum = 0.0; for (int i = 0; i < 5; i++) { sum += array[i]; }\",\"在 GLSL 中，还可以使用数组作为函数的参数，从而方便地将一组数据传递给函数进行处理。例如，定义一个函数 average，求平均值并返回：\",\"float average(float values[], int length) { float sum = 0.0; for (int i = 0; i < length; i++) { sum += values[i]; } return sum / float(length); }\",\"如果数组变量在着色器中不需要修改，可以将其声明为 const 类型。这样做可以提高代码的可读性和可维护性，因为这样声明后，代码中只有对数组的读取访问，而不会有对数组的写入行为。例如，定义一个常量数组 colors：\",\"const vec4 colors[3] = vec4[](vec4(1.0, 0.0, 0.0, 1.0), vec4(0.0, 1.0, 0.0, 1.0), vec4(0.0, 0.0, 1.0, 1.0));\"]},\"233\":{\"h\":\"矩阵类型变量\",\"t\":[\"mat2\",\"定义格式：mat2(m00, m01, m10, m11)\",\"功能：定义一个 2x2 的矩阵，用给定的数值填充矩阵。\",\"参数说明：\",\"m00：矩阵中第一行第一列的值。\",\"m01：矩阵中第一行第二列的值。\",\"m10：矩阵中第二行第一列的值。\",\"m11：矩阵中第二行第二列的值。\",\"示例：\",\"/* 使用 mat2 定义一个 2x2 的旋转矩阵。 */ float angle = 90.0; mat2 rotationMatrix = mat2(cos(angle), -sin(angle), sin(angle), cos(angle));\",\"mat3\",\"定义格式：mat3(m00, m01, m02, m10, m11, m12, m20, m21, m22)\",\"功能：定义一个 3x3 的矩阵，用给定的数值填充矩阵。\",\"参数说明：\",\"m00：矩阵中第一行第一列的值。\",\"m01：矩阵中第一行第二列的值。\",\"m02：矩阵中第一行第三列的值。\",\"m10：矩阵中第二行第一列的值。\",\"m11：矩阵中第二行第二列的值。\",\"m12：矩阵中第二行第三列的值。\",\"m20：矩阵中第三行第一列的值。\",\"m21：矩阵中第三行第二列的值。\",\"m22：矩阵中第三行第三列的值。\",\"示例：\",\"/* 使用 mat3 定义一个 3x3 的缩放矩阵。 */ float scaleX = 2.0; float scaleY = 3.0; mat3 scaleMatrix = mat3(scaleX, 0.0, 0.0, 0.0, scaleY, 0.0, 0.0, 0.0, 1.0);\",\"mat4\",\"定义格式：mat4(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33)\",\"功能：定义一个 4x4 的矩阵，用给定的数值填充矩阵。\",\"参数说明：\",\"m00：矩阵中第一行第一列的值。\",\"m01：矩阵中第一行第二列的值。\",\"m02：矩阵中第一行第三列的值。\",\"m03：矩阵中第一行第四列的值。\",\"m10：矩阵中第二行第一列的值。\",\"m11：矩阵中第二行第二列的值。\",\"m12：矩阵中第二行第三列的值。\",\"m13：矩阵中第二行第四列的值。\",\"m20：矩阵中第三行第一列的值。\",\"m21：矩阵中第三行第二列的值。\",\"m22：矩阵中第三行第三列的值。\",\"m23：矩阵中第三行第四列的值。\",\"m30：矩阵中第四行第一列的值。\",\"m31：矩阵中第四行第二列的值。\",\"m32：矩阵中第四行第三列的值。\",\"m33：矩阵中第四行第四列的值。\",\"示例：\",\"/* 使用 mat4 定义一个 4x4 的透视投影矩阵。 */ float fovy = radians(45.0); float aspect = 1.0; float near = 0.1; float far = 100.0; mat4 perspectiveMatrix = mat4(1.0 / (aspect * tan(fovy/2)), 0.0, 0.0, 0.0, 0.0, 1.0 / tan(fovy/2), 0.0, 0.0, 0.0, 0.0, (-near - far) / (near - far), -1.0, 0.0, 0.0, (2.0 * near * far) / (near - far), 0.0);\",\"mat2x3、mat2x4、mat3x2、mat3x4、mat4x2、mat4x3\",\"定义格式：类似 mat2、mat3、mat4，只是中间的 x 后面跟着的数字代表矩阵的列数。\",\"功能：定义不同维度的矩阵类型。\",\"示例：\",\"/* 使用 mat3x2 定义一个 3x2 的矩阵。 */ mat3x2 matrix = mat3x2(1.0, 0.0, 0.0, 1.0, 0.0, 0.0);\"]},\"234\":{\"h\":\"结构体类型变量\",\"t\":[\"struct\",\"使用格式：struct <结构体名> { <成员列表> };\",\"功能：定义一个结构体类型。\",\"参数说明：\",\"<结构体名>：结构体类型的名称。\",\"<成员列表>：结构体类型中成员的定义。\",\"示例：\",\"/* 定义一个点的结构体类型。 */ struct Point { vec3 position; vec3 color; };\",\"当我们需要管理一组相关的变量时，就可以使用结构体类型。在 GLSL 中，结构体定义方式与 C 语言类似，如下所示：\",\"struct MyStruct { float x; float y; float z; };\",\"这个结构体定义了三个浮点数成员变量：x、y、z。我们可以用点运算符来访问结构体的成员变量：\",\"MyStruct myStruct; myStruct.x = 1.0; myStruct.y = 2.0; myStruct.z = 3.0;\",\"在 GLSL 中，我们也可以在一个结构体中嵌套另一个结构体，例如：\",\"struct Material { vec3 ambient; vec3 diffuse; vec3 specular; float shininess; }; struct MyObject { vec3 position; vec3 rotation; vec3 scale; Material material; };\",\"这个例子中，MyObject 包含了一个 vec3 类型的 position、rotation 和 scale，以及一个 Material 类型的 material。有了这个结构体，我们就可以更方便地管理物体的位置、旋转、缩放和材质属性。\"]},\"235\":{\"h\":\"纹理类型变量\",\"t\":[\"sampler1D\",\"表示一维纹理采样器。\",\"示例：\",\"uniform sampler1D myTexture; // 声明一个一维纹理采样器 float texCoord = 0.5; vec4 texColor = texture(myTexture, texCoord); // 在指定纹理采样器和纹理坐标下采样纹理\",\"sampler2D\",\"表示二维纹理采样器。\",\"示例：\",\"uniform sampler2D myTexture; // 声明一个二维纹理采样器 vec2 texCoord = vec2(0.5, 0.5); vec4 texColor = texture(myTexture, texCoord); // 在指定纹理采样器和纹理坐标下采样纹理\",\"sampler3D\",\"表示三维纹理采样器。\",\"示例：\",\"uniform sampler3D myTexture; // 声明一个三维纹理采样器 vec3 texCoord = vec3(0.5, 0.5, 0.5); vec4 texColor = texture(myTexture, texCoord); // 在指定纹理采样器和纹理坐标下采样纹理\",\"samplerCube\",\"表示立方体纹理采样器。\",\"示例：\",\"uniform samplerCube myTexture; // 声明一个立方体纹理采样器 vec3 texCoord = vec3(0.5, 0.5, 0.5); vec4 texColor = texture(myTexture, texCoord); // 在指定纹理采样器和纹理坐标下采样纹理\",\"sampler1DShadow\",\"表示一维纹理阴影采样器。\",\"示例：\",\"uniform sampler1DShadow myShadow; // 声明一个一维纹理阴影采样器 float texCoord = 0.5; float bias = 0.01; float shadowValue = texture(myShadow, vec3(texCoord, bias)); // 在指定纹理采样器和纹理坐标下采样纹理\",\"sampler2DShadow\",\"表示二维纹理阴影采样器。\",\"示例：\",\"uniform sampler2DShadow myShadow; // 声明一个二维纹理阴影采样器 vec2 texCoord = vec2(0.5, 0.5); float bias = 0.01; float shadowValue = texture(myShadow, vec3(texCoord, bias)); // 在指定纹理采样器和纹理坐标下采样纹理\"]},\"236\":{\"h\":\"修饰符类型变量\",\"t\":[\"in\",\"使用格式：in <type> <name>\",\"功能：将外部数据输入到着色器中，用于顶点着色器和片元着色器中声明输入变量。输入变量的值由于渲染管线输出阶段提供。\",\"参数说明：\",\"<type>：输入变量的类型。\",\"<name>：输入变量的名称。\",\"示例：\",\"/* 顶点着色器中声明一个输入变量，表示顶点位置。 */ in vec3 vertexPosition;\",\"out\",\"使用格式：out <type> <name>\",\"功能：将着色器输出发送到渲染管线的下一阶段，用于顶点着色器和片元着色器中声明输出变量。输出变量的值由着色器计算。\",\"参数说明：\",\"<type>：输出变量的类型。\",\"<name>：输出变量的名称。\",\"示例：\",\"/* 顶点着色器中声明一个输出变量，表示变换后的顶点位置。 */ out vec4 transformedPosition;\",\"uniform\",\"使用格式：uniform <type> <name>\",\"功能：在顶点着色器和片元着色器中声明全局变量，并将其作为传递参数的一部分传递到着色器中。这些变量值在渲染管线的各个阶段之间保持不变。\",\"参数说明：\",\"<type>：变量的类型。\",\"<name>：变量的名称。\",\"示例：\",\"/* 片元着色器中使用 uniform 声明一个颜色变量，表示物体的颜色。 */ uniform vec4 objectColor;\",\"const\",\"使用格式：const <type> <name> = <value>\",\"功能：声明在编译时就已经确定的常量。常量的值不能在程序运行期间更改。\",\"参数说明：\",\"<type>：常量的类型。\",\"<name>：常量的名称。\",\"<value>：常量的值。\",\"示例：\",\"/* 声明一个常量表示 pi 的值。 */ const float PI = 3.1415926;\",\"attribute\",\"使用格式：attribute <type> <name>\",\"功能：在顶点着色器中声明输入变量，表示每个顶点的属性。渲染管线输出阶段提供这些变量的值，并将它们传递到片元着色器中的 varying 变量中。\",\"参数说明：\",\"<type>：顶点属性的类型。\",\"<name>：顶点属性的名称。\",\"示例：\",\"/* 顶点着色器中声明一个 attribute 变量，表示顶点法向量。 */ attribute vec3 vertexNormal;\",\"varying\",\"使用格式：varying <type> <name>\",\"功能：在顶点着色器和片元着色器之间声明变量，表示顶点属性在顶点到像素的过程中插值的结果。顶点着色器计算 varying 变量的值，然后通过渲染管线输出阶段传递给片元着色器。\",\"参数说明：\",\"<type>：变量的类型。\",\"<name>：变量的名称。\",\"示例：\",\"/* 顶点着色器中声明一个 varying 变量，表示变换后的顶点法向量。 */ varying vec3 transformedNormal;\"]},\"237\":{\"h\":\"uniforms\",\"t\":[\"尽管每个线程和其他线程之间不能有数据交换，但我们能从 CPU 给每个线程输入数据。因为显卡的架构，所有线程的输入值必须统一（uniform），而且必须设为只读。\",\"let uniforms = { u_time: { type: \\\"f\\\", value: 1.0 }, u_resolution: { type: \\\"v2\\\", value: new THREE.Vector2() }, }; let material = new THREE.ShaderMaterial({ uniforms: uniforms, vertexShader: document.getElementById(\\\"vertexShader\\\").textContent, fragmentShader: document.getElementById(\\\"fragmentShader\\\").textContent, }); function onWindowResize(event) { renderer.setSize(window.innerWidth, window.innerHeight); uniforms.u_resolution.value.x = renderer.domElement.width; uniforms.u_resolution.value.y = renderer.domElement.height; } let clock = new THREE.Clock(); function render() { uniforms.u_time.value += clock.getDelta(); renderer.render(scene, camera); }\"]},\"238\":{\"h\":\"特殊类型变量\",\"t\":[\"void\",\"使用格式：void\",\"功能：表示无类型、无返回值的函数。通常用于定义一个不返回值的函数。\",\"参数说明：无参数。\",\"示例：\",\"/* 定义一个不返回值的函数。 */ void printMessage() { printf(\\\"Hello, world!\\\\n\\\"); }\",\"function\",\"使用格式：return_type function_name(arguments) { function_body }\",\"功能：定义一个可以重复使用的函数，根据传入参数不同进行不同的操作。\",\"参数说明：\",\"return_type：函数返回值的类型。\",\"function_name：函数名。\",\"arguments：函数参数，用逗号分隔多个参数，每个参数包括类型和名称。\",\"function_body：函数体，包括函数执行的代码。\",\"示例：\",\"/* 定义一个加法函数。 */ float add(float x, float y) { return x + y; }\",\"layout\",\"使用格式：layout (qualifier) type name\",\"功能：控制变量如何被存储和传递。\",\"参数说明：\",\"qualifier：布局限定符，例如 location、binding 等。\",\"type：变量类型，例如 float、vec2、vec3 等。\",\"name：变量名，用户自定义的标识符。\",\"示例：\",\"/* 使用 layout 限定符标记顶点位置和颜色的位置。 */ layout (location = 0) in vec3 position; layout (location = 1) in vec4 color; void main() { gl_Position = vec4(position, 1.0); }\",\"gl_\",\"使用格式：内置变量有多种，例如 gl_Position、gl_FragColor、gl_PointSize 等。\",\"功能：内置变量由 GLSL 定义和提供，可以用于访问 OpenGL ES 渲染管线中的状态和数据。\",\"参数说明：内置变量具体用法和含义根据不同的内置变量而异。\",\"示例：\",\"/* 使用 gl_Position 变量设置顶点位置。 */ void main() { gl_Position = vec4(position, 1.0); } /* 使用 gl_FragColor 变量设置片元颜色。 */ void main() { gl_FragColor = vec4(1.0, 0.0, 0.0, 1.0); }\"]},\"239\":{\"h\":\"顶点着色器变量\",\"t\":[\"gl_FogCoord\",\"类型：float\",\"功能：雾的深度值，在雾效果中使用。\",\"示例：\",\"/* 在片元着色器中使用 gl_FogCoord 计算雾效果。 注意：需启用雾效果，具体方式为调用 glEnable(GL_FOG)。 */ varying vec4 v_Position; uniform vec4 u_FogColor; uniform float u_FogNear; uniform float u_FogFar; void main() { // 计算顶点到相机的距离。 float depth = length(v_Position.xyz); // 计算雾的深度值。 gl_FogCoord = (depth - u_FogNear) / (u_FogFar - u_FogNear); // 输出颜色值。 gl_FragColor = u_FogColor; }\",\"gl_ModelViewMatrix\",\"类型：mat4\",\"功能：物体从模型坐标系转换到相机坐标系的矩阵。包括了模型变换和相机变换。\",\"示例：\",\"/* 将物体从模型坐标系转换到相机坐标系。 */ attribute vec3 a_Position; uniform mat4 u_ModelViewMatrix; uniform mat4 u_ProjectionMatrix; void main() { gl_Position = u_ProjectionMatrix * u_ModelViewMatrix * vec4(a_Position, 1.0); }\",\"gl_ProjectionMatrix\",\"类型：mat4\",\"功能：将相机坐标系中的点投影到裁剪空间的矩阵。\",\"示例：\",\"/* 将相机坐标系中的点投影到裁剪空间中。 */ attribute vec3 a_Position; uniform mat4 u_ModelViewMatrix; uniform mat4 u_ProjectionMatrix; void main() { gl_Position = u_ProjectionMatrix * u_ModelViewMatrix * vec4(a_Position, 1.0); }\",\"gl_ModelViewProjectionMatrix\",\"类型：mat4\",\"功能：将物体从模型坐标系转换到裁剪空间的矩阵。包括了模型变换、相机变换和投影变换。\",\"示例：\",\"/* 将物体从模型坐标系转换到裁剪空间中。 */ attribute vec3 a_Position; uniform mat4 u_ModelViewProjectionMatrix; void main() { gl_Position = u_ModelViewProjectionMatrix * vec4(a_Position, 1.0); }\",\"gl_TextureMatrix\",\"类型：mat4\",\"功能：纹理坐标变换矩阵。与纹理坐标配合使用，用于实现纹理的旋转、平移和缩放等变换效果。\",\"示例：\",\"/* 在顶点着色器中使用纹理坐标变换矩阵实现纹理旋转效果。 */ attribute vec2 a_TexCoord; uniform mat4 u_TextureMatrix; varying vec2 v_TexCoord; void main() { v_TexCoord = (u_TextureMatrix * vec4(a_TexCoord, 0.0, 1.0)).xy; gl_Position = vec4(a_Position, 1.0); }\",\"gl_NormalMatrix\",\"类型：mat4\",\"功能：法向量变换矩阵，在光照计算中使用。用于将物体表面的法向量从模型坐标系变换到相机坐标系，并保持其在坐标系中的垂直性。\",\"示例：\",\"/* 在顶点着色器中使用法向量变换矩阵将法向量从模型坐标系变换到相机坐标系中。 */ attribute vec3 a_Normal; uniform mat4 u_NormalMatrix; void main() { gl_Normal = mat3(u_NormalMatrix) * a_Normal; gl_Position = vec4(a_Position, 1.0); }\",\"gl_ModelViewMatrixInverse\",\"类型：mat4。\",\"描述：模型视图矩阵的逆矩阵。用于将顶点从视图空间转换回模型空间。\",\"示例：\",\"/* 使用 gl_ModelViewMatrixInverse 将顶点从视图空间转换回模型空间。 */ vec4 vertexInViewSpace = gl_ModelViewMatrix * gl_Vertex; vec4 vertexInModelSpace = gl_ModelViewMatrixInverse * vertexInViewSpace;\",\"gl_ProjectionMatrixInverse\",\"类型：mat4。\",\"描述：投影矩阵的逆矩阵。用于将顶点从裁剪空间转换回标准化设备空间。\",\"示例：\",\"/* 使用 gl_ProjectionMatrixInverse 将顶点从裁剪空间转换回标准化设备空间。 */ vec4 vertexInClipSpace = gl_ModelViewProjectionMatrix * gl_Vertex; vec4 vertexInNormalizedDeviceSpace = gl_ProjectionMatrixInverse * vertexInClipSpace;\",\"gl_ModelViewProjectionMatrixInverse\",\"类型：mat4。\",\"描述：模型视图投影矩阵的逆矩阵。用于将顶点从裁剪空间转换回模型空间。\",\"示例：\",\"/* 使用 gl_ModelViewProjectionMatrixInverse 将顶点从裁剪空间转换回模型空间。 */ vec4 vertexInClipSpace = gl_ModelViewProjectionMatrix * gl_Vertex; vec4 vertexInModelSpace = gl_ModelViewProjectionMatrixInverse * vertexInClipSpace;\",\"gl_TextureMatrixInverse\",\"类型：mat4。\",\"描述：纹理矩阵的逆矩阵。常用于对纹理坐标进行变换。\",\"示例：\",\"/* 使用 gl_TextureMatrixInverse 对纹理坐标进行变换。 */ vec4 texCoord = gl_TextureMatrix * vec4(gl_MultiTexCoord0.xy, 0.0, 1.0); vec4 transformedTexCoord = gl_TextureMatrixInverse * texCoord;\",\"gl_ModelViewMatrixTranspose\",\"功能：表示模型视图变换矩阵的转置矩阵。该矩阵可以将当前顶点从模型坐标系变换到视图坐标系。\",\"示例：\",\"/* 假设需要对顶点进行模型视图变换，将模型坐标系下的顶点坐标变换到视图坐标系下，并将变换后的顶点坐标传递给片元着色器。*/ attribute vec3 aPosition; uniform mat4 uModelViewMatrix; uniform mat4 uProjectionMatrix; void main() { gl_Position = uProjectionMatrix * uModelViewMatrix * vec4(aPosition, 1.0); }\",\"gl_ProjectionMatrixTranspose\",\"功能：表示投影变换矩阵的转置矩阵。该矩阵可以将当前顶点从视图坐标系变换到裁剪坐标系。\",\"示例：\",\"/* 假设需要将顶点从视图坐标系变换到裁剪坐标系，并将变换后的坐标传递给片元着色器。*/ attribute vec4 aPosition; uniform mat4 uProjectionMatrix; void main() { gl_Position = uProjectionMatrix * aPosition; }\",\"gl_ModelViewProjectionMatrixTranspose\",\"功能：表示模型视图投影变换矩阵的转置矩阵。该矩阵可以将当前顶点从模型坐标系变换到裁剪坐标系。\",\"示例：\",\"/* 假设需要对顶点进行模型视图投影变换，将模型坐标系下的顶点坐标变换到裁剪坐标系下，并将变换后的顶点坐标传递给片元着色器。*/ attribute vec3 aPosition; uniform mat4 uModelViewProjectionMatrix; void main() { gl_Position = uModelViewProjectionMatrix * vec4(aPosition, 1.0); }\",\"gl_TextureMatrixTranspose\",\"功能：表示纹理变换矩阵的转置矩阵。该矩阵可以将当前顶点从纹理坐标系变换到纹理单元坐标系。\",\"示例：\",\"/* 假设需要对纹理坐标进行变换，将纹理坐标系下的顶点坐标变换到纹理单元坐标系下，并将变换后的顶点坐标传递给片元着色器。*/ attribute vec2 aTexCoord; uniform mat4 uTextureMatrix; void main() { gl_TexCoord[0] = uTextureMatrix * vec4(aTexCoord, 0.0, 1.0); }\",\"gl_ModelViewMatrixInverseTranspose\",\"功能：表示模型视图变换的逆转置矩阵，用于对法线进行变换。该矩阵可以将当前法线从模型坐标系变换到视图坐标系。\",\"示例：\",\"/* 假设需要对法线进行变换，将模型坐标系下的法线变换到视图坐标系下，并将变换后的法线传递给片元着色器。*/ attribute vec3 aNormal; uniform mat4 uModelViewMatrix; uniform mat4 uNormalMatrix; void main() { vec3 transformedNormal = normalize(mat3(uModelViewMatrix) * uNormalMatrix * aNormal); // 使用变换后的法线进行接下来的计算 }\",\"gl_ProjectionMatrixInverseTranspose\",\"功能：表示投影变换的逆转置矩阵，用于对法线进行变换。该矩阵可以将当前法线从视图坐标系变换到裁剪坐标系。\",\"示例：\",\"/* 假设需要对法线进行变换，将视图坐标系下的法线变换到裁剪坐标系下，并将变换后的法线传递给片元着色器。*/ attribute vec3 aNormal; uniform mat4 uProjectionMatrix; uniform mat4 uNormalMatrix; void main() { vec3 transformedNormal = normalize(mat3(uProjectionMatrix) * uNormalMatrix * aNormal); // 使用变换后的法线进行接下来的计算 }\",\"gl_ModelViewProjectionMatrixInverseTranspose\",\"类型：4x4 矩阵\",\"功能：计算模型视图投影矩阵的逆转置矩阵，并将其传递给片元着色器，用于法线向量变换。\",\"示例：\",\"/* 将法线向量变换为视图坐标系下的向量。 */ varying vec3 vertexNormal; uniform mat4 modelViewProjectionMatrix; uniform mat4 gl_ModelViewProjectionMatrixInverseTranspose; void main() { vec3 norm = normalize(gl_ModelViewProjectionMatrixInverseTranspose * vec4(vertexNormal, 0.0)).xyz; /* ... */ }\",\"gl_TextureMatrixInverseTranspose\",\"类型：4x4 矩阵\",\"功能：计算纹理矩阵的逆转置矩阵，并将其传递给片元着色器，用于法线向量变换。\",\"示例：\",\"/* 将法线向量变换为纹理坐标系下的向量。 */ varying vec3 vertexNormal; varying vec2 vertexTexCoord; uniform mat4 textureMatrix; uniform mat4 gl_TextureMatrixInverseTranspose; void main() { vec3 norm = normalize(gl_TextureMatrixInverseTranspose * textureMatrix * vec4(vertexNormal, 0.0)).xyz; /* ... */ }\",\"gl_DepthRangeNear\",\"类型：浮点数\",\"功能：场景深度的近平面。\",\"示例：\",\"/* 计算深度值。 */ varying vec4 vertexPosition; uniform float gl_DepthRangeNear; uniform float gl_DepthRangeFar; void main() { gl_Position = gl_ModelViewProjectionMatrix * vertexPosition; gl_Position.z = (gl_Position.z / gl_Position.w) * 0.5 + 0.5; gl_Position.z = mix(gl_DepthRangeNear, gl_DepthRangeFar, gl_Position.z); }\",\"gl_DepthRangeFar\",\"类型：浮点数\",\"功能：场景深度的远平面。\",\"示例：与 gl_DepthRangeNear 用法相同。\",\"gl_TexCoord[]\",\"类型：四维向量数组\",\"功能：传递纹理坐标给片元着色器。\",\"示例：\",\"/* 在片元着色器中使用纹理坐标进行纹理采样。 */ varying vec4 gl_TexCoord[4]; uniform sampler2D texture; void main() { vec4 color = texture2D(texture, gl_TexCoord[0].xy); /* ... */ }\",\"gl_FogFragCoord\",\"类型：浮点数\",\"功能：计算像素与雾起点之间的距离，并将这个距离传递给片元着色器，用于计算雾的程度。\",\"示例：\",\"/* 计算与雾起点之间的距离并进行颜色混合。 */ varying float gl_FogFragCoord; uniform vec4 fogColor; void main() { /* ... */ float fogFactor = clamp((gl_FogFragCoord - fogStart) / (fogEnd - fogStart), 0.0, 1.0); gl_FragColor = mix(fogColor, gl_FragColor, fogFactor); }\",\"gl_Position\",\"类型：四维向量\",\"功能：计算顶点位置的裁剪坐标，并将其传递给下一阶段的渲染管线。\",\"示例：\",\"/* 计算顶点位置的裁剪坐标。 */ attribute vec4 position; uniform mat4 modelViewProjectionMatrix; void main() { gl_Position = modelViewProjectionMatrix * position; }\",\"gl_PointSize\",\"类型：浮点数\",\"功能：设置渲染点的大小。\",\"示例：\",\"/* 设置点的大小并进行颜色混合。 */ varying float dotSize; void main() { /* ... */ gl_PointSize = dotSize; }\"]},\"240\":{\"h\":\"片段着色器\",\"t\":[\"gl_FragCoord\",\"类型：vec4\",\"功能：表示当前像素的屏幕坐标，其中 x 和 y 表示像素在屏幕上的坐标值，z 表示深度值，w 固定为 1.0。\",\"示例：\",\"/* 将当前像素的屏幕坐标传入 uniform 变量中。 */ uniform vec4 u_screenCoord; void main() { u_screenCoord = gl_FragCoord; ... }\",\"gl_FrontFacing\",\"类型：bool\",\"功能：表示当前三角形的正面朝向。如果为 true，表示正面朝向屏幕；如果为 false，表示背面朝向屏幕。\",\"示例：\",\"/* 根据 gl_FrontFacing 来决定片元颜色。 */ void main() { if (gl_FrontFacing) { gl_FragColor = vec4(1.0, 0.0, 0.0, 1.0); // 正面为红色 } else { gl_FragColor = vec4(0.0, 1.0, 0.0, 1.0); // 背面为绿色 } }\",\"gl_PointCoord\",\"类型：vec2\",\"功能：表示当前片元在点精灵中的坐标，取值范围为 [0, 1]。仅当当前渲染为点精灵时有效。\",\"示例：\",\"/* 使用 gl_PointCoord 来计算片元颜色。 */ void main() { float dist = length(gl_PointCoord - vec2(0.5)); if (dist < 0.5) { gl_FragColor = vec4(1.0, 0.0, 0.0, 1.0); // 点中心为红色 } else { gl_FragColor = vec4(0.0, 1.0, 0.0, 1.0); // 点边缘为绿色 } }\",\"gl_FragColor\",\"类型：vec4\",\"功能：表示当前片元的颜色。最终渲染结果将取决于此变量的值。\",\"示例：\",\"/* 将颜色写入 gl_FragColor 中。 */ void main() { gl_FragColor = vec4(1.0, 0.0, 0.0, 1.0); // 红色 }\",\"gl_FragDepth\",\"类型：float\",\"功能：表示当前片元在深度缓冲中的深度值。如果修改此变量的值，则可以手动控制深度测试的通过情况。\",\"示例：\",\"/* 设置深度值，确保物体不会被遮挡。 */ void main() { gl_FragDepth = 0.5; // 将深度值设置为 0.5 ... }\",\"gl_FragData\",\"类型：vec4[]\",\"功能：表示当前片元写入的颜色值。如果使用了多个颜色缓冲，则可以使用此变量来指定写入不同的缓冲区。\",\"示例：\",\"/* 使用多个颜色缓冲，分别写入不同的颜色值。 */ layout(location = 0) out vec4 outColor1; layout(location = 1) out vec4 outColor2; void main() { outColor1 = vec4(1.0, 0.0, 0.0, 1.0); // 将红色写入第一个颜色缓冲 outColor2 = vec4(0.0, 1.0, 0.0, 1.0); // 将绿色写入第二个颜色缓冲 ... }\",\"gl_SampleMask\",\"功能：获取多重采样缓冲区中每个样本的掩码值。掩码值确定哪些样本需要参与着色器的执行。默认情况下，所有样本的掩码值均为 0xFF，表示所有样本都参与着色器的执行。\",\"类型：uint\",\"示例：\",\"/* 获取当前片元着色器中第 0 个样本的掩码值。*/ uint mask = gl_SampleMask[0];\",\"gl_SampleID\",\"功能：获取当前片元所在的样本序号。序号从 0 开始，最多可以有 GL_MAX_SAMPLES 个样本。\",\"类型：int\",\"示例：\",\"/* 获取当前片元所在的样本序号。*/ int sampleID = gl_SampleID;\",\"gl_SamplePosition\",\"功能：获取当前片元所在样本的位置坐标。位置坐标是归一化设备坐标系下的坐标。\",\"类型：vec2\",\"示例：\",\"/* 获取当前片元所在样本的位置坐标。*/ vec2 position = gl_SamplePosition;\",\"gl_PrimitiveID\",\"功能：获取当前片元所在的图元 ID。\",\"类型：int\",\"示例：\",\"/* 获取当前片元所在的图元 ID。*/ int primitiveID = gl_PrimitiveID;\",\"gl_ViewportIndex\",\"功能：获取当前片元所在的视口的索引值。\",\"类型：int\",\"示例：\",\"/* 获取当前片元所在的视口的索引值。*/ int viewportIndex = gl_ViewportIndex;\",\"gl_Layer\",\"功能：获取当前片元所在的图元的渲染层次。\",\"类型：int\",\"示例：\",\"/* 获取当前片元所在的图元的渲染层次。*/ int layer = gl_Layer;\",\"gl_ClipDistance[]\",\"功能：获取当前片元到每个裁剪平面的距离值。裁剪平面是由 gl_ClipDistance 顶点输出变量设置的。\",\"类型：float\",\"示例：\",\"/* 获取当前片元到第 0 个裁剪平面的距离值。*/ float distance = gl_ClipDistance[0];\",\"gl_FragStencilRef\",\"功能：获取当前片元的模板测试参考值。参考值是由 glStencilFuncSeparate 函数设置的。\",\"类型：int\",\"示例：\",\"/* 获取当前片元的模板测试参考值。*/ int stencilRef = gl_FragStencilRef;\"]},\"241\":{\"h\":\"精度限定符\",\"t\":[\"限定符\",\"描述\",\"highp\",\"满足顶点着色语言的最低要求。对片段着色语言是可选项\",\"mediump\",\"满足片段着色语言的最低要求，其对于范围和精度的要求必须不低于 lowp 并且不高于 highp\",\"lowp\",\"范围和精度可低于 mediump，但仍可以表示所有颜色通道的所有颜色值\",\"精度限定符的使用格式：\",\"precision qualifier type precisionLevel; //例如 precision highp float; precision mediump float; precision lowp float;\",\"precision：表示精度限定符的关键字。\",\"qualifier：限定符的具体类型，包括 lowp、mediump 和 highp。\",\"type：需要指定精度的数据类型，例如 float、vec2、mat3 等。\",\"precisionLevel：指定数据类型的精度级别，必须是 int 值或常量表达式。\",\"精度限定符的作用：\",\"主要作用是控制变量存储的精度，可以用于性能优化，提高代码效率。\",\"不同的 GPU 和移动设备支持的精度级别不同，使用精度限定符可以确保在不同设备上获得一致的运行结果。\",\"精度限定符的三种类型：\",\"lowp：代表低精度，通常用于节省 GPU 资源。\",\"mediump：代表中等精度，通常用于平衡 GPU 资源和图像质量。\",\"highp：代表高精度，通常用于提高图像质量，但会消耗大量 GPU 资源。\",\"举例说明：\",\"precision highp float; vec2 a [10];\",\"上述代码中，a 数组的元素将使用 highp 精度级别存储，这可能会占用较多的 GPU 资源，但可以获得更高的图像精度。\"]},\"242\":{\"c\":[\"GLSL\"]},\"243\":{\"h\":\"水烟雾云\",\"t\":[\"# vertexShader uniform vec3 uColor; uniform float uFrequency; uniform float uScale; uniform float uTim varying float vElevation; varying vec2 vUv // highp -2^16-2^16 // mediump = -2^10-2^10 // lowp -2^8-2^8 precision highp float; void main(){ vec4 modelPosition = modelMatrix * vec4( position, 1.0 modelPosition.z += sin((modelPosition.x+uTime) * uFrequency)*uScale ; modelPosition.z += cos((modelPosition.y+uTime) * uFrequency)*uScale vElevation = modelPosition.z; gl_Position = projectionMatrix * viewMatrix * modelPosition; vUv = u }\",\"# vertexShader precision lowp float; uniform float uWaresFrequency; uniform float uScale; uniform float uNoiseFrequency; uniform float uNoiseScale; uniform float uXzScale; uniform float uTime; uniform float uXspeed; uniform float uZspeed; uniform float uNoiseSpeed; // 计算出的高度传递给片元着色器 varying float vElevation; // 随机函数 float random (vec2 st) { return fract(sin(dot(st.xy,vec2(12.9898,78.233)))*43758.5453123); } // 旋转函数 vec2 rotate(vec2 uv, float rotation, vec2 mid) { return vec2( cos(rotation) * (uv.x - mid.x) + sin(rotation) * (uv.y - mid.y) + mid.x, cos(rotation) * (uv.y - mid.y) - sin(rotation) * (uv.x - mid.x) + mid.y ); } // 噪声函数 float noise (in vec2 _st) { vec2 i = floor(_st); vec2 f = fract(_st); // Four corners in 2D of a tile float a = random(i); float b = random(i + vec2(1.0, 0.0)); float c = random(i + vec2(0.0, 1.0)); float d = random(i + vec2(1.0, 1.0)); vec2 u = f * f * (3.0 - 2.0 * f); return mix(a, b, u.x) + (c - a)* u.y * (1.0 - u.x) + (d - b) * u.x * u.y; } // Classic Perlin 2D Noise // by Stefan Gustavson // vec4 permute(vec4 x) { return mod(((x*34.0)+1.0)*x, 289.0); } vec2 fade(vec2 t) { return t*t*t*(t*(t*6.0-15.0)+10.0); } float cnoise(vec2 P) { vec4 Pi = floor(P.xyxy) + vec4(0.0, 0.0, 1.0, 1.0); vec4 Pf = fract(P.xyxy) - vec4(0.0, 0.0, 1.0, 1.0); Pi = mod(Pi, 289.0); // To avoid truncation effects in permutation vec4 ix = Pi.xzxz; vec4 iy = Pi.yyww; vec4 fx = Pf.xzxz; vec4 fy = Pf.yyww; vec4 i = permute(permute(ix) + iy); vec4 gx = 2.0 * fract(i * 0.0243902439) - 1.0; // 1/41 = 0.024... vec4 gy = abs(gx) - 0.5; vec4 tx = floor(gx + 0.5); gx = gx - tx; vec2 g00 = vec2(gx.x,gy.x); vec2 g10 = vec2(gx.y,gy.y); vec2 g01 = vec2(gx.z,gy.z); vec2 g11 = vec2(gx.w,gy.w); vec4 norm = 1.79284291400159 - 0.85373472095314 * vec4(dot(g00, g00), dot(g01, g01), dot(g10, g10), dot(g11, g11)); g00 *= norm.x; g01 *= norm.y; g10 *= norm.z; g11 *= norm.w; float n00 = dot(g00, vec2(fx.x, fy.x)); float n10 = dot(g10, vec2(fx.y, fy.y)); float n01 = dot(g01, vec2(fx.z, fy.z)); float n11 = dot(g11, vec2(fx.w, fy.w)); vec2 fade_xy = fade(Pf.xy); vec2 n_x = mix(vec2(n00, n01), vec2(n10, n11), fade_xy.x); float n_xy = mix(n_x.x, n_x.y, fade_xy.y); return 2.3 * n_xy; } void main(){ vec4 modelPosition = modelMatrix * vec4(position,1.0); float elevation = sin(modelPosition.x*uWaresFrequency+uTime*uXspeed)*sin(modelPosition.z*uWaresFrequency*uXzScale+uTime*uZspeed); elevation += -abs(cnoise(vec2(modelPosition.xz*uNoiseFrequency+uTime*uNoiseSpeed))) *uNoiseScale; vElevation = elevation; elevation *= uScale; modelPosition.y += elevation; gl_Position = projectionMatrix * viewMatrix *modelPosition; }\"]},\"244\":{\"c\":[\"GLSL\"]},\"245\":{\"h\":\"EventLoop\"},\"246\":{\"h\":\"浏览器进程\",\"t\":[\"浏览器是多进程的\",\"每一个 TAB 页就是一个进程\",\"浏览器主进程 \",\"控制其它子进程的创建和销毁\",\"浏览器界面显示，比如用户交互、前进、后退等操作\",\"将渲染的内容绘制到用户界面上\",\"渲染进程就是我们说的浏览器内核 \",\"负责页面的渲染、脚本执行、事件处理\",\"每个 TAB 页都有一个渲染进程\",\"网络进程 处理网络请求、文件访问等操作\",\"GPU 进程 用于 3D 绘制\",\"第三方插件进程\"]},\"247\":{\"h\":\"渲染进程\",\"t\":[\"GUI 渲染线程 \",\"渲染、布局和绘制页面\",\"当页面需要重绘和回流时，此线程就会执行\",\"与 JS 引擎互斥\",\"JS 引擎线程 \",\"负责解析执行 JS 脚本\",\"只有一个 JS 引擎线程(单线程)\",\"与 GUI 渲染线程互斥\",\"事件触发线程 \",\"用来控制事件循环(鼠标点击、setTimeout、Ajax 等)\",\"当事件满足触发条件时，把事件放入到 JS 引擎所有的执行队列中\",\"定时器触发线程 \",\"setInterval 和 setTimeout 所在线程\",\"定时任务并不是由 JS 引擎计时，而是由定时触发线程来计时的\",\"计时完毕后会通知事件触发线程\",\"异步 HTTP 请求线程 \",\"浏览器有一个单独的线程处理 AJAX 请求\",\"当请求完毕后，如果有回调函数，会通知事件触发线程\"]},\"248\":{\"h\":\"EventLoop\"},\"249\":{\"h\":\"宏任务\",\"t\":[\"页面的大部分任务是在主任务上执行的，比如下面这些都是宏任务 \",\"渲染事件(DOM 解析、布局、绘制)\",\"用户交互(鼠标点击、页面缩放)\",\"JavaScript 脚本执行\",\"网络请求\",\"文件读写\",\"宏任务会添加到消息到消息队列的尾部，当主线程执行到该消息的时候就会执行\",\"每次从事件队列中获取一个事件回调并且放到执行栈中的就是一个宏任务，宏任务执行过程中不会执行其它内容\",\"每次宏任务执行完毕后会进行 GUI 渲染线程的渲染，然后再执行下一个宏任务\",\"宏任务: script（整体代码）, setTimeout, setInterval, setImmediate, I/O, UI rendering\",\"宏任务颗粒度较大，不适合需要精确控制境的任务\",\"宏任务是由宿主方控制的\"]},\"250\":{\"h\":\"微任务\",\"t\":[\"宏任务结束后会进行渲染然后执行下一个宏任务\",\"微任务是当前宏任务执行后立即执行的宏任务\",\"当宏任务执行完，就到达了检查点,会先将执行期间所产生的所有微任务都执行完再去进行渲染\",\"微任务是由 V8 引擎控制的，在创建全局执行上下文的时候，也会在 V8 引擎内部创建一个微任务队列\",\"微任务: process.nextTick（Nodejs）, Promises, Object.observe, MutationObserver\"]},\"251\":{\"h\":\"浏览器的 Event Loop\",\"t\":[\"执行全局 Script 同步代码，这些同步代码有一些是同步语句，有一些是异步语句（比如 setTimeout 等）；\",\"全局 Script 代码执行完毕后，调用栈 Stack 会清空；\",\"从微队列 microtask queue 中取出位于队首的回调任务，放入调用栈 Stack 中执行，执行完后 microtask queue 长度减 1；\",\"继续取出位于队首的任务，放入调用栈 Stack 中执行，以此类推，直到直到把 microtask queue 中的所有任务都执行完毕。注意，如果在执行 microtask 的过程中，又产生了 microtask，那么会加入到队列的末尾，也会在这个周期被调用执行；\",\"microtask queue 中的所有任务都执行完毕，此时 microtask queue 为空队列，调用栈 Stack 也为空；\",\"取出宏队列 macrotask queue 中位于队首的任务，放入 Stack 中执行；\",\"执行完毕后，调用栈 Stack 为空；\",\"重复第 3-7 个步骤；\"]},\"252\":{\"h\":\"promise\",\"t\":[\"console.log(1); setTimeout(() => { console.log(5); Promise.resolve().then(() => { console.log(6); }); }); new Promise((resolve, reject) => { console.log(2); resolve(4); }).then((data) => { console.log(data); }); setTimeout(() => { console.log(7); }); console.log(3); 1; 2; 3; 4; 5; 6; 7;\"]},\"253\":{\"h\":\"async/await\",\"t\":[\"如果 await 后面跟的不是一个 Promise，那 await 后面表达式的运算结果就是它等到的东西； 如果 await 后面跟的是一个 Promise 对象，await 它会“阻塞”后面的代码，等着 Promise 对象 resolve，然后得到 resolve 的值作为 await 表达式的运算结果。但是此“阻塞”非彼“阻塞”这就是 await 必须用在 async 函数中的原因。async 函数调用不会造成“阻塞”，它内部所有的“阻塞”都被封装在一个 Promise 对象中异步执行。\",\"console.log(\\\"1\\\"); async function async1() { console.log(\\\"2\\\"); await \\\"await的结果\\\"; console.log(\\\"5\\\"); } async1(); console.log(\\\"3\\\"); new Promise(function (resolve) { console.log(\\\"4\\\"); resolve(); }).then(function () { console.log(\\\"6\\\"); }); //1 -> 2 -> 3 -> 4 -> 5 -> 6\",\"async function async1() { console.log(\\\"2\\\"); await async2(); console.log(\\\"7\\\"); } async function async2() { console.log(\\\"3\\\"); } setTimeout(function () { console.log(\\\"8\\\"); }, 0); console.log(\\\"1\\\"); async1(); new Promise(function (resolve) { console.log(\\\"4\\\"); resolve(); }).then(function () { console.log(\\\"6\\\"); }); console.log(\\\"5\\\"); //1 -> 2 -> 3 -> 4 -> 5 -> 7 -> 6 -> 8\"]},\"254\":{\"h\":\"微任务队列\",\"t\":[\"微任务队列会一次性清空\",\"function loop() { Promise.resolve().then(loop); } loop();\",\"微任务会先于渲染执行\",\"document.body.style = \\\"background:red\\\"; console.log(1); Promise.resolve().then(() => { console.log(2); document.body.style = \\\"background:yellow\\\"; }); console.log(3);\",\"宏任务结束之后会先执行微任务\",\"setTimeout(() => { console.log(1); Promise.resolve(3).then(data => console.log(data)) }, 0) setTimeout(() => { console.log(2) }, 0) 1 3 2\"]},\"255\":{\"h\":\"Node10.xx 中的 EventLoop\",\"t\":[\"Node 中的 Event Loop 和浏览器中的是完全不相同的东西。Node.js 采用 V8 作为 js 的解析引擎，而 I/O 处理方面使用了自己设计的 libuv，libuv 是一个基于事件驱动的跨平台抽象层，封装了不同操作系统一些底层特性，对外提供统一的 API，事件循环机制也是它里面的实现（下文会详细介绍）。\",\"Node.js 的运行机制如下:\",\"V8 引擎解析 JavaScript 脚本。\",\"解析后的代码，调用 Node API。\",\"libuv 库负责 Node API 的执行。它将不同的任务分配给不同的线程，形成一个 Event Loop（事件循环），以异步的方式将任务的执行结果返回给 V8 引擎。\",\"V8 引擎再将结果返回给用户。\"]},\"256\":{\"h\":\"六个阶段\",\"t\":[\"其中 libuv 引擎中的事件循环分为 6 个阶段，它们会按照顺序反复运行。每当进入某一个阶段的时候，都会从对应的回调队列中取出函数去执行。当队列为空或者执行的回调函数数量到达系统设定的阈值，就会进入下一阶段。\",\"从上图中，大致看出 node 中的事件循环的顺序：\",\"外部输入数据–>轮询阶段(poll)–>检查阶段(check)–>关闭事件回调阶段(close callback)–>定时器检测阶段(timer)–>I/O 事件回调阶段(I/O callbacks)–>闲置阶段(idle, prepare)–>轮询阶段（按照该顺序反复运行）…\",\"timers 阶段：这个阶段执行 timer（setTimeout、setInterval）的回调\",\"I/O callbacks 阶段：处理一些上一轮循环中的少数未执行的 I/O 回调\",\"idle, prepare 阶段：仅 node 内部使用\",\"poll 阶段：获取新的 I/O 事件, 适当的条件下 node 将阻塞在这里\",\"check 阶段：执行 setImmediate() 的回调\",\"close callbacks 阶段：执行 socket 的 close 事件回调\",\"注意：上面六个阶段都不包括 process.nextTick()(下文会介绍)\",\"接下去我们详细介绍timers、poll、check这 3 个阶段，因为日常开发中的绝大部分异步任务都是在这 3 个阶段处理的。\",\"(1) timer\",\"timers 阶段会执行 setTimeout 和 setInterval 回调，并且是由 poll 阶段控制的。 同样，在 Node 中定时器指定的时间也不是准确时间，只能是尽快执行。\",\"(2) poll\",\"poll 是一个至关重要的阶段，这一阶段中，系统会做两件事情\",\"回到 timer 阶段执行回调\",\"执行 I/O 回调\",\"并且在进入该阶段时如果没有设定了 timer 的话，会发生以下两件事情\",\"如果 poll 队列不为空，会遍历回调队列并同步执行，直到队列为空或者达到系统限制\",\"如果 poll 队列为空时，会有两件事发生 \",\"如果有 setImmediate 回调需要执行，poll 阶段会停止并且进入到 check 阶段执行回调\",\"如果没有 setImmediate 回调需要执行，会等待回调被加入到队列中并立即执行回调，这里同样会有个超时时间设置防止一直等待下去\",\"当然设定了 timer 的话且 poll 队列为空，则会判断是否有 timer 超时，如果有的话会回到 timer 阶段执行回调。\",\"(3) check 阶段\",\"setImmediate()的回调会被加入 check 队列中，从 event loop 的阶段图可以知道，check 阶段的执行顺序在 poll 阶段之后。\",\"我们先来看个例子:\",\" console.log('start') setTimeout(() => { console.log('timer1') Promise.resolve().then(function() { console.log('promise1') }) }, 0) setTimeout(() => { console.log('timer2') Promise.resolve().then(function() { console.log('promise2') }) }, 0) Promise.resolve().then(function() { console.log('promise3') }) console.log('end') //start=>end=>promise3=>timer1=>timer2=>promise1=>promise2\",\"一开始执行栈的同步任务（这属于宏任务）执行完毕后（依次打印出 start end，并将 2 个 timer 依次放入 timer 队列）,会先去执行微任务（这点跟浏览器端的一样），所以打印出 promise3\",\"然后进入 timers 阶段，执行 timer1 的回调函数，打印 timer1，并将 promise.then 回调放入 microtask 队列，同样的步骤执行 timer2，打印 timer2；这点跟浏览器端相差比较大，timers 阶段有几个 setTimeout/setInterval 都会依次执行，并不像浏览器端，每执行一个宏任务后就去执行一个微任务（关于 Node 与浏览器的 Event Loop 差异，下文还会详细介绍）。\"]},\"257\":{\"h\":\"\",\"t\":[\"(1) setTimeout 和 setImmediate\",\"二者非常相似，区别主要在于调用时机不同。\",\"setImmediate 设计在 poll 阶段完成时执行，即 check 阶段；\",\"setTimeout 设计在 poll 阶段为空闲时，且设定时间到达后执行，但它在 timer 阶段执行\",\" setTimeout(function timeout () { console.log('timeout'); },0); setImmediate(function immediate () { console.log('immediate'); });\",\"对于以上代码来说，setTimeout 可能执行在前，也可能执行在后。\",\"首先 setTimeout(fn, 0) === setTimeout(fn, 1)，这是由源码决定的 进入事件循环也是需要成本的，如果在准备时候花费了大于 1ms 的时间，那么在 timer 阶段就会直接执行 setTimeout 回调\",\"如果准备时间花费小于 1ms，那么就是 setImmediate 回调先执行了\",\"但当二者在异步 i/o callback 内部调用时，总是先执行 setImmediate，再执行 setTimeout\",\" const fs = require('fs') fs.readFile(__filename, () => { setTimeout(() => { console.log('timeout'); }, 0) setImmediate(() => { console.log('immediate') }) }) // immediate // timeout\",\"在上述代码中，setImmediate 永远先执行。因为两个代码写在 IO 回调中，IO 回调是在 poll 阶段执行，当回调执行完毕后队列为空，发现存在 setImmediate 回调，所以就直接跳转到 check 阶段去执行回调了。\",\"(2) process.nextTick\",\"这个函数其实是独立于 Event Loop 之外的，它有一个自己的队列，当每个阶段完成后，如果存在 nextTick 队列，就会清空队列中的所有回调函数，并且优先于其他 microtask 执行。\",\" setTimeout(() => { console.log('timer1') Promise.resolve().then(function() { console.log('promise1') }) }, 0) process.nextTick(() => { console.log('nextTick') process.nextTick(() => { console.log('nextTick') process.nextTick(() => { console.log('nextTick') process.nextTick(() => { console.log('nextTick') }) }) }) }) // nextTick=>nextTick=>nextTick=>nextTick=>timer1=>promise1\"]},\"258\":{\"h\":\"\",\"t\":[\"浏览器环境下，microtask 的任务队列是每个 macrotask 执行完之后执行。而在 Node.js 中，microtask 会在每个 macrotask 队列执行完，也就是一个阶段执行完毕，就会去执行 microtask 队列的任务。\",\"接下我们通过一个例子来说明两者区别：\",\" setTimeout(()=>{ console.log('timer1') Promise.resolve().then(function() { console.log('promise1') }) }, 0) setTimeout(()=>{ console.log('timer2') Promise.resolve().then(function() { console.log('promise2') }) }, 0)\",\"浏览器端运行结果：timer1=>promise1=>timer2=>promise2\",\"浏览器端的处理过程如下：\",\"Node 端运行结果：timer1=>timer2=>promise1=>promise2\",\"全局脚本（main()）执行，将 2 个 timer 依次放入 timer 队列，main()执行完毕，调用栈空闲，任务队列开始执行；\",\"首先进入 timers 阶段，执行 timer1 的回调函数，打印 timer1，并将 promise1.then 回调放入 microtask 队列，同样的步骤执行 timer2，打印 timer2；\",\"至此，timer 阶段执行结束，event loop 进入下一个阶段之前，执行 microtask 队列的所有任务，依次打印 promise1、promise2\"]},\"259\":{\"c\":[\"JavaScript\"]},\"260\":{\"h\":\"迭代器与生成器\",\"t\":[\"for (let i = 1; i <= 10; ++i) { console.log(i); }\",\"缺点：\",\" 迭代之前需要事先知道如何使用数据结构。\",\"数组中的每一项都只能先通过引用取得数组对象， 然后再通过[]操作符取得特定索引位置上的项。这种情况并不适用于所有数据结构。\",\" 遍历顺序并不是数据结构固有的\",\"通过递增索引来访问数据是特定于数组类型的方式，并不适用于其他具有隐式顺序的数据结构。\",\"可迭代对象指的是任何具有专用迭代器方法，且该方法返回迭代器对象的对象。\",\"迭代器对象指的是任何具有 next()方法，且该方法返回迭代结果对象的对象。\",\"迭代结果对象是具有属性 value 和 done 的对象。\",\"要迭代一个可迭代对象，首先要调用其迭代器方法获得一个迭代器对象。然后，重复调用这个迭代器对象的 next()方法，直至返回 done 属性为 true 的迭代结果对象。\",\"let iterable = [99]; let iterator = iterable[Symbol.iterator](); for (let result = iterator.next(); !result.done; result = iterator.next()) { console.log(result.value); //result.value == 99 }\"]},\"261\":{\"h\":\"Symbol.iterator\",\"t\":[\"内置可迭代数据类型的迭代器对象本身也是可迭代的（也就是说，它们有一个名为 Symbol.iterator 的方法，返回它们自己）\",\"let list = [1, 2, 3, 4, 5]; let iter = list[Symbol.iterator](); let head = iter.next().value; // head ==1 let tail = [...iter]; // tail == [2,3,4,5]\"]},\"262\":{\"h\":\"迭代器模式\"},\"263\":{\"h\":\"可迭代协议\",\"t\":[\"实现 Iterable 接口（可迭代协议）要求同时具备两种能力：\",\"支持迭代的自我识别能力和创建实现 Iterator 接口的对象的能力。\",\"在 ECMAScript 中，这意味着必须暴露一个属性作为“默认迭代器”，而且这个属性必须使用特殊的 Symbol.iterator 作为键。这个默认迭代器属性必须引用一个迭代器工厂函数，调用这个工厂函数必须返回一个新迭代器。\",\"实现 Iterable 接口的内置类型：\",\" 字符串\",\" 数组\",\" 映射\",\" 集合\",\" arguments 对象\",\" NodeList 等 DOM 集合类型\",\"检查是否存在默认迭代器属性可以暴露这个工厂函数：\",\"let num = 1; let obj = {}; // 这两种类型没有实现迭代器工厂函数 console.log(num[Symbol.iterator]); // undefined console.log(obj[Symbol.iterator]); // undefined let str = \\\"abc\\\"; let arr = [\\\"a\\\", \\\"b\\\", \\\"c\\\"]; let map = new Map().set(\\\"a\\\", 1).set(\\\"b\\\", 2).set(\\\"c\\\", 3); let set = new Set().add(\\\"a\\\").add(\\\"b\\\").add(\\\"c\\\"); let els = document.querySelectorAll(\\\"div\\\"); // 这些类型都实现了迭代器工厂函数 console.log(str[Symbol.iterator]); // f values() { [native code] } console.log(arr[Symbol.iterator]); // f values() { [native code] } console.log(map[Symbol.iterator]); // f values() { [native code] } console.log(set[Symbol.iterator]); // f values() { [native code] } console.log(els[Symbol.iterator]); // f values() { [native code] } // 调用这个工厂函数会生成一个迭代器 console.log(str[Symbol.iterator]()); // StringIterator {} console.log(arr[Symbol.iterator]()); // ArrayIterator {} console.log(map[Symbol.iterator]()); // MapIterator {} console.log(set[Symbol.iterator]()); // SetIterator {} console.log(els[Symbol.iterator]()); // ArrayIterator {}\",\"接收可迭代对象的原生语言特性包括：\",\" for-of 循环\",\" 数组解构\",\" 扩展操作符\",\" Array.from()\",\" 创建集合\",\" 创建映射\",\" Promise.all()接收由期约组成的可迭代对象\",\" Promise.race()接收由期约组成的可迭代对象\",\" yield*操作符，在生成器中使用\",\"原生语言结构会在后台调用提供的可迭代对象的这个工厂函数，从而创建一个迭代器：\",\"let arr = [\\\"foo\\\", \\\"bar\\\", \\\"baz\\\"]; // for-of 循环 for (let el of arr) { console.log(el); } // foo // bar // baz // 数组解构 let [a, b, c] = arr; console.log(a, b, c); // foo, bar, baz // 扩展操作符 let arr2 = [...arr]; console.log(arr2); // ['foo', 'bar', 'baz'] // Array.from() let arr3 = Array.from(arr); console.log(arr3); // ['foo', 'bar', 'baz'] // Set 构造函数 let set = new Set(arr); console.log(set); // Set(3) {'foo', 'bar', 'baz'} // Map 构造函数 let pairs = arr.map((x, i) => [x, i]); console.log(pairs); // [['foo', 0], ['bar', 1], ['baz', 2]] let map = new Map(pairs); console.log(map); // Map(3) { 'foo'=>0, 'bar'=>1, 'baz'=>2 }\",\"如果对象原型链上的父类实现了 Iterable 接口，那这个对象也就实现了这个接口：\",\"class FooArray extends Array {} let fooArr = new FooArray(\\\"foo\\\", \\\"bar\\\", \\\"baz\\\"); for (let el of fooArr) { console.log(el); } // foo // bar // baz\"]},\"264\":{\"h\":\"实现可迭代对象\",\"t\":[\"class Range { constructor(from, to) { this.from = from; this.to = to; } has(x) { return typeof x === \\\"number\\\" && this.from <= x && x <= this.to; } toString() { return `{x | ${this.from} <= x <= ${this.to}}`; } [Symbol.iterator]() { let next = Math.ceil(this.from); let last = this.to; return { next() { return next <= last ? { value: next++ } : { done: true }; }, [Symbol.iterator]() { return this; }, }; } } for (let x of new Range(1, 10)) { // 打印 1 到10 console.log(x); }\"]},\"265\":{\"h\":\"迭代器协议\",\"t\":[\"迭代器是一种一次性使用的对象，用于迭代与其关联的可迭代对象。\",\"迭代器 API 使用 next()方法在可迭代对象中遍历数据。每次成功调用 next()，都会返回一个 IteratorResult 对象，其中包含迭代器返回的下一个值。若不调用 next()，则无法知道迭代器的当前位置。\",\"next()\",\"方法返回的迭代器对象 IteratorResult 包含两个属性：done 和 value。\",\"done 是一个布尔值，表示是否还可以再次调用 next()取得下一个值(遍历是否结束)\",\"value 包含可迭代对象的下一个值（done 为 false），或者 undefined（done 为 true）。done: true 状态称为“耗尽”。\",\"Iterator 的遍历过程是这样的。\",\"（1）创建一个指针对象，指向当前数据结构的起始位置。也就是说，遍历器对象本质上，就是一个指针对象。\",\"（2）第一次调用指针对象的next方法，可以将指针指向数据结构的第一个成员。\",\"（3）第二次调用指针对象的next方法，指针就指向数据结构的第二个成员。\",\"（4）不断调用指针对象的next方法，直到它指向数据结构的结束位置。\",\"// 可迭代对象 let arr = [\\\"foo\\\", \\\"bar\\\"]; // 迭代器工厂函数 console.log(arr[Symbol.iterator]); // f values() { [native code] } // 迭代器 let iter = arr[Symbol.iterator](); console.log(iter); // ArrayIterator {} // 执行迭代 console.log(iter.next()); // { done: false, value: 'foo' } console.log(iter.next()); // { done: false, value: 'bar' } console.log(iter.next()); // { done: true, value: undefined }\",\"通过创建迭代器并调用 next()方法按顺序迭代了数组，直至不再产生新值。\",\"迭代器并不知道怎么从可迭代对象中取得下一个值，也不知道可迭代对象有多大。\",\"只要迭代器到达 done: true 状态，后续调用 next()就一直返回同样的值了：\",\"let arr = [\\\"foo\\\"]; let iter = arr[Symbol.iterator](); console.log(iter.next()); // { done: false, value: 'foo' } console.log(iter.next()); // { done: true, value: undefined } console.log(iter.next()); // { done: true, value: undefined } console.log(iter.next()); // { done: true, value: undefined }\"]},\"266\":{\"h\":\"实现迭代器对象\",\"t\":[\"class Counter { // Counter 的实例应该迭代limit 次 constructor(limit) { this.count = 1; this.limit = limit; } next() { if (this.count <= this.limit) { return { done: false, value: this.count++, }; } else { return { done: true, value: undefined, }; } } [Symbol.iterator]() { return this; } } let counter = new Counter(3); for (let i of counter) { console.log(i); } // 1 // 2 // 3\",\"这个类实现了 Iterator 接口，但不理想。这是因为它的每个实例只能被迭代一次：\",\"for (let i of counter) { console.log(i); } // 1 // 2 // 3 for (let i of counter) { console.log(i); } // (nothing logged)\",\"为了让一个可迭代对象能够创建多个迭代器，必须每创建一个迭代器就对应一个新计数器。为此， 可以把计数器变量放到闭包里，然后通过闭包返回迭代器：\",\"class Counter { constructor(limit) { this.limit = limit; } [Symbol.iterator]() { let count = 1, limit = this.limit; return { next() { if (count <= limit) { return { done: false, value: count++, }; } else { return { done: true, value: undefined, }; } }, }; } } let counter = new Counter(3); for (let i of counter) { console.log(i); } // 1 // 2 // 3 for (let i of counter) { console.log(i); } // 1 // 2 // 3\"]},\"267\":{\"h\":\"生成器\"},\"268\":{\"h\":\"生成器基础\",\"t\":[\"函数名称前面加一个星号（*）表示它是一个生成器\",\"// 生成器函数声明 function* generatorFn() {} // 生成器函数表达式 let generatorFn = function* () {}; // 作为对象字面量方法的生成器函数 let foo = { *generatorFn() {}, }; // 作为类实例方法的生成器函数 class Foo { *generatorFn() {} } // 作为类静态方法的生成器函数 class Bar { static *generatorFn() {} }\",\"箭头函数不能用来定义生成器函数。\",\"标识生成器函数的星号不受两侧空格的影响\",\"// 等价的生成器函数： function* generatorFnA() {} function* generatorFnB() {} function* generatorFnC() {} // 等价的生成器方法： class Foo { *generatorFnD() {} *generatorFnE() {} }\",\"调用生成器函数会产生一个生成器对象。\",\"生成器对象一开始处于暂停执行（suspended）的状态\",\"调用 next()方法会让生成器开始或恢复执行。\",\"function* generatorFn() {} const g = generatorFn(); console.log(g); // generatorFn {<suspended>} console.log(g.next); // f next() { [native code] }\",\"next()方法的返回值类似于迭代器，有一个 done 属性和一个 value 属性。\",\"function* generatorFn() { return \\\"foo\\\"; } let generatorObject = generatorFn(); console.log(generatorObject); // generatorFn {<suspended>} console.log(generatorObject.next()); // { done: true, value: 'foo' }\",\"生成器函数只会在初次调用 next()方法后开始执行\",\"function* generatorFn() { console.log(\\\"foobar\\\"); } // 初次调用生成器函数并不会打印日志 let generatorObject = generatorFn(); generatorObject.next(); // foobar\"]},\"269\":{\"h\":\"通过 yield 中断执行\",\"t\":[\"yield 关键字可以让生成器停止和开始执行，也是生成器最有用的地方。\",\"生成器函数在遇到 yield 关键字之前会正常执行。遇到这个关键字后，执行会停止，函数作用域的状态会被保留。\",\"停止执行的生成器函数只能通过在生成器对象上调用 next()方法来恢复执行：\",\"function* generatorFn() { yield; } let generatorObject = generatorFn(); console.log(generatorObject.next()); // { done: false, value: undefined } console.log(generatorObject.next()); // { done: true, value: undefined }\",\"此时的 yield 关键字有点像函数的中间返回语句，它生成的值会出现在 next()方法返回的对象里。\",\"通过 yield 关键字退出的生成器函数会处在 done: false 状态；\",\"通过 return 关键字退出的生成器函数会处于 done: true 状态。\",\"function* generatorFn() { yield \\\"foo\\\"; yield \\\"bar\\\"; return \\\"baz\\\"; } let generatorObject = generatorFn(); console.log(generatorObject.next()); // { done: false, value: 'foo' } console.log(generatorObject.next()); // { done: false, value: 'bar' } console.log(generatorObject.next()); // { done: true, value: 'baz' }\",\"yield 关键字只能在生成器函数内部使用，用在其他地方会抛出错误,类似于函数 return\",\"// 有效 function* validGeneratorFn() { yield; } // 无效 function* invalidGeneratorFnA() { function a() { yield; } } // 无效 function* invalidGeneratorFnB() { const b = () => { yield; }; } // 无效 function* invalidGeneratorFnC() { (() => { yield; })(); }\"]},\"270\":{\"h\":\"生成器对象作为可迭代对象\",\"t\":[\"在生成器对象上显式调用 next()方法的用处并不大。其实，如果把生成器对象当成可迭代对象， 那么使用起来会更方便：\",\"function* generatorFn() { yield 1; yield 2; yield 3; } for (const x of generatorFn()) { console.log(x); } // 1 // 2 // 3\",\"function* nTimes(n) { while (n--) { yield; } } for (let _ of nTimes(3)) { console.log(\\\"foo\\\"); } // foo // foo // foo\"]},\"271\":{\"h\":\"使用 yield 实现输入和输出\",\"t\":[\"让生成器函数暂停的 yield 关键字会接收到传给 next()方法的第一个值\",\"第一次调用 next()传入的值不会被使用，因为这一次调用是为了开始执行生成器函数：\",\"function* generatorFn(initial) { console.log(initial); console.log(yield); console.log(yield); } let generatorObject = generatorFn(\\\"foo\\\"); generatorObject.next(\\\"bar\\\"); // foo generatorObject.next(\\\"baz\\\"); // baz generatorObject.next(\\\"qux\\\"); // qux\",\"函数必须对整个表达式求值才能确定要返回的值，所以它在遇到 yield 关键字时暂停执行并计算出要产生的值：\\\"foo\\\"。下一次调用 next()传入了\\\"bar\\\"，作为交给同一个 yield 的值。然后这个值被确定为本次生成器函数要返回的值。\",\"function* generatorFn() { return yield \\\"foo\\\"; } let generatorObject = generatorFn(); console.log(generatorObject.next()); // { done: false, value: 'foo' } console.log(generatorObject.next(\\\"bar\\\")); // { done: true, value: 'bar' }\",\"function* generatorFn() { for (let i = 0;;++i) { yield i; } } let generatorObject = generatorFn(); console.log(generatorObject.next().value); // 0 console.log(generatorObject.next().value); // 1 console.log(generatorObject.next().value); // 2 console.log(generatorObject.next().value); // 3 console.log(generatorObject.next().value); // 4 console.log(generatorObject.next().value); // 5 ...\",\"function* range(start, end) { while (end > start) { yield start++; } } for (const x of range(4, 7)) { console.log(x); } // 4 // 5 // 6 function* zeroes(n) { while (n--) { yield 0; } } console.log(Array.from(zeroes(8))); // [0, 0, 0, 0, 0, 0, 0, 0]\"]},\"272\":{\"h\":\"产生可迭代对象\",\"t\":[\"使用星号增强 yield 的行为，让它能够迭代一个可迭代对象，从而一次产出一个值：\",\"// 等价的generatorFn： // function* generatorFn() { // for (const x of [1, 2, 3]) { // yield x; // } // } function* generatorFn() { yield* [1, 2, 3]; } let generatorObject = generatorFn(); for (const x of generatorFn()) { console.log(x); } // 1 // 2 // 3\"]},\"273\":{\"h\":\"生成器作为默认迭代器\",\"t\":[\"生成器对象实现了 Iterable 接口，而且生成器函数和默认迭代器被调用之后都产生迭代器，所以生成器格外适合作为默认迭代器。\",\"class Foo { constructor() { this.values = [1, 2, 3]; } *[Symbol.iterator]() { yield* this.values; } } const f = new Foo(); for (const x of f) { console.log(x); } // 1 // 2 // 3\"]},\"274\":{\"h\":\"提前终止生成器\",\"t\":[\"return()\",\"强制生成器进入关闭状态\",\"function* generatorFn() { for (const x of [1, 2, 3]) { yield x; } } const g = generatorFn(); console.log(g); // generatorFn {<suspended>} console.log(g.return(4)); // { done: true, value: 4 } console.log(g); // generatorFn {<closed>}\",\"与迭代器不同，所有生成器对象都有 return()方法，只要通过它进入关闭状态，就无法恢复了。\",\"function* generatorFn() { for (const x of [1, 2, 3]) { yield x; } } const g = generatorFn(); console.log(g.next()); // { done: false, value: 1 } console.log(g.return(4)); // { done: true, value: 4 } console.log(g.next()); // { done: true, value: undefined } console.log(g.next()); // { done: true, value: undefined } console.log(g.next()); // { done: true, value: undefined }\",\"throw()\",\"会在暂停的时候将一个提供的错误注入到生成器对象中。如果错误未被处理，生成器就会关闭：\",\"function* generatorFn() { for (const x of [1, 2, 3]) { yield x; } } const g = generatorFn(); console.log(g); // generatorFn {<suspended>} try { g.throw(\\\"foo\\\"); } catch (e) { console.log(e); // foo } console.log(g); // generatorFn {<closed>}\",\"假如生成器函数内部处理了这个错误，那么生成器就不会关闭，而且还可以恢复执行。错误处理会跳过对应的 yield\",\"function* generatorFn() { for (const x of [1, 2, 3]) { try { yield x; } catch (e) {} } } const g = generatorFn(); console.log(g.next()); // { done: false, value: 1} g.throw(\\\"foo\\\"); console.log(g.next()); // { done: false, value: 3}\"]},\"275\":{\"c\":[\"JavaScript\"]},\"276\":{\"h\":\"Promise实现\",\"t\":[\"参考\",\"100 行代码实现 Promises/A+ 规范\",\"Promises/A+\"]},\"277\":{\"h\":\"\",\"t\":[\"通过 npm install promises-aplus-tests ，可以下载测试套件。\",\"GitHub - promises-aplus/promises-tests: Compliances tests for Promises/A+\"]},\"278\":{\"h\":\"\",\"t\":[\"1.1. promise: 一个拥有符合这个规范的行为的 then 方法的对象或函数。 1.2. thenable: 定义了一个 then 方法的对象或函数。 1.3. 值(value): 任意合法的 JavaScript 值(包括 undefined,thenable,promise)。 1.4. 异常(exception): 使用 throw 语句抛出的一个值 1.5. 原因(reason): 表示 promise 为什么被拒绝的一个值\"]},\"279\":{\"h\":\"\"},\"280\":{\"h\":\"\",\"t\":[\"promise 必须是这三个状态中的一种：等待态 pending/ˈpendɪŋ/,解决态 fulfilled/fʊl; fl/或拒绝态 rejected\",\"2.1.1. 当一个 promise 处于等待状态的时候： 2.1.1.1. 可能变为解决或者拒绝状态。\",\"2.1.2. 当一个 promise 处于解决状态的时候： 2.1.2.1. 一定不能转换为任何其它状态 2.1.2.2. 必须有一个不能改变的值\",\"2.1.3. 当一个 promise 处于拒绝状态的时候： 2.1.3.1. 一定不能转换为任何其它状态 2.1.3.2. 必须有一个不能改变的值\",\"在这里，\\\"一定不能改变\\\"意味着不变的身份(例如 ===)，但是并不意味着深度不可变性。(译注者：这里应该是说只要值的引用相同即可，并不需要引用中的每一个值都相等)\",\"//有 3 个常量 pending, fulfilled, rejected， //一个 Promise 构造函数，有 state 和 result 两个属性。 //当 state 为 fulfilled 时，result 作为 value 看待。 //当 state 为 rejected 时，result 作为 reason 看待。 //一个 transition 状态迁移函数，它只会在 state 为 pending 时，进行状态迁移。 const PENDING = Symbol(\\\"pending\\\"); const FULFILLED = Symbol(\\\"fulfilled\\\"); const REJECTED = Symbol(\\\"rejected\\\"); //一个 transition 状态迁移函数，它只会在 state 为 pending 时，进行状态迁移。 const transition = (promise, state, result) => { if (promise.state !== PENDING) return; promise.state = state; promise.result = result; notifyAll(promise); }; function Promise(f) { this.state = PENDING; let onFulfilled = (value) => transition(this, FULFILLED, value); let onRejected = (reason) => transition(this, REJECTED, reason); //调用只能一次resolve 或者reject let ignore = false; let resolve = (value) => { if (ignore) return; ignore = true; onFullfilled(value); }; let reject = (reason) => { if (ignore) return; ignore = true; onRejected(reason); }; //函数必须立即执行 try { f(resolve, reject); } catch (error) { reject(error); } }\"]},\"281\":{\"h\":\"\",\"t\":[\"2.2.1 onFulfilled 和 onRejected 都是可选的参数\",\"2.2.1.1. 如果 onFulfilled 不是一个函数，它必须被忽略\",\"2.2.1.2. 如果 onRejected 不是一个函数，它必须被忽略\",\"2.2.2. 如果 onFulfilled 是一个函数\",\"2.2.2.1. 它必须在 promise 被解决后调用，promise 的值作为它的第一个参数。\",\"2.2.2.2. 它一定不能在 promise 被解决前调用。\",\"2.2.2.3. 它一定不能被调用多次。\",\"2.2.3. 如果 onRejected 是一个函数\",\"2.2.3.1. 它必须在 promise 被拒绝之后调用，用 promise 的原因作为它的第一个参数。\",\"2.2.3.2. 它一定不能在 promise 被拒绝之前调用。\",\"2.2.3.3. 它一定不能被调用多次。\",\"2.2.4. 在执行上下文栈中只包含平台代码之前，onFulfilled 或 onRejected 一定不能被调用 [3.1]\",\"2.2.5. onFulfilled 和 onRejected 一定被作为函数调用(没有 this 值) [3.2]\",\"2.2.6. 同一个 promise 上的 then 可能被调用多次\",\"2.2.6.1. 如果 promise 被解决，所有相应的 onFulfilled 回调必须按照他们原始调用 then 的顺序执行\",\"2.2.6.2. 如果 promise 被拒绝，所有相应的 onRejected 回调必须按照他们原始调用 then 的顺序执行\",\"实现：\",\"Promise.prototype.then = function (onFulfilled, onRejected) {}; const notify = (handler, state, result) => { let { onFulfilled, onRejected, resolve, reject } = handler; try { if (state === FULFILLED) { isFunction(onFulfilled) ? resolve(onFulfilled(result)) : resolve(result); } else if (state === REJECTED) { isFunction(onRejected) ? resolve(onRejected(result)) : reject(result); } } catch (error) { reject(error); } };\",\"then 方法可以被调用很多次，每次注册一组 onFulfilled 和 onRejected 的 callback。它们如果被调用，必须按照注册顺序调用。\",\"let promise = new Promsie((resolve, reject) => { //3秒后才能知道promsie结果 setTimeout(() => { resolve(\\\"成功\\\"); }, 3000); }); promise.then( (data) => { console.log(\\\"success\\\", data); }, (err) => { console.log(\\\"fail\\\", err); } );\",\"function Promsie() { this.state = PENDING; this.result = null; //当pending状态时，将then存储起来 this.handlers = []; }\",\"2.2.7. then 必须返回一个 promise [3.3]\",\"Promise.prototype.then = function (onFulfilled, onRejected) { return new Promise((resolve, reject) => {}); };\",\"2.2.7.1. 如果 onFulfilled 或 onRjected 返回一个值 x，运行 promise 解决程序[[Resolve]](promise2,x)\",\"2.2.7.2. 如果 onFulfilled 或 onRejected 抛出一个异常 e，promise2 必须用 e 作为原因被拒绝\",\"2.2.7.3. 如果 onFulfilled 不是一个函数并且 promise1 被解决，promise2 必须用与 promise1 相同的值被解决\",\"2.2.7.4. 如果 onRejected 不是一个函数并且 promise1 被拒绝，promise2 必须用与 promise1 相同的原因被拒绝\",\"实现：\",\"Promise.prototype.then = function (onFulfilled, onRejected) { return new Promise((resolve, reject) => { this.handlers.push({ onFulfilled, onRejected, resolve, reject }); this.state !== PENDING && notifyAll(this); }); }; const delay = (f, time = 0) => (value) => setTimeout(() => f(value), time); //使用setTimeout包裹目的无法访问 在对此创建完毕之前无法访问this const notifyAll = delay((promise) => { let { handlers, state, result } = promise; while (handlers.length) notify(handlers.shift(), state, result); }); // 另一种写法 const notifyAll = (promise) => { setTimeout(() => { let { handlers, state, result } = promise; while (handlers.length) notify(handlers.shift(), state, result); }, 0); }; const notify = (handler, state, result) => { let { onFulfilled, onRejected, resolve, reject } = handler; try { if (state === FULFILLED) { isFunction(onFulfilled) ? resolve(onFulfilled(result)) : resolve(result); } else if (state === REJECTED) { isFunction(onRejected) ? resolve(onRejected(result)) : reject(result); } } catch (error) { reject(error); } };\"]},\"282\":{\"h\":\"\",\"t\":[\"promise 解决程序是一个抽象操作，它以一个 promise 和一个值作为输入，我们将其表示为[[Resolve]](promise, x)。如果 x 是一个 thenable，它尝试让 promise 采用 x 的状态，并假设 x 的行为至少在某种程度上类似于 promise。否则，它将会用值 x 解决 promise。\",\"这种 thenable 的特性使得 Promise 的实现更具有通用性：只要其暴露一个遵循 Promise/A+协议的 then 方法即可。这同时也使遵循 Promise/A+规范的实现可以与那些不太规范但可用的实现能良好共存。\",\"要运行[[Resolve]](promise, x)，需要执行如下步骤：\",\"2.3.1. 如果 promise 和 x 引用同一个对象，用一个 TypeError 作为原因来拒绝 promise 2.3.2. 如果 x 是一个 promise，采用它的状态：[3.4]\",\"2.3.2.1. 如果 x 是等待态，promise 必须保持等待状态，直到 x 被解决或拒绝\",\"2.3.2.2. 如果 x 是解决态，用相同的值解决 promise\",\"2.3.2.3. 如果 x 是拒绝态，用相同的原因拒绝 promise\",\"2.3.3. 否则，如果 x 是一个对象或函数\",\"2.3.3.1. 让 then 成为 x.then。[3.5]\",\"2.3.3.2. 如果检索属性 x.then 导致抛出了一个异常 e，用 e 作为原因拒绝 promise\",\"2.3.3.3. 如果 then 是一个函数，用 x 作为 this 调用它。then 方法的参数为俩个回调函数，第一个参数叫做 resolvePromise，第二个参数叫做 rejectPromise：\",\"2.3.3.3.1. 如果 resolvePromise 用一个值 y 调用，运行**[Resolve]。译者注：这里再次调用[Resolve]**，因为 y 可能还是 promise\",\"2.3.3.3.2. 如果 rejectPromise 用一个原因 r 调用，用 r 拒绝 promise。译者注：这里如果 r 为 promise 的话，依旧会直接 reject，拒绝的原因就是 promise。并不会等到 promise 被解决或拒绝\",\"2.3.3.3.3. 如果 resolvePromise 和 rejectPromise 都被调用，或者对同一个参数进行多次调用，那么第一次调用优先，以后的调用都会被忽略。译者注：这里主要针对 thenable，promise 的状态一旦更改就不会再改变。\",\"2.3.3.3.4. 如果调用 then 抛出了一个异常 e,\",\"2.3.3.4.1. 如果 resolvePromise 或 rejectPromise 已经被调用，忽略它\",\"2.3.3.4.2. 否则，用 e 作为原因拒绝 promise\",\"2.3.3.4. 如果 then 不是一个函数，用 x 解决 promise\",\"2.3.4. 如果 x 不是一个对象或函数，用 x 解决 promise\",\"如果 promise 用一个循环的 thenable 链解决，由于[[Resolve]](promise, thenalbe)的递归特性，最终将导致[[Resolve]](promise, thenable)被再次调用，遵循上面的算法将会导致无限递归。规范中并没有强制要求处理这种情况，但也鼓励实现者检测这样的递归是否存在，并且用一个信息丰富的 TypeError 作为原因拒绝 promise。[3.6]\",\"实现：\",\"const checkValue = (promise, value, onFulfilled, onRejected) => { if (value === promise) { let reason = new TypeError(\\\"Can not fufill promise with itself\\\"); return onRejected(reason); } if (value instanceof Promise) { return value.then(onFulfilled, onRejected); } if (isThenable(value)) { try { let then = value.then; if (isFunction(then)) { return new Promise(then.bind(value)).then(onFulfilled, onRejected); } } catch (error) { return onRejected(error); } } onFulfilled(value); };\"]},\"283\":{\"h\":\"function-promise\",\"t\":[\"function-promise\",\"const delay = (f, time = 0) => (value) => setTimeout(() => f(value), time); const isFunction = (obj) => typeof obj === \\\"function\\\"; const toString = Object.prototype.toString; const isObject = (obj) => toString.call(obj) === \\\"[object Object]\\\"; const isThenable = (obj) => (isObject(obj) || isFunction(obj)) && \\\"then\\\" in obj; const isPromise = (promise) => promise instanceof Promise; const PENDING = Symbol(\\\"pending\\\"); const FULFILLED = Symbol(\\\"fulfilled\\\"); const REJECTED = Symbol(\\\"rejected\\\"); const notify = (handler, state, result) => { let { onFulfilled, onRejected, resolve, reject } = handler; try { if (state === FULFILLED) { isFunction(onFulfilled) ? resolve(onFulfilled(result)) : resolve(result); } else if (state === REJECTED) { isFunction(onRejected) ? resolve(onRejected(result)) : reject(result); } } catch (error) { reject(error); } }; const notifyAll = (promise) => { setTimeout(() => { let { handlers, state, result } = promise; while (handlers.length) notify(handlers.shift(), state, result); }, 0); }; // const notifyAll = delay((promise) => { // let { handlers, state, result } = promise; // while (handlers.length) notify(handlers.shift(), state, result); // }); const transition = (promise, state, result) => { if (promise.state !== PENDING) return; promise.state = state; promise.result = result; notifyAll(promise); }; const checkValue = (promise, value, onFulfilled, onRejected) => { //如果promise和x引用同一个对象，用一个TypeError作为原因来拒绝promise if (value === promise) { let reason = new TypeError(\\\"Can not fufill promise with itself\\\"); return onRejected(reason); } if (value instanceof Promise) { return value.then(onFulfilled, onRejected); } if (isThenable(value)) { try { let then = value.then; if (isFunction(then)) { // 如果then是一个函数，用x作为this调用它。 return new Promise(then.bind(value)).then(onFulfilled, onRejected); } } catch (error) { return onRejected(error); } } onFulfilled(value); }; function Promise(f) { this.state = PENDING; this.handlers = []; let onFulfilled = (value) => transition(this, FULFILLED, value); let onRejected = (reason) => transition(this, REJECTED, reason); let ignore = false; let resolve = (value) => { if (ignore) return; ignore = true; checkValue(this, value, onFulfilled, onRejected); }; let reject = (reason) => { if (ignore) return; ignore = true; onRejected(reason); }; try { f(resolve, reject); } catch (error) { reject(error); } } Promise.prototype.then = function (onFulfilled, onRejected) { return new Promise((resolve, reject) => { this.handlers.push({ onFulfilled, onRejected, resolve, reject }); this.state !== PENDING && notifyAll(this); }); }; Promise.prototype.catch = function (onRejected) { return this.then(null, onRejected); }; Promise.prototype.finally = function (onFinally) { return this.then( /* onFulfilled */ (res) => Promise.resolve(onFinally()).then(() => res), /* onRejected */ (err) => Promise.resolve(onFinally()).then(() => { throw err; }) ); }; Promise.resolve = (value) => new Promise((resolve) => resolve(value)); Promise.reject = (reason) => new Promise((_, reject) => reject(reason)); Promise.all = (promises = []) => { return new Promise((resolve, reject) => { let count = 0; let values = new Array(promises.length); let collectValue = (index) => (value) => { values[index] = value; count += 1; count === promises.length && resolve(values); }; promises.forEach((promise, i) => { if (isPromise(promise)) { promise.then(collectValue(i), reject); } else { collectValue(i)(promise); } }); }); }; Promise.race = (promises = []) => { return new Promise((resolve, reject) => promises.forEach((promise) => { if (isPromise(promise)) { promise.then(resolve, reject); } else { resolve(promise); } }) ); }; Promise.defer = Promise.deferred = function () { let dfd = {}; dfd.promise = new Promise((resolve, reject) => { dfd.resolve = resolve; dfd.reject = reject; }); return dfd; }; module.exports = Promise;\"]},\"284\":{\"c\":[\"JavaScript\"]},\"285\":{\"h\":\"代理与反射\",\"t\":[\"ECMAScript 6 新增的代理和反射为开发者提供了拦截并向基本操作嵌入额外行为的能力。\",\"具体地说，可以给目标对象定义一个关联的代理对象，而这个代理对象可以作为抽象的目标对象来使用。\",\"在对目标对象的各种操作影响目标对象之前，可以在代理对象中对这些操作加以控制。\"]},\"286\":{\"h\":\"代理基础\"},\"287\":{\"h\":\"创建空代理\",\"t\":[\"Proxy()\",\"const p = new Proxy(target, handler) target 要使用 Proxy 包装的目标对象（可以是任何类型的对象，包括原生数组，函数，甚至另一个代理）。 handler 一个通常以函数作为属性的对象，各属性中的函数分别定义了在执行各种操作时代理 p 的行为。\",\"在代理对象上执行的任何操作实际上都会应用到目标对象。\",\"唯一可感知的不同就是代码中操作的是代理对象。\",\"const target = { id: \\\"target\\\", }; const handler = {}; const proxy = new Proxy(target, handler); // id 属性会访问同一个值 console.log(target.id); // target console.log(proxy.id); // target // 给目标属性赋值会反映在两个对象上 // 因为两个对象访问的是同一个值 target.id = \\\"foo\\\"; console.log(target.id); // foo console.log(proxy.id); // foo // 给代理属性赋值会反映在两个对象上 // 因为这个赋值会转移到目标对象 proxy.id = \\\"bar\\\"; console.log(target.id); // bar console.log(proxy.id); // bar // hasOwnProperty()方法在两个地方 // 都会应用到目标对象 console.log(target.hasOwnProperty(\\\"id\\\")); // true console.log(proxy.hasOwnProperty(\\\"id\\\")); // true // Proxy.prototype 是undefined // 因此不能使用instanceof 操作符 console.log(target instanceof Proxy); // TypeError: Function has non-object prototype // 'undefined' in instanceof check console.log(proxy instanceof Proxy); // TypeError: Function has non-object prototype // 'undefined' in instanceof check // 严格相等可以用来区分代理和目标 console.log(target === proxy); // false\"]},\"288\":{\"h\":\"定义捕获器\",\"t\":[\"使用代理的主要目的是可以定义捕获器（trap）。捕获器就是在处理程序对象中定义的“基本操作的拦截器”。每个处理程序对象可以包含零个或多个捕获器，每个捕获器都对应一种基本操作，可以直接或间接在代理对象上调用。每次在代理对象上调用这些基本操作时，代理可以在这些操作传播到目标对象之前先调用捕获器函数，从而拦截并修改相应的行为。\",\"const target = { foo: \\\"bar\\\", }; const handler = { // 捕获器在处理程序对象中以方法名为键 get() { return \\\"handler override\\\"; }, }; const proxy = new Proxy(target, handler); console.log(target.foo); // bar console.log(proxy.foo); // handler override console.log(target[\\\"foo\\\"]); // bar console.log(proxy[\\\"foo\\\"]); // handler override console.log(Object.create(target)[\\\"foo\\\"]); // bar console.log(Object.create(proxy)[\\\"foo\\\"]); // handler override\"]},\"289\":{\"h\":\"捕获器参数和反射 API\",\"t\":[\"所有捕获器都可以访问相应的参数，基于这些参数可以重建被捕获方法的原始行为\",\"get()\",\"get(trapTarget,property,receiver)) 捕获器会接收到目标对象、要查询的属性和代理对象三个参数。\",\"const target = { foo: \\\"bar\\\", }; const handler = { get(trapTarget, property, receiver) { console.log(trapTarget === target); console.log(property); console.log(receiver === proxy); }, }; const proxy = new Proxy(target, handler); proxy.foo; // true // foo // true\",\"反射（Reflect）API 方法，方法与捕获器拦截的方法具有相同的名称和函数签名，而且也具有与被拦截方法相同的行为。\",\"const target = { foo: \\\"bar\\\", }; const handler = { get() { return Reflect.get(...arguments); }, }; const proxy = new Proxy(target, handler); console.log(proxy.foo); // bar console.log(target.foo); // bar\",\"简洁\",\"const target = { foo: \\\"bar\\\", }; const handler = { get: Reflect.get, }; const proxy = new Proxy(target, handler); console.log(proxy.foo); // bar console.log(target.foo); // bar\",\"如果想创建一个可以捕获所有方法，然后将每个方法转发给对应反射 API 的空代理，那么甚至不需要定义处理程序对象：\",\"const target = { foo: \\\"bar\\\", }; const proxy = new Proxy(target, Reflect); console.log(proxy.foo); // bar console.log(target.foo); // bar\",\"反射 API 为开发者准备好了样板代码\",\"const target = { foo: \\\"bar\\\", baz: \\\"qux\\\", }; const handler = { get(trapTarget, property, receiver) { let decoration = \\\"\\\"; if (property === \\\"foo\\\") { decoration = \\\"!!!\\\"; } return Reflect.get(...arguments) + decoration; }, }; const proxy = new Proxy(target, handler); console.log(proxy.foo); // bar!!! console.log(target.foo); // bar console.log(proxy.baz); // qux console.log(target.baz); // qux\"]},\"290\":{\"h\":\"捕获器不变式\",\"t\":[\"捕获处理程序的行为必须遵循“捕获器不变式”\",\"如果目标对象有一个不可配置且不可写的数据属性，那么在捕获器返回一个与该属性不同的值时，会抛出 TypeError：\",\"const target = {}; Object.defineProperty(target, \\\"foo\\\", { // 此处设置了foo属性不可配置且不可改写 configurable: false, writable: false, value: \\\"bar\\\", }); const handler = { get() { return \\\"qux\\\"; }, }; const proxy = new Proxy(target, handler); console.log(proxy.foo); // TypeError\"]},\"291\":{\"h\":\"可撤销代理\",\"t\":[\"Proxy.revocable(target,handler)\",\"撤销代理对象与目标对象的关联。撤销代理的操作是不可逆的。而且，撤销函数（revoke()）是幂等的，调用多少次的结果都一样。\",\"const target = { foo: \\\"bar\\\", }; const handler = { get() { return \\\"intercepted\\\"; }, }; // 通过revocable()工厂方法，在实例化时同时生成撤销函数revoke和代理对象proxy const { proxy, revoke } = Proxy.revocable(target, handler); console.log(proxy.foo); // intercepted console.log(target.foo); // bar revoke(); // 执行撤销函数 console.log(proxy.foo); // TypeError\"]},\"292\":{\"h\":\"实用反射 API\"},\"293\":{\"h\":\"反射 API 与对象 API\",\"t\":[\"(1) 反射 API 并不限于捕获处理程序；\",\"(2) 大多数反射 API 方法在 Object 类型上有对应的方法。\",\"通常，Object 上的方法适用于通用程序，而反射方法适用于细粒度的对象控制与操作。\"]},\"294\":{\"h\":\"状态标记\",\"t\":[\"很多反射方法返回称作“状态标记”的布尔值，表示意图执行的操作是否成功\",\"使用Object.defineProperty()方法定义对象属性时会返回对象 但使用Reflect.defineProperty()方法定义属性时会返回true/false表示成功/失败\",\"初始代码\",\"// 初始代码 const o = {}; try { Object.defineProperty(o, \\\"foo\\\", \\\"bar\\\"); // 不符合defineProperty的语法规则而报错 console.log(\\\"success\\\"); } catch (e) { console.log(\\\"failure\\\"); }\",\"在定义新属性时如果发生问题，Reflect.defineProperty()会返回false，而不是抛出错误\",\"代码重构\",\"// 重构后的代码 const o = {}; if (Reflect.defineProperty(o, \\\"foo\\\", { value: \\\"bar\\\" })) { console.log(\\\"success\\\"); } else { console.log(\\\"failure\\\"); }\",\"以下反射方法都会提供状态标记, 即返回值都是布尔值 true/false：  Reflect.defineProperty()  Reflect.preventExtensions()  Reflect.setPrototypeOf()  Reflect.set()  Reflect.deleteProperty()\"]},\"295\":{\"h\":\"一等函数代替操作符\",\"t\":[\" Reflect.get()：可以替代对象属性访问操作符。  Reflect.set()：可以替代=赋值操作符。  Reflect.has()：可以替代 in 操作符或 with()。  Reflect.deleteProperty()：可以替代 delete 操作符。  Reflect.construct()：可以替代 new 操作符。\"]},\"296\":{\"h\":\"安全地应用函数\",\"t\":[\"在通过 apply 方法调用函数时，被调用的函数可能也定义了自己的 apply 属性\",\"为绕过这个问题，可以使用定义在 Function 原型上的 apply 方法\",\"Function.prototype.apply.call(myFunc, thisVal, argumentList);\",\"可以使用 Reflect.apply 来避免\",\"Reflect.apply(myFunc, thisVal, argumentsList);\"]},\"297\":{\"h\":\"代理另一个代理\",\"t\":[\"代理可以拦截反射 API 的操作，而这意味着完全可以创建一个代理，通过它去代理另一个代理。这样就可以在一个目标对象之上构建多层拦截网：\",\"const target = { foo: \\\"bar\\\", }; const firstProxy = new Proxy(target, { get() { console.log(\\\"first proxy\\\"); return Reflect.get(...arguments); }, }); const secondProxy = new Proxy(firstProxy, { get() { console.log(\\\"second proxy\\\"); return Reflect.get(...arguments); }, }); console.log(secondProxy.foo); // second proxy // first proxy // bar\"]},\"298\":{\"h\":\"代理的问题与不足\"},\"299\":{\"h\":\"代理中的 this\",\"t\":[\"const target = { thisValEqualsProxy() { return this === proxy; }, }; const proxy = new Proxy(target, {}); console.log(target.thisValEqualsProxy()); // false console.log(proxy.thisValEqualsProxy()); // true\",\"const wm = new WeakMap(); class User { constructor(userId) { wm.set(this, userId); } set id(userId) { wm.set(this, userId); } get id() { return wm.get(this); } } const user = new User(123); console.log(user.id); // 123 const userInstanceProxy = new Proxy(user, {}); console.log(userInstanceProxy.id); // undefined\",\"User 实例一开始使用目标对象作为 WeakMap 的键，代理对象却尝试从自身取得这个实例。\",\"要解决这个问题，就需要重新配置代理，把代理User实例改为代理 User 类本身\",\"// 把代理`User`实例改为代理 `User` 类本身 const UserClassProxy = new Proxy(User, {}); const proxyUser = new UserClassProxy(456); console.log(proxyUser.id); // 456\"]},\"300\":{\"h\":\"代理与内部插槽\",\"t\":[\"代理与内置引用类型（比如 Array）的实例通常可以很好地协同，但有些 ECMAScript 内置类型可能会依赖代理无法控制的机制，结果导致在代理上调用某些方法会出错。\",\"一个典型的例子就是 Date 类型。根据 ECMAScript 规范，Date 类型方法的执行依赖 this 值上的内部槽位[[NumberDate]]。代理对象上不存在这个内部槽位，而且这个内部槽位的值也不能通过普通的 get()和 set()操作访问到，于是代理拦截后本应转发给目标对象的方法会抛出 TypeError：\",\"const target = new Date(); const proxy = new Proxy(target, {}); console.log(proxy instanceof Date); // true target.getDate(); // 当前日期为几号, 如13号 proxy.getDate(); // TypeError: 'this' is not a Date object\"]},\"301\":{\"h\":\"代理捕获器与反射方法\",\"t\":[\"代理可以捕获 13 种不同的基本操作。这些操作有各自不同的反射 API 方法、参数、关联 ECMAScript 操作和不变式。\"]},\"302\":{\"h\":\"get() 对应 Reflect.get()\",\"t\":[\"get()\",\"get()捕获器会在获取属性值的操作中被调用\",\"Reflect.get(target, propertyKey[, receiver])  target：目标对象。  property：引用的目标对象上的字符串键属性。①  receiver：代理对象或继承代理对象的对象 返回值 属性的值\",\"const myTarget = {}; const proxy = new Proxy(myTarget, { get(target, property, receiver) { console.log(\\\"get()\\\"); return Reflect.get(...arguments); }, }); proxy.foo; // get()\",\"拦截的操作\",\"proxy.property\",\"proxy[property]\",\"Object.create(proxy)[property]\",\"Reflect.get(proxy, property, receiver)\",\"捕获器不变式 如果 target.property 不可写且不可配置( 即 configurable: false, writable: false)，则处理程序返回的值必须与 target.property 匹配。 如果 target.property 不可配置( 即 configurable: false) 且[[Get]]特性为 undefined，处理程序的返回值也必须是 undefined\"]},\"303\":{\"h\":\"set()对应 Reflect.set()\",\"t\":[\"set()\",\"set()捕获器会在设置属性值的操作中被调用\",\"Reflect.set(target, propertyKey, value[, receiver])  target：目标对象。  property：设置的属性的名称。  value：设置的值。  receiver：如果遇到 setter，receiver则为setter调用时的this值。 返回值 返回true 表示成功；返回false 表示失败，严格模式下会抛出TypeError。\",\"const myTarget = {}; const proxy = new Proxy(myTarget, { set(target, property, value, receiver) { console.log(\\\"set()\\\"); return Reflect.set(...arguments); }, }); proxy.foo = \\\"bar\\\"; // set() // 'bar' // 返回值\",\"拦截的操作\",\"proxy.property = value\",\"proxy[property] = value\",\"Object.create(proxy)[property] = value\",\"Reflect.set(proxy, property, value, receiver)\",\"捕获器不变式 如果 target.property 不可写且不可配置，则不能修改目标属性的值。 如果 target.property 不可配置且[[Set]]特性为 undefined，则不能修改目标属性的值。 在严格模式下，处理程序中返回 false 会抛出 TypeError。\"]},\"304\":{\"h\":\"has()对应 Reflect.has()\",\"t\":[\"has()捕获器会在 in 操作符中被调用\",\"has()\",\"Reflect.has(target, propertyKey)  target：目标对象。  property：属性名，需要检查目标对象是否存在此属性 返回值 has()必须返回布尔值，表示属性是否存在。返回非布尔值会被转型为布尔值\",\"const myTarget = {}; const proxy = new Proxy(myTarget, { has(target, property) { console.log(\\\"has()\\\"); return Reflect.has(...arguments); }, }); \\\"foo\\\" in proxy; // has() // false // 返回值\",\"拦截的操作\",\"property in proxy\",\"property in Object.create(proxy)\",\"with(proxy)\",\"Reflect.has(proxy, property)\",\"捕获器不变式 如果 target.property 存在且不可配置，则处理程序必须返回 true。 如果 target.property 存在且目标对象不可扩展，则处理程序必须返回 true。\"]},\"305\":{\"h\":\"defineProperty()对应 Reflect.defineProperty()\",\"t\":[\"defineProperty()捕获器会在 Object.defineProperty()中被调用\",\"defineProperty()\",\"Reflect.defineProperty(target, property, descriptor)  target：目标对象。  property：引用的目标对象上的字符串键属性。  descriptor：包含可选的enumerable、configurable、writable、value、get 和set 定义的对象。 返回值 defineProperty()必须返回布尔值，表示属性是否成功定义。返回非布尔值会被转型为布尔值。\",\"const myTarget = {}; const proxy = new Proxy(myTarget, { defineProperty(target, property, descriptor) { console.log(\\\"defineProperty()\\\"); return Reflect.defineProperty(...arguments); }, }); Object.defineProperty(proxy, \\\"foo\\\", { value: \\\"bar\\\" }); // defineProperty()\",\"拦截的操作\",\"Object.defineProperty(proxy, property, descriptor)\",\"Reflect.defineProperty(proxy, property, descriptor)\",\"捕获器不变式 如果目标对象不可扩展，则无法定义属性。 如果目标对象有一个可配置的属性，则不能添加同名的不可配置属性。 如果目标对象有一个不可配置的属性，则不能添加同名的可配置属性。\"]},\"306\":{\"h\":\"getOwnPropertyDescriptor()对应 Reflect.getOwnPropertyDescriptor()\",\"t\":[\"getOwnPropertyDescriptor()捕获器会在 Object.getOwnPropertyDescriptor()中被调用\",\"如果在对象中存在，则返回给定的属性的属性描述符\",\"Reflect.getOwnPropertyDescriptor(target, property)  target：目标对象。  property：引用的目标对象上的字符串键属性。 返回值 getOwnPropertyDescriptor()必须返回对象，或者在属性不存在时返回undefined\",\"const myTarget = {}; const proxy = new Proxy(myTarget, { getOwnPropertyDescriptor(target, property) { console.log(\\\"getOwnPropertyDescriptor()\\\"); return Reflect.getOwnPropertyDescriptor(...arguments); }, }); Object.getOwnPropertyDescriptor(proxy, \\\"foo\\\"); // getOwnPropertyDescriptor() // undefined\",\"拦截的操作\",\"Object.getOwnPropertyDescriptor(proxy, property)\",\"Reflect.getOwnPropertyDescriptor(proxy, property)\",\"捕获器不变式 如果自有的 target.property 存在且不可配置，则处理程序必须返回一个表示该属性存在的对象。 如果自有的 target.property 存在且可配置，则处理程序必须返回表示该属性可配置的对象。 如果自有的 target.property 存在且 target 不可扩展，则处理程序必须返回一个表示该属性存在的对象。 如果 target.property 不存在且 target 不可扩展，则处理程序必须返回 undefined 表示该属性不存在。 如果 target.property 不存在，则处理程序不能返回表示该属性可配置的对象。\"]},\"307\":{\"h\":\"deleteProperty()对应 Reflect.deleteProperty()\",\"t\":[\"deleteProperty()捕获器会在 delete 操作符中被调用。\",\"Reflect.deleteProperty(target, propertyKey) target:删除属性的目标对象。 propertyKey:需要删除的属性的名称 返回值 Boolean 值表明该属性是否被成功删除。\",\"const myTarget = {}; const proxy = new Proxy(myTarget, { deleteProperty(target, property) { console.log(\\\"deleteProperty()\\\"); return Reflect.deleteProperty(...arguments); }, }); delete proxy.foo; // deleteProperty() // true // 返回值\",\"拦截的操作\",\"delete proxy.property\",\"delete proxy[property]\",\"Reflect.deleteProperty(proxy, property)\",\"捕获器不变式 如果自有的 target.property 存在且不可配置，则处理程序不能删除这个属性。\"]},\"308\":{\"h\":\"ownKeys()对应 Reflect.ownKeys()\",\"t\":[\"ownKeys()捕获器会在 Object.keys()及类似方法中被调用。\",\"返回一个由目标对象自身的属性键组成的数组。\",\"Reflect.ownKeys(target)  target：目标对象 返回值 由目标对象的自身属性键组成的 Array。\",\"const myTarget = {}; const proxy = new Proxy(myTarget, { ownKeys(target) { console.log(\\\"ownKeys()\\\"); return Reflect.ownKeys(...arguments); }, }); Object.keys(proxy); // ownKeys() //[]\",\"拦截的操作\",\"Object.getOwnPropertyNames(proxy)\",\"Object.getOwnPropertySymbols(proxy)\",\"Object.keys(proxy)\",\"Reflect.ownKeys(proxy)\",\"捕获器不变式 返回的可枚举对象必须包含 target 的所有不可配置的自有属性。 如果 target 不可扩展，则返回可枚举对象必须准确地包含自有属性键。\"]},\"309\":{\"h\":\"getPrototypeOf()对应 Reflect.getPrototypeOf()\",\"t\":[\"getPrototypeOf()捕获器会在 Object.getPrototypeOf()中被调用。\",\"返回指定对象的原型（即内部的 [[Prototype]] 属性的值）。\",\"Reflect.getPrototypeOf(target)  target：目标对象。\",\"const myTarget = {}; const proxy = new Proxy(myTarget, { getPrototypeOf(target) { console.log(\\\"getPrototypeOf()\\\"); return Reflect.getPrototypeOf(...arguments); }, }); Object.getPrototypeOf(proxy); // getPrototypeOf() // 返回其原型, 此处即为object\",\"拦截的操作\",\"Object.getPrototypeOf(proxy)\",\"Reflect.getPrototypeOf(proxy)\",\"proxy.proto\",\"Object.prototype.isPrototypeOf(proxy)\",\"proxy instanceof Object\",\"捕获器不变式 如果 target 不可扩展，则 Object.getPrototypeOf(proxy)唯一有效的返回值就是 Object. getPrototypeOf(target)的返回值\"]},\"310\":{\"h\":\"setPrototypeOf()对应 Reflect.setPrototypeOf()\",\"t\":[\"setPrototypeOf()捕获器会在 Object.setPrototypeOf()中被调用。\",\"设置对象的原型（即内部的 [[Prototype]] 属性）为另一个对象或 null，如果操作成功返回 true，否则返回 false。\",\"Reflect.setPrototypeOf(target, prototype)  target：目标对象。  prototype：对象的新原型（一个对象或 null）。 返回值 setPrototypeOf()必须返回布尔值，表示原型赋值是否成功。返回非布尔值会被转型为布尔值。\",\"const myTarget = {}; const proxy = new Proxy(myTarget, { setPrototypeOf(target, prototype) { console.log(\\\"setPrototypeOf()\\\"); return Reflect.setPrototypeOf(...arguments); }, }); Object.setPrototypeOf(proxy, Object); // setPrototypeOf()\",\"拦截的操作\",\"Object.setPrototypeOf(proxy)\",\"Reflect.setPrototypeOf(proxy)\",\"捕获器不变式 如果 target 不可扩展，则唯一有效的 prototype 参数就是 Object.getPrototypeOf(target)的返回值。\"]},\"311\":{\"h\":\"isExtensible()对应 Reflect.isExtensible()\",\"t\":[\"isExtensible()捕获器会在 Object.isExtensible()中被调用\",\"判断一个对象是否可扩展 （即是否能够添加新的属性）\",\"Reflect.isExtensible(target)  target：目标对象。 返回值 isExtensible()必须返回布尔值，表示target 是否可扩展。返回非布尔值会被转型为布尔值。\",\"const myTarget = {}; const proxy = new Proxy(myTarget, { isExtensible(target) { console.log(\\\"isExtensible()\\\"); return Reflect.isExtensible(...arguments); }, }); Object.isExtensible(proxy); // isExtensible() // true // 返回值\",\"拦截的操作\",\"Object.isExtensible(proxy)\",\"Reflect.isExtensible(proxy)\",\"捕获器不变式 如果 target 可扩展，则处理程序必须返回 true。 如果 target 不可扩展，则处理程序必须返回 false。\"]},\"312\":{\"h\":\"preventExtensions()对应 Reflect.preventExtensions()\",\"t\":[\"preventExtensions()捕获器会在 Object.preventExtensions()中被调用\",\"方法阻止新属性添加到对象 (例如：防止将来对对象的扩展被添加到对象中)。\",\"Reflect.preventExtensions(target)  target：目标对象。 返回值 preventExtensions()必须返回布尔值，表示target 是否已经不可扩展。返回非布尔值会被转 型为布尔值。\",\"const myTarget = {}; const proxy = new Proxy(myTarget, { preventExtensions(target) { console.log(\\\"preventExtensions()\\\"); return Reflect.preventExtensions(...arguments); }, }); Object.preventExtensions(proxy); // preventExtensions()\",\"拦截的操作\",\"Object.preventExtensions(proxy)\",\"Reflect.preventExtensions(proxy)\",\"捕获器不变式 如果 Object.isExtensible(proxy)是 false，则处理程序必须返回 true。\"]},\"313\":{\"h\":\"apply()对应 Reflect.apply()\",\"t\":[\"apply()捕获器会在调用函数时中被调用\",\"通过指定的参数列表发起对目标(target)函数的调用。\",\"Reflect.apply(target, thisArgument, argumentsList)  target：目标对象。  thisArgument：调用函数时的this 参数。  argumentsList：target函数调用时传入的实参列表，该参数应该是一个类数组的对象。\",\"const myTarget = () => {}; const proxy = new Proxy(myTarget, { apply(target, thisArg, ...argumentsList) { console.log(\\\"apply()\\\"); return Reflect.apply(...arguments); }, }); proxy(); // apply() // undefined // 返回值\",\"拦截的操作\",\"proxy(...argumentsList)\",\"Function.prototype.apply(thisArg, argumentsList)\",\"Function.prototype.call(thisArg, ...argumentsList)\",\"Reflect.apply(target, thisArgument, argumentsList)\",\"捕获器不变式 target 必须是一个函数对象。\"]},\"314\":{\"h\":\"construct()对应 Reflect.construct()\",\"t\":[\"construct()捕获器会在 new 操作符中被调用\",\"方法的行为有点像 new 操作符 构造函数 ， 相当于运行 new target(...args).\",\"Reflect.construct(target, argumentsList[, newTarget])  target：目标构造函数。  argumentsList：传给目标构造函数的参数列表。  newTarget：最初被调用的构造函数。 返回值 construct()必须返回一个对象\",\"拦截的操作\",\"new proxy(...argumentsList)\",\"Reflect.construct(target, argumentsList, newTarget)\",\"捕获器不变式 target 必须可以用作构造函数\"]},\"315\":{\"h\":\"代理模式\"},\"316\":{\"h\":\"跟踪属性访问\",\"t\":[\"通过捕获 get、set 和 has 等操作，可以知道对象属性什么时候被访问、被查询。\",\"把实现相应捕获器的某个对象代理放到应用中，可以监控这个对象何时在何处被访问过：\",\"const user = { name: \\\"Jake\\\", }; const proxy = new Proxy(user, { get(target, property, receiver) { console.log(`Getting ${property}`); return Reflect.get(...arguments); }, set(target, property, value, receiver) { console.log(`Setting ${property}=${value}`); return Reflect.set(...arguments); }, }); proxy.name; // Getting name proxy.age = 27; // Setting age=27\"]},\"317\":{\"h\":\"隐藏属性\",\"t\":[\"代理的内部实现对外部代码是不可见的，因此要隐藏目标对象上的属性也轻而易举\",\"const hiddenProperties = [\\\"foo\\\", \\\"bar\\\"]; // 隐藏起foo, bar这两个属性 const targetObject = { foo: 1, bar: 2, baz: 3, }; // 对设置隐藏的foo, bar两个属性单独处理 const proxy = new Proxy(targetObject, { get(target, property) { if (hiddenProperties.includes(property)) { return undefined; } else { return Reflect.get(...arguments); } }, has(target, property) { if (hiddenProperties.includes(property)) { return false; } else { return Reflect.has(...arguments); } }, }); // get() console.log(proxy.foo); // undefined console.log(proxy.bar); // undefined console.log(proxy.baz); // 3 // has() console.log(\\\"foo\\\" in proxy); // false console.log(\\\"bar\\\" in proxy); // false console.log(\\\"baz\\\" in proxy); // true\"]},\"318\":{\"h\":\"属性验证\",\"t\":[\"所有赋值操作都会触发 set()捕获器，所以可以根据所赋的值决定是允许还是拒绝赋值：\",\"const target = { onlyNumbersGoHere: 0, }; const proxy = new Proxy(target, { set(target, property, value) { if (typeof value !== \\\"number\\\") { // 判断所赋的值 return false; } else { return Reflect.set(...arguments); } }, }); proxy.onlyNumbersGoHere = 1; console.log(proxy.onlyNumbersGoHere); // 1 proxy.onlyNumbersGoHere = \\\"2\\\"; console.log(proxy.onlyNumbersGoHere); // 1\"]},\"319\":{\"h\":\"函数与构造函数参数验证\",\"t\":[\"跟保护和验证对象属性类似，也可对函数和构造函数参数进行审查。比如，可以让函数只接收某种类型的值：\",\"function median(...nums) { // Math.floor() 返回小于或等于一个给定数字的最大整数。 // Note: 可以理解 Math.floor()为向下取整 return nums.sort()[Math.floor(nums.length / 2)]; } const proxy = new Proxy(median, { apply(target, thisArg, argumentsList) { for (const arg of argumentsList) { if (typeof arg !== \\\"number\\\") { throw \\\"Non-number argument provided\\\"; } } return Reflect.apply(...arguments); }, }); console.log(proxy(4, 7, 1)); // 4 console.log(proxy(4, \\\"7\\\", 1)); // Error: Non-number argument provided\",\"class User { constructor(id) { this.id_ = id; } } const proxy = new Proxy(User, { construct(target, argumentsList, newTarget) { if (argumentsList[0] === undefined) { throw \\\"User cannot be instantiated without id\\\"; } else { return Reflect.construct(...arguments); } }, }); new proxy(1); new proxy(); // Error: User cannot be instantiated without id\"]},\"320\":{\"h\":\"数据绑定与可观测对象\",\"t\":[\"通过代理可以把运行时中原本不相关的部分联系到一起。这样就可以实现各种模式，从而让不同的代码互操作。\",\"比如，可以将被代理的类绑定到一个全局实例集合，让所有创建的实例都被添加到这个集合中：\",\"const userList = []; class User { constructor(name) { this.name_ = name; } } const proxy = new Proxy(User, { construct() { const newUser = Reflect.construct(...arguments); userList.push(newUser); return newUser; }, }); new proxy(\\\"John\\\"); new proxy(\\\"Jacob\\\"); new proxy(\\\"Jingleheimerschmidt\\\"); console.log(userList); // [User {}, User {}, User{}]\",\"还可以把集合绑定到一个事件分派程序，每次插入新实例时都会发送消息：\",\"const userList = []; function emit(newValue) { console.log(newValue); } const proxy = new Proxy(userList, { set(target, property, value, receiver) { // Reflect.set() 返回true表示设置property为值value成功, false表示失败 const result = Reflect.set(...arguments); if (result) { // 传参Reflect.get()的返回值, 即property属性的value值 emit(Reflect.get(target, property, receiver)); } return result; }, }); proxy.push(\\\"John\\\"); // John proxy.push(\\\"Jacob\\\"); // Jacob\",\"// 创建一个代理对象a,代理的目标对象是数组,通过reduce方法返回了处理器对象,拦截了所有的代理API方法. // 在拦截器内部,每个方法都会通过console.log打印出其key值(拦截器的名字/反射api的名字)和参数 var a = new Proxy( [], Reflect.ownKeys(Reflect).reduce((handlers, key) => { handlers[key] = (...args) => { console.log(key, ...args); return Reflect[key](...args); }; return handlers; }, {}) );\"]},\"321\":{\"c\":[\"JavaScript\"]},\"322\":{\"h\":\"小程序生命周期\"},\"323\":{\"h\":\"小程序启动\",\"t\":[\"冷启动：如果用户首次打开，或小程序销毁后被用户再次打开，此时小程序需要重新加载启动，即冷启动。 热启动：如果用户已经打开过某小程序，然后在一定时间内再次打开该小程序，此时小程序并未被销毁，只是从后台状态进入前台状态，这个过程就是热启动\"]},\"324\":{\"h\":\"前台和后台\",\"t\":[\"小程序启动后，界面被展示给用户，此时小程序处于「前台」状态。\",\"当用户「关闭」小程序时，小程序并没有真正被关闭，而是进入了「后台」状态，此时小程序还可以短暂运行一小段时间，但部分 API 的使用会受到限制。切后台的方式包括但不限于以下几种：\",\"点击右上角胶囊按钮离开小程序 iOS 从屏幕左侧右滑离开小程序 安卓点击返回键离开小程序 小程序前台运行时直接把微信切后台（手势或 Home 键） 小程序前台运行时直接锁屏 当用户再次进入微信并打开小程序，小程序又会重新进入「前台」状态。\"]},\"325\":{\"h\":\"生命周期\",\"t\":[\"首先执行 App.onLaunch -> App.onShow 其次执行 Component.created -> Component.attached 再执行 Page.onLoad -> Page.onShow 最后 执行 Component.ready -> Page.onReady\"]},\"326\":{\"h\":\"小程序\",\"t\":[\"// app.js App({ onLaunch (options) { // Do something initial when launch. }, onShow (options) { // Do something when show. }, onHide () { // Do something when hide. }, onError (msg) { console.log(msg) }, globalData: 'I am global data' })\"]},\"327\":{\"h\":\"页面\",\"t\":[\"//index.js Page({ data: { text: \\\"This is page data.\\\" }, onLoad: function(options) { // 页面创建时执行 }, onShow: function() { // 页面出现在前台时执行 }, onReady: function() { // 页面首次渲染完毕时执行 }, onHide: function() { // 页面从前台变为后台时执行 }, onUnload: function() { // 页面销毁时执行 }, onPullDownRefresh: function() { // 触发下拉刷新时执行 }, onReachBottom: function() { // 页面触底时执行 }, onShareAppMessage: function () { // 页面被用户分享时执行 }, onPageScroll: function() { // 页面滚动时执行 }, onResize: function() { // 页面尺寸变化时执行 }, onTabItemTap(item) { // tab 点击时执行 console.log(item.index) console.log(item.pagePath) console.log(item.text) }, // 事件响应函数 viewTap: function() { this.setData({ text: 'Set some data for updating view.' }, function() { // this is setData callback }) }, // 自由数据 customData: { hi: 'MINA' } })\"]},\"328\":{\"h\":\"组件\",\"t\":[\"Component({ lifetimes: { attached: function() { // 在组件实例进入页面节点树时执行 }, detached: function() { // 在组件实例被从页面节点树移除时执行 }, }, // 以下是旧式的定义方式，可以保持对 <2.2.3 版本基础库的兼容 attached: function() { // 在组件实例进入页面节点树时执行 }, detached: function() { // 在组件实例被从页面节点树移除时执行 }, // ... })\"]},\"329\":{\"c\":[\"MiniProgram\"]},\"330\":{\"h\":\"浏览器生成信息\",\"t\":[\"参考\",\"《网络是怎样连接的》\",\"浏览器、Web服务器、网址（URL）、HTTP、HTML、协议、URI、请求消息、解析器、 Socket库、DNS服务器、域名\",\"Untitled\"]},\"331\":{\"h\":\"生成HTTP请求信息\"},\"332\":{\"h\":\"URL\",\"t\":[\"Untitled\"]},\"333\":{\"h\":\"解析URL\",\"t\":[\"URL 以“/”来结尾表示访问的默认文件名\",\"Untitled\",\"Untitled\"]},\"334\":{\"h\":\"省略文件名\",\"t\":[\"（a）http://www.lab.glasscom.com/dir/\",\"像前面这样省略文件名时，服务器就会访问/dir/index.html者/dir/default.htm。\",\"（b）http://www.lab.glasscom.com/\",\"由于省略了文件名，所以结果就是访问/index.html 或者default.htm 这样的文件\",\"（c）http://www.lab.glasscom.com\",\"当没路径名时，就代表访问根目录下事先设置的默认文，也就是/index.tml 或者/default.htm 这些文\",\"（d）http://www.lab.glasscom.com/whatisthis\",\"如果eb 服务器上存在名为whatisthis 的文件，则将whatisthis 作为文件名来处；如果存在名为whatisthis 的目录，则将whatisthis 作为目录名来处理\"]},\"335\":{\"h\":\"HTTP\",\"t\":[\"HTTP 协议定义了客户端和服务器之间交互的消息内容和步骤\",\"客户端会向服务器发送请求消息。请求息中包含的内容是“对什么”和“进行怎样的操作”两个部分\",\"Untitled\",\"“对什么”的部分称为UR。一般来说，URI 的内容是一个存放网页据的文件名或者是一个CGI 程序B 的文件名，例如“/dir1/file1.html”/dir1/program1.cgi”\",\"“进行怎样的操作”的部分称为方法。方法表示需要让Web 服务器完成怎样的工作，其中典型的例子包括读取URI 表示的数据、客户端输入的数据发送给URI 表示的程序等。\",\"HTTP主要方法：\",\"Untitled\"]},\"336\":{\"h\":\"生成HTTP请求信息\",\"t\":[\"对URL 进行解析之后，浏览器确定了Web 服务器和文件名，接下来就是根据这些信息来生成HTTP 请求消息\",\"Untitled\",\"Untitled\",\"Untitled\"]},\"337\":{\"h\":\"发送请求收到响应\",\"t\":[\"1 条请求消息中只能写1 个URI。如果需要获取多个文件，必须每个文件单独发送1 条请求。\",\"Untitled\"]},\"338\":{\"h\":\"向DNS服务查询IP\"},\"339\":{\"h\":\"IP地址\",\"t\":[\"生成HTTP 消息之后，接下来我们需要委托操作系统将消息发送给Web 服务器。\",\"在委托操作系统发送消息时，必须要提供通信对象IP 地址\",\"Untitled\",\"Untitled\",\"Untitled\",\"IP 地址的主机号 全0：表示整个子网 全1：表示向子网上所有设备发送包，即“广播”\"]},\"340\":{\"h\":\"域名和IP地址并用理由\",\"t\":[\"让人来使用名称，让路由器来使用IP 地址\"]},\"341\":{\"h\":\"socket库提供查询IP地址\",\"t\":[\"查询IP 地址的方法非常简单，只要询问最近的DNS 服务器“www.lab.glasscom.com 的IP 地址是什么”就可以了\",\"向DNS 服务器发出查询，也就是向DNS 服务器发送查询消息，并接收服务器返回的响应消息\",\"通过DNS 查询IP 地址的操作称为域名解析，因此负责执行解析（resolution）这一操作的就叫解析器（resolver）\",\"解析器实际上是一段程序，它包含在操作系统的Socket 库中\",\"Socket 库也是一种库，其中包含的程序组件可以让其他的应用程序调用操作系统的网络功能，而解析器就是这个库中 的其中一种程序组件。\"]},\"342\":{\"h\":\"通过解析器向DNS查询\",\"t\":[\"根据域名查询IP 地址时，浏览器会使用Socket 库中的解析器。\",\"Untitled\",\"调用解析器后，解析器会向DNS 服务器发送查询消息，然后DNS 服务器会返回响应消息。响应消息中包含查询到的IP 地址，解析器会取出IP地址，并将其写入浏览器指定的内存地址中\"]},\"343\":{\"h\":\"解析器的内部原理\",\"t\":[\"应用程序编写的操作内容是从上往下按顺序执行的，当到达需要调用解析器的部分时，对应的那一行程序就会被执行，应用程序本身的工作就会暂停\",\"当控制流程转移到解析器后，解析器会生成要发送给DNS 服务器的查询消息。这个过程与浏览器生成要发送给Web 服务器的HTTP 请求消息的过程类似，解析器会根据DNS 的规格，生成一条表示“请告诉我www.lab.glasscom.com 的IP 地址”B 的数据，并将它发送给DNS 服务器。\",\"发送消息这个操作并不是由解析器自身来执行，而是要委托给操作系统内部的协议栈来执行\",\"解析器调用协议栈后，控制流程会再次转移，协议栈会执行发送消息的操作，然后通过网卡将消息发送给DNS 服务器\",\"当DNS 服务器收到查询消息后，它会根据消息中的查询内容进行查询。\",\"如果要访问的Web 服务器已经在DNS 服务器上注册，那么这条记录就能够被找到，然后其IP 地址会被写入响应消息并返回给客户端\",\"消息经过网络到达客户端，再经过协议栈被传递给解析器\",\"然后解析器读取出消息取出IP 地址，并将IP 地址传递给应用程序\",\"向DNS 服务器发送消息时，我们当然也需要知道DNS 服务器的IP 地址。只不过这个IP 地址是作为TCP/IP 的一个设置项目事先设置好的，不需要再去查询了。\",\"Untitled\"]},\"344\":{\"h\":\"DNS服务器\"},\"345\":{\"h\":\"DNS基本工作\",\"t\":[\"DNS 服务器的基本工作就是接收来自客户端的查询消息，然后根据消息的内容返回响应\",\"（a） 域名 服务器、邮件服务器（邮件地址中@ 后面的部分）的名称 （b） Class 在最早设计DNS 方案时，DNS 在互联网以外的其他网络中的应用\",\"（c） 记录类型 表示域名对应何种类型的记录。\",\"DNS 服务器会从域名与IP 地址的对照表中查找相应的记录，并返回IP 地址\",\"Untitled\"]},\"346\":{\"h\":\"域名的层次结构\",\"t\":[\"Untitled\",\"Untitled\"]},\"347\":{\"h\":\"通过缓存加快DNS服务器的响应\",\"t\":[\"在真实的互联网中，一台DNS 服务器可以管理多个域的信息\",\"现实中上级域和下级域有可能共享同一台DNS 服务器。\",\"有时候并不需要从最上级的根域开始查找，因为DNS 服务器有一个缓存A功能，可以记住之前查询过的域名。如果要查询的域名和相关信息已经在缓存中，那么就可以直接返回响应，接下来的查询可以从缓存的位置开始向下进行。相比每次都从根域找起来说，缓存可以减少查询所需的时间。\"]},\"348\":{\"h\":\"委托协议栈发送消息\"},\"349\":{\"h\":\"数据收发操作概览\",\"t\":[\"这一操作的过程也不仅适用于Web，而是适用于任何网络应用程序\",\"向操作系统内部的协议栈发出委托时，需要按照指定的顺序来调用Socket 库中的程序组件。\",\"收发数据的两台计算机之间连接了一条数据通道，数据沿着这条通道流动，最终到达目的地。\",\"Untitled\",\"（1）创建套接字（创建套接字阶段） （2）将管道连接到服务器端的套接字上（连接阶段） （3）收发数据（通信阶段） （4）断开管道并删除套接字（断开阶段）\"]},\"350\":{\"h\":\"创建套接字阶段\",\"t\":[\"客户端创建套接字的操作非常简单，只要调用Socket 库中的socket 程序组件\",\"应用程序是通过“描述符”这一类似号码牌的东西来识别套接字的\",\"Untitled\"]},\"351\":{\"c\":[\"Network\"]},\"352\":{\"c\":[\"网络是怎样连接的\"]},\"353\":{\"h\":\"电信号传输TCP/IP数据\"},\"354\":{\"h\":\"创建嵌套字\"},\"355\":{\"h\":\"协议栈的内部结构\",\"t\":[\"浏览器、邮件等一般应用程序收发数据时用TCP； DNS 查询等收发较短的控制数据时用UDP。\",\"Untitled\"]},\"356\":{\"h\":\"套接字的实体就是通信控制信息\",\"t\":[\"在协议栈内部有一块用于存放控制信息的内存空间，这里记录了用于控制通信操作的控制信息，例如通信对象的IP 地址、端口号、通信操作的进行状态等\",\"协议栈是根据套接字中记录的控制信息来工作的。\",\"Untitled\"]},\"357\":{\"h\":\"调用socket时的操作\",\"t\":[\"创建套接字时，首先分配一个套接字所需的内存空间，然后向其中写入初始状态。\",\"Untitled\"]},\"358\":{\"h\":\"连接服务器\",\"t\":[\"创建套接字之后，应用程序（浏览器）就会调用connect，随后协议栈会将本地的套接字与服务器的套接字进行连接。\"]},\"359\":{\"h\":\"保存控制信息的头部\",\"t\":[\"客户端和服务器在通信中会将必要的信息记录在头部并相互确认\",\"控制信息大体上分为两类。\",\"第一类是客户端和服务器相互联络时交换的控制信息。\",\"另外一类，那就是保存在套接字中，用来控制协议栈操作的信息\",\"Untitled\",\"通信操作中使用的控制信息分为两类。 （1） 头部中记录的信息 （2） 套接字（协议栈中的内存空间）中记录的信息\"]},\"360\":{\"h\":\"连接操作的实际过程\",\"t\":[\"连接操作的第一步是在TCP 模块处创建表示连接控制信息的头部。\",\"通过TCP 头部中的发送方和接收方端口号可以找到要连接的套接字。\"]},\"361\":{\"h\":\"收发数据\"},\"362\":{\"h\":\"将HTTP 请求消息交给协议栈\"},\"363\":{\"h\":\"对较大的数据进行拆分\",\"t\":[\"Untitled\"]},\"364\":{\"h\":\"使用ACK号确认网络包已收到\",\"t\":[\"Untitled\",\"Untitled\",\"Untitled\"]},\"365\":{\"h\":\"根据网络包平均往返时间调整ACK 号等待时间\",\"t\":[\"这个等待时间叫超时时间\"]},\"366\":{\"h\":\"使用窗口有效管理ACK号\",\"t\":[\"能够接收的最大数据量称为窗口大小\",\"Untitled\",\"当接收方的TCP 收到包后，会先将数据存放到接收缓冲区中。\",\"Untitled\"]},\"367\":{\"h\":\"ACK与窗口的合并\",\"t\":[\"返回ACK号和更新窗口的时机？\",\"其实没必要每次都向发送方更新窗口大小，因为只要发送方在每次发送数据时减掉已发送的数据长度就可以自行计算出当前窗口的剩余长度。\",\"接收方在发送ACK 号和窗口更新时，并不会马上把包发送出去，而是会等待一段时间\",\"因为ACK 号表示的是已收到的数据量，也就是说，它是告诉发送方目前已接收的数据的最后位置在哪里，因此当需要连续发送ACK 号时，只要发送最后一个ACK 号就可以了\"]},\"368\":{\"h\":\"接受HTTP响应消息\",\"t\":[\"协议栈会检查收到的数据块和TCP 头部的内容，判断是否有数据丢失，如果没有问题则返回ACK 号\",\"协议栈将数据块暂存到接收缓冲区中，并将数据块按顺序连接起来还原出原始的数据，最后将数据交给应用程序\",\"协议栈会将接收到的数据复制到应用程序指定的内存地址中，然后将控制流程交回应用程序\"]},\"369\":{\"h\":\"从服务器断开并删除嵌套字\"},\"370\":{\"h\":\"数据发送完毕后断开连接\",\"t\":[\"Untitled\"]},\"371\":{\"h\":\"删除套接字\",\"t\":[\"（1）客户端发送FIN （2）服务器返回ACK 号 （3）服务器发送FIN （4）客户端返回ACK 号\"]},\"372\":{\"h\":\"数据收发操作小结\",\"t\":[\"创建套接字之后，客户端会向服务器发起连接操作。\",\"客户端会生成一个SYN 为1 的TCP 包并发送给服务器\",\"Untitled\"]},\"373\":{\"h\":\"ip与以太网的包收发操\"},\"374\":{\"h\":\"包的基本知识\",\"t\":[\"TCP 模块在执行连接、收发、断开等各阶段操作时，都需要委托IP 模块将数据封装成包发送给通信对象。\",\"Untitled\",\"Untitled\",\"（1）路由器根据目标地址判断下一个路由器的位置 （2）集线器在子网中将网络包传输到下一个路由\",\"（1）IP 协议根据目标地址判断下一个IP 转发设备的位置 （2）子网中的以太网协议将包传输到下一个转发设备\",\"Untitled\"]},\"375\":{\"h\":\"包收发操作概览\",\"t\":[\"Untitled\",\"包收发操作的起点是TCP 模块委托IP 模块发送包的操作\",\"这个委托的过程就是TCP 模块在数据块的前面加上TCP头部，然后整个传递给IP 模块，这部分就是网络包的内容。\",\"收到委托后，IP 模块会将包的内容当作一整块数据，在前面加上包含制信息的头部\",\"IP 模块负责添加如下两个头部。 （1） MAC 头部：以太网用的头部，包含MAC 地址 （2） IP 头部：IP 用的头部，包含IP 地址\"]},\"376\":{\"h\":\"生成包含接收方IP地址的IP头部\",\"t\":[\"Untitled\"]},\"377\":{\"h\":\"生成以太网用的MAC头部\"},\"378\":{\"h\":\"通过ARP查询目标路由器的MAC地址\",\"t\":[\"查询MAC 地址需要使用ARP。\"]},\"379\":{\"h\":\"以太网的基本知识\",\"t\":[\"以太网是一种为多台计算机能够彼此自由和廉价地相互通信而设计的通信技术\",\"Untitled\"]},\"380\":{\"h\":\"将IP包转换为电或光信号发送出去\",\"t\":[\"生成的网络包只是存放在内存中的一串数字信息，没有办法直接发送给对方。因此，我们需要将数字信息转换为电或光信号，才能在网线上传输，也就是说，这才是真正的数据发送过程。负责执行这一操作的是网卡\",\"Untitled\",\"网卡的ROM 中保存着全世界唯一的MAC 地址，这是在生产网卡时写入的\",\"网卡中保存的MAC 地址会由网卡驱动程序读取并分配给MAC模块。\"]},\"381\":{\"h\":\"给网络包加3个控制数据\",\"t\":[\"网卡驱动从IP 模块获取包之后，会将其复制到网卡内的缓冲区中，然后向MAC 模块发送发送包的命令\",\"MAC 模块会将包从缓冲区中取出，并在开头加上报头和起始帧分界符，在末尾加上用于检测错误的帧校验序列\",\"Untitled\",\"Untitled\",\"用电信号来表达数字信息时，我们需要让0 和1 两种比特分别对应特定的电压和电流\",\"在数据信号之外再发送一组用来区分比特间隔的时钟信号\",\"Untitled\"]},\"382\":{\"h\":\"向集线器发送网络包\",\"t\":[\"Untitled\",\"网卡的MAC 模块生成通用信号，然后由PHY（MAU）模块转换成可在网线中传输的格式，并通过网线发送出去。\"]},\"383\":{\"c\":[\"Network\"]},\"384\":{\"c\":[\"网络是怎样连接的\"]},\"385\":{\"h\":\"从网线到网络设备\",\"t\":[\"参考\",\"《网络是怎样连接的》\"]},\"386\":{\"h\":\"信号在网线和集线器中传输\",\"t\":[\"信号从计算机中流出之后，会在网线中经过集线器等设备前进。此时， 信号是如何在网线和集线器传输的，就是我们的第一个看点。信号在传输 过程中会衰减，还会受到噪声干扰而失真，如何抑制这些影响是我们的另 一个看点。\"]},\"387\":{\"h\":\"每个包都是独立传输的\",\"t\":[\"从计算机发送出来的网络包会通过集线器、路由器等设备被转发，最终到达目的地。 实际上，路由器已经集成了集线器和交换机的功能\",\"信号到达集线器的时候并不是跟刚发送出去的时候一模一样。集线器收到的信号有时会出现衰减。信号在网线的传输过程中，能量会逐渐损失。网线越长，信号衰减就越严重。\"]},\"388\":{\"h\":\"防止网线中的信号衰减很重要\",\"t\":[\"网卡中的 PHY(MAU)A 模 块负责将包转换成电信号，信号通过 RJ-45 接口进入双绞线以太网信号的本质是正负变化的电压\",\"以太网信号的本质是正负变化的电压，网卡的 PHY（MAU）模块就是一个从正负两个信号端子输出信号的电路\",\"信号从这个接口中的 1 号和 2 号针脚流入网线。然后，信号会通过网线到达集线器的接口，这个过程就是单纯地传输电信号而已\",\"网线越长,信号衰减就越严重,高频信号更容易损失能量\"]},\"389\":{\"h\":\"“双绞”是为了抑制噪声\",\"t\":[\"局域网网线使用的是双绞线，其中“双绞”的意思就是以两根信号线为一组缠绕在一起，这种拧麻花一样的设计是为了抑制噪声的影响。\",\"噪声是如何产生的 产生噪声的原因是网线周围的电磁波，当电磁波接触到金属等导体时，在其中就会产生电流。因此，如果网线周围存在电磁波，就会在网线中产生和原本的信号不同的电流。信号和噪声的电流就会混杂在一起，导致信号的波形发生失真，这就是噪声的影响\",\"将信号线缠绕在一起，信号线就变成了螺旋形，其中两根信号线中产生的噪声电流方向就会相反，从而使得噪声电流相互抵消，噪声就得到了抑制\"]},\"390\":{\"h\":\"集线器将信号发往所有线路\",\"t\":[\"当信号到达集线器后，会被广播到整个网络中。\",\"以太网的基本架构就是将包发到所有的设备，然后由设备根据接收方 MAC 地址来判断应该接收哪些包，而集线器就是这一架构的忠实体现\",\"信号到达集线器的 PHY（MAU）模块后，会进入中继电路。中继电路的基本功能就是将输入的信号广播到集线器的所有端口上\",\"信号到达集线器的 PHY（MAU）模块后，会进入中继电路。中继电路的基本功能就是将输入的信号广播到集线器的所有端口上,信号到达集线器的 PHY（MAU）模块后，会进入中继电路。中继电路的基本功能就是将输入的信号广播到集线器的所有端口上\",\"集线器只是原封不动地将信号广播出去，所以即便信号受到噪声的干扰发生了失真，也会原样发送到目的地。接收信号的设备，也就是交换机、路由器、服务器等，会在将信号转换成数字信息后通过 FCSA 校验发现错误，并将出错的包丢弃。\"]},\"391\":{\"h\":\"交换机的包转发操作\"},\"392\":{\"h\":\"交换机根据地址表进行转发\",\"t\":[\"交换机并不只是简单地让信号流过，而是先接收信号并将其还原为数字信息，然后再重新转换成信号并发送出去的过程。 \",\"交换机的端口不核对接收方 MAC 地址，而是直接接收所有的包并存放到缓冲区中\",\"将包存入缓冲区后，接下来需要查询一下这个包的接收方 MAC 地址是否已经在 MAC 地址表中有记录了。MAC 地址表主要包含两个信息，一个是设备的 MAC 地址，另一个是该设备连接在交换机的哪个端口上。然后就可以通过交换电路将包发送到相应的端口了\"]},\"393\":{\"h\":\"MAC 地址表的维护\",\"t\":[\"交换机在转发包的过程中，还需要对 MAC 地址表的内容进行维护，维护操作分为两种。\",\"第一种是收到包时，将发送方 MAC 地址以及其输入端口的号码写入 MAC 地址表中。\",\"另一种是删除地址表中某条记录的操作，这是为了防止设备移动时产生问题。\"]},\"394\":{\"h\":\"特殊操作\",\"t\":[\"地址表中找不到指定的 MAC 地址，交换机无法判断应该把包转发到哪个端口，只能将包转发到除了源端口之外的所有端口上\",\"记录中的目标端口和这个包的源端口是同一个端口，就会直接丢弃这个包\"]},\"395\":{\"h\":\"全双工模式可以同时进行发送和接收\",\"t\":[\"全双工模式是交换机特有的工作模式，它可以同时进行发送和接收操作，集线器不具备这样的特性\"]},\"396\":{\"h\":\"自动协商：确定最优的传输速率\",\"t\":[\"自动协商功能就利用了这样的脉冲信号，即通过这种信号将自己能够支持的工作模式 A 和传输速率相互告知对方，并从中选择一个最优的组合\"]},\"397\":{\"h\":\"路由器的包转发操作\",\"t\":[\"路由器和交换机一样也负责对包进行转发，但它们的工作方式有一些 差异。交换机是基于以太网规格工作的设备，而路由器是基于 IP 工作的\"]},\"398\":{\"h\":\"路由器的基本知识\",\"t\":[\"路由器在转发包时，首先会通过端口将发过来的包接收进来，转发模块会根据接收到的包的 IP 头部中记录的接收方 IP 地址，在路由表中进行查询，以此判断转发目标。\",\"路由器的各个端口都具有 MAC 地址和 IP 地址。\"]},\"399\":{\"h\":\"路由表中的信息\",\"t\":[\"交换机是通过 MAC 头部中的接收方 MAC 地址来判断转发目标的，而路由器则是根据 IP 头部中的 IP 地址来判断的。\",\"对路由表进行维护的方法\",\"由人手动维护路由记录\",\"根据路由协议机制，通过路由器之间的信息交换由路由器自行维护路由表的记录\"]},\"400\":{\"h\":\"路由器的包接收操作\",\"t\":[\"信号到达网线接口部分，其中的 PHY（MAU）模块和 MAC 模块将信号转换为数字信息，然后通过包末尾的 FCS 进行错误校验，如果没问题则检查 MAC 头部中的接收方 MAC 地址，看看是不是发给自己的包，如果是就放到接收缓冲区中，否则就丢弃这个包。\",\"路由器的端口都具有 MAC 地址，只接收与自身地址匹配的包，遇到不匹配的包则直接丢弃\"]},\"401\":{\"h\":\"查询路由表确定输出端口\",\"t\":[\"完成包接收操作之后，路由器就会丢弃包开头的 MAC 头部。MAC 头部的作用就是将包送达路由器，其中的接收方 MAC 地址就是路由器端口的 MAC 地址。\",\"路由器会根据 MAC 头部后方的 IP 头部中的内容进行包的转发操作。\"]},\"402\":{\"h\":\"找不到匹配路由时选择默认路由\",\"t\":[\"路由表中子网掩码为 0.0.0.0 的记录表示“默认路由”\"]},\"403\":{\"h\":\"包的有效期\",\"t\":[\"路由器进行发送前\",\"更新 IP 头部中的 TTL（Time to Live，生存时间）字段。TTL 字段表示包的有效期，包每经过一个路由器的转发，这个值就会减 1，当这个值变成 0 时，就表示超过了有效期，这个包就会被丢弃\"]},\"404\":{\"h\":\"通过分片功能拆分大网络包\"},\"405\":{\"h\":\"路由器的发送操作和计算机相同\",\"t\":[\"路由器判断下一个转发目标的方法如下。 ● 如果路由表的网关列内容为 IP 地址，则该地址就是下一个转 发目标。 ● 如果路由表的网关列内容为空，则 IP 头部中的接收方 IP 地址 就是下一个转发目标。\",\"路由器也会使用 ARP 来查询下一个转发目标的 MAC 地址。\"]},\"406\":{\"h\":\"路由器与交换机的关系\",\"t\":[\"要理解两者之间的关系，关键点在于计算机在发送网络包时，或者是路由器在转发网络包时，都需要在前面加上 MAC 头部。\",\"路由器是基于 IP 设计的，而交换机是基于以太网设计的，因此 IP 与以太网的关系也就是路由器与交换机的关系\",\"IP（路由器）负责将包送达通信对象这一整体过程，而其中将包传输到下一个路由器的过程则是由以太网（交换机）来负责的。\"]},\"407\":{\"h\":\"路由器的附加功能\",\"t\":[\"位于互联网接入端的路由器通常还会提供一些附加功能，例如将私有 地址转换为公有地址的地址转换功能，以及阻止危险网络包的包过滤功 能等。\"]},\"408\":{\"h\":\"通过地址转换有效利用 IP 地址\",\"t\":[\"内网部分则分配私有地址，内网中的设备不能和互联网直接收发网络包，而是通过一种特别的机制进行连接，这个机制就叫地址转换。\"]},\"409\":{\"h\":\"地址转换的基本原理\",\"t\":[\"地址转换的基本原理是在转发网络包时对 IP 头部中的 IP 地址和端口号进行改写。\",\"改写发送方 IP 地址和端口号之后，包就被发往互联网，最终到达服务器，然后服务器会返回一个包。服务器返回的包的接收包是原始包的发送方，因此返回的包的接收方就是改写后的公有地址和端口号。\"]},\"410\":{\"h\":\"改写端口号的原因\",\"t\":[\"端口号是一个 16 比特的数值，总共可以分配出几万个端口 A，因此如果用公有地址加上端口的组合对应一个私有地址，一个公有地址就可以对应几万个私有地址，这种方法提高了公有地址的利用率\"]},\"411\":{\"h\":\"从互联网访问公司内网\",\"t\":[\"只要事先将地址和端口的关联信息添加到地址转换设备的对应表中，就可以从互联网访问内网中的设备了。\"]},\"412\":{\"h\":\"路由器的包过滤功能\",\"t\":[\"包过滤就是在对包进行转发时，根据 MAC 头部、IP 头部、TCP 头部的内容 A，按照事先设置好的规则决定是转发这个包，还是丢弃这个包。\"]},\"413\":{\"c\":[\"Network\"]},\"414\":{\"c\":[\"网络是怎样连接的\"]},\"415\":{\"h\":\"通过接入网进入互联网内部\"},\"416\":{\"h\":\"ADSL 接入网的结构和工作方式\",\"t\":[\"家庭和公司的内网是通过接入网连接到网络运营商的。接入网有很多类型，这里我们将介绍 ADSL 接入网的知识，重点包括 ADSL 接入网的结构、电话线中传输的信号以及与电话共用的方式\"]},\"417\":{\"h\":\"互联网的基本结构和家庭、公司网络是相同的\",\"t\":[\"和家庭、公司网络一样，互联网也是通过路由器来转发包的\",\"互联网也是根据路由表中的记录来判断转发目标的，但路由表记录的维护方式不同\",\"距离的不同和路由的维护方式，就是互联网与家庭、公司网络之间最主要的两个不同点\"]},\"418\":{\"h\":\"连接用户与互联网的接入网\",\"t\":[\"网络包通过交换机和路由器的转发一步一步地接近它的目的地，在通过互联网接入路由器之后，就进入了互联网\",\"根据包 IP 头部中的接收方 IP 地址在路由表的目标地址中进行匹配，找到相应的路由记录后将包转发到这条路由的目标网关。\",\"互联网接入路由器发送网络包的操作和以太网路由器有一点不同，互联网接入路由器是按照接入网规则来发送包的\",\"所谓接入网，就是指连接互联网与家庭、公司网络的通信线路。一般家用的接入网方式包括 ADSL、FTTH、CATV、电话线、ISDN 等\"]},\"419\":{\"h\":\"ADSL Modem 将包拆分成信元\",\"t\":[\"ADSL 技术使用的接入线路\",\"互联网接入路由器会在网络包前面加上 MAC 头部、PPPoE 头部、PPP 头 部 总 共 3 种 头 部， 然 后 发 送 给 ADSL Modem \",\"ADSL Modem 将包拆分成信元，并转换成电信号发送给分离器。\"]},\"420\":{\"h\":\"ADSL 将信元“调制”成信号\",\"t\":[\"ADSL Modem 采用了一种用圆滑波形（正弦波）对信号进行合成来表示 0 和 1 的技术，这种技术称为调制\",\"振幅调制是用信号的强弱，也就是信号振幅的大小来对应 0 和 1 的方式。振幅小的信号为 0，振幅大的信号为 1\",\"正交振幅调制中，通过增加振幅和相位的级别，就可以增加能表示的比特数。\"]},\"421\":{\"h\":\"ADSL 通过使用多个波来提高速率\",\"t\":[\"实际上信号不一定要限制在一个频率。不同频率的波可以合成，也可以用滤波器从合成的波中分离出某个特定频率的波。\",\"使用多个频率合成的波来传输信号,能够表示的比特数就可以成倍提高\",\"ADSL 使用间隔为 4.3125 kHz 的上百个不同频率的波进行合成，每个波都采用正交振幅调制\"]},\"422\":{\"h\":\"分离器的作用\"},\"423\":{\"h\":\"光纤接入网（FTTH)\",\"t\":[\"常用的接入网技术与 ADSL 技术的利用率不相上下的光纤技术，重点包括光纤结构、单模和多模的区别之类的光纤性质，以及光纤用作接入网时的工作方式。\"]},\"424\":{\"h\":\"光纤的基本知识\",\"t\":[\"将数字信息转换成电信号，然后再将电信号转换成光信号,高电压发光亮，低电压发光暗\"]},\"425\":{\"h\":\"单模与多模\"},\"426\":{\"h\":\"接入网中使用的 PPP 和隧道\",\"t\":[\"接入网需要通过用户名和密码验证用户的身份，然后由网络运营商向 用户分配公有地址。\",\"，从接入网向网络运营商传输网络包时还使用了 隧道技术\"]},\"427\":{\"h\":\"网络运营商的内部\",\"t\":[\"接入网后面连接着网络运营商的网络，运营商网络也是以路由器为核 心组成的，这一点和家庭、公司网络是一样的，包转发的工作原理也没有 区别。不过，运营商网络也使用了一些和家庭、公司网络不同的技术，比 如运营商之间可以自动交换路由信息和更新路由表\"]},\"428\":{\"h\":\"跨越运营商的网络包\",\"t\":[\"互联网是由多个运营商网络相互连接形成的巨大网络，而多个运营商 之间相互连接的部分可以说就是互联网的核心部分\"]},\"429\":{\"c\":[\"Network\"]},\"430\":{\"c\":[\"网络是怎样连接的\"]},\"431\":{\"h\":\"\"},\"432\":{\"h\":\"特性\",\"t\":[\"IO多路复用epoll\",\"轻量级\"]},\"433\":{\"h\":\"NodeJS的APM系统\"},\"434\":{\"h\":\"Use Method\",\"t\":[\"utilization: as a percent over a time interval. eg, \\\"one disk is running at 90% utilization\\\". saturation: as a queue length. eg, \\\"the CPUs have an average run queue length of four\\\". errors: scalar counts. eg, \\\"this network interface has had fifty late collisions\\\".\"]},\"435\":{\"h\":\"APM 性能指标\",\"t\":[\"Application performance monitoring guide\"]},\"436\":{\"h\":\"QPS & TPS\"},\"437\":{\"h\":\"RT & Concurrency\"},\"438\":{\"h\":\"Crafana + Graphite\"},\"439\":{\"h\":\"Gauges Counter Sets\"},\"440\":{\"h\":\"Alinode\"},\"441\":{\"h\":\"网络部署架构\"},\"442\":{\"h\":\"负载均衡\",\"t\":[\"https://aws.amazon.com/cn/what-is/load-balancing/\"]},\"443\":{\"h\":\"进程负载均衡和 RPC 负载均衡\"},\"444\":{\"h\":\"RPC 调用原理\"},\"445\":{\"h\":\"服务负载均衡 集群 cluster\",\"t\":[\"const cluster = require('cluster') const http = require('http') const numCPUs = require('os').cpus().length; if(cluster.isMater) { for (let i=0;i<numCPUs;i++) { cluster.fork() } cluster.on('exit',(work,code,signal) => { }) }ele { http.createServe((req,res) => { }) }\"]},\"446\":{\"h\":\"共享端口、时序图、进程间通信\"},\"447\":{\"h\":\"分布式 RPC 负载均衡\"},\"448\":{\"h\":\"负载均衡算法： Round Robin、Weighted Round Robin、Source IP hash\"},\"449\":{\"h\":\"布隆过滤器\"},\"450\":{\"h\":\"Nodejs 优雅退出\"},\"451\":{\"h\":\"Graceful exit 的概念\",\"t\":[\"优雅退出\"]},\"452\":{\"h\":\"灰度发布机制 （health check）\",\"t\":[\"灰度发布和金丝雀\",\"金丝雀滚动发布\",\"负债均衡+金丝雀发布\",\"蓝绿发布\",\"功能开关发布\",\"LB 发布\",\"健康检查 health check\",\"pm2 的启动流程\",\"守护进程（deamon process）\",\"const { spawn } = require(\\\"child_process\\\"); const subprocess = spawn(process.argv[0], [\\\"child_program.jss\\\"], { detached: true, stdio: \\\"ignore\\\", }); subprocess.unref();\",\"pm2 的 cluster mode\",\"egg.js为什么不使用pm2\"]},\"453\":{\"h\":\"NodeJS中的日志\"},\"454\":{\"h\":\"日志\",\"t\":[\"日志记录是将应用程序运行生成的信息记录到日志文件中的过程，保存在日志文件中的记录称为日志，日志是一种保存应用程序信息的简单方法。\",\"Debug(调试)、问题定位、用户行为、现场记录与根因分析\",\"Console的底层\",\"Process.stdout.write\",\"Nodejs日志的原理\"]},\"455\":{\"h\":\"console\",\"t\":[\"console.log('Hello there') Console.prototype.log = function () { this._stdout.write(util.format.apply(this,arguments) + '\\\\n') }\",\"底层调用process.stdout.write,stdin,stdout\",\"process.stdout.write\",\"文件: 在Windows和POSIX上同步的\",\"TTY(终端):在Windows上是异步的，在POSIX上是同步的\",\"管道（和套接字）:在Windows上是同步的，在POSIX上是异步的\",\"POSIX: Mac OS，Unix,Linux\",\"日志写入文件\",\"fs.writeFile('log.txt','message','utf8',callback) fs.readFile('log.txt',{encoding:'utf8'},(err,data) => { fs.writeFile('log.txt',newData,'utf8',callback) })\",\"写入新日志会打开一个文件，将所有文件数据加载到内存中，在打开同一文件写入新数据\",\"appendFile\",\"fs.appendFile = function(path, data, options, callback_) { var callback = maybeCallback(arguments[arguments.length - 1]); if (util.isFunction(options) || !options) { options = { encoding: 'utf8', mode: 438 /*=0666*/, flag: 'a' }; } else if (util.isString(options)) { options = { encoding: options, mode: 438, flag: 'a' }; } else if (!util.isObject(options)) { throw new TypeError('Bad arguments'); } if (!options.flag) options = util._extend({ flag: 'a' }, options); fs.writeFile(path, data, options, callback);\",\"打开一个文件，获取文件句柄（fd)\",\"将数据写入文件\",\"文件句柄:进程每新打开一个文件，系统会分配一个新的文件描述符（FD）\",\"appendFile在每次需要写日志时都会打开一个文件，高并发会导致EMFILE错误\",\"const log = fs.createWriteStream('log.txt',{flags:'a'}) log.write('new entry\\\\n')\"]},\"456\":{\"h\":\"服务器应用日志\"},\"457\":{\"h\":\"日志的级别介绍\",\"t\":[\"ALL 最低等级的，用于打开所有日志记录。\",\"TRACE designates finer-grained informational events than the DEBUG.Since:1.2.12，很低的日志级别，一般不会使用。\",\"DEBUG 指出细粒度信息事件对调试应用程序是非常有帮助的，主要用于开发过程中打印一些运行信息。\",\"INFO 消息在粗粒度级别上突出强调应用程序的运行过程。打印一些你感兴趣的或者重要的信息，这个可以用于生产环境中输出程序运行的一些重要信息，但是不能滥用，避免打印过多的日志。\",\"WARN 表明会出现潜在错误的情形，有些信息不是错误信息，但是也要给程序员的一些提示。\",\"ERROR 指出虽然发生错误事件，但仍然不影响系统的继续运行。打印错误和异常信息，如果不想输出太多的日志，可以使用这个级别。\",\"FATAL 指出每个严重的错误事件将会导致应用程序的退出。这个级别比较高了。重大错误，这种级别你可以直接停止程序了。\",\"OFF 最高等级的，用于关闭所有日志记录。\"]},\"458\":{\"h\":\"好的日志\",\"t\":[\"时间戳\",\"计算机/服务器名称/ip\",\"进程ID\",\"消息，报错\",\"堆栈跟踪\",\"上下文\"]},\"459\":{\"h\":\"避免\",\"t\":[\"不应该会产生异常\",\"不应该产生副作用\",\"不应该带敏感信息\"]},\"460\":{\"h\":\"日志切割技术（logrotate）\",\"t\":[\"定时切割\",\"按大小切割\"]},\"461\":{\"h\":\"create/copytruncate\",\"t\":[\"create\",\"将test.log重命名为test.log.1\",\"创建一个新的test.log文件\",\"copytruncate\",\"将test.log拷贝一份为test.log.1\",\"将test.log清空\"]},\"462\":{\"h\":\"命令行日志\"},\"463\":{\"h\":\"彩色日志\",\"t\":[\"\\\\033+背景颜色+颜色+m作为前缀\",\"const chalk = require('chalk') //禁止打印彩色 console.log(process.stdout.isTTY) const ProgressBar = require('process') process.stdout.cursorTo(0) process.stdout.write(str) process.stdout.clearLine(1);\",\"inquirer.js:交互式命令行 blessed-contrib:命令行图表 commander.js:命令行基础库 cfonts:命令行大logo\"]},\"464\":{\"h\":\"ELK\",\"t\":[\"“ELK”是三个开源项目的首字母缩写，这三个项目分别是：Elasticsearch、Logstash 和 Kibana。\",\"Elasticsearch 是一个搜索和分析引擎。\",\"Logstash 是服务器端数据处理管道，能够同时从多个来源采集数据，转换数据，然后将数据发送到诸如 Elasticsearch 等“存储库”中。\",\"Kibana 则可以让用户在 Elasticsearch 中使用图形和图表对数据进行可视化。\",\" //https://github.com/deviantony/docker-elk import express from \\\"express\\\"; import log4js from \\\"log4js\\\"; import * as homeController from \\\"./controllers/home\\\"; const app = express(); const PORT: number = app.get(\\\"port\\\") || 3000; const ENV: string = app.get(\\\"env\\\"); log4js.configure({ appenders: { console: { type: \\\"console\\\" }, // file: { type: \\\"file\\\", filename: \\\"all-the-logs.log\\\" }, // https://github.com/Aigent/log4js-logstash-tcp elk_learn: { type: \\\"log4js-logstash-tcp\\\", host: \\\"127.0.0.1\\\", port: 5000 } }, categories: { default: { appenders: [\\\"elk_learn\\\"], level: \\\"debug\\\" } } }); const logger = log4js.getLogger(\\\"default\\\"); logger.level = \\\"debug\\\"; app.get(\\\"/index\\\", homeController.index); const server = app.listen(PORT, () => { logger.info(\\\"App is running at http://localhost:%d in %s mode\\\", PORT, ENV); logger.info(\\\"Press CTRL-C to stop\\\\n\\\"); }); export default server;\"]},\"465\":{\"h\":\"Sentry\"},\"466\":{\"h\":\"Sentry和ELK\",\"t\":[\"ELK一般适用于收集、整理全量日志，并且对日志内容进行切分并存储起来\",\"Sentry不会收集全量日志，他只会在你主动上报给他的时候进行收集处理\",\"分析类（行为日志分析，访问日志分析，流量分析）以及大规模的日志存储和检索合适使用ELK\",\"预警类如错误监控，异常监控，波动预警等合适使用Sentry进行处理\"]},\"467\":{\"c\":[\"NodeJS\"]},\"468\":{\"h\":\"NodeJS安全风险\"},\"469\":{\"h\":\"CSRF\",\"t\":[\"CSRF（Cross-site request forgery）跨站请求伪造：攻击者诱导受害者进入第三方网站，在第三方网站中，向被攻击网站发送跨站请求。利用受害者在被攻击网站已经获取的注册凭证，绕过后台的用户验证，达到冒充用户对被攻击的网站执行某项操作的目的。\",\"当用户已经登录成功了一个网站\",\"然后通过被诱导进了第三方网站「钓鱼网站」\",\"跳转过去了自动提交表单，冒用受害者信息\",\"后台则正常走逻辑将用户提交的表单信息进行处理\"]},\"470\":{\"h\":\"XSS\",\"t\":[\"XSS是跨站脚本攻击(Cross Site Scripting)，为不和层叠样式表(Cascading Style Sheets, CSS)的缩写混淆，故将跨站脚本攻击缩写为XSS。\"]},\"471\":{\"h\":\"反射型xss攻击\",\"t\":[\"用户误点开了带攻击的url : http://xxx?keyword=<script>alert('aaa')</script>\",\"网站给受害者的返回中包含了来自URL的的恶意文本\",\"用户的浏览器收到文本后执行页面，会在网页中弹窗aaa\"]},\"472\":{\"h\":\"储存型xss攻击\",\"t\":[\"攻击者通过评论表单提交将<script>alert(‘aaa’)</script>提交到网站\",\"网站后端对提交的评论数据不做任何操作，直接存储到数据库中\",\"其他用户访问正常访问网站，并且需要请求网站的评论数据\",\"网站后端会从数据库中取出数据，直接返回给用户\",\"用户得到页面后，直接运行攻击者提交的代码<script>alert(‘aaa’)</script>，所有用户都会在网页中弹出aaa的弹窗#\"]},\"473\":{\"h\":\"DOM型xss攻击\",\"t\":[\"用户误点开了带攻击的url : http://xxx?name=<script>alert('aaa')</script>\",\"网站给受害者的返回中正常的网页\",\"用户的浏览器收到文本后执行页面合法脚本，这时候页面恶意脚本会被执行，会在网页中弹窗aaa\"]},\"474\":{\"h\":\"越权\",\"t\":[\"水平越权:指相同权限下不同的用户可以互相访问\",\"垂直越权:指使用权限低的用户可以访问到权限较高的用户\",\"水平越权测试方法：主要通过看看能否通过A用户操作影响到B用户\",\"垂直越权测试思路：看看低权限用户是否能越权使用高权限用户的功能，比如普通用户可以使用管理员的功能。\"]},\"475\":{\"h\":\"SSRF\",\"t\":[\"服务端请求伪造(Server-Side Request Forgery),指的是攻击者在未能取得服务器所有权限时，利用服务器漏洞以服务器的身份发送一条构造好的请求给服务器所在内网。SSRF攻击通常针对外部网络无法直接访问的内部系统。\"]},\"476\":{\"h\":\"HPP\",\"t\":[\"HPP，即 HTTP Parameter Pollution，HTTP 参数污染。在 HTTP 协议中是运行同样名称的参数出现多次，攻击者通过传播参数的时候传输 key 相同而 value 不同的参数，从而达到绕过某些防护与参数校验的后果。它是一种注入型的漏洞，攻击者通过在 HTTP 请求中插入特定的参数来发起攻击。\"]},\"477\":{\"h\":\"不安全的跳转(钓鱼)\",\"t\":[\"伪造假网站，攻击者创建一个与受害者所用的合法企业网站（例如银行网站）基本一样的网站。\",\"预付金诈骗，骗子联系受害者来利用他们的贪婪和同情，声称要偷偷带出一位富有的西班牙囚犯，囚犯愿意以丰厚的报酬感谢受害者，以换取用于贿赂一些狱警所需的金钱。\",\"帐户停用诈骗，通过操控受害者的紧迫感，使其认为重要帐户将被停用，攻击者便可诱使某些人交出登录凭证等重要信息。\"]},\"478\":{\"h\":\"不安全的NPM包\"},\"479\":{\"h\":\"目录遍历攻击\",\"t\":[\"目录遍历攻击又称目录穿越、恶意浏览、文件泄露等，攻击者利用系统漏洞访问合法应用之外的数据或文件目录，导致数据泄露或被篡改\"]},\"480\":{\"c\":[\"NodeJS\"]},\"481\":{\"h\":\"NodeJS中的测试\"},\"482\":{\"h\":\"单元测试\",\"t\":[\"在计算机编程中，单元测试（英语：Unit Testing）又称为模块测试 [来源请求] ，是针对程序模块（软件设计的最小单位）来进行正确性检验的测试工作。\"]},\"483\":{\"h\":\"意义\",\"t\":[\"避免线上 bug,问题可以很快的被发现\",\"提高代码的质量,一段编写良好的代码一定是“可方便测试”的\",\"快速定位bug，每个测试用例可以关联某个模块\",\"放心重构，加功能，再也不用担心“把代码改坏'\",\"单元测试的质量也占据了评判代码质量的极大比重\",\"const assert = require('assert') function addTwo(a) { return a +2; } function testAddTow() { const x =5; const y1 = x +2; const y2 = addTwo(x); try{ assert.equal(y1,y2) }catch(err) { } }\"]},\"484\":{\"h\":\"Mocha\"},\"485\":{\"h\":\"压缩\"},\"486\":{\"h\":\"代码压缩\"},\"487\":{\"h\":\"UglifyJS\"},\"488\":{\"h\":\"文本压缩\"},\"489\":{\"h\":\"Tree-shaking\"},\"490\":{\"h\":\"Code-splitting\"},\"491\":{\"h\":\"体验优化\"},\"492\":{\"h\":\"骨架屏\"},\"493\":{\"h\":\"Snapshot\"},\"494\":{\"h\":\"Loading\"},\"495\":{\"h\":\"加载策略\"},\"496\":{\"h\":\"懒加载\"},\"497\":{\"h\":\"DNS预解析、预加载、预渲染\"},\"498\":{\"h\":\"离线化\"},\"499\":{\"h\":\"HTTP缓存\"},\"500\":{\"h\":\"数据缓存\"},\"501\":{\"h\":\"资源加载\"},\"502\":{\"h\":\"请求合并\"},\"503\":{\"h\":\"HTTP2\"},\"504\":{\"h\":\"CDN\"},\"505\":{\"h\":\"执行渲染\"},\"506\":{\"h\":\"CSS代码优化（选择器、启动GPU、避免表达式）\"},\"507\":{\"h\":\"使用requestAnimationFrame实现视觉变化\"},\"508\":{\"h\":\"降低复杂度或使用Web Worker\"},\"509\":{\"h\":\"避免大型、复杂的布局和布局抖动\"},\"510\":{\"h\":\"简化绘制复杂度、减少绘制区域\"},\"511\":{\"h\":\"输入处理程序防抖\"},\"512\":{\"h\":\"图片优化\"},\"513\":{\"h\":\"小图优化\"},\"514\":{\"h\":\"图片格式选择\"},\"515\":{\"h\":\"压缩\"},\"516\":{\"h\":\"响应式\"},\"517\":{\"h\":\"Android离线打包\",\"t\":[\"官方文档：https://nativesupport.dcloud.net.cn/AppDocs/#\",\"1.安装 jdk https://www.oracle.com/java/technologies/downloads/\",\"/usr/libexec/java_home -V\",\"2.生成签名证书\",\"keytool -genkey -alias testalias -keyalg RSA -keysize 2048 -validity 36500 -keystore test.keystore\",\"3.查看证书\",\"keytool -list -v -keystore test.keystore Enter keystore password: //输入密码，回车\",\"4.生成 AppKey\",\"keytool -list -v -keystore test.keystore Enter keystore password: //输入密码，回车 # 新版没有md5 keytool -exportcert -keystore xxx.keystore | openssl dgst -md5 # 参考 https://www.jianshu.com/p/3799489898b3\",\"包名必须和 android studio 项目的包名一致\",\"5.下载离线 SDK\",\"hbuilderX 版本要和 SDK 保持一致\",\"https://nativesupport.dcloud.net.cn/AppDocs/download/android.html#\",\"6.android 创建项目\",\"创建项目的包名必须和 Dclound 里的包名一致\",\".gradle 和.idea在这两个目录下放置的都是 Android Studio 自动生成的文件，所以无需关心，不用编辑。\",\"app项目中的代码、资源等内容几乎都是放在这个目录之下，后续的开发工作也是在这个目录下进行的。\",\"build和外层的 build 一样，包含了一些编译时自动生成的文件，无需关心。\",\"libs如果你在项目中使用到了第三方 jar 包，就需要把这些 jar 包放置在 libs 目录之下，放置之后，jar 包会被自动添加到构建路径里面去。\",\"androidTest用来编写 Android Test 测试用例的，对项目进行一些自动化测试。\",\"java放置我们所有 java 代码的地方。\",\"res内容巨多，你在项目中用到的所有图片、布局、字符串等等资源都要存放在这个目录下。\",\"AndroidMainifest.xml整个 Android 项目的配置文件，你在程序中定义的所有四大组件都需要在这个文件中注册，另外可以在这个文件中给应用程序添加权限声明。\",\"test用来编写 Unit Test 测试用例的，是对项目自动化测试的另一种方式。\",\"gitignore和外层的 gitignore 文件类似，也是用来将指定目录或文件排除在版本控制之外的\",\"build.gradle这是 app 模块中的 gradle 构建脚本，会指定很多项目构建的相关配置。\",\"proguard-rules.pro用于指定项目代码的混淆规则，当代码开发完打包成安装包之后，如果不希望代码被别人破解，通常会对代码进行混淆，从而让破解者难以阅读。\",\"gradle这个目录之下包含了 gradle wrapper 的配置文件，使用 gradle wrapper 的方式不需要提前将 gradle 下载好，而是会自动根据本地的缓存情况决定是否需要联网下载 gradle。\",\"gitignore这个是用来将指定目录或文件排除在版本控制之外的。（其实看到单词—ignore 就可以知道了）\",\"build.gradle这是项目全局的 gradle 构建脚本，通常其内容是不需要更改的。\",\"gradle.properties这个文件是全局的 gradle 配置文件，在这里配置的属性将会影响到项目所有的 gradle 编译脚本。\",\"gradlew 和 gradlew.bat是用来在命令行界面中执行 gradle 文件的。不同的是：gradlew 适用于 Linux 或 Mac 系统，gradlew.bat 是在 Windows 系统使用。\",\"local.properties用于指定本机中的 Android SDK 路径，通常不需要进行修改，除非你挪动了 Android SDK 路径。\",\"settings.gradle用于指定项目中所有引进的模块。\",\"MyDemo.imliml 文件是所有 IntelliJ IDEA 项目都会自动生成的一个文件（因为 Android Studio 是基于 IntelliJ IDEA 开发的），用于表示这是一个 IntelliJ IDEA 文件，我们无需修改。\",\"配置工程\",\"将 SDK 实例项目中 res/values和assets/data 拷贝过来\",\"将 lib.5plus.base-release.aar、android-gif-drawable-release@1.2.23.aar、uniapp-v8-release.aar、oaid_sdk_1.0.25.aar 和 breakpad-build-release.aar 拷贝到 libs 目录下\",\"在 build.gradle 中添加资源引用\",\"android{ aaptOptions{ additionalParameters '--auto-add-overlay' ignoreAssetsPattern \\\"!.svn:!.git:.*:!CVS:!thumbs.db:!picasa.ini:!*.scc:*~\\\" } } dependencies { implementation fileTree(include: ['*.jar'], dir: 'libs') implementation fileTree(include: ['*.aar'], dir: 'libs') implementation 'androidx.appcompat:appcompat:1.0.0' implementation 'androidx.legacy:legacy-support-v4:1.0.0' implementation 'androidx.recyclerview:recyclerview:1.0.0' implementation 'com.facebook.fresco:fresco:2.5.0' implementation \\\"com.facebook.fresco:animated-gif:2.5.0\\\" implementation 'com.github.bumptech.glide:glide:4.9.0' implementation 'com.alibaba:fastjson:1.1.46.android' implementation 'androidx.webkit:webkit:1.3.0' }\",\"在 Androidmanifest.xml 添加\",\"<application ...> <meta-data android:name=\\\"dcloud_appkey\\\" android:value=\\\"替换为自己申请的Appkey\\\" />\",\"删除默认 MainActivity 节点\",\"8.gradle 导入证书\",\"9.uniapp进行打包将打包好的文件复制到 assets/apps里\",\"保证dcloud_control.xml及uniapp项目id及Dcloud后台appID一致\",\"10.输出apk文件\"]},\"518\":{\"c\":[\"Uniapp\",\"Android\"]},\"519\":{\"h\":\"Vue2.x computed原理分析\",\"t\":[\"var vm = new Vue({ data: { a: 1 }, computed: { // 仅读取 aDouble: function () { return this.a * 2; }, // 读取和设置 aPlus: { get: function () { return this.a + 1; }, set: function (v) { this.a = v - 1; }, }, }, });\"]},\"520\":{\"h\":\"init\",\"t\":[\"export function initState(vm: Component) { const opts = vm.$options; if (opts.computed) initComputed(vm, opts.computed); }\"]},\"521\":{\"h\":\"initComputed\",\"t\":[\"function initComputed(vm: Component, computed: Object) { // $flow-disable-line // 定义一个对象 储存 watcher const watchers = (vm._computedWatchers = Object.create(null)); // computed properties are just getters during SSR const isSSR = isServerRendering(); for (const key in computed) { const userDef = computed[key]; const getter = isFunction(userDef) ? userDef : userDef.get; if (!isSSR) { // create internal watcher for the computed property. // 创建computedWatcher watchers[key] = new Watcher( vm, getter || noop, noop, computedWatcherOptions // {lazy: true} ); } // component-defined computed properties are already defined on the // component prototype. We only need to define computed properties defined // at instantiation here. if (!(key in vm)) { defineComputed(vm, key, userDef); } else { // ... key不能和data里的属性重名 // ... key不能和props里的属性重名 } } }\",\"Watcher\",\"export default class Watcher implements DepTarget { constructor( vm: Component | null, expOrFn: string | (() => any), // computed getter函数 cb: Function, // 空函数 options?: WatcherOptions | null, // {lazy: true} isRenderWatcher?: boolean ) { this.lazy = !!options.lazy; this.dirty = this.lazy; // computed getter 函数 this.getter = expOrFn; this.value = this.lazy ? undefined : this.get(); } }\",\"defineComputed\",\"// vm // computed 中的key // userDef Computed[key] export function defineComputed( target: any, key: string, userDef: Record<string, any> | (() => any) ) { const shouldCache = !isServerRendering(); // 定义computed的get 和set // 通过 defineProperty 进行拦截 if (isFunction(userDef)) { sharedPropertyDefinition.get = shouldCache ? createComputedGetter(key) : createGetterInvoker(userDef); sharedPropertyDefinition.set = noop; } else { sharedPropertyDefinition.get = userDef.get ? shouldCache && userDef.cache !== false ? createComputedGetter(key) : createGetterInvoker(userDef.get) : noop; sharedPropertyDefinition.set = userDef.set || noop; } Object.defineProperty(target, key, sharedPropertyDefinition); }\",\"createComputedGetter\",\"function createComputedGetter(key) { return function computedGetter() { const watcher = this._computedWatchers && this._computedWatchers[key]; if (watcher) { // 表示 依赖更变 需要重新计算 求知 // 初始化时 this.dirty = this.lazy = true if (watcher.dirty) { watcher.evaluate(); } // Dep.target 是当前操作的Watcher // watcher.evaluate()时 调用 this.get() 赋的值 if (Dep.target) { watcher.depend(); // 让每个dep收集当前的watcher // 当依赖改变时 通知watcher进行更新 } return watcher.value; } }; } // ------------------- class Watcher { evaluate() { this.value = this.get(); this.dirty = false; } depend() { let i = this.deps.length; while (i--) { // 让每个dep收集当前的Watcher this.deps[i].depend(); } } get() { pushTarget(this) let value const vm = this.vm try { value = this.getter.call(vm, vm) } catch (e: any) { if (this.user) { handleError(e, vm, `getter for watcher \\\"${this.expression}\\\"`) } else { throw e } } finally { // \\\"touch\\\" every property so they are all tracked as // dependencies for deep watching if (this.deep) { traverse(value) } popTarget() this.cleanupDeps() } return value } }\"]},\"522\":{\"h\":\"步骤\"},\"523\":{\"h\":\"取值\",\"t\":[\"对 computed 进行求值时触发 get()=>createComputedGetter() => Watcher.get() => 将 Dep.target 设置为当前 watcher => 进行 computed getter()求值 => 触发 computed getter()中的响应式数据中的 get()拦截器 => get()拦截器 把当前的 computed watcher 添加到 自己的 Dep 中 => 最后 Dep.target 重置\"]},\"524\":{\"h\":\"更新\",\"t\":[\"computed set 内的响应式式数据发生更新 => 响应式式数据 set()拦截器触发 => dep.notify() dep 通知更新 => subs[i].update() Dep 内收集的 Watcher.update() => watcher.run() => this.get() => computed getter() => watcher value 更新 => 响应式数据更新发生 patch => 视图更新\"]},\"525\":{\"c\":[\"Vue\"]},\"526\":{\"h\":\"Vue2.x 指令原理\"},\"527\":{\"h\":\"内置指令\"},\"528\":{\"h\":\"v-model\",\"t\":[\"v-model 本质上不过是语法糖。\",\"v-model 在内部为不同的输入元素使用不同的 property 并抛出不同的事件：\",\"text 和 textarea 元素使用 value property 和 input 事件；\",\"checkbox 和 radio 使用 checked property 和 change 事件；\",\"select 字段将 value 作为 prop 并将 change 作为事件。\",\"原生元素\",\"<input v-model=\\\"pageName\\\" />; // render _c(\\\"input\\\", { directives: [ { name: \\\"model\\\", rawName: \\\"v-model\\\", value: _vm.pageName, expression: \\\"pageName\\\", }, ], domProps: { value: _vm.pageName }, on: { input: function ($event) { if ($event.target.composing) { return; } _vm.pageName = $event.target.value; }, }, });\",\"Vue.component(\\\"base-checkbox\\\", { model: { prop: \\\"checked\\\", event: \\\"change\\\", }, props: { checked: Boolean, }, template: ` <input type=\\\"checkbox\\\" v-bind:checked=\\\"checked\\\" v-on:change=\\\"$emit('change', $event.target.checked)\\\" > `, }); // 使用 <base-checkbox v-model=\\\"lovingVue\\\"></base-checkbox>;\"]},\"529\":{\"h\":\"v-if\",\"t\":[\" <img v-if=\\\"isFalse\\\" alt=\\\"Vue logo\\\" src=\\\"./assets/logo.png\\\" /> // render() _vm.isFalse ? _c(\\\"img\\\", { attrs: { alt: \\\"Vue logo\\\", src: require(\\\"./assets/logo.png\\\") }, }) : _vm._e(),\"]},\"530\":{\"h\":\"v-for\"},\"531\":{\"h\":\"自定义指令\"},\"532\":{\"h\":\"全局方法\",\"t\":[\"// 注册 Vue.directive(\\\"my-directive\\\", { bind: function () {}, inserted: function () {}, update: function () {}, componentUpdated: function () {}, unbind: function () {}, });\",\"bind：只调用一次，指令第一次绑定到元素时调用。在这里可以进行一次性的初始化设置。\",\"inserted：被绑定元素插入父节点时调用 (仅保证父节点存在，但不一定已被插入文档中)。\",\"update：所在组件的 VNode 更新时调用，但是可能发生在其子 VNode 更新之前。指令的值可能发生了改变，也可能没有。\",\"componentUpdated：指令所在组件的 VNode 及其子 VNode 全部更新后调用。\",\"unbind：只调用一次，指令与元素解绑时调用。\",\"Vue[\\\"direction\\\"] = function ( id: string, definition?: Function | Object ): Function | Object | void { if (!definition) { return this.options[\\\"directions\\\"][id]; } definition = { bind: definition, update: definition }; this.options[\\\"directions\\\"][id] = definition; return definition; };\",\" // 注册一个全局自定义指令 `v-focus` Vue.directive(\\\"focus\\\", { // 当被绑定的元素插入到 DOM 中时…… inserted: function (el) { // 聚焦元素 el.focus(); }, }); <input v-focus /> // render _c(\\\"input\\\", { directives: [{ name: \\\"focus\\\", rawName: \\\"v-focus\\\" }] }),\"]},\"533\":{\"h\":\"局部方法\",\"t\":[\"directives: { focus: { // 指令的定义 inserted: function (el) { el.focus() } } }\"]},\"534\":{\"h\":\"指令解析\",\"t\":[\"template => AST\",\"<template> <div id=\\\"app\\\"> <input v-focus /> </div> </template>\",\"render\",\"with (this) { return _c(\\\"div\\\", { attrs: { id: \\\"app\\\" } }, [ _c(\\\"input\\\", { directives: [{ name: \\\"focus\\\", rawName: \\\"v-focus\\\" }] }), ]); }\",\"src/compiler/parser/index.tsparseHTML() => end() => closeElement() => processElement => processAttrs\",\"processAttrs\",\"function processAttrs(el) { const list = el.attrsList; let i, l, name, rawName, value, modifiers, syncGen, isDynamic; for (i = 0, l = list.length; i < l; i++) { name = rawName = list[i].name; value = list[i].value; if (dirRE.test(name)) { // mark element as dynamic el.hasBindings = true; // modifiers modifiers = parseModifiers(name.replace(dirRE, \\\"\\\")); // support .foo shorthand syntax for the .prop modifier if (process.env.VBIND_PROP_SHORTHAND && propBindRE.test(name)) { (modifiers || (modifiers = {})).prop = true; name = `.` + name.slice(1).replace(modifierRE, \\\"\\\"); } else if (modifiers) { name = name.replace(modifierRE, \\\"\\\"); } // export const bindRE = /^:|^\\\\.|^v-bind:/ if (bindRE.test(name)) { // v-bind name = name.replace(bindRE, \\\"\\\"); value = parseFilters(value); isDynamic = dynamicArgRE.test(name); if (isDynamic) { name = name.slice(1, -1); } if (modifiers) { if (modifiers.prop && !isDynamic) { name = camelize(name); if (name === \\\"innerHtml\\\") name = \\\"innerHTML\\\"; } if (modifiers.camel && !isDynamic) { name = camelize(name); } if (modifiers.sync) { syncGen = genAssignmentCode(value, `$event`); if (!isDynamic) { addHandler( el, `update:${camelize(name)}`, syncGen, null, false, warn, list[i] ); if (hyphenate(name) !== camelize(name)) { addHandler( el, `update:${hyphenate(name)}`, syncGen, null, false, warn, list[i] ); } } else { // handler w/ dynamic event name addHandler( el, `\\\"update:\\\"+(${name})`, syncGen, null, false, warn, list[i], true // dynamic ); } } } if ( (modifiers && modifiers.prop) || (!el.component && platformMustUseProp(el.tag, el.attrsMap.type, name)) ) { addProp(el, name, value, list[i], isDynamic); } else { addAttr(el, name, value, list[i], isDynamic); } } else if (onRE.test(name)) { // v-on name = name.replace(onRE, \\\"\\\"); isDynamic = dynamicArgRE.test(name); if (isDynamic) { name = name.slice(1, -1); } addHandler(el, name, value, modifiers, false, warn, list[i], isDynamic); } else { // normal directives /* export const dirRE = process.env.VBIND_PROP_SHORTHAND ? /^v-|^@|^:|^\\\\.|^#/ : /^v-|^@|^:|^#/ */ name = name.replace(dirRE, \\\"\\\"); // parse arg const argMatch = name.match(argRE); let arg = argMatch && argMatch[1]; isDynamic = false; if (arg) { name = name.slice(0, -(arg.length + 1)); if (dynamicArgRE.test(arg)) { arg = arg.slice(1, -1); isDynamic = true; } } // 把处理的指令 添加到 directives属性 addDirective( el, name, rawName, value, arg, isDynamic, modifiers, list[i] ); } } else { addAttr(el, name, JSON.stringify(value), list[i]); // #6887 firefox doesn't update muted state if set via attribute // even immediately after element creation if ( !el.component && name === \\\"muted\\\" && platformMustUseProp(el.tag, el.attrsMap.type, name) ) { addProp(el, name, \\\"true\\\", list[i]); } } } }\"]},\"535\":{\"h\":\"指令生效\",\"t\":[\"patch() => createElm() => invokeCreateHooks() => crate() = updateDirectives()\",\"export default { create: updateDirectives, update: updateDirectives, destroy: function unbindDirectives(vnode: VNodeWithData) { // @ts-expect-error emptyNode is not VNodeWithData updateDirectives(vnode, emptyNode); }, };\",\"function updateDirectives(oldVnode: VNodeWithData, vnode: VNodeWithData) { if (oldVnode.data.directives || vnode.data.directives) { _update(oldVnode, vnode); } } function _update(oldVnode, vnode) { const isCreate = oldVnode === emptyNode; const isDestroy = vnode === emptyNode; const oldDirs = normalizeDirectives( oldVnode.data.directives, oldVnode.context ); const newDirs = normalizeDirectives(vnode.data.directives, vnode.context); const dirsWithInsert: any[] = []; const dirsWithPostpatch: any[] = []; let key, oldDir, dir; for (key in newDirs) { oldDir = oldDirs[key]; dir = newDirs[key]; if (!oldDir) { // new directive, bind callHook(dir, \\\"bind\\\", vnode, oldVnode); if (dir.def && dir.def.inserted) { dirsWithInsert.push(dir); } } else { // existing directive, update dir.oldValue = oldDir.value; dir.oldArg = oldDir.arg; callHook(dir, \\\"update\\\", vnode, oldVnode); if (dir.def && dir.def.componentUpdated) { dirsWithPostpatch.push(dir); } } } if (dirsWithInsert.length) { const callInsert = () => { for (let i = 0; i < dirsWithInsert.length; i++) { callHook(dirsWithInsert[i], \\\"inserted\\\", vnode, oldVnode); } }; if (isCreate) { mergeVNodeHook(vnode, \\\"insert\\\", callInsert); } else { callInsert(); } } if (dirsWithPostpatch.length) { mergeVNodeHook(vnode, \\\"postpatch\\\", () => { for (let i = 0; i < dirsWithPostpatch.length; i++) { callHook(dirsWithPostpatch[i], \\\"componentUpdated\\\", vnode, oldVnode); } }); } if (!isCreate) { for (key in oldDirs) { if (!newDirs[key]) { // no longer present, unbind callHook(oldDirs[key], \\\"unbind\\\", oldVnode, oldVnode, isDestroy); } } } }\"]},\"536\":{\"c\":[\"Vue\"]},\"537\":{\"h\":\"Vue2.x框架原理分析-初始化、响应式原理\"},\"538\":{\"h\":\"开始\",\"t\":[\"import Vue from \\\"vue\\\"; import App from \\\"./App.vue\\\"; new Vue({ el: \\\"#app\\\", // h => createElement() // _init => vm._renderProxy = vm // render.call(vm._renderProxy,vm.$createElement) render: (h) => h(App), });\"]},\"539\":{\"h\":\"vue-loader\",\"t\":[\"import App from \\\"./App.vue\\\"; console.log(App, \\\"App\\\");\"]},\"540\":{\"h\":\"entry\",\"t\":[\"Vue 入口\",\"platforms/web/entry-runtime.ts\",\"import Vue from \\\"./runtime/index\\\"; import * as vca from \\\"v3\\\"; import { extend } from \\\"shared/util\\\"; extend(Vue, vca); export default Vue;\",\"platforms/runtime/index\",\"import Vue from \\\"core/index\\\"; import config from \\\"core/config\\\"; // 省略 import platformDirectives from \\\"./directives/index\\\"; import platformComponents from \\\"./components/index\\\"; //这里都是web平台相关的一些配置 // install platform specific utils Vue.config.mustUseProp = mustUseProp; // 省略 // 注册指令和组件，这里的 directives 和 components 也是web平台上的，是内置的指令和组件，其实很少 // install platform runtime directives & components extend(Vue.options.directives, platformDirectives); // 内置的directives只有两个，`v-show` 和 `v-model` extend(Vue.options.components, platformComponents); // 内置的组件也很少，只有`keepAlive`, `transition`和 `transitionGroup` // 如果不是浏览器，就不进行 `patch` 操作了 // install platform patch function Vue.prototype.__patch__ = inBrowser ? patch : noop; // 如果有 `el` 且在浏览器中，则进行 `mount` 操作 // public mount method Vue.prototype.$mount = function ( el?: string | Element, hydrating?: boolean ): Component { el = el && inBrowser ? query(el) : undefined; return mountComponent(this, el, hydrating); }; // 省略devtool相关代码 export default Vue;\"]},\"541\":{\"h\":\"vue\",\"t\":[\"core/index\",\"import Vue from \\\"./instance/index\\\"; import { initGlobalAPI } from \\\"./global-api/index\\\"; initGlobalAPI(Vue); // 这个函数添加了一些类方法属性 // 省略一些ssr相关的内容 // 省略 Vue.version = \\\"__VERSION__\\\"; export default Vue;\"]},\"542\":{\"h\":\"initGlobalAPI\",\"t\":[\"initGlobalAPI\",\"export function initGlobalAPI(Vue: GlobalAPI) { // config const configDef = {}; configDef.get = () => config; // 省略 // 这里添加了一个`Vue.config` 对象，至于在哪里会用到，后面会讲 Object.defineProperty(Vue, \\\"config\\\", configDef); // exposed util methods. // NOTE: these are not considered part of the public API - avoid relying on // them unless you are aware of the risk. Vue.util = { warn, extend, mergeOptions, defineReactive, }; //一般我们用实例方法而不是这三个类方法 Vue.set = set; Vue.delete = del; Vue.nextTick = nextTick; // 注意这里，循环出来的结果其实是三个 `components`,`directives`, `filters`，这里先创建了空对象作为容器，后面如果有对应的插件就会放进来。 Vue.options = Object.create(null); ASSET_TYPES.forEach((type) => { Vue.options[type + \\\"s\\\"] = Object.create(null); }); // this is used to identify the \\\"base\\\" constructor to extend all plain-object // components with in Weex's multi-instance scenarios. Vue.options._base = Vue; // 内置组件只有一个，就是 `keepAlive` extend(Vue.options.components, builtInComponents); initUse(Vue); // 添加了 Vue.use 方法，可以注册插件 initMixin(Vue); //添加了Vue.mixin 方法 initExtend(Vue); // 添加了 Vue.extend 方法 // 这一步是注册了 `Vue.component` ,`Vue.directive` 和 `Vue.filter` 三个方法，上面不是有 `Vue.options.components` 等空对象吗，这三个方法的作用就是把注册的组件放入对应的容器中。 initAssetRegisters(Vue); }\"]},\"543\":{\"h\":\"instance\",\"t\":[\"instance\",\"core/instance/index\",\"// 省略import语句 function Vue(options) { if (process.env.NODE_ENV !== \\\"production\\\" && !(this instanceof Vue)) { warn(\\\"Vue is a constructor and should be called with the `new` keyword\\\"); } this._init(options); } import { initMixin } from \\\"./init\\\"; import { stateMixin } from \\\"./state\\\"; import { renderMixin } from \\\"./render\\\"; import { eventsMixin } from \\\"./events\\\"; import { lifecycleMixin } from \\\"./lifecycle\\\"; //添加 _init方法 initMixin(Vue); //添加了 $data,$props,$watch,$set,$delete 几个属性和方法 stateMixin(Vue); //添加了 $on,$off,$once,$emit 三个方法 eventsMixin(Vue); //添加了 _update, $forceUpdate, $destroy 三个方法 lifecycleMixin(Vue); //添加了 $nextTick 和 _render 两个方法以及一大堆renderHelpers renderMixin(Vue); export default Vue;\",\"执行方法后添加的属性\",\"//构造函数 function Vue () { this._init() } //全局config对象，我们几乎不会用到 Vue.config = { keyCodes, _lifecycleHooks: ['beforeCreate', 'created', ...] } // 默认的options配置，我们每个组件都会继承这个配置。 Vue.options = { beforeCreate, // 比如 vue-router 就会注册这个回调，因此会每一个组件继承 components, // 前面提到了，默认组件有三个 `KeepAlive`,`transition`, `transitionGroup`，这里注册的组件就是全局组件，因为任何一个组件中不用声明就能用了。所以全局组件的原理就是这么简单 directives, // 默认只有 `v-show` 和 `v-model` filters // 不推荐使用了 } //一些全局方法 Vue.use // 注册插件 Vue.component // 注册组件 Vue.directive // 注册指令 Vue.nextTick //下一个tick执行函数 Vue.set/delete // 数据的修改操作 Vue.mixin // 混入mixin用的 //Vue.prototype 上有几种不同作用的方法 //由initMixin 添加的 `_init` 方法，是Vue实例初始化的入口方法，会调用其他的功能初始话函数 Vue.prototype._init // 由 initState 添加的三个用来进行数据操作的方法 Vue.prototype.$data Vue.prototype.$props Vue.prototype.$watch // 由initEvents添加的事件方法 Vue.prototype.$on Vue.prototype.$off Vue.prototype.$one Vue.prototype.$emit // 由 lifecycle添加的生命周期相关的方法 Vue.prototype._update Vue.prototype.$forceUpdate Vue.prototype.$destroy //在 platform 中添加的生命周期方法 Vue.prototype.$mount // 由renderMixin添加的`$nextTick` 和 `_render` 以及一堆renderHelper Vue.prototype.$nextTick Vue.prototype._render Vue.prototype._b Vue.prototype._e //...\"]},\"544\":{\"h\":\"_init\",\"t\":[\"function Vue(options) { this._init(options); }\",\"Vue._init()\",\" Vue.prototype._init = function (options?: Record<string, any>) { // vm this 的别名 const vm: Component = this // a uid vm._uid = uid++ let startTag, endTag /* istanbul ignore if */ if (__DEV__ && config.performance && mark) { startTag = `vue-perf-start:${vm._uid}` endTag = `vue-perf-end:${vm._uid}` mark(startTag) } // a flag to mark this as a Vue instance without having to do instanceof // check vm._isVue = true // avoid instances from being observed vm.__v_skip = true // effect scope vm._scope = new EffectScope(true /* detached */) // merge options if (options && options._isComponent) { // optimize internal component instantiation // since dynamic options merging is pretty slow, and none of the // internal component options needs special treatment. initInternalComponent(vm, options as any) } else { vm.$options = mergeOptions( resolveConstructorOptions(vm.constructor as any), options || {}, vm ) } /* istanbul ignore else */ if (__DEV__) { initProxy(vm) } else { vm._renderProxy = vm } // expose real self vm._self = vm // // 做了一些生命周期的初始化工作，初始化了很多变量，最主要是设置了父子组件的引用关系，也就是设置了 `$parent` 和 `$children`的值 initLifecycle(vm) // 注册事件，注意这里注册的不是自己的，而是父组件的。因为很明显父组件的监听器才会注册到孩子身上。 initEvents(vm) // 做一些 render 的准备工作，比如处理父子继承关系等，并没有真的开始 render initRender(vm) // 准备工作完成，接下来进入 `create` 阶段 callHook(vm, 'beforeCreate') initInjections(vm) // resolve injections before data/props // `data`, `props`, `computed` 等都是在这里初始化的，常见的面试考点比如`Vue是如何实现数据响应化的` 答案就在这个函数中寻找 initState(vm) initProvide(vm) // resolve provide after data/props callHook(vm, 'created') /* istanbul ignore if */ if (__DEV__ && config.performance && mark) { vm._name = formatComponentName(vm, false) mark(endTag) measure(`vue ${vm._name} init`, startTag, endTag) } if (vm.$options.el) { vm.$mount(vm.$options.el) } }\"]},\"545\":{\"h\":\"vm.$options 处理\",\"t\":[\"vm.$options = mergeOptions( resolveConstructorOptions(vm.constructor as any), options || {}, vm )\"]},\"546\":{\"h\":\"resolveConstructorOptions\",\"t\":[\"解析对象的 options 并且合并 Sub 上的 options\",\"resolveConstructorOptions\",\"export function resolveConstructorOptions(Ctor: typeof Component) { let options = Ctor.options; // super Vue.extend时 return Sub => Sub.super = this = Vue // if (Ctor.super) { // 获取父类身上options const superOptions = resolveConstructorOptions(Ctor.super); const cachedSuperOptions = Ctor.superOptions; // 如果父类有，进行合并 if (superOptions !== cachedSuperOptions) { // super option changed, // need to resolve new options. Ctor.superOptions = superOptions; // check if there are any late-modified/attached options (#4976) const modifiedOptions = resolveModifiedOptions(Ctor); // update base extend options if (modifiedOptions) { extend(Ctor.extendOptions, modifiedOptions); } options = Ctor.options = mergeOptions(superOptions, Ctor.extendOptions); if (options.name) { options.components[options.name] = Ctor; } } } return options; }\"]},\"547\":{\"h\":\"mergeOptions\",\"t\":[\"mergeOptions\",\"合并两个选项，出现相同配置项时，子选项会覆盖父选项的配置\",\"export function mergeOptions( parent: Record<string, any>, child: Record<string, any>, vm?: Component | null ): ComponentOptions { if (isFunction(child)) { // @ts-expect-error child = child.options } normalizeProps(child, vm) normalizeInject(child, vm) normalizeDirectives(child) // Apply extends and mixins on the child options, // but only if it is a raw options object that isn't // the result of another mergeOptions call. // Only merged options has the _base property. if (!child._base) { if (child.extends) { parent = mergeOptions(parent, child.extends, vm) } if (child.mixins) { for (let i = 0, l = child.mixins.length; i < l; i++) { parent = mergeOptions(parent, child.mixins[i], vm) } } } const options: ComponentOptions = {} as any let key for (key in parent) { mergeField(key) } for (key in child) { if (!hasOwn(parent, key)) { mergeField(key) } } function mergeField(key: any) { const strat = strats[key] || defaultStrat options[key] = strat(parent[key], child[key], vm, key) } return options }\",\"resolveConstructorOptions\",\"export function resolveConstructorOptions(Ctor: typeof Component) { let options = Ctor.options; if (Ctor.super) { const superOptions = resolveConstructorOptions(Ctor.super); const cachedSuperOptions = Ctor.superOptions; if (superOptions !== cachedSuperOptions) { // super option changed, // need to resolve new options. Ctor.superOptions = superOptions; // check if there are any late-modified/attached options (#4976) const modifiedOptions = resolveModifiedOptions(Ctor); // update base extend options if (modifiedOptions) { extend(Ctor.extendOptions, modifiedOptions); } options = Ctor.options = mergeOptions(superOptions, Ctor.extendOptions); if (options.name) { options.components[options.name] = Ctor; } } } return options; }\",\"props在 mergeOptions时调用normalizeProps方法进行处理\",\"props: [\\\"name\\\"]; props: { name: String; } props: { name: { type: String; } }\",\"normalizeProps\",\"function normalizeProps(options: Record<string, any>, vm?: Component | null) { const props = options.props; if (!props) return; const res: Record<string, any> = {}; let i, val, name; if (isArray(props)) { i = props.length; while (i--) { val = props[i]; if (typeof val === \\\"string\\\") { // 转化成驼峰式命名 name = camelize(val); res[name] = { type: null }; } } } else if (isPlainObject(props)) { for (const key in props) { val = props[key]; name = camelize(key); res[name] = isPlainObject(val) ? val : { type: val }; } } options.props = res; }\"]},\"548\":{\"h\":\"callHook\",\"t\":[\"export function callHook(vm: Component, hook: string, args?: any[]) { // #7573 disable dep collection when invoking lifecycle hooks pushTarget(); const prev = currentInstance; setCurrentInstance(vm); const handlers = vm.$options[hook]; const info = `${hook} hook`; if (handlers) { for (let i = 0, j = handlers.length; i < j; i++) { invokeWithErrorHandling(handlers[i], vm, args || null, vm, info); } } if (vm._hasHookEvent) { vm.$emit(\\\"hook:\\\" + hook); } setCurrentInstance(prev); popTarget(); }\"]},\"549\":{\"h\":\"initState\",\"t\":[\"数据响应式的入口：分别处理 props、methods、data、computed、watch优先级：props、methods、data、computed 对象中的属性不能出现重复，优先级和列出顺序一致其中 computed 中的 key 不能和 props、data 中的 key 重复，methods 不影响\",\"export function initState(vm: Component) { // $option 会将 vue.constructor 和new Vue({}) 里的对象进行合并 const opts = vm.$options; if (opts.props) initProps(vm, opts.props); // Composition API initSetup(vm); if (opts.methods) initMethods(vm, opts.methods); if (opts.data) { initData(vm); } else { const ob = observe((vm._data = {})); ob && ob.vmCount++; } if (opts.computed) initComputed(vm, opts.computed); if (opts.watch && opts.watch !== nativeWatch) { initWatch(vm, opts.watch); } }\"]},\"550\":{\"h\":\"proxy\",\"t\":[\"把 props 和 data 上的属性代理到 vm 实例上\",\"const sharedPropertyDefinition = { enumerable: true, configurable: true, get: noop, set: noop, }; export function proxy(target: Object, sourceKey: string, key: string) { sharedPropertyDefinition.get = function proxyGetter() { return this[sourceKey][key]; }; sharedPropertyDefinition.set = function proxySetter(val) { this[sourceKey][key] = val; }; Object.defineProperty(target, key, sharedPropertyDefinition); }\"]},\"551\":{\"h\":\"initProps\",\"t\":[\"处理 props 对象，将 props 对象的每个属性设置为响应式，代理到 vm 上 => vm.props.xx = vm.xx\",\"// function initProps(vm: Component, propsOptions: Object) { const propsData = vm.$options.propsData || {}; const props = (vm._props = shallowReactive({})); // cache prop keys so that future props updates can iterate using Array // instead of dynamic object key enumeration. const keys: string[] = (vm.$options._propKeys = []); const isRoot = !vm.$parent; // root instance props should be converted if (!isRoot) { toggleObserving(false); } // 遍历 props 对象 for (const key in propsOptions) { keys.push(key); // 获取 props[key] 的默认值 const value = validateProp(key, propsOptions, propsData, vm); // 为 props 的每个 key 是设置数据响应式 defineReactive(props, key, value); // static props are already proxied on the component's prototype // during Vue.extend(). We only need to proxy props defined at // instantiation here. if (!(key in vm)) { // 代理 key 到 vm 对象上 proxy(vm, `_props`, key); } } toggleObserving(true); }\"]},\"552\":{\"h\":\"initMethods\",\"t\":[\"function initMethods(vm: Component, methods: Object) { const props = vm.$options.props; for (const key in methods) { // bind() 方法创建一个新的函数，在 bind() 被调用时，这个新函数的 this 被指定为 bind() 的第一个参数，而其余参数将作为新函数的参数，供调用时使用。 // (fn,ctx) => fn.bind(ctx) vm[key] = typeof methods[key] !== \\\"function\\\" ? noop : bind(methods[key], vm); } }\"]},\"553\":{\"h\":\"initData\",\"t\":[\"function initData(vm: Component) { let data: any = vm.$options.data; data = vm._data = isFunction(data) ? getData(data, vm) : data || {}; if (!isPlainObject(data)) { data = {}; } // proxy data on instance const keys = Object.keys(data); const props = vm.$options.props; const methods = vm.$options.methods; let i = keys.length; while (i--) { const key = keys[i]; if (!isReserved(key)) { proxy(vm, `_data`, key); } } // observe data const ob = observe(data); ob && ob.vmCount++; }\"]},\"554\":{\"h\":\"initComputed\",\"t\":[\"function initComputed(vm: Component, computed: Object) { // $flow-disable-line const watchers = (vm._computedWatchers = Object.create(null)); // computed properties are just getters during SSR const isSSR = isServerRendering(); for (const key in computed) { const userDef = computed[key]; const getter = isFunction(userDef) ? userDef : userDef.get; if (!isSSR) { // create internal watcher for the computed property. // 这是一个computer watcher watchers[key] = new Watcher( vm, getter || noop, noop, computedWatcherOptions ); } // component-defined computed properties are already defined on the // component prototype. We only need to define computed properties defined // at instantiation here. // 代理 computed 对象中的属性到 vm 实例 // 这样就可以使用 vm.computedKey 访问计算属性了 if (!(key in vm)) { defineComputed(vm, key, userDef); } } } export function defineComputed( target: any, key: string, userDef: Record<string, any> | (() => any) ) { const shouldCache = !isServerRendering(); if (isFunction(userDef)) { sharedPropertyDefinition.get = shouldCache ? createComputedGetter(key) : createGetterInvoker(userDef); sharedPropertyDefinition.set = noop; } else { sharedPropertyDefinition.get = userDef.get ? shouldCache && userDef.cache !== false ? createComputedGetter(key) : createGetterInvoker(userDef.get) : noop; sharedPropertyDefinition.set = userDef.set || noop; } Object.defineProperty(target, key, sharedPropertyDefinition); } function createComputedGetter(key) { return function computedGetter() { // 得到当前 key 对应的 watcher const watcher = this._computedWatchers && this._computedWatchers[key]; if (watcher) { // 计算 key 对应的值，通过执行 computed.key 的回调函数来得到 // watcher.dirty 属性就是大家常说的 computed 计算结果会缓存的原理 // <template> // <div>{{ computedProperty }}</div> // <div>{{ computedProperty }}</div> // </template> // 像这种情况下，在页面的一次渲染中，两个 dom 中的 computedProperty 只有第一个 // 会执行 computed.computedProperty 的回调函数计算实际的值， // 即执行 watcher.evalaute，而第二个就不走计算过程了， // 因为上一次执行 watcher.evalute 时把 watcher.dirty 置为了 false， // 待页面更新后，wathcer.update 方法会将 watcher.dirty 重新置为 true， // 供下次页面更新时重新计算 computed.key 的结果 if (watcher.dirty) { watcher.evaluate(); } if (Dep.target) { // watcher.depend => Dep.depend => 将Dep.target = 当前watcher watcher.depend(); } // watcher.value => this.get() 会读取data的响应式数据，触发data中的getter将当前的watcher收集 // return watcher.value; } }; }\"]},\"555\":{\"h\":\"initWatch\",\"t\":[\" watch: { // 写法1 string, 即执行this.foo() count: 'foo' // 写法2 函数 count(v) { console.log(v) }, // 写法3 普通对象 count: { handler(v) { console.log(v) }, deep: true, immediate: true }, // 写法4 数组里面放stirng，即执行 this.foo(),this.bar() count: [ 'foo', 'bar' ], // 写法5 数组里面放普通对象或者stirng,自由组合 count: [ { handler(v) { console.log(v) }, deep: true, immediate: true }, { handler: 'foo' } ] }\",\"function initWatch(vm: Component, watch: Object) { for (const key in watch) { const handler = watch[key]; if (isArray(handler)) { for (let i = 0; i < handler.length; i++) { createWatcher(vm, key, handler[i]); } } else { createWatcher(vm, key, handler); } } } // 1、兼容性处理，保证 handler 肯定是一个函数 // 2、调用 $watch function createWatcher( vm: Component, expOrFn: string | (() => any), handler: any, options?: Object ) { // 如果 handler 为对象，则获取其中的 handler 选项的值 if (isPlainObject(handler)) { options = handler; handler = handler.handler; } // 如果 hander 为字符串，则说明是一个 methods 方法，获取 vm[handler] if (typeof handler === \\\"string\\\") { handler = vm[handler]; } return vm.$watch(expOrFn, handler, options); } Vue.prototype.$watch = function ( expOrFn: string | (() => any), cb: any, options?: Record<string, any> ): Function { const vm: Component = this; // 兼容性处理，因为用户调用 vm.$watch 时设置的 cb 可能是对象 if (isPlainObject(cb)) { return createWatcher(vm, expOrFn, cb, options); } options = options || {}; //user = true, watcher.run => this.cb() // user时 watcher run方法逻辑不同 options.user = true; const watcher = new Watcher(vm, expOrFn, cb, options); // 如果用户设置了 immediate 为 true，则立即执行一次回调函数 if (options.immediate) { const info = `callback for immediate watcher \\\"${watcher.expression}\\\"`; pushTarget(); invokeWithErrorHandling(cb, vm, [watcher.value], vm, info); popTarget(); } return function unwatchFn() { watcher.teardown(); }; };\"]},\"556\":{\"h\":\"响应式原理\",\"t\":[\"利用defineProperty对数据进行拦截,在initState()对 data 和 props 进行拦截，\",\"initState => initData => observe => Observer => defineReactive => initProps\",\"defineReactive 利用Object.defineProperty对数据的 get 和 set 进行拦截操作\",\"当组件挂载时new Watcher里的 this.get() 方法中进行pushTarget()将当前 Watcher 赋值给 Dep.target\",\"对数据进行 get时，触发 get 拦截器，将定义的Dep对象添加进入Watcher中的newDeps数组中,同时将Watcher添加进入Dep中的subs中\",\"new Watcher => Dep.target = Watcher this.get() => new Dep => dep.depend() = Watcher.addDep(dep) = watcher.newDeps.push(dep) && dep.subs.push(watcher)\",\"对数据进行 set时，触发 set 拦截器，触发dep.notify()遍历 subs 数组执行sub.update即watcher.update()将 watcher 加入更新queue队列,执行nextTick更新队列,批量执行queue队列执行watcher.run()在方法中会执行this.get()获取值进行对比，this.get会在次触发updateComponent\",\"this.set() => dep.notify() => watcher.update() => queueWatcher(watcher) => nextTick(flushSchedulerQueue) => watcher.run() => this.get() => vm._render() =>vm._update() => patch() => 更新\"]},\"557\":{\"h\":\"更新过程\",\"t\":[\"更新过程\",\"// 1.set() dep.notify(); // 2.notify() notify(info?: DebuggerEventExtraInfo) { const subs = this.subs.slice() for (let i = 0, l = subs.length; i < l; i++) { // watcher 类的update方法 subs[i].update() } } // 3. Watcher update update() { /* istanbul ignore else */ if (this.lazy) { this.dirty = true } else if (this.sync) { this.run() } else { queueWatcher(this) } } // 4. queueWatcher // flushing // false => flushSchedulerQueue: flushing= true => resetSchedulerState：flushing = false let flushing = false export function queueWatcher(watcher: Watcher) { const id = watcher.id // 如果 watcher 已经存在，则跳过，不会重复入队 if (has[id] != null) { return } if (watcher === Dep.target && watcher.noRecurse) { return } // 缓存 watcher.id，用于判断 watcher 是否已经入队 has[id] = true if (!flushing) { // 当前没有处于刷新队列状态，watcher 直接入队 queue.push(watcher) } else { // if already flushing, splice the watcher based on its id // if already past its id, it will be run next immediately. // 已经在刷新队列了 // 从队列末尾开始倒序遍历，根据当前 watcher.id 找到它大于的 watcher.id 的位置，然后将自己插入到该位置之后的下一个位置 // 即将当前 watcher 放入已排序的队列中，且队列仍是有序的 let i = queue.length - 1 while (i > index && queue[i].id > watcher.id) { i-- } queue.splice(i + 1, 0, watcher) } // queue the flush if (!waiting) { waiting = true nextTick(flushSchedulerQueue) } // 5.nextTick // 6.flushSchedulerQueue // 7.watcher.run }\"]},\"558\":{\"h\":\"flushSchedulerQueue\",\"t\":[\"Flush both queues and run the watchers.\",\"刷新队列，由 flushCallbacks 函数负责调用，主要做了如下两件事：\",\"1、更新 flushing 为 ture，表示正在刷新队列，在此期间往队列中 push 新的 watcher 时需要特殊处理（将其放在队列的合适位置）\",\"2、按照队列中的 watcher.id 从小到大排序，保证先创建的 watcher 先执行，也配合 第一步\",\"3、遍历 watcher 队列，依次执行 watcher.before、watcher.run，并清除缓存的 watcher\",\"flushSchedulerQueue\",\"// 会存入 nextTick的callbacks数组中，当浏览器没有执行队列才会执行 function flushSchedulerQueue() { currentFlushTimestamp = getNow(); flushing = true; let watcher, id; // Sort queue before flush. // This ensures that: // 1. Components are updated from parent to child. (because parent is always // created before the child) // 2. A component's user watchers are run before its render watcher (because // user watchers are created before the render watcher) // 3. If a component is destroyed during a parent component's watcher run, // its watchers can be skipped. queue.sort((a, b) => a.id - b.id); /** * 刷新队列之前先给队列排序（升序），可以保证： * 1、组件的更新顺序为从父级到子级，因为父组件总是在子组件之前被创建 * 2、一个组件的用户 watcher 在其渲染 watcher 之前被执行，因为用户 watcher 先于 渲染 watcher 创建 * 3、如果一个组件在其父组件的 watcher 执行期间被销毁，则它的 watcher 可以被跳过 * 排序以后在刷新队列期间新进来的 watcher 也会按顺序放入队列的合适位置 */ for (index = 0; index < queue.length; index++) { watcher = queue[index]; if (watcher.before) { // 执行 before 钩子，在使用 vm.$watch 或者 watch 选项时可以通过配置项（options.before）传递 watcher.before(); } // 将缓存的 watcher 清除 id = watcher.id; has[id] = null; //执行 watcher.run，最终触发更新函数，比如 updateComponent 或者 获取 this.xx（xx 为用户 watch 的第二个参数），当然第二个参数也有可能是一个函数，那就直接执行 watcher.run(); } // keep copies of post queues before resetting state const activatedQueue = activatedChildren.slice(); const updatedQueue = queue.slice(); /** * 重置调度状态： * 1、重置 has 缓存对象，has = {} * 2、waiting = flushing = false，表示刷新队列结束 * waiting = flushing = false，表示可以像 callbacks 数组中放入新的 flushSchedulerQueue 函数，并且可以向浏览器的任务队列放入下一个 flushCallbacks 函数了 */ resetSchedulerState(); // call component updated and activated hooks callActivatedHooks(activatedQueue); callUpdatedHooks(updatedQueue); // devtool hook /* istanbul ignore if */ if (devtools && config.devtools) { devtools.emit(\\\"flush\\\"); } }\",\"resetSchedulerState\",\"// 重置更新队列 function resetSchedulerState() { index = queue.length = activatedChildren.length = 0 has = {} waiting = flushing = false }\"]},\"559\":{\"h\":\"watcher.run\",\"t\":[\"watcher.run\",\"/* * 由 刷新队列函数 flushSchedulerQueue 调用，如果是同步 watch，则由 this.update 直接调用，完成如下几件事： * 1、执行实例化 watcher 传递的第二个参数，updateComponent 或者 获取 this.xx 的一个函数(parsePath 返回的函数) * 2、更新旧值为新值 * 3、执行实例化 watcher 时传递的第三个参数，比如用户 watcher 的回调函数 */ run() { if (this.active) { // 调用 this.get 方法 const value = this.get() if ( value !== this.value || // Deep watchers and watchers on Object/Arrays should fire even // when the value is the same, because the value may // have mutated. isObject(value) || this.deep ) { // set new value // 更新旧值为新值 const oldValue = this.value this.value = value if (this.user) { // 如果是用户 watcher，则执行用户传递的第三个参数 —— 回调函数，参数为 val 和 oldVal const info = `callback for watcher \\\"${this.expression}\\\"` invokeWithErrorHandling( this.cb, this.vm, [value, oldValue], this.vm, info ) } else { // 渲染 watcher，this.cb = noop，一个空函数 this.cb.call(this.vm, value, oldValue) } } } }\",\"Object.defineProperty() 方法会直接在一个对象上定义一个新属性，或者修改一个对象的现有属性，并返回此对象。\",\"defineProperty\",\"let car = {}; let val = 3000; Object.defineProperty(car, \\\"price\\\", { enumerable: true, configurable: true, get() { console.log(\\\"price属性被读取了\\\"); return val; }, set(newVal) { console.log(\\\"price属性被修改了\\\"); val = newVal; }, });\"]},\"560\":{\"h\":\"observe\",\"t\":[\"initState()-->observe(data)-->new Observer() 监测数据 为对象创建观察者实例，如果对象已经被观察过，则返回已有的观察者实例，否则创建新的观察者实例\",\"// initData function initData(vm: Component) { let data: any = vm.$options.data; data = vm._data = isFunction(data) ? getData(data, vm) : data || {}; // ... // observe data const ob = observe(data); ob && ob.vmCount++; }\",\"observe\",\"// 给非 VNode 的对象类型数据添加一个 Observer，如果已经添加过则直接返回 export function observe(value: any, shallow?: boolean): Observer | void { if (!isObject(value) || isRef(value) || value instanceof VNode) { return; } let ob: Observer | void; if (hasOwn(value, \\\"__ob__\\\") && value.__ob__ instanceof Observer) { // 如果 value 对象上存在 __ob__ 属性，则表示已经做过观察了，直接返回 __ob__ 属性 ob = value.__ob__; } else if ( shouldObserve && !isServerRendering() && (isArray(value) || isPlainObject(value)) && Object.isExtensible(value) && !value.__v_skip ) { ob = new Observer(value, shallow); } return ob; }\"]},\"561\":{\"h\":\"Observer\",\"t\":[\"对象的属性添加 getter 和 setter，用于依赖收集和派发更新：\",\"Observer\",\"export class Observer { dep: Dep vmCount: number // number of vms that have this object as root $data constructor(public value: any, public shallow = false) { // this.value = value this.dep = new Dep() this.vmCount = 0 // 给value新增一个__ob__属性，值为该value的Observer实例 // 相当于为value打上标记，表示它已经被转化成响应式了，避免重复操作 def(value, '__ob__', this) if (isArray(value)) { /** * value 为数组 * hasProto = '__proto__' in {} * 用于判断对象是否存在 __proto__ 属性，通过 obj.__proto__ 可以访问对象的原型链 * 但由于 __proto__ 不是标准属性，所以有些浏览器不支持，比如 IE6-10，Opera10.1 * 为什么要判断，是因为一会儿要通过 __proto__ 操作数据的原型链 * 覆盖数组默认的七个原型方法，以实现数组响应式 * https://juejin.cn/post/6950826293923414047 */ if (hasProto) { // 如果数组有_proto_属性 则将_proto_指向 数组的七个方法 // value.__proto__ = arrayMathods protoAugment(value, arrayMethods) } else { // 数组不支持_proto_ // 循环遍历arrayKeys 通过defineProperty给数组添加方法 copyAugment(value, arrayMethods, arrayKeys) } if (!shallow) { this.observeArray(value) } } else { this.walk(value, shallow) } } /** * Walk through all properties and convert them into * getter/setters. This method should only be called when * value type is Object. * 遍历对象上的每个 key，为每个 key 设置响应式 * 仅当值为对象时才会走这里 */ // 使一个对象转化成可观测对象 walk(obj: object, shallow: boolean) { const keys = Object.keys(obj) for (let i = 0; i < keys.length; i++) { const key = keys[i] defineReactive(obj, key, NO_INIITIAL_VALUE, undefined, shallow) } } /** * Observe a list of Array items. 遍历数组，为数组的每一项设置观察，处理数组元素为对象的情况 */ observeArray(items: Array<any>) { for (let i = 0, l = items.length; i < l; i++) { observe(items[i]) } } }\"]},\"562\":{\"h\":\"arrayMethods\",\"t\":[\"arrayMethods\",\"const arrayProto = Array.prototype; export const arrayMethods = Object.create(arrayProto); const methodsToPatch = [ \\\"push\\\", \\\"pop\\\", \\\"shift\\\", \\\"unshift\\\", \\\"splice\\\", \\\"sort\\\", \\\"reverse\\\", ]; /** * Intercept mutating methods and emit events */ methodsToPatch.forEach(function (method) { // cache original method const original = arrayProto[method]; def(arrayMethods, method, function mutator(...args) { const result = original.apply(this, args); const ob = this.__ob__; let inserted; switch (method) { case \\\"push\\\": case \\\"unshift\\\": inserted = args; break; case \\\"splice\\\": inserted = args.slice(2); break; } if (inserted) ob.observeArray(inserted); // notify change ob.dep.notify(); return result; }); });\"]},\"563\":{\"h\":\"defineReactive\",\"t\":[\"拦截 obj[key] 的读取和设置操作：\",\"1、在第一次读取时收集依赖，比如执行 render 函数生成虚拟 DOM 时会有读取操作\",\"2、在更新时设置新值并通知依赖更新\",\"defineReactive\",\"export function defineReactive( obj: object, key: string, val?: any, customSetter?: Function | null, shallow?: boolean ) { const dep = new Dep(); // 获取 obj[key] 的属性描述符，发现它是不可配置对象的话直接 return /* Object.getOwnPropertyDescriptor() 方法返回指定对象上一个自有属性对应的属性描述符。 */ const property = Object.getOwnPropertyDescriptor(obj, key); if (property && property.configurable === false) { return; } // cater for pre-defined getter/setters const getter = property && property.get; const setter = property && property.set; if ( (!getter || setter) && (val === NO_INIITIAL_VALUE || arguments.length === 2) ) { val = obj[key]; } // 只有对象 // 递归调用，处理 val 即 obj[key] 的值为对象的情况，保证对象中的所有 key 都被观察 // observe 放回一个Observer对象 let childOb = !shallow && observe(val); Object.defineProperty(obj, key, { enumerable: true, configurable: true, get: function reactiveGetter() { const value = getter ? getter.call(obj) : val; /** * Dep.target 为 Dep 类的一个静态属性，值为 watcher，在实例化 Watcher 时会被设置 * 实例化 Watcher 时会执行 new Watcher 时传递的回调函数（computed 除外，因为它懒执行） * 而回调函数中如果有 vm.key 的读取行为，则会触发这里的 读取 拦截，进行依赖收集 * 回调函数执行完以后又会将 Dep.target 设置为 null，避免这里重复收集依赖 */ if (Dep.target) { // 在 dep 的subs数组中添加watcher dep.depend(); // childOb 表示对象中嵌套对象的观察者对象，如果存在也对其进行依赖收集 if (childOb) { childOb.dep.depend(); if (isArray(value)) { dependArray(value); /* function dependArray(value: Array<any>) { for (let e, i = 0, l = value.length; i < l; i++) { e = value[i] if (e && e.__ob__) { e.__ob__.dep.depend() } if (isArray(e)) { dependArray(e) } } } */ } } } return isRef(value) ? value.value : value; }, set: function reactiveSetter(newVal) { const value = getter ? getter.call(obj) : val; // 如果新老值一样，则直接 return，不跟新更不触发响应式更新过程 if (!hasChanged(value, newVal)) { return; } if (setter) { setter.call(obj, newVal); } else if (getter) { // #7981: for accessor properties without setter return; } else if (isRef(value) && !isRef(newVal)) { value.value = newVal; return; } else { val = newVal; } // 对新值进行观察，让新值也是响应式的 childOb = !shallow && observe(newVal); dep.notify(); }, }); return dep; }\",\"Dep.target\",\"Dep.target = null; const targetStack: Array<DepTarget | null | undefined> = []; export function pushTarget(target?: DepTarget | null) { targetStack.push(target); Dep.target = target; } export function popTarget() { targetStack.pop(); Dep.target = targetStack[targetStack.length - 1]; }\"]},\"564\":{\"h\":\"Dep\",\"t\":[\"依赖收集\",\"export default class Dep { static target?: DepTarget | null id: number subs: Array<DepTarget> constructor() { this.id = uid++ this.subs = [] } addSub(sub: DepTarget) { this.subs.push(sub) } removeSub(sub: DepTarget) { remove(this.subs, sub) } depend(info?: DebuggerEventExtraInfo) { // this => watcher // new Watcher 执行 this.get()方法 =》 pushTarget(this) // 将watcher定义为 Dep.target if (Dep.target) { Dep.target.addDep(this) } } notify(info?: DebuggerEventExtraInfo) { const subs = this.subs.slice() for (let i = 0, l = subs.length; i < l; i++) { // watcher 类的update方法 subs[i].update() } } }\"]},\"565\":{\"h\":\"Watcher\",\"t\":[\"export default class Watcher implements DepTarget { vm?: Component | null expression: string cb: Function id: number deep: boolean user: boolean lazy: boolean sync: boolean dirty: boolean active: boolean deps: Array<Dep> newDeps: Array<Dep> depIds: SimpleSet newDepIds: SimpleSet before?: Function onStop?: Function noRecurse?: boolean getter: Function value: any // dev only onTrack?: ((event: DebuggerEvent) => void) | undefined onTrigger?: ((event: DebuggerEvent) => void) | undefined constructor( vm: Component | null, expOrFn: string | (() => any), cb: Function, options?: WatcherOptions | null, isRenderWatcher?: boolean ) { recordEffectScope(this, activeEffectScope || (vm ? vm._scope : undefined)) if ((this.vm = vm)) { if (isRenderWatcher) { vm._watcher = this } } // options if (options) { this.deep = !!options.deep this.user = !!options.user this.lazy = !!options.lazy this.sync = !!options.sync this.before = options.before if (__DEV__) { this.onTrack = options.onTrack this.onTrigger = options.onTrigger } } else { this.deep = this.user = this.lazy = this.sync = false } this.cb = cb this.id = ++uid // uid for batching this.active = true this.dirty = this.lazy // for lazy watchers this.deps = [] this.newDeps = [] this.depIds = new Set() this.newDepIds = new Set() this.expression = __DEV__ ? expOrFn.toString() : '' // parse expression for getter if (isFunction(expOrFn)) { this.getter = expOrFn } else { this.getter = parsePath(expOrFn) if (!this.getter) { this.getter = noop } } this.value = this.lazy ? undefined : this.get() } /** * Evaluate the getter, and re-collect dependencies. */ get() { pushTarget(this) let value const vm = this.vm try { value = this.getter.call(vm, vm) } catch (e: any) { if (this.user) { handleError(e, vm, `getter for watcher \\\"${this.expression}\\\"`) } else { throw e } } finally { // \\\"touch\\\" every property so they are all tracked as // dependencies for deep watching if (this.deep) { traverse(value) } popTarget() this.cleanupDeps() } return value } /** * Add a dependency to this directive. */ addDep(dep: Dep) { const id = dep.id if (!this.newDepIds.has(id)) { this.newDepIds.add(id) this.newDeps.push(dep) if (!this.depIds.has(id)) { dep.addSub(this) } } } /** * Clean up for dependency collection. */ cleanupDeps() { let i = this.deps.length while (i--) { const dep = this.deps[i] if (!this.newDepIds.has(dep.id)) { dep.removeSub(this) } } let tmp: any = this.depIds this.depIds = this.newDepIds this.newDepIds = tmp this.newDepIds.clear() tmp = this.deps this.deps = this.newDeps this.newDeps = tmp this.newDeps.length = 0 } /** * Subscriber interface. * Will be called when a dependency changes. */ update() { /* istanbul ignore else */ if (this.lazy) { this.dirty = true } else if (this.sync) { this.run() } else { queueWatcher(this) } } /** * Scheduler job interface. * Will be called by the scheduler. */ run() { if (this.active) { const value = this.get() if ( value !== this.value || // Deep watchers and watchers on Object/Arrays should fire even // when the value is the same, because the value may // have mutated. isObject(value) || this.deep ) { // set new value const oldValue = this.value this.value = value if (this.user) { const info = `callback for watcher \\\"${this.expression}\\\"` invokeWithErrorHandling( this.cb, this.vm, [value, oldValue], this.vm, info ) } else { this.cb.call(this.vm, value, oldValue) } } } } /** * Evaluate the value of the watcher. * This only gets called for lazy watchers. */ evaluate() { this.value = this.get() this.dirty = false } /** * Depend on all deps collected by this watcher. */ depend() { let i = this.deps.length while (i--) { this.deps[i].depend() } } /** * Remove self from all dependencies' subscriber list. */ teardown() { if (this.vm && !this.vm._isBeingDestroyed) { remove(this.vm._scope.effects, this) } if (this.active) { let i = this.deps.length while (i--) { this.deps[i].removeSub(this) } this.active = false if (this.onStop) { this.onStop() } } } }\"]},\"566\":{\"h\":\"初始化过程分析\",\"t\":[\"//1. vue._init() if (vm.$options.el) { // 先定义只包含运行时版本的$mount方法，再定义完整版本的$mount 方法 vm.$mount(vm.$options.el); } //2. vm.$mount Vue.prototype.$mount = function ( el?: string | Element, hydrating?: boolean ): Component { el = el && inBrowser ? query(el) : undefined; return mountComponent(this, el, hydrating); }; //3. mountComponent export function mountComponent( vm: Component, el: Element | null | undefined, hydrating?: boolean ): Component { let updateComponent; updateComponent = () => { vm._update(vm._render(), hydrating); }; new Watcher( vm, updateComponent, noop, watcherOptions, true /* isRenderWatcher */ ); } //4. new Watcher() // 调用 updateComponent() export default class Watcher implements DepTarget { constructor( vm: Component | null, // updateComponent expOrFn: string | (() => any), cb: Function, options?: WatcherOptions | null, isRenderWatcher?: boolean ) { // ... if (isFunction(expOrFn)) { // this.getter = updateComponent this.getter = expOrFn; } else { this.getter = parsePath(expOrFn); } // this.get() 调用 updateComponent this.value = this.lazy ? undefined : this.get(); } get() { pushTarget(this); let value; const vm = this.vm; try { value = this.getter.call(vm, vm); } finally { if (this.deep) { traverse(value); } // 将 Dep.target 复原 popTarget(); this.cleanupDeps(); } return value; } } //5. _render() //vm._update(vm._render(), hydrating); Vue.prototype._render = function (): VNode { // ... const { render, _parentVnode } = vm.$options; vnode = render.call(vm._renderProxy, vm.$createElement); }; // 6. render() 每个组件的render方法 // 触发 this.get() // app const render = function () { var _vm = this; var _h = _vm.$createElement; var _c = _vm._self._c || _h; return _c( \\\"div\\\", { attrs: { id: \\\"app\\\" } }, [ // 获取_vm里面的数据 在次触发 get() ], 1 ) }; //\"]},\"567\":{\"h\":\"nextTick\",\"t\":[\"// 存放要执行的队列 当 pending为false 才遍历执行 const callbacks: Array<Function> = [] /* 如果 pending 为 false，表示现在浏览器的任务队列中没有 flushCallbacks 函数 如果 pending 为 true，则表示浏览器的任务队列中已经被放入了 flushCallbacks 函数， 当 pending为 false callbacks才会被调用执行 待执行 flushCallbacks 函数时，pending 会被再次置为 false，表示下一个 flushCallbacks 函数可以进入浏览器的任务队列了 */ let pending = false export function nextTick(cb?: (...args: any[]) => any, ctx?: object) { let _resolve callbacks.push(() => { if (cb) { try { cb.call(ctx) } catch (e: any) { handleError(e, ctx, 'nextTick') } } else if (_resolve) { _resolve(ctx) } }) if (!pending) { pending = true // 判断浏览器是否支持 promise 等判断来选择对应的浏览器任务队列 // 同步任务 > 微任务 > requestAnimationFrame > DOM渲染 > 宏任务 // 在选择的对应任务队列中（首选微任务队列）放入 flushCallbacks 函数 // flushCallbacks 在执行 callback队列 // timerFunc() } // $flow-disable-line if (!cb && typeof Promise !== 'undefined') { return new Promise(resolve => { _resolve = resolve }) } }\"]},\"568\":{\"h\":\"timerFunc\",\"t\":[\"/** * * callbacks 数组就是 watcher对象集合 * 1、将 pending 置为 false * 2、清空 callbacks 数组 * 3、执行 callbacks 数组中的每一个函数（比如 flushSchedulerQueue、用户调用 nextTick 传递的回调函数） */ function flushCallbacks() { pending = false; const copies = callbacks.slice(0); callbacks.length = 0; for (let i = 0; i < copies.length; i++) { copies[i](); } } // timerFunc 的作用很简单，就是将 flushCallbacks 函数放入浏览器的异步任务队列中 let timerFunc; if (typeof Promise !== \\\"undefined\\\" && isNative(Promise)) { const p = Promise.resolve(); timerFunc = () => { p.then(flushCallbacks); /** * 在有问题的UIWebViews中，Promise.then不会完全中断，但是它可能会陷入怪异的状态， * 在这种状态下，回调被推入微任务队列，但队列没有被刷新，直到浏览器需要执行其他工作，例如处理一个计时器。 * 因此，我们可以通过添加空计时器来“强制”刷新微任务队列。 */ if (isIOS) setTimeout(noop); }; isUsingMicroTask = true; } else if ( !isIE && typeof MutationObserver !== \\\"undefined\\\" && (isNative(MutationObserver) || // PhantomJS and iOS 7.x MutationObserver.toString() === \\\"[object MutationObserverConstructor]\\\") ) { let counter = 1; // MutationObserver()创建并返回一个新的观察器，它会在触发指定 DOM 事件时，调用指定的回调函数 const observer = new MutationObserver(flushCallbacks); const textNode = document.createTextNode(String(counter)); observer.observe(textNode, { characterData: true, }); timerFunc = () => { counter = (counter + 1) % 2; textNode.data = String(counter); }; isUsingMicroTask = true; } else if (typeof setImmediate !== \\\"undefined\\\" && isNative(setImmediate)) { // 在浏览器完成后面的其他语句后，就立刻执行这个回调函数。 timerFunc = () => { setImmediate(flushCallbacks); }; } else { // Fallback to setTimeout. timerFunc = () => { setTimeout(flushCallbacks, 0); }; }\"]},\"569\":{\"c\":[\"Vue\"]},\"570\":{\"h\":\"Vue2.x keep-alive原理分析\",\"t\":[\"<keep-alive>是 Vue 中内置的一个抽象组件，自身不会渲染，也不会出现在父组件链中。当它包裹动态组件时，会缓存不活动的组件实例，而不是销毁它们。 组件一旦被 <keep-alive> 缓存，再次渲染的时候不会执行 created、mounted 等钩子函数\"]},\"571\":{\"h\":\"使用\",\"t\":[\"<!-- 失活的组件将会被缓存！ --> <keep-alive> <component :is=\\\"view\\\"></component> </keep-alive> <!-- include 和 exclude prop 允许组件有条件地缓存。二者都可以用逗号分隔字符串、正则表达式或一个数组来表示： --> <!-- 逗号分隔字符串 --> <keep-alive include=\\\"a,b\\\"> <component :is=\\\"view\\\"></component> </keep-alive> <!-- 正则表达式 (使用 `v-bind`) --> <keep-alive :include=\\\"/a|b/\\\"> <component :is=\\\"view\\\"></component> </keep-alive> <!-- 数组 (使用 `v-bind`) --> <keep-alive :include=\\\"['a', 'b']\\\"> <component :is=\\\"view\\\"></component> </keep-alive>\",\"保证keep-alive直接包裹组件 \",\"因为keep-alive会判断第一层dom是不是组件，如果包裹了一层div，则会缓存失败\",\"是否name配置不对 \",\"keep-alive的include和exclude属性都是通过单文件组件中的name属性来判断是否缓存此组件；\",\"是否router-view嵌套超过两层 \",\"若超过，要在子级router-view处添加一层keep-alive。\"]},\"572\":{\"h\":\"结合路由\",\"t\":[\"export default new Router({ routes:[ { path:'/', component: () => import('./views/Home.vue') name: 'home', meta:{ keepAlive:true } } ] })\",\"<keep-alive v-if=\\\"$route.meta.keepAlive\\\"> <router-view :is=\\\"view\\\"></router-vi> </keep-alive> <router-view v-if=\\\"!$route.meta.keepAlive\\\"></router-view>\"]},\"573\":{\"h\":\"keep-alive\",\"t\":[\"keep-alive\",\"function matches( pattern: string | RegExp | Array<string>, name: string ): boolean { if (isArray(pattern)) { return pattern.indexOf(name) > -1; } else if (typeof pattern === \\\"string\\\") { return pattern.split(\\\",\\\").indexOf(name) > -1; } else if (isRegExp(pattern)) { return pattern.test(name); } /* istanbul ignore next */ return false; } function pruneCache( keepAliveInstance: { cache: CacheEntryMap, keys: string[], _vnode: VNode }, filter: Function ) { const { cache, keys, _vnode } = keepAliveInstance; for (const key in cache) { const entry = cache[key]; if (entry) { const name = entry.name; if (name && !filter(name)) { pruneCacheEntry(cache, key, keys, _vnode); } } } } // 判断是否存在缓存的组件 将其摧毁 function pruneCacheEntry( cache: CacheEntryMap, key: string, keys: Array<string>, current?: VNode ) { const entry = cache[key]; if (entry && (!current || entry.tag !== current.tag)) { // @ts-expect-error can be undefined // 执行组件的destory钩子函数 entry.componentInstance.$destroy(); } cache[key] = null; remove(keys, key); } const patternTypes: Array<Function> = [String, RegExp, Array]; export default { name: \\\"keep-alive\\\", // 创建实例时这个属性决定是否忽略某个组件 abstract: true, props: { include: patternTypes, exclude: patternTypes, max: [String, Number], }, methods: { cacheVNode() { const { cache, keys, vnodeToCache, keyToCache } = this; // 判断是否存在缓存对象 // 将其缓存起来 if (vnodeToCache) { const { tag, componentInstance, componentOptions } = vnodeToCache; cache[keyToCache] = { name: getComponentName(componentOptions), tag, componentInstance, }; keys.push(keyToCache); // prune oldest entry // 检查缓存数量是否超过 max设置值 if (this.max && keys.length > parseInt(this.max)) { pruneCacheEntry(cache, keys[0], keys, this._vnode); } this.vnodeToCache = null; } }, }, created() { this.cache = Object.create(null); // 缓存虚拟dom this.keys = []; // 缓存的虚拟dom的健集合 }, destroyed() { // 删除所有的缓存 for (const key in this.cache) { pruneCacheEntry(this.cache, key, this.keys); } }, mounted() { this.cacheVNode(); // 实时监听黑白名单的变动 this.$watch(\\\"include\\\", (val) => { pruneCache(this, (name) => matches(val, name)); }); this.$watch(\\\"exclude\\\", (val) => { pruneCache(this, (name) => !matches(val, name)); }); }, updated() { this.cacheVNode(); }, render() { // this 当前 keep-alive 组件 const slot = this.$slots.default; const vnode = getFirstComponentChild(slot); const componentOptions = vnode && vnode.componentOptions; if (componentOptions) { // check pattern // 获取组件 const name = getComponentName(componentOptions); const { include, exclude } = this; if ( // not included (include && (!name || !matches(include, name))) || // excluded (exclude && name && matches(exclude, name)) ) { return vnode; } const { cache, keys } = this; // 定义组件的缓存key const key = vnode.key == null ? // same constructor may get registered as different local components // so cid alone is not enough (#3269) componentOptions.Ctor.cid + (componentOptions.tag ? `::${componentOptions.tag}` : \\\"\\\") : vnode.key; if (cache[key]) { vnode.componentInstance = cache[key].componentInstance; // make current key freshest remove(keys, key); keys.push(key); } else { // delay setting the cache until update // 调用update的时候会缓存该组件 this.vnodeToCache = vnode; this.keyToCache = key; } // 渲染和执行被包裹组件的钩子函数需要用到 // @ts-expect-error can vnode.data can be undefined vnode.data.keepAlive = true; } return vnode || (slot && slot[0]); }, };\"]},\"574\":{\"h\":\"使用渲染\",\"t\":[\"首次渲染只会在keep-alive建立缓存，其他和普通缓存没有区别\",\"vnode.elm缓存创建的DOM节点\",\"patch => createElm => 如果是组件 createComponent() => reactivateComponent() => 将vnode.elm插入父节点\"]},\"575\":{\"h\":\"createComponent\",\"t\":[\"createComponent\",\"function createComponent(vnode, insertedVnodeQueue, parentElm, refElm) { let i = vnode.data; if (isDef(i)) { // 首次加载 vnode.componentInstance 为undefined const isReactivated = isDef(vnode.componentInstance) && i.keepAlive; if (isDef((i = i.hook)) && isDef((i = i.init))) { // 执行初始化 init i(vnode, false /* hydrating */); } // after calling the init hook, if the vnode is a child component // it should've created a child instance and mounted it. the child // component also has set the placeholder vnode's elm. // in that case we can just return the element and be done. if (isDef(vnode.componentInstance)) { // 将 vnode.elm 赋值为真实DOM initComponent(vnode, insertedVnodeQueue); // 将组件真实DOM插入到父元素 insert(parentElm, vnode.elm, refElm); // 如果被keep alive 包裹 且不是首次加载 if (isTrue(isReactivated)) { reactivateComponent(vnode, insertedVnodeQueue, parentElm, refElm); } return true; } } }\",\" function reactivateComponent(vnode, insertedVnodeQueue, parentElm, refElm) { let i // hack for #4339: a reactivated component with inner transition // does not trigger because the inner node's created hooks are not called // again. It's not ideal to involve module-specific logic in here but // there doesn't seem to be a better way to do it. let innerNode = vnode while (innerNode.componentInstance) { innerNode = innerNode.componentInstance._vnode if (isDef((i = innerNode.data)) && isDef((i = i.transition))) { for (i = 0; i < cbs.activate.length; ++i) { cbs.activate[i](emptyNode, innerNode) } insertedVnodeQueue.push(innerNode) break } } // unlike a newly created component, // a reactivated keep-alive component doesn't insert itself // 将缓存的DOM插入父节点 insert(parentElm, vnode.elm, refElm) }\"]},\"576\":{\"c\":[\"Vue\"]},\"577\":{\"h\":\"Vue2.x 生命周期\"},\"578\":{\"h\":\"父子生命周期\",\"t\":[\"父beforeCreate->父created->父beforeMount->子beforeCreate->子created->子beforeMount->子mounted->父mounte\",\"父beforeUpdate->子beforeUpdate->子updated->父updated\",\"父beforeDestroy->子beforeDestroy->子destroyed->父destroyed\"]},\"579\":{\"c\":[\"Vue\"]},\"580\":{\"h\":\"Vue2.x框架原理分析-组件挂载\",\"t\":[\"flowchart TB vue._init --> vm.$mount vm.$mount --> mountComponent mountComponent --> 执行渲染Watcher 渲染Watcher --> 执行updateComponent 执行updateComponent --> 执行_render获取虚拟VNode 执行_render获取虚拟VNode --> 内部执行_createElement 内部执行_createElement --> 没有tag,创建空VNode 内部执行_createElement --> tag是真实节点,创建VNode 内部执行_createElement --> 内置节点,创建普通VNode 内部执行_createElement --> tag是Component类型 tag是Component类型 --> 执行createComponent方法 执行createComponent方法 --> 使用extend继承Vue 执行createComponent方法 --> 合并Vue的默认options 执行createComponent方法 --> 是函数组件,createFunctionalComponent处理 执行createComponent方法 --> 是Vue组件,安装组件构造函数,返回Vnode\"]},\"581\":{\"h\":\"mount\",\"t\":[\"// vue._init() if (vm.$options.el) { vm.$mount(vm.$options.el); }\",\"Vue.prototype.$mount = function ( el?: string | Element, hydrating?: boolean ): Component { el = el && inBrowser ? query(el) : undefined; return mountComponent(this, el, hydrating); };\",\"this\"]},\"582\":{\"h\":\"mountComponent\",\"t\":[\"core/instance/lifecycle\",\"export function mountComponent( vm: Component, el: Element | null | undefined, hydrating?: boolean ): Component { vm.$el = el; if (!vm.$options.render) { // 判断实例上是否存在渲染函数 vm.$options.render = createEmptyVNode; } callHook(vm, \\\"beforeMount\\\"); let updateComponent; updateComponent = () => { /* vm._render()得到一份最新的VNode节点树， 然后执行vm._update()方法对最新的VNode节点树与上一次渲染的旧VNode节点树进行对比并更新DOM节点(即patch操作)， 完成一次渲染。 */ vm._update(vm._render(), hydrating); }; const watcherOptions: WatcherOptions = { before() { if (vm._isMounted && !vm._isDestroyed) { callHook(vm, \\\"beforeUpdate\\\"); } }, }; // we set this to vm._watcher inside the watcher's constructor // since the watcher's initial patch may call $forceUpdate (e.g. inside child // component's mounted hook), which relies on vm._watcher being already defined new Watcher( vm, updateComponent, noop, watcherOptions, true /* isRenderWatcher */ ); hydrating = false; // flush buffer for flush: \\\"pre\\\" watchers queued in setup() const preWatchers = vm._preWatchers; if (preWatchers) { for (let i = 0; i < preWatchers.length; i++) { preWatchers[i].run(); } } // manually mounted instance, call mounted on self // mounted is called for render-created child components in its inserted hook if (vm.$vnode == null) { vm._isMounted = true; callHook(vm, \\\"mounted\\\"); } return vm; }\"]},\"583\":{\"h\":\"render\",\"t\":[\"_render\",\" Vue.prototype._render = function (): VNode { const vm: Component = this const { render, _parentVnode } = vm.$options if (_parentVnode) { vm.$scopedSlots = normalizeScopedSlots( vm.$parent!, _parentVnode.data!.scopedSlots, vm.$slots, vm.$scopedSlots ) if (vm._slotsProxy) { syncSetupSlots(vm._slotsProxy, vm.$scopedSlots) } } // set parent vnode. this allows render functions to have access // to the data on the placeholder node. vm.$vnode = _parentVnode! // render self let vnode try { // There's no need to maintain a stack because all render fns are called // separately from one another. Nested component's render fns are called // when parent component is patched. setCurrentInstance(vm) currentRenderingInstance = vm // vm._renderProxy = vm vnode = render.call(vm._renderProxy, vm.$createElement) } catch (e: any) { handleError(e, vm, `render`) // return error render result, // or previous vnode to prevent render error causing blank component /* istanbul ignore else */ vnode = vm._vnode } finally { currentRenderingInstance = null setCurrentInstance() } // if the returned array contains only a single node, allow it if (isArray(vnode) && vnode.length === 1) { vnode = vnode[0] } // return empty vnode in case the render function errored out if (!(vnode instanceof VNode)) { vnode = createEmptyVNode() } // set parent vnode.parent = _parentVnode return vnode }\"]},\"584\":{\"h\":\"createElement\",\"t\":[\"vnode = render.call(vm._renderProxy, vm.$createElement); vm.$createElement = (a, b, c, d) => createElement(vm, a, b, c, d, true); // => vm._renderProxy.render(vm.$createElement) _renderProxy = vm // => vm.render(vm.$createElement) // App.vue render: h => h(App) = h =vm.$createElement\",\"render\",\"var render = function () { var _vm = this var _h = _vm.$createElement var _c = _vm._self._c || _h return _c( \\\"div\\\", { attrs: { id: \\\"app\\\" } }, [ _c(\\\"img\\\", { attrs: { alt: \\\"Vue logo\\\", src: __webpack_require__(/*! ./assets/logo.png */ \\\"./src/assets/logo.png\\\") }, }), _vm._v(\\\" \\\"), _c(\\\"HelloWorldVue\\\", { attrs: { msg: \\\"Welcome to Your Vue.js App\\\" } }), _vm._v(\\\" \\\"), _c(\\\"input\\\", { directives: [{ name: \\\"focus\\\", rawName: \\\"v-focus\\\" }] }), _vm._v(\\\" \\\"), _c(\\\"router-link\\\", { attrs: { to: \\\"/home\\\" } }, [_vm._v(\\\"Home\\\")]), _vm._v(\\\" \\\"), _c(\\\"router-link\\\", { attrs: { to: \\\"/about\\\" } }, [_vm._v(\\\"About\\\")]), _vm._v(\\\" \\\"), _c(\\\"KeepAlive\\\", [_c(\\\"router-view\\\")], 1), _vm._v(\\\" \\\"), _c( \\\"button\\\", { on: { click: function ($event) { _vm.num = _vm.num + 1 }, }, }, [_vm._v(_vm._s(_vm.num))] ), ], 1 ) }\",\"export function createElement( context: Component, //context 表示 VNode 的上下文环境 tag: any, //tag 表示标签，它可以是一个字符串，也可以是一个 Component data: any,//data 表示 VNode 的数据，它是一个 VNodeData 类型 children: any,//children 表示当前 VNode 的子节点，它是任意类型的 normalizationType: any, //normalizationType 表示子节点规范的类型，类型不同规范的方法也就不一样 alwaysNormalize: boolean ): VNode | Array<VNode> { if (isArray(data) || isPrimitive(data)) { normalizationType = children; children = data; data = undefined; } if (isTrue(alwaysNormalize)) { normalizationType = ALWAYS_NORMALIZE; } return _createElement(context, tag, data, children, normalizationType); } export function _createElement( context: Component, tag?: string | Component | Function | Object, data?: VNodeData, children?: any, normalizationType?: number ): VNode | Array<VNode> { // object syntax in v-bind if (isDef(data) && isDef(data.is)) { tag = data.is } if (!tag) { // in case of component :is set to falsy value return createEmptyVNode() } // support single function children as default scoped slot if (isArray(children) && isFunction(children[0])) { data = data || {} data.scopedSlots = { default: children[0] } children.length = 0 } if (normalizationType === ALWAYS_NORMALIZE) { // render 函数是用户手写的 children = normalizeChildren(children) } else if (normalizationType === SIMPLE_NORMALIZE) { // render 函数是编译生成的 children = simpleNormalizeChildren(children) } let vnode, ns if (typeof tag === 'string') { let Ctor ns = (context.$vnode && context.$vnode.ns) || config.getTagNamespace(tag) if (config.isReservedTag(tag)) { // platform built-in elements vnode = new VNode( config.parsePlatformTagName(tag), data, children, undefined, undefined, context ) } else if ( (!data || !data.pre) && isDef((Ctor = resolveAsset(context.$options, 'components', tag))) ) { // tag 一个 Component 类型，则直接调用 createComponent 创建一个组件类型的 VNode 节点 // component vnode = createComponent(Ctor, data, context, children, tag) } else { // unknown or unlisted namespaced elements // check at runtime because it may get assigned a namespace when its // parent normalizes children // 如果是内置的一些节点，则直接创建一个普通 VNode vnode = new VNode(tag, data, children, undefined, undefined, context) } } else { // direct component options / constructor vnode = createComponent(tag as any, data, context, children) } if (isArray(vnode)) { return vnode } else if (isDef(vnode)) { if (isDef(ns)) applyNS(vnode, ns) if (isDef(data)) registerDeepBindings(data) return vnode } else { return createEmptyVNode() } }\"]},\"585\":{\"h\":\"createComponent\",\"t\":[\"节点是组件\",\"export function createComponent( Ctor: typeof Component | Function | ComponentOptions | void, data: VNodeData | undefined, context: Component, children?: Array<VNode>, tag?: string ): VNode | Array<VNode> | void { if (isUndef(Ctor)) { return } // Vue.options._base = Vue const baseCtor = context.$options._base // plain options object: turn it into a constructor if (isObject(Ctor)) { Ctor = baseCtor.extend(Ctor as typeof Component) } if (typeof Ctor !== 'function') { if (__DEV__) { warn(`Invalid Component definition: ${String(Ctor)}`, context) } return } let asyncFactory // @ts-expect-error if (isUndef(Ctor.cid)) { asyncFactory = Ctor Ctor = resolveAsyncComponent(asyncFactory, baseCtor) if (Ctor === undefined) { return createAsyncPlaceholder(asyncFactory, data, context, children, tag) } } data = data || {} // 合并 options, 就是把自定义的 options 和 默认的 `options` 合并 resolveConstructorOptions(Ctor as typeof Component) if (isDef(data.model)) { // @ts-expect-error transformModel(Ctor.options, data) } // extract props // @ts-expect-error const propsData = extractPropsFromVNodeData(data, Ctor, tag) // functional component // @ts-expect-error if (isTrue(Ctor.options.functional)) { return createFunctionalComponent( Ctor as typeof Component, propsData, data, context, children ) } // extract listeners, since these needs to be treated as // child component listeners instead of DOM listeners const listeners = data.on // replace with listeners with .native modifier // so it gets processed during parent component patch. data.on = data.nativeOn // @ts-expect-error if (isTrue(Ctor.options.abstract)) { // abstract components do not keep anything // other than props & listeners & slot // work around flow const slot = data.slot data = {} if (slot) { data.slot = slot } } // 安装组件钩子函数 // install component management hooks onto the placeholder node installComponentHooks(data) // return a placeholder vnode // @ts-expect-error const name = Ctor.options.name || tag const vnode = new VNode( // @ts-expect-error `vue-component-${Ctor.cid}${name ? `-${name}` : ''}`, data, undefined, undefined, undefined, context, // @ts-expect-error { Ctor, propsData, listeners, tag, children }, asyncFactory ) return vnode }\"]},\"586\":{\"h\":\"_update\",\"t\":[\"const vnode = vm._render(); vm._update(vnode, hydrating);\",\"vnode\",\"/* mountComponent(vm,el) vm.$el = el */ Vue.prototype._update = function (vnode: VNode, hydrating?: boolean) { const vm: Component = this; const prevEl = vm.$el; const prevVnode = vm._vnode; const restoreActiveInstance = setActiveInstance(vm); vm._vnode = vnode; // Vue.prototype.__patch__ is injected in entry points // based on the rendering backend used. if (!prevVnode) { // initial render vm.$el = vm.__patch__(vm.$el, vnode, hydrating, false /* removeOnly */); } else { // updates vm.$el = vm.__patch__(prevVnode, vnode); } restoreActiveInstance(); // update __vue__ reference if (prevEl) { prevEl.__vue__ = null; } if (vm.$el) { vm.$el.__vue__ = vm; } // if parent is an HOC, update its $el as well if (vm.$vnode && vm.$parent && vm.$vnode === vm.$parent._vnode) { vm.$parent.$el = vm.$el; } // updated hook is called by the scheduler to ensure that children are // updated in a parent's updated hook. };\"]},\"587\":{\"h\":\"createPathFunction\",\"t\":[\"DOM-Diff 过程叫做 patch 过程。patch,意为“补丁”，即指对旧的 VNode 修补，打补丁从而得到新的 VNode\",\"创建节点：新的 VNode 中有而旧的 oldVNode 中没有，就在旧的 oldVNode 中创建。\",\"删除节点：新的 VNode 中没有而旧的 oldVNode 中有，就从旧的 oldVNode 中删除。\",\"更新节点：新的 VNode 和旧的 oldVNode 中都有，就以新的 VNode 为准，更新旧的 oldVNode。\",\"Vue.prototype.__patch__ = inBrowser ? patch : noop; export const patch: Function = createPatchFunction({ nodeOps, modules }); export function createPathFunction(backend) { const { tag, data, children } = vnode; return function patch(oldVnode, vnode, hydrating, removeOnly) { // .... }; }\"]},\"588\":{\"h\":\"path\",\"t\":[\"export function isUndef(v: any): v is undefined | null { return v === undefined || v === null } export function isDef<T>(v: T): v is NonNullable<T> { return v !== undefined && v !== null } export function isTrue(v: any): boolean { return v === true } export function isFalse(v: any): boolean { return v === false } return function patch(oldVnode, vnode, hydrating, removeOnly) { // 如果新节点不存在，老节点存在，则调用 destroy，销毁老节点 if (isUndef(vnode)) { if (isDef(oldVnode)) invokeDestroyHook(oldVnode); return; } let isInitialPatch = false; const insertedVnodeQueue: any[] = []; // 新的 VNode 存在，老的 VNode 不存在，这种情况会在一个组件初次渲染的时候出现 if (isUndef(oldVnode)) { // empty mount (likely as component), create new root element isInitialPatch = true; createElm(vnode, insertedVnodeQueue); } else { // 判断 oldVnode 是否为真实元素 const isRealElement = isDef(oldVnode.nodeType); if (!isRealElement && sameVnode(oldVnode, vnode)) { // 不是真实元素，但是老节点和新节点是同一个节点，则是更新阶段，执行 patch 更新节点 patchVnode(oldVnode, vnode, insertedVnodeQueue, null, null, removeOnly); } else { // 是真实元素，则表示初次渲染 if (isRealElement) { // mounting to a real element // check if this is server-rendered content and if we can perform // a successful hydration. if (oldVnode.nodeType === 1 && oldVnode.hasAttribute(SSR_ATTR)) { oldVnode.removeAttribute(SSR_ATTR); hydrating = true; } if (isTrue(hydrating)) { if (hydrate(oldVnode, vnode, insertedVnodeQueue)) { invokeInsertHook(vnode, insertedVnodeQueue, true); return oldVnode; } else if (__DEV__) { warn( \\\"The client-side rendered virtual DOM tree is not matching \\\" + \\\"server-rendered content. This is likely caused by incorrect \\\" + \\\"HTML markup, for example nesting block-level elements inside \\\" + \\\"<p>, or missing <tbody>. Bailing hydration and performing \\\" + \\\"full client-side render.\\\" ); } } // 走到这儿说明不是服务端渲染，或者 hydration 失败，则根据 oldVnode 创建一个 vnode 节点 // either not server-rendered, or hydration failed. // create an empty node and replace it oldVnode = emptyNodeAt(oldVnode); } // 拿到老节点的真实元素 const oldElm = oldVnode.elm; // 获取老节点的父元素，即 body const parentElm = nodeOps.parentNode(oldElm); // 基于新 vnode 创建整棵 DOM 树并插入到 body 元素下 createElm( vnode, insertedVnodeQueue, // extremely rare edge case: do not insert if old element is in a // leaving transition. Only happens when combining transition + // keep-alive + HOCs. (#4590) oldElm._leaveCb ? null : parentElm, nodeOps.nextSibling(oldElm) ); // 递归更新父占位符节点元素 if (isDef(vnode.parent)) { let ancestor = vnode.parent; const patchable = isPatchable(vnode); while (ancestor) { for (let i = 0; i < cbs.destroy.length; ++i) { cbs.destroy[i](ancestor); } ancestor.elm = vnode.elm; if (patchable) { for (let i = 0; i < cbs.create.length; ++i) { cbs.create[i](emptyNode, ancestor); } // #6513 // invoke insert hooks that may have been merged by create hooks. // e.g. for directives that uses the \\\"inserted\\\" hook. const insert = ancestor.data.hook.insert; if (insert.merged) { // start at index 1 to avoid re-invoking component mounted hook for (let i = 1; i < insert.fns.length; i++) { insert.fns[i](); } } } else { registerRef(ancestor); } ancestor = ancestor.parent; } } // destroy old node if (isDef(parentElm)) { removeVnodes([oldVnode], 0, 0); } else if (isDef(oldVnode.tag)) { invokeDestroyHook(oldVnode); } } } invokeInsertHook(vnode, insertedVnodeQueue, isInitialPatch); return vnode.elm; };\"]},\"589\":{\"h\":\"sameVnode\",\"t\":[\"key 必须相同（都是 undefined 则也是相同的），\",\"DOM 元素的标签必须相同。比如都是 div\",\"如果满足以上条件，那么就认为是相同的 vnode，因此就可以进行 patchVnode 操作。那么如果不是呢？就认为是完全新的一个 vnode，因此会进入下面的 createElm。让我们梳理下逻辑：当进入 patch 之后有两种分支可以走：\",\"如果是第一次 patch（组件第一次挂载的时候），或者发现元素的标签不相同了（比如 div 变 p 了），那么直接 createElm 创建新的 DOM 元素\",\"否则，就是对已存在的 DOM 元素进行更新，那么通过 patchVnode 进行 diff，有条件的更新以提升性能\",\"function sameVnode(a, b) { return ( // key 必须相同，需要注意的是 undefined === undefined => true a.key === b.key && a.asyncFactory === b.asyncFactory && // 标签相同 ((a.tag === b.tag && // 都是注释节点 a.isComment === b.isComment && // 都有 data 属性 isDef(a.data) === isDef(b.data) && // input 标签的情况 sameInputType(a, b)) || (isTrue(a.isAsyncPlaceholder) && isUndef(b.asyncFactory.error))) ); }\"]},\"590\":{\"h\":\"createElm\",\"t\":[\"基于 vnode 创建整棵 DOM 树，并插入到父节点上\",\"VNode 类可以描述 6 种类型的节点，而实际上只有 3 种类型的节点能够被创建并插入到 DOM 中，它们分别是：元素节点、文本节点、注释节点。\",\"function createElm( vnode, insertedVnodeQueue, parentElm?: any, refElm?: any, nested?: any, ownerArray?: any, index?: any ) { if (isDef(vnode.elm) && isDef(ownerArray)) { // This vnode was used in a previous render! // now it's used as a new node, overwriting its elm would cause // potential patch errors down the road when it's used as an insertion // reference node. Instead, we clone the node on-demand before creating // associated DOM element for it. vnode = ownerArray[index] = cloneVNode(vnode); } vnode.isRootInsert = !nested; // for transition enter check /** * 重点 * 1、如果 vnode 是一个组件，则执行 init 钩子，创建组件实例并挂载， * 然后为组件执行各个模块的 create 钩子 * 如果组件被 keep-alive 包裹，则激活组件 * 2、如果是一个普通元素，则什么也不错 */ if (createComponent(vnode, insertedVnodeQueue, parentElm, refElm)) { return; } const data = vnode.data; const children = vnode.children; const tag = vnode.tag; // 创建元素节点 // 有tag属性即认为是元素节点，则调用createElement方法创建元素节点 if (isDef(tag)) { vnode.elm = vnode.ns ? nodeOps.createElementNS(vnode.ns, tag) : nodeOps.createElement(tag, vnode); setScope(vnode); // 循环遍历 children调用 createElm createChildren(vnode, children, insertedVnodeQueue); if (isDef(data)) { invokeCreateHooks(vnode, insertedVnodeQueue); } insert(parentElm, vnode.elm, refElm); // 创建注释节点 // isComment属性是否为true } else if (isTrue(vnode.isComment)) { vnode.elm = nodeOps.createComment(vnode.text); // 将组件的 DOM 节点插入到父节点内 insert(parentElm, vnode.elm, refElm); // 创建文本节点 } else { vnode.elm = nodeOps.createTextNode(vnode.text); insert(parentElm, vnode.elm, refElm); } }\"]},\"591\":{\"h\":\"createComponent()\",\"t\":[\"/** * 如果 vnode 是一个组件，则执行 init 钩子，创建组件实例，并挂载 * 然后为组件执行各个模块的 create 方法 * @param {*} vnode 组件新的 vnode * @param {*} insertedVnodeQueue 数组 * @param {*} parentElm oldVnode 的父节点 * @param {*} refElm oldVnode 的下一个兄弟节点 * @returns 如果 vnode 是一个组件并且组件创建成功，则返回 true，否则返回 undefined */ function createComponent(vnode, insertedVnodeQueue, parentElm, refElm) { let i = vnode.data; if (isDef(i)) { // 验证组件实例是否已经存在 && 被 keep-alive 包裹 const isReactivated = isDef(vnode.componentInstance) && i.keepAlive; // 如果是组件没有被 keep-alive 包裹或者首次渲染，则初始化组件，并进入挂载阶段 if (isDef((i = i.hook)) && isDef((i = i.init))) { i(vnode, false /* hydrating */); } // after calling the init hook, if the vnode is a child component // it should've created a child instance and mounted it. the child // component also has set the placeholder vnode's elm. // in that case we can just return the element and be done. if (isDef(vnode.componentInstance)) { // 如果 vnode 是一个子组件，则调用 init 钩子之后会创建一个组件实例，并挂载 // 这时候就可以给组件执行各个模块的的 create 钩子了 initComponent(vnode, insertedVnodeQueue); insert(parentElm, vnode.elm, refElm); if (isTrue(isReactivated)) { // 组件被 keep-alive 包裹的情况，激活组件 reactivateComponent(vnode, insertedVnodeQueue, parentElm, refElm); } return true; } } }\"]},\"592\":{\"h\":\"initComponent\",\"t\":[\"function initComponent(vnode, insertedVnodeQueue) { if (isDef(vnode.data.pendingInsert)) { insertedVnodeQueue.push.apply(insertedVnodeQueue, vnode.data.pendingInsert); vnode.data.pendingInsert = null; } vnode.elm = vnode.componentInstance.$el; if (isPatchable(vnode)) { invokeCreateHooks(vnode, insertedVnodeQueue); setScope(vnode); } else { // empty component root. // skip all element-related modules except for ref (#3455) registerRef(vnode); // make sure to invoke the insert hook insertedVnodeQueue.push(vnode); } }\"]},\"593\":{\"h\":\"insert\",\"t\":[\"向父节点插入节点\",\"function insert(parent, elm, ref) { if (isDef(parent)) { if (isDef(ref)) { if (nodeOps.parentNode(ref) === parent) { nodeOps.insertBefore(parent, elm, ref); } } else { nodeOps.appendChild(parent, elm); } } }\"]},\"594\":{\"h\":\"removeNode\",\"t\":[\"function removeNode(el) { const parent = nodeOps.parentNode(el); // 获取父节点 // element may have already been removed due to v-html / v-text if (isDef(parent)) { nodeOps.removeChild(parent, el); // 调用父节点的removeChild方法 } }\"]},\"595\":{\"h\":\"invokeCreateHooks\",\"t\":[\"createPatchFunction\",\"const hooks = [\\\"create\\\", \\\"activate\\\", \\\"update\\\", \\\"remove\\\", \\\"destroy\\\"]; export function createPatchFunction(backend) { let i, j; const cbs: any = {}; const { modules, nodeOps } = backend; for (i = 0; i < hooks.length; ++i) { cbs[hooks[i]] = []; for (j = 0; j < modules.length; ++j) { if (isDef(modules[j][hooks[i]])) { cbs[hooks[i]].push(modules[j][hooks[i]]); } } } //.... }\",\"function invokeCreateHooks(vnode, insertedVnodeQueue) { for (let i = 0; i < cbs.create.length; ++i) { cbs.create[i](emptyNode, vnode); } i = vnode.data.hook; // Reuse variable if (isDef(i)) { if (isDef(i.create)) i.create(emptyNode, vnode); if (isDef(i.insert)) insertedVnodeQueue.push(vnode); } }\"]},\"596\":{\"h\":\"patchVnode\",\"t\":[\"更新节点\",\"function patchVnode( oldVnode, vnode, insertedVnodeQueue, ownerArray, index, removeOnly?: any ) { // 老节点和新节点相同，直接返回 if (oldVnode === vnode) { return; } if (isDef(vnode.elm) && isDef(ownerArray)) { // clone reused vnode vnode = ownerArray[index] = cloneVNode(vnode); } const elm = (vnode.elm = oldVnode.elm); if (isTrue(oldVnode.isAsyncPlaceholder)) { if (isDef(vnode.asyncFactory.resolved)) { hydrate(oldVnode.elm, vnode, insertedVnodeQueue); } else { vnode.isAsyncPlaceholder = true; } return; } // reuse element for static trees. // note we only do this if the vnode is cloned - // if the new node is not cloned it means the render functions have been // reset by the hot-reload-api and we need to do a proper re-render. // 跳过静态节点 if ( isTrue(vnode.isStatic) && isTrue(oldVnode.isStatic) && vnode.key === oldVnode.key && (isTrue(vnode.isCloned) || isTrue(vnode.isOnce)) ) { // 新旧节点都是静态的而且两个节点的 key 一样，并且新节点被 clone 了 或者 新节点有 v-once指令，则重用这部分节点 vnode.componentInstance = oldVnode.componentInstance; return; } // 执行组件的 prepatch 钩子 let i; const data = vnode.data; if (isDef(data) && isDef((i = data.hook)) && isDef((i = i.prepatch))) { i(oldVnode, vnode); } const oldCh = oldVnode.children; const ch = vnode.children; // 全量更新新节点的属性 /* - 全量的属性更新 - 如果新老节点都有孩子，则递归执行 diff - 如果新节点有孩子，老节点没孩子，则新增新节点的这些孩子节点 - 如果老节点有孩子，新节点没孩子，则删除老节点的这些孩子 - 更新文本节点 */ if (isDef(data) && isPatchable(vnode)) { // 执行新节点所有的属性更新 for (i = 0; i < cbs.update.length; ++i) cbs.update[i](oldVnode, vnode); if (isDef((i = data.hook)) && isDef((i = i.update))) i(oldVnode, vnode); } if (isUndef(vnode.text)) { // 新节点不是文本节点 if (isDef(oldCh) && isDef(ch)) { if (oldCh !== ch) updateChildren(elm, oldCh, ch, insertedVnodeQueue, removeOnly); } else if (isDef(ch)) { if (isDef(oldVnode.text)) nodeOps.setTextContent(elm, \\\"\\\"); addVnodes(elm, null, ch, 0, ch.length - 1, insertedVnodeQueue); } else if (isDef(oldCh)) { removeVnodes(oldCh, 0, oldCh.length - 1); } else if (isDef(oldVnode.text)) { // 老节点是文本节点，则将文本内容置空 nodeOps.setTextContent(elm, \\\"\\\"); } } else if (oldVnode.text !== vnode.text) { // 新节点是文本节点，则更新文本节点 nodeOps.setTextContent(elm, vnode.text); } if (isDef(data)) { if (isDef((i = data.hook)) && isDef((i = i.postpatch))) i(oldVnode, vnode); } }\"]},\"597\":{\"h\":\"updateChildren\",\"t\":[\"先把 newChildren 数组里的所有未处理子节点的第一个子节点和 oldChildren 数组里所有未处理子节点的第一个子节点做比对，如果相同，那就直接进入更新节点的操作；\",\"如果不同，再把 newChildren 数组里所有未处理子节点的最后一个子节点和 oldChildren 数组里所有未处理子节点的最后一个子节点做比对，如果相同，那就直接进入更新节点的操作；\",\"如果不同，再把 newChildren 数组里所有未处理子节点的最后一个子节点和 oldChildren 数组里所有未处理子节点的第一个子节点做比对，如果相同，那就直接进入更新节点的操作，更新完后再将 oldChildren 数组里的该节点移动到与 newChildren 数组里节点相同的位置；\",\"如果不同，再把 newChildren 数组里所有未处理子节点的第一个子节点和 oldChildren 数组里所有未处理子节点的最后一个子节点做比对，如果相同，那就直接进入更新节点的操作，更新完后再将 oldChildren 数组里的该节点移动到与 newChildren 数组里节点相同的位置；\",\"如果上面的四种假设都不成立，则通过遍历找到新开始节点在老节点中的位置索引\",\"如果老节点先于新节点遍历结束，则剩余的新节点执行新增节点操作\",\"如果新节点先于老节点遍历结束，则剩余的老节点执行删除操作，移除这些老节点\",\"function updateChildren( parentElm, oldCh, newCh, insertedVnodeQueue, removeOnly ) { let oldStartIdx = 0; let newStartIdx = 0; let oldEndIdx = oldCh.length - 1; let oldStartVnode = oldCh[0]; let oldEndVnode = oldCh[oldEndIdx]; let newEndIdx = newCh.length - 1; let newStartVnode = newCh[0]; let newEndVnode = newCh[newEndIdx]; let oldKeyToIdx, idxInOld, vnodeToMove, refElm; // removeOnly is a special flag used only by <transition-group> // to ensure removed elements stay in correct relative positions // during leaving transitions const canMove = !removeOnly; // 遍历新老两组节点，只要有一组遍历完（开始索引超过结束索引）则跳出循环 while (oldStartIdx <= oldEndIdx && newStartIdx <= newEndIdx) { if (isUndef(oldStartVnode)) { oldStartVnode = oldCh[++oldStartIdx]; // Vnode has been moved left } else if (isUndef(oldEndVnode)) { oldEndVnode = oldCh[--oldEndIdx]; } else if (sameVnode(oldStartVnode, newStartVnode)) { patchVnode( oldStartVnode, newStartVnode, insertedVnodeQueue, newCh, newStartIdx ); oldStartVnode = oldCh[++oldStartIdx]; newStartVnode = newCh[++newStartIdx]; } else if (sameVnode(oldEndVnode, newEndVnode)) { patchVnode( oldEndVnode, newEndVnode, insertedVnodeQueue, newCh, newEndIdx ); oldEndVnode = oldCh[--oldEndIdx]; newEndVnode = newCh[--newEndIdx]; } else if (sameVnode(oldStartVnode, newEndVnode)) { // Vnode moved right patchVnode( oldStartVnode, newEndVnode, insertedVnodeQueue, newCh, newEndIdx ); canMove && nodeOps.insertBefore( parentElm, oldStartVnode.elm, nodeOps.nextSibling(oldEndVnode.elm) ); oldStartVnode = oldCh[++oldStartIdx]; newEndVnode = newCh[--newEndIdx]; } else if (sameVnode(oldEndVnode, newStartVnode)) { // Vnode moved left patchVnode( oldEndVnode, newStartVnode, insertedVnodeQueue, newCh, newStartIdx ); canMove && nodeOps.insertBefore(parentElm, oldEndVnode.elm, oldStartVnode.elm); oldEndVnode = oldCh[--oldEndIdx]; newStartVnode = newCh[++newStartIdx]; } else { if (isUndef(oldKeyToIdx)) // 找到老节点中每个节点 key 和 索引之间的关系映射 => oldKeyToIdx = { key1: idx1, ... } oldKeyToIdx = createKeyToOldIdx(oldCh, oldStartIdx, oldEndIdx); idxInOld = isDef(newStartVnode.key) ? oldKeyToIdx[newStartVnode.key] : findIdxInOld(newStartVnode, oldCh, oldStartIdx, oldEndIdx); if (isUndef(idxInOld)) { // New element createElm( newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm, false, newCh, newStartIdx ); } else { vnodeToMove = oldCh[idxInOld]; if (sameVnode(vnodeToMove, newStartVnode)) { patchVnode( vnodeToMove, newStartVnode, insertedVnodeQueue, newCh, newStartIdx ); oldCh[idxInOld] = undefined; canMove && nodeOps.insertBefore(parentElm, vnodeToMove.elm, oldStartVnode.elm); } else { // same key but different element. treat as new element createElm( newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm, false, newCh, newStartIdx ); } } newStartVnode = newCh[++newStartIdx]; } } // 老节点被遍历完了，新节点有剩余，则说明这部分剩余的节点是新增的节点，然后添加这些节点 if (oldStartIdx > oldEndIdx) { refElm = isUndef(newCh[newEndIdx + 1]) ? null : newCh[newEndIdx + 1].elm; addVnodes( parentElm, refElm, newCh, newStartIdx, newEndIdx, insertedVnodeQueue ); // 说明新节点被遍历完了，老节点有剩余，说明这部分的节点被删掉了，则移除这些节点 } else if (newStartIdx > newEndIdx) { removeVnodes(oldCh, oldStartIdx, oldEndIdx); } }\"]},\"598\":{\"c\":[\"Vue\"]},\"599\":{\"h\":\"Vue2.x框架原理分析-编译\"},\"600\":{\"h\":\"前言\",\"t\":[\"vue 基于源码构建的有两个版本，一个是 runtime only(一个只包含运行时的版本)，另一个是 runtime + compiler(一个同时包含编译器和运行时的完整版本)。而两个版本的区别仅在于后者包含了一个编译器。\"]},\"601\":{\"h\":\"完整版本\",\"t\":[\"完整版本\",\"new Vue({ template: \\\"<div></div>\\\", });\",\"源码中，是先定义只包含运行时版本的$mount方法，再定义完整版本的$mount 方法 plantforms/web/runtime-with-compiler\",\"const mount = Vue.prototype.$mount; Vue.prototype.$mount = function ( el?: string | Element, hydrating?: boolean ): Component { el = el && query(el); /* istanbul ignore if */ if (el === document.body || el === document.documentElement) { return this; } const options = this.$options; // resolve template/el and convert to render function if (!options.render) { let template = options.template; if (template) { if (typeof template === \\\"string\\\") { if (template.charAt(0) === \\\"#\\\") { template = idToTemplate(template); /* istanbul ignore if */ } } else if (template.nodeType) { template = template.innerHTML; } else { return this; } } else if (el) { // @ts-expect-error template = getOuterHTML(el); } if (template) { /* istanbul ignore if */ const { render, staticRenderFns } = compileToFunctions( template, { outputSourceRange: __DEV__, shouldDecodeNewlines, shouldDecodeNewlinesForHref, delimiters: options.delimiters, comments: options.comments, }, this ); options.render = render; options.staticRenderFns = staticRenderFns; } } return mount.call(this, el, hydrating); };\"]},\"602\":{\"h\":\"运行时\",\"t\":[\"只包含运行时版本\",\"import App from \\\"./App.vue\\\"; new Vue({ render(h) {}, });\",\"完整版和只包含运行时版之间的差异主要在于是否有模板编译阶段运行时\",\"Vue.prototype.$mount = function ( el?: string | Element, hydrating?: boolean ): Component { el = el && inBrowser ? query(el) : undefined; return mountComponent(this, el, hydrating); };\"]},\"603\":{\"h\":\"流程\",\"t\":[\"模板解析阶段：将一堆模板字符串用正则等方式解析成抽象语法树 AST；\",\"优化阶段：遍历 AST，找出其中的静态节点，并打上标记；\",\"代码生成阶段：将 AST 转换成渲染函数；\",\"template -> compileToFunctions() ->\",\"template\",\"src/platforms/web\",\"const mount = Vue.prototype.$mount; Vue.prototype.$mount = function ( el?: string | Element, hydrating?: boolean ): Component { el = el && query(el); /* istanbul ignore if */ if (el === document.body || el === document.documentElement) { return this; } const options = this.$options; // resolve template/el and convert to render function if (!options.render) { let template = options.template; // #id 或者是一个 DOM 元素 // 转成一个字符串模板 if (template) { if (typeof template === \\\"string\\\") { if (template.charAt(0) === \\\"#\\\") { template = idToTemplate(template); } } else if (template.nodeType) { template = template.innerHTML; } else { return this; } } else if (el) { // @ts-expect-error template = getOuterHTML(el); } if (template) { const { render, staticRenderFns } = compileToFunctions( template, { outputSourceRange: __DEV__, shouldDecodeNewlines, shouldDecodeNewlinesForHref, delimiters: options.delimiters, comments: options.comments, }, this ); options.render = render; options.staticRenderFns = staticRenderFns; } } return mount.call(this, el, hydrating); };\",\"处理各种不同写法的 template\",\"const idToTemplate = cached((id) => { const el = query(id); return el && el.innerHTML; }); function getOuterHTML(el: Element): string { if (el.outerHTML) { return el.outerHTML; } else { const container = document.createElement(\\\"div\\\"); container.appendChild(el.cloneNode(true)); return container.innerHTML; } }\",\"模板解析阶段——解析器——源码路径：src/compiler/parser/index.js;\",\"优化阶段——优化器——源码路径：src/compiler/optimizer.js;\",\"代码生成阶段——代码生成器——源码路径：src/compiler/codegen/index.js;\",\"const ast =parse(template.trim(), options):parse 会用正则等方式解析 template 模板中的指令、class、style 等数据，形成 AST。\",\"optimize(ast, options): optimize 的主要作用是标记静态节点，这是 Vue 在编译过程中的一处优化，挡在进行 patch 的过程中， DOM-Diff 算法会直接跳过静态节点，从而减少了比较的过程，优化了 patch 的性能。\",\"const code =generate(ast, options): 将 AST 转化成 render 函数字符串的过程，得到结果是 render 函数 的字符串以及 staticRenderFns 字符串。\",\"src/compiler createCompilerCreator\",\"//createCompiler 是 createCompilerCreator 的返回值 //createCompilerCreator 返回了一个 createCompiler 函数 //CompilerOptions 最终还是调用baseCompile const createCompiler = createCompilerCreator(function baseCompile( template: string, options: CompilerOptions ): CompiledResult { const ast = parse(template.trim(), options); if (options.optimize !== false) { optimize(ast, options); } const code = generate(ast, options); return { ast, render: code.render, staticRenderFns: code.staticRenderFns, }; }); export const { compile, compileToFunctions } = createCompiler(baseOptions);\",\"src/compiler/create-compiler\",\"export function createCompilerCreator(baseCompile: Function): Function { return function createCompiler(baseOptions: CompilerOptions) { function compile( template: string, options?: CompilerOptions ): CompiledResult { const finalOptions = Object.create(baseOptions) const errors: WarningMessage[] = [] const tips: WarningMessage[] = [] let warn = ( msg: WarningMessage, range: { start: number; end: number }, tip: string ) => { ;(tip ? tips : errors).push(msg) } if (options) { // merge custom modules if (options.modules) { finalOptions.modules = (baseOptions.modules || []).concat( options.modules ) } // merge custom directives if (options.directives) { finalOptions.directives = extend( Object.create(baseOptions.directives || null), options.directives ) } // copy other options for (const key in options) { if (key !== 'modules' && key !== 'directives') { finalOptions[key] = options[key as keyof CompilerOptions] } } } finalOptions.warn = warn const compiled = baseCompile(template.trim(), finalOptions) compiled.errors = errors compiled.tips = tips return compiled } return { compile, compileToFunctions: createCompileToFunctionFn(compile) } } }\",\"src/compiler createCompileToFunctionFn\",\"export function createCompileToFunctionFn(compile: Function): Function { const cache = Object.create(null); return function compileToFunctions( template: string, options?: CompilerOptions, vm?: Component ): CompiledFunctionResult { options = extend({}, options); const warn = options.warn || baseWarn; delete options.warn; // check cache const key = options.delimiters ? String(options.delimiters) + template : template; if (cache[key]) { return cache[key]; } // compile const compiled = compile(template, options); // turn code into functions const res: any = {}; const fnGenErrors: any[] = []; res.render = createFunction(compiled.render, fnGenErrors); res.staticRenderFns = compiled.staticRenderFns.map((code) => { return createFunction(code, fnGenErrors); }); return (cache[key] = res); }; }\"]},\"604\":{\"h\":\"parse\",\"t\":[\" type 为 1 表示是普通元素，为 2 表示是表达式，为 3 表示是纯文本\",\"const ast = parse(template.trim(), options);\",\"parse\",\"//将HTML模板字符串转化为AST export function parse(template: string, options: CompilerOptions): ASTElement { //... // 一些配置的处理 // 这个变量是比较重要的，通过这个栈暂存对 parseHTML 返回的结果 const stack: any[] = []; parseHTML(template, { warn, expectHTML: options.expectHTML, isUnaryTag: options.isUnaryTag, canBeLeftOpenTag: options.canBeLeftOpenTag, shouldDecodeNewlines: options.shouldDecodeNewlines, shouldDecodeNewlinesForHref: options.shouldDecodeNewlinesForHref, shouldKeepComment: options.comments, outputSourceRange: options.outputSourceRange, // 当解析到开始标签时，调用该函数 start(tag, attrs, unary, start, end) {}, // 当解析到结束标签时，调用该函数 end(tag, start, end) {}, // 当解析到文本时，调用该函数 chars(text: string, start?: number, end?: number) {}, // 当解析到注释时，调用该函数 comment(text: string, start, end) {}, }); return root; }\"]},\"605\":{\"h\":\"HTML 解析\",\"t\":[\"流程 parseHTMLparseStartTaghandleStartTagstart\"]},\"606\":{\"h\":\"parseHTML\",\"t\":[\"export function parseHTML(html, options: HTMLParserOptions) { const stack: any[] = []; // 维护AST节点层级的栈 const expectHTML = options.expectHTML; const isUnaryTag = options.isUnaryTag || no; //用来检测一个标签是否是可以省略闭合标签的非自闭合标签 const canBeLeftOpenTag = options.canBeLeftOpenTag || no; let index = 0; //解析游标，标识当前从何处开始解析模板字符串 let last, // 存储剩余还未解析的模板字符串 lastTag; // 存储着位于 stack 栈顶的元素 while (html) { last = html; // 确保即将 parse 的内容不是在纯文本标签里 (script,style,textarea) if (!lastTag || !isPlainTextElement(lastTag)) { let textEnd = html.indexOf(\\\"<\\\"); /** * 如果html字符串是以'<'开头,则有以下几种可能 * 开始标签:<div> * 结束标签:</div> * 注释:<!-- 我是注释 --> * 条件注释:<!-- [if !IE] --> <!-- [endif] --> * DOCTYPE:<!DOCTYPE html> * 需要一一去匹配尝试 */ if (textEnd === 0) { // Comment: // /^<!\\\\--/ if (comment.test(html)) { const commentEnd = html.indexOf(\\\"-->\\\"); if (commentEnd >= 0) { if (options.shouldKeepComment && options.comment) { options.comment( html.substring(4, commentEnd), index, index + commentEnd + 3 ); } advance(commentEnd + 3); continue; } } // /^<!\\\\[/ if (conditionalComment.test(html)) { const conditionalEnd = html.indexOf(\\\"]>\\\"); if (conditionalEnd >= 0) { advance(conditionalEnd + 2); continue; } } // Doctype: // /^<!DOCTYPE [^>]+>/i const doctypeMatch = html.match(doctype); if (doctypeMatch) { advance(doctypeMatch[0].length); continue; } // End tag: const endTagMatch = html.match(endTag); if (endTagMatch) { const curIndex = index; advance(endTagMatch[0].length); parseEndTag(endTagMatch[1], curIndex, index); continue; } // Start tag: const startTagMatch = parseStartTag(); if (startTagMatch) { handleStartTag(startTagMatch); if (shouldIgnoreFirstNewline(startTagMatch.tagName, html)) { advance(1); } continue; } } let text, rest, next; if (textEnd >= 0) { rest = html.slice(textEnd); while ( !endTag.test(rest) && !startTagOpen.test(rest) && !comment.test(rest) && !conditionalComment.test(rest) ) { // < in plain text, be forgiving and treat it as text next = rest.indexOf(\\\"<\\\", 1); if (next < 0) break; textEnd += next; rest = html.slice(textEnd); } text = html.substring(0, textEnd); } if (textEnd < 0) { text = html; } if (text) { advance(text.length); } if (options.chars && text) { options.chars(text, index - text.length, index); } } else { } //将整个字符串作为文本对待 if (html === last) { options.chars && options.chars(html); break; } } // Clean up any remaining tags parseEndTag(); function advance(n) { index += n; html = html.substring(n); } //第一件事是解析出开始标签名称；第二件事是解析出开始标签的属性 function parseStartTag() {} //标签处理 /* 处理前 [ [' v-if=\\\"isShow\\\"', 'v-if', '=', 'isShow', null, null], [' class=\\\"header\\\"', 'class', '=', 'header', null, null] ] 处理后 [ { name: 'v-if', value: 'isShow', start: 5, end: 18 }, { name: 'class', value: 'header', start: 19, end: 33 } ] */ function handleStartTag(match) {} //parse 结束标签 function parseEndTag(tagName?: any, start?: any, end?: any) {} }\"]},\"607\":{\"h\":\"\",\"t\":[\"const ncname = \\\"[a-zA-Z_][\\\\\\\\w\\\\\\\\-\\\\\\\\.]*\\\"; const qnameCapture = `((?:${ncname}\\\\\\\\:)?${ncname})`; const startTagOpen = new RegExp(`^<${qnameCapture}`); const startTagClose = /^\\\\s*(\\\\/?)>/; function parseStartTag() { const start = html.match(startTagOpen); // '<div></div>'.match(startTagOpen) => ['<div','div',index:0,input:'<div></div>'] if (start) { const match = { tagName: start[1], attrs: [], start: index, }; advance(start[0].length); let end, attr; /** * <div a=1 b=2 c=3></div> * 从<div之后到开始标签的结束符号'>'之前，一直匹配属性attrs * 所有属性匹配完之后，html字符串还剩下 * 自闭合标签剩下：'/>' * 非自闭合标签剩下：'></div>' */ /* const attribute = /^\\\\s*([^\\\\s\\\"'<>\\\\/=]+)(?:\\\\s*(=)\\\\s*(?:\\\"([^\\\"]*)\\\"+|'([^']*)'+|([^\\\\s\\\"'=<>`]+)))?/ let html = 'class=\\\"a\\\" id=\\\"b\\\"></div>' let attr = html.match(attribute) console.log(attr) [\\\"class=\\\"a\\\"\\\", \\\"class\\\", \\\"=\\\", \\\"a\\\", undefined, undefined, index: 0, input: \\\"class=\\\"a\\\" id=\\\"b\\\"></div>\\\", groups: undefined] */ while ( !(end = html.match(startTagClose)) && (attr = html.match(attribute)) ) { advance(attr[0].length); match.attrs.push(attr); } /** * 这里判断了该标签是否为自闭合标签 * 自闭合标签如:<input type='text' /> * 非自闭合标签如:<div></div> * const startTagClose = /^\\\\s*(\\\\/?)>/ * let end = html.match(startTagClose) * '></div>'.match(startTagClose) => [\\\">\\\", \\\"\\\", index: 0, input: \\\"></div>\\\", groups: undefined] * '/><div></div>'.match(startTagClose) => [\\\"/>\\\", \\\"/\\\", index: 0, input: \\\"/><div></div>\\\", groups: undefined] * 因此，我们可以通过end[1]是否是\\\"/\\\"来判断该标签是否是自闭合标签 */ if (end) { match.unarySlash = end[1]; advance(end[0].length); match.end = index; return match; } } }\"]},\"608\":{\"h\":\"handleStartTag\",\"t\":[\"function handleStartTag(match) { // 开始标签的标签名 const tagName = match.tagName; // 是否为自闭合标签的标志，自闭合为\\\"\\\",非自闭合为\\\"/\\\" const unarySlash = match.unarySlash; if (expectHTML) { if (lastTag === \\\"p\\\" && isNonPhrasingTag(tagName)) { parseEndTag(lastTag); } if (canBeLeftOpenTag(tagName) && lastTag === tagName) { parseEndTag(tagName); } } // 布尔值，标志是否为自闭合标签 const unary = isUnaryTag(tagName) || !!unarySlash; // match.attrs 数组的长度 const l = match.attrs.length; // 一个与match.attrs数组长度相等的数组 const attrs: ASTAttr[] = new Array(l); for (let i = 0; i < l; i++) { const args = match.attrs[i]; //const args = [\\\"class=\\\"a\\\"\\\", \\\"class\\\", \\\"=\\\", \\\"a\\\", undefined, undefined, index: 0, input: \\\"class=\\\"a\\\" id=\\\"b\\\"></div>\\\", groups: undefined] const value = args[3] || args[4] || args[5] || \\\"\\\"; const shouldDecodeNewlines = tagName === \\\"a\\\" && args[1] === \\\"href\\\" ? options.shouldDecodeNewlinesForHref : options.shouldDecodeNewlines; attrs[i] = { name: args[1], value: decodeAttr(value, shouldDecodeNewlines), }; } if (!unary) { stack.push({ tag: tagName, lowerCasedTag: tagName.toLowerCase(), attrs: attrs, start: match.start, end: match.end, }); lastTag = tagName; } if (options.start) { options.start(tagName, attrs, unary, match.start, match.end); } }\"]},\"609\":{\"h\":\"start\",\"t\":[\" start(tag, attrs, unary, start, end) { // check namespace. // inherit parent ns if there is one const ns = (currentParent && currentParent.ns) || platformGetTagNamespace(tag) // handle IE svg bug /* istanbul ignore if */ if (isIE && ns === 'svg') { attrs = guardIESVGBug(attrs) } let element: ASTElement = createASTElement(tag, attrs, currentParent) /* export function createASTElement (tag,attrs,parent) { return { type: 1, tag, attrsList: attrs, attrsMap: makeAttrsMap(attrs), parent, children: [] } } */ if (ns) { element.ns = ns } if (isForbiddenTag(element) && !isServerRendering()) { element.forbidden = true } // apply pre-transforms for (let i = 0; i < preTransforms.length; i++) { element = preTransforms[i](element, options) || element } if (!inVPre) { processPre(element) if (element.pre) { inVPre = true } } if (platformIsPreTag(element.tag)) { inPre = true } if (inVPre) { processRawAttrs(element) } else if (!element.processed) { // structural directives processFor(element) processIf(element) processOnce(element) } if (!root) { root = element if (__DEV__) { checkRootConstraints(root) } } if (!unary) { // 指定当前父元素 // end 出栈的时候 会重新指定 currentParent = element stack.push(element) } else { closeElement(element) } },\"]},\"610\":{\"h\":\"文本解析\",\"t\":[\" chars(text: string, start?: number, end?: number) { if (!currentParent) { return } // IE textarea placeholder bug /* istanbul ignore if */ if ( isIE && currentParent.tag === 'textarea' && currentParent.attrsMap.placeholder === text ) { return } //start push element 会将 currentParent => element const children = currentParent.children if (inPre || text.trim()) { text = isTextTag(currentParent) ? text : (decodeHTMLCached(text) as string) } else if (!children.length) { // remove the whitespace-only node right after an opening tag text = '' } else if (whitespaceOption) { if (whitespaceOption === 'condense') { // in condense mode, remove the whitespace node if it contains // line break, otherwise condense to a single space text = lineBreakRE.test(text) ? '' : ' ' } else { text = ' ' } } else { text = preserveWhitespace ? ' ' : '' } if (text) { if (!inPre && whitespaceOption === 'condense') { // condense consecutive whitespaces into single space text = text.replace(whitespaceRE, ' ') } let res let child: ASTNode | undefined if (!inVPre && text !== ' ' && (res = parseText(text, delimiters))) { child = { type: 2, expression: res.expression, tokens: res.tokens, text } } else if ( text !== ' ' || !children.length || children[children.length - 1].text !== ' ' ) { child = { type: 3, text } } if (child) { children.push(child) } } },\",\"//text = \\\"我叫{{name}}，我今年{{age}}岁了\\\" let res = parseText(text) res = { expression:\\\"我叫\\\"+_s(name)+\\\"，我今年\\\"+_s(age)+\\\"岁了\\\", tokens:[ \\\"我叫\\\", {'@binding': name }, \\\"，我今年\\\" {'@binding': age }, \\\"岁了\\\" ] }\"]},\"611\":{\"h\":\"parseText\",\"t\":[\"判断传入的文本是否包含变量\",\"构造 expression\",\"构造 tokens\",\"const defaultTagRE = /\\\\{\\\\{((?:.|\\\\n)+?)\\\\}\\\\}/g; const buildRegex = cached((delimiters) => { const open = delimiters[0].replace(regexEscapeRE, \\\"\\\\\\\\$&\\\"); const close = delimiters[1].replace(regexEscapeRE, \\\"\\\\\\\\$&\\\"); return new RegExp(open + \\\"((?:.|\\\\\\\\n)+?)\\\" + close, \\\"g\\\"); }); export function parseText(text, delimiters) { const tagRE = delimiters ? buildRegex(delimiters) : defaultTagRE; if (!tagRE.test(text)) { return; } const tokens = []; const rawTokens = []; /** * let lastIndex = tagRE.lastIndex = 0 * 上面这行代码等同于下面这两行代码: * tagRE.lastIndex = 0 * let lastIndex = tagRE.lastIndex */ let lastIndex = (tagRE.lastIndex = 0); let match, index, tokenValue; while ((match = tagRE.exec(text))) { index = match.index; // push text token if (index > lastIndex) { // 先把'{{'前面的文本放入tokens中 rawTokens.push((tokenValue = text.slice(lastIndex, index))); tokens.push(JSON.stringify(tokenValue)); } // tag token // 取出'{{ }}'中间的变量exp const exp = parseFilters(match[1].trim()); // 把变量exp改成_s(exp)形式也放入tokens中 tokens.push(`_s(${exp})`); rawTokens.push({ \\\"@binding\\\": exp }); // 设置lastIndex 以保证下一轮循环时，只从'}}'后面再开始匹配正则 lastIndex = index + match[0].length; } // 当剩下的text不再被正则匹配上时，表示所有变量已经处理完毕 // 此时如果lastIndex < text.length，表示在最后一个变量后面还有文本 // 最后将后面的文本再加入到tokens中 if (lastIndex < text.length) { rawTokens.push((tokenValue = text.slice(lastIndex))); tokens.push(JSON.stringify(tokenValue)); } // 最后把数组tokens中的所有元素用'+'拼接起来 return { expression: tokens.join(\\\"+\\\"), tokens: rawTokens, }; }\"]},\"612\":{\"h\":\"optimize\",\"t\":[\"在优化阶段将所有静态节点都打上标记，这样在 patch 过程中就可以跳过对比这些节点。\",\"在 AST 中找出所有静态节点并打上标记；\",\"在 AST 中找出所有静态根节点并打上标记；\",\"export function optimize( root: ASTElement | null | undefined, options: CompilerOptions ) { if (!root) return; isStaticKey = genStaticKeysCached(options.staticKeys || \\\"\\\"); isPlatformReservedTag = options.isReservedTag || no; // 标记静态节点 markStatic(root); // 标记静态根节点 markStaticRoots(root, false); }\"]},\"613\":{\"h\":\"markStatic\",\"t\":[\"从根节点开始，先标记根节点是否为静态节点，然后看根节点如果是元素节点，那么就去向下递归它的子节点，子节点如果还有子节点那就继续向下递归，直到标记完所有节点。\",\"function markStatic(node: ASTNode) { node.static = isStatic(node); if (node.type === 1) { // do not make component slot content static. this avoids // 1. components not able to mutate slot nodes // 2. static slot content fails for hot-reloading if ( !isPlatformReservedTag(node.tag) && node.tag !== \\\"slot\\\" && node.attrsMap[\\\"inline-template\\\"] == null ) { return; } for (let i = 0, l = node.children.length; i < l; i++) { const child = node.children[i]; markStatic(child); if (!child.static) { node.static = false; } } if (node.ifConditions) { for (let i = 1, l = node.ifConditions.length; i < l; i++) { const block = node.ifConditions[i].block; markStatic(block); if (!block.static) { node.static = false; } } } } }\",\"type 取值\",\"对应的 AST 节点类型\",\"1\",\"元素节点\",\"2\",\"包含变量的动态文本节点\",\"3\",\"不包含变量的纯文本节点\",\"如果节点使用了 v-pre 指令，那就断定它是静态节点；\",\"如果节点没有使用 v-pre 指令，那它要成为静态节点必须满足： \",\"不能使用动态绑定语法，即标签上不能有 v-、@、:开头的属性；\",\"不能使用 v-if、v-else、v-for 指令；\",\"不能是内置组件，即标签名不能是 slot 和 component；\",\"标签名必须是平台保留标签，即不能是组件；\",\"当前节点的父节点不能是带有 v-for 的 template 标签；\",\"节点的所有属性的 key 都必须是静态节点才有的 key，注：静态节点的 key 是有限的，它只能是 type,tag,attrsList,attrsMap,plain,parent,children,attrs 之一；\",\"function isStatic(node: ASTNode): boolean { if (node.type === 2) { // 包含变量的动态文本节点 return false; } if (node.type === 3) { // 不包含变量的纯文本节点 return true; } return !!( node.pre || (!node.hasBindings && // no dynamic bindings !node.if && !node.for && // not v-if or v-for or v-else !isBuiltInTag(node.tag) && // not a built-in isPlatformReservedTag(node.tag) && // not a component !isDirectChildOfTemplateFor(node) && Object.keys(node).every(isStaticKey)) ); }\"]},\"614\":{\"h\":\"markStaticRoots\",\"t\":[\"节点本身必须是静态节点；\",\"必须拥有子节点 children；\",\"子节点不能只是只有一个文本节点； 否则的话，对它的优化成本将大于优化后带来的收益。\",\"function markStaticRoots(node: ASTNode, isInFor: boolean) { if (node.type === 1) { if (node.static || node.once) { node.staticInFor = isInFor; } // For a node to qualify as a static root, it should have children that // are not just static text. Otherwise the cost of hoisting out will // outweigh the benefits and it's better off to just always render it fresh. if ( node.static && node.children.length && !(node.children.length === 1 && node.children[0].type === 3) ) { node.staticRoot = true; return; } else { node.staticRoot = false; } if (node.children) { for (let i = 0, l = node.children.length; i < l; i++) { markStaticRoots(node.children[i], isInFor || !!node.for); } } if (node.ifConditions) { for (let i = 1, l = node.ifConditions.length; i < l; i++) { markStaticRoots(node.ifConditions[i].block, isInFor); } } } }\"]},\"615\":{\"h\":\"generate\",\"t\":[\"AST => render template\",\"<template> <div id=\\\"app\\\"> <input v-focus /> </div> </template>\",\"ASTrender\",\"_c(\\\"div\\\", { attrs: { id: \\\"app\\\" } }, [ _c(\\\"input\\\", { directives: [{ name: \\\"focus\\\", rawName: \\\"v-focus\\\" }] }), ]);\",\"const code = generate(ast, options); return { render: code.render };\",\"export function generate( ast: ASTElement | void, options: CompilerOptions ): CodegenResult { const state = new CodegenState(options); const code = ast ? genSSRElement(ast, state) : '_c(\\\"div\\\")'; return { render: `with(this){return ${code}}`, staticRenderFns: state.staticRenderFns, }; }\",\"function genSSRElement(el: ASTElement, state: CodegenState): string { if (el.for && !el.forProcessed) { return genFor(el, state, genSSRElement); } else if (el.if && !el.ifProcessed) { return genIf(el, state, genSSRElement); } else if (el.tag === \\\"template\\\" && !el.slotTarget) { return el.ssrOptimizability === optimizability.FULL ? genChildrenAsStringNode(el, state) : genSSRChildren(el, state) || \\\"void 0\\\"; } switch (el.ssrOptimizability) { case optimizability.FULL: // stringify whole tree return genStringElement(el, state); case optimizability.SELF: // stringify self and check children return genStringElementWithChildren(el, state); case optimizability.CHILDREN: // generate self as VNode and stringify children return genNormalElement(el, state, true); case optimizability.PARTIAL: // generate self as VNode and check children return genNormalElement(el, state, false); default: // bail whole tree return genElement(el, state); } }\",\"genElement\",\"export function genElement(el: ASTElement, state: CodegenState): string { if (el.parent) { el.pre = el.pre || el.parent.pre; } if (el.staticRoot && !el.staticProcessed) { return genStatic(el, state); } else if (el.once && !el.onceProcessed) { return genOnce(el, state); } else if (el.for && !el.forProcessed) { return genFor(el, state); } else if (el.if && !el.ifProcessed) { return genIf(el, state); } else if (el.tag === \\\"template\\\" && !el.slotTarget && !state.pre) { return genChildren(el, state) || \\\"void 0\\\"; } else if (el.tag === \\\"slot\\\") { return genSlot(el, state); } else { // component or element let code; if (el.component) { code = genComponent(el.component, el, state); } else { let data; if (!el.plain || (el.pre && state.maybeComponent(el))) { data = genData(el, state); } let tag: string | undefined; // check if this is a component in <script setup> const bindings = state.options.bindings; if (bindings && bindings.__isScriptSetup !== false) { tag = checkBindingType(bindings, el.tag) || checkBindingType(bindings, camelize(el.tag)) || checkBindingType(bindings, capitalize(camelize(el.tag))); } if (!tag) tag = `'${el.tag}'`; const children = el.inlineTemplate ? null : genChildren(el, state, true); code = `_c(${tag}${ data ? `,${data}` : \\\"\\\" // data }${ children ? `,${children}` : \\\"\\\" // children })`; } // module transforms for (let i = 0; i < state.transforms.length; i++) { code = state.transforms[i](el, code); } return code; } }\"]},\"616\":{\"c\":[\"Vue\"]},\"617\":{\"h\":\"Vue2.x Scoped原理分析\",\"t\":[\".hello[data-v-469af010] { background-color: red; }\"]},\"618\":{\"h\":\"用法\"},\"619\":{\"h\":\"Scoped CSS\",\"t\":[\"当 <style> 标签有 scoped 属性时，它的 CSS 只作用于当前组件中的元素。这类似于 Shadow DOM 中的样式封装。它有一些注意事项，但不需要任何 polyfill。它通过使用 PostCSS 来实现以下转换：\",\"<style scoped> .example { color: red; } </style> <template> <div class=\\\"example\\\">hi</div> </template>\",\"转换结果：\",\"<style> .example[data-v-f3f3eg9] { color: red; } </style> <template> <div class=\\\"example\\\" data-v-f3f3eg9>hi</div> </template>\"]},\"620\":{\"h\":\"混用本地和全局样式\",\"t\":[\"你可以在一个组件中同时使用有 scoped 和非 scoped 样式：\",\"<style> /* 全局样式 */ </style> <style scoped> /* 本地样式 */ </style>\"]},\"621\":{\"h\":\"子组件的根元素\",\"t\":[\"使用 scoped 后，父组件的样式将不会渗透到子组件中。不过一个子组件的根节点会同时受其父组件的 scoped CSS 和子组件的 scoped CSS 的影响。这样设计是为了让父组件可以从布局的角度出发，调整其子组件根元素的样式。\"]},\"622\":{\"h\":\"深度作用选择器\",\"t\":[\"如果你希望 scoped 样式中的一个选择器能够作用得“更深”，例如影响子组件，你可以使用 >>> 操作符：\",\"<style scoped> .a >>> .b { /* ... */ } </style>\",\"上述代码将会编译成：\",\".a[data-v-f3f3eg9] .b { /* ... */ }\",\"有些像 Sass 之类的预处理器无法正确解析 >>>。这种情况下你可以使用 /deep/ 或 ::v-deep 操作符取而代之——两者都是 >>> 的别名，同样可以正常工作。\"]},\"623\":{\"h\":\"动态生成的内容\",\"t\":[\"通过 v-html 创建的 DOM 内容不受 scoped 样式影响，但是你仍然可以通过深度作用选择器来为他们设置样式。\"]},\"624\":{\"h\":\"还有一些要留意\",\"t\":[\"Scoped 样式不能代替 class。考虑到浏览器渲染各种 CSS 选择器的方式，当 p { color: red } 是 scoped 时 (即与特性选择器组合使用时) 会慢很多倍。如果你使用 class 或者 id 取而代之，比如 .example { color: red }，性能影响就会消除。\",\"在递归组件中小心使用后代选择器! 对选择器 .a .b 中的 CSS 规则来说，如果匹配 .a 的元素包含一个递归子组件，则所有的子组件中的 .b 都将被这个规则匹配。\"]},\"625\":{\"h\":\"template 处理\",\"t\":[\"// lib/index // module id for scoped CSS & hot-reload const rawShortFilePath = path .relative(context, resourcePath) .replace(/^(\\\\.\\\\.[\\\\/\\\\\\\\])+/, \\\"\\\"); const shortFilePath = rawShortFilePath.replace(/\\\\\\\\/g, \\\"/\\\") + resourceQuery; // 生成 id const id = hash( isProduction ? shortFilePath + \\\"\\\\n\\\" + source.replace(/\\\\r\\\\n/g, \\\"\\\\n\\\") : shortFilePath ); // 遍历 style 标签判断是否有scoped const hasScoped = descriptor.styles.some((s) => s.scoped); let templateImport = `var render, staticRenderFns`; let templateRequest; if (descriptor.template) { const src = descriptor.template.src || resourcePath; const idQuery = `&id=${id}`; const scopedQuery = hasScoped ? `&scoped=true` : ``; const attrsQuery = attrsToQuery(descriptor.template.attrs); const query = `?vue&type=template${idQuery}${scopedQuery}${attrsQuery}${inheritQuery}`; const request = (templateRequest = stringifyRequest(src + query)); templateImport = `import { render, staticRenderFns } from ${request}`; //import { render, staticRenderFns } from \\\"./HelloWorld.vue?vue&type=template&id=469af010&scoped=true&\\\" // pitcher loader匹配?vue }\"]},\"626\":{\"h\":\"pitcher loader\",\"t\":[\"li/loaders/pitcher\",\"if (query.type === `template`) { const path = require(\\\"path\\\"); const cacheLoader = cacheDirectory && cacheIdentifier ? [ `${require.resolve(\\\"cache-loader\\\")}?${JSON.stringify({ // For some reason, webpack fails to generate consistent hash if we // use absolute paths here, even though the path is only used in a // comment. For now we have to ensure cacheDirectory is a relative path. cacheDirectory: (path.isAbsolute(cacheDirectory) ? path.relative(process.cwd(), cacheDirectory) : cacheDirectory ).replace(/\\\\\\\\/g, \\\"/\\\"), cacheIdentifier: hash(cacheIdentifier) + \\\"-vue-loader-template\\\", })}`, ] : []; const preLoaders = loaders.filter(isPreLoader); const postLoaders = loaders.filter(isPostLoader); const request = genRequest([ ...cacheLoader, ...postLoaders, templateLoaderPath + `??vue-loader-options`, ...preLoaders, ]); // console.log(request) // the template compiler uses esm exports console.log(`export * from ${request}`, \\\"template\\\"); return `export * from ${request}`; }\"]},\"627\":{\"h\":\"templateLoaderPath\",\"t\":[\"// vue-template-compiler 把 template 转换为render函数 const compiler = options.compiler || require(\\\"vue-template-compiler\\\"); const compilerOptions = Object.assign( { outputSourceRange: true, }, options.compilerOptions, { scopeId: query.scoped ? `data-v-${id}` : null, comments: query.comments, } );\"]},\"628\":{\"h\":\"style 处理\"},\"629\":{\"h\":\"vue-loader\",\"t\":[\"let stylesCode = ``; if (descriptor.styles.length) { stylesCode = genStylesCode( loaderContext, descriptor.styles, id, resourcePath, stringifyRequest, needsHotReload, isServer || isShadow // needs explicit injection? ); } // import style0 from \\\"./HelloWorld.vue?vue&type=style&index=0&id=469af010&scoped=true&lang=css&\\\"\",\"genStylesCode\",\"const genStylesCode = require(\\\"./codegen/styleInjection\\\"); module.exports = function genStyleInjectionCode( loaderContext, styles, id, resourcePath, stringifyRequest, needsHotReload, needsExplicitInjection ) { let styleImportsCode = ``; let styleInjectionCode = ``; let cssModulesHotReloadCode = ``; let hasCSSModules = false; const cssModuleNames = new Map(); function genStyleRequest(style, i) { const src = style.src || resourcePath; const attrsQuery = attrsToQuery(style.attrs, \\\"css\\\"); const inheritQuery = `&${loaderContext.resourceQuery.slice(1)}`; // make sure to only pass id when necessary so that we don't inject // duplicate tags when multiple components import the same css file const idQuery = style.scoped ? `&id=${id}` : ``; const query = `?vue&type=style&index=${i}${idQuery}${attrsQuery}${inheritQuery}`; return stringifyRequest(src + query); } };\"]},\"630\":{\"h\":\"pitch loader\",\"t\":[\"if (query.type === `style`) { const cssLoaderIndex = loaders.findIndex(isCSSLoader); if (cssLoaderIndex > -1) { const afterLoaders = loaders.slice(0, cssLoaderIndex + 1); const beforeLoaders = loaders.slice(cssLoaderIndex + 1); const request = genRequest([ ...afterLoaders, stylePostLoaderPath, ...beforeLoaders, ]); console.log( query.module ? `export { default } from ${request}; export * from ${request}` : `export * from ${request}`, \\\"request -- style\\\" ); return query.module ? `export { default } from ${request}; export * from ${request}` : `export * from ${request}`; } }\"]},\"631\":{\"h\":\"stylePostLoader\",\"t\":[\"const qs = require(\\\"querystring\\\"); const { compileStyle } = require(\\\"@vue/component-compiler-utils\\\"); // This is a post loader that handles scoped CSS transforms. // Injected right before css-loader by the global pitcher (../pitch.js) // for any <style scoped> selection requests initiated from within vue files. module.exports = function (source, inMap) { const query = qs.parse(this.resourceQuery.slice(1)); const { code, map, errors } = compileStyle({ source, filename: this.resourcePath, id: `data-v-${query.id}`, map: inMap, scoped: !!query.scoped, trim: true, }); if (errors.length) { this.callback(errors[0]); } else { this.callback(null, code, map); } };\"]},\"632\":{\"c\":[\"Vue\"]},\"633\":{\"h\":\"vue-loader-15.9.8代码分析\"},\"634\":{\"h\":\"loader 执行顺序\",\"t\":[\"先左到右执行 loader 上的 pitch 方法,如果 pitch 方法有实际的返回值会跳过后续的 pitch 方法 在右到左执行 loader\"]},\"635\":{\"h\":\"vue-loader\",\"t\":[\"source => parse()转化 => descriptor => Vue-loader 生成 code\",\"const { parse } = require(\\\"@vue/component-compiler-utils\\\"); module.exports = function (source) { //.... const descriptor = parse({ source, compiler: options.compiler || loadTemplateCompiler(loaderContext), filename, sourceRoot, needMap: sourceMap, }); /** descriptor { template: { ... }, script: { ... }, styles: [ ... ], customBlocks: [], errors: [] } */ // 第二次进入 vue-loader 执行 匹配到.vue?type=template // if the query has a type field, this is a language block request // e.g. foo.vue?type=template&id=xxxxx // and we will return early if (incomingQuery.type) { return selectBlock( descriptor, loaderContext, incomingQuery, !!options.appendExtension ); } // .... // 开启热更新 if (needsHotReload) { code += `\\\\n` + genHotReloadCode(id, hasFunctional, templateRequest); } return code; };\",\"console.log(source)\",\"<template> <div class=\\\"hello\\\"> <h1>{{ msg }}</h1> <p> For a guide and recipes on how to configure / customize this project,<br> check out the <a href=\\\"https://cli.vuejs.org\\\" target=\\\"_blank\\\" rel=\\\"noopener\\\">vue-cli documentation</a>. </p> <h3>Installed CLI Plugins</h3> <ul> <li><a href=\\\"https://github.com/vuejs/vue-cli/tree/dev/packages/%40vue/cli-plugin-babel\\\" target=\\\"_blank\\\" rel=\\\"noopener\\\">babel</a></li> <li><a href=\\\"https://github.com/vuejs/vue-cli/tree/dev/packages/%40vue/cli-plugin-eslint\\\" target=\\\"_blank\\\" rel=\\\"noopener\\\">eslint</a></li> </ul> <h3>Essential Links</h3> <ul> <li><a href=\\\"https://vuejs.org\\\" target=\\\"_blank\\\" rel=\\\"noopener\\\">Core Docs</a></li> <li><a href=\\\"https://forum.vuejs.org\\\" target=\\\"_blank\\\" rel=\\\"noopener\\\">Forum</a></li> <li><a href=\\\"https://chat.vuejs.org\\\" target=\\\"_blank\\\" rel=\\\"noopener\\\">Community Chat</a></li> <li><a href=\\\"https://twitter.com/vuejs\\\" target=\\\"_blank\\\" rel=\\\"noopener\\\">Twitter</a></li> <li><a href=\\\"https://news.vuejs.org\\\" target=\\\"_blank\\\" rel=\\\"noopener\\\">News</a></li> </ul> <h3>Ecosystem</h3> <ul> <li><a href=\\\"https://router.vuejs.org\\\" target=\\\"_blank\\\" rel=\\\"noopener\\\">vue-router</a></li> <li><a href=\\\"https://vuex.vuejs.org\\\" target=\\\"_blank\\\" rel=\\\"noopener\\\">vuex</a></li> <li><a href=\\\"https://github.com/vuejs/vue-devtools#vue-devtools\\\" target=\\\"_blank\\\" rel=\\\"noopener\\\">vue-devtools</a></li> <li><a href=\\\"https://vue-loader.vuejs.org\\\" target=\\\"_blank\\\" rel=\\\"noopener\\\">vue-loader</a></li> <li><a href=\\\"https://github.com/vuejs/awesome-vue\\\" target=\\\"_blank\\\" rel=\\\"noopener\\\">awesome-vue</a></li> </ul> </div> </template> <script> export default { name: 'HelloWorld', props: { msg: String }, data(){ return { pageName:'App' } }, create(){ console.log('helloWorld --create') }, mounted(){ console.log('app -- mounted') } } </script> <!-- Add \\\"scoped\\\" attribute to limit CSS to this component only --> <style scoped> h3 { margin: 40px 0 0; } ul { list-style-type: none; padding: 0; } li { display: inline-block; margin: 0 10px; } a { color: #42b983; } </style>\",\"console.log(descriptor)\",\" template: { type: 'template', content: '\\\\n' + '<div class=\\\"hello\\\">\\\\n' + ' <h1>{{ msg }}</h1>\\\\n' + ' <p>\\\\n' + ' For a guide and recipes on how to configure / customize this project,<br>\\\\n' + ' check out the\\\\n' + ' <a href=\\\"https://cli.vuejs.org\\\" target=\\\"_blank\\\" rel=\\\"noopener\\\">vue-cli documentation</a>.\\\\n' + ' </p>\\\\n' + ' <h3>Installed CLI Plugins</h3>\\\\n' + ' <ul>\\\\n' + ' <li><a href=\\\"https://github.com/vuejs/vue-cli/tree/dev/packages/%40vue/cli-plugin-babel\\\" target=\\\"_blank\\\" rel=\\\"noopener\\\">babel</a></li>\\\\n' + ' <li><a href=\\\"https://github.com/vuejs/vue-cli/tree/dev/packages/%40vue/cli-plugin-eslint\\\" target=\\\"_blank\\\" rel=\\\"noopener\\\">eslint</a></li>\\\\n' + ' </ul>\\\\n' + ' <h3>Essential Links</h3>\\\\n' + ' <ul>\\\\n' + ' <li><a href=\\\"https://vuejs.org\\\" target=\\\"_blank\\\" rel=\\\"noopener\\\">Core Docs</a></li>\\\\n' + ' <li><a href=\\\"https://forum.vuejs.org\\\" target=\\\"_blank\\\" rel=\\\"noopener\\\">Forum</a></li>\\\\n' + ' <li><a href=\\\"https://chat.vuejs.org\\\" target=\\\"_blank\\\" rel=\\\"noopener\\\">Community Chat</a></li>\\\\n' + ' <li><a href=\\\"https://twitter.com/vuejs\\\" target=\\\"_blank\\\" rel=\\\"noopener\\\">Twitter</a></li>\\\\n' + ' <li><a href=\\\"https://news.vuejs.org\\\" target=\\\"_blank\\\" rel=\\\"noopener\\\">News</a></li>\\\\n' + ' </ul>\\\\n' + ' <h3>Ecosystem</h3>\\\\n' + ' <ul>\\\\n' + ' <li><a href=\\\"https://router.vuejs.org\\\" target=\\\"_blank\\\" rel=\\\"noopener\\\">vue-router</a></li>\\\\n' + ' <li><a href=\\\"https://vuex.vuejs.org\\\" target=\\\"_blank\\\" rel=\\\"noopener\\\">vuex</a></li>\\\\n' + ' <li><a href=\\\"https://github.com/vuejs/vue-devtools#vue-devtools\\\" target=\\\"_blank\\\" rel=\\\"noopener\\\">vue-devtools</a></li>\\\\n' + ' <li><a href=\\\"https://vue-loader.vuejs.org\\\" target=\\\"_blank\\\" rel=\\\"noopener\\\">vue-loader</a></li>\\\\n' + ' <li><a href=\\\"https://github.com/vuejs/awesome-vue\\\" target=\\\"_blank\\\" rel=\\\"noopener\\\">awesome-vue</a></li>\\\\n' + ' </ul>\\\\n' + '</div>\\\\n', start: 10, attrs: {}, end: 1681 }, script: { type: 'script', content: '//\\\\n' + 'export default {\\\\n' + \\\" name: 'HelloWorld',\\\\n\\\" + ' props: {\\\\n' + ' msg: String\\\\n' + ' },\\\\n' + ' data(){\\\\n' + ' return {\\\\n' + \\\" pageName:'App'\\\\n\\\" + ' }\\\\n' + ' },\\\\n' + ' create(){\\\\n' + \\\" console.log('helloWorld --create')\\\\n\\\" + ' },\\\\n' + ' mounted(){\\\\n' + \\\" console.log('app -- mounted')\\\\n\\\" + ' }\\\\n' + '}\\\\n', start: 1702, attrs: {}, end: 1942 }, styles: [ { type: 'style', content: '\\\\n' + 'h3 {\\\\n' + ' margin: 40px 0 0;\\\\n' + '}\\\\n' + 'ul {\\\\n' + ' list-style-type: none;\\\\n' + ' padding: 0;\\\\n' + '}\\\\n' + 'li {\\\\n' + ' display: inline-block;\\\\n' + ' margin: 0 10px;\\\\n' + '}\\\\n' + 'a {\\\\n' + ' color: #42b983;\\\\n' + '}\\\\n', start: 2035, attrs: [Object], scoped: true, end: 2183 } ], customBlocks: [], errors: [ 'tag <br> has no matching end tag.' ]\",\"console.log(code)\",\"import { render, staticRenderFns, } from \\\"./HelloWorld.vue?vue&type=template&id=469af010&scoped=true&\\\"; import script from \\\"./HelloWorld.vue?vue&type=script&lang=js&\\\"; export * from \\\"./HelloWorld.vue?vue&type=script&lang=js&\\\"; import style0 from \\\"./HelloWorld.vue?vue&type=style&index=0&id=469af010&scoped=true&lang=css&\\\"; /* normalize component */ import normalizer from \\\"!../../source-code/vue-loader-15.9.8/lib/runtime/componentNormalizer.js\\\"; var component = normalizer( script, render, staticRenderFns, false, null, \\\"469af010\\\", null ); /* hot reload */ if (module.hot) { var api = require(\\\"F:\\\\\\\\github\\\\\\\\vue2-test\\\\\\\\node_modules\\\\\\\\vue-hot-reload-api\\\\\\\\dist\\\\\\\\index.js\\\"); api.install(require(\\\"vue\\\")); if (api.compatible) { module.hot.accept(); if (!api.isRecorded(\\\"469af010\\\")) { api.createRecord(\\\"469af010\\\", component.options); } else { api.reload(\\\"469af010\\\", component.options); } module.hot.accept( \\\"./HelloWorld.vue?vue&type=template&id=469af010&scoped=true&\\\", function () { api.rerender(\\\"469af010\\\", { render: render, staticRenderFns: staticRenderFns, }); } ); } } component.options.__file = \\\"src/components/HelloWorld.vue\\\"; export default component.exports;\"]},\"636\":{\"h\":\"VueLoaderPlugin\",\"t\":[\"是一个具有 apply 方法的 JavaScript 对象。apply 方法会被 webpack compiler 调用，并且在 整个 编译生命周期都可以访问 compiler 对象。\",\"Plugin 的作用，主要有以下两条：\",\"能够 hook 到在每个编译(compilation)中触发的所有关键事件。\",\"在插件实例的 apply 方法中，可以通过 compiler.options 获取 Webpack 配置，并进行修改。\",\" class VueLoaderPlugin { apply (compiler) { // 对 Webpack 配置进行修改 const rules = compiler.options.module.rules const clonedRules = rules .filter(r => r !== rawVueRules) .map((rawRule) => cloneRule(rawRule, refs)) // pitcher const pitcher = { loader: require.resolve('./loaders/pitcher'), resourceQuery: query => { if (!query) { return false } const parsed = qs.parse(query.slice(1)) // 带有?vue的都会匹配到 return parsed.vue != null }, options: { ... } } // 替换初始 module.rules，在原有 rule 上，增加 pitcher、clonedRules compiler.options.module.rules = [ pitcher, ...clonedRules, ...rules ]; } }\"]},\"637\":{\"h\":\"pitchLoader\",\"t\":[\" // vue-loader lib/loaders/pitcher.js module.exports.pitch = function (remainingRequest) { // this.resourceQuery import文件?后的内容 // ?vue&type=script&lang=js& // ?vue&type=template&id=3942140e&scoped=true& // const query = qs.parse(this.resourceQuery.slice(1)) if (query.type === 'style') { ... } if (query.type === 'template') { ... } // 处理 script 块和 custom 块 return `import mod from ${request}; export default mod; export * from ${request}`; }\",\"pitch 处理结果\",\"// template ?vue&type=template&id=39502b8f&scoped=true& export * from \\\"-!../../source-code/vue-loader-15.9.8/lib/loaders/templateLoader.js??vue-loader-options!../../source-code/vue-loader-15.9.8/lib/index.js??vue-loader-options!./HelloWorld.vue?vue&type=template&id=469af010&scoped=true&\\\"; // style vue&type=style&index=0&id=469af010&scoped=true&lang=css& export * from \\\"-!../../node_modules/style-loader/dist/cjs.js!../../node_modules/css-loader/dist/cjs.js!../../source-code/vue-loader-15.9.8/lib/loaders/stylePostLoader.js!../../node_modules/postcss-loader/dist/cjs.js!../../node_modules/less-loader/dist/cjs.js!../../source-code/vue-loader-15.9.8/lib/index.js??vue-loader-options!./HelloWorld.vue?vue&type=style&index=0&id=469af010&scoped=true&lang=css&\\\"; // script vue&type=script&lang=js& // lonedRuleSet-1[0].rules[0].use 使用配置的js rule处理 import mod from \\\"-!../../node_modules/babel-loader/lib/index.js??clonedRuleSet-1[0].rules[0].use!../../source-code/vue-loader-15.9.8/lib/index.js??vue-loader-options!./HelloWorld.vue?vue&type=script&lang=js&\\\"; export default mod; export * from \\\"-!../../node_modules/babel-loader/lib/index.js??clonedRuleSet-1[0].rules[0].use!../../source-code/vue-loader-15.9.8/lib/index.js??vue-loader-options!./HelloWorld.vue?vue&type=script&lang=js&\\\";\"]},\"638\":{\"h\":\"匹配过程\",\"t\":[\"template 匹配过程\",\"// 1. Vue-loader处理 ?vue 匹配到pitch loader \\\"./HelloWorld.vue?vue&type=template&id=469af010&scoped=true&\\\"; // 2. pitch Loader 匹配 type=template 进行处理 结果 export * from \\\"-!../../source-code/vue-loader-15.9.8/lib/loaders/templateLoader.js??vue-loader-options!../../source-code/vue-loader-15.9.8/lib/index.js??vue-loader-options!./HelloWorld.vue?vue&type=template&id=469af010&scoped=true&\\\"; // 3. -! 禁用所有已配置的 preLoader 和 loader，但是不禁用 postLoaders 再次进入vue-loader处理后续.vue文件 type= template if (incomingQuery.type) { return selectBlock( descriptor, loaderContext, incomingQuery, !!options.appendExtension ); } // 4. 匹配 templateLoader 的postLoader return code + `\\\\nexport { render, staticRenderFns }`; // 5. Vue-loader 输出 import { render, staticRenderFns, } from \\\"./HelloWorld.vue?vue&type=template&id=469af010&scoped=true&\\\"; // .... var component = normalizer( script, render, staticRenderFns, false, null, \\\"469af010\\\", null );\"]},\"639\":{\"c\":[\"Vue\",\"Webpack\"]},\"640\":{\"c\":[\"Loader\",\"Vue2\"]},\"641\":{\"h\":\"Vue-Router3.x 框架原理分析\",\"t\":[\"[]路由跳转匹配 - 子路由 孙路由跳转 []路由记录表的生成\",\"import Vue from \\\"vue\\\"; import VueRouter from \\\"vue-router\\\"; Vue.use(VueRouter); export const constantRoutes = [ { path: \\\"/login\\\", component: () => import(\\\"@/views/login/index\\\"), hidden: true, }, // ..... ]; const createRouter = () => new VueRouter({ routes: constantRoutes, scrollBehavior: () => ({ y: 0 }), }); const router = createRouter(); export default router; new Vue({ router });\"]},\"642\":{\"h\":\"install\",\"t\":[\"install\",\"export function install(Vue) { if (install.installed && _Vue === Vue) return; install.installed = true; // 保留Vue引用 _Vue = Vue; const isDef = (v) => v !== undefined; // 为router-view组件关联路由组件 const registerInstance = (vm, callVal) => { let i = vm.$options._parentVnode; // 调用vm.$options._parentVnode.data.registerRouteInstance方法 // 而这个方法只在router-view组件中存在，router-view组件定义在(../components/view.js @71行) // 所以，如果vm的父节点为router-view，则为router-view关联当前vm，即将当前vm做为router-view的路由组件 if ( isDef(i) && isDef((i = i.data)) && isDef((i = i.registerRouteInstance)) ) { // i = registerRouteInstance i(vm, callVal); } }; // 只在router-view组件中存在 const registerRouteInstance = function (vm, val) { // val could be undefined for unregistration // name => router-view props name var current = matched.instances[name]; if ((val && current !== vm) || (!val && current === vm)) { matched.instances[name] = val; } }; // 为所有的vue组件混入_route,_router,_routerRoot Vue.mixin({ beforeCreate() { // this === new Vue({router:router}) === Vue根实例 if (isDef(this.$options.router)) { // 保存挂载VueRouter的Vue实例，此处为根实例 this._routerRoot = this; // 保存VueRouter实例，this.$options.router仅存在于Vue根实例上，其它Vue组件不包含此属性，所以下面的初始化，只会执行一次 this._router = this.$options.router; this._router.init(this); // 响应式定义_route属性，保证_route发生变化时，组件(router-view)会重新渲染 Vue.util.defineReactive(this, \\\"_route\\\", this._router.history.current); } else { this._routerRoot = (this.$parent && this.$parent._routerRoot) || this; } // 为router-view组件关联路由组件 registerInstance(this, this); }, destroyed() { registerInstance(this); }, }); Object.defineProperty(Vue.prototype, \\\"$router\\\", { get() { return this._routerRoot._router; }, }); Object.defineProperty(Vue.prototype, \\\"$route\\\", { get() { return this._routerRoot._route; }, }); Vue.component(\\\"RouterView\\\", View); Vue.component(\\\"RouterLink\\\", Link); const strats = Vue.config.optionMergeStrategies; // use the same hook merging strategy for route hooks strats.beforeRouteEnter = strats.beforeRouteLeave = strats.beforeRouteUpdate = strats.created; }\",\"_router.init\",\"export default class VueRouter { init(app: any /* Vue component instance */) { // app = vm根实例 this.apps.push(app); // set up app destroyed handler // https://github.com/vuejs/vue-router/issues/2639 app.$once(\\\"hook:destroyed\\\", () => { // clean out app from this.apps array once destroyed const index = this.apps.indexOf(app); if (index > -1) this.apps.splice(index, 1); // ensure we still have a main app or null if no apps // we do not release the router so it can be reused if (this.app === app) this.app = this.apps[0] || null; if (!this.app) this.history.teardown(); }); // main app previously initialized // return as we don't need to set up new history listener // if (this.app) { return; } this.app = app; const history = this.history; if (history instanceof HTML5History || history instanceof HashHistory) { const handleInitialScroll = (routeOrError) => { const from = history.current; const expectScroll = this.options.scrollBehavior; const supportsScroll = supportsPushState && expectScroll; if (supportsScroll && \\\"fullPath\\\" in routeOrError) { handleScroll(this, routeOrError, from, false); } }; // 监听路由变化 const setupListeners = (routeOrError) => { history.setupListeners(); handleInitialScroll(routeOrError); }; history.transitionTo( history.getCurrentLocation(), setupListeners, setupListeners ); } // 回调会在父类的updateRoute方法被调用时触发，重新为app._route赋值 // 由于app._route被定义为响应式，所以app._route发生变化，依赖app._route的组件(route-view组件)都会被重新渲染 // 调用父类的listen方法，添加回调； history.listen((route) => { this.apps.forEach((app) => { app._route = route; }); }); } }\"]},\"643\":{\"h\":\"VueRouter\",\"t\":[\"const routes = [ { path: \\\"/foo\\\", component: Foo }, { path: \\\"/bar\\\", component: Bar }, ]; const router = new VueRouter({ routes, // (缩写) 相当于 routes: routes });\",\"VueRouter\",\"export default class VueRouter { constructor(options: RouterOptions = {}) { this.app = null; this.apps = []; this.options = options; this.beforeHooks = []; this.resolveHooks = []; this.afterHooks = []; this.matcher = createMatcher(options.routes || [], this); let mode = options.mode || \\\"hash\\\"; this.fallback = mode === \\\"history\\\" && !supportsPushState && options.fallback !== false; if (this.fallback) { mode = \\\"hash\\\"; } if (!inBrowser) { mode = \\\"abstract\\\"; } this.mode = mode; switch (mode) { case \\\"history\\\": this.history = new HTML5History(this, options.base); break; case \\\"hash\\\": this.history = new HashHistory(this, options.base, this.fallback); break; case \\\"abstract\\\": this.history = new AbstractHistory(this, options.base); break; default: } } }\"]},\"644\":{\"h\":\"createMatcher\",\"t\":[\"createMatcher\",\"export function createMatcher( routes: Array<RouteConfig>, router: VueRouter ): Matcher { // 根据 传入的 routes 生成路由记录 // pathList 路由路径数组 // pathMap = {/home:record} nameMap = {/home:record} const { pathList, pathMap, nameMap } = createRouteMap(routes); return { match, addRoute, getRoutes, addRoutes, }; }\",\"createRouteMap\",\"export function createRouteMap( routes: Array<RouteConfig>, oldPathList?: Array<string>, oldPathMap?: Dictionary<RouteRecord>, oldNameMap?: Dictionary<RouteRecord>, parentRoute?: RouteRecord ): { pathList: Array<string>, pathMap: Dictionary<RouteRecord>, nameMap: Dictionary<RouteRecord>, } { const pathList: Array<string> = oldPathList || []; const pathMap: Dictionary<RouteRecord> = oldPathMap || Object.create(null); const nameMap: Dictionary<RouteRecord> = oldNameMap || Object.create(null); // 遍历路由配置 生成路由记录 routes.forEach((route) => { addRouteRecord(pathList, pathMap, nameMap, route, parentRoute); }); // 确保 path:*永远在前面 for (let i = 0, l = pathList.length; i < l; i++) { if (pathList[i] === \\\"*\\\") { pathList.push(pathList.splice(i, 1)[0]); l--; i--; } } return { pathList, pathMap, nameMap, }; }\",\"更新路由映射表 从 route 中匹配对应的路由信息\",\"addRouteRecord\",\"function addRouteRecord(pathList, pathMap, nameMap, route, parent, matchAs) { var path = route.path; var name = route.name; var pathToRegexpOptions = route.pathToRegexpOptions || {}; var normalizedPath = normalizePath(path, parent, pathToRegexpOptions.strict); if (typeof route.caseSensitive === \\\"boolean\\\") { pathToRegexpOptions.sensitive = route.caseSensitive; } // 记录 // pathMap = {/home:record} nameMap = {/home:record} var record = { path: normalizedPath, regex: compileRouteRegex(normalizedPath, pathToRegexpOptions), components: route.components || { default: route.component }, alias: route.alias ? typeof route.alias === \\\"string\\\" ? [route.alias] : route.alias : [], instances: {}, enteredCbs: {}, name: name, parent: parent, matchAs: matchAs, redirect: route.redirect, beforeEnter: route.beforeEnter, meta: route.meta || {}, props: route.props == null ? {} : route.components ? route.props : { default: route.props }, }; // 遍历子路由 if (route.children) { route.children.forEach(function (child) { var childMatchAs = matchAs ? cleanPath(matchAs + \\\"/\\\" + child.path) : undefined; addRouteRecord(pathList, pathMap, nameMap, child, record, childMatchAs); }); } if (!pathMap[record.path]) { pathList.push(record.path); pathMap[record.path] = record; } // https://router.vuejs.org/zh/guide/essentials/redirect-and-alias.html#%E5%88%AB%E5%90%8D // 别名处理 // 将别名定义为 path进行处理 if (route.alias !== undefined) { var aliases = Array.isArray(route.alias) ? route.alias : [route.alias]; for (var i = 0; i < aliases.length; ++i) { var alias = aliases[i]; if (alias === path) { // skip in dev to make it work continue; } var aliasRoute = { path: alias, children: route.children, }; addRouteRecord( pathList, pathMap, nameMap, aliasRoute, parent, record.path || \\\"/\\\" // matchAs ); } } if (name) { if (!nameMap[name]) { nameMap[name] = record; } } }\"]},\"645\":{\"h\":\"路由跳转\",\"t\":[\"router.push(location, onComplete?, onAbort?) router.push(location).then(onComplete).catch(onAbort) router.replace(location, onComplete?, onAbort?) router.replace(location).then(onComplete).catch(onAbort) // 利用浏览器 window.history.go(n) router.go(n) router.back() router.forward()\"]},\"646\":{\"h\":\"html5\",\"t\":[\"export class HTML5History extends History { // 在 install方法中的 router_init 中 执行 setupListeners() { if (this.listeners.length > 0) { return; } const router = this.router; // 传入的 options中的 scrollBehavior 方法 const expectScroll = router.options.scrollBehavior; const supportsScroll = supportsPushState && expectScroll; if (supportsScroll) { this.listeners.push(setupScroll()); } const handleRoutingEvent = () => { const current = this.current; // Avoiding first `popstate` event dispatched in some browsers but first // history route not updated since async guard at the same time. const location = getLocation(this.base); if (this.current === START && location === this._startLocation) { return; } this.transitionTo(location, (route) => { if (supportsScroll) { handleScroll(router, route, current, true); } }); }; window.addEventListener(\\\"popstate\\\", handleRoutingEvent); this.listeners.push(() => { window.removeEventListener(\\\"popstate\\\", handleRoutingEvent); }); } push(location: RawLocation, onComplete?: Function, onAbort?: Function) { const { current: fromRoute } = this; this.transitionTo( location, (route) => { pushState(cleanPath(this.base + route.fullPath)); handleScroll(this.router, route, fromRoute, false); onComplete && onComplete(route); }, onAbort ); } replace(location: RawLocation, onComplete?: Function, onAbort?: Function) { const { current: fromRoute } = this; this.transitionTo( location, (route) => { replaceState(cleanPath(this.base + route.fullPath)); handleScroll(this.router, route, fromRoute, false); onComplete && onComplete(route); }, onAbort ); } } // 利用浏览器 history特性 向 当前浏览器会话的历史堆栈中 修改状态 export function pushState(url?: string, replace?: boolean) { saveScrollPosition(); // try...catch the pushState call to get around Safari // DOM Exception 18 where it limits to 100 pushState calls const history = window.history; try { if (replace) { // preserve existing history state as it could be overriden by the user const stateCopy = extend({}, history.state); stateCopy.key = getStateKey(); history.replaceState(stateCopy, \\\"\\\", url); } else { history.pushState({ key: setStateKey(genStateKey()) }, \\\"\\\", url); } } catch (e) { window.location[replace ? \\\"replace\\\" : \\\"assign\\\"](url); } } export function replaceState(url?: string) { pushState(url, true); }\"]},\"647\":{\"h\":\"hash\",\"t\":[\"export class HashHistory extends History { push(location: RawLocation, onComplete?: Function, onAbort?: Function) { const { current: fromRoute } = this; this.transitionTo( location, (route) => { pushHash(route.fullPath); handleScroll(this.router, route, fromRoute, false); onComplete && onComplete(route); }, onAbort ); } replace(location: RawLocation, onComplete?: Function, onAbort?: Function) { const { current: fromRoute } = this; this.transitionTo( location, (route) => { replaceHash(route.fullPath); handleScroll(this.router, route, fromRoute, false); onComplete && onComplete(route); }, onAbort ); } } function getUrl(path) { const href = window.location.href; const i = href.indexOf(\\\"#\\\"); const base = i >= 0 ? href.slice(0, i) : href; return `${base}#${path}`; } function pushHash(path) { if (supportsPushState) { pushState(getUrl(path)); } else { window.location.hash = path; } } function replaceHash(path) { if (supportsPushState) { replaceState(getUrl(path)); } else { window.location.replace(getUrl(path)); } }\"]},\"648\":{\"h\":\"路由守卫\",\"t\":[\"路由导航获取顺序 beforeRouteLeave => beforeEach => beforeRouteUpdate => beforeEnter(路由独享) =>beforeRouteEnter => beforeResolve => afterEach\",\"全局路由守卫\",\"router.beforeEach((to, from, next) => { console.log(\\\"beforeEach\\\", to, from); next(); }); router.beforeResolve((to, from, next) => { console.log(\\\"beforeResolve\\\", to, from); next(); }); router.afterEach((to, from) => { console.log(\\\"afterEach\\\", to, from); });\",\"路由独享的守卫\",\"const router = new VueRouter({ routes: [ { path: \\\"/foo\\\", component: Foo, beforeEnter: (to, from, next) => { // ... }, }, ], });\",\"组件内的守卫\",\" beforeRouteEnter(to, from, next) { // 在渲染该组件的对应路由被 confirm 前调用 // 不！能！获取组件实例 `this` next(vm => { // 通过 `vm` 访问组件实例 }) // 因为当守卫执行前，组件实例还没被创建 }, beforeRouteUpdate(to, from, next) { // 在当前路由改变，但是该组件被复用时调用 // 举例来说，对于一个带有动态参数的路径 /foo/:id，在 /foo/1 和 /foo/2 之间跳转的时候， // 由于会渲染同样的 Foo 组件，因此组件实例会被复用。而这个钩子就会在这个情况下被调用。 // 可以访问组件实例 `this` }, beforeRouteLeave(to, from, next) { // 导航离开该组件的对应路由时调用 // 可以访问组件实例 `this` }\"]},\"649\":{\"h\":\"transitionTo\",\"t\":[\"transitionTo\",\" transitionTo ( location: RawLocation, onComplete?: Function, onAbort?: Function ) { let route // catch redirect option https://github.com/vuejs/vue-router/issues/3201 try { // 更具location匹配对应的record // 根据record返回一个route对象 // route对象 name,meta,path,hash,query,params,fullPath,matched route = this.router.match(location, this.current) } catch (e) { this.errorCbs.forEach(cb => { cb(e) }) // Exception should still be thrown throw e } const prev = this.current // 确定跳转 // 执行路由守卫 this.confirmTransition( route, () => { this.updateRoute(route) /* updateRoute (route: Route) { this.current = route this.cb && this.cb(route) } */ onComplete && onComplete(route) // 向浏览器 历史栈 中加入记录 true 加入记录 false replace记录 this.ensureURL() this.router.afterHooks.forEach(hook => { hook && hook(route, prev) }) // fire ready cbs once if (!this.ready) { this.ready = true this.readyCbs.forEach(cb => { cb(route) }) } }, err => { if (onAbort) { onAbort(err) } if (err && !this.ready) { // Initial redirection should not mark the history as ready yet // because it's triggered by the redirection instead // https://github.com/vuejs/vue-router/issues/3225 // https://github.com/vuejs/vue-router/issues/3331 if (!isNavigationFailure(err, NavigationFailureType.redirected) || prev !== START) { this.ready = true this.readyErrorCbs.forEach(cb => { cb(err) }) } } } ) }\"]},\"650\":{\"h\":\"match\",\"t\":[\"根据 location 从 pathMap、nameMap 中找出对应的 record\",\"match\",\"match (raw: RawLocation, current?: Route, redirectedFrom?: Location): Route { return this.matcher.match(raw, current, redirectedFrom) } function match ( raw: RawLocation, currentRoute?: Route, redirectedFrom?: Location ): Route { const location = normalizeLocation(raw, currentRoute, false, router) const { name } = location // 根据name 从 nameMap {name:record} 中匹配出record if (name) { const record = nameMap[name] if (process.env.NODE_ENV !== 'production') { warn(record, `Route with name '${name}' does not exist`) } if (!record) return _createRoute(null, location) const paramNames = record.regex.keys .filter(key => !key.optional) .map(key => key.name) if (typeof location.params !== 'object') { location.params = {} } if (currentRoute && typeof currentRoute.params === 'object') { for (const key in currentRoute.params) { if (!(key in location.params) && paramNames.indexOf(key) > -1) { location.params[key] = currentRoute.params[key] } } } location.path = fillParams(record.path, location.params, `named route \\\"${name}\\\"`) return _createRoute(record, location, redirectedFrom) } else if (location.path) { // 根据路径匹配出 location.params = {} for (let i = 0; i < pathList.length; i++) { const path = pathList[i] const record = pathMap[path] if (matchRoute(record.regex, location.path, location.params)) { return _createRoute(record, location, redirectedFrom) } } } // no match // 根据location生成一个route对象 // matched = 遍历 record.parent 生成的数组 return _createRoute(null, location) }\"]},\"651\":{\"h\":\"confirmTransition\",\"t\":[\"confirmTransition\",\" confirmTransition (route: Route, onComplete: Function, onAbort?: Function) { // this.current 默认 / // updateRoute 方法执行时 会赋值为 route const current = this.current this.pending = route // 取消路由跳转 const abort = err => { // changed after adding errors with // https://github.com/vuejs/vue-router/pull/3047 before that change, // redirect and aborted navigation would produce an err == null if (!isNavigationFailure(err) && isError(err)) { if (this.errorCbs.length) { this.errorCbs.forEach(cb => { cb(err) }) } else { if (process.env.NODE_ENV !== 'production') { warn(false, 'uncaught error during route navigation:') } console.error(err) } } onAbort && onAbort(err) } const lastRouteIndex = route.matched.length - 1 const lastCurrentIndex = current.matched.length - 1 // 判断是否相同路由 if ( isSameRoute(route, current) && // in the case the route map has been dynamically appended to lastRouteIndex === lastCurrentIndex && route.matched[lastRouteIndex] === current.matched[lastCurrentIndex] ) { this.ensureURL() if (route.hash) { handleScroll(this.router, current, route, false) } return abort(createNavigationDuplicatedError(current, route)) } // 提取出 需要更新、失活、激活的路由 // matched 就是 当前父路由 ，子路由组成的数组 // this.current.matched from 路由 // route.matched to 路由 const { updated, deactivated, activated } = resolveQueue( this.current.matched, route.matched ) // 路由守卫函数 数组 const queue: Array<?NavigationGuard> = [].concat( // in-component leave guards extractLeaveGuards(deactivated), // global before hooks this.router.beforeHooks, // in-component update hooks extractUpdateHooks(updated), // in-config enter guards activated.map(m => m.beforeEnter), // async components // 解析异步组件 resolveAsyncComponents(activated) ) const iterator = (hook: NavigationGuard, next) => { if (this.pending !== route) { return abort(createNavigationCancelledError(current, route)) } try { hook(route, current, (to: any) => { if (to === false) { // next(false) -> abort navigation, ensure current URL this.ensureURL(true) abort(createNavigationAbortedError(current, route)) } else if (isError(to)) { this.ensureURL(true) abort(to) } else if ( typeof to === 'string' || (typeof to === 'object' && (typeof to.path === 'string' || typeof to.name === 'string')) ) { // next('/') or next({ path: '/' }) -> redirect abort(createNavigationRedirectedError(current, route)) if (typeof to === 'object' && to.replace) { this.replace(to) } else { this.push(to) } } else { // confirm transition and pass on the value next(to) } }) } catch (e) { abort(e) } } runQueue(queue, iterator, () => { // wait until async components are resolved before // extracting in-component enter guards const enterGuards = extractEnterGuards(activated) const queue = enterGuards.concat(this.router.resolveHooks) runQueue(queue, iterator, () => { if (this.pending !== route) { return abort(createNavigationCancelledError(current, route)) } this.pending = null onComplete(route) if (this.router.app) { this.router.app.$nextTick(() => { handleRouteEntered(route) }) } }) }) }\"]},\"652\":{\"h\":\"resolveQueue\",\"t\":[\"对比 from 和 to 的 matched\",\"current: a a/b a/b/c next: a a/b a/b/d a/b/d/e\",\"第三个不同 next=》a a/b updated a/b/d a/b/d/e activated current => a/b/c deactivated\",\"function resolveQueue( current: Array<RouteRecord>, next: Array<RouteRecord> ): { updated: Array<RouteRecord>, activated: Array<RouteRecord>, deactivated: Array<RouteRecord>, } { let i; const max = Math.max(current.length, next.length); for (i = 0; i < max; i++) { if (current[i] !== next[i]) { break; } } return { updated: next.slice(0, i), activated: next.slice(i), deactivated: current.slice(i), }; }\"]},\"653\":{\"h\":\"resolveAsyncComponents\",\"t\":[\"解析异步组件\",\"vue 异步组件\",\"Vue.component(\\\"async-example\\\", function (resolve, reject) { setTimeout(function () { // 向 `resolve` 回调传递组件定义 resolve({ template: \\\"<div>I am async!</div>\\\", }); }, 1000); }); Vue.component(\\\"async-webpack-example\\\", function (resolve) { // 这个特殊的 `require` 语法将会告诉 webpack // 自动将你的构建代码切割成多个包，这些包 // 会通过 Ajax 请求加载 require([\\\"./my-async-component\\\"], resolve); }); Vue.component( \\\"async-webpack-example\\\", // 这个动态导入会返回一个 `Promise` 对象。 () => import(\\\"./my-async-component\\\") ); new Vue({ // ... components: { \\\"my-component\\\": () => import(\\\"./my-async-component\\\"), }, });\",\"resolveAsyncComponents\",\"export function resolveAsyncComponents(matched: Array<RouteRecord>): Function { return (to, from, next) => { let hasAsync = false; let pending = 0; let error = null; // matched 要激活的主机 // flatMapComponents 从matched 中 获取 路由 components实例 // def components // _ instances // match records // key components.key flatMapComponents(matched, (def, _, match, key) => { // if it's a function and doesn't have cid attached, // assume it's an async component resolve function. // we are not using Vue's default async resolving mechanism because // we want to halt the navigation until the incoming component has been // resolved. if (typeof def === \\\"function\\\" && def.cid === undefined) { hasAsync = true; pending++; const resolve = once((resolvedDef) => { if (isESModule(resolvedDef)) { resolvedDef = resolvedDef.default; } // save resolved on async factory in case it's used elsewhere def.resolved = typeof resolvedDef === \\\"function\\\" ? resolvedDef : _Vue.extend(resolvedDef); match.components[key] = resolvedDef; pending--; if (pending <= 0) { next(); } }); const reject = once((reason) => { const msg = `Failed to resolve async component ${key}: ${reason}`; process.env.NODE_ENV !== \\\"production\\\" && warn(false, msg); if (!error) { error = isError(reason) ? reason : new Error(msg); next(error); } }); let res; try { res = def(resolve, reject); } catch (e) { reject(e); } if (res) { if (typeof res.then === \\\"function\\\") { res.then(resolve, reject); } else { // new syntax in Vue 2.3 const comp = res.component; if (comp && typeof comp.then === \\\"function\\\") { comp.then(resolve, reject); } } } } }); if (!hasAsync) next(); }; }\"]},\"654\":{\"h\":\"extractGuards\",\"t\":[\"获取路由守卫 从 record 中的 component 组件中获取到对应的路由导航 \",\"// 获取组件离开守卫 function extractLeaveGuards(deactivated: Array<RouteRecord>): Array<?Function> { return extractGuards(deactivated, \\\"beforeRouteLeave\\\", bindGuard, true); } // 获取组件更新守卫 function extractUpdateHooks(updated: Array<RouteRecord>): Array<?Function> { return extractGuards(updated, \\\"beforeRouteUpdate\\\", bindGuard); } function bindGuard(guard: NavigationGuard, instance: ?_Vue): ?NavigationGuard { if (instance) { return function boundRouteGuard() { return guard.apply(instance, arguments); }; } } // 获取 路由导航函数 function extractGuards( records: Array<RouteRecord>, name: string, bind: Function, reverse?: boolean ): Array<?Function> { // fn => 从record记录中的 components 遍历 组件name，获取到 component const guards = flatMapComponents(records, (def, instance, match, key) => { // 更具 key 从 component.options 中获取 路由导航函数 const guard = extractGuard(def, name); if (guard) { return Array.isArray(guard) ? guard.map((guard) => bind(guard, instance, match, key)) : // guard.apply(instance,arguments) // 改变 this 为 组件 bind(guard, instance, match, key); } }); // reverse 将数组中元素的位置颠倒 return flatten(reverse ? guards.reverse() : guards); } function extractGuard( def: Object | Function, key: string ): NavigationGuard | Array<NavigationGuard> { if (typeof def !== \\\"function\\\") { // extend now so that global mixins are applied. def = _Vue.extend(def); } return def.options[key]; } export function flatMapComponents( matched: Array<RouteRecord>, fn: Function ): Array<?Function> { return flatten( matched.map((m) => { // 从record记录中的 components 遍历 组件name，获取到 component return Object.keys(m.components).map((key) => fn(m.components[key], m.instances[key], m, key) ); }) ); } export function flatten(arr: Array<any>): Array<any> { return Array.prototype.concat.apply([], arr); }\"]},\"655\":{\"h\":\"runQueue\",\"t\":[\"执行 路由导航\",\"// fn iterator // cb runQueue () => {} export function runQueue( queue: Array<?NavigationGuard>, fn: Function, cb: Function ) { const step = (index) => { if (index >= queue.length) { cb(); } else { if (queue[index]) { fn(queue[index], () => { step(index + 1); }); } else { step(index + 1); } } }; step(0); } // hook 路由导航函数 const iterator = (hook: NavigationGuard, next) => { // confirmTransition this.pending = router if (this.pending !== route) { return abort(createNavigationCancelledError(current, route)); } try { // to from next() hook(route, current, (to: any) => { if (to === false) { // next(false) -> abort navigation, ensure current URL this.ensureURL(true); abort(createNavigationAbortedError(current, route)); } else if (isError(to)) { this.ensureURL(true); abort(to); } else if ( typeof to === \\\"string\\\" || (typeof to === \\\"object\\\" && (typeof to.path === \\\"string\\\" || typeof to.name === \\\"string\\\")) ) { // next('/') or next({ path: '/' }) -> redirect abort(createNavigationRedirectedError(current, route)); if (typeof to === \\\"object\\\" && to.replace) { this.replace(to); } else { this.push(to); } } else { // confirm transition and pass on the value next(to); } }); } catch (e) { abort(e); } }; // queue 路由导航数组 runQueue(queue, iterator, () => { // wait until async components are resolved before // extracting in-component enter guards // 获取 beforeRouteEnter const enterGuards = extractEnterGuards(activated); // beforeResolve const queue = enterGuards.concat(this.router.resolveHooks); runQueue(queue, iterator, () => { if (this.pending !== route) { return abort(createNavigationCancelledError(current, route)); } this.pending = null; // 向history 添加或替换一条记录 // 页面滚动 // 执行 afterEach 路由导航 onComplete(route); // app = vue if (this.router.app) { this.router.app.$nextTick(() => { // ?? handleRouteEntered(route); }); } }); });\"]},\"656\":{\"h\":\"router-view 更新机制\",\"t\":[\"_route 改变触发更新\",\"将路由主机渲染出来\",\"// core/global-api Vue.component(\\\"RouterView\\\", View);\",\"Vue.component\",\"Vue.component = function ( id: string, definition?: Function | Object ): Function | Object | void { if (!definition) { return this.options[type + \\\"s\\\"][id]; } else { /* istanbul ignore if */ // @ts-expect-error definition.name = definition.name || id; // _base = Vue // extend 构造一个 Vue 的子类 definition = this.options._base.extend(definition); // 挂载到Vue.options.components里面 this.options[\\\"components\\\"][id] = definition; return definition; } };\",\"router-view\",\"export default { name: \\\"RouterView\\\", // 定义为函数式组件 functional: true, props: { name: { type: String, default: \\\"default\\\", }, }, // _createElement render(_, { props, children, parent, data }) { // used by devtools to display a router-view badge // 表示当前主机为router-view data.routerView = true; // directly use parent context's createElement() function // so that components rendered by router-view can resolve named slots const h = parent.$createElement; const name = props.name; const route = parent.$route; const cache = parent._routerViewCache || (parent._routerViewCache = {}); // determine current view depth, also check to see if the tree // has been toggled inactive but kept-alive. // 当前 router-view嵌套深度 let depth = 0; let inactive = false; while (parent && parent._routerRoot !== parent) { const vnodeData = parent.$vnode ? parent.$vnode.data : {}; if (vnodeData.routerView) { depth++; } if (vnodeData.keepAlive && parent._directInactive && parent._inactive) { inactive = true; } parent = parent.$parent; } data.routerViewDepth = depth; // render previous view if the tree is inactive and kept-alive // 处理 keep-alive if (inactive) { const cachedData = cache[name]; const cachedComponent = cachedData && cachedData.component; if (cachedComponent) { // #2301 // pass props if (cachedData.configProps) { fillPropsinData( cachedComponent, data, cachedData.route, cachedData.configProps ); } return h(cachedComponent, data, children); } else { // render previous empty view return h(); } } const matched = route.matched[depth]; // 获取组件 const component = matched && matched.components[name]; // render empty node if no matched route or no config component if (!matched || !component) { cache[name] = null; return h(); } // cache component cache[name] = { component }; // attach instance registration hook // this will be called in the instance's injected lifecycle hooks data.registerRouteInstance = (vm, val) => { // val could be undefined for unregistration const current = matched.instances[name]; if ((val && current !== vm) || (!val && current === vm)) { matched.instances[name] = val; } }; // also register instance in prepatch hook // in case the same component instance is reused across different routes (data.hook || (data.hook = {})).prepatch = (_, vnode) => { matched.instances[name] = vnode.componentInstance; }; // register instance in init hook // in case kept-alive component be actived when routes changed data.hook.init = (vnode) => { if ( vnode.data.keepAlive && vnode.componentInstance && vnode.componentInstance !== matched.instances[name] ) { matched.instances[name] = vnode.componentInstance; } // if the route transition has already been confirmed then we weren't // able to call the cbs during confirmation as the component was not // registered yet, so we call it here. handleRouteEntered(route); }; const configProps = matched.props && matched.props[name]; // save route and configProps in cache if (configProps) { extend(cache[name], { route, configProps, }); fillPropsinData(component, data, route, configProps); } return h(component, data, children); }, };\"]},\"657\":{\"c\":[\"Vue\"]},\"658\":{\"h\":\"Vuex 3.x 框架原理分析\",\"t\":[\"vuex 使用\",\"main.js\",\"import Vue from \\\"vue\\\"; import Vuex from \\\"vuex\\\"; Vue.use(Vuex); const store = new Vuex.store({ state: { count: 0 }, mutations: { increment(state) { state.count++; }, }, actions: { increment(context) { context.commit(\\\"increment\\\"); }, }, }); new Vue({ store, // ... });\"]},\"659\":{\"h\":\"Vue.use 安装\",\"t\":[\"install\",\"export function install(_Vue) { if (Vue && _Vue === Vue) { if (__DEV__) { console.error( \\\"[vuex] already installed. Vue.use(Vuex) should be called only once.\\\" ); } return; } Vue = _Vue; applyMixin(Vue); }\",\"applyMixin通过全局 mixin 将$store 混入到所有 vue 组件中\",\"applyMixin\",\"export default function (Vue) { const version = Number(Vue.version.split(\\\".\\\")[0]); if (version >= 2) { Vue.mixin({ beforeCreate: vuexInit }); } else { // 处理 vue 1.x的代码 // 。。。 } // this = Vue实例 // options.store function vuexInit() { const options = this.$options; // store injection if (options.store) { this.$store = typeof options.store === \\\"function\\\" ? options.store() : options.store; } else if (options.parent && options.parent.$store) { // 子组件从其父组件引用$store属性，层层嵌套进行设置 this.$store = options.parent.$store; } } }\"]},\"660\":{\"h\":\"Store 类\",\"t\":[\"class Store\",\"// 定义局部 Vue 变量，用于判断是否已经装载和减少全局作用域查找。 let Vue; // bind on install export class Store { /* options => new Vuex.store(options) {state,getter,mutation,action} */ constructor(options = {}) { // 若处于浏览器环境下且加载过Vue，则执行install方法。 if (!Vue && typeof window !== \\\"undefined\\\" && window.Vue) { install(window.Vue); } // 用于判断是否 mutation 更改的state this._committing = false; // action操作对象 this._actions = Object.create(null); // 存放 action订阅 this._actionSubscribers = []; // mutations操作对象 this._mutations = Object.create(null); // getter 操作对象 this._wrappedGetters = Object.create(null); // 存放 modules 构建module树 this._modules = new ModuleCollection(options); this._modulesNamespaceMap = Object.create(null); // 收集订阅者 // https://v3.vuex.vuejs.org/zh/api/#watch this._subscribers = []; // Vue组件用于watch监视变化 this._watcherVM = new Vue(); this._makeLocalGettersCache = Object.create(null); const store = this; const { dispatch, commit } = this; this.dispatch = function boundDispatch(type, payload) { return dispatch.call(store, type, payload); }; this.commit = function boundCommit(type, payload, options) { return commit.call(store, type, payload, options); }; // strict mode this.strict = strict; // 获取 state const state = this._modules.root.state; // 安装 module installModule(this, state, [], this._modules.root); // initialize the store vm, which is responsible for the reactivity // (also registers _wrappedGetters as computed properties) resetStoreVM(this, state); // apply plugins plugins.forEach((plugin) => plugin(this)); const useDevtools = options.devtools !== undefined ? options.devtools : Vue.config.devtools; if (useDevtools) { devtoolPlugin(this); } } }\"]},\"661\":{\"h\":\"dispatch\",\"t\":[\"this.dispatch = function boundDispatch(type, payload) { return dispatch.call(store, type, payload); }; // type action中的方法 // payload 传递给action的参数 store.dispatch(\\\"increment\\\", 10);\",\"dispatch\",\" dispatch (_type, _payload) { // check object-style dispatch const { type, payload } = unifyObjectStyle(_type, _payload) const action = { type, payload } // 获取 当前 type下所有action处理函数的集合 const entry = this._actions[type] this._actionSubscribers .slice() .filter(sub => sub.before) .forEach(sub => sub.before(action, this.state)) const result = entry.length > 1 ? Promise.all(entry.map(handler => handler(payload))) : entry[0](payload) return new Promise((resolve, reject) => { result.then(res => { this._actionSubscribers .filter(sub => sub.after) .forEach(sub => sub.after(action, this.state)) resolve(res) }) }) }\"]},\"662\":{\"h\":\"commit\",\"t\":[\"this.commit = function boundCommit(type, payload, options) { return commit.call(store, type, payload, options); }; // type mutations中的 type store.commit(\\\"increment\\\");\",\"commit\",\"commit (_type, _payload, _options) { // check object-style commit const { type, payload, options } = unifyObjectStyle(_type, _payload, _options) const mutation = { type, payload } const entry = this._mutations[type] // 专用修改state方法，其他修改state方法均是非法修改 this._withCommit(() => { entry.forEach(function commitIterator (handler) { handler(payload) }) }) // 订阅者函数遍历执行，传入当前的mutation对象和当前的state this._subscribers .slice() // shallow copy to prevent iterator invalidation if subscriber synchronously calls unsubscribe .forEach(sub => sub(mutation, this.state)) } _withCommit (fn) { // 保存之前的提交状态 const committing = this._committing // 进行本次提交，若不设置为true，直接修改state，strict模式下，Vuex将会产生非法修改state的警告 this._committing = true // 执行state的修改操作 fn() this._committing = committing }\"]},\"663\":{\"h\":\"module 安装\",\"t\":[\"this._modules = new ModuleCollection(options); // 获取 state const state = this._modules.root.state; // 安装 module installModule(this, state, [], this._modules.root); resetStoreVM(this, state);\",\"const moduleA = { state: () => ({ ... }), mutations: { ... }, actions: { ... }, getters: { ... } } const moduleB = { state: () => ({ ... }), mutations: { ... }, actions: { ... } } const store = new Vuex.Store({ modules: { a: moduleA, b: moduleB } }) store.state.a // -> moduleA 的状态 store.state.b // -> moduleB 的状态\",\"收集模块构造模块树\",\"ModuleCollection\",\"export default class ModuleCollection { // rawRootModule = options constructor(rawRootModule) { // register root module (Vuex.Store options) this.register([], rawRootModule, false); } get(path) { // this.root 为默认值 return path.reduce((module, key) => { return module.getChild(key); }, this.root); } register(path, rawModule, runtime = true) { const newModule = new Module(rawModule, runtime); if (path.length === 0) { // 将root module 赋值给 root // this.root.state = options.state this.root = newModule; } else { // -1 表示最后一个元素 (不包含最后一个元素) // 浅拷贝 path // 获取 父module const parent = this.get(path.slice(0, -1)); // 将循环注册的子模块 添加到父模块的 _children对象中 parent.addChild(path[path.length - 1], newModule); } // register nested modules // 注册子模块 if (rawModule.modules) { forEachValue(rawModule.modules, (rawChildModule, key) => { this.register(path.concat(key), rawChildModule, runtime); }); } } }\",\"export default class Module { constructor(rawModule, runtime) { this.runtime = runtime; // Store some children item this._children = Object.create(null); // Store the origin module object which passed by programmer this._rawModule = rawModule; const rawState = rawModule.state; // Store the origin module's state this.state = (typeof rawState === \\\"function\\\" ? rawState() : rawState) || {}; } getChild(key) { return this._children[key]; } addChild(key, module) { this._children[key] = module; } }\",\"module 安装，注册对应的 state,mutations,actions,getters\",\"installModule\",\"// function installModule(store, rootState, path, module, hot) { const isRoot = !path.length; const namespace = store._modules.getNamespace(path); // register in namespace map // 注册命名空间 if (module.namespaced) { if (store._modulesNamespaceMap[namespace] && __DEV__) { console.error( `[vuex] duplicate namespace ${namespace} for the namespaced module ${path.join( \\\"/\\\" )}` ); } store._modulesNamespaceMap[namespace] = module; } // set state // 不是跟主机设置 state方法 // this.$store.a.state.stateA if (!isRoot && !hot) { const parentState = getNestedState(rootState, path.slice(0, -1)); const moduleName = path[path.length - 1]; store._withCommit(() => { Vue.set(parentState, moduleName, module.state); }); } const local = (module.context = makeLocalContext(store, namespace, path)); // 注册对应模块的mutation，供state修改使用 module.forEachMutation((mutation, key) => { const namespacedType = namespace + key; registerMutation(store, namespacedType, mutation, local); }); // function registerMutation(store, type, handler, local) { const entry = store._mutations[type] || (store._mutations[type] = []); entry.push(function wrappedMutationHandler(payload) { handler.call(store, local.state, payload); }); } // 注册对应模块的action，供数据操作、提交mutation等异步操作使用 module.forEachAction((action, key) => { const type = action.root ? key : namespace + key; const handler = action.handler || action; registerAction(store, type, handler, local); }); function registerAction(store, type, handler, local) { const entry = store._actions[type] || (store._actions[type] = []); entry.push(function wrappedActionHandler(payload) { let res = handler.call( store, { dispatch: local.dispatch, commit: local.commit, getters: local.getters, state: local.state, rootGetters: store.getters, rootState: store.state, }, payload ); if (!isPromise(res)) { res = Promise.resolve(res); } if (store._devtoolHook) { return res.catch((err) => { store._devtoolHook.emit(\\\"vuex:error\\\", err); throw err; }); } else { return res; } }); } // 注册对应模块的getters，供state读取使用 module.forEachGetter((getter, key) => { const namespacedType = namespace + key; registerGetter(store, namespacedType, getter, local); }); function registerGetter(store, type, rawGetter, local) { if (store._wrappedGetters[type]) { return; } store._wrappedGetters[type] = function wrappedGetter(store) { return rawGetter( local.state, // local state local.getters, // local getters store.state, // root state store.getters // root getters ); }; } // 遍历子module 安装 module.forEachChild((child, key) => { installModule(store, rootState, path.concat(key), child, hot); }); }\",\"store 组件初始化\",\"resetStoreVM\",\"function resetStoreVM(store, state, hot) { const oldVm = store._vm; // bind store public getters store.getters = {}; // reset local getters cache store._makeLocalGettersCache = Object.create(null); const wrappedGetters = store._wrappedGetters; const computed = {}; // 选好遍历所有getter forEachValue(wrappedGetters, (fn, key) => { computed[key] = partial(fn, store); Object.defineProperty(store.getters, key, { // this.$store.getters.xxxgetters 能够访问 get: () => store._vm[key], // enumerable: true, // for local getters }); }); // use a Vue instance to store the state tree // suppress warnings just in case the user has added // some funky global mixins const silent = Vue.config.silent; Vue.config.silent = true; // 设置新的storeVm，将当前初始化的state以及getters作为computed属性（刚刚遍历生成的） // Vuex其实构建的就是一个名为store的vm组件 store._vm = new Vue({ data: { $$state: state, }, computed, }); Vue.config.silent = silent; // enable strict mode for new vm if (store.strict) { // 该方法对state执行$watch以禁止从mutation外部修改state enableStrictMode(store); function enableStrictMode(store) { store._vm.$watch( \\\"state\\\", () => { assert( store._committing, `Do not mutate vuex store state outside mutation handlers.` ); }, { deep: true, sync: true } ); } } // 若不是初始化过程执行的该方法，将旧的组件state设置为null，强制更新所有监听者(watchers)，待更新生效，DOM更新完成后，执行vm组件的destroy方法进行销毁，减少内存的占用 if (oldVm) { if (hot) { // dispatch changes in all subscribed watchers // to force getter re-evaluation for hot reloading. store._withCommit(() => { oldVm._data.$$state = null; }); } Vue.nextTick(() => oldVm.$destroy()); } }\"]},\"664\":{\"h\":\"辅助函数\",\"t\":[\"computed: mapState({ // 箭头函数可使代码更简练 count: (state) => state.count, // 传字符串参数 'count' 等同于 `state => state.count` countAlias: \\\"count\\\", // 为了能够使用 `this` 获取局部状态，必须使用常规函数 countPlusLocalState(state) { return state.count + this.localCount; }, });\",\"mapState\",\"export const mapState = normalizeNamespace((namespace, states) => { const res = {}; normalizeMap(states).forEach(({ key, val }) => { res[key] = function mappedState() { let state = this.$store.state; let getters = this.$store.getters; if (namespace) { const module = getModuleByNamespace(this.$store, \\\"mapState\\\", namespace); if (!module) { return; } state = module.context.state; getters = module.context.getters; } return typeof val === \\\"function\\\" ? val.call(this, state, getters) : state[val]; }; // mark vuex getter for devtools res[key].vuex = true; }); return res; });\",\" computed: { // 使用对象展开运算符将 getter 混入 computed 对象中 ...mapGetters([ 'doneTodosCount', 'anotherGetter', // ... ]) }\",\"mapGetters\",\"export const mapGetters = normalizeNamespace((namespace, getters) => { const res = {}; normalizeMap(getters).forEach(({ key, val }) => { // The namespace has been mutated by normalizeNamespace val = namespace + val; res[key] = function mappedGetter() { if ( namespace && !getModuleByNamespace(this.$store, \\\"mapGetters\\\", namespace) ) { return; } return this.$store.getters[val]; }; // mark vuex getter for devtools res[key].vuex = true; }); return res; });\"]},\"665\":{\"h\":\"min-vux\",\"t\":[\"let Vue; class Store { constructor(options) { // 接收用户传入的参数 this.$options = options; // 显式绑定this指向（dispatch中调用commit,commit的指向是undefined） this.commit = this.commit.bind(this); // 实现getters this.getters = {}; let computed = {}; var store = this; Object.keys(this.$options.getters).forEach((key) => { const fn = this.$options.getters[key]; computed[key] = function () { return fn(store.state); }; Object.defineProperty(this.getters, key, { get() { return store._vm[key]; }, }); }); // 响应式处理 this._vm = new Vue({ data() { return { $$state: options.state, }; }, computed, }); } // 实现state get state() { return this._vm._data.$$state; } set state(val) { console.log(\\\"只能通过commit修改state的值\\\"); return; } // 实现commit commit(event, payload) { const fn = this.$options.mutations[event]; //找到对应mutations里面的函数 if (!fn) { console.error(\\\"没有此mutation方法\\\"); return; } //判断有无此方法 fn(this.state, payload); //传入state值，执行此方法 } // 实现dispatch dispatch(event, payload) { const fn = this.$options.actions[event]; if (!fn) { console.error(\\\"没有此mutation方法\\\"); return; } fn(this, payload); } } function install(_Vue) { Vue = _Vue; Vue.mixin({ beforeCreate() { // if判断是因为我们只在根实例里面传入了store if (this.$options.store) { Vue.prototype.$store = this.$options.store; } }, }); } export default { Store, install, };\"]},\"666\":{\"c\":[\"Vue\"]},\"667\":{\"h\":\"Vue2.x watch原理分析\",\"t\":[\"watch 使用\",\"var vm = new Vue({ data: { a: 1, b: 2, c: 3, d: 4, e: { f: { g: 5, }, }, }, watch: { a: function (val, oldVal) { console.log(\\\"new: %s, old: %s\\\", val, oldVal); }, // 方法名 b: \\\"someMethod\\\", // 该回调会在任何被侦听的对象的 property 改变时被调用，不论其被嵌套多深 c: { handler: function (val, oldVal) { /* ... */ }, deep: true, }, // 该回调将会在侦听开始之后被立即调用 d: { handler: \\\"someMethod\\\", immediate: true, }, // 你可以传入回调数组，它们会被逐一调用 e: [ \\\"handle1\\\", function handle2(val, oldVal) { /* ... */ }, { handler: function handle3(val, oldVal) { /* ... */ }, /* ... */ }, ], // watch vm.e.f's value: {g: 5} \\\"e.f\\\": function (val, oldVal) { /* ... */ }, }, });\",\"watch:{ name(newName) {...} } this.$watch('name',function (newName) {...})\"]},\"668\":{\"h\":\"init\",\"t\":[\"export function initState(vm: Component) { const opts = vm.$options; if (opts.watch && opts.watch !== nativeWatch) { initWatch(vm, opts.watch); } } function initWatch(vm: Component, watch: Object) { for (const key in watch) { const handler = watch[key]; if (isArray(handler)) { for (let i = 0; i < handler.length; i++) { createWatcher(vm, key, handler[i]); } } else { createWatcher(vm, key, handler); } } }\"]},\"669\":{\"h\":\"createWatcher\",\"t\":[\"function createWatcher( vm: Component, expOrFn: string | (() => any), //key handler: any, options?: Object ) { if (isPlainObject(handler)) { options = handler; handler = handler.handler; } if (typeof handler === \\\"string\\\") { handler = vm[handler]; } return vm.$watch(expOrFn, handler, options); }\"]},\"670\":{\"h\":\"$watch\",\"t\":[\"Vue.prototype.$watch = function ( expOrFn: string | (() => any), cb: any, options?: Record<string, any> ): Function { const vm: Component = this; if (isPlainObject(cb)) { // 如果cb是对象 return createWatcher(vm, expOrFn, cb, options); } options = options || {}; // user Watcher 标记 options.user = true; // vm = vue //expOrFn = key // cb handler // options = {immediate?: true,deep?:true} const watcher = new Watcher(vm, expOrFn, cb, options); // 立刻执行 if (options.immediate) { const info = `callback for immediate watcher \\\"${watcher.expression}\\\"`; pushTarget(); invokeWithErrorHandling(cb, vm, [watcher.value], vm, info); popTarget(); } // 取消监听 return function unwatchFn() { watcher.teardown(); }; };\",\"watcher\",\"class Watcher { constructor() { this.deep = !!options.deep; this.user = !!options.user; this.sync = !!options.sync; this.active = true; if (isFunction(expOrFn)) { this.getter = expOrFn; } else { this.getter = parsePath(expOrFn); if (!this.getter) { this.getter = noop; } } this.value = this.get(); } }\",\"匹配 vm 上的对象\",\"parsePath\",\"const bailRE = /[^\\\\w.$]/; // 对象结构 export function parsePath(path: string): any { if (bailRE.test(path)) { return; } const segments = path.split(\\\".\\\"); return function (obj) { // 调用的时候 obj = vm // vm.a.b.c for (let i = 0; i < segments.length; i++) { if (!obj) return; //a.b.c // a = a[b] // a.b = a.b[c] // a.b.c obj = obj[segments[i]]; } // 返回该数据 return obj; }; }\",\"Watcher\",\"class Watcher { constructor() { this.value = this.get(); } get() { pushTarget(this) let value const vm = this.vm try { // this.getter = 上面的闭包 // value = vm上的值 // 触发 vm上的值 的get // 进行依赖收集 value = this.getter.call(vm, vm) } catch (e: any) { if (this.user) { handleError(e, vm, `getter for watcher \\\"${this.expression}\\\"`) } else { throw e } } finally { // \\\"touch\\\" every property so they are all tracked as // dependencies for deep watching // 判断是否需要深度监听 if (this.deep) { traverse(value) } popTarget() this.cleanupDeps() } return value } // 派发更新 run() { if (this.active) { const value = this.get() if ( value !== this.value || // Deep watchers and watchers on Object/Arrays should fire even // when the value is the same, because the value may // have mutated. isObject(value) || this.deep ) { // set new value const oldValue = this.value this.value = value // watch 使用的Watcher if (this.user) { const info = `callback for watcher \\\"${this.expression}\\\"` invokeWithErrorHandling( this.cb, this.vm, [value, oldValue], this.vm, info ) } else { this.cb.call(this.vm, value, oldValue) } } } } }\",\"invokeWithErrorHandling\",\"export function invokeWithErrorHandling( handler: Function, // watch 的函数 context: any, // vm args: null | any[], // watch 函数 传入的参数 vm: any, info: string ) { let res try { // vm.handler(args) 调用 watch的函数 res = args ? handler.apply(context, args) : handler.call(context) if (res && !res._isVue && isPromise(res) && !(res as any)._handled) { res.catch(e => handleError(e, vm, info + ` (Promise/async)`)) // issue #9511 // avoid catch triggering multiple times when nested calls ;(res as any)._handled = true } } catch (e: any) { handleError(e, vm, info) } return res }\"]},\"671\":{\"h\":\"步骤\",\"t\":[\"依赖收集\",\"利用响应式数据 get 时的 dep.depend();进行依赖收集\",\"new Watcher() => this.get() pushTarget(this)赋值为当前 watcher => this.getter() = parsePath(key) 实际是取 vm 上的值 => 触发 vm 上响应式数据收集 => dep.depend() 将 Dep.target = watcher 收集起来\",\"派发更新\",\"响应式数据发生变化 => this.set() => dep.notify() = watcher.update() = watcher.run()=>invokeWithErrorHandling() =>调用 watch 的 handler 函数\"]},\"672\":{\"c\":[\"Vue\"]},\"673\":{\"h\":\"Vue3 对比 Vue2\"},\"674\":{\"h\":\"Performance\"},\"675\":{\"h\":\"diff 算法的优化\",\"t\":[\"vue2 中的虚拟 dom 是全量的对比（每个节点不论写死的还是动态的都会一层一层比较，这就浪费了大部分事件在对比静态节点上）\",\"vue3 新增了静态标记（patchflag）与上次虚拟节点对比时，只对比带有 patch flag 的节点（动态数据所在的节点）；可通过 flag 信息得知当前节点要对比的具体内容。\"]},\"676\":{\"h\":\"hoistStatic 静态提升\",\"t\":[\"vue2无论元素是否参与更新，每次都会重新创建然后再渲染。 vue3对于不参与更新的元素，会做静态提升，只会被创建一次，在渲染时直接复用即可。\"]},\"677\":{\"h\":\"更高效的组件初始化\",\"t\":[\"Vue2组件必须有一个跟节点\",\"<template> <div>1</div> <div>2</div> </template>\"]},\"678\":{\"h\":\"cacheHandlers 事件侦听器缓存\",\"t\":[\"vue2.x中，绑定事件每次触发都要重新生成全新的function去更新，cacheHandlers 是Vue3中提供的事件缓存对象，当 cacheHandlers 开启，会自动生成一个内联函数，同时生成一个静态节点。当事件再次触发时，只需从缓存中调用即可，无需再次更新。 默认情况下onClick会被视为动态绑定，所以每次都会追踪它的变化，但是同一个函数没必要追踪变化，直接缓存起来复用即可。\"]},\"679\":{\"h\":\"Three Shaking\",\"t\":[\" Vue 3.0 中没有被用到的模块可以不被打包到编译后的文件中，被 TreeShake 掉。当只有一个HelloWorld的时候 Vue3打包后 13.5kb。所有的组件全部加载进来时是 22.5kb\"]},\"680\":{\"h\":\"更好的ts支持\"},\"681\":{\"h\":\"Composition API\"},\"682\":{\"h\":\"Fragment\",\"t\":[\" 类似于react的<></>\"]},\"683\":{\"h\":\"Teleport\",\"t\":[\" 类似react的 portal 但因为Chrome有个提案，会增加一个名为Portal的原生element，为避免命名冲突，改为Teleport\"]},\"684\":{\"c\":[\"Vue\"]},\"685\":{\"c\":[\"vue3\"]},\"686\":{\"h\":\"ast\"},\"687\":{\"h\":\"解析过程\",\"t\":[\"AST 整个解析过程分为两个步骤\",\"分词：将整个代码字符串分割成语法单元数组 语法分析：建立分析语法单元之间的关系\"]},\"688\":{\"h\":\"语法单元\",\"t\":[\"Javascript 代码中的语法单元主要包括以下这么几种\",\"关键字：const、let、var等\",\"标识符：可能是一个变量，也可能是 if、else 这些关键字，又或者是 true、false 这些常量\",\"运算符\",\"数字\",\"空格\",\"注释\"]},\"689\":{\"h\":\"词法分析\",\"t\":[\"let jsx = `let element=<h1>hello</h1>`; function lexical(code) { const tokens = []; for (let i = 0; i < code.length; i++) { let char = code.charAt(i); if (char == \\\"=\\\") { tokens.push({ type: \\\"operator\\\", value: char, }); } if (char == \\\"<\\\") { const token = { type: \\\"JSXElement\\\", value: char, }; tokens.push(token); let isClose = false; for (i++; i < code.length; i++) { char = code.charAt(i); token.value += char; if (char == \\\">\\\") { if (isClose) { break; } else { isClose = true; } } } continue; } if (/[a-zA-Z\\\\$\\\\_]/.test(char)) { const token = { type: \\\"Identifier\\\", value: char, }; tokens.push(token); for (i++; i < code.length; i++) { char = code.charAt(i); if (/[a-zA-Z\\\\$\\\\_]/.test(char)) { token.value += char; } else { i--; break; } } continue; } if (/\\\\s/.test(char)) { const token = { type: \\\"whitespace\\\", value: char, }; tokens.push(token); for (i++; i < code.length; i++) { char = code.charAt[i]; if (/\\\\s/.test(char)) { token.value += char; } else { i--; break; } } continue; } } return tokens; } let result = lexical(jsx); console.log(result);\",\"result\",\"[ { type: \\\"Identifier\\\", value: \\\"let\\\" }, { type: \\\"whitespace\\\", value: \\\" \\\" }, { type: \\\"Identifier\\\", value: \\\"element\\\" }, { type: \\\"operator\\\", value: \\\"=\\\" }, { type: \\\"JSXElement\\\", value: \\\"<h1>hello</h1>\\\" }, ];\"]},\"690\":{\"h\":\"语法分析\",\"t\":[\"语义分析则是将得到的词汇进行一个立体的组合，确定词语之间的关系\",\"简单来说语法分析是对语句和表达式识别，这是个递归过程\",\"// babylon7 https://astexplorer.net/ // babylon7 https://astexplorer.net/ function parse(tokens) { const ast = { type: \\\"Program\\\", body: [], sourceType: \\\"script\\\", }; let i = 0; //标示当前位置 let currentToken; //当前的符号 while ((currentToken = tokens[i])) { if ( currentToken.type == \\\"Identifier\\\" && (currentToken.value == \\\"let\\\" || currentToken.value == \\\"var\\\") ) { const VariableDeclaration = { type: \\\"VariableDeclaration\\\", declarations: [], }; i += 2; currentToken = tokens[i]; let VariableDeclarator = { type: \\\"VariableDeclarator\\\", id: { type: \\\"Identifier\\\", name: currentToken.value, }, }; VariableDeclaration.declarations.push(VariableDeclarator); i += 2; currentToken = tokens[i]; if (currentToken.type == \\\"JSXElement\\\") { let value = currentToken.value; let [, type, children] = value.match(/([^<]+?)>([^<]+)<\\\\/\\\\1>/); VariableDeclarator.init = { type: \\\"JSXElement\\\", openingElement: { type: \\\"JSXOpeningElement\\\", name: { type: \\\"JSXIdentifier\\\", name: \\\"h1\\\", }, }, closingElement: { type: \\\"JSXClosingElement\\\", name: { type: \\\"JSXIdentifier\\\", name: \\\"h1\\\", }, }, name: type, children: [ { type: \\\"JSXText\\\", value: \\\"hello\\\", }, ], }; } else { VariableDeclarator.init = { type: \\\"Literal\\\", value: currentToken.value, }; } ast.body.push(VariableDeclaration); } i++; } return ast; } let tokens = [ { type: \\\"Identifier\\\", value: \\\"let\\\" }, { type: \\\"whitespace\\\", value: \\\" \\\" }, { type: \\\"Identifier\\\", value: \\\"element\\\" }, { type: \\\"operator\\\", value: \\\"=\\\" }, { type: \\\"JSXElement\\\", value: \\\"<h1>hello</h1>\\\" }, ]; let result = parse(tokens); console.log(result); console.log(JSON.stringify(result));\",\"result\",\"{ \\\"type\\\": \\\"Program\\\", \\\"body\\\": [{ \\\"type\\\": \\\"VariableDeclaration\\\", \\\"declarations\\\": [{ \\\"type\\\": \\\"VariableDeclarator\\\", \\\"id\\\": { \\\"type\\\": \\\"Identifier\\\", \\\"name\\\": \\\"element\\\" }, \\\"init\\\": { \\\"type\\\": \\\"JSXElement\\\", \\\"openingElement\\\": { \\\"type\\\": \\\"JSXOpeningElement\\\", \\\"name\\\": { \\\"type\\\": \\\"JSXIdentifier\\\", \\\"name\\\": \\\"h1\\\" } }, \\\"closingElement\\\": { \\\"type\\\": \\\"JSXClosingElement\\\", \\\"name\\\": { \\\"type\\\": \\\"JSXIdentifier\\\", \\\"name\\\": \\\"h1\\\" } }, \\\"name\\\": \\\"h1\\\", \\\"children\\\": [{ \\\"type\\\": \\\"JSXText\\\", \\\"value\\\": \\\"hello\\\" }] } }] }], \\\"sourceType\\\": \\\"script\\\" }\"]},\"691\":{\"c\":[\"Webpack\"]},\"692\":{\"h\":\"babel是什么\",\"t\":[\"Babel是一个工具链，主要用于旧浏览器或者缓解中将ECMAScript 2015+代码转换为向后兼容版本的 JavaScript；\",\"babel会根据browserslist工具进行适配\"]},\"693\":{\"h\":\"plugins\",\"t\":[\"本质就是一个JS程序, 指示着Babel如何对代码进行转换.\",\"插件在 Presets 前运行。\",\"插件顺序从前往后排列。\",\"Preset 顺序是颠倒的（从后往前）。\"]},\"694\":{\"h\":\"@babel/plugin-transform-runtime\",\"t\":[\"转换箭头函数\"]},\"695\":{\"h\":\"\",\"t\":[\"将const、let转换为var\"]},\"696\":{\"h\":\"preset\",\"t\":[\"预设就是一堆插件(Plugin)的组合\",\"预设有三个：\",\"env\",\"react\",\"TypeScript\"]},\"697\":{\"h\":\"@babel/preset-env\",\"t\":[\"允许您使用最新的JavaScript，而不需要微管理您的目标环境需要哪些语法转换(以及可选的浏览器填充)\",\"会根据browerslist工具或者target属性自动配置\",\"presets:[ [\\\"@babel/reset-env\\\",{ // 配置的targets属性会覆盖browserslist； targets:\\\"last 2 version\\\" }] ]\"]},\"698\":{\"h\":\"@babel/preset-react\",\"t\":[\"设置 React\"]},\"699\":{\"h\":\"\",\"t\":[\"当使用了一些语法特性（例如：Promise, Generator, Symbol等以及实例方法例如Array.prototype.includes等）浏览器不认识这些特性就可以使用polyfill来填充或者说打一个补丁，那么就会包含该特性了；\",\"使用\",\"babel7.4.0之前，直接使用@babel/polyfill\",\"babel7.4.0之后，单独引入core-js和regenerator-runtime来完成polyfill的使用\",\"webpack.config.js\",\" module.exports = { module:{ rules:[ { test: /\\\\.js$/, //该文件下的包可能开发已经使用过了 exclude:/node_modules/, use:{ loader:\\\"babel-loader\\\" } } ] } }\",\"babel.config.js\",\" module.exports = { presets:[ [ \\\"@babel/preset-env\\\",{ //在该preset里使用profill //useBuiltIns: 设置以什么样的方式来使用polyfill； useBuiltIns:\\\"usage\\\", //false 不使用polyfill 不需要设置corejs //usage 根据源代码中出现的语言特性，自动检测所需要的polyfill； // 可以设置corejs属性来确定使用的corejs的版本； //entry 根据 browserslist 目标导入所有的polyfill， // 并且需要在入口文件中添加 `import 'core-js/stable'; // import 'regenerator-runtime/runtime'; corejs: 3.8 //设置corejs的版本 } ] ] }\"]},\"700\":{\"h\":\"\",\"t\":[\"使用的polyfill，默认情况是添加的所有特性都是全局的\",\"编写一个工具库，工具库需要使用polyfill；避免污染全局代码使用@babel/plugin-transform-runtime来完成polyfill的功能；\",\"使用\",\"babel.config.js\",\" module.exports = { plugins:[ [\\\"@babel/plugin-transform-tuntime\\\",{ \\\"corejs\\\":3 }] ] }\"]},\"701\":{\"h\":\"\",\"t\":[\"babel本身可以作为一个独立的工具（和postcss一样），不和webpack等构建工具配置来单独使用。\",\"@babel/core：babel的核心代码，必须安装；\",\"@babel/cli：可以让我们在命令行使用babel；\"]},\"702\":{\"h\":\"\",\"t\":[\"转换箭头函数\",\" npm install @babel/plugin-transform-arrow-functions -D npx babel src --out-dir dist --plugins=@babel/plugin-transform-arrow-functions\",\"变量转换\",\" npm install @babel/plugin-transform-block-scoping -D npx babel src --out-dir dist --plugins=@babel/plugin-transform-block-scoping ,@babel/plugin-transform-arrow-functions\"]},\"703\":{\"h\":\"\",\"t\":[\"webpack.config.js\",\" module.exports = { module:{ rules:[ { test:/\\\\.js$/, use:{ loader:\\\"babel-loader\\\" } } ] } }\"]},\"704\":{\"h\":\"\",\"t\":[\"webpack.config.js\",\" module.exports = { module:{ rules:[ { test:/\\\\.js$/, use:{ loader:\\\"babel-loader\\\", options:{ plugins:[ \\\"@babel/plugin-transform-arrow-functions\\\", \\\"@babel/plugin-transform-block-scoping\\\" ] } } } ] } }\"]},\"705\":{\"h\":\"\",\"t\":[\"webpack.config.js\",\" module.exports = { module:{ rules:[ { test:/\\\\.js$/, use:{ loader:\\\"babel-loader\\\", options:{ presets:[ //第一种写法：不使用属性 //“@babel/preset-env” //第二种写法：使用预设属性 [\\\"@babel/preset-env\\\",{ //使用属性 //https://www.babeljs.cn/docs/babel-preset-env }] ] } } } ] } }\"]},\"706\":{\"h\":\"\",\"t\":[\"将webpack中的重复使用的plugins和preset单独抽离出来\",\"babel提供了两种配置文件的编写：\",\"babel.config.json（或者.js，.cjs，.mjs）文件；\",\".babelrc.json（或者.babelrc，.js，.cjs，.mjs）文件；\",\".babelrc.json：早期使用较多的配置方式，但是对于配置Monorepos项目是比较麻烦的；\",\"babel.config.json（babel7）：可以直接作用于Monorepos项目的子包，更加推荐；\",\"babel.config.js\",\" module.exports = { preset:[ [ \\\"@babel/preset-env\\\" ] ] }\"]},\"707\":{\"h\":\"\",\"t\":[\"可以将babel看成就是一个编译器\",\"Babel也拥有编译器的工作流程：\",\"解析阶段（Parsing）\",\"转换阶段（Transformation）\",\"生成阶段（Code Generation）\"]},\"708\":{\"c\":[\"Webpack\",\"Babel\"]},\"709\":{\"h\":\"Browserslist\",\"t\":[\"Browserslist 是一个在不同的前端工具之间，共享目标浏览器和 Node.js 版本的配置：\",\"Autoprefixer\",\"Babel\",\"postcss-preset-env\",\"eslint-plugin-compat\",\"stylelint-no-unsupported-browser-features\",\"postcss-normalize\",\"obsolete-webpack-plugin\"]},\"710\":{\"h\":\"\",\"t\":[\"针对不同的浏览器支持的特性：比如 css 特性、js 语法，之间的兼容性；\",\"Chrome、Safari、IE、Edge、Chrome for Android、UC Browser、QQ Browser 等等；\"]},\"711\":{\"h\":\"\",\"t\":[\"caniuse\"]},\"712\":{\"h\":\"\",\"t\":[\" > 1% #css要兼容市场占有率大于1%的浏览器，js也要兼容市场占有率大于1%的浏览器； last 2 versions # 每个浏览器最新2个版本 not dead #还在更新的浏览器\",\"工具会根据我们的配置来获取相关的浏览器信息，以方便决定是否需要进行兼容性的支持：\",\"条件查询使用的是 caniuse-lite 的工具，这个工具的数据来自于 caniuse 的网站上；\"]},\"713\":{\"h\":\"\",\"t\":[\"defaults：Browserslist 的默认浏览器（> 0.5%, last 2 versions, Firefox ESR, not dead）。\",\"5%：通过全局使用情况统计信息选择的浏览器版本。 >=，<和<=工作过。\",\"5% in US：使用美国使用情况统计信息。它接受两个字母的国家/地区代码。\",\"> 5% in alt-AS：使用亚洲地区使用情况统计信息。有关所有区域代码的列表，请参见 caniuse-lite/data/regions\",\"> 5% in my stats：使用自定义用法数据。\",\"> 5% in browserslist-config-mycompany stats：使用 来自的自定义使用情况数据 browserslist-config-mycompany/browserslist-stats.json。\",\"cover 99.5%：提供覆盖率的最受欢迎的浏览器。\",\"cover 99.5% in US：与上述相同，但国家/地区代码由两个字母组成。\",\"cover 99.5% in my stats：使用自定义用法数据。\",\"dead：24 个月内没有官方支持或更新的浏览器。现在是 IE 10，IE_Mob 11，BlackBerry 10，BlackBerry 7， Samsung 4 和 OperaMobile 12.1。\",\"last 2 versions：每个浏览器的最后 2 个版本。\",\"last 2 Chrome versions：最近 2 个版本的 Chrome 浏览器。\",\"last 2 major versions 或 last 2 iOS major versions：最近 2 个主要版本的所有次要/补丁版本。\",\"node 10 和 node 10.4：选择最新的 Node.js10.x.x 或 10.4.x 版本。 \",\"current node：Browserslist 现在使用的 Node.js 版本。\",\"maintained node versions：所有 Node.js 版本，仍由 Node.js Foundation 维护。\",\"iOS 7：直接使用 iOS 浏览器版本 7。 \",\"Firefox > 20：Firefox 的版本高于 20 >=，<并且<=也可以使用。它也可以与 Node.js 一起使用。\",\"ie 6-8：选择一个包含范围的版本。\",\"Firefox ESR：最新的[Firefox ESR]版本。\",\"PhantomJS 2.1 和 PhantomJS 1.9：选择类似于 PhantomJS 运行时的 Safari 版本。\",\"extends browserslist-config-mycompany：从 browserslist-config-mycompanynpm 包中查询 。\",\"supports es6-module：支持特定功能的浏览器。 es6-module 这是“我可以使用” 页面 feat 的 URL 上的参数。有关所有可用功能的列表，请参见 。caniuse￾lite/data/features\",\"browserslist config：在 Browserslist 配置中定义的浏览器。在差异服务中很有用，可用于修改用户的配置，例如 browserslist config and supports es6-module。\",\"since 2015 或 last 2 years：自 2015 年以来发布的所有版本（since 2015-03 以及 since 2015-03-10）。\",\"unreleased versions 或 unreleased Chrome versions：Alpha 和 Beta 版本。\",\"not ie <= 8：排除先前查询选择的浏览器。\"]},\"714\":{\"h\":\"\",\"t\":[\" npx browserslist \\\">1%, last 2 version, not dead\\\"\"]},\"715\":{\"h\":\"\",\"t\":[\"在package.json配置\",\" \\\"browserslist\\\":[ \\\"last 2 version\\\", \\\"not dead\\\", \\\">0.2%\\\" ]\",\".browserslistrc文件\",\" > 0.5% last 2 version not dead\"]},\"716\":{\"c\":[\"Webpack\"]},\"717\":{\"h\":\"webpack常见配置\"},\"718\":{\"h\":\"\",\"t\":[\"webpack.base.js\",\"const HtmlWebpackPlugin = require(\\\"html-webpack-plugin\\\"); const chalk = require(\\\"chalk\\\"); // 进度条 const ProgressBarPlugin = require(\\\"progress-bar-webpack-plugin\\\"); // const MiniCssExtractPlugin = require(\\\"mini-css-extract-plugin\\\"); // cross-env package中设置 cross-env NODE_ENV=production // const isEnvProduction = process.env.NODE_ENV === \\\"production\\\"; const { VueLoaderPlugin } = require(\\\"vue-loader\\\"); const FriendlyErrorsWebpackPlugin = require(\\\"friendly-errors-webpack-plugin\\\"); // const NodePolyfillPlugin = require('node-polyfill-webpack-plugin') const notifier = require(\\\"node-notifier\\\"); const path = require(\\\"path\\\"); const paths = { entry: \\\"./src/main.js\\\", }; function resolve(p) { return path.resolve(__dirname, p); } module.exports = { entry: paths.entry, module: { rules: [ { test: /\\\\.(t|j)s$/, exclude: /node_modules/, use: { loader: \\\"babel-loader\\\", options: { cacheDirectory: true, }, }, }, { test: /\\\\.vue$/, use: [ { loader: resolve(\\\"../source-code/vue-loader-15.9.8\\\"), // loader:'vue-loader' }, ], }, { test: /\\\\.ts$/, exclude: /node_modules/, loader: \\\"ts-loader\\\", options: { appendTsSuffixTo: [/\\\\.vue$/], }, }, { test: /\\\\.(le|c)ss$/, use: [ \\\"style-loader\\\", // isEnvProduction && MiniCssExtractPlugin.loader, \\\"css-loader\\\", \\\"postcss-loader\\\", \\\"less-loader\\\", ], }, { test: /\\\\.(png|svg|jpe?g|gif)$/, type: \\\"asset\\\", parser: { dataUrlCondition: { maxSize: 10 * 1024, }, }, generator: { filename: \\\"images/[name]-[hash][ext]\\\", }, }, { test: /\\\\.(eot|svg|ttf|woff2?)$/, type: \\\"asset/resource\\\", generator: { filename: \\\"fonts/[name]-[hash][ext]\\\", }, }, ], }, resolve: { alias: { \\\"@\\\": path.resolve(__dirname, \\\"../src\\\"), }, // fallback:{ // path:require.resolve('path-browserify') // } }, plugins: [ // new NodePolyfillPlugin(), new HtmlWebpackPlugin({ title: \\\"source-test\\\", template: \\\"./public/index.html\\\", }), new VueLoaderPlugin(), new ProgressBarPlugin({ format: ` :msg [:bar] ${chalk.green.bold(\\\":percent\\\")}(:elapsed s)`, }), new FriendlyErrorsWebpackPlugin({ onErrors: (severity, errors) => { if (severity !== \\\"error\\\") { return; } const error = errors[0]; notifier.notify({ title: \\\"webpack error\\\", message: severity + \\\":\\\" + error.name, subtitle: error.file || \\\"\\\", }); }, }), ], };\"]},\"719\":{\"h\":\"\",\"t\":[\"webpack.dev.js\",\"const { merge } = require(\\\"webpack-merge\\\"); const baseConfig = require(\\\"./webpack.base\\\"); module.exports = merge(baseConfig, { mode: \\\"development\\\", target: \\\"web\\\", devServer: { // contentBase:'./dist', hot: true, open: true, compress: true, http2: true, }, // webpack5 内置缓存 cache: { type: \\\"filesystem\\\", }, });\"]},\"720\":{\"h\":\"\",\"t\":[\"webpack.prod.js\",\"const { merge } = require(\\\"webpack-merge\\\"); const baseConfig = require(\\\"./webpack.base.js\\\"); // 匹配指定目录的文件 const glob = require(\\\"glob\\\"); const paths = require(\\\"paths\\\"); //将 css 单独抽出一个文件 const MiniCssExtractPlugin = require(\\\"mini-css-extract-plugin\\\"); //css tree shaking const PurgeCssPlugin = require(\\\"purgecss-webpack-plugin\\\"); const CompressionWebpackPlugin = require(\\\"compression-webpack-plugin\\\"); const HtmlMinimizerPlugin = require(\\\"html-minimizer-webpack-plugin\\\"); const TerserPlugin = require(\\\"terser-webpack-plugin\\\"); // html 引入的文件 不会打包 需直接copy过去 const CopyWebpackPlugin = require(\\\"copy-webpack-plugin\\\"); module.exports = merge(baseConfig, { mode: \\\"development\\\", output: { clean: true, //清理打包文件 }, plugins: [ new MiniCssExtractPlugin({ filename: \\\"css/[name].css\\\", }), new PurgeCssPlugin({ paths: glob.sync(`${paths.appSrc}/**/*`, { nodir: true }), }), new CopyWebpackPlugin({ // from后的路径是相对于项目的根目录，to后的路径是相对于打包后的dist目录 patterns: [{ from: \\\"./public\\\", to: \\\"./public\\\" }], }), new HtmlMinimizerPlugin(), new CompressionWebpackPlugin({ test: /\\\\.(js|css)$/, //开启gzip压缩 }), ], optimization: { splitChunks: { // 选择对哪些文件进行拆分，默认是async，即只对动态导入的文件进行拆分 chunks: \\\"all\\\", // 提取chunk的最小体积 minSize: 2000, // 要提取的chunk最少被引用次数 minChunks: 1, // 对要提取的trunk进行分组 cacheGroups: { // 匹配node_modules中的三方库，将其打包成一个trunk defaultVendors: { test: /[\\\\\\\\/]node_modules[\\\\\\\\/]/, name: \\\"vendors\\\", priority: -10, }, default: { // 将至少被两个trunk引入的模块提取出来打包成单独trunk minChunks: 2, name: \\\"default\\\", priority: -20, }, }, }, minimizer: [ new TerserPlugin({ parallel: 4, terserOptions: { parse: { ecma: 8, }, compress: { ecma: 5, warnings: false, comparisons: false, inline: 2, }, mangle: { safari10: true, }, output: { ecma: 5, comments: false, ascii_only: true, }, }, }), ], // 为运行时代码创建一个额外的 chunk runtimeChunk: true, }, });\"]},\"721\":{\"c\":[\"Webpack\"]},\"722\":{\"h\":\"自定义loader\",\"t\":[\"Loader是用于对模块的源代码进行转换（处理），之前我们已经使用过很多Loader，比如css-loader、style-loader、babel-loader等。\"]},\"723\":{\"h\":\"loader本质\",\"t\":[\"Loader本质上是一个导出为函数的JavaScript模块； loader runner库会调用这个函数，然后将上一个loader产生的结果或者资源文件传入进去；\",\"loader返回必须是一个buffer或者javascript字符串\",\"自定义loader\",\"//content：资源文件的内容； //map：sourcemap相关的数据； //meta：一些元数据 module.exports = function (content,map,meta) { console.log(content, \\\"自定义loader\\\"); return content; };\",\"webpack.config.js\",\"const path = require(\\\"path\\\"); module.exports = { context: path.resolve(__dirname, \\\"\\\"), module: { rules: [ { test: /\\\\.js$/i, use: \\\"./custom-loader/custom-loader\\\", }, ], }, };\",\"image-20210904165252768\"]},\"724\":{\"h\":\"\",\"t\":[\"指定loader所在的位置\",\"webpack.config.js\",\"const path = require(\\\"path\\\"); module.exports = { mode: development, context: path.resolve(__dirname, \\\"\\\"), module: { rules: [ { test: /\\\\.js$/i, use: \\\"custom-loader01\\\", }, ], }, resolveLoader: { modules: [\\\"node_modules\\\", \\\"./custom-loader\\\"], }, };\",\"image-20210904170248492\"]},\"725\":{\"h\":\"loader执行顺序\",\"t\":[\"loader 总是 从右到左被调用。有些情况下，loader 只关心 request 后面的 元数据(metadata)，并且忽略前一个 loader 的结果。在实际（从右到左）执行 loader 之前，会先 从左到右 调用 loader 上的 pitch 方法。\",\"image-20210904174723961\"]},\"726\":{\"h\":\"\",\"t\":[\"指定 loader 种类。没有值表示是普通 loader。\",\"Pitching 阶段: loader 上的 pitch 方法，按照 后置(post)、行内(inline)、普通(normal)、前置(pre) 的顺序调用。 Normal 阶段: loader 上的 常规方法，按照 前置(pre)、普通(normal)、行内(inline)、后置(post) 的顺序调用。模块源码的转换， 发生在这个阶段。\",\"webpack.config.js\",\"{ test:/\\\\.js$/i, use:'loader', enforce:'pre' }\"]},\"727\":{\"h\":\"同步loader\",\"t\":[\"默认创建的Loader就是同步的Loader； 这个Loader必须通过 return 或者 this.callback 来返回结果，交给下一个loader来处理； 通常在有错误的情况下，我们会使用 this.callback；\",\"webpack.config.js\",\"module.exports= function (content) { // return content //第一个参数必须是 Error 或者 null； //第二个参数是一个 string或者Buffer； this.callback(null,content) }\"]},\"728\":{\"h\":\"异步loader\",\"t\":[\"webpack.config.js\",\"module.exports = function (content) { const callback = this.async(); setTimeout(() => { callback(null, content); }, 2000); };\"]},\"729\":{\"h\":\"获取传入参数\",\"t\":[\"npm i loader-utils\",\"webpack.config.js\",\" { test: /\\\\.js$/i, use: { loader: \\\"custom-loader01\\\", options: { name: \\\"lu\\\", age: \\\"18\\\", }, }, },\",\"custom-loader.js\",\"const { getOptions } = require(\\\"loader-utils\\\"); //NormalLoader //异步 module.exports = function (content) { const options = getOptions(this); console.log(options, \\\"options\\\"); const callback = this.async(); setTimeout(() => { callback(null, content); }, 2000); };\",\"image-20210904205745311\"]},\"730\":{\"h\":\"校验传入参数\",\"t\":[\"npm i schema-utils -D\",\"custom-schema.json\",\"{ \\\"type\\\": \\\"object\\\", \\\"properties\\\": { \\\"name\\\": { \\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"名字\\\" }, \\\"age\\\": { \\\"type\\\": \\\"number\\\", \\\"description\\\": \\\"年龄\\\" } } }\",\"webpack.config.js\",\" { test: /\\\\.js$/i, use: { loader: \\\"custom-loader01\\\", options: { name: \\\"lu\\\", age: \\\"18\\\", }, }, },\",\"custom-loader.js\",\"const { getOptions } = require(\\\"loader-utils\\\"); const { validate } = require(\\\"schema-utils\\\"); const schema = require(\\\"../custom-schema/custom-schema.json\\\"); //NormalLoader //异步 module.exports = function (content) { const options = getOptions(this); console.log(options, \\\"options\\\"); validate(schema, options); const callback = this.async(); setTimeout(() => { callback(null, content); }, 2000); };\",\"image-20210904205927222\"]},\"731\":{\"c\":[\"Webpack\"]},\"732\":{\"c\":[\"Webpack5\"]},\"733\":{\"h\":\"自定义Plugin\"},\"734\":{\"h\":\"plugin\",\"t\":[\"插件向第三方开发者提供了 webpack 引擎中完整的能力。 使用阶段式的构建回调，开发者可以引入它们自己的行为到 webpack 构建流程中。\"]},\"735\":{\"h\":\"可以加载插件的常用对象\",\"t\":[\"对象\",\"钩子\",\"Compiler\",\"run,compile,compilation,make,emit,done\",\"Compilation\",\"buildModule,normalModuleLoader,succeedModule,finishModules,seal,optimize,after-seal\",\"Module Factory\",\"beforeResolver,afterResolver,module,parser\",\"Parser\",\"program,statement,call,expression\",\"Template\",\"hash,bootstrap,localVars,render\"]},\"736\":{\"h\":\"创建插件\",\"t\":[\"webpack 插件由以下组成：\",\"一个 JavaScript 命名函数。\",\"在插件函数的 prototype 上定义一个 apply 方法。\",\"指定一个绑定到 webpack 自身的事件钩子。\",\"处理 webpack 内部实例的特定数据。\",\"功能完成后调用 webpack 提供的回调。\"]},\"737\":{\"h\":\"compiler 和 compilation\",\"t\":[\"compiler 对象代表了完整的 webpack 环境配置。这个对象在启动 webpack 时被一次性建立，并配置好所有可操作的设置，包括 options，loader 和 plugin。当在 webpack 环境中应用一个插件时，插件将收到此 compiler 对象的引用。可以使用它来访问 webpack 的主环境。\",\"compilation 对象代表了一次资源版本构建。当运行 webpack 开发环境中间件时，每当检测到一个文件变化，就会创建一个新的 compilation，从而生成一组新的编译资源。一个 compilation 对象表现了当前的模块资源、编译生成资源、变化的文件、以及被跟踪依赖的状态信息。compilation 对象也提供了很多关键时机的回调，以供插件做自定义处理时选择使用。\"]},\"738\":{\"h\":\"基本插件架构\",\"t\":[\"插件是由「具有 apply 方法的 prototype 对象」所实例化出来的\",\"这个 apply 方法在安装插件时，会被 webpack compiler 调用一次\",\"apply 方法可以接收一个 webpack compiler 对象的引用，从而可以在回调函数中访问到 compiler 对象\",\"const createCompiler = (rawOptions) => { const options = getNormalizedWebpackOptions(rawOptions); applyWebpackOptionsBaseDefaults(options); const compiler = new Compiler(options.context, options); new NodeEnvironmentPlugin({ infrastructureLogging: options.infrastructureLogging, }).apply(compiler); if (Array.isArray(options.plugins)) { for (const plugin of options.plugins) { if (typeof plugin === \\\"function\\\") { plugin.call(compiler, compiler); } else { plugin.apply(compiler); } } } applyWebpackOptionsDefaults(options); compiler.hooks.environment.call(); compiler.hooks.afterEnvironment.call(); new WebpackOptionsApply().process(options, compiler); compiler.hooks.initialize.call(); return compiler; };\"]},\"739\":{\"h\":\"同步\",\"t\":[\"class DonePlugin { constructor(options) { this.options = options; } apply(compiler) { compiler.hooks.done.tap(\\\"DonePlugin\\\", (stats) => { console.log(\\\"Hello \\\", this.options.name); }); } } module.exports = DonePlugin;\"]},\"740\":{\"h\":\"异步\",\"t\":[\"class DonePlugin { constructor(options) { this.options = options; } apply(compiler) { compiler.hooks.done.tapAsync(\\\"DonePlugin\\\", (stats, callback) => { console.log(\\\"Hello \\\", this.options.name); callback(); }); } } module.exports = DonePlugin;\"]},\"741\":{\"c\":[\"Webpack\"]},\"742\":{\"c\":[\"Webpack5\"]},\"743\":{\"h\":\"什么是loader\"},\"744\":{\"h\":\"loader 本质\",\"t\":[\"| webpack 只能处理 JavaScript 和 JSON 文件，其他类型的文件 webpack 需要借助 loader 来处理,loader 本质就是一个 JavaScript 函数\"]},\"745\":{\"h\":\"loader 的使用\",\"t\":[\"配置方式（官方推荐）\",\"内联方式\",\"配置方式\",\"module.exports = { module: { rules: [ { test: /\\\\.css$/, use: [ // [style-loader](/loaders/style-loader) { loader: \\\"style-loader\\\" }, // [css-loader](/loaders/css-loader) { loader: \\\"css-loader\\\", options: { modules: true, }, }, // [sass-loader](/loaders/sass-loader) { loader: \\\"sass-loader\\\" }, ], }, ], }, };\",\"内联方式\",\"// 使用 ! 将资源中的 loader 分开。每个部分都会相对于当前目录解析。 import Styles from \\\"style-loader!css-loader?modules!./styles.css\\\";\"]},\"746\":{\"h\":\"loader 的分类\",\"t\":[\"配置方式更具Rule.enforce的取值 loader 分为前置pre和后置post,默认为normal\",\"rules: [ { test: /\\\\.(t|j)s$/, exclude: /node_modules/, enforce: 'pre'// post use: { loader: \\\"babel-loader\\\", options: { cacheDirectory: true, }, }, }, ];\",\"内联方式的 loader 取值为行内inline\"]},\"747\":{\"h\":\"inline 方式的 loader\",\"t\":[\"使用 ! 将资源中的 loader 分开。每个部分都会相对于当前目录解析。\",\"import Styles from \\\"style-loader!css-loader?modules!./styles.css\\\";\",\"使用 ! 前缀，将禁用所有已配置的 normal loader(普通 loader)\",\"import Styles from \\\"!style-loader!css-loader?modules!./styles.css\\\";\",\"使用 !! 前缀，将禁用所有已配置的 loader（preLoader, loader, postLoader）\",\"import Styles from \\\"!!style-loader!css-loader?modules!./styles.css\\\";\",\"使用 -! 前缀，将禁用所有已配置的 preLoader 和 loader，但是不禁用 postLoaders\",\"import Styles from \\\"-!style-loader!css-loader?modules!./styles.css\\\";\"]},\"748\":{\"h\":\"loader 的优先级\",\"t\":[\"四种 loader 调用先后顺序为：pre > normal > inline > post\",\"每个 loader 都有 normal 函数和 pitch 函数\",\"normal 函数 相同种类 loader 的情况下，调用的优先级为，自下而上，自右向左。\",\"pitch 函数 则反过来\",\"// xx-loader // normal函数 module.exports = function (source) {}; // pitch函数 module.exports.pitch = function (remainingRequest) {};\"]},\"749\":{\"h\":\"pitch 函数\",\"t\":[\"loader 有两个函数，默认module.exports导出函数为normal函数,module.exports.pitch导出函数为pitch方法\",\"在 loader 从右向左调用之前，会进行一次从左到右的 pitch 方法调用，而在 pitch 调用过程中，如果任何一个有返回值，那么将阻断后续的 loader 调用链，进而将自身的返回结果传递给上一个 loader 作为 content\",\"use: [\\\"a-loader\\\", \\\"b-loader\\\", \\\"c-loader\\\"];\",\"顺序 a-loader.pitch => b-loader.pitch => c-loader.pitch => c-loader => b-loader => a-loader\",\"如果 pitch loader有返回值 将会跳过后面的loader 将结果传递给前一个loader 例如： b-loader.pitch 有返回值 a-loader.pitch => b-loader.pitch => a-loader\"]},\"750\":{\"h\":\"打包分析\"},\"751\":{\"h\":\"打包时间分析\",\"t\":[\"npm install speed-measure-webpack-plugin -D\",\"webpack.config.js\",\"const SpeedMeasurePlugin = require(\\\"speed-measure-webpack-plugin\\\"); const smp = new SpeedMeasurePlugin(); const config = { //........ // webpack的配置 } module.exports = smp.wrap(config)\",\"image-20210903153052331\"]},\"752\":{\"h\":\"打包后文件分析\",\"t\":[\"npm install webpack-bundle-analyzer -D\",\"webpack.config.js\",\"const BundleAnalyzerPlugin = require(\\\"webpack-bundle-analyzer\\\").BundleAnalyzerPlugin; module.exports = { //.... plugins:[ new BundleAnalyzerPlugin() ] }\",\"image-20210903154607867\"]},\"753\":{\"c\":[\"Webpack\"]},\"754\":{\"h\":\"PostCss\",\"t\":[\"PostCSS是一个通过JavaScript来转换样式的工具；\",\"这个工具可以帮助我们进行一些CSS的转换和适配，比如自动添加浏览器前缀、css样式的重置；\",\"但是实现这些工具，我们需要借助于PostCSS对应的插件；\",\"postcss-cli: clicommand line interface 命令行接口\",\" npm install postcss postcss-cli -D\",\"通过postcss使用autoprefixer\",\" npx postcss --use autoprefixer -o end.css ./src/css/style.css\"]},\"755\":{\"h\":\"\",\"t\":[\"在webpack中使用postcss\",\" npm install postcss postcss-loader -D\",\"在postcss里使用autoprefixer\",\"webpack.config.js\",\" module.exports = { module: { rules: [ { test: /\\\\.css$/, use: [ //loader的执行顺序是从右向左（或者说从下到上，或者说从后到前的）， //{ loader: 'style-loader'} 的简写 \\\"style-loader\\\", \\\"css-loader\\\", { loader:\\\"postcss-loader\\\", options:{ postcssOptions:{ plugins:[ require(\\\"autoprefixer\\\") ] } } } ], }, ], }, }\",\"在postcss使用postcss-preset-env\",\"将一些现代的CSS特性，转成大多数浏览器认识的CSS，并且会根据目标浏览器或者运行时环境添加所需的polyfill；\",\"也包括会自动添加autoprefixer（所以相当于已经内置了autoprefixer）；\",\"webpack.config.js\",\" module.exports = { module: { rules: [ { test: /\\\\.css$/, use: [ //loader的执行顺序是从右向左（或者说从下到上，或者说从后到前的）， //{ loader: 'style-loader'} 的简写 \\\"style-loader\\\", \\\"css-loader\\\", { loader:\\\"postcss-loader\\\", options:{ postcssOptions:{ plugins:[ require(\\\"postcss-preset-env\\\") ] } } } ], }, ], }, }\",\"当.css、.less都需要使用postcss插件时，可以将postcss单独抽离处理减少代码重复率\",\"不抽离webpack.config.js\",\" //..... rules: [ { test: /\\\\.css$/, use: [ //loader的执行顺序是从右向左（或者说从下到上，或者说从后到前的）， //{ loader: 'style-loader'} 的简写 \\\"style-loader\\\", \\\"css-loader\\\", { loader:\\\"postcss-loader\\\", options:{ postcssOptions:{ plugins:[ require(\\\"postcss-preset-env\\\") ] } } } ], }, { test:/\\\\.less$/, use:[ \\\"style-loader\\\", \\\"css-loader\\\", \\\"less-loader\\\", { loader:\\\"postcss-loader\\\", options:{ postcssOptions:{ plugins:[ require(\\\"postcss-preset-env\\\") ] } } } ] } ],\",\"抽离postcss配置\",\"postcss.config.js\",\" module.exports = { plugins:[ require('autoprefixer') ] }\",\"webpack.config.js\",\" rules:[ { test:/\\\\.css$/, use:[ \\\"style-loader\\\", \\\"css-loader\\\", \\\"postcss-loader\\\" ] }, { test:/\\\\.less$/, use:[ \\\"style-loader\\\", \\\"css-loader\\\", \\\"postcss-loader\\\" ] } ]\"]},\"756\":{\"h\":\"source-map\"},\"757\":{\"h\":\"source-map\",\"t\":[\"代码通常运行在浏览器上时，是通过打包压缩的：\",\"也就是真实跑在浏览器上的代码，和我们编写的代码其实是有差异的；\",\"比如ES6的代码可能被转换成ES5；\",\"比如对应的代码行号、列号在经过编译后肯定会不一致；\",\"比如代码进行丑化压缩时，会将编码名称等修改；\",\"比如我们使用了TypeScript等方式编写的代码，最终转换成JavaScript；\",\"source-map是从已转换的代码，映射到原始的源文件；使浏览器可以重构原始源并在调试器中显示重建的原始源；\"]},\"758\":{\"h\":\"使用source-map\",\"t\":[\"第一步：根据源文件，生成source-map文件，webpack在打包时，可以通过配置生成source-map；\",\"webpack.config.js\",\"module.exports = { devtool: \\\"source-map\\\", }\",\"第二步：在转换后的代码，最后添加一个注释，它指向sourcemap；\",\"//# sourceMappingURL=main.js.map\",\"在浏览器中开启\",\"image-20210823141026445\"]},\"759\":{\"h\":\"source-map源码\",\"t\":[\"version：当前使用的版本，也就是最新的第三版；\",\"sources：从哪些文件转换过来的source-map和打包的代码（最初始的文件）；\",\"names：转换前的变量和属性名称（因为我目前使用的是development模式，所以不需要保留转换前的名称）；\",\"mappings：source-map用来和源文件映射的信息（比如位置信息等），一串base64 VLQ（veriable-length quantity可变长度值）编码；\",\"file：打包后的文件（浏览器加载的文件）；\",\"sourceContent：转换前的具体代码信息（和sources是对应的关系）；\",\"sourceRoot：所有的sources相对的根目录；\",\"image-20210823143006957\"]},\"760\":{\"h\":\"生成source-map\",\"t\":[\"配置devtool\",\"不会生成source-map\",\"false：不使用source-map，也就是没有任何和source-map相关的内容。\",\"none：production模式下的默认值，不生成source-map。\",\"eval：development模式下的默认值，不生成source-map\",\"但是它会在eval执行的代码中，添加 //# sourceURL=；\",\"它会被浏览器在执行时解析，并且在调试面板中生成对应的一些文件目录，方便我们调试代码；\"]},\"761\":{\"h\":\"\",\"t\":[\"不会生成每个source map文件，模块都封装在eval中，并在里面添加//# sourceURL = xx.js\",\"image-20210823134811148\",\"image-20210823134841620\",\"image-20210823134851630\",\"image-20210823134910226\"]},\"762\":{\"h\":\"\",\"t\":[\"能完整的找到报错代码地址\",\"webpack.config.js\",\"module.exports = { devtool: \\\"source-map\\\", }\",\"生成一个独立的source-map文件，并且在bundle文件中有一个注释，指向source-map文件；\",\"image-20210823135113891\",\"image-20210823135132121\"]},\"763\":{\"h\":\"eval-source-map\",\"t\":[\"把eval的sourceURL换为完整sourcemap信息的DataURL\",\"会生成sourcemap，但是source-map是以DataUrl添加到eval函数的后面\",\"image-20210823135338759\",\"image-20210823135353474\"]},\"764\":{\"h\":\"inline-source-map\",\"t\":[\"不会生成source map文件，而是为每个文件添加source map的DataURL，这个DataURL是包含一个文件完成source map信息的Base64编码，会导致文件很大\",\"image-20210823135757279\",\"image-20210823135708528\",\"image-20210823135724679\"]},\"765\":{\"h\":\"cheap-source-map\",\"t\":[\"会生成sourcemap，但是会更加高效一些（cheap低开销），因为它没有生成列映射（Column Mapping）\",\"不包含列信息，不包含 loader 的 sourcemap，（譬如 babel 的 sourcemap）\",\"image-20210823140452162\"]},\"766\":{\"h\":\"cheap-module-source-map\",\"t\":[\"不包含列信息，同时 loader 的 sourcemap 也被简化为只包含对应行的。最终的 sourcemap 只有一份，它是 webpack 对 loader 生成的 sourcemap 进行简化，然后再次生成的。\",\"会生成sourcemap，类似于cheap-source-map，但是对源自loader的sourcemap处理会更好。\",\"image-20210823141121375\",\"image-20210823141133669\"]},\"767\":{\"h\":\"hidden-source-map\",\"t\":[\"会生成sourcemap，但是不会对source-map文件进行引用；\",\"相当于删除了打包文件中对sourcemap的引用注释；\"]},\"768\":{\"h\":\"nosources-source-map\",\"t\":[\"会生成sourcemap，但是生成的sourcemap只有错误信息的提示，不会生成源代码文件；\",\"image-20210823141444538\"]},\"769\":{\"h\":\"多个值的组合\",\"t\":[\"inline-|hidden-|eval：三个值时三选一；\",\"nosources：可选值；\",\"cheap可选值，并且可以跟随module的值；\",\"[inline-|hidden-|eval-][nosources-][cheap-[module-]]source-map\"]},\"770\":{\"c\":[\"Webpack\"]},\"771\":{\"h\":\"webpack启动流程\",\"t\":[\"image-20210903154856146\",\"./node_modules/.bin/webpack\",\"image-20210903151045187\",\"./node_modules/webpack/bin/webpack.js\",\"runCli(cli);\",\"image-20210903151518238\",\"image-20210903152801392\",\"webpack-cli/package.json\",\"image-20210903150636053\",\"bin/cli.js\",\"执行runCLi()\",\"image-20210903153242825\",\"webpack-cli/lib/bootstrap.js/runCLi\",\"image-20210903153231172\",\"webpack-cli/lib/webpack-cli.js/constructor()\",\"调用WebpackCLi\",\"image-20210903154402992\",\"引入webpack目的\",\"传入 webpack.config.js 等配置\",\"image-20210903155324975\",\"执行 run 方法目的\",\"调用this.makeCommand\",\"image-20210903155606746\",\"makeCommand内部执行makeOption方法\",\"image-20210903155801295\",\"makeCommand在执行runWebpack方法\",\"runWebpack执行createCompiler\",\"image-20210903150304488\",\"createCompiler传入webpack配置生成 compiler\",\"image-20210903150442697\"]},\"772\":{\"h\":\"直接启动\",\"t\":[\"const webpack = require(\\\"webpack\\\"); const config = require(\\\"../webpack.config\\\"); const compiler = webpack(config); compiler.run((err, status) => { if (err) { console.error(err); } else { console.log(status); } });\",\"执行 node\"]},\"773\":{\"h\":\"源码\",\"t\":[\"img\"]},\"774\":{\"c\":[\"Webpack\"]},\"775\":{\"h\":\"Tapable\"},\"776\":{\"h\":\"webpack 的插件机制\",\"t\":[\"webpack 实现插件机制的大体方式是：\",\"创建 - webpack 在其内部对象上创建各种钩子；\",\"注册 - 插件将自己的方法注册到对应钩子上，交给 webpack；\",\"调用 - webpack 编译过程中，会适时地触发相应钩子，因此也就触发了插件的方法。\",\"Webpack 本质上是一种事件流的机制，它的工作流程就是将各个插件串联起来，而实现这一切的核心就是 Tapable，webpack 中最核心的负责编译的 Compiler 和负责创建 bundle 的 Compilation 都是 Tapable 的实例 通过事件和注册和监听，触发 webpack 生命周期中的函数方法\",\"const { SyncHook, SyncBailHook, SyncWaterfallHook, SyncLoopHook, AsyncParallelHook, AsyncParallelBailHook, AsyncSeriesHook, AsyncSeriesBailHook, AsyncSeriesWaterfallHook, } = require(\\\"tapable\\\");\"]},\"777\":{\"h\":\"Hook 分类\",\"t\":[\"同步和异步的：\",\"以 sync 开头的，是同步的 Hook；\",\"以 async 开头的，两个事件处理回调，不会等待上一次处理回调结束后再执行下一次回调；\",\"其他的类别:\",\"bail：当有返回值时，就不会执行后续的事件触发了；\",\"Loop：当返回值为 true，就会反复执行该事件，当返回值为 undefined 或者不返回内容，就退出事件；\",\"Waterfall：当返回值不为 undefined 时，会将这次返回的结果作为下次事件的第一个参数；\",\"Parallel：并行，会同时执行次事件处理回调结束，才执行下一次事件处理回调；\",\"Series：串行，会等待上一是异步的 Hook；\",\"来自网络\"]},\"778\":{\"h\":\"SyncHook\",\"t\":[\"const { SyncHook } = require(\\\"tapable\\\"); class LearnTable { constructor() { this.hooks = { syncHook: new SyncHook([\\\"name\\\", \\\"age\\\"]), }; this.hooks.syncHook.tap(\\\"event1\\\", (name, age) => { console.log(\\\"even1\\\", name, age); }); this.hooks.syncHook.tap(\\\"event2\\\", (name, age) => { console.log(\\\"event2\\\", name, age); }); } emit() { this.hooks.syncHook.call(\\\"name\\\", \\\"age\\\"); this.hooks.syncHook.call(\\\"lu\\\", 18); } } const lt = new LearnTable(); lt.emit();\",\"image-20210905112437439\"]},\"779\":{\"h\":\"SyncBailHook\",\"t\":[\"当有返回值时，就不会执行后续的事件触发了\",\"const { SyncHook, SyncBailHook } = require(\\\"tapable\\\"); class LearnTable { constructor() { this.hooks = {, syncHook: new SyncBailHook([\\\"name\\\", \\\"age\\\"]), }; this.hooks.syncHook.tap(\\\"event1\\\", (name, age) => { console.log(\\\"even1\\\", name, age); return \\\"123\\\"; }); this.hooks.syncHook.tap(\\\"event2\\\", (name, age) => { console.log(\\\"event2\\\", name, age); }); } emit() { this.hooks.syncHook.call(\\\"lu\\\", 18); } } const lt = new LearnTable(); lt.emit();\",\"image-20210905113030985\"]},\"780\":{\"h\":\"SyncLoopHook\",\"t\":[\"当返回值为 true，就会反复执行该事件，当返回值为 undefined 或者不返回内容，就退出事件；\",\"const { SyncHook, SyncBailHook, SyncLoopHook } = require(\\\"tapable\\\"); let counter = 0; class LearnTable { constructor() { this.hooks = { syncHook: new SyncLoopHook([\\\"name\\\", \\\"age\\\"]), }; this.hooks.syncHook.tap(\\\"event1\\\", (name, age) => { if (counter++ < 3) { console.log(\\\"even1\\\", name, age, counter); return true; } }); this.hooks.syncHook.tap(\\\"event2\\\", (name, age) => { console.log(\\\"event2\\\", name, age); }); } emit() { this.hooks.syncHook.call(\\\"lu\\\", 18); } } const lt = new LearnTable(); lt.emit();\",\"image-20210905113305300\"]},\"781\":{\"h\":\"SyncWaterfallHook\",\"t\":[\"当返回值不为 undefined 时，会将这次返回的结果作为下次事件的第一个参数；\",\"const { SyncHook, SyncBailHook, SyncLoopHook, SyncWaterfallHook, } = require(\\\"tapable\\\"); class LearnTable { constructor() { this.hooks = { syncHook: new SyncWaterfallHook([\\\"name\\\", \\\"age\\\"]), }; this.hooks.syncHook.tap(\\\"event1\\\", (name, age) => { console.log(\\\"even1\\\", name, age); return \\\"event1\\\"; }); this.hooks.syncHook.tap(\\\"event2\\\", (name, age) => { console.log(\\\"event2\\\", name, age); }); } emit() { this.hooks.syncHook.call(\\\"lu\\\", 18); } } const lt = new LearnTable(); lt.emit();\",\"image-20210905113549254\"]},\"782\":{\"h\":\"AsyncSeriesHook\",\"t\":[\"const { AsyncSeriesHook } = require(\\\"tapable\\\"); class LearnTable { constructor() { this.hooks = { asyncHook: new AsyncSeriesHook([\\\"name\\\", \\\"age\\\"]), }; this.hooks.asyncHook.tapAsync(\\\"event1\\\", (name, age, callback) => { setTimeout(() => { console.log(\\\"event1\\\", name, age); callback(); }, 2000); }); this.hooks.asyncHook.tapAsync(\\\"event2\\\", (name, age, callback) => { setTimeout(() => { console.log(\\\"event2\\\", name, age); callback(); }, 2000); }); } emit() { this.hooks.asyncHook.callAsync(\\\"lu\\\", 18, () => { console.log(\\\"第一次执行完成\\\"); }); } } const lt = new LearnTable(); lt.emit();\",\"image-20210905114642656\"]},\"783\":{\"h\":\"AsyncParallelHook\",\"t\":[\"const { AsyncSeriesHook, AsyncParallelHook } = require(\\\"tapable\\\"); class LearnTable { constructor() { this.hooks = { asyncHook: new AsyncParallelHook([\\\"name\\\", \\\"age\\\"]), }; this.hooks.asyncHook.tapAsync(\\\"event1\\\", (name, age, callback) => { setTimeout(() => { console.log(\\\"event1\\\", name, age); callback(); }, 2000); }); this.hooks.asyncHook.tapAsync(\\\"event2\\\", (name, age, callback) => { setTimeout(() => { console.log(\\\"event2\\\", name, age); callback(); }, 2000); }); } emit() { this.hooks.asyncHook.callAsync(\\\"lu\\\", 18, () => { console.log(\\\"第一次执行完成\\\"); }); } } const lt = new LearnTable(); lt.emit();\",\"image-20210905115012822\"]},\"784\":{\"h\":\"topPromise\",\"t\":[\"const { AsyncSeriesHook, AsyncParallelHook } = require(\\\"tapable\\\"); class LearnTable { constructor() { this.hooks = { asyncHook: new AsyncParallelHook([\\\"name\\\", \\\"age\\\"]), }; this.hooks.asyncHook.tapPromise(\\\"event1\\\", (name, age) => { return new Promise((resolve, reject) => { setTimeout(() => { console.log(\\\"event1\\\", name, age); resolve(); }, 2000); }); }); this.hooks.asyncHook.tapPromise(\\\"event2\\\", (name, age) => { return new Promise((resolve, reject) => { setTimeout(() => { console.log(\\\"event1\\\", name, age); resolve(); }, 2000); }); }); } emit() { this.hooks.asyncHook.promise(\\\"lu\\\", 18).then(() => { console.log(\\\"事件监听完成\\\"); }); } } const lt = new LearnTable(); lt.emit();\"]},\"785\":{\"c\":[\"Webpack\"]},\"786\":{\"c\":[\"Tapable\"]},\"787\":{\"h\":\"Socket.IO\",\"t\":[\"Socket.IO 是一个 WebSocket 库，包括了客户端的 js 和服务器端的 nodejs，它的目标是构建可以在不同浏览器和移动设备上使用的实时应用。\"]},\"788\":{\"h\":\"特点\",\"t\":[\"易用性：socket.io 封装了服务端和客户端，使用起来非常简单方便。\",\"跨平台：socket.io 支持跨平台，这就意味着你有了更多的选择，可以在自己喜欢的平台下开发实时应用。\",\"自适应：它会自动根据浏览器从 WebSocket、AJAX 长轮询、Iframe 流等等各种方式中选择最佳的方式来实现网络实时应用，非常方便和人性化，而且支持的浏览器最低达 IE5.5。\"]},\"789\":{\"h\":\"使用\",\"t\":[\"服务器\",\"var express = require(\\\"express\\\"); var path = require(\\\"path\\\"); var app = express(); app.get(\\\"/\\\", function (req, res) { res.sendFile(path.resolve(\\\"index.html\\\")); }); var server = require(\\\"http\\\").createServer(app); var io = require(\\\"socket.io\\\")(server); io.on(\\\"connection\\\", function (socket) { //向客户端发送消息 socket.send(\\\"欢迎光临\\\"); //接收到客户端发过来的消息时触发 socket.on(\\\"message\\\", function (data) { console.log(data); }); }); server.listen(80);\",\"客户端\",\"window.onload = function () { const socket = io.connect(\\\"/\\\"); //监听与服务器端的连接成功事件 socket.on(\\\"connect\\\", function () { console.log(\\\"连接成功\\\"); }); //客户端收到服务器发过来的消息后触发 socket.on(\\\"message\\\", function (message) { console.log(message); }); //监听与服务器端断开连接事件 socket.on(\\\"disconnect\\\", function () { console.log(\\\"断开连接\\\"); }); };\"]},\"790\":{\"c\":[\"WebSocket\"]},\"791\":{\"h\":\"WebSocket\"},\"792\":{\"h\":\"双向通信\",\"t\":[\"Comet 是一种用于 web 的推送技术，能使服务器能实时地将更新的信息传送到客户端，而无须客户端发出请求，目前有三种实现方式:轮询（polling） 长轮询（long-polling）和 iframe 流（streaming）。\"]},\"793\":{\"h\":\"轮询\",\"t\":[\"轮询是客户端和服务器之间会一直进行连接，每隔一段时间就询问一次\",\"这种方式连接数会很多，一个接受，一个发送。而且每次发送请求都会有 Http 的 Header，会很耗流量，也会消耗 CPU 的利用率\",\"服务端\",\"let express = require(\\\"express\\\"); let app = express(); app.use(express.static(__dirname)); app.use(function (req, res, next) { res.header(\\\"Access-Control-Allow-Origin\\\", \\\"http://localhost:8000\\\"); res.end(new Date().toLocaleTimeString()); }); app.listen(8080);\",\"客户端\",\"setInterval(function () { let xhr = new XMLHttpRequest(); xhr.open(\\\"GET\\\", \\\"http://localhost:8080\\\", true); xhr.onreadystatechange = function () { if (xhr.readyState == 4 && xhr.status == 200) { document.querySelector(\\\"#clock\\\").innerHTML = xhr.responseText; } }; xhr.send(); }, 1000);\"]},\"794\":{\"h\":\"长轮询\",\"t\":[\"长轮询是对轮询的改进版，客户端发送 HTTP 给服务器之后，看有没有新消息，如果没有新消息，就一直等待\",\"当有新消息的时候，才会返回给客户端。在某种程度上减小了网络带宽和 CPU 利用率等问题。\",\"由于 http 数据包的头部数据量往往很大（通常有 400 多个字节），但是真正被服务器需要的数据却很少（有时只有 10 个字节左右），这样的数据包在网络上周期性的传输，难免对网络带宽是一种浪费\",\"let xhr = new XMLHttpRequest(); xhr.open(\\\"GET\\\", \\\"http://localhost:8080\\\", true); // 一直等待 有消息 xhr.onreadystatechange = function () { if (xhr.readyState == 4 && xhr.status == 200) { document.querySelector(\\\"#clock\\\").innerHTML = xhr.responseText; poll(); } }; xhr.send();\"]},\"795\":{\"h\":\"iframe\",\"t\":[\"通过在 HTML 页面里嵌入一个隐藏的 iframe,然后将这个 iframe 的 src 属性设为对一个长连接的请求,服务器端就能源源不断地往客户推送数据\",\"服务端\",\"const express = require(\\\"express\\\"); const app = express(); app.use(express.static(__dirname)); app.get(\\\"/clock\\\", function (req, res) { setInterval(function () { res.write(` <script type=\\\"text/javascript\\\"> parent.document.getElementById('clock').innerHTML = \\\"${new Date().toLocaleTimeString()}\\\"; </script> `); }, 1000); }); app.listen(8080);\",\"客户端\",\"<iframe src=\\\"/clock\\\" style=\\\" display:none\\\" />\"]},\"796\":{\"h\":\"websocket\",\"t\":[\"WebSockets_API 规范定义了一个 API 用以在网页浏览器和服务器建立一个 socket 连接。通俗地讲：在客户端和服务器保有一个持久的连接，两边可以在任意时间开始发送数据。\",\"HTML5 开始提供的一种浏览器与服务器进行全双工通讯的网络技术\",\"属于应用层协议，它基于 TCP 传输协议，并复用 HTTP 的握手通道。\",\"优势\",\"支持双向通信，实时性更强。\",\"更好的二进制支持。\",\"较少的控制开销。连接创建后，ws 客户端、服务端进行数据交换时，协议控制的数据包头部较小。\"]},\"797\":{\"h\":\"使用\",\"t\":[\"服务器\",\"let express = require(\\\"express\\\"); const path = require(\\\"path\\\"); let app = express(); let server = require(\\\"http\\\").createServer(app); app.get(\\\"/\\\", function (req, res) { res.sendFile(path.resolve(__dirname, \\\"index.html\\\")); }); app.listen(3000); //----------------------------------------------- let WebSocketServer = require(\\\"ws\\\").Server; let wsServer = new WebSocketServer({ port: 8888 }); wsServer.on(\\\"connection\\\", function (socket) { console.log(\\\"连接成功\\\"); socket.on(\\\"message\\\", function (message) { console.log(\\\"接收到客户端消息:\\\" + message); socket.send(\\\"服务器回应:\\\" + message); }); });\",\"客户端\",\"let ws = new WebSocket(\\\"ws://localhost:8888\\\"); ws.onopen = function () { console.log(\\\"客户端连接成功\\\"); ws.send(\\\"hello\\\"); }; ws.onmessage = function (event) { console.log(\\\"收到服务器的响应 \\\" + event.data); };\"]},\"798\":{\"h\":\"WebSocket 连接过程\",\"t\":[\"Websocket 一开始的握手需要借助 HTTP 请求完成，也是建立在 TCP 之上的，即浏览器、服务器建立 TCP 连接，三次握手。\",\"TCP 连接成功后，浏览器通过 HTTP 协议向服务器传送 WebSocket 支持的版本号等信息。\",\"服务器收到客户端的握手请求后，同样采用 HTTP 协议回馈数据。\",\"当收到了连接成功的消息后，通过 TCP 通道进行传输通信。 客户端通过 HTTP 请求与 WebSocket 服务端协商升级协议。协议升级完成后，后续的数据交换则遵照 WebSocket 的协议。\"]},\"799\":{\"h\":\"客户端发起：申请协议升级\",\"t\":[\"首先，客户端发起协议升级请求。可以看到，采用的是标准的 HTTP 报文格式，且只支持 GET 方法。\",\"GET ws://localhost:8888/ HTTP/1.1 Host: localhost:8888 Connection: Upgrade Upgrade: websocket Sec-WebSocket-Version: 13 Sec-WebSocket-Key: IHfMdf8a0aQXbwQO1pkGdA==\",\"Connection: Upgrade：表示要升级协议\",\"Upgrade: websocket：表示要升级到 websocket 协议\",\"Sec-WebSocket-Version: 13：表示 websocket 的版本\",\"Sec-WebSocket-Key：与后面服务端响应首部的 Sec-WebSocket-Accept 是配套的，提供基本的防护，比如恶意的连接，或者无意的连接。\"]},\"800\":{\"h\":\"服务器响应协议升级\",\"t\":[\"服务端返回内容如下，状态代码 101 表示协议切换。到此完成协议升级，后续的数据交互都按照新的协议来。\",\"HTTP/1.1 101 Switching Protocols Upgrade: websocket Connection: Upgrade Sec-WebSocket-Accept: aWAY+V/uyz5ILZEoWuWdxjnlb7E=\"]},\"801\":{\"h\":\"Sec-WebSocket-Accept 的计算\",\"t\":[\"Sec-WebSocket-Accept 根据客户端请求首部的 Sec-WebSocket-Key 计算出来。 计算公式为：\",\"将 Sec-WebSocket-Key 跟 258EAFA5-E914-47DA-95CA-C5AB0DC85B11 拼接。\",\"通过 SHA1 计算出摘要，并转成 base64 字符串\",\"const crypto = require('crypto'); const number = '258EAFA5-E914-47DA-95CA-C5AB0DC85B11'; const webSocketKey = 'IHfMdf8a0aQXbwQO1pkGdA=='; let websocketAccept = require('crypto').createHash('sha1').update(webSocketKey + number).digest('base64'); console.log(websocketAccept);//aWAY+V/uyz5ILZEoWuWdxjnlb7E=\",\"Sec-WebSocket-Key/Accept 的作用\",\"避免服务端收到非法的 websocket 连接\",\"确保服务端理解 websocket 连接\",\"用浏览器里发起 ajax 请求，设置 header 时，Sec-WebSocket-Key 以及其他相关的 header 是被禁止的\",\"Sec-WebSocket-Key 主要目的并不是确保数据的安全性，因为 Sec-WebSocket-Key、Sec-WebSocket-Accept 的转换计算公式是公开的，而且非常简单，最主要的作用是预防一些常见的意外情况（非故意的）\"]},\"802\":{\"h\":\"WebSocket 数据帧\",\"t\":[\"WebSocket 客户端、服务端通信的最小单位是帧，由 1 个或多个帧组成一条完整的消息（message）。\",\"发送端：将消息切割成多个帧，并发送给服务端\",\"接收端：接收消息帧，并将关联的帧重新组装成完整的消息\"]},\"803\":{\"h\":\"数据帧格式\",\"t\":[\"单位是比特。比如 FIN、RSV1 各占据 1 比特，opcode 占据 4 比特\",\" 0 1 2 3 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 +-+-+-+-+-------+-+-------------+-------------------------------+ |F|R|R|R| opcode|M| Payload len | Extended payload length | |I|S|S|S| (4) |A| (7) | (16/64) | |N|V|V|V| |S| | (if payload len==126/127) | | |1|2|3| |K| | | +-+-+-+-+-------+-+-------------+ - - - - - - - - - - - - - - - + | Extended payload length continued, if payload len == 127 | + - - - - - - - - - - - - - - - +-------------------------------+ | |Masking-key, if MASK set to 1 | +-------------------------------+-------------------------------+ | Masking-key (continued) | Payload Data | +-------------------------------- - - - - - - - - - - - - - - - + : Payload Data continued ... : + - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - + | Payload Data continued ... | +---------------------------------------------------------------+\",\"FIN：1 个比特 如果是 1，表示这是消息（message）的最后一个分片（fragment），如果是 0，表示不是是消息（message）的最后一个分片（fragment）\",\"RSV1, RSV2, RSV3：各占 1 个比特。一般情况下全为 0。当客户端、服务端协商采用 WebSocket 扩展时，这三个标志位可以非 0，且值的含义由扩展进行定义。如果出现非零的值，且并没有采用 WebSocket 扩展，连接出错。\",\"Opcode: 4 个比特。操作代码，Opcode 的值决定了应该如何解析后续的数据载荷（data payload）。如果操作代码是不认识的，那么接收端应该断开连接（fail the connection） \",\"%x0：表示一个延续帧。当 Opcode 为 0 时，表示本次数据传输采用了数据分片，当前收到的数据帧为其中一个数据分片。\",\"%x1：表示这是一个文本帧（frame）\",\"%x2：表示这是一个二进制帧（frame）\",\"%x3-7：保留的操作代码，用于后续定义的非控制帧。\",\"%x8：表示连接断开。\",\"%x9：表示这是一个 ping 操作。\",\"%xA：表示这是一个 pong 操作。\",\"%xB-F：保留的操作代码，用于后续定义的控制帧。\",\"Mask: 1 个比特。表示是否要对数据载荷进行掩码操作 \",\"从客户端向服务端发送数据时，需要对数据进行掩码操作；从服务端向客户端发送数据时，不需要对数据进行掩码操作,如果服务端接收到的数据没有进行过掩码操作，服务端需要断开连接。\",\"如果 Mask 是 1，那么在 Masking-key 中会定义一个掩码键（masking key），并用这个掩码键来对数据载荷进行反掩码。所有客户端发送到服务端的数据帧，Mask 都是 1。\",\"Payload length：数据载荷的长度，单位是字节。为 7 位，或 7+16 位，或 7+64 位。 \",\"Payload length=x 为 0~125：数据的长度为 x 字节。\",\"Payload length=x 为 126：后续 2 个字节代表一个 16 位的无符号整数，该无符号整数的值为数据的长度。\",\"Payload length=x 为 127：后续 8 个字节代表一个 64 位的无符号整数（最高位为 0），该无符号整数的值为数据的长度。\",\"如果 payload length 占用了多个字节的话，payload length 的二进制表达采用网络序（big endian，重要的位在前)\",\"Masking-key：0 或 4 字节(32 位) 所有从客户端传送到服务端的数据帧，数据载荷都进行了掩码操作，Mask 为 1，且携带了 4 字节的 Masking-key。如果 Mask 为 0，则没有 Masking-key。载荷数据的长度，不包括 mask key 的长度\",\"Payload data：(x+y) 字节 \",\"载荷数据：包括了扩展数据、应用数据。其中，扩展数据 x 字节，应用数据 y 字节。\",\"扩展数据：如果没有协商使用扩展的话，扩展数据数据为 0 字节。所有的扩展都必须声明扩展数据的长度，或者可以如何计算出扩展数据的长度。此外，扩展如何使用必须在握手阶段就协商好。如果扩展数据存在，那么载荷数据长度必须将扩展数据的长度包含在内。\",\"应用数据：任意的应用数据，在扩展数据之后（如果存在扩展数据），占据了数据帧剩余的位置。载荷数据长度 减去 扩展数据长度，就得到应用数据的长度。\"]},\"804\":{\"h\":\"掩码算法\",\"t\":[\"掩码键（Masking-key）是由客户端挑选出来的 32 位的随机数。掩码操作不会影响数据载荷的长度。掩码、反掩码操作都采用如下算法：\",\"对索引 i 模以 4 得到 j,因为掩码一共就是四个字节\",\"对原来的索引进行异或对应的掩码字节\",\"异或就是两个数的二进制形式，按位对比，相同取 0，不同取 1\",\"function unmask(buffer, mask) { const length = buffer.length; for (let i = 0; i < length; i++) { buffer[i] ^= mask[i & 3]; } }\"]},\"805\":{\"c\":[\"WebSocket\"]},\"806\":{\"h\":\"\",\"t\":[\"404 Not Found\"]},\"807\":{\"h\":\"Algorithm\"},\"808\":{\"h\":\"C Sharp\"},\"809\":{\"h\":\"Browse\"},\"810\":{\"h\":\"Css\"},\"811\":{\"h\":\"Glsl\"},\"812\":{\"h\":\"Javascript\"},\"813\":{\"h\":\"Minprogram\"},\"814\":{\"h\":\"Network\"},\"815\":{\"h\":\"Nginx\"},\"816\":{\"h\":\"Nodejs\"},\"817\":{\"h\":\"Optimization\"},\"818\":{\"h\":\"Uniapp\"},\"819\":{\"h\":\"Vue2\"},\"820\":{\"h\":\"Vue3\"},\"821\":{\"h\":\"Webpack\"},\"822\":{\"h\":\"Websocket\"}},\"dirtCount\":0,\"index\":[[\"掩码\",{\"1\":{\"804\":1}}],[\"掩码操作不会影响数据载荷的长度\",{\"1\":{\"804\":1}}],[\"掩码键\",{\"1\":{\"804\":1}}],[\"掩码算法\",{\"0\":{\"804\":1}}],[\"掩码值确定哪些样本需要参与着色器的执行\",{\"1\":{\"240\":1}}],[\"载荷数据长度\",{\"1\":{\"803\":1}}],[\"载荷数据\",{\"1\":{\"803\":1}}],[\"载荷数据的长度\",{\"1\":{\"803\":1}}],[\"扩展如何使用必须在握手阶段就协商好\",{\"1\":{\"803\":1}}],[\"扩展数据长度\",{\"1\":{\"803\":1}}],[\"扩展数据数据为\",{\"1\":{\"803\":1}}],[\"扩展数据\",{\"1\":{\"803\":2}}],[\"扩展\",{\"1\":{\"803\":1}}],[\"扩展时\",{\"1\":{\"803\":1}}],[\"扩展操作符\",{\"1\":{\"263\":2}}],[\"报文格式\",{\"1\":{\"799\":1}}],[\"报错\",{\"1\":{\"458\":1}}],[\"申请协议升级\",{\"0\":{\"799\":1}}],[\"申明为\",{\"1\":{\"187\":1}}],[\"较少的控制开销\",{\"1\":{\"796\":1}}],[\"难免对网络带宽是一种浪费\",{\"1\":{\"794\":1}}],[\"轮询是客户端和服务器之间会一直进行连接\",{\"1\":{\"793\":1}}],[\"轮询\",{\"0\":{\"793\":1},\"1\":{\"792\":1}}],[\"欢迎光临\",{\"1\":{\"789\":1}}],[\"封装了服务端和客户端\",{\"1\":{\"788\":1}}],[\"封装了不同操作系统一些底层特性\",{\"1\":{\"255\":1}}],[\"易用性\",{\"1\":{\"788\":1}}],[\"易于理解和维护的c\",{\"1\":{\"66\":1}}],[\"串行\",{\"1\":{\"777\":1}}],[\"譬如\",{\"1\":{\"765\":1}}],[\"列号在经过编译后肯定会不一致\",{\"1\":{\"757\":1}}],[\"列表项的小黑点和边框\",{\"1\":{\"152\":1}}],[\"抽离postcss配置\",{\"1\":{\"755\":1}}],[\"顺序\",{\"1\":{\"749\":1}}],[\"顺序是颠倒的\",{\"1\":{\"693\":1}}],[\"官方推荐\",{\"1\":{\"745\":1}}],[\"官方文档\",{\"1\":{\"517\":1}}],[\"什么是loader\",{\"0\":{\"743\":1}}],[\"具有\",{\"1\":{\"738\":1}}],[\"具体地说\",{\"1\":{\"285\":1}}],[\"具体方式为调用\",{\"1\":{\"239\":1}}],[\"具体实现可见链接\",{\"1\":{\"190\":1}}],[\"具体而言\",{\"1\":{\"190\":1}}],[\"具体取决于它们的访问修饰符\",{\"1\":{\"78\":1}}],[\"环境中应用一个插件时\",{\"1\":{\"737\":1}}],[\"环境配置\",{\"1\":{\"737\":1}}],[\"年龄\",{\"1\":{\"730\":1}}],[\"年以来发布的所有版本\",{\"1\":{\"713\":1}}],[\"名字\",{\"1\":{\"730\":1}}],[\"校验传入参数\",{\"0\":{\"730\":1}}],[\"校验发现错误\",{\"1\":{\"390\":1}}],[\"普通\",{\"1\":{\"726\":2,\"747\":1}}],[\"普通对象\",{\"1\":{\"555\":1}}],[\"仍由\",{\"1\":{\"713\":1}}],[\"地区代码由两个字母组成\",{\"1\":{\"713\":1}}],[\"地区代码\",{\"1\":{\"713\":1}}],[\"地址在路由表的目标地址中进行匹配\",{\"1\":{\"418\":1}}],[\"地址转换的基本原理是在转发网络包时对\",{\"1\":{\"409\":1}}],[\"地址转换的基本原理\",{\"0\":{\"409\":1}}],[\"地址转换为公有地址的地址转换功能\",{\"1\":{\"407\":1}}],[\"地址就是路由器端口的\",{\"1\":{\"401\":1}}],[\"地址来判断的\",{\"1\":{\"399\":1}}],[\"地址来判断转发目标的\",{\"1\":{\"399\":1}}],[\"地址来判断应该接收哪些包\",{\"1\":{\"390\":1}}],[\"地址和端口号之后\",{\"1\":{\"409\":1}}],[\"地址和端口号进行改写\",{\"1\":{\"409\":1}}],[\"地址和\",{\"1\":{\"398\":1}}],[\"地址以及其输入端口的号码写入\",{\"1\":{\"393\":1}}],[\"地址表中找不到指定的\",{\"1\":{\"394\":1}}],[\"地址表中\",{\"1\":{\"393\":1}}],[\"地址表中有记录了\",{\"1\":{\"392\":1}}],[\"地址表的内容进行维护\",{\"1\":{\"393\":1}}],[\"地址表的维护\",{\"0\":{\"393\":1}}],[\"地址表主要包含两个信息\",{\"1\":{\"392\":1}}],[\"地址会由网卡驱动程序读取并分配给mac模块\",{\"1\":{\"380\":1}}],[\"地址会被写入响应消息并返回给客户端\",{\"1\":{\"343\":1}}],[\"地址需要使用arp\",{\"1\":{\"378\":1}}],[\"地址是否已经在\",{\"1\":{\"392\":1}}],[\"地址是作为tcp\",{\"1\":{\"343\":1}}],[\"地址是什么\",{\"1\":{\"341\":1}}],[\"地址传递给应用程序\",{\"1\":{\"343\":1}}],[\"地址时\",{\"1\":{\"342\":1}}],[\"地址的对照表中查找相应的记录\",{\"1\":{\"345\":1}}],[\"地址的操作称为域名解析\",{\"1\":{\"341\":1}}],[\"地址的方法非常简单\",{\"1\":{\"341\":1}}],[\"地址的主机号\",{\"1\":{\"339\":1}}],[\"地址\",{\"0\":{\"408\":1},\"1\":{\"339\":1,\"340\":1,\"342\":1,\"343\":3,\"345\":1,\"356\":1,\"375\":2,\"380\":1,\"392\":2,\"394\":1,\"398\":2,\"400\":2,\"401\":1,\"405\":3}}],[\"针对不同的浏览器支持的特性\",{\"1\":{\"710\":1}}],[\"针对所有的元素重复以上的步骤\",{\"1\":{\"53\":1}}],[\"早期使用较多的配置方式\",{\"1\":{\"706\":1}}],[\"掉\",{\"1\":{\"679\":1}}],[\"绑定事件每次触发都要重新生成全新的function去更新\",{\"1\":{\"678\":1}}],[\"绑定读取json方式\",{\"1\":{\"89\":1}}],[\"信息得知当前节点要对比的具体内容\",{\"1\":{\"675\":1}}],[\"信号到达网线接口部分\",{\"1\":{\"400\":1}}],[\"信号到达集线器的\",{\"1\":{\"390\":3}}],[\"信号到达集线器的时候并不是跟刚发送出去的时候一模一样\",{\"1\":{\"387\":1}}],[\"信号线就变成了螺旋形\",{\"1\":{\"389\":1}}],[\"信号和噪声的电流就会混杂在一起\",{\"1\":{\"389\":1}}],[\"信号会通过网线到达集线器的接口\",{\"1\":{\"388\":1}}],[\"信号从这个接口中的\",{\"1\":{\"388\":1}}],[\"信号从计算机中流出之后\",{\"1\":{\"386\":1}}],[\"信号通过\",{\"1\":{\"388\":1}}],[\"信号衰减就越严重\",{\"1\":{\"387\":1,\"388\":1}}],[\"信号在网线的传输过程中\",{\"1\":{\"387\":1}}],[\"信号在网线和集线器中传输\",{\"0\":{\"386\":1}}],[\"信号在传输\",{\"1\":{\"386\":1}}],[\"信号是如何在网线和集线器传输的\",{\"1\":{\"386\":1}}],[\"派发更新\",{\"1\":{\"670\":1,\"671\":1}}],[\"立刻执行\",{\"1\":{\"670\":1}}],[\"显式绑定this指向\",{\"1\":{\"665\":1}}],[\"箭头函数可使代码更简练\",{\"1\":{\"664\":1}}],[\"箭头函数不能用来定义生成器函数\",{\"1\":{\"268\":1}}],[\"辅助函数\",{\"0\":{\"664\":1}}],[\"刚刚遍历生成的\",{\"1\":{\"663\":1}}],[\"浅拷贝\",{\"1\":{\"663\":1}}],[\"订阅者函数遍历执行\",{\"1\":{\"662\":1}}],[\"专用修改state方法\",{\"1\":{\"662\":1}}],[\"层层嵌套进行设置\",{\"1\":{\"659\":1}}],[\"挂载到vue\",{\"1\":{\"656\":1}}],[\"改为teleport\",{\"1\":{\"683\":1}}],[\"改变时被调用\",{\"1\":{\"667\":1}}],[\"改变触发更新\",{\"1\":{\"656\":1}}],[\"改变\",{\"1\":{\"654\":1}}],[\"改写端口号的原因\",{\"0\":{\"410\":1}}],[\"改写发送方\",{\"1\":{\"409\":1}}],[\"激活的路由\",{\"1\":{\"651\":1}}],[\"激活组件\",{\"1\":{\"591\":1}}],[\"历史栈\",{\"1\":{\"649\":1}}],[\"举例来说\",{\"1\":{\"648\":1}}],[\"举例说明\",{\"1\":{\"241\":1}}],[\"别名处理\",{\"1\":{\"644\":1}}],[\"缩写\",{\"1\":{\"643\":1}}],[\"缩放和材质属性\",{\"1\":{\"234\":1}}],[\"缩放\",{\"0\":{\"217\":1}}],[\"监听与服务器端断开连接事件\",{\"1\":{\"789\":1}}],[\"监听与服务器端的连接成功事件\",{\"1\":{\"789\":1}}],[\"监听路由变化\",{\"1\":{\"642\":1}}],[\"监测数据\",{\"1\":{\"560\":1}}],[\"孙路由跳转\",{\"1\":{\"641\":1}}],[\"框架原理分析\",{\"0\":{\"641\":1,\"658\":1}}],[\"禁用所有已配置的\",{\"1\":{\"638\":1}}],[\"禁止打印彩色\",{\"1\":{\"463\":1}}],[\"增加\",{\"1\":{\"636\":1}}],[\"替换初始\",{\"1\":{\"636\":1}}],[\"替换为自己申请的appkey\",{\"1\":{\"517\":1}}],[\"性能影响就会消除\",{\"1\":{\"624\":1}}],[\"性能指标\",{\"0\":{\"435\":1}}],[\"考虑到浏览器渲染各种\",{\"1\":{\"624\":1}}],[\"深度作用选择器\",{\"0\":{\"622\":1}}],[\"样式不能代替\",{\"1\":{\"624\":1}}],[\"样式影响\",{\"1\":{\"623\":1}}],[\"样式中的一个选择器能够作用得\",{\"1\":{\"622\":1}}],[\"样式\",{\"1\":{\"620\":1}}],[\"样式和内容\",{\"1\":{\"133\":1}}],[\"混入\",{\"1\":{\"664\":1}}],[\"混入到所有\",{\"1\":{\"659\":1}}],[\"混入mixin用的\",{\"1\":{\"543\":1}}],[\"混用本地和全局样式\",{\"0\":{\"620\":1}}],[\"拼接\",{\"1\":{\"801\":1}}],[\"拼接起来\",{\"1\":{\"611\":1}}],[\"拼图之类的布局效果显得格外的容易\",{\"1\":{\"177\":1}}],[\"形式也放入tokens中\",{\"1\":{\"611\":1}}],[\"形成\",{\"1\":{\"603\":1}}],[\"形成一个\",{\"1\":{\"255\":1}}],[\"形成环\",{\"1\":{\"1\":1}}],[\"岁了\",{\"1\":{\"610\":3}}],[\"我可以使用\",{\"1\":{\"713\":1}}],[\"我今年\",{\"1\":{\"610\":3}}],[\"我叫\",{\"1\":{\"610\":3}}],[\"我是注释\",{\"1\":{\"606\":1}}],[\"我们会使用\",{\"1\":{\"727\":1}}],[\"我们每个组件都会继承这个配置\",{\"1\":{\"543\":1}}],[\"我们几乎不会用到\",{\"1\":{\"543\":1}}],[\"我们无需修改\",{\"1\":{\"517\":1}}],[\"我们需要借助于postcss对应的插件\",{\"1\":{\"754\":1}}],[\"我们需要让0\",{\"1\":{\"381\":1}}],[\"我们需要将数字信息转换为电或光信号\",{\"1\":{\"380\":1}}],[\"我们需要将原本的灰色线条逐步变成绿色\",{\"1\":{\"190\":1}}],[\"我们当然也需要知道dns\",{\"1\":{\"343\":1}}],[\"我们将其表示为\",{\"1\":{\"282\":1}}],[\"我们先来看个例子\",{\"1\":{\"256\":1}}],[\"我们就可以更方便地管理物体的位置\",{\"1\":{\"234\":1}}],[\"我们也可以在一个结构体中嵌套另一个结构体\",{\"1\":{\"234\":1}}],[\"我们可以通过end\",{\"1\":{\"607\":1}}],[\"我们可以通过添加空计时器来\",{\"1\":{\"568\":1}}],[\"我们可以通过在网格容器\",{\"1\":{\"177\":1}}],[\"我们可以用点运算符来访问结构体的成员变量\",{\"1\":{\"234\":1}}],[\"挡在进行\",{\"1\":{\"603\":1}}],[\"源码\",{\"0\":{\"773\":1}}],[\"源码路径\",{\"1\":{\"603\":3}}],[\"源码中\",{\"1\":{\"601\":1}}],[\"说明这部分的节点被删掉了\",{\"1\":{\"597\":1}}],[\"说明新节点被遍历完了\",{\"1\":{\"597\":1}}],[\"索引之间的关系映射\",{\"1\":{\"597\":1}}],[\"索引器让你能够通过索引\",{\"1\":{\"80\":1}}],[\"索引器\",{\"0\":{\"80\":1},\"1\":{\"77\":1}}],[\"移除这些老节点\",{\"1\":{\"597\":1}}],[\"验证组件实例是否已经存在\",{\"1\":{\"591\":1}}],[\"了\",{\"1\":{\"589\":1,\"596\":1}}],[\"拿到老节点的真实元素\",{\"1\":{\"588\":1}}],[\"拿走最有价值的物品\",{\"0\":{\"17\":1}}],[\"走到这儿说明不是服务端渲染\",{\"1\":{\"588\":1}}],[\"老节点有剩余\",{\"1\":{\"597\":1}}],[\"老节点被遍历完了\",{\"1\":{\"597\":1}}],[\"老节点是文本节点\",{\"1\":{\"596\":1}}],[\"老节点没孩子\",{\"1\":{\"596\":1}}],[\"老节点和新节点相同\",{\"1\":{\"596\":1}}],[\"老节点存在\",{\"1\":{\"588\":1}}],[\"老的\",{\"1\":{\"588\":1}}],[\"销毁老节点\",{\"1\":{\"588\":1}}],[\"补丁版本\",{\"1\":{\"713\":1}}],[\"补丁\",{\"1\":{\"587\":1}}],[\"过程中就可以跳过对比这些节点\",{\"1\":{\"612\":1}}],[\"过程中会衰减\",{\"1\":{\"386\":1}}],[\"过程\",{\"1\":{\"587\":1}}],[\"过程叫做\",{\"1\":{\"587\":1}}],[\"父module\",{\"1\":{\"663\":1}}],[\"父组件的样式将不会渗透到子组件中\",{\"1\":{\"621\":1}}],[\"父beforedestroy\",{\"1\":{\"578\":1}}],[\"父beforeupdate\",{\"1\":{\"578\":1}}],[\"父beforecreate\",{\"1\":{\"578\":1}}],[\"父子生命周期\",{\"0\":{\"578\":1}}],[\"父元素有高度\",{\"1\":{\"145\":1}}],[\"逗号分隔字符串\",{\"1\":{\"571\":1}}],[\"允许您使用最新的javascript\",{\"1\":{\"697\":1}}],[\"允许组件有条件地缓存\",{\"1\":{\"571\":1}}],[\"允许使用不同语言编写的代码相互调用\",{\"1\":{\"71\":1}}],[\"失活\",{\"1\":{\"651\":1}}],[\"失活的组件将会被缓存\",{\"1\":{\"571\":1}}],[\"失败\",{\"1\":{\"294\":1,\"588\":1}}],[\"刷新微任务队列\",{\"1\":{\"568\":1}}],[\"刷新队列函数\",{\"1\":{\"559\":1}}],[\"刷新队列之前先给队列排序\",{\"1\":{\"558\":1}}],[\"刷新队列\",{\"1\":{\"558\":1}}],[\"强制更新所有监听者\",{\"1\":{\"663\":1}}],[\"强制\",{\"1\":{\"568\":1}}],[\"强制生成器进入关闭状态\",{\"1\":{\"274\":1}}],[\"置为\",{\"1\":{\"568\":1}}],[\"置为了\",{\"1\":{\"554\":1}}],[\"首次加载\",{\"1\":{\"575\":1}}],[\"首次渲染只会在keep\",{\"1\":{\"574\":1}}],[\"首选微任务队列\",{\"1\":{\"567\":1}}],[\"首先会通过端口将发过来的包接收进来\",{\"1\":{\"398\":1}}],[\"首先分配一个套接字所需的内存空间\",{\"1\":{\"357\":1}}],[\"首先执行\",{\"1\":{\"325\":1}}],[\"首先要调用其迭代器方法获得一个迭代器对象\",{\"1\":{\"260\":1}}],[\"首先进入\",{\"1\":{\"258\":1}}],[\"首先\",{\"1\":{\"190\":1,\"257\":1,\"799\":1}}],[\"首先将待排序的数组构造成一个大根堆\",{\"1\":{\"59\":1}}],[\"首先在未排序序列中找到最小\",{\"1\":{\"54\":1}}],[\"才会返回给客户端\",{\"1\":{\"794\":1}}],[\"才执行下一次事件处理回调\",{\"1\":{\"777\":1}}],[\"才遍历执行\",{\"1\":{\"567\":1}}],[\"才能在网线上传输\",{\"1\":{\"380\":1}}],[\"复原\",{\"1\":{\"566\":1}}],[\"复杂的布局和布局抖动\",{\"0\":{\"509\":1}}],[\"覆盖数组默认的七个原型方法\",{\"1\":{\"561\":1}}],[\"钩子了\",{\"1\":{\"591\":1}}],[\"钩子之后会创建一个组件实例\",{\"1\":{\"591\":1}}],[\"钩子\",{\"1\":{\"558\":1,\"590\":2,\"591\":1,\"596\":1,\"735\":1}}],[\"升序\",{\"1\":{\"558\":1}}],[\"缓存的虚拟dom的健集合\",{\"1\":{\"573\":1}}],[\"缓存虚拟dom\",{\"1\":{\"573\":1}}],[\"缓存对象\",{\"1\":{\"558\":1}}],[\"缓存\",{\"1\":{\"557\":1,\"570\":1}}],[\"缓存可以减少查询所需的时间\",{\"1\":{\"347\":1}}],[\"批量执行queue队列执行watcher\",{\"1\":{\"556\":1}}],[\"肯定是一个函数\",{\"1\":{\"555\":1}}],[\"兼容性处理\",{\"1\":{\"555\":2}}],[\"写法5\",{\"1\":{\"555\":1}}],[\"写法4\",{\"1\":{\"555\":1}}],[\"写法3\",{\"1\":{\"555\":1}}],[\"写法2\",{\"1\":{\"555\":1}}],[\"写法1\",{\"1\":{\"555\":1}}],[\"写入新日志会打开一个文件\",{\"1\":{\"455\":1}}],[\"供state读取使用\",{\"1\":{\"663\":1}}],[\"供state修改使用\",{\"1\":{\"663\":1}}],[\"供数据操作\",{\"1\":{\"663\":1}}],[\"供下次页面更新时重新计算\",{\"1\":{\"554\":1}}],[\"供调用时使用\",{\"1\":{\"552\":1}}],[\"待更新生效\",{\"1\":{\"663\":1}}],[\"待执行\",{\"1\":{\"567\":1}}],[\"待页面更新后\",{\"1\":{\"554\":1}}],[\"待整个序列中的记录\",{\"1\":{\"56\":1}}],[\"得到\",{\"1\":{\"804\":1}}],[\"得到结果是\",{\"1\":{\"603\":1}}],[\"得到一份最新的vnode节点树\",{\"1\":{\"582\":1}}],[\"得到当前\",{\"1\":{\"554\":1}}],[\"得到的颜色就逐步过渡从灰色到绿色\",{\"1\":{\"190\":1}}],[\"答案就在这个函数中寻找\",{\"1\":{\"544\":1}}],[\"准备工作完成\",{\"1\":{\"544\":1}}],[\"做一些\",{\"1\":{\"544\":1}}],[\"做了一些生命周期的初始化工作\",{\"1\":{\"544\":1}}],[\"几个属性和方法\",{\"1\":{\"543\":1}}],[\"至于在哪里会用到\",{\"1\":{\"542\":1}}],[\"至此\",{\"1\":{\"258\":1}}],[\"省略import语句\",{\"1\":{\"543\":1}}],[\"省略一些ssr相关的内容\",{\"1\":{\"541\":1}}],[\"省略devtool相关代码\",{\"1\":{\"540\":1}}],[\"省略\",{\"1\":{\"540\":2,\"541\":1,\"542\":1}}],[\"省略文件名\",{\"0\":{\"334\":1}}],[\"入口\",{\"1\":{\"540\":1}}],[\"局部方法\",{\"0\":{\"533\":1}}],[\"局域网网线使用的是双绞线\",{\"1\":{\"389\":1}}],[\"聚焦元素\",{\"1\":{\"532\":1}}],[\"及其子\",{\"1\":{\"532\":1}}],[\"及类似方法中被调用\",{\"1\":{\"308\":1}}],[\"注\",{\"1\":{\"613\":1}}],[\"注释\",{\"1\":{\"606\":1,\"688\":1}}],[\"注释节点\",{\"1\":{\"590\":1}}],[\"注册对应模块的getters\",{\"1\":{\"663\":1}}],[\"注册对应模块的action\",{\"1\":{\"663\":1}}],[\"注册对应模块的mutation\",{\"1\":{\"663\":1}}],[\"注册对应的\",{\"1\":{\"663\":1}}],[\"注册命名空间\",{\"1\":{\"663\":1}}],[\"注册子模块\",{\"1\":{\"663\":1}}],[\"注册事件\",{\"1\":{\"544\":1}}],[\"注册指令\",{\"1\":{\"543\":1}}],[\"注册指令和组件\",{\"1\":{\"540\":1}}],[\"注册组件\",{\"1\":{\"543\":1}}],[\"注册插件\",{\"1\":{\"543\":1}}],[\"注册一个全局自定义指令\",{\"1\":{\"532\":1}}],[\"注册\",{\"1\":{\"532\":1,\"776\":1}}],[\"注意这里注册的不是自己的\",{\"1\":{\"544\":1}}],[\"注意这里\",{\"1\":{\"542\":1}}],[\"注意\",{\"1\":{\"239\":1,\"251\":1,\"256\":1}}],[\"本质上是一种事件流的机制\",{\"1\":{\"776\":1}}],[\"本质上不过是语法糖\",{\"1\":{\"528\":1}}],[\"本质就是一个\",{\"1\":{\"744\":1}}],[\"本质就是一个js程序\",{\"1\":{\"693\":1}}],[\"本质\",{\"0\":{\"744\":1}}],[\"本地样式\",{\"1\":{\"620\":1}}],[\"本应销毁的变量没有被销毁\",{\"1\":{\"120\":1}}],[\"视图更新\",{\"1\":{\"524\":1}}],[\"视觉格式化模型\",{\"0\":{\"183\":1},\"1\":{\"183\":1}}],[\"赋值为当前\",{\"1\":{\"671\":1}}],[\"赋值为真实dom\",{\"1\":{\"575\":1}}],[\"赋值给\",{\"1\":{\"556\":1,\"663\":1}}],[\"赋值操作符\",{\"1\":{\"221\":1}}],[\"赋的值\",{\"1\":{\"521\":1}}],[\"空格\",{\"1\":{\"688\":1}}],[\"空函数\",{\"1\":{\"521\":1}}],[\"空间距离\",{\"1\":{\"226\":1}}],[\"空间复杂度\",{\"0\":{\"34\":1},\"1\":{\"56\":1,\"57\":1}}],[\"导航离开该组件的对应路由时调用\",{\"1\":{\"648\":1}}],[\"导入证书\",{\"1\":{\"517\":1}}],[\"导致数据泄露或被篡改\",{\"1\":{\"479\":1}}],[\"导致信号的波形发生失真\",{\"1\":{\"389\":1}}],[\"导致抛出了一个异常\",{\"1\":{\"282\":1}}],[\"添加或替换一条记录\",{\"1\":{\"655\":1}}],[\"添加回调\",{\"1\":{\"642\":1}}],[\"添加的三个用来进行数据操作的方法\",{\"1\":{\"543\":1}}],[\"添加的\",{\"1\":{\"543\":1}}],[\"添加了vue\",{\"1\":{\"542\":1}}],[\"添加了\",{\"1\":{\"542\":2,\"543\":4}}],[\"添加到父模块的\",{\"1\":{\"663\":1}}],[\"添加到\",{\"1\":{\"523\":1,\"534\":1}}],[\"添加到一个新的列表中\",{\"1\":{\"49\":1}}],[\"添加\",{\"1\":{\"517\":1,\"543\":1,\"760\":1}}],[\"~\",{\"1\":{\"517\":1}}],[\"~sampleclass\",{\"1\":{\"77\":1}}],[\"拷贝到\",{\"1\":{\"517\":1}}],[\"拷贝过来\",{\"1\":{\"517\":1}}],[\"路径\",{\"1\":{\"517\":2}}],[\"路由导航数组\",{\"1\":{\"655\":1}}],[\"路由导航\",{\"1\":{\"655\":2}}],[\"路由导航函数\",{\"1\":{\"654\":2,\"655\":1}}],[\"路由导航获取顺序\",{\"1\":{\"648\":1}}],[\"路由\",{\"1\":{\"651\":2,\"653\":1}}],[\"路由独享的守卫\",{\"1\":{\"648\":1}}],[\"路由独享\",{\"1\":{\"648\":1}}],[\"路由守卫函数\",{\"1\":{\"651\":1}}],[\"路由守卫\",{\"0\":{\"648\":1}}],[\"路由跳转\",{\"0\":{\"645\":1}}],[\"路由跳转匹配\",{\"1\":{\"641\":1}}],[\"路由路径数组\",{\"1\":{\"644\":1}}],[\"路由记录表的生成\",{\"1\":{\"641\":1}}],[\"路由表中子网掩码为\",{\"1\":{\"402\":1}}],[\"路由表中的信息\",{\"0\":{\"399\":1}}],[\"路由器是基于\",{\"1\":{\"406\":1}}],[\"路由器与交换机的关系\",{\"0\":{\"406\":1}}],[\"路由器也会使用\",{\"1\":{\"405\":1}}],[\"路由器判断下一个转发目标的方法如下\",{\"1\":{\"405\":1}}],[\"路由器进行发送前\",{\"1\":{\"403\":1}}],[\"路由器会根据\",{\"1\":{\"401\":1}}],[\"路由器就会丢弃包开头的\",{\"1\":{\"401\":1}}],[\"路由器在转发包时\",{\"1\":{\"398\":1}}],[\"路由器的附加功能\",{\"0\":{\"407\":1}}],[\"路由器的发送操作和计算机相同\",{\"0\":{\"405\":1}}],[\"路由器的端口都具有\",{\"1\":{\"400\":1}}],[\"路由器的包过滤功能\",{\"0\":{\"412\":1}}],[\"路由器的包接收操作\",{\"0\":{\"400\":1}}],[\"路由器的包转发操作\",{\"0\":{\"397\":1}}],[\"路由器的各个端口都具有\",{\"1\":{\"398\":1}}],[\"路由器的基本知识\",{\"0\":{\"398\":1}}],[\"路由器和交换机一样也负责对包进行转发\",{\"1\":{\"397\":1}}],[\"路由器\",{\"1\":{\"390\":1,\"406\":1}}],[\"路由器已经集成了集线器和交换机的功能\",{\"1\":{\"387\":1}}],[\"路由器等设备被转发\",{\"1\":{\"387\":1}}],[\"路由器根据目标地址判断下一个路由器的位置\",{\"1\":{\"374\":1}}],[\"配置devtool\",{\"1\":{\"760\":1}}],[\"配置方式更具rule\",{\"1\":{\"746\":1}}],[\"配置方式\",{\"1\":{\"745\":2}}],[\"配置中定义的浏览器\",{\"1\":{\"713\":1}}],[\"配置的targets属性会覆盖browserslist\",{\"1\":{\"697\":1}}],[\"配置进行修改\",{\"1\":{\"636\":1}}],[\"配置\",{\"1\":{\"636\":1}}],[\"配置工程\",{\"1\":{\"517\":1}}],[\"配置文件\",{\"1\":{\"517\":1}}],[\"配置系统\",{\"0\":{\"89\":1}}],[\"测试用例的\",{\"1\":{\"517\":2}}],[\"版本\",{\"1\":{\"713\":6}}],[\"版本的配置\",{\"1\":{\"709\":1}}],[\"版本要和\",{\"1\":{\"517\":1}}],[\"版本基础库的兼容\",{\"1\":{\"328\":1}}],[\"新增了静态标记\",{\"1\":{\"675\":1}}],[\"新增的代理和反射为开发者提供了拦截并向基本操作嵌入额外行为的能力\",{\"1\":{\"285\":1}}],[\"新节点是文本节点\",{\"1\":{\"596\":1}}],[\"新节点不是文本节点\",{\"1\":{\"596\":1}}],[\"新节点没孩子\",{\"1\":{\"596\":1}}],[\"新节点有剩余\",{\"1\":{\"597\":1}}],[\"新节点有\",{\"1\":{\"596\":1}}],[\"新旧节点都是静态的而且两个节点的\",{\"1\":{\"596\":1}}],[\"新的\",{\"1\":{\"558\":1,\"587\":3,\"588\":1}}],[\"新版没有md5\",{\"1\":{\"517\":1}}],[\"查看证书\",{\"1\":{\"517\":1}}],[\"查询路由表确定输出端口\",{\"0\":{\"401\":1}}],[\"查询mac\",{\"1\":{\"378\":1}}],[\"查询等收发较短的控制数据时用udp\",{\"1\":{\"355\":1}}],[\"查询ip\",{\"1\":{\"341\":2}}],[\"降低复杂度或使用web\",{\"0\":{\"508\":1}}],[\"启动gpu\",{\"0\":{\"506\":1}}],[\"离线化\",{\"0\":{\"498\":1}}],[\"懒加载\",{\"0\":{\"496\":1}}],[\"骨架屏\",{\"0\":{\"492\":1}}],[\"体验优化\",{\"0\":{\"491\":1}}],[\"压缩\",{\"0\":{\"485\":1,\"515\":1}}],[\"压入栈中\",{\"1\":{\"118\":1}}],[\"压入栈中并且创建新的\",{\"1\":{\"98\":1}}],[\"快速定位bug\",{\"1\":{\"483\":1}}],[\"快速排序\",{\"0\":{\"43\":1,\"58\":1},\"1\":{\"33\":1}}],[\"问题可以很快的被发现\",{\"1\":{\"483\":1}}],[\"问题定位\",{\"1\":{\"454\":1}}],[\"意为\",{\"1\":{\"587\":1}}],[\"意义\",{\"0\":{\"483\":1}}],[\"意味着不变的身份\",{\"1\":{\"280\":1}}],[\"软件设计的最小单位\",{\"1\":{\"482\":1}}],[\"恶意浏览\",{\"1\":{\"479\":1}}],[\"帐户停用诈骗\",{\"1\":{\"477\":1}}],[\"囚犯愿意以丰厚的报酬感谢受害者\",{\"1\":{\"477\":1}}],[\"声称要偷偷带出一位富有的西班牙囚犯\",{\"1\":{\"477\":1}}],[\"声明在编译时就已经确定的常量\",{\"1\":{\"236\":1}}],[\"声明一个常量表示\",{\"1\":{\"236\":1}}],[\"声明一个颜色变量\",{\"1\":{\"236\":1}}],[\"声明一个二维纹理阴影采样器\",{\"1\":{\"235\":1}}],[\"声明一个二维纹理采样器\",{\"1\":{\"235\":1}}],[\"声明一个一维纹理阴影采样器\",{\"1\":{\"235\":1}}],[\"声明一个一维纹理采样器\",{\"1\":{\"235\":1}}],[\"声明一个立方体纹理采样器\",{\"1\":{\"235\":1}}],[\"声明一个三维纹理采样器\",{\"1\":{\"235\":1}}],[\"声明一个无符号整型变量\",{\"1\":{\"230\":2}}],[\"声明一个无符号整数类型的变量\",{\"1\":{\"193\":1}}],[\"声明一个双精度浮点型变量\",{\"1\":{\"230\":2}}],[\"声明一个双精度浮点数类型变量\",{\"1\":{\"193\":1}}],[\"声明一个布尔型变量\",{\"1\":{\"230\":2}}],[\"声明一个布尔类型变量\",{\"1\":{\"193\":1}}],[\"声明一个整型变量\",{\"1\":{\"230\":2}}],[\"声明一个整数类型变量\",{\"1\":{\"193\":1}}],[\"声明一个单精度浮点型变量\",{\"1\":{\"230\":2}}],[\"声明一个2x3矩阵类型变量\",{\"1\":{\"193\":1}}],[\"声明一个2x2矩阵类型变量\",{\"1\":{\"193\":1}}],[\"声明一个长度为2的浮点数向量类型变量\",{\"1\":{\"193\":1}}],[\"声明一个长度为2的无符号整数向量类型变量\",{\"1\":{\"193\":1}}],[\"声明一个长度为2的整数向量类型变量\",{\"1\":{\"193\":1}}],[\"声明一个长度为2的布尔向量类型变量\",{\"1\":{\"193\":1}}],[\"声明一个浮点数类型变量\",{\"1\":{\"193\":1}}],[\"声明需要用到的uniform数据\",{\"1\":{\"190\":1}}],[\"骗子联系受害者来利用他们的贪婪和同情\",{\"1\":{\"477\":1}}],[\"伪造假网站\",{\"1\":{\"477\":1}}],[\"钓鱼\",{\"0\":{\"477\":1}}],[\"钓鱼网站\",{\"1\":{\"469\":1}}],[\"越权\",{\"0\":{\"474\":1}}],[\"越高色彩越纯\",{\"1\":{\"154\":1}}],[\"攻击者利用系统漏洞访问合法应用之外的数据或文件目录\",{\"1\":{\"479\":1}}],[\"攻击者便可诱使某些人交出登录凭证等重要信息\",{\"1\":{\"477\":1}}],[\"攻击者创建一个与受害者所用的合法企业网站\",{\"1\":{\"477\":1}}],[\"攻击者通过在\",{\"1\":{\"476\":1}}],[\"攻击者通过传播参数的时候传输\",{\"1\":{\"476\":1}}],[\"攻击者通过评论表单提交将<script>alert\",{\"1\":{\"472\":1}}],[\"攻击者诱导受害者进入第三方网站\",{\"1\":{\"469\":1}}],[\"故将跨站脚本攻击缩写为xss\",{\"1\":{\"470\":1}}],[\"冒用受害者信息\",{\"1\":{\"469\":1}}],[\"冒泡排序\",{\"0\":{\"53\":1}}],[\"达到冒充用户对被攻击的网站执行某项操作的目的\",{\"1\":{\"469\":1}}],[\"绕过后台的用户验证\",{\"1\":{\"469\":1}}],[\"波动预警等合适使用sentry进行处理\",{\"1\":{\"466\":1}}],[\"流\",{\"1\":{\"792\":1}}],[\"流等等各种方式中选择最佳的方式来实现网络实时应用\",{\"1\":{\"788\":1}}],[\"流程\",{\"0\":{\"603\":1},\"1\":{\"605\":1}}],[\"流程控制与例外处理等参数\",{\"1\":{\"70\":1}}],[\"流量分析\",{\"1\":{\"466\":1}}],[\"他只会在你主动上报给他的时候进行收集处理\",{\"1\":{\"466\":1}}],[\"他将让布局从一维布局变成了二维布局\",{\"1\":{\"177\":1}}],[\"交给\",{\"1\":{\"776\":1}}],[\"交给下一个loader来处理\",{\"1\":{\"727\":1}}],[\"交互式命令行\",{\"1\":{\"463\":1}}],[\"交换机\",{\"1\":{\"406\":1}}],[\"交换机是通过\",{\"1\":{\"399\":1}}],[\"交换机是基于以太网规格工作的设备\",{\"1\":{\"397\":1}}],[\"交换机无法判断应该把包转发到哪个端口\",{\"1\":{\"394\":1}}],[\"交换机在转发包的过程中\",{\"1\":{\"393\":1}}],[\"交换机的端口不核对接收方\",{\"1\":{\"392\":1}}],[\"交换机的包转发操作\",{\"0\":{\"391\":1}}],[\"交换机并不只是简单地让信号流过\",{\"1\":{\"392\":1}}],[\"交换机根据地址表进行转发\",{\"0\":{\"392\":1}}],[\"交换位置\",{\"1\":{\"58\":1}}],[\"彩色日志\",{\"0\":{\"463\":1}}],[\"命令行接口\",{\"1\":{\"754\":1}}],[\"命令行大logo\",{\"1\":{\"463\":1}}],[\"命令行基础库\",{\"1\":{\"463\":1}}],[\"命令行图表\",{\"1\":{\"463\":1}}],[\"命令行日志\",{\"0\":{\"462\":1}}],[\"命名函数\",{\"1\":{\"736\":1}}],[\"命名约定\",{\"1\":{\"66\":1}}],[\"命名空间可以嵌套\",{\"1\":{\"74\":1}}],[\"命名空间是c\",{\"1\":{\"74\":1}}],[\"命名空间\",{\"0\":{\"74\":1},\"1\":{\"64\":2}}],[\"按位对比\",{\"1\":{\"804\":1}}],[\"按大小切割\",{\"1\":{\"460\":1}}],[\"按照\",{\"1\":{\"726\":2}}],[\"按照队列中的\",{\"1\":{\"558\":1}}],[\"按照事先设置好的规则决定是转发这个包\",{\"1\":{\"412\":1}}],[\"按照该顺序反复运行\",{\"1\":{\"256\":1}}],[\"按照给定的变化率和偏移值获取纹理值\",{\"1\":{\"199\":1}}],[\"按照给定的变化率获取纹理值\",{\"1\":{\"199\":1}}],[\"按照第二个自变量\",{\"1\":{\"190\":1}}],[\"按照百位数进行排序\",{\"1\":{\"62\":1}}],[\"按照十位数进行排序\",{\"1\":{\"62\":1}}],[\"按照个位数进行排序\",{\"1\":{\"62\":1}}],[\"按照歌曲播放次数\",{\"1\":{\"49\":1}}],[\"堆栈跟踪\",{\"1\":{\"458\":1}}],[\"堆排序\",{\"0\":{\"59\":1}}],[\"好的日志\",{\"0\":{\"458\":1}}],[\"避免服务端收到非法的\",{\"1\":{\"801\":1}}],[\"避免污染全局代码使用\",{\"1\":{\"700\":1}}],[\"避免这里重复收集依赖\",{\"1\":{\"563\":1}}],[\"避免重复操作\",{\"1\":{\"561\":1}}],[\"避免大型\",{\"0\":{\"509\":1}}],[\"避免表达式\",{\"0\":{\"506\":1}}],[\"避免线上\",{\"1\":{\"483\":1}}],[\"避免\",{\"0\":{\"459\":1}}],[\"避免打印过多的日志\",{\"1\":{\"457\":1}}],[\"避免命名冲突\",{\"1\":{\"74\":1}}],[\"很低的日志级别\",{\"1\":{\"457\":1}}],[\"很多反射方法返回称作\",{\"1\":{\"294\":1}}],[\"管道\",{\"1\":{\"455\":1}}],[\"底层调用process\",{\"1\":{\"455\":1}}],[\"日志切割技术\",{\"0\":{\"460\":1}}],[\"日志的级别介绍\",{\"0\":{\"457\":1}}],[\"日志写入文件\",{\"1\":{\"455\":1}}],[\"日志是一种保存应用程序信息的简单方法\",{\"1\":{\"454\":1}}],[\"日志记录是将应用程序运行生成的信息记录到日志文件中的过程\",{\"1\":{\"454\":1}}],[\"日志\",{\"0\":{\"454\":1}}],[\"守护进程\",{\"1\":{\"452\":1}}],[\"健康检查\",{\"1\":{\"452\":1}}],[\"金丝雀滚动发布\",{\"1\":{\"452\":1}}],[\"灰度发布和金丝雀\",{\"1\":{\"452\":1}}],[\"灰度发布机制\",{\"0\":{\"452\":1}}],[\"灰色的混合值和绿色的混合值按比例相加\",{\"1\":{\"190\":1}}],[\"优势\",{\"1\":{\"796\":1}}],[\"优化了\",{\"1\":{\"603\":1}}],[\"优化器\",{\"1\":{\"603\":1}}],[\"优化阶段\",{\"1\":{\"603\":2}}],[\"优先级和列出顺序一致其中\",{\"1\":{\"549\":1}}],[\"优先遍历搜索\",{\"0\":{\"40\":1}}],[\"优雅退出\",{\"0\":{\"450\":1},\"1\":{\"451\":1}}],[\"服务端需要断开连接\",{\"1\":{\"803\":1}}],[\"服务端协商采用\",{\"1\":{\"803\":1}}],[\"服务端协商升级协议\",{\"1\":{\"798\":1}}],[\"服务端通信的最小单位是帧\",{\"1\":{\"802\":1}}],[\"服务端返回内容如下\",{\"1\":{\"800\":1}}],[\"服务端进行数据交换时\",{\"1\":{\"796\":1}}],[\"服务端\",{\"1\":{\"793\":1,\"795\":1}}],[\"服务端请求伪造\",{\"1\":{\"475\":1}}],[\"服务负载均衡\",{\"0\":{\"445\":1}}],[\"服务器响应协议升级\",{\"0\":{\"800\":1}}],[\"服务器收到客户端的握手请求后\",{\"1\":{\"798\":1}}],[\"服务器收到查询消息后\",{\"1\":{\"343\":1}}],[\"服务器建立\",{\"1\":{\"798\":1}}],[\"服务器回应\",{\"1\":{\"797\":1}}],[\"服务器端就能源源不断地往客户推送数据\",{\"1\":{\"795\":1}}],[\"服务器名称\",{\"1\":{\"458\":1}}],[\"服务器应用日志\",{\"0\":{\"456\":1}}],[\"服务器返回的包的接收包是原始包的发送方\",{\"1\":{\"409\":1}}],[\"服务器返回ack\",{\"1\":{\"371\":1}}],[\"服务器等\",{\"1\":{\"390\":1}}],[\"服务器有一个缓存a功能\",{\"1\":{\"347\":1}}],[\"服务器可以管理多个域的信息\",{\"1\":{\"347\":1}}],[\"服务器会从域名与ip\",{\"1\":{\"345\":1}}],[\"服务器会返回响应消息\",{\"1\":{\"342\":1}}],[\"服务器上注册\",{\"1\":{\"343\":1}}],[\"服务器上存在名为whatisthis\",{\"1\":{\"334\":1}}],[\"服务器已经在dns\",{\"1\":{\"343\":1}}],[\"服务器的基本工作就是接收来自客户端的查询消息\",{\"1\":{\"345\":1}}],[\"服务器的ip\",{\"1\":{\"343\":1}}],[\"服务器的http\",{\"1\":{\"343\":1}}],[\"服务器的查询消息\",{\"1\":{\"343\":1}}],[\"服务器发送fin\",{\"1\":{\"371\":1}}],[\"服务器发送消息时\",{\"1\":{\"343\":1}}],[\"服务器发送查询消息\",{\"1\":{\"341\":1,\"342\":1}}],[\"服务器发出查询\",{\"1\":{\"341\":1}}],[\"服务器\",{\"1\":{\"339\":1,\"341\":1,\"343\":2,\"345\":1,\"347\":1,\"789\":1,\"797\":1}}],[\"服务器和文件名\",{\"1\":{\"336\":1}}],[\"服务器完成怎样的工作\",{\"1\":{\"335\":1}}],[\"服务器就会访问\",{\"1\":{\"334\":1}}],[\"轻量级\",{\"1\":{\"432\":1}}],[\"跨平台\",{\"1\":{\"788\":1}}],[\"跨站请求伪造\",{\"1\":{\"469\":1}}],[\"跨越运营商的网络包\",{\"0\":{\"428\":1}}],[\"跨语言互操作性\",{\"1\":{\"71\":1}}],[\"心组成的\",{\"1\":{\"427\":1}}],[\"隧道技术\",{\"1\":{\"426\":1}}],[\"光纤的基本知识\",{\"0\":{\"424\":1}}],[\"光纤接入网\",{\"0\":{\"423\":1}}],[\"技术的利用率不相上下的光纤技术\",{\"1\":{\"423\":1}}],[\"技术使用的接入线路\",{\"1\":{\"419\":1}}],[\"振幅大的信号为\",{\"1\":{\"420\":1}}],[\"振幅小的信号为\",{\"1\":{\"420\":1}}],[\"振幅调制是用信号的强弱\",{\"1\":{\"420\":1}}],[\"调整其子组件根元素的样式\",{\"1\":{\"621\":1}}],[\"调试\",{\"1\":{\"454\":1}}],[\"调制\",{\"0\":{\"420\":1}}],[\"调用this\",{\"1\":{\"771\":1}}],[\"调用webpackcli\",{\"1\":{\"771\":1}}],[\"调用链\",{\"1\":{\"749\":1}}],[\"调用过程中\",{\"1\":{\"749\":1}}],[\"调用的优先级为\",{\"1\":{\"748\":1}}],[\"调用的时候\",{\"1\":{\"670\":1}}],[\"调用先后顺序为\",{\"1\":{\"748\":1}}],[\"调用一次\",{\"1\":{\"738\":1}}],[\"调用父类的listen方法\",{\"1\":{\"642\":1}}],[\"调用父节点的removechild方法\",{\"1\":{\"594\":1}}],[\"调用vm\",{\"1\":{\"642\":1}}],[\"调用该函数\",{\"1\":{\"604\":4}}],[\"调用update的时候会缓存该组件\",{\"1\":{\"573\":1}}],[\"调用指定的回调函数\",{\"1\":{\"568\":1}}],[\"调用原理\",{\"0\":{\"444\":1}}],[\"调用socket时的操作\",{\"0\":{\"357\":1}}],[\"调用解析器后\",{\"1\":{\"342\":1}}],[\"调用函数时的this\",{\"1\":{\"313\":1}}],[\"调用多少次的结果都一样\",{\"1\":{\"291\":1}}],[\"调用它\",{\"1\":{\"282\":1}}],[\"调用只能一次resolve\",{\"1\":{\"280\":1}}],[\"调用生成器函数会产生一个生成器对象\",{\"1\":{\"268\":1}}],[\"调用这个工厂函数会生成一个迭代器\",{\"1\":{\"263\":1}}],[\"调用这个工厂函数必须返回一个新迭代器\",{\"1\":{\"263\":1}}],[\"调用栈空闲\",{\"1\":{\"258\":1}}],[\"调用栈\",{\"1\":{\"117\":1,\"251\":3}}],[\"调用\",{\"1\":{\"79\":2,\"255\":1,\"268\":1,\"282\":2,\"521\":1,\"555\":1,\"559\":2,\"566\":2,\"636\":1,\"670\":1,\"725\":1,\"776\":1}}],[\"送\",{\"1\":{\"419\":1}}],[\"共\",{\"1\":{\"419\":1}}],[\"共享目标浏览器和\",{\"1\":{\"709\":1}}],[\"共享端口\",{\"0\":{\"446\":1}}],[\"共享\",{\"1\":{\"81\":1}}],[\"部\",{\"1\":{\"419\":2}}],[\"部分参考\",{\"1\":{\"189\":1,\"223\":1}}],[\"头\",{\"1\":{\"419\":2}}],[\"头部后方的\",{\"1\":{\"401\":1}}],[\"头部的作用就是将包送达路由器\",{\"1\":{\"401\":1}}],[\"头部的内容\",{\"1\":{\"368\":1,\"412\":1}}],[\"头部\",{\"1\":{\"375\":2,\"401\":1,\"406\":1,\"412\":2,\"419\":2}}],[\"头部中的内容进行包的转发操作\",{\"1\":{\"401\":1}}],[\"头部中的\",{\"1\":{\"399\":1,\"403\":1,\"409\":1}}],[\"头部中的接收方\",{\"1\":{\"399\":1,\"400\":1,\"405\":1,\"418\":1}}],[\"头部中的发送方和接收方端口号可以找到要连接的套接字\",{\"1\":{\"360\":1}}],[\"头部中记录的接收方\",{\"1\":{\"398\":1}}],[\"头部中记录的信息\",{\"1\":{\"359\":1}}],[\"距离的不同和路由的维护方式\",{\"1\":{\"417\":1}}],[\"距离场\",{\"0\":{\"226\":1},\"1\":{\"226\":1}}],[\"互联网是由多个运营商网络相互连接形成的巨大网络\",{\"1\":{\"428\":1}}],[\"互联网接入路由器会在网络包前面加上\",{\"1\":{\"419\":1}}],[\"互联网接入路由器是按照接入网规则来发送包的\",{\"1\":{\"418\":1}}],[\"互联网接入路由器发送网络包的操作和以太网路由器有一点不同\",{\"1\":{\"418\":1}}],[\"互联网也是根据路由表中的记录来判断转发目标的\",{\"1\":{\"417\":1}}],[\"互联网也是通过路由器来转发包的\",{\"1\":{\"417\":1}}],[\"互联网的基本结构和家庭\",{\"0\":{\"417\":1}}],[\"互联网行业进入一个更先进的阶段\",{\"1\":{\"65\":1}}],[\"电话线\",{\"1\":{\"418\":1}}],[\"电话线中传输的信号以及与电话共用的方式\",{\"1\":{\"416\":1}}],[\"电信号传输tcp\",{\"0\":{\"353\":1}}],[\"家庭和公司的内网是通过接入网连接到网络运营商的\",{\"1\":{\"416\":1}}],[\"总\",{\"1\":{\"419\":1}}],[\"总共可以分配出几万个端口\",{\"1\":{\"410\":1}}],[\"总是\",{\"1\":{\"725\":1}}],[\"总是先执行\",{\"1\":{\"257\":1}}],[\"总是移动数字较小的那个指针\",{\"1\":{\"13\":1}}],[\"●\",{\"1\":{\"405\":2}}],[\"完整版和只包含运行时版之间的差异主要在于是否有模板编译阶段运行时\",{\"1\":{\"602\":1}}],[\"完整版本\",{\"0\":{\"601\":1},\"1\":{\"601\":1}}],[\"完成一次渲染\",{\"1\":{\"582\":1}}],[\"完成如下几件事\",{\"1\":{\"559\":1}}],[\"完成包接收操作之后\",{\"1\":{\"401\":1}}],[\"完全没考虑过会把它当成容器\",{\"1\":{\"187\":1}}],[\"遇到不匹配的包则直接丢弃\",{\"1\":{\"400\":1}}],[\"遇到这个关键字后\",{\"1\":{\"269\":1}}],[\"看有没有新消息\",{\"1\":{\"794\":1}}],[\"看看低权限用户是否能越权使用高权限用户的功能\",{\"1\":{\"474\":1}}],[\"看看是不是发给自己的包\",{\"1\":{\"400\":1}}],[\"看待\",{\"1\":{\"280\":2}}],[\"工具会根据我们的配置来获取相关的浏览器信息\",{\"1\":{\"712\":1}}],[\"工具库需要使用polyfill\",{\"1\":{\"700\":1}}],[\"工作的\",{\"1\":{\"397\":1}}],[\"工厂方法\",{\"1\":{\"291\":1}}],[\"确定词语之间的关系\",{\"1\":{\"690\":1}}],[\"确定跳转\",{\"1\":{\"649\":1}}],[\"确定最优的传输速率\",{\"0\":{\"396\":1}}],[\"确保服务端理解\",{\"1\":{\"801\":1}}],[\"确保\",{\"1\":{\"644\":1}}],[\"确保即将\",{\"1\":{\"606\":1}}],[\"确保物体不会被遮挡\",{\"1\":{\"240\":1}}],[\"确保代码的正确性\",{\"1\":{\"71\":1}}],[\"维护\",{\"1\":{\"713\":1}}],[\"维护ast节点层级的栈\",{\"1\":{\"606\":1}}],[\"维护操作分为两种\",{\"1\":{\"393\":1}}],[\"维护了一个小型栈结构\",{\"1\":{\"122\":1}}],[\"噪声就得到了抑制\",{\"1\":{\"389\":1}}],[\"噪声是如何产生的\",{\"1\":{\"389\":1}}],[\"噪声函数\",{\"1\":{\"200\":1,\"206\":5,\"243\":1}}],[\"子组件从其父组件引用$store属性\",{\"1\":{\"659\":1}}],[\"子组件的根元素\",{\"0\":{\"621\":1}}],[\"子路由组成的数组\",{\"1\":{\"651\":1}}],[\"子路由\",{\"1\":{\"641\":1}}],[\"子节点不能只是只有一个文本节点\",{\"1\":{\"614\":1}}],[\"子节点如果还有子节点那就继续向下递归\",{\"1\":{\"613\":1}}],[\"子选项会覆盖父选项的配置\",{\"1\":{\"547\":1}}],[\"子网中的以太网协议将包传输到下一个转发设备\",{\"1\":{\"374\":1}}],[\"子元素在水平方向上一个接一个排列\",{\"1\":{\"175\":1}}],[\"集群\",{\"0\":{\"445\":1}}],[\"集线器不具备这样的特性\",{\"1\":{\"395\":1}}],[\"集线器只是原封不动地将信号广播出去\",{\"1\":{\"390\":1}}],[\"集线器将信号发往所有线路\",{\"0\":{\"390\":1}}],[\"集线器收到的信号有时会出现衰减\",{\"1\":{\"387\":1}}],[\"集线器在子网中将网络包传输到下一个路由\",{\"1\":{\"374\":1}}],[\"集合类型\",{\"1\":{\"263\":1}}],[\"集合\",{\"1\":{\"263\":1}}],[\"删除节点\",{\"1\":{\"587\":1}}],[\"删除所有的缓存\",{\"1\":{\"573\":1}}],[\"删除默认\",{\"1\":{\"517\":1}}],[\"删除套接字\",{\"0\":{\"371\":1}}],[\"删除属性的目标对象\",{\"1\":{\"307\":1}}],[\"号针脚流入网线\",{\"1\":{\"388\":1}}],[\"号和\",{\"1\":{\"388\":1}}],[\"号和窗口更新时\",{\"1\":{\"367\":1}}],[\"号\",{\"1\":{\"368\":1,\"371\":2}}],[\"号就可以了\",{\"1\":{\"367\":1}}],[\"号时\",{\"1\":{\"367\":1}}],[\"号表示的是已收到的数据量\",{\"1\":{\"367\":1}}],[\"号等待时间\",{\"0\":{\"365\":1}}],[\"收集起来\",{\"1\":{\"671\":1}}],[\"收集模块构造模块树\",{\"1\":{\"663\":1}}],[\"收集订阅者\",{\"1\":{\"660\":1}}],[\"收到服务器的响应\",{\"1\":{\"797\":1}}],[\"收到委托后\",{\"1\":{\"375\":1}}],[\"收到包后\",{\"1\":{\"366\":1}}],[\"收发\",{\"1\":{\"374\":1}}],[\"收发数据\",{\"0\":{\"361\":1},\"1\":{\"349\":1}}],[\"收发数据的两台计算机之间连接了一条数据通道\",{\"1\":{\"349\":1}}],[\"能使服务器能实时地将更新的信息传送到客户端\",{\"1\":{\"792\":1}}],[\"能完整的找到报错代码地址\",{\"1\":{\"762\":1}}],[\"能\",{\"1\":{\"648\":1}}],[\"能够访问\",{\"1\":{\"663\":1}}],[\"能够\",{\"1\":{\"636\":1}}],[\"能够同时从多个来源采集数据\",{\"1\":{\"464\":1}}],[\"能够表示的比特数就可以成倍提高\",{\"1\":{\"421\":1}}],[\"能够接收的最大数据量称为窗口大小\",{\"1\":{\"366\":1}}],[\"能等\",{\"1\":{\"407\":1}}],[\"能量会逐渐损失\",{\"1\":{\"387\":1}}],[\"能把在一行上的框都完全包含进去的一个矩形区域\",{\"1\":{\"175\":1}}],[\"套接字\",{\"1\":{\"359\":1}}],[\"套接字的实体就是通信控制信息\",{\"0\":{\"356\":1}}],[\"另外可以在这个文件中给应用程序添加权限声明\",{\"1\":{\"517\":1}}],[\"另外一类\",{\"1\":{\"359\":1}}],[\"另一种是删除地址表中某条记录的操作\",{\"1\":{\"393\":1}}],[\"另一种写法\",{\"1\":{\"281\":1}}],[\"另一个是\",{\"1\":{\"600\":1}}],[\"另一个是该设备连接在交换机的哪个端口上\",{\"1\":{\"392\":1}}],[\"另一个\",{\"1\":{\"197\":1}}],[\"另一个矢量\",{\"1\":{\"197\":1}}],[\"另一边自动计算就可以\",{\"1\":{\"169\":1}}],[\"随后协议栈会将本地的套接字与服务器的套接字进行连接\",{\"1\":{\"358\":1}}],[\"随机函数\",{\"1\":{\"200\":1,\"206\":2,\"243\":1}}],[\"端口号是一个\",{\"1\":{\"410\":1}}],[\"端口号\",{\"1\":{\"356\":1}}],[\"端运行结果\",{\"1\":{\"258\":1}}],[\"断开连接\",{\"1\":{\"789\":1}}],[\"断开等各阶段操作时\",{\"1\":{\"374\":1}}],[\"断开阶段\",{\"1\":{\"349\":1}}],[\"断开管道并删除套接字\",{\"1\":{\"349\":1}}],[\"委托协议栈发送消息\",{\"0\":{\"348\":1}}],[\"现在使用的\",{\"1\":{\"713\":1}}],[\"现在是\",{\"1\":{\"713\":1}}],[\"现在给定所有的城市和航班\",{\"1\":{\"18\":1}}],[\"现场记录与根因分析\",{\"1\":{\"454\":1}}],[\"现实中上级域和下级域有可能共享同一台dns\",{\"1\":{\"347\":1}}],[\"邮件等一般应用程序收发数据时用tcp\",{\"1\":{\"355\":1}}],[\"邮件地址中\",{\"1\":{\"345\":1}}],[\"邮件服务器\",{\"1\":{\"345\":1}}],[\"消息\",{\"1\":{\"458\":1}}],[\"消息在粗粒度级别上突出强调应用程序的运行过程\",{\"1\":{\"457\":1}}],[\"消息经过网络到达客户端\",{\"1\":{\"343\":1}}],[\"消息之后\",{\"1\":{\"339\":1}}],[\"响应消息中包含查询到的ip\",{\"1\":{\"342\":1}}],[\"响应式数据发生变化\",{\"1\":{\"671\":1}}],[\"响应式数据更新发生\",{\"1\":{\"524\":1}}],[\"响应式处理\",{\"1\":{\"665\":1}}],[\"响应式定义\",{\"1\":{\"642\":1}}],[\"响应式原理\",{\"0\":{\"537\":1,\"556\":1}}],[\"响应式式数据\",{\"1\":{\"524\":1}}],[\"响应式\",{\"0\":{\"516\":1}}],[\"响应式布局\",{\"0\":{\"180\":1}}],[\"响应式与自适应布局\",{\"0\":{\"179\":1}}],[\"库\",{\"1\":{\"787\":1}}],[\"库也是一种库\",{\"1\":{\"341\":1}}],[\"库中的socket\",{\"1\":{\"350\":1}}],[\"库中的程序组件\",{\"1\":{\"349\":1}}],[\"库中的解析器\",{\"1\":{\"342\":1}}],[\"库中\",{\"1\":{\"341\":1}}],[\"库负责\",{\"1\":{\"255\":1}}],[\"广播\",{\"1\":{\"339\":1}}],[\"全量的属性更新\",{\"1\":{\"596\":1}}],[\"全量更新新节点的属性\",{\"1\":{\"596\":1}}],[\"全部更新后调用\",{\"1\":{\"532\":1}}],[\"全双工模式是交换机特有的工作模式\",{\"1\":{\"395\":1}}],[\"全双工模式可以同时进行发送和接收\",{\"0\":{\"395\":1}}],[\"全1\",{\"1\":{\"339\":1}}],[\"全0\",{\"1\":{\"339\":1}}],[\"全局路由守卫\",{\"1\":{\"648\":1}}],[\"全局样式\",{\"1\":{\"620\":1}}],[\"全局config对象\",{\"1\":{\"543\":1}}],[\"全局方法\",{\"0\":{\"532\":1}}],[\"全局脚本\",{\"1\":{\"258\":1}}],[\"全局\",{\"1\":{\"251\":1}}],[\"全局作用域中的对象在代码中的任何地方都能访问\",{\"1\":{\"119\":1}}],[\"全局作用域和函数作用域\",{\"1\":{\"119\":1}}],[\"全局执行上下文只有一份\",{\"1\":{\"117\":1}}],[\"条请求\",{\"1\":{\"337\":1}}],[\"条请求消息中只能写1\",{\"1\":{\"337\":1}}],[\"条件查询使用的是\",{\"1\":{\"712\":1}}],[\"条件注释\",{\"1\":{\"606\":1}}],[\"条件判断符\",{\"1\":{\"221\":1}}],[\"条件句是否没有被定义\",{\"1\":{\"209\":1}}],[\"条件句是否已被定义\",{\"1\":{\"209\":1}}],[\"发生在这个阶段\",{\"1\":{\"726\":1}}],[\"发布\",{\"1\":{\"452\":1}}],[\"发\",{\"1\":{\"419\":1}}],[\"发目标\",{\"1\":{\"405\":1}}],[\"发送端\",{\"1\":{\"802\":1}}],[\"发送消息这个操作并不是由解析器自身来执行\",{\"1\":{\"343\":1}}],[\"发送请求收到响应\",{\"0\":{\"337\":1}}],[\"发现它是不可配置对象的话直接\",{\"1\":{\"563\":1}}],[\"发现存在\",{\"1\":{\"257\":1}}],[\"发现第四件商品\",{\"1\":{\"17\":1}}],[\"客户端发起协议升级请求\",{\"1\":{\"799\":1}}],[\"客户端发起\",{\"0\":{\"799\":1}}],[\"客户端发送\",{\"1\":{\"794\":1}}],[\"客户端发送fin\",{\"1\":{\"371\":1}}],[\"客户端通过\",{\"1\":{\"798\":1}}],[\"客户端连接成功\",{\"1\":{\"797\":1}}],[\"客户端收到服务器发过来的消息后触发\",{\"1\":{\"789\":1}}],[\"客户端\",{\"1\":{\"789\":1,\"793\":1,\"795\":1,\"796\":1,\"797\":1,\"802\":1}}],[\"客户端会生成一个syn\",{\"1\":{\"372\":1}}],[\"客户端会向服务器发起连接操作\",{\"1\":{\"372\":1}}],[\"客户端会向服务器发送请求消息\",{\"1\":{\"335\":1}}],[\"客户端返回ack\",{\"1\":{\"371\":1}}],[\"客户端和服务器在通信中会将必要的信息记录在头部并相互确认\",{\"1\":{\"359\":1}}],[\"客户端创建套接字的操作非常简单\",{\"1\":{\"350\":1}}],[\"客户端输入的数据发送给uri\",{\"1\":{\"335\":1}}],[\"程序组件\",{\"1\":{\"350\":1}}],[\"程序b\",{\"1\":{\"335\":1}}],[\"程序结束时终结器被调用\",{\"1\":{\"77\":1}}],[\"域名的层次结构\",{\"0\":{\"346\":1}}],[\"域名和ip地址并用理由\",{\"0\":{\"340\":1}}],[\"域名\",{\"1\":{\"330\":1,\"345\":1}}],[\"协议升级完成后\",{\"1\":{\"798\":1}}],[\"协议回馈数据\",{\"1\":{\"798\":1}}],[\"协议向服务器传送\",{\"1\":{\"798\":1}}],[\"协议控制的数据包头部较小\",{\"1\":{\"796\":1}}],[\"协议中是运行同样名称的参数出现多次\",{\"1\":{\"476\":1}}],[\"协议根据目标地址判断下一个ip\",{\"1\":{\"374\":1}}],[\"协议栈将数据块暂存到接收缓冲区中\",{\"1\":{\"368\":1}}],[\"协议栈会将接收到的数据复制到应用程序指定的内存地址中\",{\"1\":{\"368\":1}}],[\"协议栈会检查收到的数据块和tcp\",{\"1\":{\"368\":1}}],[\"协议栈会执行发送消息的操作\",{\"1\":{\"343\":1}}],[\"协议栈中的内存空间\",{\"1\":{\"359\":1}}],[\"协议栈是根据套接字中记录的控制信息来工作的\",{\"1\":{\"356\":1}}],[\"协议栈的内部结构\",{\"0\":{\"355\":1}}],[\"协议定义了客户端和服务器之间交互的消息内容和步骤\",{\"1\":{\"335\":1}}],[\"协议\",{\"1\":{\"330\":1,\"799\":1}}],[\"组件初始化\",{\"1\":{\"663\":1}}],[\"组件中\",{\"1\":{\"659\":1}}],[\"组件中获取到对应的路由导航\",{\"1\":{\"654\":1}}],[\"组件name\",{\"1\":{\"654\":2}}],[\"组件实例还没被创建\",{\"1\":{\"648\":1}}],[\"组件内的守卫\",{\"1\":{\"648\":1}}],[\"组件被\",{\"1\":{\"591\":1}}],[\"组件新的\",{\"1\":{\"591\":1}}],[\"组件第一次挂载的时候\",{\"1\":{\"589\":1}}],[\"组件挂载\",{\"0\":{\"580\":1}}],[\"组件一旦被\",{\"1\":{\"570\":1}}],[\"组件的更新顺序为从父级到子级\",{\"1\":{\"558\":1}}],[\"组件\",{\"0\":{\"328\":1},\"1\":{\"573\":1,\"642\":1,\"648\":1,\"654\":1}}],[\"触发dep\",{\"1\":{\"556\":1}}],[\"触发data中的getter将当前的watcher收集\",{\"1\":{\"554\":1}}],[\"触发domcontentloaded事件\",{\"1\":{\"102\":1,\"103\":1,\"104\":1}}],[\"触发\",{\"1\":{\"523\":1,\"556\":2,\"566\":1,\"670\":1,\"671\":1,\"776\":1}}],[\"触发下拉刷新时执行\",{\"1\":{\"327\":1}}],[\"键\",{\"1\":{\"324\":1}}],[\"手势或\",{\"1\":{\"324\":1}}],[\"安装组件钩子函数\",{\"1\":{\"585\":1}}],[\"安装组件构造函数\",{\"1\":{\"580\":1}}],[\"安装\",{\"0\":{\"659\":1,\"663\":1},\"1\":{\"517\":1,\"660\":1,\"663\":3}}],[\"安卓点击返回键离开小程序\",{\"1\":{\"324\":1}}],[\"安全地应用函数\",{\"0\":{\"296\":1}}],[\"安全\",{\"1\":{\"71\":1}}],[\"切后台的方式包括但不限于以下几种\",{\"1\":{\"324\":1}}],[\"界面被展示给用户\",{\"1\":{\"324\":1}}],[\"热启动\",{\"1\":{\"323\":1}}],[\"冷启动\",{\"1\":{\"323\":1}}],[\"拦截\",{\"1\":{\"563\":2}}],[\"拦截器触发\",{\"1\":{\"524\":1}}],[\"拦截器\",{\"1\":{\"523\":2,\"556\":2}}],[\"拦截器的名字\",{\"1\":{\"320\":1}}],[\"拦截了所有的代理api方法\",{\"1\":{\"320\":1}}],[\"拦截的操作\",{\"1\":{\"302\":1,\"303\":1,\"304\":1,\"305\":1,\"306\":1,\"307\":1,\"308\":1,\"309\":1,\"310\":1,\"311\":1,\"312\":1,\"313\":1,\"314\":1}}],[\"隐藏起foo\",{\"1\":{\"317\":1}}],[\"隐藏属性\",{\"0\":{\"317\":1}}],[\"跟\",{\"1\":{\"801\":1}}],[\"跟保护和验证对象属性类似\",{\"1\":{\"319\":1}}],[\"跟踪属性访问\",{\"0\":{\"316\":1}}],[\"跟i后面的元素进行比较\",{\"1\":{\"53\":1}}],[\"型为布尔值\",{\"1\":{\"312\":1}}],[\"防止网线中的信号衰减很重要\",{\"0\":{\"388\":1}}],[\"防止将来对对象的扩展被添加到对象中\",{\"1\":{\"312\":1}}],[\"防止垂直\",{\"1\":{\"174\":1}}],[\"唯一有效的返回值就是\",{\"1\":{\"309\":1}}],[\"唯一可感知的不同就是代码中操作的是代理对象\",{\"1\":{\"287\":1}}],[\"严格模式下会抛出typeerror\",{\"1\":{\"303\":1}}],[\"严格相等可以用来区分代理和目标\",{\"1\":{\"287\":1}}],[\"特点\",{\"0\":{\"788\":1}}],[\"特性\",{\"0\":{\"432\":1},\"1\":{\"710\":1}}],[\"特性为\",{\"1\":{\"302\":1,\"303\":1}}],[\"特殊操作\",{\"0\":{\"394\":1}}],[\"特殊类型变量\",{\"0\":{\"238\":1}}],[\"匹配node\",{\"1\":{\"720\":1}}],[\"匹配指定目录的文件\",{\"1\":{\"720\":1}}],[\"匹配过程\",{\"0\":{\"638\":1},\"1\":{\"638\":1}}],[\"匹配到pitch\",{\"1\":{\"638\":1}}],[\"匹配到\",{\"1\":{\"635\":1}}],[\"匹配\",{\"1\":{\"302\":1,\"638\":2,\"670\":1}}],[\"①\",{\"1\":{\"302\":1}}],[\"目前有三种实现方式\",{\"1\":{\"792\":1}}],[\"目录下\",{\"1\":{\"517\":1}}],[\"目录之下\",{\"1\":{\"517\":1}}],[\"目录遍历攻击又称目录穿越\",{\"1\":{\"479\":1}}],[\"目录遍历攻击\",{\"0\":{\"479\":1}}],[\"目标导入所有的polyfill\",{\"1\":{\"699\":1}}],[\"目标构造函数\",{\"1\":{\"314\":1}}],[\"目标对象\",{\"1\":{\"302\":1,\"303\":1,\"304\":1,\"305\":1,\"306\":1,\"308\":1,\"309\":1,\"310\":1,\"311\":1,\"312\":1,\"313\":1}}],[\"目的地\",{\"1\":{\"18\":1}}],[\"于是代理拦截后本应转发给目标对象的方法会抛出\",{\"1\":{\"300\":1}}],[\"实时性更强\",{\"1\":{\"796\":1}}],[\"实时监听黑白名单的变动\",{\"1\":{\"573\":1}}],[\"实际是取\",{\"1\":{\"671\":1}}],[\"实际上信号不一定要限制在一个频率\",{\"1\":{\"421\":1}}],[\"实际上\",{\"1\":{\"387\":1}}],[\"实例化\",{\"1\":{\"563\":1}}],[\"实例\",{\"1\":{\"554\":1}}],[\"实例上\",{\"1\":{\"550\":1}}],[\"实例项目中\",{\"1\":{\"517\":1}}],[\"实例一开始使用目标对象作为\",{\"1\":{\"299\":1}}],[\"实用反射\",{\"0\":{\"292\":1}}],[\"实现插件机制的大体方式是\",{\"1\":{\"776\":1}}],[\"实现dispatch\",{\"1\":{\"665\":1}}],[\"实现commit\",{\"1\":{\"665\":1}}],[\"实现state\",{\"1\":{\"665\":1}}],[\"实现getters\",{\"1\":{\"665\":1}}],[\"实现输入和输出\",{\"0\":{\"271\":1}}],[\"实现迭代器对象\",{\"0\":{\"266\":1}}],[\"实现可迭代对象\",{\"0\":{\"264\":1}}],[\"实现\",{\"0\":{\"170\":1},\"1\":{\"263\":2,\"281\":2,\"282\":1}}],[\"撤销函数\",{\"1\":{\"291\":1}}],[\"撤销代理的操作是不可逆的\",{\"1\":{\"291\":1}}],[\"撤销代理对象与目标对象的关联\",{\"1\":{\"291\":1}}],[\"捕获处理程序的行为必须遵循\",{\"1\":{\"290\":1}}],[\"捕获器\",{\"1\":{\"318\":1}}],[\"捕获器会在调用函数时中被调用\",{\"1\":{\"313\":1}}],[\"捕获器会在\",{\"1\":{\"304\":1,\"305\":1,\"306\":1,\"307\":1,\"308\":1,\"309\":1,\"310\":1,\"311\":1,\"312\":1,\"314\":1}}],[\"捕获器会在设置属性值的操作中被调用\",{\"1\":{\"303\":1}}],[\"捕获器会在获取属性值的操作中被调用\",{\"1\":{\"302\":1}}],[\"捕获器会接收到目标对象\",{\"1\":{\"289\":1}}],[\"捕获器不变式\",{\"0\":{\"290\":1},\"1\":{\"290\":1,\"302\":1,\"303\":1,\"304\":1,\"305\":1,\"306\":1,\"307\":1,\"308\":1,\"309\":1,\"310\":1,\"311\":1,\"312\":1,\"313\":1,\"314\":1}}],[\"捕获器参数和反射\",{\"0\":{\"289\":1}}],[\"捕获器在处理程序对象中以方法名为键\",{\"1\":{\"288\":1}}],[\"捕获器就是在处理程序对象中定义的\",{\"1\":{\"288\":1}}],[\"简化绘制复杂度\",{\"0\":{\"510\":1}}],[\"简洁\",{\"1\":{\"289\":1}}],[\"简单来说语法分析是对语句和表达式识别\",{\"1\":{\"690\":1}}],[\"简单的说\",{\"1\":{\"177\":1}}],[\"简单说就是一组类库框架\",{\"1\":{\"65\":1}}],[\"简单查找\",{\"1\":{\"33\":1}}],[\"反掩码操作都采用如下算法\",{\"1\":{\"804\":1}}],[\"反射型xss攻击\",{\"0\":{\"471\":1}}],[\"反射api的名字\",{\"1\":{\"320\":1}}],[\"反射\",{\"0\":{\"293\":1},\"1\":{\"289\":2,\"293\":1}}],[\"反之则是0\",{\"1\":{\"190\":1}}],[\"反之也如此\",{\"1\":{\"174\":1}}],[\"各占\",{\"1\":{\"803\":1}}],[\"各占据\",{\"1\":{\"803\":1}}],[\"各属性中的函数分别定义了在执行各种操作时代理\",{\"1\":{\"287\":1}}],[\"各部分的过程\",{\"1\":{\"106\":1}}],[\"甚至另一个代理\",{\"1\":{\"287\":1}}],[\"甚至于手机软件\",{\"1\":{\"65\":1}}],[\"遵循上面的算法将会导致无限递归\",{\"1\":{\"282\":1}}],[\"遵循这些规则和约定可以帮助创建清晰\",{\"1\":{\"66\":1}}],[\"链解决\",{\"1\":{\"282\":1}}],[\"链表的每个元素都存储了下一个元素的地址\",{\"1\":{\"49\":1}}],[\"链表中的元素可存储在内存的任何地方\",{\"1\":{\"49\":1}}],[\"忽略它\",{\"1\":{\"282\":1}}],[\"已经在刷新队列了\",{\"1\":{\"557\":1}}],[\"已经存在\",{\"1\":{\"557\":1}}],[\"已经被调用\",{\"1\":{\"282\":1}}],[\"已经访问设置\",{\"1\":{\"1\":1}}],[\"抛出了一个异常\",{\"1\":{\"282\":1}}],[\"抛出一个异常\",{\"1\":{\"281\":1}}],[\"依赖app\",{\"1\":{\"642\":1}}],[\"依赖收集\",{\"1\":{\"564\":1,\"671\":1}}],[\"依赖更变\",{\"1\":{\"521\":1}}],[\"依旧会直接\",{\"1\":{\"282\":1}}],[\"依次执行\",{\"1\":{\"558\":1}}],[\"依次打印\",{\"1\":{\"258\":1}}],[\"依次打印出\",{\"1\":{\"256\":1}}],[\"依次放入\",{\"1\":{\"256\":1,\"258\":1}}],[\"依次进行一次排序\",{\"1\":{\"62\":1}}],[\"依次找出播放次数第二的乐队\",{\"1\":{\"49\":1}}],[\"拒绝的原因就是\",{\"1\":{\"282\":1}}],[\"拒绝\",{\"1\":{\"282\":1}}],[\"译者注\",{\"1\":{\"282\":3}}],[\"译注者\",{\"1\":{\"280\":1}}],[\"成信号\",{\"0\":{\"420\":1}}],[\"成为\",{\"1\":{\"282\":1}}],[\"成功\",{\"1\":{\"281\":1}}],[\"成员\",{\"0\":{\"77\":1}}],[\"ˈpendɪŋ\",{\"1\":{\"280\":1}}],[\"行为日志分析\",{\"1\":{\"466\":1}}],[\"行代码实现\",{\"1\":{\"276\":1}}],[\"行内\",{\"1\":{\"726\":2}}],[\"行内元素\",{\"0\":{\"186\":1}}],[\"行内级盒子\",{\"1\":{\"184\":2}}],[\"行内样式\",{\"1\":{\"99\":1,\"102\":1,\"103\":1,\"104\":1}}],[\"错误处理会跳过对应的\",{\"1\":{\"274\":1}}],[\"假如生成器函数内部处理了这个错误\",{\"1\":{\"274\":1}}],[\"假设需要对法线进行变换\",{\"1\":{\"239\":2}}],[\"假设需要对纹理坐标进行变换\",{\"1\":{\"239\":1}}],[\"假设需要对顶点进行模型视图投影变换\",{\"1\":{\"239\":1}}],[\"假设需要对顶点进行模型视图变换\",{\"1\":{\"239\":1}}],[\"假设需要将顶点从视图坐标系变换到裁剪坐标系\",{\"1\":{\"239\":1}}],[\"假设你总是可以到达数组的最后一个位置\",{\"1\":{\"23\":1}}],[\"让我们梳理下逻辑\",{\"1\":{\"589\":1}}],[\"让新值也是响应式的\",{\"1\":{\"563\":1}}],[\"让每个dep收集当前的watcher\",{\"1\":{\"521\":2}}],[\"让路由器来使用ip\",{\"1\":{\"340\":1}}],[\"让人来使用名称\",{\"1\":{\"340\":1}}],[\"让所有创建的实例都被添加到这个集合中\",{\"1\":{\"320\":1}}],[\"让\",{\"1\":{\"282\":1}}],[\"让它能够迭代一个可迭代对象\",{\"1\":{\"272\":1}}],[\"让生成器函数暂停的\",{\"1\":{\"271\":1}}],[\"产生噪声的原因是网线周围的电磁波\",{\"1\":{\"389\":1}}],[\"产生可迭代对象\",{\"0\":{\"272\":1}}],[\"产生两个\",{\"1\":{\"175\":1}}],[\"传输协议\",{\"1\":{\"796\":1}}],[\"传字符串参数\",{\"1\":{\"664\":1}}],[\"传递给action的参数\",{\"1\":{\"661\":1}}],[\"传递的回调函数\",{\"1\":{\"568\":1}}],[\"传递的第二个参数\",{\"1\":{\"559\":1}}],[\"传递\",{\"1\":{\"558\":1}}],[\"传递纹理坐标给片元着色器\",{\"1\":{\"239\":1}}],[\"传参reflect\",{\"1\":{\"320\":1}}],[\"传给目标构造函数的参数列表\",{\"1\":{\"314\":1}}],[\"传入\",{\"1\":{\"771\":1}}],[\"传入state值\",{\"1\":{\"665\":1}}],[\"传入当前的mutation对象和当前的state\",{\"1\":{\"662\":1}}],[\"传入的参数\",{\"1\":{\"670\":1}}],[\"传入的\",{\"1\":{\"644\":1,\"646\":1}}],[\"传入的值不会被使用\",{\"1\":{\"271\":1}}],[\"传入了\",{\"1\":{\"271\":1}}],[\"停止执行的生成器函数只能通过在生成器对象上调用\",{\"1\":{\"269\":1}}],[\"状态代码\",{\"1\":{\"800\":1}}],[\"状态标记\",{\"0\":{\"294\":1},\"1\":{\"294\":1}}],[\"状态迁移函数\",{\"1\":{\"280\":2}}],[\"状态\",{\"1\":{\"265\":1,\"269\":2,\"324\":3}}],[\"状态称为\",{\"1\":{\"265\":1}}],[\"耗尽\",{\"1\":{\"265\":1}}],[\"|masking\",{\"1\":{\"803\":1}}],[\"|k|\",{\"1\":{\"803\":1}}],[\"|1|2|3|\",{\"1\":{\"803\":1}}],[\"|s|\",{\"1\":{\"803\":1}}],[\"|n|v|v|v|\",{\"1\":{\"803\":1}}],[\"|a|\",{\"1\":{\"803\":1}}],[\"|i|s|s|s|\",{\"1\":{\"803\":1}}],[\"|f|r|r|r|\",{\"1\":{\"803\":1}}],[\"|eval\",{\"1\":{\"769\":2}}],[\"|hidden\",{\"1\":{\"769\":2}}],[\"|^v\",{\"1\":{\"534\":1}}],[\"|^\",{\"1\":{\"534\":8}}],[\"|\",{\"1\":{\"264\":1,\"517\":1,\"521\":4,\"532\":3,\"540\":1,\"547\":2,\"554\":1,\"555\":2,\"560\":2,\"563\":4,\"564\":1,\"565\":6,\"566\":6,\"573\":2,\"581\":1,\"582\":2,\"584\":5,\"585\":6,\"588\":1,\"601\":1,\"602\":1,\"603\":1,\"610\":1,\"611\":2,\"612\":2,\"615\":2,\"654\":2,\"656\":3,\"669\":1,\"670\":2,\"744\":1,\"803\":18}}],[\"||\",{\"1\":{\"8\":1,\"61\":1,\"79\":1,\"102\":3,\"103\":3,\"104\":3,\"218\":1,\"283\":1,\"455\":1,\"464\":1,\"521\":2,\"534\":2,\"535\":1,\"544\":1,\"545\":1,\"547\":1,\"548\":1,\"551\":1,\"553\":1,\"554\":2,\"555\":1,\"559\":2,\"560\":4,\"563\":2,\"565\":3,\"566\":1,\"568\":1,\"573\":4,\"584\":5,\"585\":2,\"588\":1,\"589\":1,\"596\":1,\"601\":1,\"603\":4,\"606\":3,\"608\":4,\"609\":2,\"610\":3,\"612\":2,\"613\":1,\"614\":2,\"615\":6,\"625\":1,\"627\":1,\"629\":2,\"635\":1,\"642\":4,\"643\":2,\"644\":7,\"649\":1,\"651\":2,\"655\":2,\"656\":5,\"663\":4,\"670\":3,\"690\":1,\"718\":1}}],[\"原生元素\",{\"1\":{\"528\":1}}],[\"原生语言结构会在后台调用提供的可迭代对象的这个工厂函数\",{\"1\":{\"263\":1}}],[\"原型上的\",{\"1\":{\"296\":1}}],[\"原因\",{\"1\":{\"278\":1}}],[\"原理\",{\"1\":{\"145\":1}}],[\"循环遍历\",{\"1\":{\"590\":1}}],[\"循环遍历arraykeys\",{\"1\":{\"561\":1}}],[\"循环出来的结果其实是三个\",{\"1\":{\"542\":1}}],[\"循环\",{\"1\":{\"263\":2}}],[\"循环来遍历数组中的每一个元素\",{\"1\":{\"232\":1}}],[\"映射到原始的源文件\",{\"1\":{\"757\":1}}],[\"映射\",{\"1\":{\"263\":1}}],[\"迭代结果对象是具有属性\",{\"1\":{\"260\":1}}],[\"迭代器并不知道怎么从可迭代对象中取得下一个值\",{\"1\":{\"265\":1}}],[\"迭代器工厂函数\",{\"1\":{\"265\":1}}],[\"迭代器\",{\"1\":{\"265\":2}}],[\"迭代器是一种一次性使用的对象\",{\"1\":{\"265\":1}}],[\"迭代器协议\",{\"0\":{\"265\":1}}],[\"迭代器模式\",{\"0\":{\"262\":1}}],[\"迭代器对象指的是任何具有\",{\"1\":{\"260\":1}}],[\"迭代器与生成器\",{\"0\":{\"260\":1}}],[\"迭代之前需要事先知道如何使用数据结构\",{\"1\":{\"260\":1}}],[\"propertykey\",{\"1\":{\"307\":1}}],[\"target\",{\"1\":{\"307\":1}}],[\"\",{\"1\":{\"260\":2,\"263\":15,\"294\":5,\"295\":5,\"302\":3,\"303\":4,\"304\":2,\"305\":3,\"306\":2,\"308\":1,\"309\":1,\"310\":2,\"311\":1,\"312\":1,\"313\":3,\"314\":3}}],[\"缺点\",{\"1\":{\"260\":1}}],[\"永远在前面\",{\"1\":{\"644\":1}}],[\"永远先执行\",{\"1\":{\"257\":1}}],[\"永久放弃类实例前要执行的操作\",{\"1\":{\"77\":1}}],[\"差异\",{\"1\":{\"256\":1,\"397\":1}}],[\"打包后的文件\",{\"1\":{\"759\":1}}],[\"打包后文件分析\",{\"0\":{\"752\":1}}],[\"打包时间分析\",{\"0\":{\"751\":1}}],[\"打包分析\",{\"0\":{\"750\":1}}],[\"打补丁从而得到新的\",{\"1\":{\"587\":1}}],[\"打开一个文件\",{\"1\":{\"455\":1}}],[\"打印错误和异常信息\",{\"1\":{\"457\":1}}],[\"打印一些你感兴趣的或者重要的信息\",{\"1\":{\"457\":1}}],[\"打印\",{\"1\":{\"256\":2,\"258\":2,\"264\":1}}],[\"打造一个让你能够迅速获悉商品价格的工具\",{\"1\":{\"26\":1}}],[\"超时\",{\"1\":{\"256\":1}}],[\"超过最大数量后就会出现栈溢出的错误\",{\"1\":{\"118\":1}}],[\"队列的所有任务\",{\"1\":{\"258\":1}}],[\"队列的任务\",{\"1\":{\"258\":1}}],[\"队列执行完\",{\"1\":{\"258\":1}}],[\"队列\",{\"1\":{\"256\":2,\"257\":1,\"258\":2,\"558\":1}}],[\"队列中\",{\"1\":{\"256\":1}}],[\"队列为空\",{\"1\":{\"256\":1}}],[\"队列为空时\",{\"1\":{\"256\":1}}],[\"队列不为空\",{\"1\":{\"256\":1}}],[\"回车\",{\"1\":{\"517\":2}}],[\"回到\",{\"1\":{\"256\":1}}],[\"回调传递组件定义\",{\"1\":{\"653\":1}}],[\"回调会在父类的updateroute方法被调用时触发\",{\"1\":{\"642\":1}}],[\"回调被推入微任务队列\",{\"1\":{\"568\":1}}],[\"回调函数执行完以后又会将\",{\"1\":{\"563\":1}}],[\"回调函数\",{\"1\":{\"559\":1}}],[\"回调必须按照他们原始调用\",{\"1\":{\"281\":2}}],[\"回调是在\",{\"1\":{\"257\":1}}],[\"回调中\",{\"1\":{\"257\":1}}],[\"回调先执行了\",{\"1\":{\"257\":1}}],[\"回调放入\",{\"1\":{\"256\":1,\"258\":1}}],[\"回调需要执行\",{\"1\":{\"256\":2}}],[\"回调\",{\"1\":{\"256\":3,\"257\":2}}],[\"系统使用\",{\"1\":{\"517\":1}}],[\"系统\",{\"1\":{\"517\":1}}],[\"系统会分配一个新的文件描述符\",{\"1\":{\"455\":1}}],[\"系统会做两件事情\",{\"1\":{\"256\":1}}],[\"系数为\",{\"1\":{\"195\":1}}],[\"适用于\",{\"1\":{\"517\":1}}],[\"适用的方块为\",{\"1\":{\"43\":1}}],[\"适当的条件下\",{\"1\":{\"256\":1}}],[\"阶段去执行回调了\",{\"1\":{\"257\":1}}],[\"阶段就会直接执行\",{\"1\":{\"257\":1}}],[\"阶段执行结束\",{\"1\":{\"258\":1}}],[\"阶段执行\",{\"1\":{\"257\":2}}],[\"阶段执行回调\",{\"1\":{\"256\":3}}],[\"阶段为空闲时\",{\"1\":{\"257\":1}}],[\"阶段完成时执行\",{\"1\":{\"257\":1}}],[\"阶段有几个\",{\"1\":{\"256\":1}}],[\"阶段之后\",{\"1\":{\"256\":1}}],[\"阶段的执行顺序在\",{\"1\":{\"256\":1}}],[\"阶段会停止并且进入到\",{\"1\":{\"256\":1}}],[\"阶段会执行\",{\"1\":{\"256\":1}}],[\"阶段控制的\",{\"1\":{\"256\":1}}],[\"阶段\",{\"1\":{\"256\":8,\"257\":1,\"258\":1,\"544\":1,\"726\":2}}],[\"外部输入数据\",{\"1\":{\"256\":1}}],[\"六个阶段\",{\"0\":{\"256\":1}}],[\"采用的是标准的\",{\"1\":{\"799\":1}}],[\"采用了一种用圆滑波形\",{\"1\":{\"420\":1}}],[\"采用它的状态\",{\"1\":{\"282\":1}}],[\"采用\",{\"1\":{\"255\":1,\"282\":1}}],[\"采样器\",{\"1\":{\"199\":6}}],[\"采样器对象\",{\"1\":{\"199\":11}}],[\"采样器类型的纹理\",{\"1\":{\"199\":3}}],[\"采样级别\",{\"1\":{\"199\":3}}],[\"都将被这个规则匹配\",{\"1\":{\"624\":1}}],[\"都必须是静态节点才有的\",{\"1\":{\"613\":1}}],[\"都有\",{\"1\":{\"589\":1,\"748\":1}}],[\"都是注释节点\",{\"1\":{\"589\":1}}],[\"都是\",{\"1\":{\"589\":1,\"776\":1,\"803\":1}}],[\"都是可选的参数\",{\"1\":{\"281\":1}}],[\"都需要在前面加上\",{\"1\":{\"406\":1}}],[\"都需要委托ip\",{\"1\":{\"374\":1}}],[\"都被观察\",{\"1\":{\"563\":1}}],[\"都被调用\",{\"1\":{\"282\":1}}],[\"都被封装在一个\",{\"1\":{\"253\":1}}],[\"都会被重新渲染\",{\"1\":{\"642\":1}}],[\"都会应用到目标对象\",{\"1\":{\"287\":1}}],[\"都会返回一个\",{\"1\":{\"265\":1}}],[\"都会依次执行\",{\"1\":{\"256\":1}}],[\"都会从对应的回调队列中取出函数去执行\",{\"1\":{\"256\":1}}],[\"都包含了一个外部引用\",{\"1\":{\"124\":1}}],[\"表明会出现潜在错误的情形\",{\"1\":{\"457\":1}}],[\"表达式的运算结果\",{\"1\":{\"253\":1}}],[\"表示连接断开\",{\"1\":{\"803\":1}}],[\"表示这是一个\",{\"1\":{\"803\":2}}],[\"表示这是一个二进制帧\",{\"1\":{\"803\":1}}],[\"表示这是一个文本帧\",{\"1\":{\"803\":1}}],[\"表示这是消息\",{\"1\":{\"803\":1}}],[\"表示本次数据传输采用了数据分片\",{\"1\":{\"803\":1}}],[\"表示不是是消息\",{\"1\":{\"803\":1}}],[\"表示协议切换\",{\"1\":{\"800\":1}}],[\"表示要升级到\",{\"1\":{\"799\":1}}],[\"表示要升级协议\",{\"1\":{\"799\":1}}],[\"表示要限制的值\",{\"1\":{\"192\":1}}],[\"表示最后一个元素\",{\"1\":{\"663\":1}}],[\"表示所有变量已经处理完毕\",{\"1\":{\"611\":1}}],[\"表示所有样本都参与着色器的执行\",{\"1\":{\"240\":1}}],[\"表示是否要对数据载荷进行掩码操作\",{\"1\":{\"803\":1}}],[\"表示是否还可以再次调用\",{\"1\":{\"265\":1}}],[\"表示是纯文本\",{\"1\":{\"604\":1}}],[\"表示是表达式\",{\"1\":{\"604\":1}}],[\"表示是普通元素\",{\"1\":{\"604\":1}}],[\"表示子节点规范的类型\",{\"1\":{\"584\":1}}],[\"表示标签\",{\"1\":{\"584\":1}}],[\"表示下一个\",{\"1\":{\"567\":1}}],[\"表示下限\",{\"1\":{\"195\":1}}],[\"表示现在浏览器的任务队列中没有\",{\"1\":{\"567\":1}}],[\"表示对象中嵌套对象的观察者对象\",{\"1\":{\"563\":1}}],[\"表示它已经被转化成响应式了\",{\"1\":{\"561\":1}}],[\"表示它是一个生成器\",{\"1\":{\"268\":1}}],[\"表示可以像\",{\"1\":{\"558\":1}}],[\"表示刷新队列结束\",{\"1\":{\"558\":1}}],[\"表示域名对应何种类型的记录\",{\"1\":{\"345\":1}}],[\"表示向子网上所有设备发送包\",{\"1\":{\"339\":1}}],[\"表示向量在不同维度上的双精度浮点数分量\",{\"1\":{\"231\":1}}],[\"表示向量在不同维度上的无符号整数分量\",{\"1\":{\"231\":1}}],[\"表示向量在不同维度上的整数分量\",{\"1\":{\"231\":1}}],[\"表示向量在不同维度上的布尔值\",{\"1\":{\"231\":1}}],[\"表示向量在\",{\"1\":{\"231\":5}}],[\"表示的程序等\",{\"1\":{\"335\":1}}],[\"表示的数据\",{\"1\":{\"335\":1}}],[\"表示target\",{\"1\":{\"311\":1,\"312\":1}}],[\"表示原型赋值是否成功\",{\"1\":{\"310\":1}}],[\"表示原本的灰色线条的颜色混合值\",{\"1\":{\"190\":1}}],[\"表示属性是否成功定义\",{\"1\":{\"305\":1}}],[\"表示属性是否存在\",{\"1\":{\"304\":1}}],[\"表示失败\",{\"1\":{\"303\":1}}],[\"表示成功\",{\"1\":{\"303\":1}}],[\"表示意图执行的操作是否成功\",{\"1\":{\"294\":1}}],[\"表示\",{\"1\":{\"278\":1,\"521\":1,\"584\":2,\"799\":1}}],[\"表示精度限定符的关键字\",{\"1\":{\"241\":1}}],[\"表示背面朝向屏幕\",{\"1\":{\"240\":1}}],[\"表示深度值\",{\"1\":{\"240\":1}}],[\"表示像素在屏幕上的坐标值\",{\"1\":{\"240\":1}}],[\"表示模型视图变换的逆转置矩阵\",{\"1\":{\"239\":1}}],[\"表示模型视图变换矩阵的转置矩阵\",{\"1\":{\"239\":1}}],[\"表示模型视图投影变换矩阵的转置矩阵\",{\"1\":{\"239\":1}}],[\"表示投影变换的逆转置矩阵\",{\"1\":{\"239\":1}}],[\"表示投影变换矩阵的转置矩阵\",{\"1\":{\"239\":1}}],[\"表示投影矩阵\",{\"1\":{\"196\":1}}],[\"表示无类型\",{\"1\":{\"238\":1}}],[\"表示无符号整型向量\",{\"1\":{\"231\":1}}],[\"表示变换后的顶点法向量\",{\"1\":{\"236\":1}}],[\"表示变换后的顶点位置\",{\"1\":{\"236\":1}}],[\"表示顶点属性在顶点到像素的过程中插值的结果\",{\"1\":{\"236\":1}}],[\"表示顶点法向量\",{\"1\":{\"236\":1}}],[\"表示顶点位置\",{\"1\":{\"236\":1}}],[\"表示每个顶点的属性\",{\"1\":{\"236\":1}}],[\"表示每行代码执行次数之和\",{\"1\":{\"33\":1}}],[\"表示物体的颜色\",{\"1\":{\"236\":1}}],[\"表示立方体纹理采样器\",{\"1\":{\"235\":1}}],[\"表示三维纹理采样器\",{\"1\":{\"235\":1}}],[\"表示三维向量\",{\"1\":{\"231\":1}}],[\"表示二维纹理阴影采样器\",{\"1\":{\"235\":1}}],[\"表示二维纹理采样器\",{\"1\":{\"235\":1}}],[\"表示二维向量\",{\"1\":{\"231\":1}}],[\"表示一维纹理阴影采样器\",{\"1\":{\"235\":1}}],[\"表示一维纹理采样器\",{\"1\":{\"235\":1}}],[\"表示一个延续帧\",{\"1\":{\"803\":1}}],[\"表示一个纹理采样器\",{\"1\":{\"199\":3}}],[\"表示一个立方体数组纹理采样器\",{\"1\":{\"199\":1}}],[\"表示一个立方体纹理采样器\",{\"1\":{\"199\":1}}],[\"表示一个点的矢量\",{\"1\":{\"197\":2}}],[\"表示一个绿色条条的混合值\",{\"1\":{\"190\":1}}],[\"表示一个从\",{\"1\":{\"190\":1}}],[\"表示一个真正的数\",{\"1\":{\"164\":1}}],[\"表示双精度浮点型向量\",{\"1\":{\"231\":1}}],[\"表示整个子网\",{\"1\":{\"339\":1}}],[\"表示整型向量\",{\"1\":{\"231\":1}}],[\"表示整数级别的坐标\",{\"1\":{\"199\":1}}],[\"表示布尔类型的向量\",{\"1\":{\"231\":1}}],[\"表示四维向量\",{\"1\":{\"231\":1}}],[\"表示长度为\",{\"1\":{\"231\":3}}],[\"表示颜色是否为白色\",{\"1\":{\"230\":1}}],[\"表示颜色是否为黑色\",{\"1\":{\"230\":1}}],[\"表示颜色的红\",{\"1\":{\"153\":1}}],[\"表示画布的高度\",{\"1\":{\"230\":1}}],[\"表示画布的宽度\",{\"1\":{\"230\":1}}],[\"表示序列\",{\"1\":{\"221\":1}}],[\"表示加\",{\"1\":{\"221\":1}}],[\"表示正在刷新队列\",{\"1\":{\"558\":1}}],[\"表示正面朝向屏幕\",{\"1\":{\"240\":1}}],[\"表示正\",{\"1\":{\"221\":1}}],[\"表示正比例关系\",{\"1\":{\"33\":1}}],[\"表示纹理变换矩阵的转置矩阵\",{\"1\":{\"239\":1}}],[\"表示纹理的样本数\",{\"1\":{\"199\":1}}],[\"表示纹理坐标\",{\"1\":{\"199\":1}}],[\"表示该属性不存在\",{\"1\":{\"306\":1}}],[\"表示该\",{\"1\":{\"199\":1}}],[\"表示该航班都从城市\",{\"1\":{\"18\":1}}],[\"表示相对于窗口坐标的y方向偏导数\",{\"1\":{\"199\":1}}],[\"表示相对于窗口坐标的x方向偏导数\",{\"1\":{\"199\":1}}],[\"表示相对于coord的偏移量\",{\"1\":{\"199\":1}}],[\"表示用于取样的mipmap级别\",{\"1\":{\"199\":2}}],[\"表示阴影值\",{\"1\":{\"199\":2}}],[\"表示角度\",{\"1\":{\"198\":3}}],[\"表示直角三角形的临边\",{\"1\":{\"198\":1}}],[\"表示直角三角形的对边\",{\"1\":{\"198\":1}}],[\"表示需要求反双曲正切值的值\",{\"1\":{\"198\":1}}],[\"表示需要求反余弦值的值\",{\"1\":{\"198\":1}}],[\"表示需要求反正弦值的值\",{\"1\":{\"198\":1}}],[\"表示需要求正切值的角度\",{\"1\":{\"198\":1}}],[\"表示需要求正弦值的角度\",{\"1\":{\"198\":1}}],[\"表示需要求余弦值的角度\",{\"1\":{\"198\":1}}],[\"表示需要求平方根倒数的值\",{\"1\":{\"198\":1}}],[\"表示需要求平方根的值\",{\"1\":{\"198\":1}}],[\"表示需要求对数的值\",{\"1\":{\"198\":2}}],[\"表示需要检查的值\",{\"1\":{\"195\":2}}],[\"表示指数\",{\"1\":{\"198\":2}}],[\"表示幂的指数\",{\"1\":{\"198\":1}}],[\"表示幂的底数\",{\"1\":{\"198\":1}}],[\"表示介质\",{\"1\":{\"197\":1}}],[\"表示入射矢量的矢量\",{\"1\":{\"197\":2}}],[\"表示参考表面法向量的矢量\",{\"1\":{\"197\":1}}],[\"表示出射矢量的矢量\",{\"1\":{\"197\":1}}],[\"表示表面法向量的矢量\",{\"1\":{\"197\":3}}],[\"表示在最后一个变量后面还有文本\",{\"1\":{\"611\":1}}],[\"表示在\",{\"1\":{\"196\":1}}],[\"表示旋转轴的方向\",{\"1\":{\"196\":1}}],[\"表示沿着\",{\"1\":{\"196\":1}}],[\"表示矩阵\",{\"1\":{\"196\":1}}],[\"表示矩阵的线性变换对面积或体积的伸缩因子\",{\"1\":{\"196\":1}}],[\"表示插值位置\",{\"1\":{\"195\":1}}],[\"表示右插值边缘\",{\"1\":{\"195\":1}}],[\"表示左插值边缘\",{\"1\":{\"195\":1}}],[\"表示阈值\",{\"1\":{\"195\":1}}],[\"表示进行线性插值的系数\",{\"1\":{\"195\":1}}],[\"表示上限\",{\"1\":{\"195\":1}}],[\"表示值允许的最大值\",{\"1\":{\"192\":1}}],[\"表示值允许的最小值\",{\"1\":{\"192\":1}}],[\"表示绿色条条的\",{\"1\":{\"190\":1}}],[\"表示从中检索纹理值的整数纹理坐标\",{\"1\":{\"199\":2}}],[\"表示从给定坐标处移动的像素偏移量\",{\"1\":{\"199\":1}}],[\"表示从\",{\"1\":{\"190\":1}}],[\"表示计算出当前像素的颜色混合值\",{\"1\":{\"190\":1}}],[\"表示当前主机为router\",{\"1\":{\"656\":1}}],[\"表示当前\",{\"1\":{\"584\":1}}],[\"表示当前片元写入的颜色值\",{\"1\":{\"240\":1}}],[\"表示当前片元在深度缓冲中的深度值\",{\"1\":{\"240\":1}}],[\"表示当前片元在点精灵中的坐标\",{\"1\":{\"240\":1}}],[\"表示当前片元的颜色\",{\"1\":{\"240\":1}}],[\"表示当前三角形的正面朝向\",{\"1\":{\"240\":1}}],[\"表示当前像素的屏幕坐标\",{\"1\":{\"240\":1}}],[\"表示当前像素在曲线上的位置是绿色区域时\",{\"1\":{\"190\":1}}],[\"表示当前像素在曲线上的位置占总曲线长度的比例\",{\"1\":{\"190\":1}}],[\"表示当前像素离曲线起点越来越近\",{\"1\":{\"190\":1}}],[\"表示当前像素离曲线终点越来越近\",{\"1\":{\"190\":1}}],[\"表示当前颜色\",{\"1\":{\"152\":1}}],[\"表示其透明度\",{\"1\":{\"153\":1,\"154\":1}}],[\"表示缩小到原来的一半\",{\"1\":{\"146\":2}}],[\"表示如果文件修改了\",{\"1\":{\"89\":2}}],[\"表示文件是否可选\",{\"1\":{\"89\":2}}],[\"表示程序的退出代码\",{\"1\":{\"68\":1}}],[\"表示法省略诸如\",{\"1\":{\"49\":1}}],[\"表示法是一种特殊的表示法\",{\"1\":{\"32\":1}}],[\"表示为蓝色部分\",{\"1\":{\"13\":1}}],[\"阻塞\",{\"1\":{\"253\":5}}],[\"又或者是\",{\"1\":{\"688\":1}}],[\"又称为模块测试\",{\"1\":{\"482\":1}}],[\"又称调用栈\",{\"1\":{\"117\":1}}],[\"又产生了\",{\"1\":{\"251\":1}}],[\"继续取出位于队首的任务\",{\"1\":{\"251\":1}}],[\"继承\",{\"0\":{\"84\":1}}],[\"长轮询是对轮询的改进版\",{\"1\":{\"794\":1}}],[\"长轮询\",{\"0\":{\"794\":1},\"1\":{\"788\":1,\"792\":1}}],[\"长度减\",{\"1\":{\"251\":1}}],[\"长方形\",{\"0\":{\"224\":1}}],[\"微任务会先于渲染执行\",{\"1\":{\"254\":1}}],[\"微任务队列会一次性清空\",{\"1\":{\"254\":1}}],[\"微任务队列\",{\"0\":{\"254\":1}}],[\"微任务是由\",{\"1\":{\"250\":1}}],[\"微任务是当前宏任务执行后立即执行的宏任务\",{\"1\":{\"250\":1}}],[\"微任务\",{\"0\":{\"250\":1},\"1\":{\"250\":1,\"567\":1}}],[\"宏任务结束之后会先执行微任务\",{\"1\":{\"254\":1}}],[\"宏任务结束后会进行渲染然后执行下一个宏任务\",{\"1\":{\"250\":1}}],[\"宏任务是由宿主方控制的\",{\"1\":{\"249\":1}}],[\"宏任务颗粒度较大\",{\"1\":{\"249\":1}}],[\"宏任务执行过程中不会执行其它内容\",{\"1\":{\"249\":1}}],[\"宏任务会添加到消息到消息队列的尾部\",{\"1\":{\"249\":1}}],[\"宏任务\",{\"0\":{\"249\":1},\"1\":{\"249\":1,\"567\":1}}],[\"定时切割\",{\"1\":{\"460\":1}}],[\"定时任务并不是由\",{\"1\":{\"247\":1}}],[\"定时器触发线程\",{\"1\":{\"247\":1}}],[\"定义局部\",{\"1\":{\"660\":1}}],[\"定义为函数式组件\",{\"1\":{\"656\":1}}],[\"定义组件的缓存key\",{\"1\":{\"573\":1}}],[\"定义computed的get\",{\"1\":{\"521\":1}}],[\"定义的对象\",{\"1\":{\"305\":1}}],[\"定义捕获器\",{\"0\":{\"288\":1}}],[\"定义了一个\",{\"1\":{\"278\":1}}],[\"定义和提供\",{\"1\":{\"238\":1}}],[\"定义不同维度的矩阵类型\",{\"1\":{\"233\":1}}],[\"定义不同的布局\",{\"1\":{\"181\":1}}],[\"定义格式\",{\"1\":{\"231\":7,\"233\":4}}],[\"定义常量pi\",{\"1\":{\"190\":1}}],[\"定义位置和空间\",{\"1\":{\"177\":1}}],[\"定义成块级的非块级元素\",{\"1\":{\"174\":1}}],[\"定义一个对象\",{\"1\":{\"521\":1}}],[\"定义一个加法函数\",{\"1\":{\"238\":1}}],[\"定义一个可以重复使用的函数\",{\"1\":{\"238\":1}}],[\"定义一个不返回值的函数\",{\"1\":{\"238\":1}}],[\"定义一个点的结构体类型\",{\"1\":{\"234\":1}}],[\"定义一个结构体类型\",{\"1\":{\"234\":1}}],[\"定义一个\",{\"1\":{\"233\":7}}],[\"定义一个常量数组\",{\"1\":{\"232\":1}}],[\"定义一个函数\",{\"1\":{\"232\":1}}],[\"定义一个长度为\",{\"1\":{\"232\":1}}],[\"定义一个双精度浮点型向量\",{\"1\":{\"231\":1}}],[\"定义一个无符号整型向量\",{\"1\":{\"231\":1}}],[\"定义一个整型向量\",{\"1\":{\"231\":1}}],[\"定义一个布尔向量\",{\"1\":{\"231\":1}}],[\"定义一个四维坐标点\",{\"1\":{\"231\":1}}],[\"定义一个颜色\",{\"1\":{\"231\":1}}],[\"定义一个二维坐标点\",{\"1\":{\"231\":1}}],[\"定义一个用于绘制曲线的函数\",{\"1\":{\"190\":1}}],[\"定义一个绘制y轴上线条的函数\",{\"1\":{\"190\":1}}],[\"定义一个派生类\",{\"1\":{\"84\":1}}],[\"定义一个基类\",{\"1\":{\"84\":1}}],[\"定义一个名为\",{\"1\":{\"77\":1}}],[\"定义索引器\",{\"1\":{\"80\":1}}],[\"定义两个指针\",{\"1\":{\"13\":1}}],[\"鼠标点击\",{\"1\":{\"247\":1,\"249\":1}}],[\"鼠标位置\",{\"1\":{\"190\":1}}],[\"上定义一个\",{\"1\":{\"736\":1}}],[\"上定义网格行\",{\"1\":{\"177\":1}}],[\"上定义网格定义行\",{\"1\":{\"177\":1}}],[\"上响应式数据收集\",{\"1\":{\"671\":1}}],[\"上述代码将会编译成\",{\"1\":{\"622\":1}}],[\"上述代码中\",{\"1\":{\"241\":1}}],[\"上\",{\"1\":{\"551\":1,\"636\":1}}],[\"上有几种不同作用的方法\",{\"1\":{\"543\":1}}],[\"上面的闭包\",{\"1\":{\"670\":1}}],[\"上面这行代码等同于下面这两行代码\",{\"1\":{\"611\":1}}],[\"上面不是有\",{\"1\":{\"542\":1}}],[\"上面六个阶段都不包括\",{\"1\":{\"256\":1}}],[\"上下文\",{\"1\":{\"458\":1}}],[\"上的参数\",{\"1\":{\"713\":1}}],[\"上的值\",{\"1\":{\"671\":1}}],[\"上的对象\",{\"1\":{\"670\":1}}],[\"上的属性代理到\",{\"1\":{\"550\":1}}],[\"上的方法适用于通用程序\",{\"1\":{\"293\":1}}],[\"上的\",{\"1\":{\"281\":1,\"546\":1,\"634\":1,\"725\":1,\"726\":2}}],[\"资源文件的内容\",{\"1\":{\"723\":1}}],[\"资源等内容几乎都是放在这个目录之下\",{\"1\":{\"517\":1}}],[\"资源和图像质量\",{\"1\":{\"241\":1}}],[\"资源\",{\"1\":{\"241\":3}}],[\"资源加载\",{\"0\":{\"108\":1,\"501\":1}}],[\"提取chunk的最小体积\",{\"1\":{\"720\":1}}],[\"提取出\",{\"1\":{\"651\":1}}],[\"提交mutation等异步操作使用\",{\"1\":{\"663\":1}}],[\"提高代码的质量\",{\"1\":{\"483\":1}}],[\"提高代码效率\",{\"1\":{\"241\":1}}],[\"提前终止生成器\",{\"0\":{\"274\":1}}],[\"提供基本的防护\",{\"1\":{\"799\":1}}],[\"提供的回调\",{\"1\":{\"736\":1}}],[\"提供覆盖率的最受欢迎的浏览器\",{\"1\":{\"713\":1}}],[\"提供给\",{\"1\":{\"133\":1}}],[\"提供公共类型系统\",{\"1\":{\"70\":1}}],[\"必须安装\",{\"1\":{\"701\":1}}],[\"必须使用常规函数\",{\"1\":{\"664\":1}}],[\"必须拥有子节点\",{\"1\":{\"614\":1}}],[\"必须相同\",{\"1\":{\"589\":2}}],[\"必须要提供通信对象ip\",{\"1\":{\"339\":1}}],[\"必须每个文件单独发送1\",{\"1\":{\"337\":1}}],[\"必须每创建一个迭代器就对应一个新计数器\",{\"1\":{\"266\":1}}],[\"必须可以用作构造函数\",{\"1\":{\"314\":1}}],[\"必须返回对象\",{\"1\":{\"306\":1}}],[\"必须返回布尔值\",{\"1\":{\"304\":1,\"305\":1,\"310\":1,\"311\":1,\"312\":1}}],[\"必须返回一个对象\",{\"1\":{\"314\":1}}],[\"必须返回一个\",{\"1\":{\"281\":1}}],[\"必须保持等待状态\",{\"1\":{\"282\":1}}],[\"必须用与\",{\"1\":{\"281\":2}}],[\"必须用\",{\"1\":{\"281\":1}}],[\"必须用在\",{\"1\":{\"253\":1}}],[\"必须按照注册顺序调用\",{\"1\":{\"281\":1}}],[\"必须有一个不能改变的值\",{\"1\":{\"280\":2}}],[\"必须是一个函数对象\",{\"1\":{\"313\":1}}],[\"必须是这三个状态中的一种\",{\"1\":{\"280\":1}}],[\"必须是\",{\"1\":{\"241\":1}}],[\"必须选择第一堂课结束后才开始的课\",{\"1\":{\"22\":1}}],[\"范围和精度可低于\",{\"1\":{\"241\":1}}],[\"满足片段着色语言的最低要求\",{\"1\":{\"241\":1}}],[\"满足顶点着色语言的最低要求\",{\"1\":{\"241\":1}}],[\"限定符的具体类型\",{\"1\":{\"241\":1}}],[\"限定符\",{\"1\":{\"241\":1}}],[\"限定符标记顶点位置和颜色的位置\",{\"1\":{\"238\":1}}],[\"精度级别存储\",{\"1\":{\"241\":1}}],[\"精度限定符的三种类型\",{\"1\":{\"241\":1}}],[\"精度限定符的作用\",{\"1\":{\"241\":1}}],[\"精度限定符的使用格式\",{\"1\":{\"241\":1}}],[\"精度限定符\",{\"0\":{\"241\":1}}],[\"精度修饰符\",{\"1\":{\"190\":1}}],[\"序号从\",{\"1\":{\"240\":1}}],[\"红色\",{\"1\":{\"240\":1}}],[\"背面为绿色\",{\"1\":{\"240\":1}}],[\"背包可装\",{\"1\":{\"17\":1}}],[\"固定为\",{\"1\":{\"240\":1}}],[\"固定宽高比\",{\"0\":{\"168\":1}}],[\"四种\",{\"1\":{\"748\":1}}],[\"四维向量\",{\"1\":{\"239\":1}}],[\"四维向量数组\",{\"1\":{\"239\":1}}],[\"四舍五入矢量到最接近的偶数\",{\"1\":{\"195\":1}}],[\"四舍五入矢量到最接近的整数\",{\"1\":{\"195\":1}}],[\"四舍五入标量到最接近的偶数\",{\"1\":{\"195\":1}}],[\"四舍五入标量到最接近的整数\",{\"1\":{\"195\":1}}],[\"四舍五入到最接近的偶数\",{\"1\":{\"195\":1}}],[\"四舍五入到最接近的整数\",{\"1\":{\"195\":1}}],[\"场景深度的远平面\",{\"1\":{\"239\":1}}],[\"场景深度的近平面\",{\"1\":{\"239\":1}}],[\"投影矩阵的逆矩阵\",{\"1\":{\"239\":1}}],[\"模以\",{\"1\":{\"804\":1}}],[\"模板中的指令\",{\"1\":{\"603\":1}}],[\"模板解析阶段\",{\"1\":{\"603\":2}}],[\"模\",{\"1\":{\"388\":1}}],[\"模块都封装在eval中\",{\"1\":{\"761\":1}}],[\"模块源码的转换\",{\"1\":{\"726\":1}}],[\"模块中的\",{\"1\":{\"517\":1}}],[\"模块将信号转换为数字信息\",{\"1\":{\"400\":1}}],[\"模块将数据封装成包发送给通信对象\",{\"1\":{\"374\":1}}],[\"模块和\",{\"1\":{\"400\":1}}],[\"模块后\",{\"1\":{\"390\":3}}],[\"模块就是一个从正负两个信号端子输出信号的电路\",{\"1\":{\"388\":1}}],[\"模块转换成可在网线中传输的格式\",{\"1\":{\"382\":1}}],[\"模块生成通用信号\",{\"1\":{\"382\":1}}],[\"模块会将包从缓冲区中取出\",{\"1\":{\"381\":1}}],[\"模块会将包的内容当作一整块数据\",{\"1\":{\"375\":1}}],[\"模块发送发送包的命令\",{\"1\":{\"381\":1}}],[\"模块发送包的操作\",{\"1\":{\"375\":1}}],[\"模块获取包之后\",{\"1\":{\"381\":1}}],[\"模块负责添加如下两个头部\",{\"1\":{\"375\":1}}],[\"模块\",{\"1\":{\"375\":1}}],[\"模块在数据块的前面加上tcp头部\",{\"1\":{\"375\":1}}],[\"模块在执行连接\",{\"1\":{\"374\":1}}],[\"模块委托ip\",{\"1\":{\"375\":1}}],[\"模块处创建表示连接控制信息的头部\",{\"1\":{\"360\":1}}],[\"模型视图投影矩阵的逆矩阵\",{\"1\":{\"239\":1}}],[\"模型视图矩阵的逆矩阵\",{\"1\":{\"239\":1}}],[\"模式\",{\"1\":{\"153\":1}}],[\"法向量变换矩阵\",{\"1\":{\"239\":1}}],[\"物体从模型坐标系转换到相机坐标系的矩阵\",{\"1\":{\"239\":1}}],[\"需直接copy过去\",{\"1\":{\"720\":1}}],[\"需启用雾效果\",{\"1\":{\"239\":1}}],[\"需要对数据进行掩码操作\",{\"1\":{\"803\":1}}],[\"需要借助\",{\"1\":{\"744\":1}}],[\"需要更新\",{\"1\":{\"651\":1}}],[\"需要一一去匹配尝试\",{\"1\":{\"606\":1}}],[\"需要注意的是\",{\"1\":{\"589\":1}}],[\"需要注意的是当\",{\"1\":{\"175\":1}}],[\"需要重新计算\",{\"1\":{\"521\":1}}],[\"需要按照指定的顺序来调用socket\",{\"1\":{\"349\":1}}],[\"需要删除的属性的名称\",{\"1\":{\"307\":1}}],[\"需要检查目标对象是否存在此属性\",{\"1\":{\"304\":1}}],[\"需要执行如下步骤\",{\"1\":{\"282\":1}}],[\"需要指定精度的数据类型\",{\"1\":{\"241\":1}}],[\"需要和\",{\"1\":{\"197\":1}}],[\"需要与\",{\"1\":{\"197\":1}}],[\"需要转换为浮点数的无符号整数\",{\"1\":{\"195\":1}}],[\"需要转换为浮点数的有符号整数\",{\"1\":{\"195\":1}}],[\"需要转换为无符号整数的单精度浮点数\",{\"1\":{\"195\":1}}],[\"需要转换为整数的单精度浮点数\",{\"1\":{\"195\":1}}],[\"雾的深度值\",{\"1\":{\"239\":1}}],[\"尽管每个线程和其他线程之间不能有数据交换\",{\"1\":{\"237\":1}}],[\"顶点输出变量设置的\",{\"1\":{\"240\":1}}],[\"顶点属性的名称\",{\"1\":{\"236\":1}}],[\"顶点属性的类型\",{\"1\":{\"236\":1}}],[\"顶点着色器变量\",{\"0\":{\"239\":1}}],[\"顶点着色器计算\",{\"1\":{\"236\":1}}],[\"顶点着色器中声明一个\",{\"1\":{\"236\":2}}],[\"顶点着色器中声明一个输出变量\",{\"1\":{\"236\":1}}],[\"顶点着色器中声明一个输入变量\",{\"1\":{\"236\":1}}],[\"顶点着色器传入的变量\",{\"1\":{\"190\":1}}],[\"片元着色器中使用\",{\"1\":{\"236\":1}}],[\"片段着色器\",{\"0\":{\"209\":1,\"240\":1}}],[\"包中查询\",{\"1\":{\"713\":1}}],[\"包裹的情况\",{\"1\":{\"591\":1}}],[\"包裹或者首次渲染\",{\"1\":{\"591\":1}}],[\"包裹\",{\"1\":{\"575\":1,\"590\":1,\"591\":1}}],[\"包会被自动添加到构建路径里面去\",{\"1\":{\"517\":1}}],[\"包放置在\",{\"1\":{\"517\":1}}],[\"包\",{\"1\":{\"517\":1}}],[\"包名必须和\",{\"1\":{\"517\":1}}],[\"包转发的工作原理也没有\",{\"1\":{\"427\":1}}],[\"包过滤就是在对包进行转发时\",{\"1\":{\"412\":1}}],[\"包就被发往互联网\",{\"1\":{\"409\":1}}],[\"包每经过一个路由器的转发\",{\"1\":{\"403\":1}}],[\"包的有效期\",{\"0\":{\"403\":1}}],[\"包的基本知识\",{\"0\":{\"374\":1}}],[\"包收发操作的起点是tcp\",{\"1\":{\"375\":1}}],[\"包收发操作概览\",{\"0\":{\"375\":1}}],[\"包并发送给服务器\",{\"1\":{\"372\":1}}],[\"包装的目标对象\",{\"1\":{\"287\":1}}],[\"包含变量的动态文本节点\",{\"1\":{\"613\":2}}],[\"包含了一些编译时自动生成的文件\",{\"1\":{\"517\":1}}],[\"包含了一个\",{\"1\":{\"234\":1}}],[\"包含ip\",{\"1\":{\"375\":1}}],[\"包含mac\",{\"1\":{\"375\":1}}],[\"包含可选的enumerable\",{\"1\":{\"305\":1}}],[\"包含可迭代对象的下一个值\",{\"1\":{\"265\":1}}],[\"包含两个属性\",{\"1\":{\"265\":1}}],[\"包括了扩展数据\",{\"1\":{\"803\":1}}],[\"包括了客户端的\",{\"1\":{\"787\":1}}],[\"包括了模型变换\",{\"1\":{\"239\":1}}],[\"包括了模型变换和相机变换\",{\"1\":{\"239\":1}}],[\"包括原生数组\",{\"1\":{\"287\":1}}],[\"包括\",{\"1\":{\"241\":1,\"278\":1,\"737\":1}}],[\"包括函数执行的代码\",{\"1\":{\"238\":1}}],[\"包括public\",{\"1\":{\"78\":1}}],[\"求值\",{\"1\":{\"523\":1}}],[\"求知\",{\"1\":{\"521\":1}}],[\"求平均值并返回\",{\"1\":{\"232\":1}}],[\"求矩阵\",{\"1\":{\"196\":1}}],[\"还在更新的浏览器\",{\"1\":{\"712\":1}}],[\"还有一些要留意\",{\"0\":{\"624\":1}}],[\"还是丢弃这个包\",{\"1\":{\"412\":1}}],[\"还需要对\",{\"1\":{\"393\":1}}],[\"还会受到噪声干扰而失真\",{\"1\":{\"386\":1}}],[\"还可以把集合绑定到一个事件分派程序\",{\"1\":{\"320\":1}}],[\"还可以使用数组作为函数的参数\",{\"1\":{\"232\":1}}],[\"还提供对元数据\",{\"1\":{\"70\":1}}],[\"两边可以在任意时间开始发送数据\",{\"1\":{\"796\":1}}],[\"两边不能有浮动元素\",{\"1\":{\"145\":1}}],[\"两者都是\",{\"1\":{\"622\":1}}],[\"两种比特分别对应特定的电压和电流\",{\"1\":{\"381\":1}}],[\"两个事件处理回调\",{\"1\":{\"777\":1}}],[\"两个\",{\"1\":{\"554\":1}}],[\"两个方法以及一大堆renderhelpers\",{\"1\":{\"543\":1}}],[\"两个部分\",{\"1\":{\"335\":1}}],[\"两个属性\",{\"1\":{\"280\":1}}],[\"两个值\",{\"1\":{\"230\":1}}],[\"约为\",{\"1\":{\"230\":4}}],[\"占据了数据帧剩余的位置\",{\"1\":{\"803\":1}}],[\"占据\",{\"1\":{\"803\":1}}],[\"占据一行\",{\"1\":{\"145\":1}}],[\"占用了多个字节的话\",{\"1\":{\"803\":1}}],[\"占用\",{\"1\":{\"230\":5}}],[\"极坐标下的图形\",{\"0\":{\"227\":1}}],[\"极客世界\",{\"1\":{\"126\":1}}],[\"极客邦\",{\"1\":{\"120\":1,\"123\":1,\"126\":1,\"127\":1}}],[\"极客时间\",{\"1\":{\"114\":1,\"120\":1,\"123\":1,\"126\":1,\"127\":1}}],[\"圆\",{\"0\":{\"225\":1}}],[\"放回一个observer对象\",{\"1\":{\"563\":1}}],[\"放置之后\",{\"1\":{\"517\":1}}],[\"放心重构\",{\"1\":{\"483\":1}}],[\"放入已排序的队列中\",{\"1\":{\"557\":1}}],[\"放入\",{\"1\":{\"251\":1,\"567\":1}}],[\"放入调用栈\",{\"1\":{\"251\":2}}],[\"放大边框\",{\"1\":{\"224\":1}}],[\"放在新数组的第\",{\"1\":{\"60\":1}}],[\"异常监控\",{\"1\":{\"466\":1}}],[\"异常\",{\"1\":{\"278\":1}}],[\"异常处理\",{\"1\":{\"70\":1,\"71\":1}}],[\"异步loader\",{\"0\":{\"728\":1}}],[\"异步组件\",{\"1\":{\"653\":1}}],[\"异步\",{\"0\":{\"740\":1},\"1\":{\"247\":1,\"729\":1,\"730\":1}}],[\"异或就是两个数的二进制形式\",{\"1\":{\"804\":1}}],[\"异或\",{\"1\":{\"221\":1}}],[\"逻辑与\",{\"1\":{\"221\":1}}],[\"逻辑非\",{\"1\":{\"221\":1}}],[\"减少内存的占用\",{\"1\":{\"663\":1}}],[\"减少绘制区域\",{\"0\":{\"510\":1}}],[\"减操作\",{\"1\":{\"221\":1}}],[\"减去\",{\"1\":{\"60\":1,\"803\":1}}],[\"乘\",{\"1\":{\"221\":1}}],[\"操作代码\",{\"1\":{\"803\":1}}],[\"操作对象\",{\"1\":{\"660\":1}}],[\"操作数据的原型链\",{\"1\":{\"561\":1}}],[\"操作\",{\"1\":{\"540\":1,\"589\":1,\"803\":2}}],[\"操作了\",{\"1\":{\"540\":1}}],[\"操作和不变式\",{\"1\":{\"301\":1}}],[\"操作访问到\",{\"1\":{\"300\":1}}],[\"操作符取而代之\",{\"1\":{\"622\":1}}],[\"操作符取得特定索引位置上的项\",{\"1\":{\"260\":1}}],[\"操作符中被调用\",{\"1\":{\"304\":1,\"307\":1,\"314\":1}}],[\"操作符或\",{\"1\":{\"295\":1}}],[\"操作符\",{\"0\":{\"221\":1},\"1\":{\"221\":1,\"263\":1,\"287\":1,\"295\":2,\"314\":1,\"622\":1}}],[\"操作系统会为该程序分配内存\",{\"1\":{\"94\":1}}],[\"雷达\",{\"0\":{\"218\":1}}],[\"着色语言\",{\"1\":{\"212\":1}}],[\"变化的文件\",{\"1\":{\"737\":1}}],[\"变化值\",{\"1\":{\"211\":1}}],[\"变\",{\"1\":{\"589\":1}}],[\"变量转换\",{\"1\":{\"702\":1}}],[\"变量设置片元颜色\",{\"1\":{\"238\":1}}],[\"变量设置顶点位置\",{\"1\":{\"238\":1}}],[\"变量名\",{\"1\":{\"238\":1}}],[\"变量类型\",{\"1\":{\"238\":1}}],[\"变量\",{\"1\":{\"236\":2,\"660\":1}}],[\"变量中\",{\"1\":{\"236\":1,\"240\":1}}],[\"变量的值\",{\"1\":{\"236\":1}}],[\"变量的名称\",{\"1\":{\"236\":2}}],[\"变量的类型\",{\"1\":{\"236\":2}}],[\"变量查找\",{\"0\":{\"126\":1}}],[\"变量环境中a的值已经被设置成了1\",{\"1\":{\"122\":1}}],[\"变量容易在不被察觉的情况下被覆盖掉\",{\"1\":{\"120\":1}}],[\"变量提升的问题\",{\"0\":{\"120\":1}}],[\"变量提升\",{\"0\":{\"114\":1,\"115\":1},\"1\":{\"115\":2}}],[\"变量和参数名应该使用骆驼命名法\",{\"1\":{\"66\":1}}],[\"统一值\",{\"1\":{\"210\":1}}],[\"统一为同样的数位长度\",{\"1\":{\"62\":1}}],[\"出栈的时候\",{\"1\":{\"609\":1}}],[\"出现相同配置项时\",{\"1\":{\"547\":1}}],[\"出错\",{\"1\":{\"209\":1}}],[\"出发城市\",{\"1\":{\"18\":1}}],[\"高并发会导致emfile错误\",{\"1\":{\"455\":1}}],[\"高电压发光亮\",{\"1\":{\"424\":1}}],[\"高频信号更容易损失能量\",{\"1\":{\"388\":1}}],[\"高\",{\"1\":{\"209\":1}}],[\"高度可能会不同\",{\"1\":{\"175\":1}}],[\"高度由\",{\"1\":{\"175\":1}}],[\"低电压发光暗\",{\"1\":{\"424\":1}}],[\"低\",{\"1\":{\"209\":1}}],[\"低则逐渐变灰\",{\"1\":{\"154\":1}}],[\"更好的二进制支持\",{\"1\":{\"796\":1}}],[\"更好的ts支持\",{\"0\":{\"680\":1}}],[\"更加推荐\",{\"1\":{\"706\":1}}],[\"更高效的组件初始化\",{\"0\":{\"677\":1}}],[\"更改的state\",{\"1\":{\"660\":1}}],[\"更具\",{\"1\":{\"654\":1}}],[\"更具location匹配对应的record\",{\"1\":{\"649\":1}}],[\"更深\",{\"1\":{\"622\":1}}],[\"更低的精度会有更快的渲染速度\",{\"1\":{\"209\":1}}],[\"更新机制\",{\"0\":{\"656\":1}}],[\"更新路由映射表\",{\"1\":{\"644\":1}}],[\"更新路径\",{\"1\":{\"1\":1}}],[\"更新完后再将\",{\"1\":{\"597\":2}}],[\"更新文本节点\",{\"1\":{\"596\":1}}],[\"更新旧的\",{\"1\":{\"587\":1}}],[\"更新旧值为新值\",{\"1\":{\"559\":2}}],[\"更新节点\",{\"1\":{\"587\":1,\"588\":1,\"596\":1}}],[\"更新过程\",{\"0\":{\"557\":1},\"1\":{\"557\":1}}],[\"更新之前\",{\"1\":{\"532\":1}}],[\"更新时调用\",{\"1\":{\"532\":1}}],[\"更新\",{\"0\":{\"524\":1},\"1\":{\"403\":1,\"524\":1,\"556\":1,\"558\":1}}],[\"更新dist\",{\"1\":{\"1\":1}}],[\"检查缓存数量是否超过\",{\"1\":{\"573\":1}}],[\"检查是否存在默认迭代器属性可以暴露这个工厂函数\",{\"1\":{\"263\":1}}],[\"检查是否有前往它们的更短路径\",{\"1\":{\"1\":1}}],[\"检查\",{\"1\":{\"209\":1}}],[\"里的对象进行合并\",{\"1\":{\"549\":1}}],[\"里的包名一致\",{\"1\":{\"517\":1}}],[\"里\",{\"1\":{\"209\":1}}],[\"里面包裹着文本或者其他子元素\",{\"1\":{\"187\":1}}],[\"预设有三个\",{\"1\":{\"696\":1}}],[\"预设就是一堆插件\",{\"1\":{\"696\":1}}],[\"预渲染\",{\"0\":{\"497\":1}}],[\"预加载\",{\"0\":{\"497\":1}}],[\"预付金诈骗\",{\"1\":{\"477\":1}}],[\"预警类如错误监控\",{\"1\":{\"466\":1}}],[\"预编译会在编译前一刻发生\",{\"1\":{\"209\":1}}],[\"预定义的关键值是由\",{\"1\":{\"159\":1}}],[\"预定义的关键值\",{\"0\":{\"159\":1}}],[\"预定义的关键字\",{\"1\":{\"157\":1}}],[\"像这种情况下\",{\"1\":{\"554\":1}}],[\"像前面这样省略文件名时\",{\"1\":{\"334\":1}}],[\"像\",{\"1\":{\"209\":1}}],[\"旋转\",{\"0\":{\"216\":1},\"1\":{\"234\":1}}],[\"旋转函数\",{\"1\":{\"200\":1,\"206\":1,\"243\":1}}],[\"旋转角度\",{\"1\":{\"196\":1}}],[\"语义分析则是将得到的词汇进行一个立体的组合\",{\"1\":{\"690\":1}}],[\"语法\",{\"1\":{\"710\":1}}],[\"语法单元\",{\"0\":{\"688\":1}}],[\"语法分析\",{\"0\":{\"690\":1},\"1\":{\"687\":1}}],[\"语法将会告诉\",{\"1\":{\"653\":1}}],[\"语法同\",{\"1\":{\"158\":1}}],[\"语句抛出的一个值\",{\"1\":{\"278\":1}}],[\"语言类似\",{\"1\":{\"234\":1}}],[\"语言规范并不保证变量会被自动转换类别\",{\"1\":{\"209\":1}}],[\"语言有内建的变量\",{\"1\":{\"209\":1}}],[\"语言很像\",{\"1\":{\"209\":1}}],[\"语言\",{\"1\":{\"209\":1}}],[\"语言差不多\",{\"1\":{\"200\":1}}],[\"某个\",{\"1\":{\"199\":1}}],[\"没有值表示是普通\",{\"1\":{\"726\":1}}],[\"没有此mutation方法\",{\"1\":{\"665\":2}}],[\"没有tag\",{\"1\":{\"580\":1}}],[\"没有办法直接发送给对方\",{\"1\":{\"380\":1}}],[\"没有\",{\"1\":{\"281\":1}}],[\"没有降采样\",{\"1\":{\"199\":1}}],[\"没有边框的话\",{\"1\":{\"152\":1}}],[\"默认module\",{\"1\":{\"749\":1}}],[\"默认为normal\",{\"1\":{\"746\":1}}],[\"默认为0表示使用基本级别\",{\"1\":{\"199\":1}}],[\"默认创建的loader就是同步的loader\",{\"1\":{\"727\":1}}],[\"默认是async\",{\"1\":{\"720\":1}}],[\"默认情况是添加的所有特性都是全局的\",{\"1\":{\"700\":1}}],[\"默认情况下onclick会被视为动态绑定\",{\"1\":{\"678\":1}}],[\"默认情况下\",{\"1\":{\"240\":1}}],[\"默认\",{\"1\":{\"651\":1}}],[\"默认的\",{\"1\":{\"585\":1}}],[\"默认的options配置\",{\"1\":{\"543\":1}}],[\"默认只有\",{\"1\":{\"543\":1}}],[\"默认组件有三个\",{\"1\":{\"543\":1}}],[\"默认路由\",{\"1\":{\"402\":1}}],[\"默认迭代器\",{\"1\":{\"263\":1}}],[\"默认构造函数\",{\"1\":{\"83\":1}}],[\"偏差值\",{\"1\":{\"199\":4}}],[\"偏移量和坐标处的纹素值\",{\"1\":{\"199\":1}}],[\"偏移\",{\"1\":{\"199\":2}}],[\"前置\",{\"1\":{\"726\":2}}],[\"前运行\",{\"1\":{\"693\":1}}],[\"前调用\",{\"1\":{\"648\":1}}],[\"前面的文本放入tokens中\",{\"1\":{\"611\":1}}],[\"前面提到了\",{\"1\":{\"543\":1}}],[\"前言\",{\"0\":{\"600\":1}}],[\"前台\",{\"1\":{\"324\":2}}],[\"前台和后台\",{\"0\":{\"324\":1}}],[\"前进\",{\"1\":{\"246\":1}}],[\"前三个分量表示立方体贴图的坐标\",{\"1\":{\"199\":1}}],[\"前缀或后缀的自增自减操作符\",{\"1\":{\"221\":1}}],[\"前缀\",{\"1\":{\"163\":1,\"747\":3}}],[\"级别的宽度和高度\",{\"1\":{\"199\":2}}],[\"级别的纹理中取回单个纹理元素的值\",{\"1\":{\"199\":1}}],[\"级别的纹理大小\",{\"1\":{\"199\":2}}],[\"级别\",{\"1\":{\"199\":11}}],[\"级别为\",{\"1\":{\"199\":2}}],[\"处于拒绝状态的时候\",{\"1\":{\"280\":1}}],[\"处于解决状态的时候\",{\"1\":{\"280\":1}}],[\"处于等待状态的时候\",{\"1\":{\"280\":1}}],[\"处的纹素值\",{\"1\":{\"199\":1}}],[\"处理结果\",{\"1\":{\"637\":1}}],[\"处理后\",{\"1\":{\"606\":1}}],[\"处理前\",{\"1\":{\"606\":1}}],[\"处理各种不同写法的\",{\"1\":{\"603\":1}}],[\"处理数组元素为对象的情况\",{\"1\":{\"561\":1}}],[\"处理程序中返回\",{\"1\":{\"303\":1}}],[\"处理程序的返回值也必须是\",{\"1\":{\"302\":1}}],[\"处理一些上一轮循环中的少数未执行的\",{\"1\":{\"256\":1}}],[\"处理方面使用了自己设计的\",{\"1\":{\"255\":1}}],[\"处理网络请求\",{\"1\":{\"246\":1}}],[\"处理无穷大值\",{\"1\":{\"195\":1}}],[\"处理\",{\"0\":{\"545\":1,\"625\":1,\"628\":1},\"1\":{\"195\":1,\"551\":1,\"563\":1,\"637\":1,\"656\":1,\"659\":1,\"722\":1,\"736\":1}}],[\"纹理矩阵的逆矩阵\",{\"1\":{\"239\":1}}],[\"纹理类型变量\",{\"0\":{\"235\":1}}],[\"纹理坐标变换矩阵\",{\"1\":{\"239\":1}}],[\"纹理坐标\",{\"1\":{\"199\":1}}],[\"纹理中\",{\"1\":{\"199\":2}}],[\"纹理函数\",{\"0\":{\"199\":1}}],[\"次\",{\"1\":{\"266\":1}}],[\"次幂\",{\"1\":{\"198\":4}}],[\"次方\",{\"1\":{\"198\":1}}],[\"玻璃的折射率\",{\"1\":{\"197\":1}}],[\"折射的矢量\",{\"1\":{\"197\":1}}],[\"关键点在于计算机在发送网络包时\",{\"1\":{\"406\":1}}],[\"关键字时暂停执行并计算出要产生的值\",{\"1\":{\"271\":1}}],[\"关键字会接收到传给\",{\"1\":{\"271\":1}}],[\"关键字只能在生成器函数内部使用\",{\"1\":{\"269\":1}}],[\"关键字退出的生成器函数会处于\",{\"1\":{\"269\":1}}],[\"关键字退出的生成器函数会处在\",{\"1\":{\"269\":1}}],[\"关键字有点像函数的中间返回语句\",{\"1\":{\"269\":1}}],[\"关键字之前会正常执行\",{\"1\":{\"269\":1}}],[\"关键字可以让生成器停止和开始执行\",{\"1\":{\"269\":1}}],[\"关键字\",{\"0\":{\"67\":1},\"1\":{\"66\":1,\"688\":1}}],[\"关闭\",{\"1\":{\"324\":1}}],[\"关联\",{\"1\":{\"301\":1}}],[\"关联的纹理的样本数\",{\"1\":{\"199\":1}}],[\"关于\",{\"1\":{\"256\":1}}],[\"关于表面法向量\",{\"1\":{\"197\":1}}],[\"点击时执行\",{\"1\":{\"327\":1}}],[\"点击右上角胶囊按钮离开小程序\",{\"1\":{\"324\":1}}],[\"点边缘为绿色\",{\"1\":{\"240\":1}}],[\"点中心为红色\",{\"1\":{\"240\":1}}],[\"点积的结果为负数\",{\"1\":{\"197\":1}}],[\"点的距离\",{\"1\":{\"197\":1}}],[\"矢量经过表面折射后的矢量\",{\"1\":{\"197\":1}}],[\"矢量转换为单位矢量\",{\"1\":{\"197\":1}}],[\"矢量\",{\"1\":{\"197\":2}}],[\"矢量的反射矢量\",{\"1\":{\"197\":1}}],[\"矢量的叉积\",{\"1\":{\"197\":1}}],[\"矢量的点积\",{\"1\":{\"197\":1}}],[\"矢量的长度\",{\"1\":{\"197\":1}}],[\"支持的版本号等信息\",{\"1\":{\"798\":1}}],[\"支持的数值类型和矢量类型\",{\"1\":{\"195\":2}}],[\"支持双向通信\",{\"1\":{\"796\":1}}],[\"支持跨平台\",{\"1\":{\"788\":1}}],[\"支持特定功能的浏览器\",{\"1\":{\"713\":1}}],[\"支持迭代的自我识别能力和创建实现\",{\"1\":{\"263\":1}}],[\"支持相同的维度\",{\"1\":{\"197\":2}}],[\"向客户端发送消息\",{\"1\":{\"789\":1}}],[\"向history\",{\"1\":{\"655\":1}}],[\"向浏览器\",{\"1\":{\"649\":1}}],[\"向\",{\"1\":{\"646\":1,\"653\":1}}],[\"向父节点插入节点\",{\"1\":{\"593\":1}}],[\"向被攻击网站发送跨站请求\",{\"1\":{\"469\":1}}],[\"向集线器发送网络包\",{\"0\":{\"382\":1}}],[\"向集合中添加一个字符串\",{\"1\":{\"80\":1}}],[\"向操作系统内部的协议栈发出委托时\",{\"1\":{\"349\":1}}],[\"向dns\",{\"1\":{\"341\":1,\"343\":1}}],[\"向dns服务查询ip\",{\"0\":{\"338\":1}}],[\"向量类型变量\",{\"0\":{\"231\":1}}],[\"向量或矩阵的选择器\",{\"1\":{\"221\":1}}],[\"向量函数\",{\"0\":{\"197\":1}}],[\"向介质\",{\"1\":{\"197\":1}}],[\"轴\",{\"1\":{\"231\":12}}],[\"轴方向的分量\",{\"1\":{\"231\":11}}],[\"轴和\",{\"1\":{\"231\":10}}],[\"轴上进行标准比例的缩放\",{\"1\":{\"196\":1}}],[\"轴上进行缩放的比例\",{\"1\":{\"196\":1}}],[\"轴上缩小至原来的一半\",{\"1\":{\"196\":1}}],[\"轴旋转\",{\"1\":{\"196\":1}}],[\"轴平移\",{\"1\":{\"196\":1}}],[\"轴平移的距离\",{\"1\":{\"196\":1}}],[\"负债均衡+金丝雀发布\",{\"1\":{\"452\":1}}],[\"负载均衡算法\",{\"0\":{\"448\":1}}],[\"负载均衡\",{\"0\":{\"442\":1,\"443\":1,\"447\":1}}],[\"负\",{\"1\":{\"221\":1}}],[\"负值表示顺时针旋转\",{\"1\":{\"196\":1}}],[\"负责将包送达通信对象这一整体过程\",{\"1\":{\"406\":1}}],[\"负责执行这一操作的是网卡\",{\"1\":{\"380\":1}}],[\"负责解析执行\",{\"1\":{\"247\":1}}],[\"负责页面的渲染\",{\"1\":{\"246\":1}}],[\"负责把\",{\"1\":{\"95\":1}}],[\"负责界面显示\",{\"1\":{\"95\":1}}],[\"正则表达式\",{\"1\":{\"571\":1}}],[\"正则表达式或一个数组来表示\",{\"1\":{\"571\":1}}],[\"正交振幅调制中\",{\"1\":{\"420\":1}}],[\"正弦波\",{\"1\":{\"420\":1}}],[\"正面为红色\",{\"1\":{\"240\":1}}],[\"正值表示逆时针旋转\",{\"1\":{\"196\":1}}],[\"正整数\",{\"1\":{\"62\":1}}],[\"单位是字节\",{\"1\":{\"803\":1}}],[\"单位是比特\",{\"1\":{\"803\":1}}],[\"单位为弧度\",{\"1\":{\"198\":3}}],[\"单位为度数\",{\"1\":{\"196\":1}}],[\"单独抽出一个文件\",{\"1\":{\"720\":1}}],[\"单独引入core\",{\"1\":{\"699\":1}}],[\"单元测试的质量也占据了评判代码质量的极大比重\",{\"1\":{\"483\":1}}],[\"单元测试\",{\"0\":{\"482\":1},\"1\":{\"482\":1}}],[\"单模与多模\",{\"0\":{\"425\":1}}],[\"单模和多模的区别之类的光纤性质\",{\"1\":{\"423\":1}}],[\"单线程\",{\"1\":{\"247\":1}}],[\"单精度浮点数\",{\"1\":{\"230\":1}}],[\"单词之间可以用下划线分隔\",{\"1\":{\"66\":1}}],[\"度的正切值\",{\"1\":{\"198\":1}}],[\"度的正弦值\",{\"1\":{\"198\":1}}],[\"度的余弦值\",{\"1\":{\"198\":1}}],[\"度的旋转变换\",{\"1\":{\"196\":1}}],[\"度\",{\"1\":{\"196\":1}}],[\"度之间\",{\"1\":{\"195\":2}}],[\"要提取的chunk最少被引用次数\",{\"1\":{\"720\":1}}],[\"要激活的主机\",{\"1\":{\"653\":1}}],[\"要在子级router\",{\"1\":{\"571\":1}}],[\"要理解两者之间的关系\",{\"1\":{\"406\":1}}],[\"要解决这个问题\",{\"1\":{\"299\":1}}],[\"要查询的属性和代理对象三个参数\",{\"1\":{\"289\":1}}],[\"要使用\",{\"1\":{\"287\":1}}],[\"要运行\",{\"1\":{\"282\":1}}],[\"要求同时具备两种能力\",{\"1\":{\"263\":1}}],[\"要求矩阵是方阵\",{\"1\":{\"196\":1}}],[\"要迭代一个可迭代对象\",{\"1\":{\"260\":1}}],[\"要获取的纹理数组中的层数\",{\"1\":{\"199\":3}}],[\"要获取的纹素在纹理坐标系中的位置\",{\"1\":{\"199\":11}}],[\"要获取最后一个元素位置需要知道前面所有元素位置\",{\"1\":{\"49\":1}}],[\"矩阵\",{\"1\":{\"239\":2}}],[\"矩阵中第四行第四列的值\",{\"1\":{\"233\":1}}],[\"矩阵中第四行第三列的值\",{\"1\":{\"233\":1}}],[\"矩阵中第四行第二列的值\",{\"1\":{\"233\":1}}],[\"矩阵中第四行第一列的值\",{\"1\":{\"233\":1}}],[\"矩阵中第三行第四列的值\",{\"1\":{\"233\":1}}],[\"矩阵中第三行第三列的值\",{\"1\":{\"233\":2}}],[\"矩阵中第三行第二列的值\",{\"1\":{\"233\":2}}],[\"矩阵中第三行第一列的值\",{\"1\":{\"233\":2}}],[\"矩阵中第二行第四列的值\",{\"1\":{\"233\":1}}],[\"矩阵中第二行第三列的值\",{\"1\":{\"233\":2}}],[\"矩阵中第二行第二列的值\",{\"1\":{\"233\":3}}],[\"矩阵中第二行第一列的值\",{\"1\":{\"233\":3}}],[\"矩阵中第一行第四列的值\",{\"1\":{\"233\":1}}],[\"矩阵中第一行第三列的值\",{\"1\":{\"233\":2}}],[\"矩阵中第一行第二列的值\",{\"1\":{\"233\":3}}],[\"矩阵中第一行第一列的值\",{\"1\":{\"233\":3}}],[\"矩阵函数\",{\"0\":{\"196\":1}}],[\"矩阵类型变量\",{\"0\":{\"233\":1}}],[\"矩阵类型\",{\"1\":{\"193\":2}}],[\"判断有无此方法\",{\"1\":{\"665\":1}}],[\"判断传入的文本是否包含变量\",{\"1\":{\"611\":1}}],[\"判断\",{\"1\":{\"588\":1}}],[\"判断实例上是否存在渲染函数\",{\"1\":{\"582\":1}}],[\"判断是否需要深度监听\",{\"1\":{\"670\":1}}],[\"判断是否相同路由\",{\"1\":{\"651\":1}}],[\"判断是否存在缓存对象\",{\"1\":{\"573\":1}}],[\"判断是否存在缓存的组件\",{\"1\":{\"573\":1}}],[\"判断是否有数据丢失\",{\"1\":{\"368\":1}}],[\"判断浏览器是否支持\",{\"1\":{\"567\":1}}],[\"判断所赋的值\",{\"1\":{\"318\":1}}],[\"判断一个对象是否可扩展\",{\"1\":{\"311\":1}}],[\"判断符\",{\"1\":{\"221\":1}}],[\"判断输入值是否为正无穷或负无穷\",{\"1\":{\"195\":1}}],[\"判断输入值是否为\",{\"1\":{\"195\":1}}],[\"判断闭包这块内容如果已经不再被使用了\",{\"1\":{\"128\":1}}],[\"之上的\",{\"1\":{\"798\":1}}],[\"之类的预处理器无法正确解析\",{\"1\":{\"622\":1}}],[\"之一\",{\"1\":{\"613\":1}}],[\"之前我们已经使用过很多loader\",{\"1\":{\"722\":1}}],[\"之前\",{\"1\":{\"607\":1,\"725\":1}}],[\"之前被执行\",{\"1\":{\"558\":1}}],[\"之后有两种分支可以走\",{\"1\":{\"589\":1}}],[\"之外的\",{\"1\":{\"257\":1}}],[\"之外返回\",{\"1\":{\"195\":1}}],[\"之间跳转的时候\",{\"1\":{\"648\":1}}],[\"之间相互连接的部分可以说就是互联网的核心部分\",{\"1\":{\"428\":1}}],[\"之间的兼容性\",{\"1\":{\"710\":1}}],[\"之间的距离\",{\"1\":{\"197\":1}}],[\"之间的值\",{\"1\":{\"190\":1,\"195\":2}}],[\"之间\",{\"1\":{\"190\":1}}],[\"插件将自己的方法注册到对应钩子上\",{\"1\":{\"776\":1}}],[\"插件将收到此\",{\"1\":{\"737\":1}}],[\"插件是由\",{\"1\":{\"738\":1}}],[\"插件由以下组成\",{\"1\":{\"736\":1}}],[\"插件向第三方开发者提供了\",{\"1\":{\"734\":1}}],[\"插件顺序从前往后排列\",{\"1\":{\"693\":1}}],[\"插件在\",{\"1\":{\"693\":1}}],[\"插值函数会在\",{\"1\":{\"195\":1}}],[\"插入小于的元素前面\",{\"1\":{\"55\":1}}],[\"插入排序\",{\"0\":{\"55\":1}}],[\"否则的话\",{\"1\":{\"614\":1}}],[\"否则创建新的观察者实例\",{\"1\":{\"560\":1}}],[\"否则就丢弃这个包\",{\"1\":{\"400\":1}}],[\"否则\",{\"1\":{\"282\":3,\"589\":1}}],[\"否则返回1\",{\"1\":{\"202\":3}}],[\"否则返回\",{\"1\":{\"195\":1,\"197\":1,\"310\":1,\"591\":1}}],[\"否则相反\",{\"1\":{\"174\":1}}],[\"若不是初始化过程执行的该方法\",{\"1\":{\"663\":1}}],[\"若不设置为true\",{\"1\":{\"662\":1}}],[\"若不调用\",{\"1\":{\"265\":1}}],[\"若处于浏览器环境下且加载过vue\",{\"1\":{\"660\":1}}],[\"若超过\",{\"1\":{\"571\":1}}],[\"若\",{\"1\":{\"195\":8}}],[\"若使用了未声明的变量\",{\"1\":{\"114\":1}}],[\"且携带了\",{\"1\":{\"803\":1}}],[\"且并没有采用\",{\"1\":{\"803\":1}}],[\"且值的含义由扩展进行定义\",{\"1\":{\"803\":1}}],[\"且只支持\",{\"1\":{\"799\":1}}],[\"且不是首次加载\",{\"1\":{\"575\":1}}],[\"且队列仍是有序的\",{\"1\":{\"557\":1}}],[\"且在浏览器中\",{\"1\":{\"540\":1}}],[\"且\",{\"1\":{\"302\":1}}],[\"且该方法返回迭代结果对象的对象\",{\"1\":{\"260\":1}}],[\"且该方法返回迭代器对象的对象\",{\"1\":{\"260\":1}}],[\"且设定时间到达后执行\",{\"1\":{\"257\":1}}],[\"且长度必须是一个常量表达式\",{\"1\":{\"232\":1}}],[\"且长度相同\",{\"1\":{\"195\":2}}],[\"且函数能正确执行\",{\"1\":{\"114\":1}}],[\"任务队列开始执行\",{\"1\":{\"258\":1}}],[\"任意的应用数据\",{\"1\":{\"803\":1}}],[\"任意合法的\",{\"1\":{\"278\":1}}],[\"任意长度的向量\",{\"1\":{\"195\":2}}],[\"任意类型的数值\",{\"1\":{\"195\":12}}],[\"任何一个线程出错都可能会导致进程崩溃\",{\"1\":{\"94\":1}}],[\"相当于删除了打包文件中对sourcemap的引用注释\",{\"1\":{\"767\":1}}],[\"相当于\",{\"1\":{\"643\":1}}],[\"相当于为value打上标记\",{\"1\":{\"561\":1}}],[\"相当于运行\",{\"1\":{\"314\":1}}],[\"相比每次都从根域找起来说\",{\"1\":{\"347\":1}}],[\"相机变换和投影变换\",{\"1\":{\"239\":1}}],[\"相同取\",{\"1\":{\"804\":1}}],[\"相同种类\",{\"1\":{\"748\":1}}],[\"相同而\",{\"1\":{\"476\":1}}],[\"相同的原因被拒绝\",{\"1\":{\"281\":1}}],[\"相同的值被解决\",{\"1\":{\"281\":1}}],[\"相同的矢量或标量\",{\"1\":{\"195\":6}}],[\"相同长度的向量\",{\"1\":{\"195\":4}}],[\"相同类型的变量\",{\"1\":{\"195\":1}}],[\"相同\",{\"1\":{\"195\":1}}],[\"相等或比它小的最大整数\",{\"1\":{\"195\":1}}],[\"相邻元素比较\",{\"1\":{\"53\":1}}],[\"功能完成后调用\",{\"1\":{\"736\":1}}],[\"功能开关发布\",{\"1\":{\"452\":1}}],[\"功能\",{\"1\":{\"195\":22,\"196\":6,\"197\":8,\"198\":17,\"199\":32,\"231\":7,\"233\":4,\"234\":1,\"236\":6,\"238\":4,\"239\":20,\"240\":14}}],[\"双向通信\",{\"0\":{\"792\":1}}],[\"双绞\",{\"0\":{\"389\":1},\"1\":{\"389\":1}}],[\"双精度浮点数\",{\"1\":{\"230\":1}}],[\"双精度浮点数类型\",{\"1\":{\"193\":1}}],[\"双指针\",{\"0\":{\"12\":1}}],[\"整个解析过程分为两个步骤\",{\"1\":{\"687\":1}}],[\"整个\",{\"1\":{\"636\":1}}],[\"整个数组的最大值就是堆结构的顶端\",{\"1\":{\"59\":1}}],[\"整理全量日志\",{\"1\":{\"466\":1}}],[\"整体代码\",{\"1\":{\"249\":1}}],[\"整型变量\",{\"1\":{\"230\":1}}],[\"整数向量\",{\"1\":{\"199\":1}}],[\"整数向量类型\",{\"1\":{\"193\":1}}],[\"整数的位表示转换为单精度浮点数\",{\"1\":{\"195\":1}}],[\"整数类型\",{\"1\":{\"193\":1,\"199\":1}}],[\"浮点数\",{\"1\":{\"239\":4}}],[\"浮点数或整数\",{\"1\":{\"231\":5}}],[\"浮点数的位表示转换为无符号整数\",{\"1\":{\"195\":1}}],[\"浮点数的位表示转换为整数\",{\"1\":{\"195\":1}}],[\"浮点数向量类型\",{\"1\":{\"193\":1}}],[\"浮点数类型变量\",{\"1\":{\"193\":1}}],[\"浮点数类型\",{\"1\":{\"193\":1}}],[\"浮动造成的问题就是父元素高度坍塌\",{\"1\":{\"174\":1}}],[\"浮动元素也参与计算\",{\"1\":{\"174\":2}}],[\"示例\",{\"1\":{\"193\":11,\"195\":22,\"196\":6,\"197\":8,\"198\":17,\"199\":32,\"230\":5,\"231\":7,\"233\":4,\"234\":1,\"235\":6,\"236\":6,\"238\":4,\"239\":24,\"240\":14}}],[\"示例方法来更改名称并引发事件\",{\"1\":{\"77\":1}}],[\"描述符\",{\"1\":{\"350\":1}}],[\"描述\",{\"1\":{\"193\":11,\"221\":1,\"239\":4,\"241\":1}}],[\"描述多语言之间进行交互的语言规范\",{\"1\":{\"70\":1}}],[\"布隆过滤器\",{\"0\":{\"449\":1}}],[\"布局\",{\"1\":{\"249\":1,\"517\":1}}],[\"布局和绘制页面\",{\"1\":{\"247\":1}}],[\"布局限定符\",{\"1\":{\"238\":1}}],[\"布局不再局限于单个维度了\",{\"1\":{\"177\":1}}],[\"布尔值\",{\"1\":{\"608\":1}}],[\"布尔型变量\",{\"1\":{\"230\":1}}],[\"布尔向量类型\",{\"1\":{\"193\":1}}],[\"布尔类型\",{\"1\":{\"193\":1}}],[\"由rendermixin添加的`$nexttick`\",{\"1\":{\"543\":1}}],[\"由initevents添加的事件方法\",{\"1\":{\"543\":1}}],[\"由initmixin\",{\"1\":{\"543\":1}}],[\"由\",{\"1\":{\"543\":2,\"558\":1,\"559\":1,\"802\":1}}],[\"由人手动维护路由记录\",{\"1\":{\"399\":1}}],[\"由目标对象的自身属性键组成的\",{\"1\":{\"308\":1}}],[\"由浮点数类型组成的矩阵类型\",{\"1\":{\"193\":2}}],[\"由浮点数类型组成的矢量类型\",{\"1\":{\"193\":1}}],[\"由无符号整数类型组成的矢量类型\",{\"1\":{\"193\":1}}],[\"由整数类型组成的矢量类型\",{\"1\":{\"193\":1}}],[\"由布尔类型组成的矢量类型\",{\"1\":{\"193\":1}}],[\"由于会渲染同样的\",{\"1\":{\"648\":1}}],[\"由于app\",{\"1\":{\"642\":1}}],[\"由于省略了文件名\",{\"1\":{\"334\":1}}],[\"由于\",{\"1\":{\"190\":1,\"282\":1,\"794\":1}}],[\"由伸缩容器和伸缩项目组成\",{\"1\":{\"176\":1}}],[\"主要目的并不是确保数据的安全性\",{\"1\":{\"801\":1}}],[\"主要用于旧浏览器或者缓解中将ecmascript\",{\"1\":{\"692\":1}}],[\"主要用于开发过程中打印一些运行信息\",{\"1\":{\"457\":1}}],[\"主要有以下两条\",{\"1\":{\"636\":1}}],[\"主要做了如下两件事\",{\"1\":{\"558\":1}}],[\"主要通过看看能否通过a用户操作影响到b用户\",{\"1\":{\"474\":1}}],[\"主要作用是控制变量存储的精度\",{\"1\":{\"241\":1}}],[\"主函数\",{\"1\":{\"190\":1}}],[\"主进程发送提交导航消息到渲染进程\",{\"1\":{\"96\":1,\"102\":1,\"103\":1,\"104\":1}}],[\"主进程把该url转发给网络进程\",{\"1\":{\"102\":1,\"103\":1,\"104\":1}}],[\"主进程把该\",{\"1\":{\"96\":1}}],[\"主进程接收用户输入的url\",{\"1\":{\"102\":1,\"103\":1,\"104\":1}}],[\"主进程接收用户输入的\",{\"1\":{\"96\":1}}],[\"屏幕分辨率\",{\"1\":{\"190\":1}}],[\"终端\",{\"1\":{\"455\":1}}],[\"终点\",{\"1\":{\"190\":1}}],[\"终结器\",{\"1\":{\"77\":1}}],[\"造型函数\",{\"0\":{\"190\":1}}],[\"因为掩码一共就是四个字节\",{\"1\":{\"804\":1}}],[\"因为它没有生成列映射\",{\"1\":{\"765\":1}}],[\"因为它懒执行\",{\"1\":{\"563\":1}}],[\"因为我目前使用的是development模式\",{\"1\":{\"759\":1}}],[\"因为当守卫执行前\",{\"1\":{\"648\":1}}],[\"因为keep\",{\"1\":{\"571\":1}}],[\"因为用户\",{\"1\":{\"558\":1}}],[\"因为用户调用\",{\"1\":{\"555\":1}}],[\"因为父组件总是在子组件之前被创建\",{\"1\":{\"558\":1}}],[\"因为上一次执行\",{\"1\":{\"554\":1}}],[\"因为很明显父组件的监听器才会注册到孩子身上\",{\"1\":{\"544\":1}}],[\"因为任何一个组件中不用声明就能用了\",{\"1\":{\"543\":1}}],[\"因为ack\",{\"1\":{\"367\":1}}],[\"因为只要发送方在每次发送数据时减掉已发送的数据长度就可以自行计算出当前窗口的剩余长度\",{\"1\":{\"367\":1}}],[\"因为dns\",{\"1\":{\"347\":1}}],[\"因为两个对象访问的是同一个值\",{\"1\":{\"287\":1}}],[\"因为两个代码写在\",{\"1\":{\"257\":1}}],[\"因为\",{\"1\":{\"282\":1,\"517\":1,\"801\":1}}],[\"因为这个赋值会转移到目标对象\",{\"1\":{\"287\":1}}],[\"因为这一次调用是为了开始执行生成器函数\",{\"1\":{\"271\":1}}],[\"因为这样声明后\",{\"1\":{\"232\":1}}],[\"因为日常开发中的绝大部分异步任务都是在这\",{\"1\":{\"256\":1}}],[\"因为每个像素的坐标都不同\",{\"1\":{\"211\":1}}],[\"因为显卡的架构\",{\"1\":{\"210\":1,\"237\":1}}],[\"因为替换元素比如\",{\"1\":{\"187\":1}}],[\"因此也就触发了插件的方法\",{\"1\":{\"776\":1}}],[\"因此组件实例会被复用\",{\"1\":{\"648\":1}}],[\"因此会进入下面的\",{\"1\":{\"589\":1}}],[\"因此会每一个组件继承\",{\"1\":{\"543\":1}}],[\"因此就可以进行\",{\"1\":{\"589\":1}}],[\"因此如果用公有地址加上端口的组合对应一个私有地址\",{\"1\":{\"410\":1}}],[\"因此返回的包的接收方就是改写后的公有地址和端口号\",{\"1\":{\"409\":1}}],[\"因此\",{\"1\":{\"380\":1,\"389\":1,\"406\":1,\"568\":1,\"607\":1}}],[\"因此当需要连续发送ack\",{\"1\":{\"367\":1}}],[\"因此负责执行解析\",{\"1\":{\"341\":1}}],[\"因此要隐藏目标对象上的属性也轻而易举\",{\"1\":{\"317\":1}}],[\"因此不能使用instanceof\",{\"1\":{\"287\":1}}],[\"因此越来越应该有绿色条条的颜色混合\",{\"1\":{\"190\":1}}],[\"因此越来越接近绿色\",{\"1\":{\"190\":1}}],[\"因此大写字母和小写字母被认为是不同的字符\",{\"1\":{\"66\":1}}],[\"因此运行时间为\",{\"1\":{\"49\":1}}],[\"建立分析语法单元之间的关系\",{\"1\":{\"687\":1}}],[\"建立\",{\"1\":{\"187\":3}}],[\"建议optional设置为false\",{\"1\":{\"89\":2}}],[\"种类\",{\"1\":{\"726\":1}}],[\"种类型的节点能够被创建并插入到\",{\"1\":{\"590\":1}}],[\"种类型的节点\",{\"1\":{\"590\":1}}],[\"种不同的基本操作\",{\"1\":{\"301\":1}}],[\"种\",{\"1\":{\"187\":1,\"419\":1}}],[\"无需再次更新\",{\"1\":{\"678\":1}}],[\"无需关心\",{\"1\":{\"517\":1}}],[\"无需实例化\",{\"1\":{\"81\":1}}],[\"无效\",{\"1\":{\"269\":3}}],[\"无参数\",{\"1\":{\"238\":1}}],[\"无返回值的函数\",{\"1\":{\"238\":1}}],[\"无符号整型变量\",{\"1\":{\"230\":1}}],[\"无符号整数的位表示转换为单精度浮点数\",{\"1\":{\"195\":1}}],[\"无符号整数向量类型\",{\"1\":{\"193\":1}}],[\"无符号整数类型\",{\"1\":{\"193\":1}}],[\"无序列表\",{\"1\":{\"185\":1}}],[\"区别\",{\"1\":{\"427\":1}}],[\"区别主要在于调用时机不同\",{\"1\":{\"257\":1}}],[\"区段头或页头\",{\"1\":{\"185\":1}}],[\"区段尾或页尾\",{\"1\":{\"185\":1}}],[\"区块\",{\"1\":{\"139\":1}}],[\"伴随内容\",{\"1\":{\"185\":1}}],[\"呈现水平排列\",{\"1\":{\"184\":1}}],[\"呈现垂直排列\",{\"1\":{\"184\":1}}],[\"所实例化出来的\",{\"1\":{\"738\":1}}],[\"所在组件的\",{\"1\":{\"532\":1}}],[\"所在线程\",{\"1\":{\"247\":1}}],[\"所谓接入网\",{\"1\":{\"418\":1}}],[\"所有从客户端传送到服务端的数据帧\",{\"1\":{\"803\":1}}],[\"所有客户端发送到服务端的数据帧\",{\"1\":{\"803\":1}}],[\"所有\",{\"1\":{\"713\":1}}],[\"所有的扩展都必须声明扩展数据的长度\",{\"1\":{\"803\":1}}],[\"所有的sources相对的根目录\",{\"1\":{\"759\":1}}],[\"所有的组件全部加载进来时是\",{\"1\":{\"679\":1}}],[\"所有的宏都以\",{\"1\":{\"209\":1}}],[\"所有属性匹配完之后\",{\"1\":{\"607\":1}}],[\"所有用户都会在网页中弹出aaa的弹窗\",{\"1\":{\"472\":1}}],[\"所有赋值操作都会触发\",{\"1\":{\"318\":1}}],[\"所有捕获器都可以访问相应的参数\",{\"1\":{\"289\":1}}],[\"所有相应的\",{\"1\":{\"281\":2}}],[\"所有生成器对象都有\",{\"1\":{\"274\":1}}],[\"所有样本的掩码值均为\",{\"1\":{\"240\":1}}],[\"所有线程的输入值必须统一\",{\"1\":{\"210\":1,\"237\":1}}],[\"所有块级盒子都会参与\",{\"1\":{\"184\":1}}],[\"所以不需要保留转换前的名称\",{\"1\":{\"759\":1}}],[\"所以相当于已经内置了autoprefixer\",{\"1\":{\"755\":1}}],[\"所以每次都会追踪它的变化\",{\"1\":{\"678\":1}}],[\"所以app\",{\"1\":{\"642\":1}}],[\"所以下面的初始化\",{\"1\":{\"642\":1}}],[\"所以有些浏览器不支持\",{\"1\":{\"561\":1}}],[\"所以全局组件的原理就是这么简单\",{\"1\":{\"543\":1}}],[\"所以无需关心\",{\"1\":{\"517\":1}}],[\"所以即便信号受到噪声的干扰发生了失真\",{\"1\":{\"390\":1}}],[\"所以结果就是访问\",{\"1\":{\"334\":1}}],[\"所以可以根据所赋的值决定是允许还是拒绝赋值\",{\"1\":{\"318\":1}}],[\"所以生成器格外适合作为默认迭代器\",{\"1\":{\"273\":1}}],[\"所以它在遇到\",{\"1\":{\"271\":1}}],[\"所以它会一直创建新的函数执行上下文\",{\"1\":{\"118\":1}}],[\"所以就直接跳转到\",{\"1\":{\"257\":1}}],[\"所以就可以把侧边栏固定宽度且左浮动\",{\"1\":{\"174\":1}}],[\"所以打印出\",{\"1\":{\"256\":1}}],[\"所以我们把它叫做\",{\"1\":{\"211\":1}}],[\"所以精度非常重要\",{\"1\":{\"209\":1}}],[\"所以\",{\"1\":{\"190\":1,\"642\":1}}],[\"所以如果让\",{\"1\":{\"174\":1}}],[\"所以清除浮动需要解决的问题就是让父元素的高度恢复正常\",{\"1\":{\"174\":1}}],[\"所以要将其转化为渲染引擎能够理解的内部结构\",{\"1\":{\"133\":1}}],[\"所以词法作用域是静态的作用域\",{\"1\":{\"125\":1}}],[\"所以最后打印出来的是7\",{\"1\":{\"120\":1}}],[\"参数为\",{\"1\":{\"559\":1}}],[\"参数污染\",{\"1\":{\"476\":1}}],[\"参数就是\",{\"1\":{\"310\":1}}],[\"参数\",{\"1\":{\"301\":1,\"313\":1}}],[\"参数说明\",{\"1\":{\"195\":22,\"196\":6,\"197\":8,\"198\":17,\"199\":32,\"231\":7,\"233\":3,\"234\":1,\"236\":6,\"238\":4}}],[\"参数分别为线条宽度\",{\"1\":{\"190\":1}}],[\"参照\",{\"1\":{\"185\":1}}],[\"参与何种格式化上下文\",{\"1\":{\"183\":1}}],[\"参考值是由\",{\"1\":{\"240\":1}}],[\"参考\",{\"1\":{\"1\":1,\"113\":1,\"208\":1,\"220\":1,\"276\":1,\"330\":1,\"385\":1,\"517\":1}}],[\"网站给受害者的返回中正常的网页\",{\"1\":{\"473\":1}}],[\"网站给受害者的返回中包含了来自url的的恶意文本\",{\"1\":{\"471\":1}}],[\"网站后端会从数据库中取出数据\",{\"1\":{\"472\":1}}],[\"网站后端对提交的评论数据不做任何操作\",{\"1\":{\"472\":1}}],[\"网线越长\",{\"1\":{\"387\":1,\"388\":1}}],[\"网卡中的\",{\"1\":{\"388\":1}}],[\"网卡中保存的mac\",{\"1\":{\"380\":1}}],[\"网卡的\",{\"1\":{\"388\":1}}],[\"网卡的mac\",{\"1\":{\"382\":1}}],[\"网卡的rom\",{\"1\":{\"380\":1}}],[\"网卡驱动从ip\",{\"1\":{\"381\":1}}],[\"网址\",{\"1\":{\"330\":1}}],[\"网格布局格式化上下文\",{\"1\":{\"177\":1}}],[\"网络部署架构\",{\"0\":{\"441\":1}}],[\"网络运营商的内部\",{\"0\":{\"427\":1}}],[\"网络包通过交换机和路由器的转发一步一步地接近它的目的地\",{\"1\":{\"418\":1}}],[\"网络是怎样连接的\",{\"1\":{\"330\":1,\"385\":1},\"2\":{\"352\":1,\"384\":1,\"414\":1,\"430\":1}}],[\"网络请求\",{\"1\":{\"249\":1}}],[\"网络面板\",{\"0\":{\"132\":1}}],[\"网络进程接收到的字节流像水一样倒进这个\",{\"1\":{\"134\":1}}],[\"网络进程接收到数据后就往这个管道里面放\",{\"1\":{\"134\":1}}],[\"网络进程接收到响应头之后\",{\"1\":{\"134\":1}}],[\"网络进程接收到响应头数据并转发给主进程\",{\"1\":{\"96\":1,\"102\":1,\"103\":1,\"104\":1}}],[\"网络进程和渲染进程之间会建立一个共享数据的管道\",{\"1\":{\"134\":1}}],[\"网络进程加载了多少数据\",{\"1\":{\"102\":1,\"103\":1,\"104\":1}}],[\"网络进程\",{\"1\":{\"95\":1,\"102\":1,\"103\":1,\"104\":1,\"246\":1}}],[\"直接启动\",{\"0\":{\"772\":1}}],[\"直接使用\",{\"1\":{\"699\":1,\"713\":1}}],[\"直接缓存起来复用即可\",{\"1\":{\"678\":1}}],[\"直接修改state\",{\"1\":{\"662\":1}}],[\"直接返回\",{\"1\":{\"560\":1,\"596\":1}}],[\"直接返回给用户\",{\"1\":{\"472\":1}}],[\"直接调用\",{\"1\":{\"559\":1}}],[\"直接入队\",{\"1\":{\"557\":1}}],[\"直接运行攻击者提交的代码<script>alert\",{\"1\":{\"472\":1}}],[\"直接存储到数据库中\",{\"1\":{\"472\":1}}],[\"直至不再产生新值\",{\"1\":{\"265\":1}}],[\"直至返回\",{\"1\":{\"260\":1}}],[\"直译为\",{\"1\":{\"176\":1,\"177\":1}}],[\"直到标记完所有节点\",{\"1\":{\"613\":1}}],[\"直到浏览器需要执行其他工作\",{\"1\":{\"568\":1}}],[\"直到\",{\"1\":{\"282\":1}}],[\"直到它指向数据结构的结束位置\",{\"1\":{\"265\":1}}],[\"直到队列为空或者达到系统限制\",{\"1\":{\"256\":1}}],[\"直到直到把\",{\"1\":{\"251\":1}}],[\"直到程序结束\",{\"1\":{\"81\":1}}],[\"直到所有元素均排序完毕\",{\"1\":{\"54\":1,\"55\":1}}],[\"直到排序完成\",{\"1\":{\"53\":1}}],[\"直到符合基线条件\",{\"1\":{\"43\":1}}],[\"直到对图中的每个节点都这样做了\",{\"1\":{\"1\":1}}],[\"垂直越权测试思路\",{\"1\":{\"474\":1}}],[\"垂直越权\",{\"1\":{\"474\":1}}],[\"垂直居中\",{\"1\":{\"175\":1}}],[\"垂直方向上的内外边距使用百分比做单位时\",{\"1\":{\"170\":1}}],[\"被\",{\"1\":{\"591\":1,\"679\":1}}],[\"被指定为\",{\"1\":{\"552\":1}}],[\"被调用时\",{\"1\":{\"552\":1}}],[\"被调用的函数可能也定义了自己的\",{\"1\":{\"296\":1}}],[\"被绑定元素插入父节点时调用\",{\"1\":{\"532\":1}}],[\"被查询\",{\"1\":{\"316\":1}}],[\"被再次调用\",{\"1\":{\"282\":1}}],[\"被拒绝\",{\"1\":{\"281\":2}}],[\"被拒绝之前调用\",{\"1\":{\"281\":1}}],[\"被拒绝之后调用\",{\"1\":{\"281\":1}}],[\"被解决或拒绝\",{\"1\":{\"282\":2}}],[\"被解决\",{\"1\":{\"281\":2}}],[\"被解决前调用\",{\"1\":{\"281\":1}}],[\"被解决后调用\",{\"1\":{\"281\":1}}],[\"被约束在\",{\"1\":{\"195\":1}}],[\"被称为该行的线盒\",{\"1\":{\"175\":1}}],[\"被定义为色相\",{\"1\":{\"154\":1}}],[\"块\",{\"1\":{\"637\":1}}],[\"块和\",{\"1\":{\"637\":1}}],[\"块负责将包转换成电信号\",{\"1\":{\"388\":1}}],[\"块级元素\",{\"0\":{\"185\":1}}],[\"块级元素中仅包含内联级别元素\",{\"1\":{\"175\":1}}],[\"块级盒子\",{\"1\":{\"184\":2}}],[\"块格式化上下文\",{\"1\":{\"174\":1}}],[\"那它要成为静态节点必须满足\",{\"1\":{\"613\":1}}],[\"那就断定它是静态节点\",{\"1\":{\"613\":1}}],[\"那就直接进入更新节点的操作\",{\"1\":{\"597\":4}}],[\"那就直接执行\",{\"1\":{\"558\":1}}],[\"那就是保存在套接字中\",{\"1\":{\"359\":1}}],[\"那这个对象也就实现了这个接口\",{\"1\":{\"263\":1}}],[\"那\",{\"1\":{\"253\":1}}],[\"那如何让\",{\"1\":{\"174\":1}}],[\"那么载荷数据长度必须将扩展数据的长度包含在内\",{\"1\":{\"803\":1}}],[\"那么接收端应该断开连接\",{\"1\":{\"803\":1}}],[\"那么将阻断后续的\",{\"1\":{\"749\":1}}],[\"那么通过\",{\"1\":{\"589\":1}}],[\"那么直接\",{\"1\":{\"589\":1}}],[\"那么如果不是呢\",{\"1\":{\"589\":1}}],[\"那么就会包含该特性了\",{\"1\":{\"699\":1}}],[\"那么就去向下递归它的子节点\",{\"1\":{\"613\":1}}],[\"那么就认为是相同的\",{\"1\":{\"589\":1}}],[\"那么就可以直接返回响应\",{\"1\":{\"347\":1}}],[\"那么就是\",{\"1\":{\"257\":1}}],[\"那么这条记录就能够被找到\",{\"1\":{\"343\":1}}],[\"那么甚至不需要定义处理程序对象\",{\"1\":{\"289\":1}}],[\"那么第一次调用优先\",{\"1\":{\"282\":1}}],[\"那么生成器就不会关闭\",{\"1\":{\"274\":1}}],[\"那么使用起来会更方便\",{\"1\":{\"270\":1}}],[\"那么在捕获器返回一个与该属性不同的值时\",{\"1\":{\"290\":1}}],[\"那么在\",{\"1\":{\"257\":1,\"803\":1}}],[\"那么会加入到队列的末尾\",{\"1\":{\"251\":1}}],[\"那么浏览器就会判断这是一个\",{\"1\":{\"134\":1}}],[\"那么\",{\"1\":{\"128\":1}}],[\"那么闭包会一直存在直到页面关闭\",{\"1\":{\"128\":1}}],[\"那么javascript执行会报错\",{\"1\":{\"114\":1}}],[\"下一个tick执行函数\",{\"1\":{\"543\":1}}],[\"下一次调用\",{\"1\":{\"271\":1}}],[\"下载好\",{\"1\":{\"517\":1}}],[\"下载离线\",{\"1\":{\"517\":1}}],[\"下文还会详细介绍\",{\"1\":{\"256\":1}}],[\"下文会介绍\",{\"1\":{\"256\":1}}],[\"下文会详细介绍\",{\"1\":{\"255\":1}}],[\"下的多个\",{\"1\":{\"175\":1}}],[\"下的垂直\",{\"1\":{\"174\":1}}],[\"下划线或\",{\"1\":{\"66\":2}}],[\"下划线\",{\"1\":{\"66\":1,\"158\":1}}],[\"同步和异步的\",{\"1\":{\"777\":1}}],[\"同步\",{\"0\":{\"739\":1}}],[\"同步loader\",{\"0\":{\"727\":1}}],[\"同步任务\",{\"1\":{\"567\":1}}],[\"同步代码\",{\"1\":{\"251\":1}}],[\"同时生成一个静态节点\",{\"1\":{\"678\":1}}],[\"同时将watcher添加进入dep中的subs中\",{\"1\":{\"556\":1}}],[\"同时\",{\"1\":{\"190\":1,\"766\":1}}],[\"同时给一个元素设置\",{\"1\":{\"183\":1}}],[\"同个\",{\"1\":{\"175\":1}}],[\"同一个\",{\"1\":{\"174\":1,\"281\":1}}],[\"同样采用\",{\"1\":{\"798\":1}}],[\"同样可以正常工作\",{\"1\":{\"622\":1}}],[\"同样的步骤执行\",{\"1\":{\"256\":1,\"258\":1}}],[\"同样的变量\",{\"1\":{\"121\":1}}],[\"同样会为其创建执行上下文\",{\"1\":{\"117\":1}}],[\"同样\",{\"1\":{\"22\":1,\"256\":1}}],[\"应用数据\",{\"1\":{\"803\":3}}],[\"应用程序\",{\"1\":{\"358\":1}}],[\"应用程序是通过\",{\"1\":{\"350\":1}}],[\"应用程序本身的工作就会暂停\",{\"1\":{\"343\":1}}],[\"应用程序编写的操作内容是从上往下按顺序执行的\",{\"1\":{\"343\":1}}],[\"应用原理\",{\"1\":{\"174\":1}}],[\"应用场景\",{\"1\":{\"174\":1,\"175\":1}}],[\"自右向左\",{\"1\":{\"748\":1}}],[\"自下而上\",{\"1\":{\"748\":1}}],[\"自身的事件钩子\",{\"1\":{\"736\":1}}],[\"自身不会渲染\",{\"1\":{\"570\":1}}],[\"自\",{\"1\":{\"713\":1}}],[\"自闭合为\",{\"1\":{\"608\":1}}],[\"自闭合标签如\",{\"1\":{\"607\":1}}],[\"自闭合标签剩下\",{\"1\":{\"607\":1}}],[\"自由组合\",{\"1\":{\"555\":1}}],[\"自由数据\",{\"1\":{\"327\":1}}],[\"自定义plugin\",{\"0\":{\"733\":1}}],[\"自定义loader\",{\"0\":{\"722\":1},\"1\":{\"723\":2}}],[\"自定义指令\",{\"0\":{\"531\":1}}],[\"自定义函数规则和\",{\"1\":{\"200\":1}}],[\"自定义函数\",{\"0\":{\"200\":1}}],[\"自己的\",{\"1\":{\"523\":1}}],[\"自动检测所需要的polyfill\",{\"1\":{\"699\":1}}],[\"自动将你的构建代码切割成多个包\",{\"1\":{\"653\":1}}],[\"自动生成的文件\",{\"1\":{\"517\":1}}],[\"自动协商功能就利用了这样的脉冲信号\",{\"1\":{\"396\":1}}],[\"自动协商\",{\"0\":{\"396\":1}}],[\"自动适配不同屏幕\",{\"1\":{\"180\":1}}],[\"自动属性\",{\"1\":{\"79\":1}}],[\"自适应\",{\"1\":{\"788\":1}}],[\"自适应布局\",{\"0\":{\"181\":1}}],[\"自适应格式化上下文\",{\"1\":{\"176\":1}}],[\"自适应两栏布局\",{\"1\":{\"174\":1}}],[\"非故意的\",{\"1\":{\"801\":1}}],[\"非常方便和人性化\",{\"1\":{\"788\":1}}],[\"非自闭合为\",{\"1\":{\"608\":1}}],[\"非自闭合标签如\",{\"1\":{\"607\":1}}],[\"非自闭合标签剩下\",{\"1\":{\"607\":1}}],[\"非彼\",{\"1\":{\"253\":1}}],[\"非溢出的可见元素\",{\"1\":{\"174\":1}}],[\"非严格模式下\",{\"1\":{\"129\":1}}],[\"根元素\",{\"1\":{\"174\":1}}],[\"根据客户端请求首部的\",{\"1\":{\"801\":1}}],[\"根据源文件\",{\"1\":{\"758\":1}}],[\"根据源代码中出现的语言特性\",{\"1\":{\"699\":1}}],[\"根据location生成一个route对象\",{\"1\":{\"650\":1}}],[\"根据路径匹配出\",{\"1\":{\"650\":1}}],[\"根据路由协议机制\",{\"1\":{\"399\":1}}],[\"根据name\",{\"1\":{\"650\":1}}],[\"根据record返回一个route对象\",{\"1\":{\"649\":1}}],[\"根据当前\",{\"1\":{\"557\":1}}],[\"根据包\",{\"1\":{\"418\":1}}],[\"根据网络包平均往返时间调整ack\",{\"0\":{\"365\":1}}],[\"根据域名查询ip\",{\"1\":{\"342\":1}}],[\"根据传入参数不同进行不同的操作\",{\"1\":{\"238\":1}}],[\"根据给定的采样器\",{\"1\":{\"199\":2}}],[\"根据采样的纹理类型返回需要的值\",{\"1\":{\"199\":3}}],[\"根据st点在曲线上的位置来改变渲染颜色\",{\"1\":{\"190\":1}}],[\"根据不同设备或屏幕大小\",{\"1\":{\"181\":1}}],[\"根据dom树创建布局树\",{\"1\":{\"102\":1,\"103\":1,\"104\":1}}],[\"根据分层树进行生成绘制步骤并复合图层\",{\"1\":{\"104\":1}}],[\"根据分层树进行生成绘制步骤复合图层\",{\"1\":{\"104\":1}}],[\"根据分层树进行生成绘制步骤\",{\"1\":{\"97\":1}}],[\"根据布局树生成分层树\",{\"1\":{\"97\":1,\"103\":2,\"104\":1}}],[\"根据\",{\"1\":{\"97\":1,\"100\":1,\"240\":1,\"300\":1,\"412\":1,\"644\":1,\"650\":1,\"699\":1}}],[\"容器里面的子元素不会影响到外面的元素\",{\"1\":{\"174\":1}}],[\"容器能够容纳水\",{\"1\":{\"13\":1}}],[\"盒子类型可以分成\",{\"1\":{\"184\":1}}],[\"盒子类型由\",{\"1\":{\"183\":1}}],[\"盒子重叠\",{\"1\":{\"174\":1}}],[\"盒子垂直方向的距离由\",{\"1\":{\"174\":1}}],[\"决定了该元素本身是如何布局的\",{\"1\":{\"183\":1}}],[\"决定\",{\"1\":{\"174\":1,\"183\":1}}],[\"规则来说\",{\"1\":{\"624\":1}}],[\"规定了其内部子元素是如何布局的\",{\"1\":{\"183\":1}}],[\"规定了渲染区域内部的子元素是如何排版以及相互作用的\",{\"1\":{\"173\":1}}],[\"规范定义了一个\",{\"1\":{\"796\":1}}],[\"规范中并没有强制要求处理这种情况\",{\"1\":{\"282\":1}}],[\"规范中的一个概念\",{\"1\":{\"173\":1}}],[\"规范\",{\"1\":{\"70\":1,\"276\":1,\"300\":1}}],[\"百分比\",{\"1\":{\"166\":1}}],[\"百分比值\",{\"1\":{\"146\":1}}],[\"位的随机数\",{\"1\":{\"804\":1}}],[\"位的无符号整数\",{\"1\":{\"803\":2}}],[\"位于互联网接入端的路由器通常还会提供一些附加功能\",{\"1\":{\"407\":1}}],[\"位左右\",{\"1\":{\"230\":2}}],[\"位\",{\"1\":{\"230\":5,\"803\":4}}],[\"位置坐标是归一化设备坐标系下的坐标\",{\"1\":{\"240\":1}}],[\"位置开始\",{\"1\":{\"199\":2}}],[\"位置的数交换\",{\"1\":{\"59\":1}}],[\"位十六进制数\",{\"1\":{\"158\":1}}],[\"格式化上下文\",{\"0\":{\"173\":1},\"1\":{\"173\":1}}],[\"格式\",{\"1\":{\"158\":1}}],[\"编写一个工具库\",{\"1\":{\"700\":1}}],[\"编程指南\",{\"1\":{\"189\":1,\"220\":1,\"223\":1}}],[\"编码\",{\"1\":{\"158\":1,\"759\":1}}],[\"编译过程中\",{\"1\":{\"776\":1}}],[\"编译生成资源\",{\"1\":{\"737\":1}}],[\"编译生命周期都可以访问\",{\"1\":{\"636\":1}}],[\"编译\",{\"0\":{\"599\":1}}],[\"编译脚本\",{\"1\":{\"517\":1}}],[\"编译为机器代码的编译器\",{\"1\":{\"72\":1,\"73\":1}}],[\"编译后形成clr\",{\"1\":{\"65\":1}}],[\"连字符\",{\"1\":{\"158\":1}}],[\"连接出错\",{\"1\":{\"803\":1}}],[\"连接过程\",{\"0\":{\"798\":1}}],[\"连接创建后\",{\"1\":{\"796\":1}}],[\"连接成功后\",{\"1\":{\"798\":1}}],[\"连接成功\",{\"1\":{\"789\":1,\"797\":1}}],[\"连接用户与互联网的接入网\",{\"0\":{\"418\":1}}],[\"连接操作的第一步是在tcp\",{\"1\":{\"360\":1}}],[\"连接操作的实际过程\",{\"0\":{\"360\":1}}],[\"连接服务器\",{\"0\":{\"358\":1}}],[\"连接阶段\",{\"1\":{\"349\":1}}],[\"连接\",{\"1\":{\"40\":2,\"796\":1,\"798\":1,\"801\":2}}],[\"十进制数\",{\"1\":{\"158\":1}}],[\"亮度\",{\"1\":{\"154\":1}}],[\"黄色等\",{\"1\":{\"154\":1}}],[\"色相\",{\"1\":{\"154\":1}}],[\"色彩关键字\",{\"0\":{\"150\":1}}],[\"明度\",{\"1\":{\"154\":2}}],[\"饱和度\",{\"1\":{\"154\":2}}],[\"取消监听\",{\"1\":{\"670\":1}}],[\"取消路由跳转\",{\"1\":{\"651\":1}}],[\"取而代之\",{\"1\":{\"624\":1}}],[\"取得下一个值\",{\"1\":{\"265\":1}}],[\"取出\",{\"1\":{\"611\":1}}],[\"取出宏队列\",{\"1\":{\"251\":1}}],[\"取出下一个元素\",{\"1\":{\"55\":1}}],[\"取值\",{\"0\":{\"523\":1},\"1\":{\"613\":1}}],[\"取值范围为\",{\"1\":{\"240\":1}}],[\"取值范围\",{\"1\":{\"230\":4}}],[\"取值为行内inline\",{\"1\":{\"746\":1}}],[\"取值为\",{\"1\":{\"153\":1,\"154\":1}}],[\"取样\",{\"1\":{\"199\":4}}],[\"取\",{\"1\":{\"154\":2}}],[\"多个字节\",{\"1\":{\"794\":1}}],[\"多个值的组合\",{\"0\":{\"769\":1}}],[\"多一个\",{\"1\":{\"153\":1,\"154\":1}}],[\"多级结构\",{\"1\":{\"89\":1}}],[\"蓝绿发布\",{\"1\":{\"452\":1}}],[\"蓝和透明度通道\",{\"1\":{\"209\":1}}],[\"蓝\",{\"1\":{\"153\":1}}],[\"绿\",{\"1\":{\"153\":1,\"209\":1}}],[\"颜色就不会受影响\",{\"1\":{\"152\":1}}],[\"水烟雾云\",{\"0\":{\"243\":1}}],[\"水平越权测试方法\",{\"1\":{\"474\":1}}],[\"水平越权\",{\"1\":{\"474\":1}}],[\"水平居中\",{\"1\":{\"175\":1}}],[\"水平线\",{\"1\":{\"152\":1}}],[\"水管\",{\"1\":{\"134\":3}}],[\"代理\",{\"1\":{\"551\":1,\"554\":1}}],[\"代理到\",{\"1\":{\"551\":1}}],[\"代理的目标对象是数组\",{\"1\":{\"320\":1}}],[\"代理的内部实现对外部代码是不可见的\",{\"1\":{\"317\":1}}],[\"代理的问题与不足\",{\"0\":{\"298\":1}}],[\"代理模式\",{\"0\":{\"315\":1}}],[\"代理捕获器与反射方法\",{\"0\":{\"301\":1}}],[\"代理对象或继承代理对象的对象\",{\"1\":{\"302\":1}}],[\"代理对象上不存在这个内部槽位\",{\"1\":{\"300\":1}}],[\"代理对象却尝试从自身取得这个实例\",{\"1\":{\"299\":1}}],[\"代理与内置引用类型\",{\"1\":{\"300\":1}}],[\"代理与内部插槽\",{\"0\":{\"300\":1}}],[\"代理与反射\",{\"0\":{\"285\":1}}],[\"代理中的\",{\"0\":{\"299\":1}}],[\"代理可以捕获\",{\"1\":{\"301\":1}}],[\"代理可以拦截反射\",{\"1\":{\"297\":1}}],[\"代理可以在这些操作传播到目标对象之前先调用捕获器函数\",{\"1\":{\"288\":1}}],[\"代理另一个代理\",{\"0\":{\"297\":1}}],[\"代理基础\",{\"0\":{\"286\":1}}],[\"代表高精度\",{\"1\":{\"241\":1}}],[\"代表中等精度\",{\"1\":{\"241\":1}}],[\"代表低精度\",{\"1\":{\"241\":1}}],[\"代表\",{\"1\":{\"212\":1}}],[\"代替图像出现的文本\",{\"1\":{\"152\":1}}],[\"代码通常运行在浏览器上时\",{\"1\":{\"757\":1}}],[\"代码中的语法单元主要包括以下这么几种\",{\"1\":{\"688\":1}}],[\"代码中只有对数组的读取访问\",{\"1\":{\"232\":1}}],[\"代码生成器\",{\"1\":{\"603\":1}}],[\"代码生成阶段\",{\"1\":{\"603\":2}}],[\"代码的地方\",{\"1\":{\"517\":1}}],[\"代码压缩\",{\"0\":{\"486\":1}}],[\"代码重构\",{\"1\":{\"294\":1}}],[\"代码执行完毕后\",{\"1\":{\"251\":1}}],[\"代码执行\",{\"1\":{\"71\":1}}],[\"代码\",{\"1\":{\"66\":1}}],[\"控制信息大体上分为两类\",{\"1\":{\"359\":1}}],[\"控制流程会再次转移\",{\"1\":{\"343\":1}}],[\"控制其它子进程的创建和销毁\",{\"1\":{\"246\":1}}],[\"控制变量如何被存储和传递\",{\"1\":{\"238\":1}}],[\"控制函数\",{\"0\":{\"193\":1}}],[\"控制缩放的值不一样\",{\"1\":{\"147\":1}}],[\"控制台程序\",{\"1\":{\"65\":1}}],[\"撑开父元素\",{\"1\":{\"145\":1}}],[\"挤下去\",{\"1\":{\"145\":1}}],[\"利用率等问题\",{\"1\":{\"794\":1}}],[\"利用响应式数据\",{\"1\":{\"671\":1}}],[\"利用浏览器\",{\"1\":{\"645\":1,\"646\":1}}],[\"利用object\",{\"1\":{\"556\":1}}],[\"利用defineproperty对数据进行拦截\",{\"1\":{\"556\":1}}],[\"利用服务器漏洞以服务器的身份发送一条构造好的请求给服务器所在内网\",{\"1\":{\"475\":1}}],[\"利用受害者在被攻击网站已经获取的注册凭证\",{\"1\":{\"469\":1}}],[\"利用uv实现短范围内渐变\",{\"1\":{\"202\":1}}],[\"利用clear属性\",{\"1\":{\"145\":1}}],[\"利用映射函数将数据分配到各个桶中\",{\"1\":{\"61\":1}}],[\"清理打包文件\",{\"1\":{\"720\":1}}],[\"清空\",{\"1\":{\"568\":1}}],[\"清除\",{\"1\":{\"558\":1}}],[\"清除内部浮动\",{\"1\":{\"174\":1}}],[\"清除浮动的原理就是\",{\"1\":{\"174\":1}}],[\"清除浮动\",{\"0\":{\"144\":1,\"145\":1}}],[\"清楚浮动原理\",{\"0\":{\"143\":1}}],[\"页面里嵌入一个隐藏的\",{\"1\":{\"795\":1}}],[\"页面滚动\",{\"1\":{\"655\":1}}],[\"页面滚动时执行\",{\"1\":{\"327\":1}}],[\"页面尺寸变化时执行\",{\"1\":{\"327\":1}}],[\"页面被用户分享时执行\",{\"1\":{\"327\":1}}],[\"页面触底时执行\",{\"1\":{\"327\":1}}],[\"页面销毁时执行\",{\"1\":{\"327\":1}}],[\"页面从前台变为后台时执行\",{\"1\":{\"327\":1}}],[\"页面首次渲染完毕时执行\",{\"1\":{\"327\":1}}],[\"页面出现在前台时执行\",{\"1\":{\"327\":1}}],[\"页面创建时执行\",{\"1\":{\"327\":1}}],[\"页面\",{\"0\":{\"327\":1},\"1\":{\"713\":1}}],[\"页面缩放\",{\"1\":{\"249\":1}}],[\"页面的大部分任务是在主任务上执行的\",{\"1\":{\"249\":1}}],[\"页都有一个渲染进程\",{\"1\":{\"246\":1}}],[\"页就是一个进程\",{\"1\":{\"246\":1}}],[\"页脚或者其他一些设计区块\",{\"1\":{\"139\":1}}],[\"页眉\",{\"1\":{\"139\":1}}],[\"仅保证父节点存在\",{\"1\":{\"532\":1}}],[\"仅读取\",{\"1\":{\"519\":1}}],[\"仅\",{\"1\":{\"256\":1}}],[\"仅当值为对象时才会走这里\",{\"1\":{\"561\":1}}],[\"仅当当前渲染为点精灵时有效\",{\"1\":{\"240\":1}}],[\"仅当列表是有序的时候\",{\"1\":{\"7\":1}}],[\"仅从名字就能知道一个\",{\"1\":{\"138\":1}}],[\"动态数据所在的节点\",{\"1\":{\"675\":1}}],[\"动态生成的内容\",{\"0\":{\"623\":1}}],[\"动态规划\",{\"0\":{\"16\":1}}],[\"动画\",{\"0\":{\"135\":1}}],[\"喂\",{\"1\":{\"134\":1}}],[\"脚本\",{\"1\":{\"247\":1,\"255\":1}}],[\"脚本执行\",{\"1\":{\"246\":1,\"249\":1}}],[\"脚本操作的接口\",{\"1\":{\"133\":1}}],[\"脚本视角来看\",{\"1\":{\"133\":1}}],[\"文件是所有\",{\"1\":{\"517\":1}}],[\"文件的\",{\"1\":{\"517\":1}}],[\"文件类似\",{\"1\":{\"517\":1}}],[\"文件泄露等\",{\"1\":{\"479\":1}}],[\"文件句柄\",{\"1\":{\"455\":1}}],[\"文件\",{\"1\":{\"455\":1,\"517\":1,\"706\":2,\"744\":1}}],[\"文件读写\",{\"1\":{\"249\":1}}],[\"文件访问等操作\",{\"1\":{\"246\":1}}],[\"文件字节流是无法直接被渲染引擎理解的\",{\"1\":{\"133\":1}}],[\"文章内容\",{\"1\":{\"185\":1}}],[\"文本解析\",{\"0\":{\"610\":1}}],[\"文本节点\",{\"1\":{\"590\":1}}],[\"文本压缩\",{\"0\":{\"488\":1}}],[\"文本类型\",{\"0\":{\"157\":1}}],[\"文本的轮廓\",{\"1\":{\"152\":1}}],[\"文本\",{\"1\":{\"98\":1,\"152\":1}}],[\"文本转为浏览器中的\",{\"1\":{\"97\":1,\"99\":1}}],[\"值为\",{\"1\":{\"563\":1}}],[\"值为该value的observer实例\",{\"1\":{\"561\":1}}],[\"值表明该属性是否被成功删除\",{\"1\":{\"307\":1}}],[\"值上的内部槽位\",{\"1\":{\"300\":1}}],[\"值或常量表达式\",{\"1\":{\"241\":1}}],[\"值域为\",{\"1\":{\"198\":3}}],[\"值得一提的是如果把\",{\"1\":{\"187\":1}}],[\"值\",{\"1\":{\"129\":1,\"190\":1,\"195\":1,\"278\":2,\"281\":1}}],[\"值是\",{\"1\":{\"129\":1}}],[\"嵌套函数中的\",{\"1\":{\"129\":1}}],[\"嵌套类型\",{\"1\":{\"77\":1}}],[\"指示着babel如何对代码进行转换\",{\"1\":{\"693\":1}}],[\"指令\",{\"1\":{\"613\":3}}],[\"指令生效\",{\"0\":{\"535\":1}}],[\"指令解析\",{\"0\":{\"534\":1}}],[\"指令的定义\",{\"1\":{\"533\":1}}],[\"指令的值可能发生了改变\",{\"1\":{\"532\":1}}],[\"指令与元素解绑时调用\",{\"1\":{\"532\":1}}],[\"指令所在组件的\",{\"1\":{\"532\":1}}],[\"指令第一次绑定到元素时调用\",{\"1\":{\"532\":1}}],[\"指令原理\",{\"0\":{\"526\":1}}],[\"指的是攻击者在未能取得服务器所有权限时\",{\"1\":{\"475\":1}}],[\"指使用权限低的用户可以访问到权限较高的用户\",{\"1\":{\"474\":1}}],[\"指相同权限下不同的用户可以互相访问\",{\"1\":{\"474\":1}}],[\"指出每个严重的错误事件将会导致应用程序的退出\",{\"1\":{\"457\":1}}],[\"指出虽然发生错误事件\",{\"1\":{\"457\":1}}],[\"指出细粒度信息事件对调试应用程序是非常有帮助的\",{\"1\":{\"457\":1}}],[\"指出了算法的速度有多快\",{\"1\":{\"32\":1}}],[\"指针就指向数据结构的第二个成员\",{\"1\":{\"265\":1}}],[\"指向source\",{\"1\":{\"762\":1}}],[\"指向\",{\"1\":{\"561\":1}}],[\"指向当前数据结构的起始位置\",{\"1\":{\"265\":1}}],[\"指向的是全局对象\",{\"1\":{\"129\":1}}],[\"指数为\",{\"1\":{\"198\":1}}],[\"指定一个绑定到\",{\"1\":{\"736\":1}}],[\"指定\",{\"1\":{\"726\":1}}],[\"指定loader所在的位置\",{\"1\":{\"724\":1}}],[\"指定当前父元素\",{\"1\":{\"609\":1}}],[\"指定数据类型的精度级别\",{\"1\":{\"241\":1}}],[\"指定纹理的\",{\"1\":{\"199\":1}}],[\"指定级别的颜色值或纹理值\",{\"1\":{\"199\":1}}],[\"指定的值必须与指定的纹理采样器关联的实际纹理级别匹配\",{\"1\":{\"199\":1}}],[\"指定的比例进行缩放\",{\"1\":{\"196\":1}}],[\"指定的轴进行\",{\"1\":{\"196\":1}}],[\"指定的距离沿着坐标轴进行平移变换\",{\"1\":{\"196\":1}}],[\"指定glsl版本和浮点数精度\",{\"1\":{\"190\":1}}],[\"指定其宽度或者高度值\",{\"1\":{\"169\":1}}],[\"闭包回收\",{\"0\":{\"128\":1}}],[\"闭包\",{\"0\":{\"127\":1}}],[\"词法分析\",{\"0\":{\"689\":1}}],[\"词法作用域就是指作用域是由代码中函数声明的位置来决定的\",{\"1\":{\"125\":1}}],[\"词法作用域\",{\"0\":{\"125\":1}}],[\"词法环境中b的值已经被设置成了2\",{\"1\":{\"122\":1}}],[\"然\",{\"1\":{\"419\":1}}],[\"然而\",{\"1\":{\"118\":1}}],[\"然后看根节点如果是元素节点\",{\"1\":{\"613\":1}}],[\"然后添加这些节点\",{\"1\":{\"597\":1}}],[\"然后为组件执行各个模块的\",{\"1\":{\"590\":1,\"591\":1}}],[\"然后为该请求选择或者创建一个渲染进程\",{\"1\":{\"134\":1}}],[\"然后执行vm\",{\"1\":{\"582\":1}}],[\"然后服务器会返回一个包\",{\"1\":{\"409\":1}}],[\"然后就可以通过交换电路将包发送到相应的端口了\",{\"1\":{\"392\":1}}],[\"然后由网络运营商向\",{\"1\":{\"426\":1}}],[\"然后由设备根据接收方\",{\"1\":{\"390\":1}}],[\"然后由phy\",{\"1\":{\"382\":1}}],[\"然后向mac\",{\"1\":{\"381\":1}}],[\"然后向其中写入初始状态\",{\"1\":{\"357\":1}}],[\"然后整个传递给ip\",{\"1\":{\"375\":1}}],[\"然后将这个\",{\"1\":{\"795\":1}}],[\"然后将上一个loader产生的结果或者资源文件传入进去\",{\"1\":{\"723\":1}}],[\"然后将自己插入到该位置之后的下一个位置\",{\"1\":{\"557\":1}}],[\"然后将数据发送到诸如\",{\"1\":{\"464\":1}}],[\"然后将控制流程交回应用程序\",{\"1\":{\"368\":1}}],[\"然后将每个方法转发给对应反射\",{\"1\":{\"289\":1}}],[\"然后根据消息的内容返回响应\",{\"1\":{\"345\":1}}],[\"然后解析器读取出消息取出ip\",{\"1\":{\"343\":1}}],[\"然后其ip\",{\"1\":{\"343\":1}}],[\"然后dns\",{\"1\":{\"342\":1}}],[\"然后在一定时间内再次打开该小程序\",{\"1\":{\"323\":1}}],[\"然后这个值被确定为本次生成器函数要返回的值\",{\"1\":{\"271\":1}}],[\"然后通过被诱导进了第三方网站\",{\"1\":{\"469\":1}}],[\"然后通过包末尾的\",{\"1\":{\"400\":1}}],[\"然后通过网卡将消息发送给dns\",{\"1\":{\"343\":1}}],[\"然后通过闭包返回迭代器\",{\"1\":{\"266\":1}}],[\"然后通过渲染管线输出阶段传递给片元着色器\",{\"1\":{\"236\":1}}],[\"然后\",{\"1\":{\"260\":1,\"388\":1}}],[\"然后进入\",{\"1\":{\"256\":1}}],[\"然后得到\",{\"1\":{\"253\":1}}],[\"然后从纹理中取样\",{\"1\":{\"199\":1}}],[\"然后设置其\",{\"1\":{\"175\":1}}],[\"然后触发其包裹层的\",{\"1\":{\"174\":1}}],[\"然后再次生成的\",{\"1\":{\"766\":1}}],[\"然后再将电信号转换成光信号\",{\"1\":{\"424\":1}}],[\"然后再重新转换成信号并发送出去的过程\",{\"1\":{\"392\":1}}],[\"然后再通过\",{\"1\":{\"260\":1}}],[\"然后再执行下一个宏任务\",{\"1\":{\"249\":1}}],[\"然后再执行js脚本\",{\"1\":{\"102\":1,\"103\":1,\"104\":1}}],[\"然后再构建dom树\",{\"1\":{\"102\":1,\"103\":1,\"104\":1}}],[\"然后放到已排序序列的末尾\",{\"1\":{\"54\":1}}],[\"然后排除不会对问题的整体复杂度产生较大影响的较低阶常数和系数\",{\"1\":{\"32\":1}}],[\"然后跳\",{\"1\":{\"23\":1}}],[\"第二个参数是一个\",{\"1\":{\"727\":1}}],[\"第二个参数叫做\",{\"1\":{\"282\":1}}],[\"第二种写法\",{\"1\":{\"705\":1}}],[\"第二次进入\",{\"1\":{\"635\":1}}],[\"第二次调用指针对象的next方法\",{\"1\":{\"265\":1}}],[\"第二件事是解析出开始标签的属性\",{\"1\":{\"606\":1}}],[\"第二步\",{\"1\":{\"758\":1}}],[\"第二步继续执行代码\",{\"1\":{\"122\":1}}],[\"第二步是调用addall函数\",{\"1\":{\"117\":1}}],[\"第三个不同\",{\"1\":{\"652\":1}}],[\"第三方插件进程\",{\"1\":{\"246\":1}}],[\"第三步\",{\"1\":{\"117\":1}}],[\"第四个分量表示贴图数组的层数\",{\"1\":{\"199\":1}}],[\"第一种写法\",{\"1\":{\"705\":1}}],[\"第一种是收到包时\",{\"1\":{\"393\":1}}],[\"第一件事是解析出开始标签名称\",{\"1\":{\"606\":1}}],[\"第一类是客户端和服务器相互联络时交换的控制信息\",{\"1\":{\"359\":1}}],[\"第一次执行完成\",{\"1\":{\"782\":1,\"783\":1}}],[\"第一次调用\",{\"1\":{\"271\":1}}],[\"第一次调用指针对象的next方法\",{\"1\":{\"265\":1}}],[\"第一次需要检查\",{\"1\":{\"49\":1}}],[\"第一个参数必须是\",{\"1\":{\"727\":1}}],[\"第一个参数叫做\",{\"1\":{\"282\":1}}],[\"第一个阶段\",{\"1\":{\"134\":1}}],[\"第一个节点\",{\"1\":{\"1\":1}}],[\"第一步是编译并创建执行上下文\",{\"1\":{\"122\":1}}],[\"第一步\",{\"1\":{\"117\":1,\"558\":1,\"758\":1}}],[\"函数和\",{\"1\":{\"748\":1}}],[\"函数和数据类型\",{\"1\":{\"209\":1}}],[\"函数字符串的过程\",{\"1\":{\"603\":1}}],[\"函数是编译生成的\",{\"1\":{\"584\":1}}],[\"函数是用户手写的\",{\"1\":{\"584\":1}}],[\"函数放入浏览器的异步任务队列中\",{\"1\":{\"568\":1}}],[\"函数可以进入浏览器的任务队列了\",{\"1\":{\"567\":1}}],[\"函数可视化\",{\"0\":{\"194\":1}}],[\"函数时\",{\"1\":{\"567\":1}}],[\"函数生成虚拟\",{\"1\":{\"563\":1}}],[\"函数了\",{\"1\":{\"558\":1}}],[\"函数负责调用\",{\"1\":{\"558\":1}}],[\"函数与构造函数参数验证\",{\"0\":{\"319\":1}}],[\"函数必须立即执行\",{\"1\":{\"280\":1}}],[\"函数必须对整个表达式求值才能确定要返回的值\",{\"1\":{\"271\":1}}],[\"函数作用域的状态会被保留\",{\"1\":{\"269\":1}}],[\"函数作用域就是在函数内部定义的变量或者函数\",{\"1\":{\"119\":1}}],[\"函数设置的\",{\"1\":{\"240\":1}}],[\"函数体\",{\"1\":{\"238\":1}}],[\"函数体内的代码会被编译\",{\"1\":{\"117\":1}}],[\"函数参数\",{\"1\":{\"238\":1}}],[\"函数名称前面加一个星号\",{\"1\":{\"268\":1}}],[\"函数名\",{\"1\":{\"238\":1}}],[\"函数返回值的类型\",{\"1\":{\"238\":1}}],[\"函数返回一个介于\",{\"1\":{\"190\":1}}],[\"函数调用不会造成\",{\"1\":{\"253\":1}}],[\"函数调用\",{\"1\":{\"221\":1}}],[\"函数在物体表面进行带有偏移量的纹理采样\",{\"1\":{\"199\":1}}],[\"函数在物体表面进行纹理采样\",{\"1\":{\"199\":1}}],[\"函数获取指定\",{\"1\":{\"199\":1}}],[\"函数获取纹理值\",{\"1\":{\"199\":2}}],[\"函数获取纹理采样器中具有特定坐标和级别的纹素值\",{\"1\":{\"199\":1}}],[\"函数获取从纹理坐标为\",{\"1\":{\"199\":2}}],[\"函数获取某个纹理的\",{\"1\":{\"199\":1}}],[\"函数从\",{\"1\":{\"199\":1}}],[\"函数计算立方体数组纹理的阴影值\",{\"1\":{\"199\":1}}],[\"函数计算立方体纹理的阴影值\",{\"1\":{\"199\":1}}],[\"函数计算两个\",{\"1\":{\"197\":3}}],[\"函数计算一个\",{\"1\":{\"197\":3}}],[\"函数计算一个矩阵的行列式值\",{\"1\":{\"196\":1}}],[\"函数检查值是否为正无穷或负无穷\",{\"1\":{\"195\":1}}],[\"函数检查值是否为\",{\"1\":{\"195\":1}}],[\"函数创建一个渐变效果\",{\"1\":{\"195\":1}}],[\"函数判断一个数是否在指定范围内\",{\"1\":{\"195\":1}}],[\"函数将法向量翻转到和出射矢量方向一致\",{\"1\":{\"197\":1}}],[\"函数将一个\",{\"1\":{\"197\":1}}],[\"函数将一个浮点数分解为整数部分和小数部分\",{\"1\":{\"195\":1}}],[\"函数将两个颜色进行混合\",{\"1\":{\"195\":1}}],[\"函数限制一个角度在\",{\"1\":{\"195\":1}}],[\"函数比较两个数的大小\",{\"1\":{\"195\":2}}],[\"函数的调用\",{\"1\":{\"313\":1}}],[\"函数的具体作用是\",{\"1\":{\"192\":1}}],[\"函数的作用是在\",{\"1\":{\"190\":1}}],[\"函数\",{\"0\":{\"749\":1},\"1\":{\"192\":1,\"200\":1,\"209\":1,\"287\":1,\"521\":1,\"555\":1,\"558\":1,\"567\":3,\"603\":2,\"670\":1,\"671\":1,\"744\":1,\"748\":3}}],[\"函数中的原因\",{\"1\":{\"253\":1}}],[\"函数中的\",{\"1\":{\"129\":1}}],[\"函数内部通过var声明的变量\",{\"1\":{\"122\":1}}],[\"函数内部定义的变量会被销毁\",{\"1\":{\"119\":1}}],[\"函数执行结束之后\",{\"1\":{\"117\":1,\"119\":1}}],[\"函数showname被执行\",{\"1\":{\"114\":1}}],[\"栈顶的元素\",{\"1\":{\"606\":1}}],[\"栈底是函数最外层的变量\",{\"1\":{\"122\":1}}],[\"栈溢出\",{\"0\":{\"117\":1},\"1\":{\"118\":1}}],[\"栈用来维护节点之间的父子关系\",{\"1\":{\"98\":1}}],[\"等配置\",{\"1\":{\"771\":1}}],[\"等等\",{\"1\":{\"710\":1}}],[\"等数据\",{\"1\":{\"603\":1}}],[\"等钩子函数\",{\"1\":{\"570\":1}}],[\"等判断来选择对应的浏览器任务队列\",{\"1\":{\"567\":1}}],[\"等都是在这里初始化的\",{\"1\":{\"544\":1}}],[\"等空对象吗\",{\"1\":{\"542\":1}}],[\"等操作\",{\"1\":{\"316\":1}}],[\"等待态\",{\"1\":{\"280\":1}}],[\"等价的generatorfn\",{\"1\":{\"272\":1}}],[\"等价的生成器方法\",{\"1\":{\"268\":1}}],[\"等价的生成器函数\",{\"1\":{\"268\":1}}],[\"等着\",{\"1\":{\"253\":1}}],[\"等级取样\",{\"1\":{\"199\":2}}],[\"等级\",{\"1\":{\"199\":5}}],[\"等于\",{\"1\":{\"195\":2,\"221\":1}}],[\"等\",{\"1\":{\"184\":2,\"238\":3,\"241\":1,\"247\":1,\"251\":1,\"263\":1,\"418\":1,\"464\":1}}],[\"等函数销毁后\",{\"1\":{\"128\":1}}],[\"等同于\",{\"1\":{\"115\":1,\"664\":1}}],[\"等全部下载后先把css生成cssom\",{\"1\":{\"102\":1,\"103\":1,\"104\":1}}],[\"会很耗流量\",{\"1\":{\"793\":1}}],[\"会等待上一是异步的\",{\"1\":{\"777\":1}}],[\"会等待回调被加入到队列中并立即执行回调\",{\"1\":{\"256\":1}}],[\"会同时执行次事件处理回调结束\",{\"1\":{\"777\":1}}],[\"会适时地触发相应钩子\",{\"1\":{\"776\":1}}],[\"会导致文件很大\",{\"1\":{\"764\":1}}],[\"会生成sourcemap\",{\"1\":{\"763\":1,\"765\":1,\"766\":1,\"767\":1,\"768\":1}}],[\"会进行一次从左到右的\",{\"1\":{\"749\":1}}],[\"会进入中继电路\",{\"1\":{\"390\":3}}],[\"会根据browerslist工具或者target属性自动配置\",{\"1\":{\"697\":1}}],[\"会根据响应头中的\",{\"1\":{\"134\":1}}],[\"会增加一个名为portal的原生element\",{\"1\":{\"683\":1}}],[\"会自动生成一个内联函数\",{\"1\":{\"678\":1}}],[\"会做静态提升\",{\"1\":{\"676\":1}}],[\"会通过\",{\"1\":{\"653\":1}}],[\"会通知事件触发线程\",{\"1\":{\"247\":1}}],[\"会赋值为\",{\"1\":{\"651\":1}}],[\"会重新渲染\",{\"1\":{\"642\":1}}],[\"会重新指定\",{\"1\":{\"609\":1}}],[\"会慢很多倍\",{\"1\":{\"624\":1}}],[\"会用正则等方式解析\",{\"1\":{\"603\":1}}],[\"会缓存不活动的组件实例\",{\"1\":{\"570\":1}}],[\"会被\",{\"1\":{\"738\":1}}],[\"会被再次置为\",{\"1\":{\"567\":1}}],[\"会被广播到整个网络中\",{\"1\":{\"390\":1}}],[\"会存入\",{\"1\":{\"558\":1}}],[\"会读取data的响应式数据\",{\"1\":{\"554\":1}}],[\"会执行\",{\"1\":{\"554\":1}}],[\"会将这次返回的结果作为下次事件的第一个参数\",{\"1\":{\"777\":1,\"781\":1}}],[\"会将编码名称等修改\",{\"1\":{\"757\":1}}],[\"会将\",{\"1\":{\"549\":1,\"610\":1}}],[\"会将其复制到网卡内的缓冲区中\",{\"1\":{\"381\":1}}],[\"会调用其他的功能初始话函数\",{\"1\":{\"543\":1}}],[\"会指定很多项目构建的相关配置\",{\"1\":{\"517\":1}}],[\"会返回false\",{\"1\":{\"294\":1}}],[\"会抛出\",{\"1\":{\"290\":1,\"303\":1}}],[\"会在网页中弹窗aaa\",{\"1\":{\"471\":1,\"473\":1}}],[\"会在网线中经过集线器等设备前进\",{\"1\":{\"386\":1}}],[\"会在将信号转换成数字信息后通过\",{\"1\":{\"390\":1}}],[\"会在暂停的时候将一个提供的错误注入到生成器对象中\",{\"1\":{\"274\":1}}],[\"会在每个\",{\"1\":{\"258\":1}}],[\"会在最后返回颜色值\",{\"1\":{\"209\":1}}],[\"会先\",{\"1\":{\"725\":1}}],[\"会先将数据存放到接收缓冲区中\",{\"1\":{\"366\":1}}],[\"会先将执行期间所产生的所有微任务都执行完再去进行渲染\",{\"1\":{\"250\":1}}],[\"会先去执行微任务\",{\"1\":{\"256\":1}}],[\"会有两件事发生\",{\"1\":{\"256\":1}}],[\"会遍历回调队列并同步执行\",{\"1\":{\"256\":1}}],[\"会清空\",{\"1\":{\"251\":1}}],[\"会产生两个匿名块将父元素分割开来\",{\"1\":{\"175\":1}}],[\"会发生以下两件事情\",{\"1\":{\"256\":1}}],[\"会发生合并\",{\"1\":{\"174\":1}}],[\"会发生重叠\",{\"1\":{\"174\":1}}],[\"会继承这个颜色值\",{\"1\":{\"152\":1}}],[\"会编译全局代码并创建全局执行上下文\",{\"1\":{\"117\":1}}],[\"会阻塞\",{\"1\":{\"108\":1}}],[\"会依赖\",{\"1\":{\"108\":1}}],[\"会依次压入栈中\",{\"1\":{\"98\":1}}],[\"执行runcli\",{\"1\":{\"771\":1}}],[\"执行此方法\",{\"1\":{\"665\":1}}],[\"执行vm组件的destroy方法进行销毁\",{\"1\":{\"663\":1}}],[\"执行state的修改操作\",{\"1\":{\"662\":1}}],[\"执行路由守卫\",{\"1\":{\"649\":1}}],[\"执行顺序\",{\"0\":{\"634\":1}}],[\"执行新节点所有的属性更新\",{\"1\":{\"596\":1}}],[\"执行组件的\",{\"1\":{\"596\":1}}],[\"执行组件的destory钩子函数\",{\"1\":{\"573\":1}}],[\"执行createcomponent方法\",{\"1\":{\"580\":5}}],[\"执行updatecomponent\",{\"1\":{\"580\":2}}],[\"执行初始化\",{\"1\":{\"575\":1}}],[\"执行实例化\",{\"1\":{\"559\":2}}],[\"执行期间被销毁\",{\"1\":{\"558\":1}}],[\"执行nexttick更新队列\",{\"1\":{\"556\":1}}],[\"执行方法后添加的属性\",{\"1\":{\"543\":1}}],[\"执行渲染watcher\",{\"1\":{\"580\":1}}],[\"执行渲染\",{\"0\":{\"505\":1}}],[\"执行撤销函数\",{\"1\":{\"291\":1}}],[\"执行会停止\",{\"1\":{\"269\":1}}],[\"执行迭代\",{\"1\":{\"265\":1}}],[\"执行完毕\",{\"1\":{\"258\":1}}],[\"执行完毕后\",{\"1\":{\"251\":1,\"256\":1}}],[\"执行完之后执行\",{\"1\":{\"258\":1}}],[\"执行完后\",{\"1\":{\"251\":1}}],[\"执行全局\",{\"1\":{\"251\":1}}],[\"执行上下文\",{\"1\":{\"117\":1}}],[\"执行过程中\",{\"1\":{\"114\":1}}],[\"执行\",{\"1\":{\"108\":1,\"256\":4,\"257\":1,\"258\":3,\"325\":1,\"558\":2,\"564\":1,\"568\":1,\"580\":2,\"588\":1,\"635\":1,\"646\":1,\"655\":2,\"725\":1,\"771\":1,\"772\":1}}],[\"栅格图像\",{\"1\":{\"107\":1}}],[\"栅格即像素\",{\"1\":{\"107\":1}}],[\"栅格化即将矢量图形转化为位图\",{\"1\":{\"107\":1}}],[\"栅格化是将矢量图形格式表示的图像转换成位图以用于显示器输出的过程\",{\"1\":{\"107\":1}}],[\"栅格化\",{\"0\":{\"107\":1}}],[\"栅格化线程会把图片\",{\"1\":{\"97\":1,\"104\":1,\"105\":1}}],[\"图片格式选择\",{\"0\":{\"514\":1}}],[\"图片优化\",{\"0\":{\"512\":1}}],[\"图文信息组\",{\"1\":{\"185\":1}}],[\"图文信息组标题figure\",{\"1\":{\"185\":1}}],[\"图块渲染也称基于瓦片渲染或基于小方块渲染\",{\"1\":{\"106\":1}}],[\"图块\",{\"0\":{\"106\":1}}],[\"图中垂直线代表输入数组\",{\"1\":{\"13\":1}}],[\"`let\",{\"1\":{\"689\":1}}],[\"`failed\",{\"1\":{\"653\":1}}],[\"`filters`\",{\"1\":{\"542\":1}}],[\"`named\",{\"1\":{\"650\":1}}],[\"`new`\",{\"1\":{\"543\":1}}],[\"`require`\",{\"1\":{\"653\":1}}],[\"`resolve`\",{\"1\":{\"653\":1}}],[\"`render`\",{\"1\":{\"583\":1}}],[\"`route\",{\"1\":{\"650\":1}}],[\"`state\",{\"1\":{\"664\":1}}],[\"`style`\",{\"1\":{\"630\":1}}],[\"`setting\",{\"1\":{\"316\":1}}],[\"`export\",{\"1\":{\"626\":2,\"630\":4}}],[\"`el`\",{\"1\":{\"540\":1}}],[\"`this`\",{\"1\":{\"648\":3,\"664\":1}}],[\"`template`\",{\"1\":{\"626\":1}}],[\"`transition`\",{\"1\":{\"543\":1}}],[\"`transition`和\",{\"1\":{\"540\":1}}],[\"`transitiongroup`\",{\"1\":{\"540\":1,\"543\":1}}],[\"`import\",{\"1\":{\"625\":1,\"637\":1,\"699\":1}}],[\"`invalid\",{\"1\":{\"585\":1}}],[\"`with\",{\"1\":{\"615\":1}}],[\"`^<$\",{\"1\":{\"607\":1}}],[\"`options`\",{\"1\":{\"585\":1}}],[\"`promise`\",{\"1\":{\"653\":1}}],[\"`props`\",{\"1\":{\"544\":1}}],[\"`popstate`\",{\"1\":{\"646\":1}}],[\"`patch`\",{\"1\":{\"540\":1}}],[\"`do\",{\"1\":{\"663\":1}}],[\"`data\",{\"1\":{\"627\":1,\"631\":1}}],[\"`data`\",{\"1\":{\"544\":1}}],[\"`directives`\",{\"1\":{\"542\":1}}],[\"`$\",{\"1\":{\"548\":1,\"626\":1,\"647\":1,\"720\":1}}],[\"`$children`的值\",{\"1\":{\"544\":1}}],[\"`$parent`\",{\"1\":{\"544\":1}}],[\"`$event`\",{\"1\":{\"534\":1}}],[\"`keepalive`\",{\"1\":{\"542\":1,\"543\":1}}],[\"`callback\",{\"1\":{\"555\":1,\"559\":1,\"565\":1,\"670\":2}}],[\"`computed`\",{\"1\":{\"544\":1}}],[\"`components`\",{\"1\":{\"542\":1}}],[\"`create`\",{\"1\":{\"544\":1}}],[\"`ctx\",{\"1\":{\"104\":5}}],[\"`mount`\",{\"1\":{\"540\":1}}],[\"`update\",{\"1\":{\"534\":2}}],[\"`user`\",{\"1\":{\"299\":1}}],[\"`vm`\",{\"1\":{\"648\":1}}],[\"`var\",{\"1\":{\"625\":1}}],[\"`vue\",{\"1\":{\"542\":4,\"544\":3,\"585\":1}}],[\"`v\",{\"1\":{\"532\":1,\"540\":2,\"543\":2,\"571\":2}}],[\"`getter\",{\"1\":{\"521\":1,\"565\":1,\"670\":1}}],[\"`getting\",{\"1\":{\"316\":1}}],[\"``\",{\"1\":{\"158\":1,\"625\":1,\"629\":5}}],[\"`\",{\"1\":{\"104\":5,\"264\":2,\"316\":2,\"521\":1,\"528\":2,\"534\":6,\"543\":2,\"544\":2,\"551\":1,\"553\":1,\"555\":1,\"559\":1,\"565\":2,\"573\":2,\"585\":4,\"607\":3,\"611\":2,\"615\":9,\"625\":6,\"626\":4,\"627\":1,\"629\":6,\"630\":4,\"631\":1,\"635\":1,\"637\":1,\"638\":2,\"647\":1,\"650\":1,\"653\":1,\"663\":3,\"670\":5,\"718\":2,\"720\":1,\"795\":2}}],[\"绘制\",{\"0\":{\"104\":1},\"1\":{\"246\":1,\"249\":1}}],[\"绘制页面\",{\"1\":{\"102\":1,\"103\":1,\"104\":1}}],[\"裁剪平面是由\",{\"1\":{\"240\":1}}],[\"裁剪\",{\"1\":{\"103\":1}}],[\"透明\",{\"1\":{\"103\":1}}],[\"滤镜\",{\"1\":{\"103\":1}}],[\"绝对定位和固定定位\",{\"1\":{\"103\":1}}],[\"构建流程中\",{\"1\":{\"734\":1}}],[\"构建module树\",{\"1\":{\"660\":1}}],[\"构建脚本\",{\"1\":{\"517\":2}}],[\"构建布局树\",{\"0\":{\"101\":1},\"1\":{\"102\":1,\"103\":1,\"104\":1}}],[\"构造一个\",{\"1\":{\"656\":1}}],[\"构造\",{\"1\":{\"221\":1,\"611\":2}}],[\"构造函数重载\",{\"1\":{\"77\":1}}],[\"构造函数\",{\"0\":{\"82\":1},\"1\":{\"76\":1,\"77\":1,\"263\":2,\"280\":1,\"314\":1,\"543\":1}}],[\"标示当前位置\",{\"1\":{\"690\":1}}],[\"标记\",{\"1\":{\"670\":1}}],[\"标记静态根节点\",{\"1\":{\"612\":1}}],[\"标记静态节点\",{\"1\":{\"612\":1}}],[\"标志是否为自闭合标签\",{\"1\":{\"608\":1}}],[\"标量或矢量\",{\"1\":{\"198\":3}}],[\"标题组\",{\"1\":{\"185\":1}}],[\"标识当前从何处开始解析模板字符串\",{\"1\":{\"606\":1}}],[\"标识生成器函数的星号不受两侧空格的影响\",{\"1\":{\"268\":1}}],[\"标识正负\",{\"1\":{\"164\":1}}],[\"标识符可以在类\",{\"1\":{\"66\":1}}],[\"标识符可以由字母\",{\"1\":{\"66\":1}}],[\"标识符的作用域是指它们在代码中的可见性\",{\"1\":{\"66\":1}}],[\"标识符的命名应该遵循以下规则\",{\"1\":{\"66\":1}}],[\"标识符必须以字母\",{\"1\":{\"66\":1}}],[\"标识符是用于表示变量\",{\"1\":{\"66\":1}}],[\"标识符\",{\"0\":{\"66\":1},\"1\":{\"688\":1}}],[\"标准为属性定义的文本值\",{\"1\":{\"159\":1}}],[\"标签判断是否有scoped\",{\"1\":{\"625\":1}}],[\"标签有\",{\"1\":{\"619\":1}}],[\"标签名必须是平台保留标签\",{\"1\":{\"613\":1}}],[\"标签处理\",{\"1\":{\"606\":1}}],[\"标签的情况\",{\"1\":{\"589\":1}}],[\"标签相同\",{\"1\":{\"589\":1}}],[\"标签和\",{\"1\":{\"99\":1}}],[\"标签\",{\"1\":{\"99\":1,\"613\":1}}],[\"此外\",{\"1\":{\"803\":1}}],[\"此处为根实例\",{\"1\":{\"642\":1}}],[\"此处即为object\",{\"1\":{\"309\":1}}],[\"此处设置了foo属性不可配置且不可改写\",{\"1\":{\"290\":1}}],[\"此线程就会执行\",{\"1\":{\"247\":1}}],[\"此元素将会获得一个独立的渲染区域\",{\"1\":{\"177\":1}}],[\"此开始标签出栈\",{\"1\":{\"98\":1}}],[\"此时如果lastindex\",{\"1\":{\"611\":1}}],[\"此时小程序还可以短暂运行一小段时间\",{\"1\":{\"324\":1}}],[\"此时小程序处于\",{\"1\":{\"324\":1}}],[\"此时小程序并未被销毁\",{\"1\":{\"323\":1}}],[\"此时小程序需要重新加载启动\",{\"1\":{\"323\":1}}],[\"此时的\",{\"1\":{\"269\":1}}],[\"此时\",{\"1\":{\"59\":2,\"251\":1,\"386\":1}}],[\"此时对应节点\",{\"1\":{\"1\":1}}],[\"节点本身必须是静态节点\",{\"1\":{\"614\":1}}],[\"节点的所有属性的\",{\"1\":{\"613\":1}}],[\"节点的样式保存在了\",{\"1\":{\"100\":1}}],[\"节点的样式\",{\"0\":{\"100\":1},\"1\":{\"97\":1,\"100\":1}}],[\"节点类型\",{\"1\":{\"613\":1}}],[\"节点插入到父节点内\",{\"1\":{\"590\":1}}],[\"节点是组件\",{\"1\":{\"585\":1}}],[\"节点\",{\"1\":{\"517\":1,\"584\":1,\"588\":1}}],[\"节点在垂直方向上以不同形式对齐\",{\"1\":{\"175\":1}}],[\"节点无法声明宽高\",{\"1\":{\"175\":1}}],[\"节点并添加到父节点的\",{\"1\":{\"98\":1}}],[\"字符串等等资源都要存放在这个目录下\",{\"1\":{\"517\":1}}],[\"字符串\",{\"1\":{\"263\":1,\"603\":1,\"801\":1}}],[\"字符串转\",{\"1\":{\"98\":1}}],[\"字符串转换成\",{\"1\":{\"98\":1}}],[\"字节的\",{\"1\":{\"803\":1}}],[\"字节\",{\"1\":{\"230\":5,\"803\":6}}],[\"字节流转换为\",{\"1\":{\"134\":1}}],[\"字母\",{\"1\":{\"158\":1}}],[\"字段将\",{\"1\":{\"528\":1}}],[\"字段表示包的有效期\",{\"1\":{\"403\":1}}],[\"字段来判断文件的类型\",{\"1\":{\"134\":1}}],[\"字段通常用于存储对象的状态\",{\"1\":{\"78\":1}}],[\"字段通常在类或结构的主体内声明\",{\"1\":{\"78\":1}}],[\"字段也可以声明为静态字段\",{\"1\":{\"78\":1}}],[\"字段可以在声明时初始化\",{\"1\":{\"78\":1}}],[\"字段可以是公开的\",{\"1\":{\"78\":1}}],[\"字段\",{\"0\":{\"78\":1},\"1\":{\"76\":1,\"77\":1,\"78\":2,\"79\":2,\"403\":1}}],[\"字段信息等\",{\"1\":{\"70\":1}}],[\"把eval的sourceurl换为完整sourcemap信息的dataurl\",{\"1\":{\"763\":1}}],[\"把变量exp改成\",{\"1\":{\"611\":1}}],[\"把处理的指令\",{\"1\":{\"534\":1}}],[\"把当前的\",{\"1\":{\"523\":1}}],[\"把代码改坏\",{\"1\":{\"483\":1}}],[\"把代理`user`实例改为代理\",{\"1\":{\"299\":1}}],[\"把代理user实例改为代理\",{\"1\":{\"299\":1}}],[\"把实现相应捕获器的某个对象代理放到应用中\",{\"1\":{\"316\":1}}],[\"把事件放入到\",{\"1\":{\"247\":1}}],[\"把所有的命令复制到\",{\"1\":{\"209\":1}}],[\"把颜色向量转化为\",{\"1\":{\"190\":1}}],[\"把内容替换成图片\",{\"1\":{\"187\":1}}],[\"把\",{\"1\":{\"98\":1,\"550\":1,\"627\":1}}],[\"把绘制步骤交给渲染进程中的合成线程进行合成\",{\"1\":{\"97\":1}}],[\"把比基准值小的摆放在基准前面\",{\"1\":{\"58\":1}}],[\"树并插入到\",{\"1\":{\"588\":1}}],[\"树\",{\"0\":{\"98\":1},\"1\":{\"590\":1}}],[\"树创建布局树\",{\"1\":{\"97\":1}}],[\"树型结构\",{\"1\":{\"97\":1}}],[\"渲染watcher\",{\"1\":{\"580\":1}}],[\"渲染和执行被包裹组件的钩子函数需要用到\",{\"1\":{\"573\":1}}],[\"渲染事件\",{\"1\":{\"249\":1}}],[\"渲染\",{\"1\":{\"247\":1,\"558\":1,\"559\":1}}],[\"渲染线程的渲染\",{\"1\":{\"249\":1}}],[\"渲染线程互斥\",{\"1\":{\"247\":1}}],[\"渲染线程\",{\"1\":{\"247\":1}}],[\"渲染管线中的状态和数据\",{\"1\":{\"238\":1}}],[\"渲染管线输出阶段提供这些变量的值\",{\"1\":{\"236\":1}}],[\"渲染原理之一\",{\"1\":{\"174\":1}}],[\"渲染引擎需要为某些节点生成单独的图层\",{\"1\":{\"103\":1}}],[\"渲染引擎会把\",{\"1\":{\"99\":1}}],[\"渲染过程\",{\"0\":{\"97\":1}}],[\"渲染进程就是我们说的浏览器内核\",{\"1\":{\"246\":1}}],[\"渲染进程准备好之后\",{\"1\":{\"134\":1}}],[\"渲染进程把html转变为dom树型结构\",{\"1\":{\"102\":1,\"103\":1,\"104\":1}}],[\"渲染进程把\",{\"1\":{\"97\":2,\"99\":1}}],[\"渲染进程开始html解析和加载子资源\",{\"1\":{\"102\":1,\"103\":1,\"104\":1}}],[\"渲染进程开始\",{\"1\":{\"96\":1}}],[\"渲染进程开始从网络进程接收html数据\",{\"1\":{\"102\":1,\"103\":1,\"104\":1}}],[\"渲染进程开始从网络进程接收\",{\"1\":{\"96\":1}}],[\"渲染进程\",{\"0\":{\"247\":1},\"1\":{\"95\":1,\"102\":1,\"103\":1,\"104\":1}}],[\"解决\",{\"1\":{\"282\":3}}],[\"解决程序是一个抽象操作\",{\"1\":{\"282\":1}}],[\"解决程序\",{\"1\":{\"281\":1}}],[\"解决态\",{\"1\":{\"280\":1}}],[\"解析阶段\",{\"1\":{\"707\":1}}],[\"解析阶段就被拒之门外了\",{\"1\":{\"133\":1}}],[\"解析过程\",{\"0\":{\"687\":1}}],[\"解析异步组件\",{\"1\":{\"651\":1,\"653\":1}}],[\"解析游标\",{\"1\":{\"606\":1}}],[\"解析对象的\",{\"1\":{\"546\":1}}],[\"解析url\",{\"0\":{\"333\":1}}],[\"解析后的代码\",{\"1\":{\"255\":1}}],[\"解析\",{\"0\":{\"111\":1,\"605\":1},\"1\":{\"98\":1,\"108\":2,\"249\":1}}],[\"解析器调用协议栈后\",{\"1\":{\"343\":1}}],[\"解析器的内部原理\",{\"0\":{\"343\":1}}],[\"解析器会根据dns\",{\"1\":{\"343\":1}}],[\"解析器会生成要发送给dns\",{\"1\":{\"343\":1}}],[\"解析器会取出ip地址\",{\"1\":{\"342\":1}}],[\"解析器会向dns\",{\"1\":{\"342\":1}}],[\"解析器实际上是一段程序\",{\"1\":{\"341\":1}}],[\"解析器并不是等整个文档加载完成之后再解析的\",{\"1\":{\"134\":1}}],[\"解析器\",{\"1\":{\"134\":3,\"330\":1,\"603\":1}}],[\"解析器便解析多少数据\",{\"1\":{\"102\":1,\"103\":1,\"104\":1,\"134\":1}}],[\"解析器边接收网络数据边解析\",{\"1\":{\"98\":1}}],[\"解析器可以把\",{\"1\":{\"98\":1}}],[\"解析完毕和加载子资源页面加载完成后会通知主进程页面加载完成\",{\"1\":{\"96\":1}}],[\"解析和加载子资源\",{\"1\":{\"96\":1}}],[\"解释\",{\"1\":{\"9\":1,\"13\":1,\"23\":1}}],[\"请参见\",{\"1\":{\"713\":2}}],[\"请告诉我www\",{\"1\":{\"343\":1}}],[\"请设置coord\",{\"1\":{\"199\":2}}],[\"请求与\",{\"1\":{\"798\":1}}],[\"请求完成\",{\"1\":{\"798\":1}}],[\"请求加载\",{\"1\":{\"653\":1}}],[\"请求合并\",{\"0\":{\"502\":1}}],[\"请求中插入特定的参数来发起攻击\",{\"1\":{\"476\":1}}],[\"请求息中包含的内容是\",{\"1\":{\"335\":1}}],[\"请求消息交给协议栈\",{\"0\":{\"362\":1}}],[\"请求消息的过程类似\",{\"1\":{\"343\":1}}],[\"请求消息\",{\"1\":{\"330\":1,\"336\":1}}],[\"请求线程\",{\"1\":{\"247\":1}}],[\"请求\",{\"1\":{\"96\":1,\"247\":1,\"801\":1}}],[\"请你找出并返回这两个正序数组的\",{\"1\":{\"9\":1}}],[\"请你找出给定目标值在数组中的开始位置和结束位置\",{\"1\":{\"8\":1}}],[\"转成大多数浏览器认识的css\",{\"1\":{\"755\":1}}],[\"转成一个字符串模板\",{\"1\":{\"603\":1}}],[\"转化\",{\"1\":{\"635\":1}}],[\"转化成\",{\"1\":{\"603\":1}}],[\"转化成驼峰式命名\",{\"1\":{\"547\":1}}],[\"转化为0~1范围内的值\",{\"1\":{\"190\":1}}],[\"转化为位图\",{\"1\":{\"97\":1,\"104\":1,\"105\":1}}],[\"转发模块会根据接收到的包的\",{\"1\":{\"398\":1}}],[\"转发设备的位置\",{\"1\":{\"374\":1}}],[\"转发给网络进程\",{\"1\":{\"96\":1}}],[\"转换前的具体代码信息\",{\"1\":{\"759\":1}}],[\"转换前的变量和属性名称\",{\"1\":{\"759\":1}}],[\"转换阶段\",{\"1\":{\"707\":1}}],[\"转换箭头函数\",{\"1\":{\"694\":1,\"702\":1}}],[\"转换结果\",{\"1\":{\"619\":1}}],[\"转换成渲染函数\",{\"1\":{\"603\":1}}],[\"转换成二维纹理坐标\",{\"1\":{\"199\":2}}],[\"转换数据\",{\"1\":{\"464\":1}}],[\"转换为render函数\",{\"1\":{\"627\":1}}],[\"转换为\",{\"1\":{\"99\":1}}],[\"转义字符\",{\"1\":{\"158\":2}}],[\"转\",{\"0\":{\"98\":1,\"99\":1}}],[\"转变为\",{\"1\":{\"97\":1}}],[\"转变成网页\",{\"1\":{\"95\":1}}],[\"uyz5ilzeowuwdxjnlb7e=\",{\"1\":{\"800\":1,\"801\":1}}],[\"uc\",{\"1\":{\"710\":1}}],[\"ucolor\",{\"1\":{\"243\":1}}],[\"uglifyjs\",{\"0\":{\"487\":1}}],[\"uri\",{\"1\":{\"330\":1,\"335\":1}}],[\"url\",{\"0\":{\"332\":1},\"1\":{\"96\":3,\"161\":1,\"330\":1,\"333\":1,\"646\":6,\"651\":1,\"655\":1,\"713\":1}}],[\"uid++\",{\"1\":{\"544\":1,\"564\":1}}],[\"uid\",{\"1\":{\"544\":4,\"565\":1}}],[\"ui\",{\"1\":{\"249\":1}}],[\"uintbitstofloat\",{\"1\":{\"195\":3}}],[\"uint\",{\"1\":{\"193\":2,\"195\":4,\"230\":4,\"240\":2}}],[\"uzspeed\",{\"1\":{\"243\":2}}],[\"uxspeed\",{\"1\":{\"243\":2}}],[\"uxzscale+utime\",{\"1\":{\"243\":1}}],[\"uxzscale\",{\"1\":{\"243\":1}}],[\"uwaresfrequency+utime\",{\"1\":{\"243\":1}}],[\"uwaresfrequency\",{\"1\":{\"243\":2}}],[\"ufrequency\",{\"1\":{\"243\":3}}],[\"utf8\",{\"1\":{\"455\":4}}],[\"utils\",{\"1\":{\"540\":1,\"631\":1,\"635\":1,\"729\":2,\"730\":3}}],[\"util\",{\"1\":{\"455\":5,\"540\":1,\"542\":2,\"642\":1}}],[\"utilization\",{\"1\":{\"434\":2}}],[\"utim\",{\"1\":{\"243\":1}}],[\"utime\",{\"1\":{\"202\":2,\"206\":9,\"243\":1}}],[\"utexturematrix\",{\"1\":{\"239\":2}}],[\"umodelviewprojectionmatrix\",{\"1\":{\"239\":2}}],[\"umodelviewmatrix\",{\"1\":{\"239\":4}}],[\"upgrade\",{\"1\":{\"799\":4,\"800\":2}}],[\"up\",{\"1\":{\"565\":1,\"606\":1,\"642\":2}}],[\"updateroute\",{\"1\":{\"649\":2,\"651\":1}}],[\"updatechildren\",{\"0\":{\"597\":1},\"1\":{\"596\":1,\"597\":1}}],[\"updatecomponent\",{\"1\":{\"558\":1,\"559\":1,\"566\":7,\"582\":3}}],[\"updatedqueue\",{\"1\":{\"558\":2}}],[\"updated\",{\"1\":{\"558\":2,\"573\":1,\"586\":3,\"646\":1,\"651\":2,\"652\":3,\"654\":2}}],[\"updatedirectives\",{\"1\":{\"535\":5}}],[\"update即watcher\",{\"1\":{\"556\":1}}],[\"updates\",{\"1\":{\"551\":1,\"586\":1}}],[\"update\",{\"0\":{\"586\":1},\"1\":{\"524\":2,\"532\":3,\"534\":2,\"535\":5,\"543\":2,\"546\":1,\"547\":1,\"554\":1,\"556\":3,\"557\":3,\"559\":1,\"564\":1,\"565\":1,\"566\":2,\"573\":1,\"582\":2,\"586\":4,\"595\":1,\"596\":3,\"651\":1,\"671\":1,\"801\":1}}],[\"updatelayouttree\",{\"1\":{\"102\":3,\"103\":4,\"104\":4}}],[\"updating\",{\"1\":{\"327\":1}}],[\"uprojectionmatrix\",{\"1\":{\"239\":6}}],[\"uvcolor\",{\"1\":{\"206\":2}}],[\"uvw\",{\"1\":{\"199\":4}}],[\"uv\",{\"1\":{\"199\":12,\"200\":5,\"206\":5,\"215\":4,\"216\":4,\"217\":4,\"218\":33,\"224\":3,\"225\":6,\"243\":5}}],[\"uvec4\",{\"1\":{\"193\":1,\"231\":4}}],[\"uvec3\",{\"1\":{\"193\":1,\"231\":2}}],[\"uvec2\",{\"1\":{\"193\":3,\"231\":2}}],[\"u\",{\"1\":{\"190\":11,\"193\":2,\"200\":6,\"206\":12,\"209\":1,\"210\":2,\"211\":4,\"215\":5,\"216\":4,\"217\":4,\"224\":6,\"225\":4,\"226\":10,\"227\":4,\"237\":5,\"239\":21,\"240\":2,\"243\":7}}],[\"ul>\",{\"1\":{\"635\":6}}],[\"ul\",{\"1\":{\"185\":1,\"635\":2}}],[\"unmask\",{\"1\":{\"804\":1}}],[\"unsupported\",{\"1\":{\"709\":1}}],[\"unsubscribe\",{\"1\":{\"662\":1}}],[\"unshift\",{\"1\":{\"562\":2}}],[\"uncaught\",{\"1\":{\"651\":1}}],[\"unreleased\",{\"1\":{\"713\":2}}],[\"unregistration\",{\"1\":{\"642\":1,\"656\":1}}],[\"unref\",{\"1\":{\"452\":1}}],[\"unaryslash\",{\"1\":{\"607\":1,\"608\":3}}],[\"unary\",{\"1\":{\"604\":1,\"608\":3,\"609\":2}}],[\"unknown\",{\"1\":{\"584\":1}}],[\"unlisted\",{\"1\":{\"584\":1}}],[\"unlike\",{\"1\":{\"575\":1}}],[\"unless\",{\"1\":{\"542\":1}}],[\"until\",{\"1\":{\"573\":1,\"651\":1,\"653\":1,\"655\":1}}],[\"untitled\",{\"1\":{\"227\":1,\"330\":1,\"332\":1,\"333\":2,\"335\":2,\"336\":3,\"337\":1,\"339\":3,\"342\":1,\"343\":1,\"345\":1,\"346\":2,\"349\":1,\"350\":1,\"355\":1,\"356\":1,\"357\":1,\"359\":1,\"363\":1,\"364\":3,\"366\":2,\"370\":1,\"372\":1,\"374\":3,\"375\":1,\"376\":1,\"379\":1,\"380\":1,\"381\":3,\"382\":1}}],[\"unwatchfn\",{\"1\":{\"555\":1,\"670\":1}}],[\"unbinddirectives\",{\"1\":{\"535\":1}}],[\"unbind\",{\"1\":{\"532\":2,\"535\":2}}],[\"unoisespeed\",{\"1\":{\"243\":2}}],[\"unoisescale\",{\"1\":{\"243\":2}}],[\"unoisefrequency+utime\",{\"1\":{\"243\":1}}],[\"unoisefrequency\",{\"1\":{\"243\":1}}],[\"unormalmatrix\",{\"1\":{\"239\":4}}],[\"unifyobjectstyle\",{\"1\":{\"661\":1,\"662\":1}}],[\"uniforms\",{\"0\":{\"237\":1},\"1\":{\"237\":6}}],[\"uniform\",{\"0\":{\"210\":1},\"1\":{\"190\":8,\"199\":21,\"202\":2,\"206\":8,\"209\":1,\"210\":3,\"211\":3,\"215\":2,\"216\":2,\"217\":2,\"218\":3,\"224\":4,\"225\":6,\"226\":6,\"227\":3,\"235\":6,\"236\":4,\"237\":1,\"239\":28,\"240\":2,\"243\":13}}],[\"uniapp进行打包将打包好的文件复制到\",{\"1\":{\"517\":1}}],[\"uniapp\",{\"0\":{\"818\":1},\"1\":{\"517\":1},\"2\":{\"518\":1}}],[\"unit\",{\"1\":{\"482\":1,\"517\":1}}],[\"unix\",{\"1\":{\"455\":1}}],[\"unicode\",{\"1\":{\"158\":1}}],[\"underscores\",{\"1\":{\"140\":2,\"141\":1}}],[\"undefined>\",{\"1\":{\"563\":1}}],[\"undefined\",{\"1\":{\"129\":1,\"263\":2,\"265\":5,\"266\":2,\"269\":2,\"274\":3,\"278\":1,\"287\":2,\"299\":1,\"302\":2,\"303\":1,\"306\":2,\"313\":1,\"317\":3,\"319\":1,\"521\":1,\"540\":1,\"561\":1,\"565\":4,\"566\":3,\"567\":1,\"568\":3,\"573\":2,\"581\":1,\"582\":1,\"584\":5,\"585\":5,\"588\":3,\"589\":3,\"591\":1,\"597\":1,\"602\":1,\"607\":5,\"608\":3,\"610\":1,\"612\":1,\"615\":1,\"642\":2,\"644\":2,\"653\":1,\"656\":1,\"660\":2,\"777\":2,\"780\":1,\"781\":1}}],[\"us\",{\"1\":{\"713\":2}}],[\"usage\",{\"1\":{\"699\":2}}],[\"usr\",{\"1\":{\"517\":1}}],[\"uscale\",{\"1\":{\"243\":5}}],[\"usebuiltins\",{\"1\":{\"699\":2}}],[\"uses\",{\"1\":{\"588\":1,\"626\":1}}],[\"usedevtools\",{\"1\":{\"660\":2}}],[\"used\",{\"1\":{\"542\":1,\"586\":1,\"590\":3,\"597\":1,\"626\":1,\"653\":1,\"656\":1}}],[\"user时\",{\"1\":{\"555\":1}}],[\"userdef\",{\"1\":{\"521\":13,\"554\":12}}],[\"userlist\",{\"1\":{\"320\":5}}],[\"userclassproxy\",{\"1\":{\"299\":2}}],[\"userinstanceproxy\",{\"1\":{\"299\":2}}],[\"userid\",{\"1\":{\"299\":4}}],[\"user\",{\"1\":{\"299\":8,\"316\":2,\"319\":4,\"320\":5,\"521\":1,\"555\":2,\"558\":2,\"559\":1,\"565\":6,\"646\":1,\"663\":1,\"670\":6}}],[\"use\",{\"0\":{\"434\":1,\"659\":1},\"1\":{\"139\":1,\"140\":1,\"141\":2,\"542\":1,\"543\":1,\"626\":1,\"637\":3,\"641\":1,\"642\":1,\"656\":1,\"658\":1,\"659\":1,\"663\":1,\"699\":1,\"703\":1,\"704\":1,\"705\":1,\"718\":3,\"723\":1,\"724\":1,\"726\":1,\"729\":1,\"730\":1,\"745\":1,\"746\":1,\"749\":1,\"754\":1,\"755\":6,\"793\":2,\"795\":1}}],[\"using指令是c\",{\"1\":{\"75\":1}}],[\"using指令\",{\"0\":{\"75\":1}}],[\"using\",{\"1\":{\"64\":1,\"75\":2,\"77\":1,\"82\":1,\"89\":1,\"190\":1,\"551\":1,\"653\":1}}],[\"效果\",{\"1\":{\"95\":1}}],[\"引入webpack目的\",{\"1\":{\"771\":1}}],[\"引入的文件\",{\"1\":{\"720\":1}}],[\"引用的目标对象上的字符串键属性\",{\"1\":{\"302\":1,\"305\":1,\"306\":1}}],[\"引用同一个对象\",{\"1\":{\"282\":1}}],[\"引用闭包的函数是个局部变量\",{\"1\":{\"128\":1}}],[\"引擎中完整的能力\",{\"1\":{\"734\":1}}],[\"引擎中的事件循环分为\",{\"1\":{\"256\":1}}],[\"引擎再将结果返回给用户\",{\"1\":{\"255\":1}}],[\"引擎\",{\"1\":{\"255\":1}}],[\"引擎解析\",{\"1\":{\"255\":1}}],[\"引擎内部创建一个微任务队列\",{\"1\":{\"250\":1}}],[\"引擎控制的\",{\"1\":{\"250\":1}}],[\"引擎计时\",{\"1\":{\"247\":1}}],[\"引擎所有的执行队列中\",{\"1\":{\"247\":1}}],[\"引擎线程\",{\"1\":{\"247\":2}}],[\"引擎互斥\",{\"1\":{\"247\":1}}],[\"引擎的垃圾回收器就会回收这块内存\",{\"1\":{\"128\":1}}],[\"引擎执行垃圾回收时\",{\"1\":{\"128\":1}}],[\"引擎运行在该进程中\",{\"1\":{\"95\":1}}],[\"引发事件的方法\",{\"1\":{\"77\":1}}],[\"排除先前查询选择的浏览器\",{\"1\":{\"713\":1}}],[\"排版引擎和\",{\"1\":{\"95\":1}}],[\"排序以后在刷新队列期间新进来的\",{\"1\":{\"558\":1}}],[\"排序序列\",{\"1\":{\"56\":1}}],[\"排序方式\",{\"1\":{\"56\":1,\"57\":1}}],[\"排序算法\",{\"0\":{\"52\":1}}],[\"浏览器通过\",{\"1\":{\"798\":1}}],[\"浏览器加载的文件\",{\"1\":{\"759\":1}}],[\"浏览器版本\",{\"1\":{\"713\":1}}],[\"浏览器不认识这些特性就可以使用polyfill来填充或者说打一个补丁\",{\"1\":{\"699\":1}}],[\"浏览器会使用socket\",{\"1\":{\"342\":1}}],[\"浏览器确定了web\",{\"1\":{\"336\":1}}],[\"浏览器生成信息\",{\"0\":{\"330\":1}}],[\"浏览器端的处理过程如下\",{\"1\":{\"258\":1}}],[\"浏览器端运行结果\",{\"1\":{\"258\":1}}],[\"浏览器环境下\",{\"1\":{\"258\":1}}],[\"浏览器有一个单独的线程处理\",{\"1\":{\"247\":1}}],[\"浏览器界面显示\",{\"1\":{\"246\":1}}],[\"浏览器是多进程的\",{\"1\":{\"246\":1}}],[\"浏览器进程\",{\"0\":{\"246\":1}}],[\"浏览器兼容性\",{\"1\":{\"147\":1}}],[\"浏览器的\",{\"0\":{\"251\":1}}],[\"浏览器的页面\",{\"0\":{\"130\":1}}],[\"浏览器的工作原理\",{\"0\":{\"110\":1}}],[\"浏览器\",{\"1\":{\"126\":1,\"330\":1,\"355\":1,\"358\":1,\"713\":1}}],[\"浏览器查看调用栈\",{\"0\":{\"118\":1}}],[\"浏览器工作原理与实践\",{\"1\":{\"113\":1}}],[\"浏览器中的\",{\"1\":{\"98\":1}}],[\"浏览器主进程然后会从\",{\"1\":{\"97\":1,\"105\":1}}],[\"浏览器主进程\",{\"1\":{\"95\":1,\"102\":1,\"103\":1,\"104\":1,\"246\":1}}],[\"浏览器渲染过程\",{\"0\":{\"93\":1}}],[\"用浏览器里发起\",{\"1\":{\"801\":1}}],[\"用以在网页浏览器和服务器建立一个\",{\"1\":{\"796\":1}}],[\"用法\",{\"0\":{\"618\":1}}],[\"用法相同\",{\"1\":{\"239\":1}}],[\"用电信号来表达数字信息时\",{\"1\":{\"381\":1}}],[\"用的头部\",{\"1\":{\"375\":1}}],[\"用x作为this调用它\",{\"1\":{\"283\":1}}],[\"用相同的原因拒绝\",{\"1\":{\"282\":1}}],[\"用相同的值解决\",{\"1\":{\"282\":1}}],[\"用一个typeerror作为原因来拒绝promise\",{\"1\":{\"283\":1}}],[\"用一个循环的\",{\"1\":{\"282\":1}}],[\"用一个原因\",{\"1\":{\"282\":1}}],[\"用一个值\",{\"1\":{\"282\":1}}],[\"用一个\",{\"1\":{\"282\":1}}],[\"用\",{\"1\":{\"281\":1,\"282\":6}}],[\"用在其他地方会抛出错误\",{\"1\":{\"269\":1}}],[\"用逗号分隔多个参数\",{\"1\":{\"238\":1}}],[\"用给定的数值填充矩阵\",{\"1\":{\"233\":3}}],[\"用y的值作为rgb颜色通道\",{\"1\":{\"190\":1}}],[\"用其中一个元素撑开父元素的高度\",{\"1\":{\"175\":1}}],[\"用户调用\",{\"1\":{\"568\":1}}],[\"用户得到页面后\",{\"1\":{\"472\":1}}],[\"用户的浏览器收到文本后执行页面合法脚本\",{\"1\":{\"473\":1}}],[\"用户的浏览器收到文本后执行页面\",{\"1\":{\"471\":1}}],[\"用户误点开了带攻击的url\",{\"1\":{\"471\":1,\"473\":1}}],[\"用户行为\",{\"1\":{\"454\":1}}],[\"用户分配公有地址\",{\"1\":{\"426\":1}}],[\"用户交互\",{\"1\":{\"249\":1}}],[\"用户交互和子进程管理\",{\"1\":{\"95\":1}}],[\"用户自定义的标识符\",{\"1\":{\"238\":1}}],[\"用户自定义字符串标识符\",{\"1\":{\"158\":1}}],[\"用来检测一个标签是否是可以省略闭合标签的非自闭合标签\",{\"1\":{\"606\":1}}],[\"用来控制协议栈操作的信息\",{\"1\":{\"359\":1}}],[\"用来控制事件循环\",{\"1\":{\"247\":1}}],[\"用来清除浮动\",{\"1\":{\"145\":1}}],[\"用来指向外部的执行上下文\",{\"1\":{\"124\":1}}],[\"用来实现\",{\"1\":{\"95\":1}}],[\"用来加载网络资源的\",{\"1\":{\"95\":1}}],[\"用来存放代码\",{\"1\":{\"94\":1}}],[\"用于后续定义的控制帧\",{\"1\":{\"803\":1}}],[\"用于后续定义的非控制帧\",{\"1\":{\"803\":1}}],[\"用于依赖收集和派发更新\",{\"1\":{\"561\":1}}],[\"用于判断是否\",{\"1\":{\"660\":1}}],[\"用于判断是否已经装载和减少全局作用域查找\",{\"1\":{\"660\":1}}],[\"用于判断对象是否存在\",{\"1\":{\"561\":1}}],[\"用于判断\",{\"1\":{\"557\":1}}],[\"用于关闭所有日志记录\",{\"1\":{\"457\":1}}],[\"用于打开所有日志记录\",{\"1\":{\"457\":1}}],[\"用于迭代与其关联的可迭代对象\",{\"1\":{\"265\":1}}],[\"用于\",{\"1\":{\"246\":1}}],[\"用于计算雾的程度\",{\"1\":{\"239\":1}}],[\"用于法线向量变换\",{\"1\":{\"239\":2}}],[\"用于对法线进行变换\",{\"1\":{\"239\":2}}],[\"用于将顶点从裁剪空间转换回模型空间\",{\"1\":{\"239\":1}}],[\"用于将顶点从裁剪空间转换回标准化设备空间\",{\"1\":{\"239\":1}}],[\"用于将顶点从视图空间转换回模型空间\",{\"1\":{\"239\":1}}],[\"用于将物体表面的法向量从模型坐标系变换到相机坐标系\",{\"1\":{\"239\":1}}],[\"用于实现纹理的旋转\",{\"1\":{\"239\":1}}],[\"用于顶点着色器和片元着色器中声明输出变量\",{\"1\":{\"236\":1}}],[\"用于顶点着色器和片元着色器中声明输入变量\",{\"1\":{\"236\":1}}],[\"用于表达式组合\",{\"1\":{\"221\":1}}],[\"用于表示这是一个\",{\"1\":{\"517\":1}}],[\"用于表示整数类型的变量\",{\"1\":{\"193\":1}}],[\"用于表示线条的明暗程度\",{\"1\":{\"190\":1}}],[\"用于指定纹理的各种属性\",{\"1\":{\"199\":6}}],[\"用于确定翻转法向量的方向\",{\"1\":{\"197\":1}}],[\"用于存储\",{\"1\":{\"195\":1}}],[\"用于存储双精度浮点数的类型变量\",{\"1\":{\"193\":1}}],[\"用于存储实数\",{\"1\":{\"193\":1}}],[\"用于存储数据\",{\"1\":{\"78\":1}}],[\"用于进行平滑过渡\",{\"1\":{\"190\":1}}],[\"用于保护代码免受恶意攻击\",{\"1\":{\"71\":1}}],[\"用于处理运行时错误\",{\"1\":{\"70\":1,\"71\":1}}],[\"用于管理内存的分配和释放\",{\"1\":{\"70\":1,\"71\":1}}],[\"用于评估执行程序所占用的内存空间\",{\"1\":{\"34\":1}}],[\"用于评估执行程序所消耗的时间\",{\"1\":{\"33\":1}}],[\"初始代码\",{\"1\":{\"294\":2}}],[\"初始化过程分析\",{\"0\":{\"566\":1}}],[\"初始化了很多变量\",{\"1\":{\"544\":1}}],[\"初始化时\",{\"1\":{\"521\":1}}],[\"初始化实例或类本身所需的操作\",{\"1\":{\"77\":1}}],[\"初始化\",{\"0\":{\"537\":1},\"1\":{\"1\":1}}],[\"初次调用生成器函数并不会打印日志\",{\"1\":{\"268\":1}}],[\"初学时\",{\"1\":{\"89\":2}}],[\"右键设置\",{\"1\":{\"89\":1}}],[\"右边界\",{\"1\":{\"8\":1}}],[\"泛型\",{\"0\":{\"87\":1}}],[\"记录中的目标端口和这个包的源端口是同一个端口\",{\"1\":{\"394\":1}}],[\"记录类型\",{\"1\":{\"345\":1}}],[\"记录\",{\"0\":{\"85\":1},\"1\":{\"644\":1}}],[\"带有\",{\"1\":{\"636\":1}}],[\"带有偏移量的从纹理中获取单个像素的颜色\",{\"1\":{\"199\":1}}],[\"带有验证的属性示例\",{\"1\":{\"79\":1}}],[\"带参数的构造函数\",{\"1\":{\"83\":1}}],[\"线盒的宽度是由包含块\",{\"1\":{\"175\":1}}],[\"线程之间可以共享进行数据\",{\"1\":{\"94\":1}}],[\"线条的长度\",{\"1\":{\"82\":3}}],[\"线性规划\",{\"0\":{\"37\":1}}],[\"静态提升\",{\"0\":{\"676\":1}}],[\"静态节点的\",{\"1\":{\"613\":1}}],[\"静态方法\",{\"1\":{\"81\":1}}],[\"静态字段\",{\"1\":{\"81\":1}}],[\"静态成员的生命周期从类加载开始\",{\"1\":{\"81\":1}}],[\"静态成员在所有实例之间共享\",{\"1\":{\"81\":1}}],[\"静态成员是属于类本身的\",{\"1\":{\"81\":1}}],[\"静态成员\",{\"0\":{\"81\":1}}],[\"生存时间\",{\"1\":{\"403\":1}}],[\"生命周期中的函数方法\",{\"1\":{\"776\":1}}],[\"生命周期\",{\"0\":{\"325\":1,\"577\":1},\"1\":{\"81\":1}}],[\"生成source\",{\"0\":{\"760\":1},\"1\":{\"758\":1}}],[\"生成阶段\",{\"1\":{\"707\":1}}],[\"生成的\",{\"1\":{\"766\":1}}],[\"生成的数组\",{\"1\":{\"650\":1}}],[\"生成的网络包只是存放在内存中的一串数字信息\",{\"1\":{\"380\":1}}],[\"生成路由记录\",{\"1\":{\"644\":2}}],[\"生成签名证书\",{\"1\":{\"517\":1}}],[\"生成以太网用的mac头部\",{\"0\":{\"377\":1}}],[\"生成包含接收方ip地址的ip头部\",{\"0\":{\"376\":1}}],[\"生成一个独立的source\",{\"1\":{\"762\":1}}],[\"生成一个颜色向量\",{\"1\":{\"190\":1}}],[\"生成一条表示\",{\"1\":{\"343\":1}}],[\"生成http\",{\"1\":{\"339\":1}}],[\"生成http请求信息\",{\"0\":{\"331\":1,\"336\":1}}],[\"生成器就会关闭\",{\"1\":{\"274\":1}}],[\"生成器作为默认迭代器\",{\"0\":{\"273\":1}}],[\"生成器对象实现了\",{\"1\":{\"273\":1}}],[\"生成器对象作为可迭代对象\",{\"0\":{\"270\":1}}],[\"生成器对象一开始处于暂停执行\",{\"1\":{\"268\":1}}],[\"生成器函数在遇到\",{\"1\":{\"269\":1}}],[\"生成器函数只会在初次调用\",{\"1\":{\"268\":1}}],[\"生成器函数表达式\",{\"1\":{\"268\":1}}],[\"生成器函数声明\",{\"1\":{\"268\":1}}],[\"生成器基础\",{\"0\":{\"268\":1}}],[\"生成器\",{\"0\":{\"267\":1}}],[\"生成分层树\",{\"0\":{\"103\":1}}],[\"生成\",{\"1\":{\"18\":1,\"517\":1,\"625\":1,\"635\":1}}],[\"访问组件实例\",{\"1\":{\"648\":1}}],[\"访问计算属性了\",{\"1\":{\"554\":1}}],[\"访问日志分析\",{\"1\":{\"466\":1}}],[\"访问数组\",{\"1\":{\"232\":1}}],[\"访问器\",{\"1\":{\"79\":2}}],[\"访问修饰符决定了字段的可访问性\",{\"1\":{\"78\":1}}],[\"只关心\",{\"1\":{\"725\":1}}],[\"只需从缓存中调用即可\",{\"1\":{\"678\":1}}],[\"只会被创建一次\",{\"1\":{\"676\":1}}],[\"只会执行一次\",{\"1\":{\"642\":1}}],[\"只对比带有\",{\"1\":{\"675\":1}}],[\"只在router\",{\"1\":{\"642\":1}}],[\"只作用于当前组件中的元素\",{\"1\":{\"619\":1}}],[\"只从\",{\"1\":{\"611\":1}}],[\"只包含运行时版本\",{\"1\":{\"602\":1}}],[\"只调用一次\",{\"1\":{\"532\":2}}],[\"只接收与自身地址匹配的包\",{\"1\":{\"400\":1}}],[\"只不过这个ip\",{\"1\":{\"343\":1}}],[\"只是从后台状态进入前台状态\",{\"1\":{\"323\":1}}],[\"只是中间的\",{\"1\":{\"233\":1}}],[\"只要有一组遍历完\",{\"1\":{\"597\":1}}],[\"只要事先将地址和端口的关联信息添加到地址转换设备的对应表中\",{\"1\":{\"411\":1}}],[\"只要发送最后一个ack\",{\"1\":{\"367\":1}}],[\"只要调用socket\",{\"1\":{\"350\":1}}],[\"只要询问最近的dns\",{\"1\":{\"341\":1}}],[\"只要其暴露一个遵循\",{\"1\":{\"282\":1}}],[\"只要通过它进入关闭状态\",{\"1\":{\"274\":1}}],[\"只要迭代器到达\",{\"1\":{\"265\":1}}],[\"只要触发父元素的\",{\"1\":{\"174\":1}}],[\"只有一份\",{\"1\":{\"766\":1}}],[\"只有一个\",{\"1\":{\"247\":1}}],[\"只有一个浮点数\",{\"1\":{\"199\":4}}],[\"只有对象\",{\"1\":{\"563\":1}}],[\"只有第一个\",{\"1\":{\"554\":1}}],[\"只有`keepalive`\",{\"1\":{\"540\":1}}],[\"只有\",{\"1\":{\"230\":1}}],[\"只有正整数的整数类型\",{\"1\":{\"193\":1}}],[\"只有两个可能取值\",{\"1\":{\"193\":1}}],[\"只有大于0\",{\"1\":{\"190\":1}}],[\"只有块级盒子参与\",{\"1\":{\"174\":1}}],[\"只能处理\",{\"1\":{\"744\":1}}],[\"只能通过commit修改state的值\",{\"1\":{\"665\":1}}],[\"只能将包转发到除了源端口之外的所有端口上\",{\"1\":{\"394\":1}}],[\"只能是尽快执行\",{\"1\":{\"256\":1}}],[\"只能等比例控制\",{\"1\":{\"147\":1}}],[\"只能在声明它的类或结构内部访问\",{\"1\":{\"78\":1}}],[\"只读属性\",{\"1\":{\"79\":1}}],[\"修补\",{\"1\":{\"587\":1}}],[\"修改状态\",{\"1\":{\"646\":1}}],[\"修改\",{\"1\":{\"79\":1}}],[\"修饰符类型变量\",{\"0\":{\"236\":1}}],[\"修饰符\",{\"1\":{\"78\":1}}],[\"读取和设置\",{\"1\":{\"519\":1}}],[\"读取\",{\"1\":{\"79\":1,\"563\":1}}],[\"受保护的内部成员\",{\"1\":{\"78\":1}}],[\"受保护成员\",{\"1\":{\"78\":1}}],[\"公司网络不同的技术\",{\"1\":{\"427\":1}}],[\"公司网络是一样的\",{\"1\":{\"427\":1}}],[\"公司网络是相同的\",{\"0\":{\"417\":1}}],[\"公司网络的通信线路\",{\"1\":{\"418\":1}}],[\"公司网络之间最主要的两个不同点\",{\"1\":{\"417\":1}}],[\"公司网络一样\",{\"1\":{\"417\":1}}],[\"公开成员\",{\"1\":{\"78\":1}}],[\"公共字段\",{\"1\":{\"78\":1}}],[\"公共语言运行时\",{\"1\":{\"71\":1}}],[\"公共中间语言\",{\"1\":{\"70\":1}}],[\"来自网络\",{\"1\":{\"777\":1}}],[\"来自的自定义使用情况数据\",{\"1\":{\"713\":1}}],[\"来处理\",{\"1\":{\"744\":1}}],[\"来返回结果\",{\"1\":{\"727\":1}}],[\"来实现以下转换\",{\"1\":{\"619\":1}}],[\"来判断该标签是否是自闭合标签\",{\"1\":{\"607\":1}}],[\"来进行正确性检验的测试工作\",{\"1\":{\"482\":1}}],[\"来负责的\",{\"1\":{\"406\":1}}],[\"来查询下一个转发目标的\",{\"1\":{\"405\":1}}],[\"来结尾表示访问的默认文件名\",{\"1\":{\"333\":1}}],[\"来避免\",{\"1\":{\"296\":1}}],[\"来计算片元颜色\",{\"1\":{\"240\":1}}],[\"来决定片元颜色\",{\"1\":{\"240\":1}}],[\"来重新解释什么是图形\",{\"1\":{\"226\":1}}],[\"来表示坐标\",{\"1\":{\"199\":2}}],[\"来控制从灰色逐渐过渡到绿色的过程\",{\"1\":{\"190\":1}}],[\"来访问数组中的元素\",{\"1\":{\"232\":1}}],[\"来访问类的内部数据\",{\"1\":{\"80\":1}}],[\"来访问字段\",{\"1\":{\"78\":1}}],[\"来源请求\",{\"1\":{\"482\":1}}],[\"来源可能有\",{\"1\":{\"99\":1}}],[\"来源\",{\"1\":{\"13\":2,\"18\":2,\"23\":2,\"43\":1}}],[\"属于应用层协议\",{\"1\":{\"796\":1}}],[\"属于同一个\",{\"1\":{\"174\":1}}],[\"属于类而不是类的实例\",{\"1\":{\"78\":1}}],[\"属性设为对一个长连接的请求\",{\"1\":{\"795\":1}}],[\"属性时\",{\"1\":{\"619\":1}}],[\"属性就是大家常说的\",{\"1\":{\"554\":1}}],[\"属性验证\",{\"0\":{\"318\":1}}],[\"属性名\",{\"1\":{\"304\":1}}],[\"属性名相似\",{\"1\":{\"158\":1}}],[\"属性的值\",{\"1\":{\"302\":1,\"309\":1}}],[\"属性会访问同一个值\",{\"1\":{\"287\":1}}],[\"属性和一个\",{\"1\":{\"268\":1}}],[\"属性各在网格项目\",{\"1\":{\"177\":1}}],[\"属性为\",{\"1\":{\"176\":1,\"260\":1}}],[\"属性值来决定\",{\"1\":{\"175\":1}}],[\"属性不为\",{\"1\":{\"174\":1}}],[\"属性实现\",{\"0\":{\"171\":1}}],[\"属性\",{\"0\":{\"79\":1},\"1\":{\"66\":1,\"76\":2,\"77\":1,\"79\":1,\"268\":1,\"296\":1,\"310\":1,\"560\":2,\"561\":3,\"589\":1}}],[\"保留的操作代码\",{\"1\":{\"803\":2}}],[\"保留vue引用\",{\"1\":{\"642\":1}}],[\"保证keep\",{\"1\":{\"571\":1}}],[\"保证对象中的所有\",{\"1\":{\"563\":1}}],[\"保证先创建的\",{\"1\":{\"558\":1}}],[\"保证\",{\"1\":{\"555\":1,\"642\":1}}],[\"保证dcloud\",{\"1\":{\"517\":1}}],[\"保证dist\",{\"1\":{\"1\":1}}],[\"保持一致\",{\"1\":{\"517\":1}}],[\"保存之前的提交状态\",{\"1\":{\"662\":1}}],[\"保存vuerouter实例\",{\"1\":{\"642\":1}}],[\"保存挂载vuerouter的vue实例\",{\"1\":{\"642\":1}}],[\"保存在日志文件中的记录称为日志\",{\"1\":{\"454\":1}}],[\"保存控制信息的头部\",{\"0\":{\"359\":1}}],[\"保护的或内部的\",{\"1\":{\"78\":1}}],[\"私有字段\",{\"1\":{\"79\":1}}],[\"私有字段通常以一个下划线开头\",{\"1\":{\"66\":1}}],[\"私有成员\",{\"1\":{\"78\":1}}],[\"私有的\",{\"1\":{\"78\":1}}],[\"使浏览器可以重构原始源并在调试器中显示重建的原始源\",{\"1\":{\"757\":1}}],[\"使一个对象转化成可观测对象\",{\"1\":{\"561\":1}}],[\"使其认为重要帐户将被停用\",{\"1\":{\"477\":1}}],[\"使线条逐渐出现\",{\"1\":{\"190\":1}}],[\"使得它的宽度自适应该行剩余宽度\",{\"1\":{\"174\":1}}],[\"使得从\",{\"1\":{\"18\":1}}],[\"使用起来非常简单方便\",{\"1\":{\"788\":1}}],[\"使用阶段式的构建回调\",{\"1\":{\"734\":1}}],[\"使用自定义用法数据\",{\"1\":{\"713\":2}}],[\"使用亚洲地区使用情况统计信息\",{\"1\":{\"713\":1}}],[\"使用美国使用情况统计信息\",{\"1\":{\"713\":1}}],[\"使用预设属性\",{\"1\":{\"705\":1}}],[\"使用的polyfill\",{\"1\":{\"700\":1}}],[\"使用的watcher\",{\"1\":{\"670\":1}}],[\"使用对象展开运算符将\",{\"1\":{\"664\":1}}],[\"使用配置的js\",{\"1\":{\"637\":1}}],[\"使用extend继承vue\",{\"1\":{\"580\":1}}],[\"使用渲染\",{\"0\":{\"574\":1}}],[\"使用requestanimationframe实现视觉变化\",{\"0\":{\"507\":1}}],[\"使用间隔为\",{\"1\":{\"421\":1}}],[\"使用多个频率合成的波来传输信号\",{\"1\":{\"421\":1}}],[\"使用多个颜色缓冲\",{\"1\":{\"240\":1}}],[\"使用窗口有效管理ack号\",{\"0\":{\"366\":1}}],[\"使用ack号确认网络包已收到\",{\"0\":{\"364\":1}}],[\"使用object\",{\"1\":{\"294\":1}}],[\"使用代理的主要目的是可以定义捕获器\",{\"1\":{\"288\":1}}],[\"使用source\",{\"0\":{\"758\":1}}],[\"使用settimeout包裹目的无法访问\",{\"1\":{\"281\":1}}],[\"使用smoothstep函数定义线条形状\",{\"1\":{\"190\":1}}],[\"使用星号增强\",{\"1\":{\"272\":1}}],[\"使用精度限定符可以确保在不同设备上获得一致的运行结果\",{\"1\":{\"241\":1}}],[\"使用变换后的法线进行接下来的计算\",{\"1\":{\"239\":2}}],[\"使用给定的采样器和纹理坐标\",{\"1\":{\"199\":2}}],[\"使用格式\",{\"1\":{\"195\":22,\"196\":6,\"197\":8,\"198\":17,\"199\":32,\"234\":1,\"236\":6,\"238\":4}}],[\"使用plot函数绘制一条线条\",{\"1\":{\"190\":1}}],[\"使用\",{\"0\":{\"271\":1,\"571\":1,\"789\":1,\"797\":1},\"1\":{\"84\":1,\"195\":9,\"196\":1,\"197\":8,\"199\":12,\"233\":4,\"238\":3,\"239\":4,\"240\":1,\"265\":1,\"278\":1,\"517\":1,\"528\":2,\"571\":2,\"621\":1,\"658\":1,\"667\":1,\"699\":1,\"700\":1,\"713\":1,\"745\":1,\"747\":4}}],[\"使用静态成员\",{\"1\":{\"81\":1}}],[\"使用属性\",{\"1\":{\"79\":1,\"705\":1}}],[\"使用嵌套类\",{\"1\":{\"77\":1}}],[\"使用索引器设置元素\",{\"1\":{\"80\":1}}],[\"使用索引器访问元素\",{\"1\":{\"80\":1}}],[\"使用索引器\",{\"1\":{\"77\":1}}],[\"使用方法\",{\"1\":{\"77\":1}}],[\"使用构造函数创建类的实例\",{\"1\":{\"77\":1}}],[\"运算符\",{\"1\":{\"688\":1}}],[\"运算符重载的使用\",{\"1\":{\"77\":1}}],[\"运算符重载\",{\"1\":{\"77\":1}}],[\"运营商网络也使用了一些和家庭\",{\"1\":{\"427\":1}}],[\"运营商网络也是以路由器为核\",{\"1\":{\"427\":1}}],[\"运行时的\",{\"1\":{\"713\":1}}],[\"运行时\",{\"0\":{\"602\":1}}],[\"运行时间\",{\"1\":{\"7\":1}}],[\"运行\",{\"1\":{\"281\":1,\"282\":1}}],[\"运行过程中的数据\",{\"1\":{\"94\":1}}],[\"事件监听完成\",{\"1\":{\"784\":1}}],[\"事件侦听器缓存\",{\"0\":{\"678\":1}}],[\"事件时\",{\"1\":{\"568\":1}}],[\"事件响应函数\",{\"1\":{\"327\":1}}],[\"事件回调\",{\"1\":{\"256\":1}}],[\"事件回调阶段\",{\"1\":{\"256\":1}}],[\"事件循环\",{\"1\":{\"255\":1}}],[\"事件循环机制也是它里面的实现\",{\"1\":{\"255\":1}}],[\"事件触发线程\",{\"1\":{\"247\":1}}],[\"事件处理\",{\"1\":{\"77\":1,\"246\":1}}],[\"事件\",{\"1\":{\"77\":1,\"256\":1,\"528\":2}}],[\"事件等成员\",{\"1\":{\"76\":1}}],[\"事件等程序实体的名称\",{\"1\":{\"66\":1}}],[\"与后面服务端响应首部的\",{\"1\":{\"799\":1}}],[\"与上述相同\",{\"1\":{\"713\":1}}],[\"与上次虚拟节点对比时\",{\"1\":{\"675\":1}}],[\"与以太网的关系也就是路由器与交换机的关系\",{\"1\":{\"406\":1}}],[\"与对象\",{\"0\":{\"293\":1}}],[\"与迭代器不同\",{\"1\":{\"274\":1}}],[\"与浏览器的\",{\"1\":{\"256\":1}}],[\"与纹理坐标配合使用\",{\"1\":{\"239\":1}}],[\"与阈值\",{\"1\":{\"195\":1}}],[\"与\",{\"1\":{\"195\":7,\"239\":1,\"247\":2}}],[\"与包含块\",{\"1\":{\"174\":1}}],[\"与将类实例编入索引相关联的操作\",{\"1\":{\"77\":1}}],[\"与读取和写入类的已命名属性相关联的操作\",{\"1\":{\"77\":1}}],[\"与类关联的常量值\",{\"1\":{\"77\":1}}],[\"与末尾元素进行比较\",{\"1\":{\"55\":1}}],[\"也被简化为只包含对应行的\",{\"1\":{\"766\":1}}],[\"也包括会自动添加autoprefixer\",{\"1\":{\"755\":1}}],[\"也不会出现在父组件链中\",{\"1\":{\"570\":1}}],[\"也不知道可迭代对象有多大\",{\"1\":{\"265\":1}}],[\"也配合\",{\"1\":{\"558\":1}}],[\"也是建立在\",{\"1\":{\"798\":1}}],[\"也是web平台上的\",{\"1\":{\"540\":1}}],[\"也是用来将指定目录或文件排除在版本控制之外的\",{\"1\":{\"517\":1}}],[\"也是生成器最有用的地方\",{\"1\":{\"269\":1}}],[\"也会消耗\",{\"1\":{\"793\":1}}],[\"也会按顺序放入队列的合适位置\",{\"1\":{\"558\":1}}],[\"也会原样发送到目的地\",{\"1\":{\"390\":1}}],[\"也会在这个周期被调用执行\",{\"1\":{\"251\":1}}],[\"也会在\",{\"1\":{\"250\":1}}],[\"也可能是\",{\"1\":{\"688\":1}}],[\"也可能没有\",{\"1\":{\"532\":1}}],[\"也可能执行在后\",{\"1\":{\"257\":1}}],[\"也可对函数和构造函数参数进行审查\",{\"1\":{\"319\":1}}],[\"也可以是一个\",{\"1\":{\"584\":1}}],[\"也可以用滤波器从合成的波中分离出某个特定频率的波\",{\"1\":{\"421\":1}}],[\"也可以在构造函数中进行初始化\",{\"1\":{\"78\":1}}],[\"也可以实现接口\",{\"1\":{\"76\":1}}],[\"也为空\",{\"1\":{\"251\":1}}],[\"也就是没有任何和source\",{\"1\":{\"760\":1}}],[\"也就是最新的第三版\",{\"1\":{\"759\":1}}],[\"也就是真实跑在浏览器上的代码\",{\"1\":{\"757\":1}}],[\"也就是设置了\",{\"1\":{\"544\":1}}],[\"也就是信号振幅的大小来对应\",{\"1\":{\"420\":1}}],[\"也就是交换机\",{\"1\":{\"390\":1}}],[\"也就是向dns\",{\"1\":{\"341\":1}}],[\"也就是说\",{\"1\":{\"261\":1,\"265\":1,\"367\":1,\"380\":1}}],[\"也就是一个阶段执行完毕\",{\"1\":{\"258\":1}}],[\"也就是在编译时就可以确定的值\",{\"1\":{\"232\":1}}],[\"也就是黑色\",{\"1\":{\"190\":1}}],[\"也就是白色\",{\"1\":{\"190\":1}}],[\"也就是\",{\"1\":{\"152\":1,\"334\":1}}],[\"也就是平时说的b\",{\"1\":{\"65\":1}}],[\"结合路由\",{\"0\":{\"572\":1}}],[\"结果\",{\"1\":{\"638\":1}}],[\"结果导致在代理上调用某些方法会出错\",{\"1\":{\"300\":1}}],[\"结果未定义\",{\"1\":{\"199\":1}}],[\"结果为\",{\"1\":{\"197\":6}}],[\"结果值为1\",{\"1\":{\"191\":1}}],[\"结果值为0\",{\"1\":{\"191\":1}}],[\"结束标签\",{\"1\":{\"606\":2}}],[\"结束请求体\",{\"1\":{\"102\":1,\"103\":1,\"104\":1}}],[\"结束时间\",{\"1\":{\"22\":2}}],[\"结构体定义方式与\",{\"1\":{\"234\":1}}],[\"结构体类型中成员的定义\",{\"1\":{\"234\":1}}],[\"结构体类型的名称\",{\"1\":{\"234\":1}}],[\"结构体类型变量\",{\"0\":{\"234\":1}}],[\"结构体和向量的成员选择\",{\"1\":{\"221\":1}}],[\"结构体等组织在一起\",{\"1\":{\"74\":1}}],[\"结构进行访问\",{\"1\":{\"133\":1}}],[\"结构\",{\"1\":{\"98\":1,\"134\":1}}],[\"并用这个掩码键来对数据载荷进行反掩码\",{\"1\":{\"803\":1}}],[\"并发送给服务端\",{\"1\":{\"802\":1}}],[\"并转成\",{\"1\":{\"801\":1}}],[\"并转换成电信号发送给分离器\",{\"1\":{\"419\":1}}],[\"并复用\",{\"1\":{\"796\":1}}],[\"并行\",{\"1\":{\"777\":1}}],[\"并配置好所有可操作的设置\",{\"1\":{\"737\":1}}],[\"并进行修改\",{\"1\":{\"636\":1}}],[\"并进入挂载阶段\",{\"1\":{\"591\":1}}],[\"并打上标记\",{\"1\":{\"603\":1}}],[\"并挂载\",{\"1\":{\"591\":2}}],[\"并插入到父节点上\",{\"1\":{\"590\":1}}],[\"并清除缓存的\",{\"1\":{\"558\":1}}],[\"并没有真的开始\",{\"1\":{\"544\":1}}],[\"并抛出不同的事件\",{\"1\":{\"528\":1}}],[\"并从中选择一个最优的组合\",{\"1\":{\"396\":1}}],[\"并通过网线发送出去\",{\"1\":{\"382\":1}}],[\"并返回此对象\",{\"1\":{\"559\":1}}],[\"并返回ip\",{\"1\":{\"345\":1}}],[\"并返回该价格\",{\"1\":{\"18\":1}}],[\"并接收服务器返回的响应消息\",{\"1\":{\"341\":1}}],[\"并假设\",{\"1\":{\"282\":1}}],[\"并不会马上把包发送出去\",{\"1\":{\"367\":1}}],[\"并不会等到\",{\"1\":{\"282\":1}}],[\"并不限于捕获处理程序\",{\"1\":{\"293\":1}}],[\"并不需要引用中的每一个值都相等\",{\"1\":{\"280\":1}}],[\"并不适用于其他具有隐式顺序的数据结构\",{\"1\":{\"260\":1}}],[\"并不像浏览器端\",{\"1\":{\"256\":1}}],[\"并保持其在坐标系中的垂直性\",{\"1\":{\"239\":1}}],[\"并根据偏移量从纹理中取样\",{\"1\":{\"199\":1}}],[\"并根据给定的采样器\",{\"1\":{\"199\":2}}],[\"并对纹理坐标进行偏移\",{\"1\":{\"199\":1}}],[\"并手动指定\",{\"1\":{\"199\":2}}],[\"并同时将读取的数据\",{\"1\":{\"134\":1}}],[\"并且可以跟随module的值\",{\"1\":{\"769\":1}}],[\"并且可以向浏览器的任务队列放入下一个\",{\"1\":{\"558\":1}}],[\"并且会根据目标浏览器或者运行时环境添加所需的polyfill\",{\"1\":{\"755\":1}}],[\"并且忽略前一个\",{\"1\":{\"725\":1}}],[\"并且需要在入口文件中添加\",{\"1\":{\"699\":1}}],[\"并且需要请求网站的评论数据\",{\"1\":{\"472\":1}}],[\"并且在bundle文件中有一个注释\",{\"1\":{\"762\":1}}],[\"并且在调试面板中生成对应的一些文件目录\",{\"1\":{\"760\":1}}],[\"并且在\",{\"1\":{\"636\":1}}],[\"并且在进入该阶段时如果没有设定了\",{\"1\":{\"256\":1}}],[\"并且新节点被\",{\"1\":{\"596\":1}}],[\"并且合并\",{\"1\":{\"546\":1}}],[\"并且对日志内容进行切分并存储起来\",{\"1\":{\"466\":1}}],[\"并且用一个信息丰富的\",{\"1\":{\"282\":1}}],[\"并且优先于其他\",{\"1\":{\"257\":1}}],[\"并且是由\",{\"1\":{\"256\":1}}],[\"并且不高于\",{\"1\":{\"241\":1}}],[\"并且矢量与法向量的夹角为\",{\"1\":{\"197\":1}}],[\"并且与这个区域外部毫不相干\",{\"1\":{\"174\":1}}],[\"并且定义的变量或者函数只能在函数内部被访问\",{\"1\":{\"119\":1}}],[\"并且没有任何终止条件\",{\"1\":{\"118\":1}}],[\"并反复将其压入栈中\",{\"1\":{\"118\":1}}],[\"并将关联的帧重新组装成完整的消息\",{\"1\":{\"802\":1}}],[\"并将出错的包丢弃\",{\"1\":{\"390\":1}}],[\"并将数据块按顺序连接起来还原出原始的数据\",{\"1\":{\"368\":1}}],[\"并将ip\",{\"1\":{\"343\":1}}],[\"并将它发送给dns\",{\"1\":{\"343\":1}}],[\"并将它们传递到片元着色器中的\",{\"1\":{\"236\":1}}],[\"并将\",{\"1\":{\"256\":2,\"258\":1,\"528\":1}}],[\"并将这个距离传递给片元着色器\",{\"1\":{\"239\":1}}],[\"并将变换后的法线传递给片元着色器\",{\"1\":{\"239\":2}}],[\"并将变换后的坐标传递给片元着色器\",{\"1\":{\"239\":1}}],[\"并将变换后的顶点坐标传递给片元着色器\",{\"1\":{\"239\":3}}],[\"并将其写入浏览器指定的内存地址中\",{\"1\":{\"342\":1}}],[\"并将其传递给下一阶段的渲染管线\",{\"1\":{\"239\":1}}],[\"并将其传递给片元着色器\",{\"1\":{\"239\":2}}],[\"并将其作为传递参数的一部分传递到着色器中\",{\"1\":{\"236\":1}}],[\"并将其解析为\",{\"1\":{\"134\":1}}],[\"并将其压入调用栈\",{\"1\":{\"117\":1}}],[\"并将其压入栈底\",{\"1\":{\"117\":1}}],[\"并将result的值设置为add函数的返回值\",{\"1\":{\"117\":1}}],[\"并将机器代码嵌入到最终的可执行文件中\",{\"1\":{\"73\":2}}],[\"并创建执行上下文\",{\"1\":{\"117\":1,\"118\":1}}],[\"并创建函数执行上下文\",{\"1\":{\"117\":1}}],[\"并组合成图层树\",{\"1\":{\"103\":1}}],[\"并计算各个元素的布局信息\",{\"1\":{\"97\":1,\"102\":1,\"103\":1,\"104\":1}}],[\"并在里面添加\",{\"1\":{\"761\":1}}],[\"并在开头加上报头和起始帧分界符\",{\"1\":{\"381\":1}}],[\"并在运行时执行\",{\"1\":{\"72\":1}}],[\"并在需要时执行\",{\"1\":{\"72\":1}}],[\"并在支持cli的平台上执行\",{\"1\":{\"71\":1}}],[\"并提供了以下功能\",{\"1\":{\"71\":1}}],[\"通道进行传输通信\",{\"1\":{\"798\":1}}],[\"通俗地讲\",{\"1\":{\"796\":1}}],[\"通俗地理解\",{\"1\":{\"119\":1}}],[\"通知更新\",{\"1\":{\"524\":1}}],[\"通知watcher进行更新\",{\"1\":{\"521\":1}}],[\"通信操作中使用的控制信息分为两类\",{\"1\":{\"359\":1}}],[\"通信操作的进行状态等\",{\"1\":{\"356\":1}}],[\"通信阶段\",{\"1\":{\"349\":1}}],[\"通常有\",{\"1\":{\"794\":1}}],[\"通常在有错误的情况下\",{\"1\":{\"727\":1}}],[\"通常不需要进行修改\",{\"1\":{\"517\":1}}],[\"通常其内容是不需要更改的\",{\"1\":{\"517\":1}}],[\"通常会对代码进行混淆\",{\"1\":{\"517\":1}}],[\"通常\",{\"1\":{\"293\":1}}],[\"通常用于提高图像质量\",{\"1\":{\"241\":1}}],[\"通常用于平衡\",{\"1\":{\"241\":1}}],[\"通常用于节省\",{\"1\":{\"241\":1}}],[\"通常用于定义一个不返回值的函数\",{\"1\":{\"238\":1}}],[\"通常用于在片元着色器中获取法向量等\",{\"1\":{\"199\":1}}],[\"通常用于执行弯曲的表面纹理采样\",{\"1\":{\"199\":1}}],[\"通常将其设置为\",{\"1\":{\"199\":1}}],[\"通常是\",{\"1\":{\"199\":11}}],[\"通常使用\",{\"1\":{\"199\":2}}],[\"通常把这种用来管理执行上下文的栈称为执行上下文栈\",{\"1\":{\"117\":1}}],[\"通常推荐使用属性\",{\"1\":{\"78\":1}}],[\"通过在\",{\"1\":{\"795\":1}}],[\"通过事件和注册和监听\",{\"1\":{\"776\":1}}],[\"通过postcss使用autoprefixer\",{\"1\":{\"754\":1}}],[\"通过全局使用情况统计信息选择的浏览器版本\",{\"1\":{\"713\":1}}],[\"通过defineproperty给数组添加方法\",{\"1\":{\"561\":1}}],[\"通过dns\",{\"1\":{\"341\":1}}],[\"通过执行\",{\"1\":{\"554\":1}}],[\"通过操控受害者的紧迫感\",{\"1\":{\"477\":1}}],[\"通过使用多个波来提高速率\",{\"0\":{\"421\":1}}],[\"通过增加振幅和相位的级别\",{\"1\":{\"420\":1}}],[\"通过接入网进入互联网内部\",{\"0\":{\"415\":1}}],[\"通过地址转换有效利用\",{\"0\":{\"408\":1}}],[\"通过分片功能拆分大网络包\",{\"0\":{\"404\":1}}],[\"通过分词器将字节流转换为\",{\"1\":{\"134\":1}}],[\"通过路由器之间的信息交换由路由器自行维护路由表的记录\",{\"1\":{\"399\":1}}],[\"通过arp查询目标路由器的mac地址\",{\"0\":{\"378\":1}}],[\"通过tcp\",{\"1\":{\"360\":1}}],[\"通过缓存加快dns服务器的响应\",{\"0\":{\"347\":1}}],[\"通过解析器向dns查询\",{\"0\":{\"342\":1}}],[\"通过reduce方法返回了处理器对象\",{\"1\":{\"320\":1}}],[\"通过revocable\",{\"1\":{\"291\":1}}],[\"通过代理可以把运行时中原本不相关的部分联系到一起\",{\"1\":{\"320\":1}}],[\"通过捕获\",{\"1\":{\"316\":1}}],[\"通过指定的参数列表发起对目标\",{\"1\":{\"313\":1}}],[\"通过它去代理另一个代理\",{\"1\":{\"297\":1}}],[\"通过它就能够预测代码在执行过程中如何查找标识符\",{\"1\":{\"125\":1}}],[\"通过创建迭代器并调用\",{\"1\":{\"265\":1}}],[\"通过递增索引来访问数据是特定于数组类型的方式\",{\"1\":{\"260\":1}}],[\"通过这个栈暂存对\",{\"1\":{\"604\":1}}],[\"通过这两个混合值的相加\",{\"1\":{\"190\":1}}],[\"通过这套接口\",{\"1\":{\"133\":1}}],[\"通过设置元素的\",{\"1\":{\"176\":1}}],[\"通过let声明的变量并没有被存放到词法环境中\",{\"1\":{\"122\":1}}],[\"通过let声明的变量\",{\"1\":{\"122\":1}}],[\"通过stylesheet计算出dom节点的样式\",{\"1\":{\"102\":1,\"103\":1,\"104\":1}}],[\"通过\",{\"0\":{\"269\":1},\"1\":{\"97\":1,\"175\":1,\"226\":1,\"269\":2,\"277\":1,\"521\":1,\"561\":1,\"623\":1,\"648\":1,\"798\":1,\"801\":1}}],[\"通过服务器的iis+\",{\"1\":{\"65\":1}}],[\"通用语言规范\",{\"1\":{\"70\":1}}],[\"通用类型系统\",{\"1\":{\"70\":1}}],[\"虚拟执行系统\",{\"1\":{\"70\":2}}],[\"垃圾回收\",{\"1\":{\"70\":1}}],[\"平移和缩放等变换效果\",{\"1\":{\"239\":1}}],[\"平移\",{\"0\":{\"215\":1}}],[\"平台无关的中间语言\",{\"1\":{\"70\":1}}],[\"平台无关的虚拟机规范\",{\"1\":{\"70\":1}}],[\"平均时间复杂度\",{\"1\":{\"56\":1,\"57\":1}}],[\"平均每次检查的元素数为\",{\"1\":{\"49\":1}}],[\"该无符号整数的值为数据的长度\",{\"1\":{\"803\":2}}],[\"该文件下的包可能开发已经使用过了\",{\"1\":{\"699\":1}}],[\"该回调将会在侦听开始之后被立即调用\",{\"1\":{\"667\":1}}],[\"该回调会在任何被侦听的对象的\",{\"1\":{\"667\":1}}],[\"该方法对state执行$watch以禁止从mutation外部修改state\",{\"1\":{\"663\":1}}],[\"该参数应该是一个类数组的对象\",{\"1\":{\"313\":1}}],[\"该矩阵可以将当前法线从视图坐标系变换到裁剪坐标系\",{\"1\":{\"239\":1}}],[\"该矩阵可以将当前法线从模型坐标系变换到视图坐标系\",{\"1\":{\"239\":1}}],[\"该矩阵可以将当前顶点从纹理坐标系变换到纹理单元坐标系\",{\"1\":{\"239\":1}}],[\"该矩阵可以将当前顶点从模型坐标系变换到裁剪坐标系\",{\"1\":{\"239\":1}}],[\"该矩阵可以将当前顶点从模型坐标系变换到视图坐标系\",{\"1\":{\"239\":1}}],[\"该矩阵可以将当前顶点从视图坐标系变换到裁剪坐标系\",{\"1\":{\"239\":1}}],[\"该模型是\",{\"1\":{\"183\":1}}],[\"该作用域的信息就会从栈顶弹出\",{\"1\":{\"122\":1}}],[\"该位置决定了变量的生命周期\",{\"1\":{\"119\":1}}],[\"该函数的执行上下文就会从栈顶弹出\",{\"1\":{\"117\":1}}],[\"该数组包含传递给程序的命令行参数\",{\"1\":{\"68\":1}}],[\"该战略是微软的一项全新创意\",{\"1\":{\"65\":1}}],[\"当客户端\",{\"1\":{\"803\":1}}],[\"当收到了连接成功的消息后\",{\"1\":{\"798\":1}}],[\"当有新消息的时候\",{\"1\":{\"794\":1}}],[\"当有返回值时\",{\"1\":{\"777\":1,\"779\":1}}],[\"当返回值不为\",{\"1\":{\"777\":1,\"781\":1}}],[\"当返回值为\",{\"1\":{\"777\":2,\"780\":2}}],[\"当运行\",{\"1\":{\"737\":1}}],[\"当在\",{\"1\":{\"737\":1}}],[\"当使用了一些语法特性\",{\"1\":{\"699\":1}}],[\"当使用eval函数的时候\",{\"1\":{\"117\":1}}],[\"当只有一个helloworld的时候\",{\"1\":{\"679\":1}}],[\"当事件再次触发时\",{\"1\":{\"678\":1}}],[\"当事件满足触发条件时\",{\"1\":{\"247\":1}}],[\"当剩下的text不再被正则匹配上时\",{\"1\":{\"611\":1}}],[\"当解析到注释时\",{\"1\":{\"604\":1}}],[\"当解析到文本时\",{\"1\":{\"604\":1}}],[\"当解析到结束标签时\",{\"1\":{\"604\":1}}],[\"当解析到开始标签时\",{\"1\":{\"604\":1}}],[\"当进入\",{\"1\":{\"589\":1}}],[\"当它包裹动态组件时\",{\"1\":{\"570\":1}}],[\"当然第二个参数也有可能是一个函数\",{\"1\":{\"558\":1}}],[\"当然设定了\",{\"1\":{\"256\":1}}],[\"当浏览器没有执行队列才会执行\",{\"1\":{\"558\":1}}],[\"当组件挂载时new\",{\"1\":{\"556\":1}}],[\"当前收到的数据帧为其中一个数据分片\",{\"1\":{\"803\":1}}],[\"当前使用的版本\",{\"1\":{\"759\":1}}],[\"当前的符号\",{\"1\":{\"690\":1}}],[\"当前父路由\",{\"1\":{\"651\":1}}],[\"当前浏览器会话的历史堆栈中\",{\"1\":{\"646\":1}}],[\"当前节点的父节点不能是带有\",{\"1\":{\"613\":1}}],[\"当前\",{\"1\":{\"573\":1,\"656\":1,\"661\":1}}],[\"当前没有处于刷新队列状态\",{\"1\":{\"557\":1}}],[\"当前watcher\",{\"1\":{\"554\":1}}],[\"当前日期为几号\",{\"1\":{\"300\":1}}],[\"当被绑定的元素插入到\",{\"1\":{\"532\":1}}],[\"当依赖改变时\",{\"1\":{\"521\":1}}],[\"当代码开发完打包成安装包之后\",{\"1\":{\"517\":1}}],[\"当这个值变成\",{\"1\":{\"403\":1}}],[\"当信号到达集线器后\",{\"1\":{\"390\":1}}],[\"当电磁波接触到金属等导体时\",{\"1\":{\"389\":1}}],[\"当接收方的tcp\",{\"1\":{\"366\":1}}],[\"当dns\",{\"1\":{\"343\":1}}],[\"当控制流程转移到解析器后\",{\"1\":{\"343\":1}}],[\"当到达需要调用解析器的部分时\",{\"1\":{\"343\":1}}],[\"当没路径名时\",{\"1\":{\"334\":1}}],[\"当用户已经登录成功了一个网站\",{\"1\":{\"469\":1}}],[\"当用户再次进入微信并打开小程序\",{\"1\":{\"324\":1}}],[\"当用户\",{\"1\":{\"324\":1}}],[\"当pending状态时\",{\"1\":{\"281\":1}}],[\"当每个阶段完成后\",{\"1\":{\"257\":1}}],[\"当回调执行完毕后队列为空\",{\"1\":{\"257\":1}}],[\"当队列为空或者执行的回调函数数量到达系统设定的阈值\",{\"1\":{\"256\":1}}],[\"当宏任务执行完\",{\"1\":{\"250\":1}}],[\"当主线程执行到该消息的时候就会执行\",{\"1\":{\"249\":1}}],[\"当请求完毕后\",{\"1\":{\"247\":1}}],[\"当页面需要重绘和回流时\",{\"1\":{\"247\":1}}],[\"当我们需要管理一组相关的变量时\",{\"1\":{\"234\":1}}],[\"当x等于t2时\",{\"1\":{\"191\":1}}],[\"当x等于t1时\",{\"1\":{\"191\":1}}],[\"当\",{\"1\":{\"190\":5,\"280\":2,\"567\":2,\"619\":1,\"624\":1,\"678\":1,\"755\":1,\"803\":1}}],[\"当为一个元素设置display值为grid的时候\",{\"1\":{\"177\":1}}],[\"当一个\",{\"1\":{\"280\":3}}],[\"当一个块要在环境中水平居中时\",{\"1\":{\"175\":1}}],[\"当一个内联盒子超过父元素的宽度时\",{\"1\":{\"175\":1}}],[\"当内联级盒子的总宽度少于包含它们的\",{\"1\":{\"175\":1}}],[\"当无法显示图像时\",{\"1\":{\"152\":1}}],[\"当函数被正常调用时\",{\"1\":{\"129\":1}}],[\"当函数作为对象的方法调用时\",{\"1\":{\"129\":1}}],[\"当作用域块执行结束之后\",{\"1\":{\"122\":1}}],[\"当作用域执行完成之后\",{\"1\":{\"122\":1}}],[\"当执行到代码块里面时\",{\"1\":{\"122\":1}}],[\"当执行到add函数调用语句时\",{\"1\":{\"117\":1}}],[\"当javascript引擎开始执行这段代码时\",{\"1\":{\"118\":1}}],[\"当javascript执行全局代码的时候\",{\"1\":{\"117\":1}}],[\"当add函数返回时\",{\"1\":{\"117\":1}}],[\"当调用一个函数的时候\",{\"1\":{\"117\":1}}],[\"当所有的图块都光栅化之后合成线程会发送绘制图块的命令给浏览器主进程\",{\"1\":{\"97\":1,\"105\":1}}],[\"当启动一个程序时\",{\"1\":{\"94\":1}}],[\"当程序启动时\",{\"1\":{\"68\":1}}],[\"当加入新的数据时\",{\"1\":{\"49\":1}}],[\"除外\",{\"1\":{\"563\":1}}],[\"除非你挪动了\",{\"1\":{\"517\":1}}],[\"除非是为了解决与关键字冲突的情况\",{\"1\":{\"66\":1}}],[\"除操作符\",{\"1\":{\"221\":1}}],[\"除以\",{\"1\":{\"195\":1}}],[\"除了最后一个\",{\"1\":{\"53\":1}}],[\"虽然\",{\"1\":{\"66\":1}}],[\"虽然不是强制性的\",{\"1\":{\"66\":1}}],[\"作者\",{\"1\":{\"218\":1,\"225\":1}}],[\"作为事件\",{\"1\":{\"528\":1}}],[\"作为目录名来处理\",{\"1\":{\"334\":1}}],[\"作为文件名来处\",{\"1\":{\"334\":1}}],[\"作为原因拒绝\",{\"1\":{\"282\":3}}],[\"作为原因来拒绝\",{\"1\":{\"282\":1}}],[\"作为原因被拒绝\",{\"1\":{\"281\":1}}],[\"作为交给同一个\",{\"1\":{\"271\":1}}],[\"作为类静态方法的生成器函数\",{\"1\":{\"268\":1}}],[\"作为类实例方法的生成器函数\",{\"1\":{\"268\":1}}],[\"作为对象字面量方法的生成器函数\",{\"1\":{\"268\":1}}],[\"作为键\",{\"1\":{\"263\":1}}],[\"作为\",{\"1\":{\"157\":1,\"255\":1,\"280\":2,\"282\":1,\"528\":1,\"749\":1}}],[\"作为基准值\",{\"1\":{\"43\":1}}],[\"作用域链\",{\"0\":{\"124\":1}}],[\"作用域链和闭包\",{\"0\":{\"123\":1}}],[\"作用域就是变量与函数的可访问范围\",{\"1\":{\"119\":1}}],[\"作用域是指在程序中定义变量的区域\",{\"1\":{\"119\":1}}],[\"作用域\",{\"0\":{\"119\":1},\"1\":{\"66\":1}}],[\"常规方法\",{\"1\":{\"726\":1}}],[\"常见的面试考点比如`vue是如何实现数据响应化的`\",{\"1\":{\"544\":1}}],[\"常见算法\",{\"1\":{\"33\":1}}],[\"常用的接入网技术与\",{\"1\":{\"423\":1}}],[\"常用于对纹理坐标进行变换\",{\"1\":{\"239\":1}}],[\"常量的值\",{\"1\":{\"236\":1}}],[\"常量的值不能在程序运行期间更改\",{\"1\":{\"236\":1}}],[\"常量的名称\",{\"1\":{\"236\":1}}],[\"常量的类型\",{\"1\":{\"236\":1}}],[\"常量\",{\"1\":{\"77\":1}}],[\"常量名应该使用全大写字母\",{\"1\":{\"66\":1}}],[\"后置\",{\"1\":{\"726\":2}}],[\"后的内容\",{\"1\":{\"637\":1}}],[\"后台则正常走逻辑将用户提交的表单信息进行处理\",{\"1\":{\"469\":1}}],[\"后台\",{\"1\":{\"324\":1}}],[\"后续\",{\"1\":{\"803\":2}}],[\"后续的数据交互都按照新的协议来\",{\"1\":{\"800\":1}}],[\"后续的数据交换则遵照\",{\"1\":{\"798\":1}}],[\"后续的开发工作也是在这个目录下进行的\",{\"1\":{\"517\":1}}],[\"后续调用\",{\"1\":{\"265\":1}}],[\"后续单词的首字母大写\",{\"1\":{\"66\":1}}],[\"后退等操作\",{\"1\":{\"246\":1}}],[\"后面再开始匹配正则\",{\"1\":{\"611\":1}}],[\"后面如果有对应的插件就会放进来\",{\"1\":{\"542\":1}}],[\"后面会讲\",{\"1\":{\"542\":1}}],[\"后面的\",{\"1\":{\"725\":1}}],[\"后面的部分\",{\"1\":{\"345\":1}}],[\"后面的代码\",{\"1\":{\"253\":1}}],[\"后面表达式的运算结果就是它等到的东西\",{\"1\":{\"253\":1}}],[\"后面跟的是一个\",{\"1\":{\"253\":1}}],[\"后面跟的不是一个\",{\"1\":{\"253\":1}}],[\"后面跟着的数字代表矩阵的列数\",{\"1\":{\"233\":1}}],[\"后面可以跟任意数量的字母\",{\"1\":{\"66\":1}}],[\"后\",{\"1\":{\"183\":1,\"419\":1,\"621\":1}}],[\"后跟\",{\"1\":{\"158\":1}}],[\"开发环境中间件时\",{\"1\":{\"737\":1}}],[\"开发者可以引入它们自己的行为到\",{\"1\":{\"734\":1}}],[\"开发的\",{\"1\":{\"517\":1}}],[\"开启gzip压缩\",{\"1\":{\"720\":1}}],[\"开启\",{\"1\":{\"678\":1}}],[\"开启热更新\",{\"1\":{\"635\":1}}],[\"开启bfc\",{\"1\":{\"144\":1}}],[\"开头的\",{\"1\":{\"777\":2}}],[\"开头的属性\",{\"1\":{\"613\":1}}],[\"开头\",{\"1\":{\"66\":1,\"209\":1,\"606\":1}}],[\"开始提供的一种浏览器与服务器进行全双工通讯的网络技术\",{\"1\":{\"796\":1}}],[\"开始标签的标签名\",{\"1\":{\"608\":1}}],[\"开始标签\",{\"1\":{\"606\":1}}],[\"开始索引超过结束索引\",{\"1\":{\"597\":1}}],[\"开始索引\",{\"1\":{\"232\":1}}],[\"开始接收响应体\",{\"1\":{\"102\":1,\"103\":1,\"104\":1}}],[\"开始准备渲染页面\",{\"1\":{\"102\":1,\"103\":1,\"104\":1}}],[\"开始插入排序\",{\"1\":{\"56\":1}}],[\"开始时间\",{\"1\":{\"22\":2}}],[\"开始\",{\"0\":{\"538\":1},\"1\":{\"18\":1,\"240\":1}}],[\"合并vue的默认options\",{\"1\":{\"580\":1}}],[\"合并两个选项\",{\"1\":{\"547\":1}}],[\"合并\",{\"1\":{\"174\":2,\"585\":2}}],[\"合并数组\",{\"1\":{\"9\":1}}],[\"合成线程\",{\"0\":{\"105\":1}}],[\"合成线程会把分好的图块发给栅格化线程池\",{\"1\":{\"97\":1,\"104\":1,\"105\":1}}],[\"合成线程将图层分成图块\",{\"1\":{\"97\":1,\"105\":1}}],[\"合法性\",{\"1\":{\"66\":1}}],[\"符号表示继承关系\",{\"1\":{\"84\":1}}],[\"符号是合法的\",{\"1\":{\"66\":1}}],[\"符号\",{\"1\":{\"66\":2,\"67\":1}}],[\"符号组成\",{\"1\":{\"66\":1}}],[\"符合上面条件\",{\"1\":{\"1\":1}}],[\"接入网后面连接着网络运营商的网络\",{\"1\":{\"427\":1}}],[\"接入网需要通过用户名和密码验证用户的身份\",{\"1\":{\"426\":1}}],[\"接入网中使用的\",{\"0\":{\"426\":1}}],[\"接入网的结构\",{\"1\":{\"416\":1}}],[\"接入网的结构和工作方式\",{\"0\":{\"416\":1}}],[\"接入网的知识\",{\"1\":{\"416\":1}}],[\"接入网有很多类型\",{\"1\":{\"416\":1}}],[\"接受http响应消息\",{\"0\":{\"368\":1}}],[\"接受一个vec2类型的参数st\",{\"1\":{\"190\":1}}],[\"接收消息帧\",{\"1\":{\"802\":1}}],[\"接收端\",{\"1\":{\"802\":1}}],[\"接收到客户端消息\",{\"1\":{\"797\":1}}],[\"接收到客户端发过来的消息时触发\",{\"1\":{\"789\":1}}],[\"接收用户传入的参数\",{\"1\":{\"665\":1}}],[\"接收信号的设备\",{\"1\":{\"390\":1}}],[\"接收方在发送ack\",{\"1\":{\"367\":1}}],[\"接收由期约组成的可迭代对象\",{\"1\":{\"263\":2}}],[\"接收可迭代对象的原生语言特性包括\",{\"1\":{\"263\":1}}],[\"接收接受完毕后通知主进程确认导航\",{\"1\":{\"96\":1}}],[\"接下我们通过一个例子来说明两者区别\",{\"1\":{\"258\":1}}],[\"接下去我们详细介绍timers\",{\"1\":{\"256\":1}}],[\"接下来进入\",{\"1\":{\"544\":1}}],[\"接下来需要查询一下这个包的接收方\",{\"1\":{\"392\":1}}],[\"接下来的查询可以从缓存的位置开始向下进行\",{\"1\":{\"347\":1}}],[\"接下来我们需要委托操作系统将消息发送给web\",{\"1\":{\"339\":1}}],[\"接下来就是根据这些信息来生成http\",{\"1\":{\"336\":1}}],[\"接下来\",{\"1\":{\"22\":1,\"122\":1}}],[\"接触不多\",{\"1\":{\"187\":1}}],[\"接口进入双绞线以太网信号的本质是正负变化的电压\",{\"1\":{\"388\":1}}],[\"接口的内置类型\",{\"1\":{\"263\":1}}],[\"接口的对象的能力\",{\"1\":{\"263\":1}}],[\"接口\",{\"0\":{\"86\":1},\"1\":{\"66\":1,\"74\":1,\"263\":2,\"266\":1,\"273\":1}}],[\"方便我们调试代码\",{\"1\":{\"760\":1}}],[\"方式的\",{\"0\":{\"747\":1}}],[\"方案时\",{\"1\":{\"345\":1}}],[\"方向一致的矢量\",{\"1\":{\"197\":1}}],[\"方法目的\",{\"1\":{\"771\":1}}],[\"方法调用\",{\"1\":{\"749\":1}}],[\"方法调用函数时\",{\"1\":{\"296\":1}}],[\"方法可以接收一个\",{\"1\":{\"738\":1}}],[\"方法可以被调用很多次\",{\"1\":{\"281\":1}}],[\"方法名\",{\"1\":{\"667\":1}}],[\"方法执行时\",{\"1\":{\"651\":1}}],[\"方法中\",{\"1\":{\"636\":1}}],[\"方法中进行pushtarget\",{\"1\":{\"556\":1}}],[\"方法有实际的返回值会跳过后续的\",{\"1\":{\"634\":1}}],[\"方法对最新的vnode节点树与上一次渲染的旧vnode节点树进行对比并更新dom节点\",{\"1\":{\"582\":1}}],[\"方法返回指定对象上一个自有属性对应的属性描述符\",{\"1\":{\"563\":1}}],[\"方法返回的对象里\",{\"1\":{\"269\":1}}],[\"方法返回的迭代器对象\",{\"1\":{\"265\":1}}],[\"方法会被\",{\"1\":{\"636\":1}}],[\"方法会直接在一个对象上定义一个新属性\",{\"1\":{\"559\":1}}],[\"方法会将\",{\"1\":{\"554\":1}}],[\"方法会让生成器开始或恢复执行\",{\"1\":{\"268\":1}}],[\"方法创建一个新的函数\",{\"1\":{\"552\":1}}],[\"方法表示需要让web\",{\"1\":{\"335\":1}}],[\"方法阻止新属性添加到对象\",{\"1\":{\"312\":1}}],[\"方法定义属性时会返回true\",{\"1\":{\"294\":1}}],[\"方法定义对象属性时会返回对象\",{\"1\":{\"294\":1}}],[\"方法与捕获器拦截的方法具有相同的名称和函数签名\",{\"1\":{\"289\":1}}],[\"方法在安装插件时\",{\"1\":{\"738\":1}}],[\"方法在\",{\"1\":{\"293\":1}}],[\"方法在两个地方\",{\"1\":{\"287\":1}}],[\"方法在可迭代对象中遍历数据\",{\"1\":{\"265\":1}}],[\"方法即可\",{\"1\":{\"282\":1}}],[\"方法的\",{\"1\":{\"636\":1,\"738\":1}}],[\"方法的行为有点像\",{\"1\":{\"314\":1}}],[\"方法的参数为俩个回调函数\",{\"1\":{\"282\":1}}],[\"方法的对象或函数\",{\"1\":{\"278\":2}}],[\"方法的第一个值\",{\"1\":{\"271\":1}}],[\"方法的用处并不大\",{\"1\":{\"270\":1}}],[\"方法的返回值类似于迭代器\",{\"1\":{\"268\":1}}],[\"方法来恢复执行\",{\"1\":{\"269\":1}}],[\"方法后开始执行\",{\"1\":{\"268\":1}}],[\"方法按顺序迭代了数组\",{\"1\":{\"265\":1}}],[\"方法信息\",{\"1\":{\"70\":1}}],[\"方法或代码块内部声明\",{\"1\":{\"66\":1}}],[\"方法和属性名也应该使用帕斯卡命名法\",{\"1\":{\"66\":1}}],[\"方法\",{\"1\":{\"66\":1,\"76\":2,\"77\":1,\"260\":2,\"274\":1,\"289\":1,\"296\":1,\"301\":1,\"542\":3,\"543\":1,\"555\":1,\"559\":1,\"564\":1,\"566\":1,\"591\":1,\"601\":1,\"634\":2,\"646\":1,\"725\":1,\"726\":1,\"736\":1,\"799\":1}}],[\"方块要尽可能的大\",{\"1\":{\"43\":1}}],[\"中会定义一个掩码键\",{\"1\":{\"803\":1}}],[\"中最核心的负责编译的\",{\"1\":{\"776\":1}}],[\"中获取\",{\"1\":{\"654\":1}}],[\"中获取纹理颜色值\",{\"1\":{\"199\":1}}],[\"中匹配出record\",{\"1\":{\"650\":1}}],[\"中匹配对应的路由信息\",{\"1\":{\"644\":1}}],[\"中找出对应的\",{\"1\":{\"650\":1}}],[\"中找出所有静态根节点并打上标记\",{\"1\":{\"612\":1}}],[\"中找出所有静态节点并打上标记\",{\"1\":{\"612\":1}}],[\"中加入记录\",{\"1\":{\"649\":1}}],[\"中触发的所有关键事件\",{\"1\":{\"636\":1}}],[\"中间的变量exp\",{\"1\":{\"611\":1}}],[\"中都有\",{\"1\":{\"587\":1}}],[\"中删除\",{\"1\":{\"587\":1}}],[\"中创建\",{\"1\":{\"587\":1}}],[\"中没有被用到的模块可以不被打包到编译后的文件中\",{\"1\":{\"679\":1}}],[\"中没有而旧的\",{\"1\":{\"587\":1}}],[\"中没有\",{\"1\":{\"587\":1}}],[\"中内置的一个抽象组件\",{\"1\":{\"570\":1}}],[\"中添加的生命周期方法\",{\"1\":{\"543\":1}}],[\"中添加资源引用\",{\"1\":{\"517\":1}}],[\"中时\",{\"1\":{\"532\":1}}],[\"中使用图形和图表对数据进行可视化\",{\"1\":{\"464\":1}}],[\"中继电路的基本功能就是将输入的信号广播到集线器的所有端口上\",{\"1\":{\"390\":3}}],[\"中保存着全世界唯一的mac\",{\"1\":{\"380\":1}}],[\"中记录的信息\",{\"1\":{\"359\":1}}],[\"中被调用\",{\"1\":{\"305\":1,\"306\":1,\"309\":1,\"310\":1,\"311\":1,\"312\":1}}],[\"中断执行\",{\"0\":{\"269\":1}}],[\"中定时器指定的时间也不是准确时间\",{\"1\":{\"256\":1}}],[\"中位于队首的任务\",{\"1\":{\"251\":1}}],[\"中位数\",{\"1\":{\"9\":2}}],[\"中执行\",{\"1\":{\"251\":3}}],[\"中取出位于队首的回调任务\",{\"1\":{\"251\":1}}],[\"中非常重要\",{\"1\":{\"209\":1}}],[\"中必须有一个\",{\"1\":{\"200\":1}}],[\"中每个对应位置的最大值\",{\"1\":{\"195\":1}}],[\"中每个对应位置的最小值\",{\"1\":{\"195\":1}}],[\"中的虚拟\",{\"1\":{\"675\":1}}],[\"中的样式封装\",{\"1\":{\"619\":1}}],[\"中的响应式数据中的\",{\"1\":{\"523\":1}}],[\"中的key\",{\"1\":{\"521\":1}}],[\"中的事件循环的顺序\",{\"1\":{\"256\":1}}],[\"中的所有任务都执行完毕\",{\"1\":{\"251\":2}}],[\"中的所有元素并将它们相加\",{\"1\":{\"232\":1}}],[\"中的数组也支持循环遍历\",{\"1\":{\"232\":1}}],[\"中的数组变量可以用来存储一组相同类型的变量\",{\"1\":{\"232\":1}}],[\"中的第三个元素\",{\"1\":{\"232\":1}}],[\"中的最大值\",{\"1\":{\"195\":2}}],[\"中的最小值\",{\"1\":{\"195\":2}}],[\"中的\",{\"0\":{\"255\":1},\"1\":{\"175\":2,\"255\":1,\"549\":2,\"554\":1,\"624\":1,\"654\":1}}],[\"中的一种基本数据类型\",{\"1\":{\"76\":1}}],[\"中有\",{\"1\":{\"587\":1}}],[\"中有而旧的\",{\"1\":{\"587\":1}}],[\"中有块级元素插入时\",{\"1\":{\"175\":1}}],[\"中有一些关键字\",{\"1\":{\"66\":1,\"67\":1}}],[\"中了\",{\"1\":{\"174\":1}}],[\"中呢\",{\"1\":{\"174\":1}}],[\"中即可阻止垂直\",{\"1\":{\"174\":1}}],[\"中用于引入命名空间的一种机制\",{\"1\":{\"75\":1}}],[\"中用于组织代码的一种机制\",{\"1\":{\"74\":1}}],[\"中\",{\"1\":{\"66\":2,\"68\":1,\"78\":1,\"98\":2,\"100\":1,\"122\":1,\"175\":1,\"195\":1,\"232\":1,\"234\":2,\"240\":1,\"258\":1,\"263\":1,\"464\":1,\"523\":1,\"590\":1,\"646\":1,\"653\":1}}],[\"可通过\",{\"1\":{\"675\":1}}],[\"可方便测试\",{\"1\":{\"483\":1}}],[\"可扩展\",{\"1\":{\"311\":1}}],[\"可撤销代理\",{\"0\":{\"291\":1}}],[\"可能是一个变量\",{\"1\":{\"688\":1}}],[\"可能是对象\",{\"1\":{\"555\":1}}],[\"可能还是\",{\"1\":{\"282\":1}}],[\"可能被调用多次\",{\"1\":{\"281\":1}}],[\"可能变为解决或者拒绝状态\",{\"1\":{\"280\":1}}],[\"可能执行在前\",{\"1\":{\"257\":1}}],[\"可迭代对象\",{\"1\":{\"265\":1}}],[\"可迭代对象指的是任何具有专用迭代器方法\",{\"1\":{\"260\":1}}],[\"可迭代协议\",{\"0\":{\"263\":1},\"1\":{\"263\":1}}],[\"可选值\",{\"1\":{\"769\":1}}],[\"可选参数\",{\"1\":{\"199\":11}}],[\"可选\",{\"1\":{\"199\":4}}],[\"可用于修改用户的配置\",{\"1\":{\"713\":1}}],[\"可用于表示变换矩阵\",{\"1\":{\"193\":2}}],[\"可用于开发http\",{\"1\":{\"65\":1}}],[\"可替换元素\",{\"1\":{\"169\":1}}],[\"可替换元素实现固定宽高比\",{\"0\":{\"169\":1}}],[\"可以看到\",{\"1\":{\"799\":1}}],[\"可以加载插件的常用对象\",{\"0\":{\"735\":1}}],[\"可以让我们在命令行使用babel\",{\"1\":{\"701\":1}}],[\"可以让函数只接收某种类型的值\",{\"1\":{\"319\":1}}],[\"可以设置corejs属性来确定使用的corejs的版本\",{\"1\":{\"699\":1}}],[\"可以访问组件实例\",{\"1\":{\"648\":2}}],[\"可以访问对象的原型链\",{\"1\":{\"561\":1}}],[\"可以通过配置生成source\",{\"1\":{\"758\":1}}],[\"可以通过\",{\"1\":{\"636\":1}}],[\"可以被跳过\",{\"1\":{\"558\":1}}],[\"可以保证\",{\"1\":{\"558\":1}}],[\"可以保持对\",{\"1\":{\"328\":1}}],[\"可以注册插件\",{\"1\":{\"542\":1}}],[\"可以记住之前查询过的域名\",{\"1\":{\"347\":1}}],[\"可以理解\",{\"1\":{\"319\":1}}],[\"可以监控这个对象何时在何处被访问过\",{\"1\":{\"316\":1}}],[\"可以知道对象属性什么时候被访问\",{\"1\":{\"316\":1}}],[\"可以替代\",{\"1\":{\"295\":3}}],[\"可以替代=赋值操作符\",{\"1\":{\"295\":1}}],[\"可以替代对象属性访问操作符\",{\"1\":{\"295\":1}}],[\"可以直接作用于monorepos项目的子包\",{\"1\":{\"706\":1}}],[\"可以直接或间接在代理对象上调用\",{\"1\":{\"288\":1}}],[\"可以直接通过类名访问静态成员\",{\"1\":{\"81\":1}}],[\"可以给目标对象定义一个关联的代理对象\",{\"1\":{\"285\":1}}],[\"可以给其中一个元素外面包裹一层\",{\"1\":{\"174\":1}}],[\"可以下载测试套件\",{\"1\":{\"277\":1}}],[\"可以把计数器变量放到闭包里\",{\"1\":{\"266\":1}}],[\"可以将postcss单独抽离处理减少代码重复率\",{\"1\":{\"755\":1}}],[\"可以将babel看成就是一个编译器\",{\"1\":{\"707\":1}}],[\"可以将被代理的类绑定到一个全局实例集合\",{\"1\":{\"320\":1}}],[\"可以将指针指向数据结构的第一个成员\",{\"1\":{\"265\":1}}],[\"可以将其声明为\",{\"1\":{\"232\":1}}],[\"可以用于性能优化\",{\"1\":{\"241\":1}}],[\"可以用于访问\",{\"1\":{\"238\":1}}],[\"可以用于执行基于像素级别的操作\",{\"1\":{\"199\":1}}],[\"可以使用它来访问\",{\"1\":{\"737\":1}}],[\"可以使用这个级别\",{\"1\":{\"457\":1}}],[\"可以使用定义在\",{\"1\":{\"296\":1}}],[\"可以使用\",{\"1\":{\"232\":1,\"296\":1}}],[\"可以使用下标运算符\",{\"1\":{\"232\":1}}],[\"可以推测这四个变元分别响应红\",{\"1\":{\"209\":1}}],[\"可以是任何类型的对象\",{\"1\":{\"287\":1}}],[\"可以是标量\",{\"1\":{\"231\":5}}],[\"可以是标量或矢量\",{\"1\":{\"195\":9}}],[\"可以是\",{\"1\":{\"197\":5}}],[\"可以表示的有效数字位数为\",{\"1\":{\"230\":2}}],[\"可以表示屏幕上的任意位置\",{\"1\":{\"190\":1}}],[\"可以表示一个网站导航\",{\"1\":{\"139\":1}}],[\"可以得到一个伸缩容器\",{\"1\":{\"176\":1}}],[\"可以由以下字符组成\",{\"1\":{\"158\":1}}],[\"可以只控制1个维度\",{\"1\":{\"147\":1}}],[\"可以对\",{\"1\":{\"133\":1}}],[\"可以在自己喜欢的平台下开发实时应用\",{\"1\":{\"788\":1}}],[\"可以在代理对象中对这些操作加以控制\",{\"1\":{\"285\":1}}],[\"可以在同一程序集内访问\",{\"1\":{\"78\":1}}],[\"可以在声明它的类或结构及其派生类中访问\",{\"1\":{\"78\":1}}],[\"可以在任何地方访问\",{\"1\":{\"78\":1}}],[\"可以在名称前后添加\",{\"1\":{\"66\":1,\"67\":1}}],[\"可以为字段指定数据类型和访问修饰符\",{\"1\":{\"78\":1}}],[\"可以包含字段\",{\"1\":{\"76\":1}}],[\"可以估算出程序对计算机内存的使用程度\",{\"1\":{\"34\":1}}],[\"可以估算出程序对处理器的使用程度\",{\"1\":{\"33\":1}}],[\"三次握手\",{\"1\":{\"798\":1}}],[\"三个值时三选一\",{\"1\":{\"769\":1}}],[\"三个方法\",{\"1\":{\"542\":1,\"543\":2}}],[\"三个城市\",{\"1\":{\"18\":1}}],[\"三\",{\"0\":{\"206\":1},\"1\":{\"65\":1}}],[\"或小程序销毁后被用户再次打开\",{\"1\":{\"323\":1}}],[\"或拒绝态\",{\"1\":{\"280\":1}}],[\"或纹理值\",{\"1\":{\"199\":1}}],[\"或返回向量\",{\"1\":{\"195\":2}}],[\"或返回\",{\"1\":{\"195\":2}}],[\"或\",{\"1\":{\"163\":2,\"164\":2,\"174\":1,\"176\":1,\"195\":8,\"197\":5,\"199\":5,\"221\":1,\"231\":10,\"281\":3,\"282\":1,\"517\":1,\"622\":1,\"713\":4,\"803\":3}}],[\"或http\",{\"1\":{\"65\":1}}],[\"或者可以如何计算出扩展数据的长度\",{\"1\":{\"803\":1}}],[\"或者无意的连接\",{\"1\":{\"799\":1}}],[\"或者不返回内容\",{\"1\":{\"777\":1,\"780\":1}}],[\"或者说从后到前的\",{\"1\":{\"755\":3}}],[\"或者说从下到上\",{\"1\":{\"755\":3}}],[\"或者说缩小规模\",{\"1\":{\"43\":1}}],[\"或者是一个\",{\"1\":{\"603\":1}}],[\"或者是路由器在转发网络包时\",{\"1\":{\"406\":1}}],[\"或者发现元素的标签不相同了\",{\"1\":{\"589\":1}}],[\"或者修改一个对象的现有属性\",{\"1\":{\"559\":1}}],[\"或者default\",{\"1\":{\"334\":1}}],[\"或者在属性不存在时返回undefined\",{\"1\":{\"306\":1}}],[\"或者对同一个参数进行多次调用\",{\"1\":{\"282\":1}}],[\"或者reject\",{\"1\":{\"280\":1}}],[\"或者\",{\"1\":{\"165\":1,\"187\":1,\"265\":1,\"334\":1,\"558\":2,\"559\":1,\"588\":1,\"596\":1,\"624\":1,\"706\":2,\"727\":2}}],[\"或者http\",{\"1\":{\"65\":1}}],[\"分类\",{\"0\":{\"777\":1}}],[\"分开\",{\"1\":{\"745\":1,\"747\":1}}],[\"分词\",{\"1\":{\"687\":1}}],[\"分析类\",{\"1\":{\"466\":1}}],[\"分布式\",{\"0\":{\"447\":1}}],[\"分离器的作用\",{\"0\":{\"422\":1}}],[\"分别处理\",{\"1\":{\"549\":1}}],[\"分别写入不同的颜色值\",{\"1\":{\"240\":1}}],[\"分别表示向量在不同维度上的布尔值\",{\"1\":{\"231\":1}}],[\"分别表示向量在\",{\"1\":{\"231\":6}}],[\"分别是画布大小和鼠标位置和时间\",{\"1\":{\"190\":1}}],[\"分为前置pre和后置post\",{\"1\":{\"746\":1}}],[\"分为\",{\"1\":{\"187\":1}}],[\"分为若干个子序列进行插入排序\",{\"1\":{\"56\":1}}],[\"分成两个方面\",{\"1\":{\"65\":1}}],[\"是由客户端挑选出来的\",{\"1\":{\"804\":1}}],[\"是被禁止的\",{\"1\":{\"801\":1}}],[\"是配套的\",{\"1\":{\"799\":1}}],[\"是同步的\",{\"1\":{\"777\":1}}],[\"是通过打包压缩的\",{\"1\":{\"757\":1}}],[\"是全量的对比\",{\"1\":{\"675\":1}}],[\"是有限的\",{\"1\":{\"613\":1}}],[\"是先定义只包含运行时版本的$mount方法\",{\"1\":{\"601\":1}}],[\"是真实元素\",{\"1\":{\"588\":1}}],[\"是vue3中提供的事件缓存对象\",{\"1\":{\"678\":1}}],[\"是vue组件\",{\"1\":{\"580\":1}}],[\"是vue实例初始化的入口方法\",{\"1\":{\"543\":1}}],[\"是函数组件\",{\"1\":{\"580\":1}}],[\"是因为一会儿要通过\",{\"1\":{\"561\":1}}],[\"是设置数据响应式\",{\"1\":{\"551\":1}}],[\"是内置的指令和组件\",{\"1\":{\"540\":1}}],[\"是当前操作的watcher\",{\"1\":{\"521\":1}}],[\"是基于\",{\"1\":{\"517\":1}}],[\"是基于包含块的宽度来计算的\",{\"1\":{\"170\":1}}],[\"是在\",{\"1\":{\"517\":1}}],[\"是对项目自动化测试的另一种方式\",{\"1\":{\"517\":1}}],[\"是针对程序模块\",{\"1\":{\"482\":1}}],[\"是服务器端数据处理管道\",{\"1\":{\"464\":1}}],[\"是三个开源项目的首字母缩写\",{\"1\":{\"464\":1}}],[\"是为了抑制噪声\",{\"0\":{\"389\":1}}],[\"是否为自闭合标签的标志\",{\"1\":{\"608\":1}}],[\"是否为真实元素\",{\"1\":{\"588\":1}}],[\"是否是\",{\"1\":{\"607\":1}}],[\"是否router\",{\"1\":{\"571\":1}}],[\"是否name配置不对\",{\"1\":{\"571\":1}}],[\"是否已经入队\",{\"1\":{\"557\":1}}],[\"是否已经不可扩展\",{\"1\":{\"312\":1}}],[\"是否可扩展\",{\"1\":{\"311\":1}}],[\"是否重新加载配置\",{\"1\":{\"89\":2}}],[\"是幂等的\",{\"1\":{\"291\":1}}],[\"是undefined\",{\"1\":{\"287\":1}}],[\"是拒绝态\",{\"1\":{\"282\":1}}],[\"是解决态\",{\"1\":{\"282\":1}}],[\"是等待态\",{\"1\":{\"282\":1}}],[\"是最大值\",{\"1\":{\"195\":2}}],[\"是最小值\",{\"1\":{\"195\":2}}],[\"是零则返回\",{\"1\":{\"195\":1}}],[\"是负数则返回\",{\"1\":{\"195\":1}}],[\"是正数则返回\",{\"1\":{\"195\":1}}],[\"是不会产生\",{\"1\":{\"187\":1}}],[\"是用来处理和在视觉媒体上显示文档时使用的计算规则\",{\"1\":{\"183\":1}}],[\"是指色彩的纯度\",{\"1\":{\"154\":1}}],[\"是色彩的基本属性\",{\"1\":{\"154\":1}}],[\"是生成页面的基础数据结构\",{\"1\":{\"133\":1}}],[\"是和执行上下文绑定的\",{\"1\":{\"129\":1}}],[\"是类或结构中的变量\",{\"1\":{\"78\":1}}],[\"是cli的实现\",{\"1\":{\"71\":1}}],[\"是一系列的指令\",{\"1\":{\"209\":1}}],[\"是一个在不同的前端工具之间\",{\"1\":{\"709\":1}}],[\"是一个具有\",{\"1\":{\"636\":1}}],[\"是一个子组件\",{\"1\":{\"591\":1}}],[\"是一个组件并且组件创建成功\",{\"1\":{\"591\":1}}],[\"是一个组件\",{\"1\":{\"590\":1,\"591\":1}}],[\"是一个搜索和分析引擎\",{\"1\":{\"464\":1}}],[\"是一个对象或函数\",{\"1\":{\"282\":1}}],[\"是一个\",{\"1\":{\"282\":2,\"787\":1}}],[\"是一个函数\",{\"1\":{\"281\":2,\"282\":1}}],[\"是一个布尔值\",{\"1\":{\"265\":1}}],[\"是一个至关重要的阶段\",{\"1\":{\"256\":1}}],[\"是一个基于事件驱动的跨平台抽象层\",{\"1\":{\"255\":1}}],[\"是一个四维向量\",{\"1\":{\"199\":1}}],[\"是一个三维向量\",{\"1\":{\"199\":1}}],[\"是一个用于将值限制在指定范围内的\",{\"1\":{\"192\":1}}],[\"是一个包含单位的\",{\"1\":{\"165\":1}}],[\"是一个可运行受管理代码\",{\"1\":{\"70\":1}}],[\"是一道安全防护线\",{\"1\":{\"133\":1}}],[\"是一种用于\",{\"1\":{\"792\":1}}],[\"是一种在程序编译时将中间语言\",{\"1\":{\"73\":1}}],[\"是一种在程序运行时将中间语言\",{\"1\":{\"72\":1}}],[\"是一种面向对象的编程语言\",{\"1\":{\"65\":1}}],[\"是微软为\",{\"1\":{\"70\":1}}],[\"是区分大小写的\",{\"1\":{\"66\":1}}],[\"是\",{\"1\":{\"65\":1,\"70\":1,\"173\":1,\"312\":1,\"603\":1,\"624\":1,\"803\":1}}],[\"是主流\",{\"1\":{\"65\":1}}],[\"是每次探路的最短路径\",{\"1\":{\"1\":1}}],[\"它基于\",{\"1\":{\"796\":1}}],[\"它指向sourcemap\",{\"1\":{\"758\":1}}],[\"它也可以与\",{\"1\":{\"713\":1}}],[\"它接受两个字母的国家\",{\"1\":{\"713\":1}}],[\"它通过使用\",{\"1\":{\"619\":1}}],[\"它有一些注意事项\",{\"1\":{\"619\":1}}],[\"它有一个自己的队列\",{\"1\":{\"257\":1}}],[\"它的目标是构建可以在不同浏览器和移动设备上使用的实时应用\",{\"1\":{\"787\":1}}],[\"它的工作流程就是将各个插件串联起来\",{\"1\":{\"776\":1}}],[\"它的\",{\"1\":{\"619\":1}}],[\"它的职责就是负责将\",{\"1\":{\"134\":1}}],[\"它只能是\",{\"1\":{\"613\":1}}],[\"它只会在\",{\"1\":{\"280\":2}}],[\"它可以是一个字符串\",{\"1\":{\"584\":1}}],[\"它可以同时进行发送和接收操作\",{\"1\":{\"395\":1}}],[\"它可以将命名空间中的类型引入到当前代码文件中\",{\"1\":{\"75\":1}}],[\"它可以将相关的类\",{\"1\":{\"74\":1}}],[\"它包含在操作系统的socket\",{\"1\":{\"341\":1}}],[\"它包含了关于代码的元数据信息\",{\"1\":{\"70\":1}}],[\"它尝试让\",{\"1\":{\"282\":1}}],[\"它以一个\",{\"1\":{\"282\":1}}],[\"它一定不能被调用多次\",{\"1\":{\"281\":2}}],[\"它一定不能在\",{\"1\":{\"281\":2}}],[\"它必须在\",{\"1\":{\"281\":2}}],[\"它必须被忽略\",{\"1\":{\"281\":2}}],[\"它生成的值会出现在\",{\"1\":{\"269\":1}}],[\"它内部所有的\",{\"1\":{\"253\":1}}],[\"它会自动根据浏览器从\",{\"1\":{\"788\":1}}],[\"它会被浏览器在执行时解析\",{\"1\":{\"760\":1}}],[\"它会被分割成多盒子\",{\"1\":{\"175\":1}}],[\"它会在触发指定\",{\"1\":{\"568\":1}}],[\"它会根据消息中的查询内容进行查询\",{\"1\":{\"343\":1}}],[\"它会\",{\"1\":{\"253\":1}}],[\"它会动态接收字节流\",{\"1\":{\"134\":1}}],[\"它规定了内部的块级盒子如何布局\",{\"1\":{\"174\":1}}],[\"它们会被逐一调用\",{\"1\":{\"667\":1}}],[\"它们会按照顺序反复运行\",{\"1\":{\"256\":1}}],[\"它们分别是\",{\"1\":{\"590\":1}}],[\"它们如果被调用\",{\"1\":{\"281\":1}}],[\"它们有一个名为\",{\"1\":{\"261\":1}}],[\"它们的数据类型通常为\",{\"1\":{\"210\":1}}],[\"它们本身有像素宽度和高度的概念\",{\"1\":{\"169\":1}}],[\"它们都遵守通用语言规范\",{\"1\":{\"70\":1}}],[\"它首先调用函数division\",{\"1\":{\"118\":1}}],[\"它是任意类型的\",{\"1\":{\"584\":1}}],[\"它是告诉发送方目前已接收的数据的最后位置在哪里\",{\"1\":{\"367\":1}}],[\"它是一个\",{\"1\":{\"584\":1}}],[\"它是一个独立的渲染区域\",{\"1\":{\"174\":1}}],[\"它是一种注入型的漏洞\",{\"1\":{\"476\":1}}],[\"它是一种通过规则的网格细分计算机图形图像并分别渲染图块\",{\"1\":{\"106\":1}}],[\"它是一种用户自定义的数据类型\",{\"1\":{\"76\":1}}],[\"它是\",{\"1\":{\"71\":1,\"766\":1}}],[\"它提供了运行受管理代码所需要的内置数据类型\",{\"1\":{\"70\":1}}],[\"它支持值类型和引用类型\",{\"1\":{\"70\":1}}],[\"它将会用值\",{\"1\":{\"282\":1}}],[\"它将不同的任务分配给不同的线程\",{\"1\":{\"255\":1}}],[\"它将cil代码编译为机器代码\",{\"1\":{\"72\":1,\"73\":1}}],[\"它将源代码编译成cil代码\",{\"1\":{\"70\":1}}],[\"它将使得\",{\"1\":{\"65\":1}}],[\"它使用c\",{\"1\":{\"65\":1}}],[\"它就是要在这间教室上的第一堂课\",{\"1\":{\"22\":1}}],[\"一开始的握手需要借助\",{\"1\":{\"798\":1}}],[\"一开始执行栈的同步任务\",{\"1\":{\"256\":1}}],[\"一直等待\",{\"1\":{\"794\":1}}],[\"一直匹配属性attrs\",{\"1\":{\"607\":1}}],[\"一串base64\",{\"1\":{\"759\":1}}],[\"一起使用\",{\"1\":{\"713\":1}}],[\"一样\",{\"1\":{\"517\":1,\"596\":1}}],[\"一段编写良好的代码一定是\",{\"1\":{\"483\":1}}],[\"一台dns\",{\"1\":{\"347\":1}}],[\"一等函数代替操作符\",{\"0\":{\"295\":1}}],[\"一定被作为函数调用\",{\"1\":{\"281\":1}}],[\"一定不能被调用\",{\"1\":{\"281\":1}}],[\"一定不能改变\",{\"1\":{\"280\":1}}],[\"一定不能转换为任何其它状态\",{\"1\":{\"280\":2}}],[\"一元操作符\",{\"1\":{\"221\":1}}],[\"一套布局\",{\"1\":{\"180\":1}}],[\"一般我们用实例方法而不是这三个类方法\",{\"1\":{\"542\":1}}],[\"一般不会使用\",{\"1\":{\"457\":1}}],[\"一般家用的接入网方式包括\",{\"1\":{\"418\":1}}],[\"一般来说\",{\"1\":{\"335\":1}}],[\"一般左右边贴紧其包含块\",{\"1\":{\"175\":1}}],[\"一般情况下全为\",{\"1\":{\"803\":1}}],[\"一般情况下\",{\"1\":{\"117\":1}}],[\"一些元数据\",{\"1\":{\"723\":1}}],[\"一些配置的处理\",{\"1\":{\"604\":1}}],[\"一些全局方法\",{\"1\":{\"543\":1}}],[\"一些浏览器\",{\"1\":{\"152\":1}}],[\"一些不安全的内容在\",{\"1\":{\"133\":1}}],[\"一个发送\",{\"1\":{\"793\":1}}],[\"一个接受\",{\"1\":{\"793\":1}}],[\"一个接一个地放置\",{\"1\":{\"174\":1}}],[\"一个与match\",{\"1\":{\"608\":1}}],[\"一个同时包含编译器和运行时的完整版本\",{\"1\":{\"600\":1}}],[\"一个只包含运行时的版本\",{\"1\":{\"600\":1}}],[\"一个是\",{\"1\":{\"600\":1}}],[\"一个是设备的\",{\"1\":{\"392\":1}}],[\"一个空函数\",{\"1\":{\"559\":1}}],[\"一个组件的用户\",{\"1\":{\"558\":1}}],[\"一个公有地址就可以对应几万个私有地址\",{\"1\":{\"410\":1}}],[\"一个看点\",{\"1\":{\"386\":1}}],[\"一个对象或\",{\"1\":{\"310\":1}}],[\"一个典型的例子就是\",{\"1\":{\"300\":1}}],[\"一个通常以函数作为属性的对象\",{\"1\":{\"287\":1}}],[\"一个拥有符合这个规范的行为的\",{\"1\":{\"278\":1}}],[\"一个偏移量\",{\"1\":{\"199\":1}}],[\"一个偏差值\",{\"1\":{\"199\":4}}],[\"一个矢量\",{\"1\":{\"197\":3}}],[\"一个逆矩阵与其投影矩阵相乘的结果等于单位矩阵\",{\"1\":{\"196\":1}}],[\"一个\",{\"1\":{\"196\":2,\"197\":1,\"199\":2,\"280\":3,\"584\":1,\"736\":1,\"737\":1}}],[\"一个包含三个浮点数的向量\",{\"1\":{\"196\":3}}],[\"一个页面区段\",{\"1\":{\"185\":1}}],[\"一个整数可能额外包含\",{\"1\":{\"163\":1}}],[\"一个整数包含\",{\"1\":{\"163\":1}}],[\"一个进程可以启动和管理多个线程\",{\"1\":{\"94\":1}}],[\"一个二维数组\",{\"1\":{\"18\":1}}],[\"一\",{\"0\":{\"202\":1},\"1\":{\"65\":1}}],[\"类本身\",{\"1\":{\"299\":2}}],[\"类似react的\",{\"1\":{\"683\":1}}],[\"类似rgba\",{\"1\":{\"151\":1}}],[\"类似于cheap\",{\"1\":{\"766\":1}}],[\"类似于react的<><\",{\"1\":{\"682\":1}}],[\"类似于函数\",{\"1\":{\"269\":1}}],[\"类似\",{\"1\":{\"233\":1}}],[\"类似数组的方式\",{\"1\":{\"80\":1}}],[\"类的一个静态属性\",{\"1\":{\"563\":1}}],[\"类的update方法\",{\"1\":{\"557\":1,\"564\":1}}],[\"类的名称可以看出它们之间的联系\",{\"1\":{\"138\":1}}],[\"类的变量\",{\"1\":{\"77\":1}}],[\"类声明的嵌套类型\",{\"1\":{\"77\":1}}],[\"类支持的运算符\",{\"1\":{\"77\":1}}],[\"类可以描述\",{\"1\":{\"590\":1}}],[\"类可以执行的计算和操作\",{\"1\":{\"77\":1}}],[\"类可以生成的通知\",{\"1\":{\"77\":1}}],[\"类可以继承自其他类\",{\"1\":{\"76\":1}}],[\"类是c\",{\"1\":{\"76\":1}}],[\"类型不同规范的方法也就不一样\",{\"1\":{\"584\":1}}],[\"类型方法的执行依赖\",{\"1\":{\"300\":1}}],[\"类型上有对应的方法\",{\"1\":{\"293\":1}}],[\"类型在\",{\"1\":{\"209\":1}}],[\"类型的\",{\"1\":{\"234\":2}}],[\"类型的三维纹理坐标\",{\"1\":{\"199\":2}}],[\"类型的纹理坐标偏移量\",{\"1\":{\"199\":2}}],[\"类型的纹理坐标\",{\"1\":{\"199\":2}}],[\"类型的文件\",{\"1\":{\"134\":1}}],[\"类型可以是sampler2d\",{\"1\":{\"199\":3}}],[\"类型\",{\"1\":{\"199\":15,\"209\":1,\"232\":1,\"239\":18,\"240\":14,\"300\":1,\"584\":2}}],[\"类型为ivec\",{\"1\":{\"199\":1}}],[\"类型为\",{\"1\":{\"199\":39}}],[\"类型为浮点数的变量\",{\"1\":{\"196\":1}}],[\"类型为矩阵的变量\",{\"1\":{\"196\":1}}],[\"类型和长度为标量或矢量\",{\"1\":{\"198\":16}}],[\"类型和长度可以是任何\",{\"1\":{\"195\":2}}],[\"类型和长度与\",{\"1\":{\"195\":6}}],[\"类型检查\",{\"1\":{\"71\":1}}],[\"类型系统\",{\"1\":{\"70\":1}}],[\"类名和接口名应该使用帕斯卡命名法\",{\"1\":{\"66\":1}}],[\"类\",{\"0\":{\"76\":1,\"660\":1},\"1\":{\"64\":1,\"66\":1,\"184\":1}}],[\"设计的\",{\"1\":{\"406\":1}}],[\"设计的初衷就仅仅是通过\",{\"1\":{\"187\":1}}],[\"设计在\",{\"1\":{\"257\":2}}],[\"设置corejs的版本\",{\"1\":{\"699\":1}}],[\"设置以什么样的方式来使用polyfill\",{\"1\":{\"699\":1}}],[\"设置\",{\"1\":{\"698\":1,\"801\":1}}],[\"设置新的storevm\",{\"1\":{\"663\":1}}],[\"设置lastindex\",{\"1\":{\"611\":1}}],[\"设置响应式\",{\"1\":{\"561\":1}}],[\"设置对象的原型\",{\"1\":{\"310\":1}}],[\"设置的值\",{\"1\":{\"303\":1}}],[\"设置的属性的名称\",{\"1\":{\"303\":1}}],[\"设置深度值\",{\"1\":{\"240\":1}}],[\"设置点的大小并进行颜色混合\",{\"1\":{\"239\":1}}],[\"设置渲染点的大小\",{\"1\":{\"239\":1}}],[\"设置颜色为y对应的灰色\",{\"1\":{\"190\":1}}],[\"设置为当前\",{\"1\":{\"523\":1}}],[\"设置为\",{\"1\":{\"176\":1,\"563\":1}}],[\"设置其为\",{\"1\":{\"175\":1}}],[\"设置定位\",{\"1\":{\"174\":1}}],[\"设置浮动\",{\"1\":{\"174\":1}}],[\"设置元素类型为块\",{\"1\":{\"145\":1}}],[\"设置线条长度\",{\"1\":{\"82\":1}}],[\"设置指定索引的值\",{\"1\":{\"80\":1}}],[\"设置属性\",{\"1\":{\"77\":1}}],[\"设置桶的默认数量为5\",{\"1\":{\"61\":1}}],[\"设多个数组为桶\",{\"1\":{\"61\":1}}],[\"桶的初始化\",{\"1\":{\"61\":1}}],[\"桶排序\",{\"0\":{\"61\":1}}],[\"每隔一段时间就询问一次\",{\"1\":{\"793\":1}}],[\"每当检测到一个文件变化\",{\"1\":{\"737\":1}}],[\"每当进入某一个阶段的时候\",{\"1\":{\"256\":1}}],[\"每执行一个宏任务后就去执行一个微任务\",{\"1\":{\"256\":1}}],[\"每次都会重新创建然后再渲染\",{\"1\":{\"676\":1}}],[\"每次插入新实例时都会发送消息\",{\"1\":{\"320\":1}}],[\"每次在代理对象上调用这些基本操作时\",{\"1\":{\"288\":1}}],[\"每次在上次能跳到的范围\",{\"1\":{\"23\":1}}],[\"每次注册一组\",{\"1\":{\"281\":1}}],[\"每次成功调用\",{\"1\":{\"265\":1}}],[\"每次宏任务执行完毕后会进行\",{\"1\":{\"249\":1}}],[\"每次从事件队列中获取一个事件回调并且放到执行栈中的就是一个宏任务\",{\"1\":{\"249\":1}}],[\"每一个\",{\"1\":{\"246\":1}}],[\"每个部分都会相对于当前目录解析\",{\"1\":{\"745\":1,\"747\":1}}],[\"每个浏览器的最后\",{\"1\":{\"713\":1}}],[\"每个浏览器最新2个版本\",{\"1\":{\"712\":1}}],[\"每个节点不论写死的还是动态的都会一层一层比较\",{\"1\":{\"675\":1}}],[\"每个组件的render方法\",{\"1\":{\"566\":1}}],[\"每个测试用例可以关联某个模块\",{\"1\":{\"483\":1}}],[\"每个波都采用正交振幅调制\",{\"1\":{\"421\":1}}],[\"每个包都是独立传输的\",{\"0\":{\"387\":1}}],[\"每个方法都会通过console\",{\"1\":{\"320\":1}}],[\"每个捕获器都对应一种基本操作\",{\"1\":{\"288\":1}}],[\"每个处理程序对象可以包含零个或多个捕获器\",{\"1\":{\"288\":1}}],[\"每个参数包括类型和名称\",{\"1\":{\"238\":1}}],[\"每个线程和其他线程之间不能有数据交换\",{\"1\":{\"210\":1}}],[\"每个\",{\"1\":{\"200\":1,\"246\":1,\"748\":1}}],[\"每个元素的\",{\"1\":{\"174\":1}}],[\"每个执行上下文的变量环境中\",{\"1\":{\"124\":1}}],[\"每个图层会拆分成多个绘制指令\",{\"1\":{\"104\":1}}],[\"每放一个元素就将\",{\"1\":{\"60\":1}}],[\"项目都会自动生成的一个文件\",{\"1\":{\"517\":1}}],[\"项目的配置文件\",{\"1\":{\"517\":1}}],[\"项目的包名一致\",{\"1\":{\"517\":1}}],[\"项\",{\"1\":{\"60\":1}}],[\"创建插件\",{\"0\":{\"736\":1}}],[\"创建的\",{\"1\":{\"623\":1}}],[\"创建的函数执行上下文会被销毁\",{\"1\":{\"117\":1}}],[\"创建组件实例\",{\"1\":{\"591\":1}}],[\"创建组件实例并挂载\",{\"1\":{\"590\":1}}],[\"创建文本节点\",{\"1\":{\"590\":1}}],[\"创建注释节点\",{\"1\":{\"590\":1}}],[\"创建元素节点\",{\"1\":{\"590\":1}}],[\"创建新的\",{\"1\":{\"589\":1}}],[\"创建整棵\",{\"1\":{\"588\":1,\"590\":1}}],[\"创建节点\",{\"1\":{\"587\":1}}],[\"创建普通vnode\",{\"1\":{\"580\":1}}],[\"创建vnode\",{\"1\":{\"580\":1}}],[\"创建空vnode\",{\"1\":{\"580\":1}}],[\"创建空代理\",{\"0\":{\"287\":1}}],[\"创建实例时这个属性决定是否忽略某个组件\",{\"1\":{\"573\":1}}],[\"创建并返回一个新的观察器\",{\"1\":{\"568\":1}}],[\"创建computedwatcher\",{\"1\":{\"521\":1}}],[\"创建项目的包名必须和\",{\"1\":{\"517\":1}}],[\"创建项目\",{\"1\":{\"517\":1}}],[\"创建嵌套字\",{\"0\":{\"354\":1}}],[\"创建套接字之后\",{\"1\":{\"358\":1,\"372\":1}}],[\"创建套接字时\",{\"1\":{\"357\":1}}],[\"创建套接字阶段\",{\"0\":{\"350\":1},\"1\":{\"349\":1}}],[\"创建套接字\",{\"1\":{\"349\":1}}],[\"创建映射\",{\"1\":{\"263\":1}}],[\"创建集合\",{\"1\":{\"263\":1}}],[\"创建\",{\"1\":{\"174\":1,\"558\":1,\"776\":1}}],[\"创建全局上下文\",{\"1\":{\"117\":1}}],[\"创建一棵只包含可见元素的布局树\",{\"1\":{\"101\":1}}],[\"创建一个组件类型的\",{\"1\":{\"584\":1}}],[\"创建一个新的test\",{\"1\":{\"461\":1}}],[\"创建一个新数组\",{\"1\":{\"60\":1}}],[\"创建一个代理对象a\",{\"1\":{\"320\":1}}],[\"创建一个指针对象\",{\"1\":{\"265\":1}}],[\"创建一个\",{\"1\":{\"175\":1,\"588\":1}}],[\"创建一个json文件\",{\"1\":{\"89\":1}}],[\"创建布局树\",{\"1\":{\"101\":1}}],[\"创建结果数组\",{\"1\":{\"60\":1}}],[\"加入记录\",{\"1\":{\"649\":1}}],[\"加入更新queue队列\",{\"1\":{\"556\":1}}],[\"加功能\",{\"1\":{\"483\":1}}],[\"加载策略\",{\"0\":{\"495\":1}}],[\"加载不会阻塞\",{\"1\":{\"108\":1}}],[\"加载不会影响\",{\"1\":{\"108\":1}}],[\"加载\",{\"0\":{\"96\":1},\"1\":{\"108\":2}}],[\"加\",{\"1\":{\"60\":1}}],[\"其它vue组件不包含此属性\",{\"1\":{\"642\":1}}],[\"其次执行\",{\"1\":{\"325\":1}}],[\"其实很少\",{\"1\":{\"540\":1}}],[\"其实看到单词\",{\"1\":{\"517\":1}}],[\"其实没必要每次都向发送方更新窗口大小\",{\"1\":{\"367\":1}}],[\"其实\",{\"1\":{\"270\":1}}],[\"其实就是把元素当成了容器\",{\"1\":{\"187\":1}}],[\"其实就相当于把该元素当成了容器\",{\"1\":{\"183\":1}}],[\"其对于范围和精度的要求必须不低于\",{\"1\":{\"241\":1}}],[\"其他的类别\",{\"1\":{\"777\":1}}],[\"其他类型的文件\",{\"1\":{\"744\":1}}],[\"其他修改state方法均是非法修改\",{\"1\":{\"662\":1}}],[\"其他和普通缓存没有区别\",{\"1\":{\"574\":1}}],[\"其他用户访问正常访问网站\",{\"1\":{\"472\":1}}],[\"其他操作\",{\"1\":{\"199\":2}}],[\"其他行内元素则可以在此父元素下垂直居中\",{\"1\":{\"175\":1}}],[\"其水平渲染规则由\",{\"1\":{\"175\":1}}],[\"其内部定义的变量就会从词法环境的栈顶弹出\",{\"1\":{\"122\":1}}],[\"其生命周期伴随着页面的生命周期\",{\"1\":{\"119\":1}}],[\"其作用域限定在声明它们的区域\",{\"1\":{\"66\":1}}],[\"其元素默认值都为\",{\"1\":{\"60\":1}}],[\"其长度是\",{\"1\":{\"60\":1}}],[\"其中两根信号线中产生的噪声电流方向就会相反\",{\"1\":{\"389\":1}}],[\"其中包含的程序组件可以让其他的应用程序调用操作系统的网络功能\",{\"1\":{\"341\":1}}],[\"其中包含迭代器返回的下一个值\",{\"1\":{\"265\":1}}],[\"其中典型的例子包括读取uri\",{\"1\":{\"335\":1}}],[\"其中的接收方\",{\"1\":{\"401\":1}}],[\"其中的\",{\"1\":{\"231\":7,\"400\":1}}],[\"其中的前三个分量表示所需要计算的纹理坐标\",{\"1\":{\"199\":2}}],[\"其中输入矩阵\",{\"1\":{\"196\":1}}],[\"其中f\",{\"1\":{\"33\":1}}],[\"其中\",{\"1\":{\"18\":1,\"65\":1,\"175\":1,\"190\":2,\"195\":4,\"198\":1,\"240\":1,\"256\":1,\"389\":1,\"803\":1}}],[\"计时完毕后会通知事件触发线程\",{\"1\":{\"247\":1}}],[\"计数排序\",{\"0\":{\"60\":1}}],[\"计算公式为\",{\"1\":{\"801\":1}}],[\"计算结果会缓存的原理\",{\"1\":{\"554\":1}}],[\"计算顶点位置的裁剪坐标\",{\"1\":{\"239\":2}}],[\"计算顶点到相机的距离\",{\"1\":{\"239\":1}}],[\"计算与雾起点之间的距离并进行颜色混合\",{\"1\":{\"239\":1}}],[\"计算像素与雾起点之间的距离\",{\"1\":{\"239\":1}}],[\"计算深度值\",{\"1\":{\"239\":1}}],[\"计算纹理矩阵的逆转置矩阵\",{\"1\":{\"239\":1}}],[\"计算模型视图投影矩阵的逆转置矩阵\",{\"1\":{\"239\":1}}],[\"计算雾的深度值\",{\"1\":{\"239\":1}}],[\"计算雾效果\",{\"1\":{\"239\":1}}],[\"计算画布的面积\",{\"1\":{\"230\":1}}],[\"计算球体的体积\",{\"1\":{\"230\":2}}],[\"计算一个立方体数组纹理的阴影值\",{\"1\":{\"199\":1}}],[\"计算一个立方体纹理的阴影值\",{\"1\":{\"199\":1}}],[\"计算一个转置矩阵\",{\"1\":{\"196\":1}}],[\"计算双曲余弦函数的值\",{\"1\":{\"198\":1}}],[\"计算双曲余弦函数\",{\"1\":{\"198\":1}}],[\"计算双曲正切函数的值\",{\"1\":{\"198\":1}}],[\"计算双曲正切函数\",{\"1\":{\"198\":1}}],[\"计算双曲正切为\",{\"1\":{\"198\":1}}],[\"计算双曲正弦函数的值\",{\"1\":{\"198\":1}}],[\"计算双曲正弦函数\",{\"1\":{\"198\":1}}],[\"计算直角三角形的角度\",{\"1\":{\"198\":1}}],[\"计算反双曲正切值\",{\"1\":{\"198\":1}}],[\"计算反正切值\",{\"1\":{\"198\":1}}],[\"计算反正弦值\",{\"1\":{\"198\":1}}],[\"计算反余弦值\",{\"1\":{\"198\":1}}],[\"计算正切值\",{\"1\":{\"198\":1}}],[\"计算正弦值\",{\"1\":{\"198\":1}}],[\"计算余弦值\",{\"1\":{\"198\":1}}],[\"计算平方根的倒数\",{\"1\":{\"198\":1}}],[\"计算平方根\",{\"1\":{\"198\":1}}],[\"计算以\",{\"1\":{\"198\":2}}],[\"计算底数为\",{\"1\":{\"198\":1}}],[\"计算函数\",{\"0\":{\"198\":1}}],[\"计算逆矩阵\",{\"1\":{\"196\":1}}],[\"计算矢量的余数\",{\"1\":{\"195\":1}}],[\"计算矢量的小数部分\",{\"1\":{\"195\":1}}],[\"计算矢量的上舍整数\",{\"1\":{\"195\":1}}],[\"计算矢量的截断整数\",{\"1\":{\"195\":1}}],[\"计算矢量的下舍整数\",{\"1\":{\"195\":1}}],[\"计算矢量的符号\",{\"1\":{\"195\":1}}],[\"计算矢量的绝对值\",{\"1\":{\"195\":1}}],[\"计算标量的余数\",{\"1\":{\"195\":1}}],[\"计算标量的小数部分\",{\"1\":{\"195\":1}}],[\"计算标量的上舍整数\",{\"1\":{\"195\":1}}],[\"计算标量的截断整数\",{\"1\":{\"195\":1}}],[\"计算标量的下舍整数\",{\"1\":{\"195\":1}}],[\"计算标量的符号\",{\"1\":{\"195\":1}}],[\"计算标量的绝对值\",{\"1\":{\"195\":1}}],[\"计算参数\",{\"1\":{\"195\":1}}],[\"计算st点在曲线上的位置\",{\"1\":{\"190\":1}}],[\"计算x的5次方\",{\"1\":{\"190\":1}}],[\"计算规则来确定\",{\"1\":{\"175\":1}}],[\"计算\",{\"1\":{\"174\":2,\"195\":1,\"198\":14,\"230\":1,\"554\":1}}],[\"计算样式\",{\"1\":{\"102\":1,\"103\":1,\"104\":1}}],[\"计算各个元素的布局\",{\"1\":{\"102\":1}}],[\"计算布局\",{\"0\":{\"102\":1}}],[\"计算出摘要\",{\"1\":{\"801\":1}}],[\"计算出来\",{\"1\":{\"801\":1}}],[\"计算出的高度传递给片元着色器\",{\"1\":{\"243\":1}}],[\"计算出的混合值是绿色条条的颜色混合值\",{\"1\":{\"190\":1}}],[\"计算出的混合值是灰色线条的颜色混合值\",{\"1\":{\"190\":1}}],[\"计算出\",{\"0\":{\"100\":1},\"1\":{\"97\":1}}],[\"计算面积\",{\"1\":{\"79\":1}}],[\"计算数组的值\",{\"1\":{\"43\":1}}],[\"计算机\",{\"1\":{\"22\":2,\"458\":1}}],[\"计算最终路径\",{\"1\":{\"1\":1}}],[\"便能得到有序数组\",{\"1\":{\"59\":1}}],[\"如运营商之间可以自动交换路由信息和更新路由表\",{\"1\":{\"427\":1}}],[\"如13号\",{\"1\":{\"300\":1}}],[\"如下所示\",{\"1\":{\"234\":1}}],[\"如过滤方式\",{\"1\":{\"199\":6}}],[\"如<img>\",{\"1\":{\"169\":1}}],[\"如红色\",{\"1\":{\"154\":1}}],[\"如何抑制这些影响是我们的另\",{\"1\":{\"386\":1}}],[\"如何支持块级作用域\",{\"0\":{\"122\":1}}],[\"如何利用浏览器查看调用栈的信息\",{\"1\":{\"118\":1}}],[\"如cil\",{\"1\":{\"72\":1,\"73\":1}}],[\"如calculatetotal\",{\"1\":{\"66\":1}}],[\"如类型信息\",{\"1\":{\"70\":1}}],[\"如max\",{\"1\":{\"66\":1}}],[\"如myclass\",{\"1\":{\"66\":1}}],[\"如\",{\"1\":{\"66\":2,\"67\":1}}],[\"如backgroundcolor\",{\"1\":{\"66\":1}}],[\"如此反复执行\",{\"1\":{\"59\":1}}],[\"如果扩展数据存在\",{\"1\":{\"803\":1}}],[\"如果服务端接收到的数据没有进行过掩码操作\",{\"1\":{\"803\":1}}],[\"如果操作代码是不认识的\",{\"1\":{\"803\":1}}],[\"如果操作成功返回\",{\"1\":{\"310\":1}}],[\"如果出现非零的值\",{\"1\":{\"803\":1}}],[\"如果任何一个有返回值\",{\"1\":{\"749\":1}}],[\"如果cb是对象\",{\"1\":{\"670\":1}}],[\"如果vm的父节点为router\",{\"1\":{\"642\":1}}],[\"如果匹配\",{\"1\":{\"624\":1}}],[\"如果你使用\",{\"1\":{\"624\":1}}],[\"如果你希望\",{\"1\":{\"622\":1}}],[\"如果节点没有使用\",{\"1\":{\"613\":1}}],[\"如果节点使用了\",{\"1\":{\"613\":1}}],[\"如果html字符串是以\",{\"1\":{\"606\":1}}],[\"如果老节点先于新节点遍历结束\",{\"1\":{\"597\":1}}],[\"如果老节点有孩子\",{\"1\":{\"596\":1}}],[\"如果上面的四种假设都不成立\",{\"1\":{\"597\":1}}],[\"如果相同\",{\"1\":{\"597\":4}}],[\"如果组件被\",{\"1\":{\"590\":1}}],[\"如果满足以上条件\",{\"1\":{\"589\":1}}],[\"如果新节点先于老节点遍历结束\",{\"1\":{\"597\":1}}],[\"如果新节点有孩子\",{\"1\":{\"596\":1}}],[\"如果新节点不存在\",{\"1\":{\"588\":1}}],[\"如果新老节点都有孩子\",{\"1\":{\"596\":1}}],[\"如果新老值一样\",{\"1\":{\"563\":1}}],[\"如果被keep\",{\"1\":{\"575\":1}}],[\"如果包裹了一层div\",{\"1\":{\"571\":1}}],[\"如果已经添加过则直接返回\",{\"1\":{\"560\":1}}],[\"如果对象已经被观察过\",{\"1\":{\"560\":1}}],[\"如果对象原型链上的父类实现了\",{\"1\":{\"263\":1}}],[\"如果一个组件在其父组件的\",{\"1\":{\"558\":1}}],[\"如果父类有\",{\"1\":{\"546\":1}}],[\"如果不同\",{\"1\":{\"597\":3}}],[\"如果不是浏览器\",{\"1\":{\"540\":1}}],[\"如果不希望代码被别人破解\",{\"1\":{\"517\":1}}],[\"如果不想输出太多的日志\",{\"1\":{\"457\":1}}],[\"如果不存在这样的路线\",{\"1\":{\"18\":1}}],[\"如果路由表的网关列内容为空\",{\"1\":{\"405\":1}}],[\"如果路由表的网关列内容为\",{\"1\":{\"405\":1}}],[\"如果没问题则检查\",{\"1\":{\"400\":1}}],[\"如果没有协商使用扩展的话\",{\"1\":{\"803\":1}}],[\"如果没有新消息\",{\"1\":{\"794\":1}}],[\"如果没有问题则返回ack\",{\"1\":{\"368\":1}}],[\"如果没有\",{\"1\":{\"256\":1}}],[\"如果网线周围存在电磁波\",{\"1\":{\"389\":1}}],[\"如果要查询的域名和相关信息已经在缓存中\",{\"1\":{\"347\":1}}],[\"如果要访问的web\",{\"1\":{\"343\":1}}],[\"如果需要获取多个文件\",{\"1\":{\"337\":1}}],[\"如果eb\",{\"1\":{\"334\":1}}],[\"如果用户设置了\",{\"1\":{\"555\":1}}],[\"如果用户已经打开过某小程序\",{\"1\":{\"323\":1}}],[\"如果用户首次打开\",{\"1\":{\"323\":1}}],[\"如果自有的\",{\"1\":{\"306\":3,\"307\":1}}],[\"如果目标对象有一个不可配置的属性\",{\"1\":{\"305\":1}}],[\"如果目标对象有一个不可配置且不可写的数据属性\",{\"1\":{\"290\":1}}],[\"如果目标对象有一个可配置的属性\",{\"1\":{\"305\":1}}],[\"如果目标对象不可扩展\",{\"1\":{\"305\":1}}],[\"如果遇到\",{\"1\":{\"303\":1}}],[\"如果想创建一个可以捕获所有方法\",{\"1\":{\"289\":1}}],[\"如果then是一个函数\",{\"1\":{\"283\":1}}],[\"如果promise和x引用同一个对象\",{\"1\":{\"283\":1}}],[\"如果调用\",{\"1\":{\"282\":1}}],[\"如果检索属性\",{\"1\":{\"282\":1}}],[\"如果错误未被处理\",{\"1\":{\"274\":1}}],[\"如果把生成器对象当成可迭代对象\",{\"1\":{\"270\":1}}],[\"如果存在扩展数据\",{\"1\":{\"803\":1}}],[\"如果存在也对其进行依赖收集\",{\"1\":{\"563\":1}}],[\"如果存在名为whatisthis\",{\"1\":{\"334\":1}}],[\"如果存在\",{\"1\":{\"257\":1}}],[\"如果准备时间花费小于\",{\"1\":{\"257\":1}}],[\"如果在对象中存在\",{\"1\":{\"306\":1}}],[\"如果在准备时候花费了大于\",{\"1\":{\"257\":1}}],[\"如果在执行\",{\"1\":{\"251\":1}}],[\"如果使用了多个颜色缓冲\",{\"1\":{\"240\":1}}],[\"如果使用三个参数的形式\",{\"1\":{\"195\":4}}],[\"如果修改此变量的值\",{\"1\":{\"240\":1}}],[\"如果为\",{\"1\":{\"240\":2}}],[\"如果数组有\",{\"1\":{\"561\":1}}],[\"如果数组变量在着色器中不需要修改\",{\"1\":{\"232\":1}}],[\"如果数组中不存在目标值\",{\"1\":{\"8\":1}}],[\"如果x\",{\"1\":{\"202\":3}}],[\"如果矢量\",{\"1\":{\"197\":1}}],[\"如果\",{\"1\":{\"192\":2,\"195\":7,\"199\":4,\"253\":2,\"256\":2,\"281\":10,\"282\":15,\"302\":2,\"303\":2,\"304\":2,\"306\":2,\"308\":1,\"309\":1,\"310\":1,\"311\":2,\"312\":1,\"555\":2,\"557\":1,\"560\":1,\"567\":2,\"590\":1,\"591\":3,\"634\":1,\"749\":1,\"803\":3}}],[\"如果子元素未设置强制换行的情况下\",{\"1\":{\"175\":1}}],[\"如果引用闭包的函数是一个全局变量\",{\"1\":{\"128\":1}}],[\"如果是\",{\"1\":{\"803\":2}}],[\"如果是一个普通元素\",{\"1\":{\"590\":1}}],[\"如果是第一次\",{\"1\":{\"589\":1}}],[\"如果是内置的一些节点\",{\"1\":{\"584\":1}}],[\"如果是组件没有被\",{\"1\":{\"591\":1}}],[\"如果是组件\",{\"1\":{\"574\":1}}],[\"如果是用户\",{\"1\":{\"559\":1}}],[\"如果是同步\",{\"1\":{\"559\":1}}],[\"如果是就放到接收缓冲区中\",{\"1\":{\"400\":1}}],[\"如果是结束标签\",{\"1\":{\"98\":1}}],[\"如果是文本\",{\"1\":{\"98\":1}}],[\"如果是开始标签\",{\"1\":{\"98\":1}}],[\"如果较新则复制\",{\"1\":{\"89\":1}}],[\"如果确实需要使用与关键字相同的名称\",{\"1\":{\"66\":1,\"67\":1}}],[\"如果第一个比第二个大\",{\"1\":{\"53\":1}}],[\"如果小于查找值这往右边继续查找\",{\"1\":{\"7\":1}}],[\"如果中间值大于查找值\",{\"1\":{\"7\":1}}],[\"如果有的话会回到\",{\"1\":{\"256\":1}}],[\"如果有回调函数\",{\"1\":{\"247\":1}}],[\"如果有\",{\"1\":{\"1\":1,\"256\":1,\"540\":1}}],[\"剩余待排序数组个数为\",{\"1\":{\"59\":1}}],[\"末尾的数为最大值\",{\"1\":{\"59\":1}}],[\"末尾元素大于比较元素\",{\"1\":{\"55\":1}}],[\"称之为大根堆\",{\"1\":{\"59\":1}}],[\"称为\",{\"1\":{\"58\":1}}],[\"二者都可以用逗号分隔字符串\",{\"1\":{\"571\":1}}],[\"二者非常相似\",{\"1\":{\"257\":1}}],[\"二元操作符\",{\"1\":{\"221\":1}}],[\"二\",{\"0\":{\"204\":1},\"1\":{\"65\":1}}],[\"二叉树每个结点的值都大于其左孩子和右孩子结点的值\",{\"1\":{\"59\":1}}],[\"二分查找才管用\",{\"1\":{\"7\":1}}],[\"二分查找\",{\"0\":{\"7\":1},\"1\":{\"33\":1}}],[\"qs\",{\"1\":{\"631\":2,\"636\":1,\"637\":1}}],[\"qnamecapture\",{\"1\":{\"607\":2}}],[\"qps\",{\"0\":{\"436\":1}}],[\"quantity可变长度值\",{\"1\":{\"759\":1}}],[\"qualify\",{\"1\":{\"614\":1}}],[\"qualifier\",{\"1\":{\"238\":2,\"241\":2}}],[\"qux\",{\"1\":{\"271\":2,\"289\":3,\"290\":1}}],[\"queryselector\",{\"1\":{\"793\":1,\"794\":1}}],[\"queryselectorall\",{\"1\":{\"263\":1}}],[\"querystring\",{\"1\":{\"631\":1}}],[\"query\",{\"1\":{\"540\":1,\"566\":1,\"581\":1,\"601\":1,\"602\":1,\"603\":2,\"625\":2,\"626\":1,\"627\":2,\"629\":2,\"630\":3,\"631\":3,\"635\":1,\"636\":3,\"637\":3,\"649\":1}}],[\"queued\",{\"1\":{\"582\":1}}],[\"queues\",{\"1\":{\"558\":2}}],[\"queuewatcher\",{\"1\":{\"556\":1,\"557\":3,\"565\":1}}],[\"queue\",{\"1\":{\"251\":6,\"434\":2,\"557\":5,\"558\":6,\"651\":4,\"655\":8}}],[\"quiles\",{\"1\":{\"190\":1}}],[\"quicksort\",{\"1\":{\"58\":3}}],[\"q\",{\"1\":{\"186\":1}}],[\"qq\",{\"1\":{\"87\":1,\"710\":1}}],[\"qi\",{\"1\":{\"13\":1}}],[\"先左到右执行\",{\"1\":{\"634\":1}}],[\"先标记根节点是否为静态节点\",{\"1\":{\"613\":1}}],[\"先把\",{\"1\":{\"597\":1,\"611\":1}}],[\"先定义只包含运行时版本的$mount方法\",{\"1\":{\"566\":1}}],[\"先于\",{\"1\":{\"558\":1}}],[\"先执行\",{\"1\":{\"558\":1}}],[\"先使每个子序列有序\",{\"1\":{\"57\":1}}],[\"先将整个待排序的记录序列分割成为若干子序列分别进行直接插入排序\",{\"1\":{\"56\":1}}],[\"归并排序\",{\"0\":{\"57\":1}}],[\"不包括\",{\"1\":{\"803\":1}}],[\"不包含\",{\"1\":{\"765\":1}}],[\"不包含列信息\",{\"1\":{\"765\":1,\"766\":1}}],[\"不包含最后一个元素\",{\"1\":{\"663\":1}}],[\"不包含变量的纯文本节点\",{\"1\":{\"613\":2}}],[\"不生成source\",{\"1\":{\"760\":2}}],[\"不抽离webpack\",{\"1\":{\"755\":1}}],[\"不使用source\",{\"1\":{\"760\":1}}],[\"不使用属性\",{\"1\":{\"705\":1}}],[\"不使用polyfill\",{\"1\":{\"699\":1}}],[\"不和webpack等构建工具配置来单独使用\",{\"1\":{\"701\":1}}],[\"不论其被嵌套多深\",{\"1\":{\"667\":1}}],[\"不\",{\"1\":{\"648\":1}}],[\"不跟新更不触发响应式更新过程\",{\"1\":{\"563\":1}}],[\"不影响\",{\"1\":{\"549\":1}}],[\"不能是内置组件\",{\"1\":{\"613\":1}}],[\"不能使用\",{\"1\":{\"613\":1}}],[\"不能使用动态绑定语法\",{\"1\":{\"613\":1}}],[\"不能和\",{\"1\":{\"549\":1}}],[\"不能用作标识符\",{\"1\":{\"66\":1,\"67\":1}}],[\"不推荐使用了\",{\"1\":{\"543\":1}}],[\"不推荐使用的字符\",{\"1\":{\"66\":1}}],[\"不用编辑\",{\"1\":{\"517\":1}}],[\"不安全的npm包\",{\"0\":{\"478\":1}}],[\"不安全的跳转\",{\"0\":{\"477\":1}}],[\"不应该带敏感信息\",{\"1\":{\"459\":1}}],[\"不应该产生副作用\",{\"1\":{\"459\":1}}],[\"不应该会产生异常\",{\"1\":{\"459\":1}}],[\"不过一个子组件的根节点会同时受其父组件的\",{\"1\":{\"621\":1}}],[\"不过\",{\"1\":{\"427\":1}}],[\"不同取\",{\"1\":{\"804\":1}}],[\"不同频率的波可以合成\",{\"1\":{\"421\":1}}],[\"不同的是\",{\"1\":{\"517\":1}}],[\"不同的参数\",{\"1\":{\"476\":1}}],[\"不同的\",{\"1\":{\"241\":1}}],[\"不同的变量\",{\"1\":{\"121\":1}}],[\"不需要对数据进行掩码操作\",{\"1\":{\"803\":1}}],[\"不需要设置corejs\",{\"1\":{\"699\":1}}],[\"不需要再去查询了\",{\"1\":{\"343\":1}}],[\"不需要入栈\",{\"1\":{\"98\":1}}],[\"不存在\",{\"1\":{\"306\":1,\"588\":1}}],[\"不存在且\",{\"1\":{\"306\":1}}],[\"不可扩展\",{\"1\":{\"306\":2,\"308\":1,\"309\":1,\"310\":1,\"311\":1}}],[\"不可配置且\",{\"1\":{\"303\":1}}],[\"不可配置\",{\"1\":{\"302\":1}}],[\"不可写且不可配置\",{\"1\":{\"302\":1,\"303\":1}}],[\"不符合defineproperty的语法规则而报错\",{\"1\":{\"294\":1}}],[\"不是跟主机设置\",{\"1\":{\"663\":1}}],[\"不是真实元素\",{\"1\":{\"588\":1}}],[\"不是标准属性\",{\"1\":{\"561\":1}}],[\"不是一个对象或函数\",{\"1\":{\"282\":1}}],[\"不是一个函数并且\",{\"1\":{\"281\":2}}],[\"不是一个函数\",{\"1\":{\"281\":2,\"282\":1}}],[\"不是语言\",{\"1\":{\"65\":1}}],[\"不断调用指针对象的next方法\",{\"1\":{\"265\":1}}],[\"不断将问题分解\",{\"1\":{\"43\":1}}],[\"不适合需要精确控制境的任务\",{\"1\":{\"249\":1}}],[\"不等于\",{\"1\":{\"221\":1}}],[\"不在指定范围内\",{\"1\":{\"195\":1}}],[\"不做介绍\",{\"1\":{\"187\":1}}],[\"不为\",{\"1\":{\"174\":1}}],[\"不会等待上一次处理回调结束后再执行下一次回调\",{\"1\":{\"777\":1}}],[\"不会生成源代码文件\",{\"1\":{\"768\":1}}],[\"不会生成每个source\",{\"1\":{\"761\":1}}],[\"不会生成source\",{\"1\":{\"760\":1,\"764\":1}}],[\"不会打包\",{\"1\":{\"720\":1}}],[\"不会重复入队\",{\"1\":{\"557\":1}}],[\"不会进行插值处理\",{\"1\":{\"199\":1}}],[\"不会继承外层函数的\",{\"1\":{\"129\":1}}],[\"不会出错\",{\"1\":{\"114\":2}}],[\"不稳定\",{\"1\":{\"56\":1,\"57\":1}}],[\"稳定性\",{\"1\":{\"56\":1,\"57\":1}}],[\"再次进入vue\",{\"1\":{\"638\":1}}],[\"再次渲染的时候不会执行\",{\"1\":{\"570\":1}}],[\"再把\",{\"1\":{\"597\":3}}],[\"再定义完整版本的$mount\",{\"1\":{\"566\":1,\"601\":1}}],[\"再也不用担心\",{\"1\":{\"483\":1}}],[\"再经过协议栈被传递给解析器\",{\"1\":{\"343\":1}}],[\"再执行\",{\"1\":{\"257\":1,\"325\":1}}],[\"再将顶端数与\",{\"1\":{\"59\":1}}],[\"再使子序列段间有序\",{\"1\":{\"57\":1}}],[\"再对全体记录进行依次直接插入排序\",{\"1\":{\"56\":1}}],[\"再从剩余未排序元素中继续寻找最小\",{\"1\":{\"54\":1}}],[\"时被一次性建立\",{\"1\":{\"737\":1}}],[\"时的\",{\"1\":{\"671\":1}}],[\"时传递的回调函数\",{\"1\":{\"563\":1}}],[\"时传递的第三个参数\",{\"1\":{\"559\":1}}],[\"时会执行\",{\"1\":{\"563\":1}}],[\"时会被设置\",{\"1\":{\"563\":1}}],[\"时会有读取操作\",{\"1\":{\"563\":1}}],[\"时需要特殊处理\",{\"1\":{\"558\":1}}],[\"时设置的\",{\"1\":{\"555\":1}}],[\"时把\",{\"1\":{\"554\":1}}],[\"时序图\",{\"0\":{\"446\":1}}],[\"时间戳\",{\"1\":{\"190\":1,\"458\":1}}],[\"时间复杂度的公式是\",{\"1\":{\"33\":1}}],[\"时间复杂度\",{\"0\":{\"33\":1},\"1\":{\"33\":1}}],[\"时\",{\"1\":{\"56\":1,\"175\":1,\"190\":4,\"280\":4,\"403\":1,\"521\":1,\"624\":1,\"777\":1,\"781\":1,\"801\":1,\"803\":1}}],[\"基于源码构建的有两个版本\",{\"1\":{\"600\":1}}],[\"基于\",{\"1\":{\"590\":1}}],[\"基于新\",{\"1\":{\"588\":1}}],[\"基于这些参数可以重建被捕获方法的原始行为\",{\"1\":{\"289\":1}}],[\"基本插件架构\",{\"0\":{\"738\":1}}],[\"基本一样的网站\",{\"1\":{\"477\":1}}],[\"基本操作的拦截器\",{\"1\":{\"288\":1}}],[\"基本数据类型变量\",{\"0\":{\"230\":1}}],[\"基本有序\",{\"1\":{\"56\":1}}],[\"基础\",{\"0\":{\"64\":1}}],[\"基数排序\",{\"0\":{\"62\":1}}],[\"基准值\",{\"1\":{\"58\":1}}],[\"基准\",{\"1\":{\"58\":1}}],[\"基线条件\",{\"1\":{\"46\":1}}],[\"基线条件和递归条件\",{\"0\":{\"46\":1}}],[\"希尔排序\",{\"0\":{\"56\":1}}],[\"存储着位于\",{\"1\":{\"606\":1}}],[\"存储剩余还未解析的模板字符串\",{\"1\":{\"606\":1}}],[\"存储库\",{\"1\":{\"464\":1}}],[\"存放\",{\"1\":{\"660\":2}}],[\"存放要执行的队列\",{\"1\":{\"567\":1}}],[\"存放到排序序列的起始位置\",{\"1\":{\"54\":1}}],[\"存在\",{\"1\":{\"588\":1}}],[\"存在且\",{\"1\":{\"306\":1}}],[\"存在且可配置\",{\"1\":{\"306\":1}}],[\"存在且目标对象不可扩展\",{\"1\":{\"304\":1}}],[\"存在且不可配置\",{\"1\":{\"304\":1,\"306\":1,\"307\":1}}],[\"存在边\",{\"1\":{\"1\":1}}],[\"就得到应用数据的长度\",{\"1\":{\"803\":1}}],[\"就得到了逐步从灰色到绿色的颜色过渡效果\",{\"1\":{\"190\":1}}],[\"就一直等待\",{\"1\":{\"794\":1}}],[\"就一直返回同样的值了\",{\"1\":{\"265\":1}}],[\"就退出事件\",{\"1\":{\"777\":1,\"780\":1}}],[\"就不会执行后续的事件触发了\",{\"1\":{\"777\":1,\"779\":1}}],[\"就不进行\",{\"1\":{\"540\":1}}],[\"就认为是完全新的一个\",{\"1\":{\"589\":1}}],[\"就以新的\",{\"1\":{\"587\":1}}],[\"就从旧的\",{\"1\":{\"587\":1}}],[\"就在旧的\",{\"1\":{\"587\":1}}],[\"就立刻执行这个回调函数\",{\"1\":{\"568\":1}}],[\"就需要把这些\",{\"1\":{\"517\":1}}],[\"就需要重新配置代理\",{\"1\":{\"299\":1}}],[\"就进入了互联网\",{\"1\":{\"418\":1}}],[\"就表示超过了有效期\",{\"1\":{\"403\":1}}],[\"就可以知道了\",{\"1\":{\"517\":1}}],[\"就可以增加能表示的比特数\",{\"1\":{\"420\":1}}],[\"就可以从互联网访问内网中的设备了\",{\"1\":{\"411\":1}}],[\"就可以了\",{\"1\":{\"341\":1}}],[\"就可以使用结构体类型\",{\"1\":{\"234\":1}}],[\"就代表访问根目录下事先设置的默认文\",{\"1\":{\"334\":1}}],[\"就无法恢复了\",{\"1\":{\"274\":1}}],[\"就到达了检查点\",{\"1\":{\"250\":1}}],[\"就是对已存在的\",{\"1\":{\"589\":1}}],[\"就是把自定义的\",{\"1\":{\"585\":1}}],[\"就是将\",{\"1\":{\"568\":1}}],[\"就是\",{\"1\":{\"542\":1,\"651\":1}}],[\"就是指连接互联网与家庭\",{\"1\":{\"418\":1}}],[\"就是互联网与家庭\",{\"1\":{\"417\":1}}],[\"就是下一个转发目标\",{\"1\":{\"405\":1}}],[\"就是我们的第一个看点\",{\"1\":{\"386\":1}}],[\"就是一个指针对象\",{\"1\":{\"265\":1}}],[\"就是页面上的一个隔离的独立容器\",{\"1\":{\"174\":1}}],[\"就是平常所说的颜色名称\",{\"1\":{\"154\":1}}],[\"就是该对象\",{\"1\":{\"129\":1}}],[\"就是复制dom结构并过滤掉不显示的元素\",{\"1\":{\"102\":1,\"103\":1,\"104\":1}}],[\"就会反复执行该事件\",{\"1\":{\"777\":1,\"780\":1}}],[\"就会创建一个新的\",{\"1\":{\"737\":1}}],[\"就会注册这个回调\",{\"1\":{\"543\":1}}],[\"就会直接丢弃这个包\",{\"1\":{\"394\":1}}],[\"就会在网线中产生和原本的信号不同的电流\",{\"1\":{\"389\":1}}],[\"就会调用connect\",{\"1\":{\"358\":1}}],[\"就会去执行\",{\"1\":{\"258\":1}}],[\"就会清空队列中的所有回调函数\",{\"1\":{\"257\":1}}],[\"就会进入下一阶段\",{\"1\":{\"256\":1}}],[\"就会造成内存泄漏\",{\"1\":{\"128\":1}}],[\"就会把该作用域块内部的变量压到栈顶\",{\"1\":{\"122\":1}}],[\"就交换它们两个\",{\"1\":{\"53\":1}}],[\"就更新其开销\",{\"1\":{\"1\":1}}],[\"但国家\",{\"1\":{\"713\":1}}],[\"但因为chrome有个提案\",{\"1\":{\"683\":1}}],[\"但队列没有被刷新\",{\"1\":{\"568\":1}}],[\"但由于\",{\"1\":{\"561\":1}}],[\"但不需要任何\",{\"1\":{\"619\":1}}],[\"但不一定已被插入文档中\",{\"1\":{\"532\":1}}],[\"但不理想\",{\"1\":{\"266\":1}}],[\"但仍然不影响系统的继续运行\",{\"1\":{\"457\":1}}],[\"但仍可以表示所有颜色通道的所有颜色值\",{\"1\":{\"241\":1}}],[\"但路由表记录的维护方式不同\",{\"1\":{\"417\":1}}],[\"但部分\",{\"1\":{\"324\":1}}],[\"但有些\",{\"1\":{\"300\":1}}],[\"但使用reflect\",{\"1\":{\"294\":1}}],[\"但也鼓励实现者检测这样的递归是否存在\",{\"1\":{\"282\":1}}],[\"但当二者在异步\",{\"1\":{\"257\":1}}],[\"但可以获得更高的图像精度\",{\"1\":{\"241\":1}}],[\"但会消耗大量\",{\"1\":{\"241\":1}}],[\"但我们能从\",{\"1\":{\"210\":1,\"237\":1}}],[\"但它们的工作方式有一些\",{\"1\":{\"397\":1}}],[\"但它们必须是同维度的\",{\"1\":{\"195\":1}}],[\"但它在\",{\"1\":{\"257\":1}}],[\"但它是区分大小写的\",{\"1\":{\"158\":1}}],[\"但\",{\"1\":{\"175\":1}}],[\"但如果这个闭包以后不再使用的话\",{\"1\":{\"128\":1}}],[\"但栈是有容量限制的\",{\"1\":{\"118\":1}}],[\"但过多的公共字段可能会导致封装破坏\",{\"1\":{\"78\":1}}],[\"但通常不推荐在标识符中使用\",{\"1\":{\"66\":1}}],[\"但遵循这些约定可以提高代码的可读性和一致性\",{\"1\":{\"66\":1}}],[\"但是真正被服务器需要的数据却很少\",{\"1\":{\"794\":1}}],[\"但是生成的sourcemap只有错误信息的提示\",{\"1\":{\"768\":1}}],[\"但是对源自loader的sourcemap处理会更好\",{\"1\":{\"766\":1}}],[\"但是对于配置monorepos项目是比较麻烦的\",{\"1\":{\"706\":1}}],[\"但是source\",{\"1\":{\"763\":1}}],[\"但是它会在eval执行的代码中\",{\"1\":{\"760\":1}}],[\"但是它可能会陷入怪异的状态\",{\"1\":{\"568\":1}}],[\"但是实现这些工具\",{\"1\":{\"754\":1}}],[\"但是同一个函数没必要追踪变化\",{\"1\":{\"678\":1}}],[\"但是该组件被复用时调用\",{\"1\":{\"648\":1}}],[\"但是该变量的值会为undefined\",{\"1\":{\"114\":1}}],[\"但是不会对source\",{\"1\":{\"767\":1}}],[\"但是不禁用\",{\"1\":{\"638\":1,\"747\":1}}],[\"但是不能滥用\",{\"1\":{\"457\":1}}],[\"但是不能是负数\",{\"1\":{\"147\":1}}],[\"但是不能以数字开头\",{\"1\":{\"66\":1}}],[\"但是你仍然可以通过深度作用选择器来为他们设置样式\",{\"1\":{\"623\":1}}],[\"但是老节点和新节点是同一个节点\",{\"1\":{\"588\":1}}],[\"但是可能发生在其子\",{\"1\":{\"532\":1}}],[\"但是也要给程序员的一些提示\",{\"1\":{\"457\":1}}],[\"但是并不意味着深度不可变性\",{\"1\":{\"280\":1}}],[\"但是此\",{\"1\":{\"253\":1}}],[\"但是会更加高效一些\",{\"1\":{\"765\":1}}],[\"但是会以质量为代价\",{\"1\":{\"209\":1}}],[\"但是会阻塞\",{\"1\":{\"108\":1}}],[\"但是这些指令会对屏幕上的每个像素同时下达\",{\"1\":{\"209\":1}}],[\"但是能负数\",{\"1\":{\"147\":1}}],[\"但是都是运行在\",{\"1\":{\"65\":1}}],[\"但大\",{\"1\":{\"49\":1}}],[\"但随后检查的元素数依次为\",{\"1\":{\"49\":1}}],[\"×\",{\"1\":{\"49\":3,\"230\":7}}],[\"\",{\"1\":{\"49\":1}}],[\"知道一个元素位置可以知道所有元素位置\",{\"1\":{\"49\":1}}],[\"内联方式的\",{\"1\":{\"746\":1}}],[\"内联方式\",{\"1\":{\"745\":2}}],[\"内容不受\",{\"1\":{\"623\":1}}],[\"内收集的\",{\"1\":{\"524\":1}}],[\"内的响应式式数据发生更新\",{\"1\":{\"524\":1}}],[\"内网中的设备不能和互联网直接收发网络包\",{\"1\":{\"408\":1}}],[\"内网部分则分配私有地址\",{\"1\":{\"408\":1}}],[\"内置缓存\",{\"1\":{\"719\":1}}],[\"内置节点\",{\"1\":{\"580\":1}}],[\"内置组件只有一个\",{\"1\":{\"542\":1}}],[\"内置的组件也很少\",{\"1\":{\"540\":1}}],[\"内置的directives只有两个\",{\"1\":{\"540\":1}}],[\"内置指令\",{\"0\":{\"527\":1}}],[\"内置类型可能会依赖代理无法控制的机制\",{\"1\":{\"300\":1}}],[\"内置可迭代数据类型的迭代器对象本身也是可迭代的\",{\"1\":{\"261\":1}}],[\"内置变量具体用法和含义根据不同的内置变量而异\",{\"1\":{\"238\":1}}],[\"内置变量由\",{\"1\":{\"238\":1}}],[\"内置变量有多种\",{\"1\":{\"238\":1}}],[\"内部实例的特定数据\",{\"1\":{\"736\":1}}],[\"内部执行\",{\"1\":{\"580\":5}}],[\"内部调用时\",{\"1\":{\"257\":1}}],[\"内部使用\",{\"1\":{\"256\":1}}],[\"内部的盒子会在垂直方向\",{\"1\":{\"174\":1}}],[\"内部成员\",{\"1\":{\"78\":1}}],[\"内存\",{\"1\":{\"230\":5}}],[\"内存中取出位图显示到页面上\",{\"1\":{\"97\":1,\"105\":1}}],[\"内存中\",{\"1\":{\"97\":1,\"105\":1}}],[\"内存管理\",{\"1\":{\"71\":1}}],[\"内存空间不够需要重新分批一开可以连接一起的空间\",{\"1\":{\"49\":1}}],[\"内选择一个能跳的最远的位置\",{\"1\":{\"23\":1}}],[\"递归更新父占位符节点元素\",{\"1\":{\"588\":1}}],[\"递归调用\",{\"1\":{\"563\":1}}],[\"递归条件指的是函数调用自己\",{\"1\":{\"46\":1}}],[\"递归\",{\"0\":{\"45\":1}}],[\"个字节代表一个\",{\"1\":{\"803\":2}}],[\"个字节左右\",{\"1\":{\"794\":1}}],[\"个比特\",{\"1\":{\"803\":4}}],[\"个或多个帧组成一条完整的消息\",{\"1\":{\"802\":1}}],[\"个主要版本的所有次要\",{\"1\":{\"713\":1}}],[\"个版本的\",{\"1\":{\"713\":1}}],[\"个版本\",{\"1\":{\"713\":1}}],[\"个月内没有官方支持或更新的浏览器\",{\"1\":{\"713\":1}}],[\"个uri\",{\"1\":{\"337\":1}}],[\"个常量\",{\"1\":{\"280\":1}}],[\"个\",{\"1\":{\"256\":1,\"258\":1}}],[\"个阶段处理的\",{\"1\":{\"256\":1}}],[\"个阶段\",{\"1\":{\"256\":2}}],[\"个步骤\",{\"1\":{\"251\":1}}],[\"个裁剪平面的距离值\",{\"1\":{\"240\":1}}],[\"个样本\",{\"1\":{\"240\":1}}],[\"个样本的掩码值\",{\"1\":{\"240\":1}}],[\"个像素\",{\"1\":{\"199\":1}}],[\"个像素处的颜色值\",{\"1\":{\"199\":1}}],[\"个单位\",{\"1\":{\"196\":1}}],[\"个显示类型\",{\"1\":{\"183\":1}}],[\"个相邻的兄弟元素不在同一个\",{\"1\":{\"174\":1}}],[\"个十百千万\",{\"1\":{\"62\":1}}],[\"个数再构造成大根堆\",{\"1\":{\"59\":1}}],[\"个数组\",{\"1\":{\"43\":1}}],[\"个元素就不会在同一个\",{\"1\":{\"174\":1}}],[\"个元素不在同一个\",{\"1\":{\"174\":1}}],[\"个元素\",{\"1\":{\"49\":1}}],[\"个城市\",{\"1\":{\"18\":1}}],[\"个城市通过一些航班连接\",{\"1\":{\"18\":1}}],[\"比特\",{\"1\":{\"803\":2}}],[\"比特的数值\",{\"1\":{\"410\":1}}],[\"比0\",{\"1\":{\"224\":1}}],[\"比如恶意的连接\",{\"1\":{\"799\":1}}],[\"比如位置信息等\",{\"1\":{\"759\":1}}],[\"比如我们使用了typescript等方式编写的代码\",{\"1\":{\"757\":1}}],[\"比如代码进行丑化压缩时\",{\"1\":{\"757\":1}}],[\"比如对应的代码行号\",{\"1\":{\"757\":1}}],[\"比如es6的代码可能被转换成es5\",{\"1\":{\"757\":1}}],[\"比如自动添加浏览器前缀\",{\"1\":{\"754\":1}}],[\"比如都是\",{\"1\":{\"589\":1}}],[\"比如执行\",{\"1\":{\"563\":1}}],[\"比如用户\",{\"1\":{\"559\":1}}],[\"比如用户交互\",{\"1\":{\"246\":1}}],[\"比如处理父子继承关系等\",{\"1\":{\"544\":1}}],[\"比如普通用户可以使用管理员的功能\",{\"1\":{\"474\":1}}],[\"比如下面这些都是宏任务\",{\"1\":{\"249\":1}}],[\"比如\",{\"1\":{\"134\":1,\"152\":1,\"251\":1,\"300\":1,\"319\":1,\"320\":1,\"543\":1,\"558\":1,\"561\":1,\"568\":1,\"589\":1,\"624\":1,\"710\":1,\"803\":1}}],[\"比如css\",{\"1\":{\"722\":1}}],[\"比如c\",{\"1\":{\"65\":2}}],[\"比基准值大的摆在基准的后面\",{\"1\":{\"58\":1}}],[\"比较后面的元素\",{\"1\":{\"54\":1}}],[\"比较相邻的元素\",{\"1\":{\"53\":1}}],[\"比\",{\"1\":{\"43\":1,\"427\":1}}],[\"小图优化\",{\"0\":{\"513\":1}}],[\"小程序\",{\"0\":{\"326\":1}}],[\"小程序又会重新进入\",{\"1\":{\"324\":1}}],[\"小程序前台运行时直接锁屏\",{\"1\":{\"324\":1}}],[\"小程序前台运行时直接把微信切后台\",{\"1\":{\"324\":1}}],[\"小程序并没有真正被关闭\",{\"1\":{\"324\":1}}],[\"小程序时\",{\"1\":{\"324\":1}}],[\"小程序启动后\",{\"1\":{\"324\":1}}],[\"小程序启动\",{\"0\":{\"323\":1}}],[\"小程序生命周期\",{\"0\":{\"322\":1}}],[\"小\",{\"1\":{\"224\":1}}],[\"小的最大整数\",{\"1\":{\"195\":1}}],[\"小的数值组成左侧数组\",{\"1\":{\"43\":1}}],[\"小于\",{\"1\":{\"221\":1}}],[\"小于最小值\",{\"1\":{\"192\":1}}],[\"小于等于\",{\"1\":{\"190\":1,\"195\":1,\"221\":1}}],[\"小于基准值的元素和大于基准值的元素\",{\"1\":{\"43\":1}}],[\"挑选比\",{\"1\":{\"43\":1}}],[\"xb\",{\"1\":{\"803\":1}}],[\"xa\",{\"1\":{\"803\":1}}],[\"x9\",{\"1\":{\"803\":1}}],[\"x8\",{\"1\":{\"803\":1}}],[\"x80\",{\"1\":{\"43\":1}}],[\"x3\",{\"1\":{\"803\":1}}],[\"x2\",{\"1\":{\"803\":1}}],[\"x1\",{\"1\":{\"803\":1}}],[\"x0\",{\"1\":{\"803\":1}}],[\"xhr\",{\"1\":{\"793\":7,\"794\":7}}],[\"x中\",{\"1\":{\"678\":1}}],[\"x的代码\",{\"1\":{\"659\":1}}],[\"x框架原理分析\",{\"0\":{\"537\":1,\"580\":1,\"599\":1}}],[\"xmlhttprequest\",{\"1\":{\"793\":1,\"794\":1}}],[\"xml及uniapp项目id及dcloud后台appid一致\",{\"1\":{\"517\":1}}],[\"xml\",{\"1\":{\"517\":1}}],[\"xml整个\",{\"1\":{\"517\":1}}],[\"xmas\",{\"1\":{\"141\":3}}],[\"xss是跨站脚本攻击\",{\"1\":{\"470\":1}}],[\"xss\",{\"0\":{\"470\":1}}],[\"xx\",{\"0\":{\"255\":1},\"1\":{\"551\":2,\"558\":2,\"559\":1,\"748\":1,\"761\":1}}],[\"xxxgetters\",{\"1\":{\"663\":1}}],[\"xxx\",{\"1\":{\"89\":2,\"471\":1,\"473\":1,\"517\":1}}],[\"xz\",{\"1\":{\"243\":1}}],[\"xzxz\",{\"1\":{\"206\":6,\"243\":2}}],[\"xcol\",{\"1\":{\"225\":13}}],[\"xdlsds\",{\"1\":{\"225\":1}}],[\"x==\",{\"1\":{\"218\":1}}],[\"x==y\",{\"1\":{\"218\":1}}],[\"x+y\",{\"1\":{\"803\":1}}],[\"x+tc\",{\"1\":{\"225\":1}}],[\"x+1\",{\"1\":{\"218\":1}}],[\"x+radius\",{\"1\":{\"218\":1}}],[\"x+sin\",{\"1\":{\"206\":2}}],[\"x+utime\",{\"1\":{\"202\":2,\"243\":1}}],[\"xyxy\",{\"1\":{\"206\":6,\"243\":2}}],[\"xyz\",{\"1\":{\"199\":2,\"239\":3}}],[\"xy\",{\"1\":{\"190\":4,\"200\":1,\"204\":2,\"206\":20,\"211\":1,\"215\":2,\"216\":2,\"217\":2,\"218\":2,\"224\":4,\"225\":3,\"226\":4,\"227\":2,\"239\":3,\"243\":7}}],[\"x\",{\"0\":{\"519\":1,\"526\":1,\"570\":1,\"577\":1,\"617\":1,\"641\":1,\"658\":1,\"667\":1},\"1\":{\"43\":2,\"121\":8,\"190\":13,\"191\":7,\"192\":5,\"195\":83,\"196\":4,\"197\":13,\"198\":43,\"200\":8,\"202\":13,\"204\":9,\"206\":60,\"211\":1,\"215\":2,\"216\":2,\"217\":3,\"218\":17,\"224\":3,\"225\":4,\"226\":3,\"227\":7,\"231\":38,\"233\":1,\"234\":3,\"237\":1,\"238\":2,\"240\":1,\"243\":22,\"263\":2,\"264\":8,\"270\":2,\"271\":2,\"272\":4,\"273\":2,\"274\":8,\"281\":2,\"282\":19,\"483\":3,\"568\":1,\"713\":3,\"803\":2}}],[\"xi\",{\"1\":{\"23\":1}}],[\"$$state\",{\"1\":{\"663\":2,\"665\":2}}],[\"$vnode\",{\"1\":{\"582\":1,\"583\":1,\"584\":2,\"586\":2,\"656\":2}}],[\"$store\",{\"1\":{\"659\":4,\"663\":2,\"664\":5,\"665\":1}}],[\"$scopedslots\",{\"1\":{\"583\":3}}],[\"$slots\",{\"1\":{\"573\":1,\"583\":1}}],[\"$set\",{\"1\":{\"543\":1}}],[\"$router\",{\"1\":{\"642\":1}}],[\"$route\",{\"1\":{\"572\":2,\"642\":1,\"656\":1}}],[\"$parent\",{\"1\":{\"551\":1,\"583\":1,\"586\":3,\"642\":2,\"656\":1}}],[\"$props\",{\"1\":{\"543\":2}}],[\"$forceupdate\",{\"1\":{\"543\":2,\"582\":1}}],[\"$flow\",{\"1\":{\"521\":1,\"554\":1,\"567\":1}}],[\"$option\",{\"1\":{\"549\":1}}],[\"$options\",{\"0\":{\"545\":1},\"1\":{\"520\":1,\"544\":3,\"545\":1,\"548\":1,\"549\":1,\"551\":2,\"552\":1,\"553\":3,\"560\":1,\"566\":3,\"581\":2,\"582\":2,\"583\":1,\"584\":1,\"585\":1,\"601\":1,\"603\":1,\"642\":5,\"659\":1,\"665\":7,\"668\":1}}],[\"$off\",{\"1\":{\"543\":2}}],[\"$one\",{\"1\":{\"543\":1}}],[\"$once\",{\"1\":{\"543\":1,\"642\":1}}],[\"$on\",{\"1\":{\"543\":2}}],[\"$destroy\",{\"1\":{\"543\":2,\"573\":1,\"663\":1}}],[\"$delete\",{\"1\":{\"543\":1}}],[\"$data\",{\"1\":{\"543\":2,\"561\":1}}],[\"$watch\",{\"0\":{\"670\":1},\"1\":{\"543\":2,\"555\":4,\"558\":1,\"573\":2,\"663\":1,\"667\":1,\"669\":1,\"670\":1}}],[\"$mount\",{\"1\":{\"540\":1,\"543\":1,\"544\":1,\"566\":3,\"580\":2,\"581\":2,\"601\":2,\"602\":1,\"603\":2}}],[\"$createelement\",{\"1\":{\"538\":1,\"566\":2,\"583\":1,\"584\":6,\"656\":1}}],[\"$el\",{\"1\":{\"582\":1,\"586\":10,\"592\":1}}],[\"$emit\",{\"1\":{\"528\":1,\"543\":2,\"548\":1}}],[\"$event\",{\"1\":{\"528\":4,\"584\":1}}],[\"$nexttick\",{\"1\":{\"543\":2,\"651\":1,\"655\":1}}],[\"$n^\",{\"1\":{\"33\":1}}],[\"$nlog\",{\"1\":{\"33\":1}}],[\"$\",{\"1\":{\"33\":3,\"77\":4,\"89\":4,\"102\":1,\"103\":1,\"104\":10,\"264\":2,\"316\":2,\"521\":1,\"534\":3,\"544\":3,\"555\":1,\"559\":1,\"565\":2,\"573\":1,\"585\":4,\"607\":2,\"611\":3,\"615\":7,\"625\":4,\"626\":3,\"627\":1,\"629\":4,\"630\":6,\"631\":1,\"637\":2,\"647\":1,\"650\":2,\"653\":2,\"663\":2,\"670\":4,\"689\":2,\"718\":3,\"720\":1,\"795\":1}}],[\"$log\",{\"1\":{\"33\":1}}],[\"这就意味着你有了更多的选择\",{\"1\":{\"788\":1}}],[\"这就浪费了大部分事件在对比静态节点上\",{\"1\":{\"675\":1}}],[\"这就是噪声的影响\",{\"1\":{\"389\":1}}],[\"这就是\",{\"1\":{\"253\":1}}],[\"这就是词法环境的结构\",{\"1\":{\"122\":1}}],[\"这类似于\",{\"1\":{\"619\":1}}],[\"这三个标志位可以非\",{\"1\":{\"803\":1}}],[\"这三个方法的作用就是把注册的组件放入对应的容器中\",{\"1\":{\"542\":1}}],[\"这三个项目分别是\",{\"1\":{\"464\":1}}],[\"这才是真正的数据发送过程\",{\"1\":{\"380\":1}}],[\"这部分就是网络包的内容\",{\"1\":{\"375\":1}}],[\"这一步是注册了\",{\"1\":{\"542\":1}}],[\"这一点和家庭\",{\"1\":{\"427\":1}}],[\"这一类似号码牌的东西来识别套接字的\",{\"1\":{\"350\":1}}],[\"这一操作的过程也不仅适用于web\",{\"1\":{\"349\":1}}],[\"这一操作的就叫解析器\",{\"1\":{\"341\":1}}],[\"这一阶段中\",{\"1\":{\"256\":1}}],[\"这同时也使遵循\",{\"1\":{\"282\":1}}],[\"这是个递归过程\",{\"1\":{\"690\":1}}],[\"这是\",{\"1\":{\"603\":1,\"713\":1}}],[\"这是一个computer\",{\"1\":{\"554\":1}}],[\"这是为了防止设备移动时产生问题\",{\"1\":{\"393\":1}}],[\"这是在生产网卡时写入的\",{\"1\":{\"380\":1}}],[\"这是因为它的每个实例只能被迭代一次\",{\"1\":{\"266\":1}}],[\"这是由源码决定的\",{\"1\":{\"257\":1}}],[\"这两种类型没有实现迭代器工厂函数\",{\"1\":{\"263\":1}}],[\"这意味着必须暴露一个属性作为\",{\"1\":{\"263\":1}}],[\"这意味着你可以不创建类的实例就可以访问静态成员\",{\"1\":{\"81\":1}}],[\"这点跟浏览器端相差比较大\",{\"1\":{\"256\":1}}],[\"这点跟浏览器端的一样\",{\"1\":{\"256\":1}}],[\"这点和\",{\"1\":{\"209\":1}}],[\"这属于宏任务\",{\"1\":{\"256\":1}}],[\"这可能会占用较多的\",{\"1\":{\"241\":1}}],[\"这行代码起到的作用就是根据\",{\"1\":{\"190\":1}}],[\"这时候就可以给组件执行各个模块的的\",{\"1\":{\"591\":1}}],[\"这时候页面恶意脚本会被执行\",{\"1\":{\"473\":1}}],[\"这时候\",{\"1\":{\"190\":1}}],[\"这里判断了该标签是否为自闭合标签\",{\"1\":{\"607\":1}}],[\"这里注册的组件就是全局组件\",{\"1\":{\"543\":1}}],[\"这里先创建了空对象作为容器\",{\"1\":{\"542\":1}}],[\"这里添加了一个`vue\",{\"1\":{\"542\":1}}],[\"这里的\",{\"1\":{\"540\":1}}],[\"这里都是web平台相关的一些配置\",{\"1\":{\"540\":1}}],[\"这里我们将介绍\",{\"1\":{\"416\":1}}],[\"这里记录了用于控制通信操作的控制信息\",{\"1\":{\"356\":1}}],[\"这里主要针对\",{\"1\":{\"282\":1}}],[\"这里如果\",{\"1\":{\"282\":1}}],[\"这里再次调用\",{\"1\":{\"282\":1}}],[\"这里应该是说只要值的引用相同即可\",{\"1\":{\"280\":1}}],[\"这里同样会有个超时时间设置防止一直等待下去\",{\"1\":{\"256\":1}}],[\"这里\",{\"1\":{\"139\":1}}],[\"这里使用了插入排序\",{\"1\":{\"61\":1}}],[\"这个dataurl是包含一个文件完成source\",{\"1\":{\"764\":1}}],[\"这个工具可以帮助我们进行一些css的转换和适配\",{\"1\":{\"754\":1}}],[\"这个工具的数据来自于\",{\"1\":{\"712\":1}}],[\"这个\",{\"1\":{\"738\":1}}],[\"这个对象在启动\",{\"1\":{\"737\":1}}],[\"这个loader必须通过\",{\"1\":{\"727\":1}}],[\"这个动态导入会返回一个\",{\"1\":{\"653\":1}}],[\"这个特殊的\",{\"1\":{\"653\":1}}],[\"这个变量是比较重要的\",{\"1\":{\"604\":1}}],[\"这个新函数的\",{\"1\":{\"552\":1}}],[\"这个级别比较高了\",{\"1\":{\"457\":1}}],[\"这个可以用于生产环境中输出程序运行的一些重要信息\",{\"1\":{\"457\":1}}],[\"这个机制就叫地址转换\",{\"1\":{\"408\":1}}],[\"这个包就会被丢弃\",{\"1\":{\"403\":1}}],[\"这个值就会减\",{\"1\":{\"403\":1}}],[\"这个委托的过程就是tcp\",{\"1\":{\"375\":1}}],[\"这个等待时间叫超时时间\",{\"1\":{\"365\":1}}],[\"这个过程就是单纯地传输电信号而已\",{\"1\":{\"388\":1}}],[\"这个过程就是热启动\",{\"1\":{\"323\":1}}],[\"这个过程与浏览器生成要发送给web\",{\"1\":{\"343\":1}}],[\"这个默认迭代器属性必须引用一个迭代器工厂函数\",{\"1\":{\"263\":1}}],[\"这个阶段执行\",{\"1\":{\"256\":1}}],[\"这个例子中\",{\"1\":{\"234\":1}}],[\"这个结构体定义了三个浮点数成员变量\",{\"1\":{\"234\":1}}],[\"这个结构就是\",{\"1\":{\"133\":1}}],[\"这个类实现了\",{\"1\":{\"266\":1}}],[\"这个类\",{\"1\":{\"209\":1}}],[\"这个函数添加了一些类方法属性\",{\"1\":{\"541\":1}}],[\"这个函数其实是独立于\",{\"1\":{\"257\":1}}],[\"这个函数接收三个参数\",{\"1\":{\"192\":1}}],[\"这个函数是递归的\",{\"1\":{\"118\":1}}],[\"这个时候你要实现类似九宫格\",{\"1\":{\"177\":1}}],[\"这个公式的全称是\",{\"1\":{\"33\":1}}],[\"这些常量\",{\"1\":{\"688\":1}}],[\"这些关键字\",{\"1\":{\"688\":1}}],[\"这些关键字有特定的语言含义\",{\"1\":{\"66\":1,\"67\":1}}],[\"这些包\",{\"1\":{\"653\":1}}],[\"这些文\",{\"1\":{\"334\":1}}],[\"这些操作有各自不同的反射\",{\"1\":{\"301\":1}}],[\"这些类型都实现了迭代器工厂函数\",{\"1\":{\"263\":1}}],[\"这些同步代码有一些是同步语句\",{\"1\":{\"251\":1}}],[\"这些变量值在渲染管线的各个阶段之间保持不变\",{\"1\":{\"236\":1}}],[\"这些盒子分布在多个\",{\"1\":{\"175\":1}}],[\"这些指令组合在一起成为绘制列表\",{\"1\":{\"104\":1}}],[\"这些图层合成最终的页面\",{\"1\":{\"103\":1}}],[\"这种方式连接数会很多\",{\"1\":{\"793\":1}}],[\"这种方法提高了公有地址的利用率\",{\"1\":{\"410\":1}}],[\"这种情况下你可以使用\",{\"1\":{\"622\":1}}],[\"这种情况会在一个组件初次渲染的时候出现\",{\"1\":{\"588\":1}}],[\"这种情况并不适用于所有数据结构\",{\"1\":{\"260\":1}}],[\"这种级别你可以直接停止程序了\",{\"1\":{\"457\":1}}],[\"这种技术称为调制\",{\"1\":{\"420\":1}}],[\"这种技巧被称之为\",{\"1\":{\"226\":1}}],[\"这种拧麻花一样的设计是为了抑制噪声的影响\",{\"1\":{\"389\":1}}],[\"这种\",{\"1\":{\"282\":1}}],[\"这种替换元素\",{\"1\":{\"187\":1}}],[\"这种编译策略的优点是可以在程序运行时直接执行机器代码\",{\"1\":{\"73\":1}}],[\"这种编译策略的优点是可以在运行时根据程序的实际需求进行优化\",{\"1\":{\"72\":1}}],[\"这种条件必须尽可能简单\",{\"1\":{\"43\":1}}],[\"这样设计是为了让父组件可以从布局的角度出发\",{\"1\":{\"621\":1}}],[\"这样在\",{\"1\":{\"612\":1}}],[\"这样在最后的元素应该会是最大的数\",{\"1\":{\"53\":1}}],[\"这样就可以使用\",{\"1\":{\"554\":1}}],[\"这样就可以实现各种模式\",{\"1\":{\"320\":1}}],[\"这样就可以在一个目标对象之上构建多层拦截网\",{\"1\":{\"297\":1}}],[\"这样做可以提高代码的可读性和可维护性\",{\"1\":{\"232\":1}}],[\"这样一来\",{\"1\":{\"174\":1}}],[\"这样的数据包在网络上周期性的传输\",{\"1\":{\"794\":1}}],[\"这样的文件\",{\"1\":{\"334\":1}}],[\"这样的运行环境叫做进程\",{\"1\":{\"94\":1}}],[\"这样的常数\",{\"1\":{\"49\":1}}],[\"这样写错了的话能够及时发现\",{\"1\":{\"89\":2}}],[\"这样从最低位排序一直到最高位排序完成以后\",{\"1\":{\"62\":1}}],[\"这将是要\",{\"1\":{\"22\":1}}],[\"而无须客户端发出请求\",{\"1\":{\"792\":1}}],[\"而实现这一切的核心就是\",{\"1\":{\"776\":1}}],[\"而实际上只有\",{\"1\":{\"590\":1}}],[\"而两个版本的区别仅在于后者包含了一个编译器\",{\"1\":{\"600\":1}}],[\"而回调函数中如果有\",{\"1\":{\"563\":1}}],[\"而第二个就不走计算过程了\",{\"1\":{\"554\":1}}],[\"而多个运营商\",{\"1\":{\"428\":1}}],[\"而其余参数将作为新函数的参数\",{\"1\":{\"552\":1}}],[\"而其中将包传输到下一个路由器的过程则是由以太网\",{\"1\":{\"406\":1}}],[\"而其实栅格化线程在工作的时候会把栅格化的工作交给\",{\"1\":{\"97\":1,\"105\":1}}],[\"而交换机是基于以太网设计的\",{\"1\":{\"406\":1}}],[\"而路由器则是根据\",{\"1\":{\"399\":1}}],[\"而路由器是基于\",{\"1\":{\"397\":1}}],[\"而集线器就是这一架构的忠实体现\",{\"1\":{\"390\":1}}],[\"而解析器就是这个库中\",{\"1\":{\"341\":1}}],[\"而这个钩子就会在这个情况下被调用\",{\"1\":{\"648\":1}}],[\"而这个方法只在router\",{\"1\":{\"642\":1}}],[\"而这个代理对象可以作为抽象的目标对象来使用\",{\"1\":{\"285\":1}}],[\"而这意味着完全可以创建一个代理\",{\"1\":{\"297\":1}}],[\"而反射方法适用于细粒度的对象控制与操作\",{\"1\":{\"293\":1}}],[\"而在\",{\"1\":{\"258\":1,\"749\":1}}],[\"而在中间的过程中\",{\"1\":{\"190\":1}}],[\"而是为每个文件添加source\",{\"1\":{\"764\":1}}],[\"而是父组件的\",{\"1\":{\"544\":1}}],[\"而是会自动根据本地的缓存情况决定是否需要联网下载\",{\"1\":{\"517\":1}}],[\"而是会等待一段时间\",{\"1\":{\"367\":1}}],[\"而是通过一种特别的机制进行连接\",{\"1\":{\"408\":1}}],[\"而是直接接收所有的包并存放到缓冲区中\",{\"1\":{\"392\":1}}],[\"而是先接收信号并将其还原为数字信息\",{\"1\":{\"392\":1}}],[\"而是适用于任何网络应用程序\",{\"1\":{\"349\":1}}],[\"而是要委托给操作系统内部的协议栈来执行\",{\"1\":{\"343\":1}}],[\"而是进入了\",{\"1\":{\"324\":1}}],[\"而是由定时触发线程来计时的\",{\"1\":{\"247\":1}}],[\"而是网络进程加载了多少数据\",{\"1\":{\"134\":1}}],[\"而且非常简单\",{\"1\":{\"801\":1}}],[\"而且每次发送请求都会有\",{\"1\":{\"793\":1}}],[\"而且支持的浏览器最低达\",{\"1\":{\"788\":1}}],[\"而且这个内部槽位的值也不能通过普通的\",{\"1\":{\"300\":1}}],[\"而且这个属性必须使用特殊的\",{\"1\":{\"263\":1}}],[\"而且\",{\"1\":{\"291\":1}}],[\"而且也具有与被拦截方法相同的行为\",{\"1\":{\"289\":1}}],[\"而且还可以恢复执行\",{\"1\":{\"274\":1}}],[\"而且生成器函数和默认迭代器被调用之后都产生迭代器\",{\"1\":{\"273\":1}}],[\"而且必须设为只读\",{\"1\":{\"210\":1,\"237\":1}}],[\"而且在整个页面的生存周期内\",{\"1\":{\"117\":1}}],[\"而所有行内级盒子都参会\",{\"1\":{\"184\":1}}],[\"而设置为\",{\"1\":{\"176\":1}}],[\"而用\",{\"1\":{\"174\":1}}],[\"而对右侧内容触发\",{\"1\":{\"174\":1}}],[\"而scale虽然只能是数值\",{\"1\":{\"147\":1}}],[\"而渲染进程则从管道的另外一端不断地读取数据\",{\"1\":{\"134\":1}}],[\"而不会有对数组的写入行为\",{\"1\":{\"232\":1}}],[\"而不是销毁它们\",{\"1\":{\"570\":1}}],[\"而不是抛出错误\",{\"1\":{\"294\":1}}],[\"而不是定义时的值\",{\"1\":{\"114\":1}}],[\"而不是类的实例\",{\"1\":{\"81\":1}}],[\"而不需要微管理您的目标环境需要哪些语法转换\",{\"1\":{\"697\":1}}],[\"而不需要使用命名空间限定\",{\"1\":{\"75\":1}}],[\"而不需要再进行编译\",{\"1\":{\"73\":1}}],[\"而winform就是属于c\",{\"1\":{\"65\":1}}],[\"而基线条件则指的是函数不再调用自己\",{\"1\":{\"46\":1}}],[\"而\",{\"1\":{\"33\":1,\"134\":1,\"190\":3,\"255\":1}}],[\"将消息切割成多个帧\",{\"1\":{\"802\":1}}],[\"将结果传递给前一个loader\",{\"1\":{\"749\":1}}],[\"将禁用所有已配置的\",{\"1\":{\"747\":3}}],[\"将资源中的\",{\"1\":{\"745\":1,\"747\":1}}],[\"将至少被两个trunk引入的模块提取出来打包成单独trunk\",{\"1\":{\"720\":1}}],[\"将webpack中的重复使用的plugins和preset单独抽离出来\",{\"1\":{\"706\":1}}],[\"将watcher定义为\",{\"1\":{\"564\":1}}],[\"将const\",{\"1\":{\"695\":1}}],[\"将旧的组件state设置为null\",{\"1\":{\"663\":1}}],[\"将循环注册的子模块\",{\"1\":{\"663\":1}}],[\"将root\",{\"1\":{\"663\":1}}],[\"将$store\",{\"1\":{\"659\":1}}],[\"将路由主机渲染出来\",{\"1\":{\"656\":1}}],[\"将别名定义为\",{\"1\":{\"644\":1}}],[\"将整个代码字符串分割成语法单元数组\",{\"1\":{\"687\":1}}],[\"将整个字符串作为文本对待\",{\"1\":{\"606\":1}}],[\"将整数转换为浮点数\",{\"1\":{\"195\":1}}],[\"将整数部分存储在\",{\"1\":{\"195\":1}}],[\"将html模板字符串转化为ast\",{\"1\":{\"604\":1}}],[\"将http\",{\"0\":{\"362\":1}}],[\"将组件的\",{\"1\":{\"590\":1}}],[\"将组件真实dom插入到父元素\",{\"1\":{\"575\":1}}],[\"将vnode\",{\"1\":{\"574\":1}}],[\"将缓存的dom插入父节点\",{\"1\":{\"575\":1}}],[\"将缓存的\",{\"1\":{\"558\":1}}],[\"将其打包成一个trunk\",{\"1\":{\"720\":1}}],[\"将其缓存起来\",{\"1\":{\"573\":1}}],[\"将其摧毁\",{\"1\":{\"573\":1}}],[\"将其放在队列的合适位置\",{\"1\":{\"558\":1}}],[\"将其转换为归一化的坐标系\",{\"1\":{\"190\":1}}],[\"将定义的dep对象添加进入watcher中的newdeps数组中\",{\"1\":{\"556\":1}}],[\"将dep\",{\"1\":{\"554\":1}}],[\"将test\",{\"1\":{\"461\":3}}],[\"将then存储起来\",{\"1\":{\"281\":1}}],[\"将所有文件数据加载到内存中\",{\"1\":{\"455\":1}}],[\"将所有待比较数值\",{\"1\":{\"62\":1}}],[\"将信元\",{\"0\":{\"420\":1}}],[\"将信号线缠绕在一起\",{\"1\":{\"389\":1}}],[\"将包拆分成信元\",{\"0\":{\"419\":1},\"1\":{\"419\":1}}],[\"将包存入缓冲区后\",{\"1\":{\"392\":1}}],[\"将发送方\",{\"1\":{\"393\":1}}],[\"将ip包转换为电或光信号发送出去\",{\"0\":{\"380\":1}}],[\"将管道连接到服务器端的套接字上\",{\"1\":{\"349\":1}}],[\"将阻塞在这里\",{\"1\":{\"256\":1}}],[\"将渲染的内容绘制到用户界面上\",{\"1\":{\"246\":1}}],[\"将绿色写入第二个颜色缓冲\",{\"1\":{\"240\":1}}],[\"将红色写入第一个颜色缓冲\",{\"1\":{\"240\":1}}],[\"将深度值设置为\",{\"1\":{\"240\":1}}],[\"将颜色写入\",{\"1\":{\"240\":1}}],[\"将当前初始化的state以及getters作为computed属性\",{\"1\":{\"663\":1}}],[\"将当前\",{\"1\":{\"556\":1}}],[\"将当前像素的屏幕坐标传入\",{\"1\":{\"240\":1}}],[\"将当前位置的x坐标作为y值\",{\"1\":{\"190\":1}}],[\"将法线向量变换为纹理坐标系下的向量\",{\"1\":{\"239\":1}}],[\"将法线向量变换为视图坐标系下的向量\",{\"1\":{\"239\":1}}],[\"将视图坐标系下的法线变换到裁剪坐标系下\",{\"1\":{\"239\":1}}],[\"将模型坐标系下的法线变换到视图坐标系下\",{\"1\":{\"239\":1}}],[\"将模型坐标系下的顶点坐标变换到裁剪坐标系下\",{\"1\":{\"239\":1}}],[\"将模型坐标系下的顶点坐标变换到视图坐标系下\",{\"1\":{\"239\":1}}],[\"将纹理坐标系下的顶点坐标变换到纹理单元坐标系下\",{\"1\":{\"239\":1}}],[\"将顶点从裁剪空间转换回模型空间\",{\"1\":{\"239\":1}}],[\"将顶点从裁剪空间转换回标准化设备空间\",{\"1\":{\"239\":1}}],[\"将顶点从视图空间转换回模型空间\",{\"1\":{\"239\":1}}],[\"将顶端的数与末尾的数交换\",{\"1\":{\"59\":1}}],[\"将相机坐标系中的点投影到裁剪空间中\",{\"1\":{\"239\":1}}],[\"将相机坐标系中的点投影到裁剪空间的矩阵\",{\"1\":{\"239\":1}}],[\"将物体从模型坐标系转换到裁剪空间中\",{\"1\":{\"239\":1}}],[\"将物体从模型坐标系转换到裁剪空间的矩阵\",{\"1\":{\"239\":1}}],[\"将物体从模型坐标系转换到相机坐标系\",{\"1\":{\"239\":1}}],[\"将物体在三个轴向上分别按照向量\",{\"1\":{\"196\":1}}],[\"将着色器输出发送到渲染管线的下一阶段\",{\"1\":{\"236\":1}}],[\"将外部数据输入到着色器中\",{\"1\":{\"236\":1}}],[\"将三维纹理坐标转换成二维纹理坐标\",{\"1\":{\"199\":2}}],[\"将三维纹理坐标\",{\"1\":{\"199\":2}}],[\"将给定的纹理坐标和偏移量进行透视除法\",{\"1\":{\"199\":1}}],[\"将给定的纹理坐标进行透视除法\",{\"1\":{\"199\":1}}],[\"将用于对采样纹理值进行偏移\",{\"1\":{\"199\":1}}],[\"将绕着向量\",{\"1\":{\"196\":1}}],[\"将一些现代的css特性\",{\"1\":{\"755\":1}}],[\"将一堆模板字符串用正则等方式解析成抽象语法树\",{\"1\":{\"603\":1}}],[\"将一个三维物体在\",{\"1\":{\"196\":1}}],[\"将一个三维物体绕着\",{\"1\":{\"196\":1}}],[\"将一个三维物体沿着\",{\"1\":{\"196\":1}}],[\"将一块\",{\"1\":{\"43\":1}}],[\"将向量\",{\"1\":{\"196\":1}}],[\"将无符号整数转换为浮点数\",{\"1\":{\"195\":1}}],[\"将浮点数转换为无符号整数\",{\"1\":{\"195\":1}}],[\"将浮点数转换为整数\",{\"1\":{\"195\":1}}],[\"将\",{\"1\":{\"195\":5,\"258\":1,\"517\":2,\"523\":1,\"551\":1,\"556\":1,\"566\":1,\"568\":1,\"575\":1,\"603\":2,\"671\":1,\"720\":1,\"801\":1}}],[\"将参数\",{\"1\":{\"195\":2}}],[\"将plot函数的返回值作为透明度\",{\"1\":{\"190\":1}}],[\"将会跳过后面的loader\",{\"1\":{\"749\":1}}],[\"将会决定这个盒子的\",{\"1\":{\"183\":1}}],[\"将会溢出父元素\",{\"1\":{\"175\":1}}],[\"将不可被分割\",{\"1\":{\"175\":1}}],[\"将伪元素\",{\"1\":{\"145\":1}}],[\"将伪元素挤下来\",{\"1\":{\"145\":1}}],[\"将排序好的桶进行拼接\",{\"1\":{\"61\":1}}],[\"将数组中元素的位置颠倒\",{\"1\":{\"654\":1}}],[\"将数组分成两个子数组\",{\"1\":{\"43\":1}}],[\"将数据写入文件\",{\"1\":{\"455\":1}}],[\"将数据分到桶里\",{\"1\":{\"61\":1}}],[\"将数字信息转换成电信号\",{\"1\":{\"424\":1}}],[\"将每个元素\",{\"1\":{\"60\":1}}],[\"将剩余的\",{\"1\":{\"59\":1}}],[\"将已有序的子序列合并\",{\"1\":{\"57\":1}}],[\"将最小元素移动到已排序的末尾\",{\"1\":{\"54\":1}}],[\"将算法的所有步骤转换为代数项\",{\"1\":{\"32\":1}}],[\"将问题分成一个个网格\",{\"1\":{\"17\":1}}],[\"大多数反射\",{\"1\":{\"293\":1}}],[\"大致看出\",{\"1\":{\"256\":1}}],[\"大的最小整数\",{\"1\":{\"195\":1}}],[\"大的组成右侧数组\",{\"1\":{\"43\":1}}],[\"大于\",{\"1\":{\"221\":1}}],[\"大于最大值\",{\"1\":{\"192\":1}}],[\"大于0\",{\"1\":{\"190\":1}}],[\"大于等于\",{\"1\":{\"190\":1,\"221\":1}}],[\"大概说的是页面中的一块渲染区域\",{\"1\":{\"173\":1}}],[\"大\",{\"1\":{\"32\":1,\"54\":2}}],[\"大o表示法\",{\"0\":{\"32\":1}}],[\"散列表\",{\"0\":{\"26\":1}}],[\"y2\",{\"1\":{\"483\":2}}],[\"y1\",{\"1\":{\"483\":2}}],[\"y+utime\",{\"1\":{\"243\":1}}],[\"y+0\",{\"1\":{\"218\":2}}],[\"y+radius\",{\"1\":{\"218\":1}}],[\"y+sin\",{\"1\":{\"206\":3}}],[\"yyww\",{\"1\":{\"206\":6,\"243\":2}}],[\"y方向的偏导数下\",{\"1\":{\"199\":1}}],[\"y\",{\"1\":{\"190\":15,\"195\":21,\"196\":4,\"197\":6,\"198\":5,\"200\":7,\"202\":16,\"204\":8,\"206\":38,\"211\":1,\"215\":2,\"216\":2,\"217\":3,\"218\":13,\"224\":3,\"225\":5,\"226\":2,\"227\":6,\"231\":38,\"234\":3,\"237\":1,\"238\":2,\"240\":1,\"243\":15,\"282\":2,\"641\":1,\"803\":1}}],[\"yet\",{\"1\":{\"649\":1,\"656\":1}}],[\"yellow\",{\"1\":{\"254\":1}}],[\"yes\",{\"1\":{\"141\":1}}],[\"years\",{\"1\":{\"713\":1}}],[\"year\",{\"1\":{\"79\":1}}],[\"your\",{\"1\":{\"226\":1,\"584\":1}}],[\"you\",{\"1\":{\"23\":1,\"141\":2,\"542\":1}}],[\"yue\",{\"1\":{\"23\":1}}],[\"yield\",{\"0\":{\"269\":1,\"271\":1},\"1\":{\"263\":1,\"269\":12,\"270\":4,\"271\":9,\"272\":3,\"273\":1,\"274\":5}}],[\"yi\",{\"1\":{\"18\":1}}],[\"步骤\",{\"0\":{\"522\":1,\"671\":1}}],[\"步到达数组的最后一个位置\",{\"1\":{\"23\":1}}],[\"步\",{\"1\":{\"23\":1}}],[\"从服务端向客户端发送数据时\",{\"1\":{\"803\":1}}],[\"从服务器断开并删除嵌套字\",{\"0\":{\"369\":1}}],[\"从客户端向服务端发送数据时\",{\"1\":{\"803\":1}}],[\"从哪些文件转换过来的source\",{\"1\":{\"759\":1}}],[\"从右向左调用之前\",{\"1\":{\"749\":1}}],[\"从右到左\",{\"1\":{\"725\":1}}],[\"从右到左被调用\",{\"1\":{\"725\":1}}],[\"从左到右\",{\"1\":{\"725\":1}}],[\"从后往前\",{\"1\":{\"693\":1}}],[\"从record记录中的\",{\"1\":{\"654\":2}}],[\"从matched\",{\"1\":{\"653\":1}}],[\"从根节点开始\",{\"1\":{\"613\":1}}],[\"从<div之后到开始标签的结束符号\",{\"1\":{\"607\":1}}],[\"从队列末尾开始倒序遍历\",{\"1\":{\"557\":1}}],[\"从接入网向网络运营商传输网络包时还使用了\",{\"1\":{\"426\":1}}],[\"从互联网访问公司内网\",{\"0\":{\"411\":1}}],[\"从计算机发送出来的网络包会通过集线器\",{\"1\":{\"387\":1}}],[\"从网线到网络设备\",{\"0\":{\"385\":1}}],[\"从网络传给渲染引擎的\",{\"1\":{\"133\":1}}],[\"从屏幕左侧右滑离开小程序\",{\"1\":{\"324\":1}}],[\"从上图中\",{\"1\":{\"256\":1}}],[\"从微队列\",{\"1\":{\"251\":1}}],[\"从纹理中手动指定\",{\"1\":{\"199\":2}}],[\"从纹理中返回插值颜色\",{\"1\":{\"199\":1}}],[\"从纹理中检索带有偏移量的单个颜色值\",{\"1\":{\"199\":1}}],[\"从纹理中获取单个像素的颜色\",{\"1\":{\"199\":1}}],[\"从纹理采样器中直接获取指定级别\",{\"1\":{\"199\":1}}],[\"从纹理采样器中直接获取指定级别和坐标处的纹素值\",{\"1\":{\"199\":1}}],[\"从纹理采样器中获取给定坐标和偏移量处的颜色值或纹理值\",{\"1\":{\"199\":1}}],[\"从纹理采样器中获取给定坐标处\",{\"1\":{\"199\":1}}],[\"从纹理采样器中获取给定坐标处的颜色值\",{\"1\":{\"199\":1}}],[\"从特定\",{\"1\":{\"199\":1}}],[\"从二维深度纹理数组中获取纹素深度值\",{\"1\":{\"199\":1}}],[\"从二维深度纹理图像中获取纹素深度值\",{\"1\":{\"199\":1}}],[\"从二维纹理数组中获取纹素颜色值\",{\"1\":{\"199\":1}}],[\"从二维纹理图像中获取纹素颜色值\",{\"1\":{\"199\":1}}],[\"从一维深度纹理数组中获取纹素深度值\",{\"1\":{\"199\":1}}],[\"从一维深度纹理图像中获取纹素深度值\",{\"1\":{\"199\":1}}],[\"从一维纹理数组中获取纹素颜色值\",{\"1\":{\"199\":1}}],[\"从一维纹理图像中获取纹素颜色值\",{\"1\":{\"199\":1}}],[\"从立方体贴图数组中获取纹素颜色值\",{\"1\":{\"199\":1}}],[\"从立方体贴图中获取纹素颜色值\",{\"1\":{\"199\":1}}],[\"从三维纹理图像中获取纹素颜色值\",{\"1\":{\"199\":1}}],[\"从名字能大致清楚一个选择器可以在哪里使用\",{\"1\":{\"138\":1}}],[\"从安全视角来看\",{\"1\":{\"133\":1}}],[\"从\",{\"1\":{\"133\":1,\"138\":1,\"232\":1,\"256\":1,\"644\":1,\"650\":2,\"654\":2,\"713\":1}}],[\"从页面的视角来看\",{\"1\":{\"133\":1}}],[\"从而可以在回调函数中访问到\",{\"1\":{\"738\":1}}],[\"从而可以直接使用这些类型\",{\"1\":{\"75\":1}}],[\"从而生成一组新的编译资源\",{\"1\":{\"737\":1}}],[\"从而减少了比较的过程\",{\"1\":{\"603\":1}}],[\"从而让破解者难以阅读\",{\"1\":{\"517\":1}}],[\"从而让不同的代码互操作\",{\"1\":{\"320\":1}}],[\"从而达到绕过某些防护与参数校验的后果\",{\"1\":{\"476\":1}}],[\"从而使得噪声电流相互抵消\",{\"1\":{\"389\":1}}],[\"从而使一系列随机的内存地址串在一起\",{\"1\":{\"49\":1}}],[\"从而拦截并修改相应的行为\",{\"1\":{\"288\":1}}],[\"从而一次产出一个值\",{\"1\":{\"272\":1}}],[\"从而创建一个迭代器\",{\"1\":{\"263\":1}}],[\"从而方便地将一组数据传递给函数进行处理\",{\"1\":{\"232\":1}}],[\"从而改变文档的结构\",{\"1\":{\"133\":1}}],[\"从而提高程序的执行效率\",{\"1\":{\"72\":1}}],[\"从最低位开始\",{\"1\":{\"62\":1}}],[\"从数列中挑出一个元素\",{\"1\":{\"58\":1}}],[\"从开始第一对到结尾的最后一对\",{\"1\":{\"53\":1}}],[\"从下标为\",{\"1\":{\"23\":1}}],[\"从小到大排序\",{\"1\":{\"558\":1}}],[\"从小到大\",{\"1\":{\"9\":1}}],[\"跳过静态节点\",{\"1\":{\"596\":1}}],[\"跳转过去了自动提交表单\",{\"1\":{\"469\":1}}],[\"跳\",{\"1\":{\"23\":1}}],[\"跳到下标为\",{\"1\":{\"23\":1}}],[\"跳到最后一个位置的最小跳跃数是\",{\"1\":{\"23\":1}}],[\"跳跃游戏\",{\"0\":{\"23\":1}}],[\"❌\",{\"1\":{\"22\":2}}],[\"✅\",{\"1\":{\"22\":3}}],[\"选好遍历所有getter\",{\"1\":{\"663\":1}}],[\"选项时可以通过配置项\",{\"1\":{\"558\":1}}],[\"选项的值\",{\"1\":{\"555\":1}}],[\"选\",{\"1\":{\"43\":1}}],[\"选择对哪些文件进行拆分\",{\"1\":{\"720\":1}}],[\"选择类似于\",{\"1\":{\"713\":1}}],[\"选择一个包含范围的版本\",{\"1\":{\"713\":1}}],[\"选择最新的\",{\"1\":{\"713\":1}}],[\"选择最短路径\",{\"1\":{\"1\":1}}],[\"选择器的方式\",{\"1\":{\"624\":1}}],[\"选择器\",{\"0\":{\"506\":1}}],[\"选择器具体做什么\",{\"1\":{\"138\":1}}],[\"选择基准值\",{\"1\":{\"43\":1}}],[\"选择排序\",{\"0\":{\"49\":1,\"54\":1},\"1\":{\"33\":1,\"49\":1}}],[\"选出结束最早的课\",{\"1\":{\"22\":1}}],[\"音乐\",{\"1\":{\"22\":2}}],[\"音响\",{\"1\":{\"17\":7}}],[\"数值也可能包含前缀\",{\"1\":{\"164\":1}}],[\"数值数据类型\",{\"0\":{\"162\":1}}],[\"数值\",{\"1\":{\"146\":1}}],[\"数据载荷都进行了掩码操作\",{\"1\":{\"803\":1}}],[\"数据载荷的长度\",{\"1\":{\"803\":1}}],[\"数据的长度为\",{\"1\":{\"803\":1}}],[\"数据的修改操作\",{\"1\":{\"543\":1}}],[\"数据帧格式\",{\"0\":{\"803\":1}}],[\"数据帧\",{\"0\":{\"802\":1}}],[\"数据包的头部数据量往往很大\",{\"1\":{\"794\":1}}],[\"数据响应式的入口\",{\"1\":{\"549\":1}}],[\"数据缓存\",{\"0\":{\"500\":1}}],[\"数据收发操作小结\",{\"0\":{\"372\":1}}],[\"数据收发操作概览\",{\"0\":{\"349\":1}}],[\"数据发送完毕后断开连接\",{\"0\":{\"370\":1}}],[\"数据沿着这条通道流动\",{\"1\":{\"349\":1}}],[\"数据绑定与可观测对象\",{\"0\":{\"320\":1}}],[\"数据类型\",{\"1\":{\"230\":5}}],[\"数据\",{\"1\":{\"96\":1}}],[\"数字\",{\"1\":{\"66\":2,\"688\":1}}],[\"数列就变成一个有序序列\",{\"1\":{\"62\":1}}],[\"数位较短的数前面补零\",{\"1\":{\"62\":1}}],[\"数学函数\",{\"0\":{\"195\":1}}],[\"数学\",{\"1\":{\"22\":2}}],[\"数组里节点相同的位置\",{\"1\":{\"597\":2}}],[\"数组里的该节点移动到与\",{\"1\":{\"597\":2}}],[\"数组里的所有未处理子节点的第一个子节点和\",{\"1\":{\"597\":1}}],[\"数组里所有未处理子节点的第一个子节点和\",{\"1\":{\"597\":1}}],[\"数组里所有未处理子节点的第一个子节点做比对\",{\"1\":{\"597\":2}}],[\"数组里所有未处理子节点的最后一个子节点做比对\",{\"1\":{\"597\":2}}],[\"数组里所有未处理子节点的最后一个子节点和\",{\"1\":{\"597\":2}}],[\"数组里面放普通对象或者stirng\",{\"1\":{\"555\":1}}],[\"数组里面放stirng\",{\"1\":{\"555\":1}}],[\"数组就是\",{\"1\":{\"568\":1}}],[\"数组不支持\",{\"1\":{\"561\":1}}],[\"数组中放入新的\",{\"1\":{\"558\":1}}],[\"数组中的每一个函数\",{\"1\":{\"568\":1}}],[\"数组中的每一项都只能先通过引用取得数组对象\",{\"1\":{\"260\":1}}],[\"数组中的每个元素代表你在该位置可以跳跃的最大长度\",{\"1\":{\"23\":1}}],[\"数组执行sub\",{\"1\":{\"556\":1}}],[\"数组解构\",{\"1\":{\"263\":2}}],[\"数组类型变量\",{\"0\":{\"232\":1}}],[\"数组下标\",{\"1\":{\"221\":1}}],[\"数组的长度\",{\"1\":{\"608\":1}}],[\"数组的长度需要在定义时指定\",{\"1\":{\"232\":1}}],[\"数组的七个方法\",{\"1\":{\"561\":1}}],[\"数组的元素将使用\",{\"1\":{\"241\":1}}],[\"数组的元素值\",{\"1\":{\"60\":1}}],[\"数组的索引\",{\"1\":{\"60\":1}}],[\"数组\",{\"1\":{\"9\":1,\"43\":1,\"232\":1,\"263\":1,\"568\":1,\"571\":1,\"591\":1,\"651\":1}}],[\"英语\",{\"1\":{\"22\":2,\"482\":1}}],[\"美术\",{\"1\":{\"22\":2}}],[\"课程\",{\"1\":{\"22\":2}}],[\"教室调度问题\",{\"0\":{\"22\":1}}],[\"贪婪算法\",{\"0\":{\"21\":1}}],[\"筛选最小话费\",{\"1\":{\"18\":1}}],[\"遍历子module\",{\"1\":{\"663\":1}}],[\"遍历子路由\",{\"1\":{\"644\":1}}],[\"遍历路由配置\",{\"1\":{\"644\":1}}],[\"遍历新老两组节点\",{\"1\":{\"597\":1}}],[\"遍历对象上的每个\",{\"1\":{\"561\":1}}],[\"遍历\",{\"1\":{\"551\":1,\"556\":1,\"558\":1,\"603\":1,\"625\":1,\"650\":1,\"654\":2}}],[\"遍历器对象本质上\",{\"1\":{\"265\":1}}],[\"遍历是否结束\",{\"1\":{\"265\":1}}],[\"遍历顺序并不是数据结构固有的\",{\"1\":{\"260\":1}}],[\"遍历数组\",{\"1\":{\"232\":1,\"561\":1}}],[\"遍历原数组中的元素\",{\"1\":{\"60\":1}}],[\"遍历航班次数\",{\"1\":{\"18\":1}}],[\"遍历边\",{\"1\":{\"1\":1}}],[\"话费\",{\"1\":{\"18\":1}}],[\"话费为0\",{\"1\":{\"18\":1}}],[\"jdk\",{\"1\":{\"517\":1}}],[\"jianshu\",{\"1\":{\"517\":1}}],[\"jingleheimerschmidt\",{\"1\":{\"320\":1}}],[\"jit编译器通常用于\",{\"1\":{\"72\":1}}],[\"jit编译器在程序运行时将cil代码转换为机器代码\",{\"1\":{\"72\":1}}],[\"jit编译器\",{\"0\":{\"72\":1},\"1\":{\"72\":1}}],[\"job\",{\"1\":{\"565\":1}}],[\"john\",{\"1\":{\"320\":3}}],[\"join\",{\"1\":{\"104\":1,\"611\":1,\"663\":1}}],[\"jar\",{\"1\":{\"517\":4}}],[\"java放置我们所有\",{\"1\":{\"517\":1}}],[\"java\",{\"1\":{\"517\":3}}],[\"javascript引擎会将执行上下文压入栈中\",{\"1\":{\"117\":1}}],[\"javascript引擎正是利用栈的这种结构来管理执行上下文的\",{\"1\":{\"117\":1}}],[\"javascript引擎通过一种叫栈的数据结构来管理执行上下文\",{\"1\":{\"117\":1}}],[\"javascript代码的执行流程\",{\"0\":{\"116\":1}}],[\"javascript执行机制\",{\"0\":{\"113\":1}}],[\"javascript\",{\"0\":{\"812\":1},\"1\":{\"95\":1,\"128\":2,\"133\":3,\"249\":1,\"255\":1,\"278\":1,\"636\":1,\"688\":1,\"692\":1,\"736\":1,\"744\":2,\"795\":1},\"2\":{\"259\":1,\"275\":1,\"284\":1,\"321\":1}}],[\"javascript的最大整数\",{\"1\":{\"1\":1}}],[\"jacob\",{\"1\":{\"320\":3}}],[\"jake\",{\"1\":{\"316\":1}}],[\"js|css\",{\"1\":{\"720\":1}}],[\"js10\",{\"1\":{\"713\":1}}],[\"js也要兼容市场占有率大于1\",{\"1\":{\"712\":1}}],[\"js$\",{\"1\":{\"699\":1,\"703\":1,\"704\":1,\"705\":1,\"723\":1,\"724\":1,\"726\":1,\"729\":1,\"730\":1}}],[\"js和regenerator\",{\"1\":{\"699\":1}}],[\"jsxtext\",{\"1\":{\"690\":2}}],[\"jsxclosingelement\",{\"1\":{\"690\":2}}],[\"jsxidentifier\",{\"1\":{\"690\":4}}],[\"jsxopeningelement\",{\"1\":{\"690\":2}}],[\"jsxelement\",{\"1\":{\"689\":2,\"690\":4}}],[\"jsx\",{\"1\":{\"689\":2}}],[\"js为什么不使用pm2\",{\"1\":{\"452\":1}}],[\"jss\",{\"1\":{\"452\":1}}],[\"js\",{\"1\":{\"102\":3,\"103\":3,\"104\":3,\"108\":4,\"247\":6,\"255\":3,\"258\":1,\"326\":1,\"327\":1,\"463\":2,\"584\":1,\"603\":3,\"631\":1,\"635\":2,\"637\":13,\"638\":2,\"642\":1,\"658\":1,\"699\":3,\"700\":1,\"703\":1,\"704\":1,\"705\":1,\"706\":3,\"709\":1,\"710\":1,\"713\":4,\"718\":2,\"719\":1,\"720\":2,\"723\":1,\"724\":1,\"726\":1,\"727\":1,\"728\":1,\"729\":2,\"730\":2,\"751\":1,\"752\":1,\"755\":5,\"758\":2,\"761\":1,\"762\":1,\"771\":5,\"787\":1}}],[\"json配置\",{\"1\":{\"715\":1}}],[\"json的多级结构采用proxy\",{\"1\":{\"89\":1}}],[\"json的单结构读取\",{\"1\":{\"89\":1}}],[\"json\",{\"1\":{\"89\":5,\"534\":1,\"611\":2,\"626\":1,\"690\":1,\"706\":4,\"713\":1,\"730\":2,\"744\":1,\"771\":1}}],[\"jsript\",{\"1\":{\"65\":1}}],[\"juejin\",{\"1\":{\"561\":1}}],[\"just\",{\"1\":{\"72\":1,\"521\":1,\"554\":1,\"575\":1,\"591\":1,\"614\":2,\"663\":1}}],[\"jump\",{\"1\":{\"23\":3}}],[\"j++\",{\"1\":{\"53\":1,\"54\":1,\"60\":1,\"61\":1,\"62\":2}}],[\"j\",{\"1\":{\"18\":2,\"53\":8,\"54\":5,\"56\":8,\"58\":3,\"60\":5,\"61\":3,\"62\":8,\"65\":1,\"70\":1,\"548\":2,\"595\":5,\"804\":1}}],[\"城市和航班次数\",{\"1\":{\"18\":1}}],[\"城市\",{\"1\":{\"18\":2}}],[\"花费\",{\"1\":{\"18\":1}}],[\"航班\",{\"1\":{\"18\":2}}],[\"vlq\",{\"1\":{\"759\":1}}],[\"v3\",{\"1\":{\"540\":1,\"660\":1}}],[\"vca\",{\"1\":{\"540\":2}}],[\"vnodetomove\",{\"1\":{\"597\":5}}],[\"vnodetocache\",{\"1\":{\"573\":5}}],[\"vnodedata\",{\"1\":{\"584\":2,\"585\":1,\"656\":3}}],[\"vnodewithdata\",{\"1\":{\"535\":4}}],[\"vnode\",{\"1\":{\"532\":4,\"535\":15,\"560\":2,\"566\":2,\"573\":17,\"574\":1,\"575\":16,\"583\":17,\"584\":20,\"585\":5,\"586\":11,\"587\":8,\"588\":18,\"589\":2,\"590\":28,\"591\":15,\"592\":11,\"595\":5,\"596\":26,\"597\":3,\"615\":2,\"656\":7}}],[\"vm上的值\",{\"1\":{\"670\":2}}],[\"vm根实例\",{\"1\":{\"642\":1}}],[\"vm里面的数据\",{\"1\":{\"566\":1}}],[\"vms\",{\"1\":{\"561\":1}}],[\"vmcount\",{\"1\":{\"561\":2}}],[\"vmcount++\",{\"1\":{\"549\":1,\"553\":1,\"560\":1}}],[\"vm\",{\"0\":{\"545\":1},\"1\":{\"519\":1,\"520\":3,\"521\":12,\"528\":3,\"529\":2,\"538\":4,\"544\":31,\"545\":3,\"547\":7,\"548\":7,\"549\":9,\"550\":1,\"551\":12,\"552\":4,\"553\":7,\"554\":7,\"555\":13,\"556\":1,\"558\":1,\"559\":3,\"560\":4,\"563\":1,\"565\":18,\"566\":21,\"580\":2,\"581\":3,\"582\":19,\"583\":18,\"584\":25,\"586\":23,\"603\":1,\"642\":6,\"648\":1,\"656\":3,\"660\":1,\"663\":5,\"665\":3,\"667\":2,\"668\":6,\"669\":3,\"670\":22,\"671\":2}}],[\"vux\",{\"0\":{\"665\":1}}],[\"vue$\",{\"1\":{\"718\":2}}],[\"vue3打包后\",{\"1\":{\"679\":1}}],[\"vue3对于不参与更新的元素\",{\"1\":{\"676\":1}}],[\"vue3\",{\"0\":{\"673\":1,\"820\":1},\"1\":{\"675\":1},\"2\":{\"685\":1}}],[\"vue组件用于watch监视变化\",{\"1\":{\"660\":1}}],[\"vue实例\",{\"1\":{\"659\":1}}],[\"vue根实例\",{\"1\":{\"642\":1}}],[\"vuerouter\",{\"0\":{\"643\":1},\"1\":{\"641\":3,\"642\":1,\"643\":3,\"644\":1,\"648\":1}}],[\"vue文件\",{\"1\":{\"638\":1}}],[\"vue的都会匹配到\",{\"1\":{\"636\":1}}],[\"vueloaderplugin\",{\"0\":{\"636\":1},\"1\":{\"636\":1,\"718\":2}}],[\"vue<\",{\"1\":{\"635\":2}}],[\"vuex其实构建的就是一个名为store的vm组件\",{\"1\":{\"663\":1}}],[\"vuex将会产生非法修改state的警告\",{\"1\":{\"662\":1}}],[\"vuexinit\",{\"1\":{\"659\":2}}],[\"vuex\",{\"0\":{\"658\":1},\"1\":{\"635\":2,\"658\":5,\"659\":2,\"660\":2,\"663\":5,\"664\":4}}],[\"vuejs\",{\"1\":{\"635\":26,\"642\":1,\"644\":1,\"649\":3,\"651\":1,\"660\":1}}],[\"vue\",{\"0\":{\"539\":1,\"541\":1,\"629\":1,\"633\":1,\"635\":1,\"641\":1,\"659\":1},\"1\":{\"519\":1,\"528\":1,\"529\":2,\"532\":3,\"538\":4,\"539\":1,\"540\":11,\"541\":4,\"542\":17,\"543\":36,\"544\":4,\"546\":2,\"549\":2,\"551\":1,\"555\":1,\"566\":3,\"570\":1,\"572\":1,\"580\":1,\"581\":2,\"583\":1,\"584\":3,\"585\":2,\"586\":5,\"587\":1,\"600\":1,\"601\":3,\"602\":3,\"603\":3,\"625\":4,\"626\":2,\"627\":2,\"629\":3,\"631\":2,\"635\":31,\"636\":1,\"637\":25,\"638\":13,\"641\":5,\"642\":15,\"649\":3,\"651\":1,\"653\":8,\"654\":2,\"655\":1,\"656\":5,\"658\":4,\"659\":13,\"660\":7,\"663\":7,\"665\":7,\"667\":1,\"670\":2,\"679\":1,\"718\":3},\"2\":{\"525\":1,\"536\":1,\"569\":1,\"576\":1,\"579\":1,\"598\":1,\"616\":1,\"632\":1,\"639\":1,\"657\":1,\"666\":1,\"672\":1,\"684\":1}}],[\"vue2组件必须有一个跟节点\",{\"1\":{\"677\":1}}],[\"vue2无论元素是否参与更新\",{\"1\":{\"676\":1}}],[\"vue2\",{\"0\":{\"519\":1,\"526\":1,\"537\":1,\"570\":1,\"577\":1,\"580\":1,\"599\":1,\"617\":1,\"667\":1,\"673\":1,\"819\":1},\"1\":{\"635\":1,\"675\":1,\"678\":1},\"2\":{\"640\":1}}],[\"vuv\",{\"1\":{\"202\":47,\"204\":40,\"206\":49,\"243\":2}}],[\"v4\",{\"1\":{\"517\":1}}],[\"volume\",{\"1\":{\"230\":2}}],[\"void\",{\"1\":{\"64\":1,\"68\":1,\"75\":1,\"77\":5,\"80\":1,\"82\":2,\"84\":5,\"89\":2,\"190\":3,\"199\":13,\"202\":16,\"204\":16,\"206\":16,\"209\":2,\"210\":1,\"211\":1,\"215\":1,\"216\":1,\"217\":1,\"218\":1,\"224\":2,\"225\":2,\"226\":2,\"227\":1,\"238\":6,\"239\":19,\"240\":6,\"243\":2,\"532\":1,\"560\":2,\"565\":2,\"585\":2,\"615\":3,\"656\":1}}],[\"v2\",{\"1\":{\"195\":12,\"237\":1}}],[\"v1\",{\"1\":{\"195\":12}}],[\"vw\",{\"1\":{\"180\":1}}],[\"vh\",{\"1\":{\"180\":1}}],[\"vendors\",{\"1\":{\"720\":1}}],[\"ve\",{\"1\":{\"575\":1,\"591\":1}}],[\"veriable\",{\"1\":{\"759\":1}}],[\"versions\",{\"1\":{\"712\":1,\"713\":8}}],[\"version\",{\"1\":{\"541\":2,\"659\":3,\"697\":1,\"714\":1,\"715\":2,\"759\":1,\"799\":2}}],[\"vertextexcoord\",{\"1\":{\"239\":1}}],[\"vertexinnormalizeddevicespace\",{\"1\":{\"239\":1}}],[\"vertexinclipspace\",{\"1\":{\"239\":4}}],[\"vertexinmodelspace\",{\"1\":{\"239\":2}}],[\"vertexinviewspace\",{\"1\":{\"239\":2}}],[\"vertex\",{\"1\":{\"239\":3}}],[\"vertexshader\",{\"1\":{\"237\":2,\"243\":2}}],[\"vertexnormal\",{\"1\":{\"236\":1,\"239\":4}}],[\"vertexposition\",{\"1\":{\"236\":1,\"239\":2}}],[\"vertical\",{\"1\":{\"175\":1}}],[\"velevation\",{\"1\":{\"243\":4}}],[\"vec\",{\"1\":{\"199\":12}}],[\"vector2\",{\"1\":{\"237\":1}}],[\"vectorb\",{\"1\":{\"197\":4}}],[\"vectora\",{\"1\":{\"197\":4}}],[\"vector\",{\"1\":{\"197\":4,\"225\":2}}],[\"vec4\",{\"1\":{\"190\":3,\"193\":1,\"195\":13,\"199\":50,\"202\":1,\"206\":48,\"209\":3,\"210\":2,\"211\":1,\"215\":1,\"216\":1,\"217\":1,\"218\":2,\"224\":4,\"225\":3,\"226\":2,\"227\":1,\"231\":6,\"232\":5,\"235\":4,\"236\":2,\"238\":4,\"239\":28,\"240\":13,\"243\":20}}],[\"vec3\",{\"1\":{\"190\":13,\"193\":1,\"195\":21,\"196\":9,\"197\":35,\"199\":7,\"206\":7,\"210\":1,\"215\":4,\"216\":4,\"217\":4,\"218\":10,\"224\":3,\"225\":7,\"226\":6,\"227\":3,\"231\":5,\"234\":9,\"235\":6,\"236\":3,\"238\":2,\"239\":14,\"243\":1}}],[\"vec2\",{\"1\":{\"190\":11,\"193\":3,\"196\":2,\"197\":2,\"199\":37,\"200\":13,\"202\":16,\"204\":26,\"206\":112,\"210\":1,\"211\":3,\"215\":12,\"216\":13,\"217\":14,\"218\":30,\"224\":9,\"225\":11,\"226\":9,\"227\":5,\"231\":5,\"235\":4,\"238\":1,\"239\":4,\"240\":4,\"241\":2,\"243\":34}}],[\"ves\",{\"1\":{\"70\":2}}],[\"v\",{\"0\":{\"528\":1,\"529\":1,\"530\":1},\"1\":{\"154\":1,\"193\":1,\"195\":24,\"196\":8,\"231\":7,\"239\":4,\"517\":3,\"519\":2,\"528\":7,\"529\":1,\"532\":2,\"534\":4,\"544\":1,\"555\":6,\"560\":1,\"572\":2,\"584\":11,\"588\":12,\"594\":2,\"596\":1,\"606\":3,\"613\":10,\"615\":2,\"617\":1,\"619\":2,\"622\":2,\"623\":1,\"627\":1,\"631\":1,\"642\":2}}],[\"v8\",{\"1\":{\"95\":1,\"250\":2,\"255\":4,\"517\":1}}],[\"vi>\",{\"1\":{\"572\":1}}],[\"via\",{\"1\":{\"534\":1}}],[\"view嵌套深度\",{\"1\":{\"656\":1}}],[\"view嵌套超过两层\",{\"1\":{\"571\":1}}],[\"view的路由组件\",{\"1\":{\"642\":1}}],[\"view关联当前vm\",{\"1\":{\"642\":1}}],[\"view组件\",{\"1\":{\"642\":1}}],[\"view组件定义在\",{\"1\":{\"642\":1}}],[\"view组件中存在\",{\"1\":{\"642\":2}}],[\"view组件关联路由组件\",{\"1\":{\"642\":2}}],[\"view>\",{\"1\":{\"572\":1}}],[\"views\",{\"1\":{\"572\":1,\"641\":1}}],[\"view处添加一层keep\",{\"1\":{\"571\":1}}],[\"viewtap\",{\"1\":{\"327\":1}}],[\"viewmatrix\",{\"1\":{\"243\":2}}],[\"viewportindex\",{\"1\":{\"240\":3}}],[\"view\",{\"0\":{\"656\":1},\"1\":{\"218\":1,\"225\":1,\"327\":1,\"571\":4,\"572\":3,\"584\":1,\"642\":5,\"656\":8}}],[\"visual\",{\"1\":{\"183\":1}}],[\"visible\",{\"1\":{\"174\":1}}],[\"visited\",{\"1\":{\"1\":4}}],[\"virtual\",{\"1\":{\"70\":1,\"77\":1,\"84\":1,\"588\":1}}],[\"vbind\",{\"1\":{\"534\":2}}],[\"vb\",{\"1\":{\"65\":4,\"70\":1}}],[\"val\",{\"1\":{\"547\":8,\"550\":2,\"559\":4,\"563\":8,\"573\":4,\"642\":5,\"656\":5,\"664\":8,\"665\":1,\"667\":6}}],[\"validate\",{\"1\":{\"730\":2}}],[\"validateprop\",{\"1\":{\"551\":1}}],[\"validity\",{\"1\":{\"517\":1}}],[\"validident\",{\"1\":{\"158\":2}}],[\"validgeneratorfn\",{\"1\":{\"269\":1}}],[\"validstring\",{\"1\":{\"158\":1}}],[\"value=\",{\"1\":{\"517\":1}}],[\"values和assets\",{\"1\":{\"517\":1}}],[\"values\",{\"1\":{\"190\":1,\"232\":2,\"263\":5,\"265\":1,\"273\":2,\"283\":3}}],[\"value\",{\"1\":{\"62\":3,\"77\":2,\"79\":4,\"80\":3,\"89\":2,\"102\":12,\"103\":16,\"104\":16,\"190\":1,\"195\":22,\"232\":1,\"237\":5,\"260\":3,\"261\":1,\"264\":1,\"265\":9,\"266\":4,\"268\":2,\"269\":5,\"271\":8,\"274\":8,\"278\":1,\"280\":5,\"281\":2,\"282\":8,\"283\":18,\"290\":1,\"294\":1,\"303\":7,\"305\":2,\"316\":2,\"318\":2,\"320\":1,\"476\":1,\"521\":7,\"524\":1,\"528\":5,\"534\":11,\"535\":1,\"551\":2,\"554\":2,\"555\":1,\"559\":12,\"560\":13,\"561\":13,\"563\":16,\"565\":20,\"566\":5,\"584\":1,\"606\":2,\"608\":3,\"651\":1,\"655\":1,\"667\":1,\"670\":20,\"689\":12,\"690\":15}}],[\"var等\",{\"1\":{\"688\":1}}],[\"variabledeclarator\",{\"1\":{\"690\":6}}],[\"variabledeclaration\",{\"1\":{\"690\":5}}],[\"variable\",{\"1\":{\"595\":1}}],[\"varying\",{\"1\":{\"199\":11,\"202\":16,\"204\":16,\"206\":16,\"211\":1,\"236\":6,\"239\":9,\"243\":3}}],[\"vartest\",{\"1\":{\"121\":1}}],[\"var\",{\"1\":{\"18\":1,\"80\":1,\"114\":1,\"115\":3,\"117\":4,\"120\":3,\"121\":2,\"122\":2,\"123\":2,\"126\":3,\"127\":3,\"186\":1,\"320\":1,\"455\":1,\"519\":1,\"566\":3,\"584\":4,\"635\":2,\"638\":1,\"642\":1,\"644\":10,\"665\":1,\"667\":1,\"690\":1,\"789\":5}}],[\"99\",{\"1\":{\"260\":2,\"713\":3}}],[\"90\",{\"1\":{\"218\":3,\"233\":1,\"434\":1,\"644\":1}}],[\"9007199254740991\",{\"1\":{\"1\":1}}],[\"969\",{\"1\":{\"218\":1}}],[\"98\",{\"1\":{\"218\":1}}],[\"9898\",{\"1\":{\"200\":1,\"204\":2,\"206\":2,\"243\":1}}],[\"95ca\",{\"1\":{\"801\":2}}],[\"9511\",{\"1\":{\"670\":1}}],[\"953\",{\"1\":{\"218\":1,\"224\":1}}],[\"95\",{\"1\":{\"218\":1}}],[\"954402\",{\"1\":{\"18\":1}}],[\"9利用step\",{\"1\":{\"202\":1}}],[\"9\",{\"0\":{\"633\":1},\"1\":{\"22\":2,\"43\":1,\"66\":1,\"102\":1,\"103\":1,\"104\":1,\"158\":1,\"163\":1,\"171\":1,\"195\":8,\"196\":1,\"206\":1,\"218\":5,\"226\":1,\"517\":2,\"635\":1,\"637\":6,\"638\":2,\"713\":1,\"718\":1,\"803\":3}}],[\"9am\",{\"1\":{\"22\":2}}],[\"经过一站\",{\"1\":{\"18\":1}}],[\"则没有\",{\"1\":{\"803\":1}}],[\"则反过来\",{\"1\":{\"748\":1}}],[\"则为router\",{\"1\":{\"642\":1}}],[\"则所有的子组件中的\",{\"1\":{\"624\":1}}],[\"则有以下几种可能\",{\"1\":{\"606\":1}}],[\"则移除这些节点\",{\"1\":{\"597\":1}}],[\"则说明这部分剩余的节点是新增的节点\",{\"1\":{\"597\":1}}],[\"则说明是一个\",{\"1\":{\"555\":1}}],[\"则跳出循环\",{\"1\":{\"597\":1}}],[\"则跳过\",{\"1\":{\"557\":1}}],[\"则剩余的老节点执行删除操作\",{\"1\":{\"597\":1}}],[\"则剩余的新节点执行新增节点操作\",{\"1\":{\"597\":1}}],[\"则通过遍历找到新开始节点在老节点中的位置索引\",{\"1\":{\"597\":1}}],[\"则更新文本节点\",{\"1\":{\"596\":1}}],[\"则删除老节点的这些孩子\",{\"1\":{\"596\":1}}],[\"则新增新节点的这些孩子节点\",{\"1\":{\"596\":1}}],[\"则递归执行\",{\"1\":{\"596\":1}}],[\"则重用这部分节点\",{\"1\":{\"596\":1}}],[\"则初始化组件\",{\"1\":{\"591\":1}}],[\"则什么也不错\",{\"1\":{\"590\":1}}],[\"则激活组件\",{\"1\":{\"590\":1}}],[\"则执行install方法\",{\"1\":{\"660\":1}}],[\"则执行\",{\"1\":{\"590\":1,\"591\":1}}],[\"则执行用户传递的第三个参数\",{\"1\":{\"559\":1}}],[\"则也是相同的\",{\"1\":{\"589\":1}}],[\"则根据\",{\"1\":{\"588\":1}}],[\"则是更新阶段\",{\"1\":{\"588\":1}}],[\"则调用createelement方法创建元素节点\",{\"1\":{\"590\":1}}],[\"则调用\",{\"1\":{\"588\":1,\"591\":1}}],[\"则表示初次渲染\",{\"1\":{\"588\":1}}],[\"则表示浏览器的任务队列中已经被放入了\",{\"1\":{\"567\":1}}],[\"则表示已经做过观察了\",{\"1\":{\"560\":1}}],[\"则直接创建一个普通\",{\"1\":{\"584\":1}}],[\"则直接调用\",{\"1\":{\"584\":1}}],[\"则直接\",{\"1\":{\"563\":1}}],[\"则将文本内容置空\",{\"1\":{\"596\":1}}],[\"则将\",{\"1\":{\"561\":1}}],[\"则将whatisthis\",{\"1\":{\"334\":2}}],[\"则由\",{\"1\":{\"559\":1}}],[\"则它的\",{\"1\":{\"558\":1}}],[\"则立即执行一次回调函数\",{\"1\":{\"555\":1}}],[\"则获取其中的\",{\"1\":{\"555\":1}}],[\"则进行\",{\"1\":{\"540\":1}}],[\"则该地址就是下一个转\",{\"1\":{\"405\":1}}],[\"则唯一有效的\",{\"1\":{\"310\":1}}],[\"则\",{\"1\":{\"309\":1,\"405\":1}}],[\"则不能添加同名的可配置属性\",{\"1\":{\"305\":1}}],[\"则不能添加同名的不可配置属性\",{\"1\":{\"305\":1}}],[\"则不能修改目标属性的值\",{\"1\":{\"303\":2}}],[\"则无法定义属性\",{\"1\":{\"305\":1}}],[\"则无法知道迭代器的当前位置\",{\"1\":{\"265\":1}}],[\"则处理程序不能删除这个属性\",{\"1\":{\"307\":1}}],[\"则处理程序不能返回表示该属性可配置的对象\",{\"1\":{\"306\":1}}],[\"则处理程序必须返回表示该属性可配置的对象\",{\"1\":{\"306\":1}}],[\"则处理程序必须返回一个表示该属性存在的对象\",{\"1\":{\"306\":2}}],[\"则处理程序必须返回\",{\"1\":{\"304\":2,\"306\":1,\"311\":2,\"312\":1}}],[\"则处理程序返回的值必须与\",{\"1\":{\"302\":1}}],[\"则会缓存失败\",{\"1\":{\"571\":1}}],[\"则会触发这里的\",{\"1\":{\"563\":1}}],[\"则会判断是否有\",{\"1\":{\"256\":1}}],[\"则会在外层产生\",{\"1\":{\"175\":1}}],[\"则可以让用户在\",{\"1\":{\"464\":1}}],[\"则可以使用此变量来指定写入不同的缓冲区\",{\"1\":{\"240\":1}}],[\"则可以使其水平居中\",{\"1\":{\"175\":1}}],[\"则可以手动控制深度测试的通过情况\",{\"1\":{\"240\":1}}],[\"则自动计算最合适的\",{\"1\":{\"199\":2}}],[\"则取最高分辨率的纹理\",{\"1\":{\"199\":2}}],[\"则对应的浮点数为\",{\"1\":{\"195\":2}}],[\"则对应的无符号整数为\",{\"1\":{\"195\":1}}],[\"则对应的整数为\",{\"1\":{\"195\":1}}],[\"则结果为\",{\"1\":{\"195\":3}}],[\"则返回已有的观察者实例\",{\"1\":{\"560\":1}}],[\"则返回可枚举对象必须准确地包含自有属性键\",{\"1\":{\"308\":1}}],[\"则返回给定的属性的属性描述符\",{\"1\":{\"306\":1}}],[\"则返回\",{\"1\":{\"195\":1,\"197\":1,\"591\":1}}],[\"则返回大于或等于\",{\"1\":{\"195\":1}}],[\"则返回小于\",{\"1\":{\"195\":1}}],[\"则返回小于或等于\",{\"1\":{\"195\":2}}],[\"则返回最大值\",{\"1\":{\"192\":1}}],[\"则返回最小值\",{\"1\":{\"192\":1}}],[\"则把文本节点添加到栈顶元素的\",{\"1\":{\"98\":1}}],[\"则输出\",{\"1\":{\"18\":1}}],[\"则往数组的左边继续查找\",{\"1\":{\"7\":1}}],[\"价格最便宜\",{\"1\":{\"18\":1}}],[\"到此完成协议升级\",{\"1\":{\"800\":1}}],[\"到在每个编译\",{\"1\":{\"636\":1}}],[\"到10\",{\"1\":{\"264\":1}}],[\"到\",{\"1\":{\"18\":1,\"158\":1,\"163\":1,\"190\":3,\"195\":2,\"230\":4,\"551\":1}}],[\"站中转的路线\",{\"1\":{\"18\":1}}],[\"站中转内最便宜的航班\",{\"0\":{\"18\":1}}],[\"你可以传入回调数组\",{\"1\":{\"667\":1}}],[\"你可以使用\",{\"1\":{\"622\":1}}],[\"你可以在一个组件中同时使用有\",{\"1\":{\"620\":1}}],[\"你可以把这个管道想象成一个\",{\"1\":{\"134\":1}}],[\"你在程序中定义的所有四大组件都需要在这个文件中注册\",{\"1\":{\"517\":1}}],[\"你在项目中用到的所有图片\",{\"1\":{\"517\":1}}],[\"你的目标是使用最少的跳跃次数到达数组的最后一个位置\",{\"1\":{\"23\":1}}],[\"你的任务是找到出一条最多经过\",{\"1\":{\"18\":1}}],[\"你最初位于数组的第一个位置\",{\"1\":{\"23\":1}}],[\"你选择结束最早的课\",{\"1\":{\"22\":1}}],[\"你必须设计并实现时间复杂度为\",{\"1\":{\"8\":1}}],[\"抵达\",{\"1\":{\"18\":1}}],[\"以供插件做自定义处理时选择使用\",{\"1\":{\"737\":1}}],[\"以方便决定是否需要进行兼容性的支持\",{\"1\":{\"712\":1}}],[\"以保证下一轮循环时\",{\"1\":{\"611\":1}}],[\"以实现数组响应式\",{\"1\":{\"561\":1}}],[\"以换取用于贿赂一些狱警所需的金钱\",{\"1\":{\"477\":1}}],[\"以此判断转发目标\",{\"1\":{\"398\":1}}],[\"以此类推\",{\"1\":{\"54\":1,\"55\":1,\"251\":1}}],[\"以太网的基本架构就是将包发到所有的设备\",{\"1\":{\"390\":1}}],[\"以太网的基本知识\",{\"0\":{\"379\":1}}],[\"以太网信号的本质是正负变化的电压\",{\"1\":{\"388\":1}}],[\"以太网是一种为多台计算机能够彼此自由和廉价地相互通信而设计的通信技术\",{\"1\":{\"379\":1}}],[\"以太网用的头部\",{\"1\":{\"375\":1}}],[\"以\",{\"1\":{\"333\":1,\"777\":2}}],[\"以下是旧式的定义方式\",{\"1\":{\"328\":1}}],[\"以下反射方法都会提供状态标记\",{\"1\":{\"294\":1}}],[\"以后的调用都会被忽略\",{\"1\":{\"282\":1}}],[\"以异步的方式将任务的执行结果返回给\",{\"1\":{\"255\":1}}],[\"以使结果更加平滑\",{\"1\":{\"199\":1}}],[\"以弧度为单位\",{\"1\":{\"198\":3}}],[\"以及其他相关的\",{\"1\":{\"801\":1}}],[\"以及被跟踪依赖的状态信息\",{\"1\":{\"737\":1}}],[\"以及\",{\"1\":{\"713\":1}}],[\"以及可选的浏览器填充\",{\"1\":{\"697\":1}}],[\"以及一堆renderhelper\",{\"1\":{\"543\":1}}],[\"以及一个\",{\"1\":{\"234\":1}}],[\"以及大规模的日志存储和检索合适使用elk\",{\"1\":{\"466\":1}}],[\"以及光纤用作接入网时的工作方式\",{\"1\":{\"423\":1}}],[\"以及阻止危险网络包的包过滤功\",{\"1\":{\"407\":1}}],[\"以及假定的机器型态与状态设置\",{\"1\":{\"70\":1}}],[\"以及它们的继承和接口实现\",{\"1\":{\"70\":1}}],[\"以及出发城市\",{\"1\":{\"18\":1}}],[\"以原数组中的元素出现次数作为\",{\"1\":{\"60\":1}}],[\"以原数组中的元素值作为\",{\"1\":{\"60\":1}}],[\"以第gap个元素建立\",{\"1\":{\"56\":1}}],[\"以第一个元素建立排序序列\",{\"1\":{\"55\":1}}],[\"以价格\",{\"1\":{\"18\":1}}],[\"以免重复访问\",{\"1\":{\"1\":1}}],[\"有消息\",{\"1\":{\"794\":1}}],[\"有时只有\",{\"1\":{\"794\":1}}],[\"有时候并不需要从最上级的根域开始查找\",{\"1\":{\"347\":1}}],[\"有返回值\",{\"1\":{\"749\":1}}],[\"有两个函数\",{\"1\":{\"749\":1}}],[\"有两个浮点数\",{\"1\":{\"199\":4}}],[\"有关所有可用功能的列表\",{\"1\":{\"713\":1}}],[\"有关所有区域代码的列表\",{\"1\":{\"713\":1}}],[\"有些情况下\",{\"1\":{\"725\":1}}],[\"有些像\",{\"1\":{\"622\":1}}],[\"有些信息不是错误信息\",{\"1\":{\"457\":1}}],[\"有tag属性即认为是元素节点\",{\"1\":{\"590\":1}}],[\"有条件的更新以提升性能\",{\"1\":{\"589\":1}}],[\"有效\",{\"1\":{\"269\":1}}],[\"有了这个结构体\",{\"1\":{\"234\":1}}],[\"有了gfc之后\",{\"1\":{\"177\":1}}],[\"有三个浮点数\",{\"1\":{\"199\":1}}],[\"有可能又或者没有小数点和小数部分\",{\"1\":{\"164\":1}}],[\"有一些是异步语句\",{\"1\":{\"251\":1}}],[\"有一个\",{\"1\":{\"209\":1,\"268\":1}}],[\"有一个叫html\",{\"1\":{\"134\":1}}],[\"有一套命名约定\",{\"1\":{\"66\":1}}],[\"有一组歌单\",{\"1\":{\"49\":1}}],[\"有\",{\"1\":{\"18\":1,\"43\":1,\"280\":2}}],[\"kibana\",{\"1\":{\"464\":2}}],[\"khz\",{\"1\":{\"421\":1}}],[\"khronos\",{\"1\":{\"220\":1}}],[\"kbd\",{\"1\":{\"186\":1}}],[\"kept\",{\"1\":{\"656\":3}}],[\"keepaliveinstance\",{\"1\":{\"573\":2}}],[\"keepalive\",{\"1\":{\"572\":3,\"573\":1,\"575\":1,\"584\":1,\"591\":1,\"656\":2}}],[\"keep\",{\"0\":{\"570\":1,\"573\":1},\"1\":{\"141\":1,\"558\":1,\"571\":5,\"572\":1,\"573\":3,\"575\":1,\"585\":1,\"588\":1,\"590\":1,\"591\":3,\"656\":1}}],[\"keyof\",{\"1\":{\"603\":1}}],[\"key1\",{\"1\":{\"597\":1}}],[\"keytocache\",{\"1\":{\"573\":4}}],[\"keytool\",{\"1\":{\"517\":4}}],[\"keycodes\",{\"1\":{\"543\":1}}],[\"keyword\",{\"1\":{\"543\":1}}],[\"keyword=<script>alert\",{\"1\":{\"471\":1}}],[\"key不能和props里的属性重名\",{\"1\":{\"521\":1}}],[\"key不能和data里的属性重名\",{\"1\":{\"521\":1}}],[\"keyalg\",{\"1\":{\"517\":1}}],[\"keystore\",{\"1\":{\"517\":10}}],[\"keysize\",{\"1\":{\"517\":1}}],[\"keys\",{\"1\":{\"308\":3,\"551\":3,\"553\":4,\"561\":4,\"573\":15,\"613\":1,\"650\":1,\"654\":1,\"665\":1}}],[\"keyframes\",{\"1\":{\"158\":2}}],[\"keyframe\",{\"1\":{\"158\":2}}],[\"key\",{\"1\":{\"102\":6,\"103\":8,\"104\":8,\"320\":4,\"476\":1,\"521\":12,\"535\":7,\"547\":15,\"549\":2,\"550\":4,\"551\":10,\"552\":4,\"553\":3,\"554\":15,\"555\":4,\"561\":4,\"563\":9,\"573\":18,\"589\":4,\"596\":3,\"597\":4,\"603\":9,\"613\":3,\"646\":2,\"650\":9,\"653\":5,\"654\":10,\"663\":21,\"664\":6,\"665\":5,\"668\":4,\"669\":1,\"670\":1,\"671\":1,\"799\":2,\"801\":6,\"803\":8,\"804\":1}}],[\"k最近邻算法\",{\"0\":{\"29\":1}}],[\"k+2的数组\",{\"1\":{\"18\":1}}],[\"k\",{\"0\":{\"18\":1},\"1\":{\"18\":10}}],[\"kg\",{\"1\":{\"17\":6}}],[\"¥4000\",{\"1\":{\"17\":1}}],[\"¥3500\",{\"1\":{\"17\":4}}],[\"¥3000\",{\"1\":{\"17\":3}}],[\"¥2000\",{\"1\":{\"17\":3}}],[\"¥1500\",{\"1\":{\"17\":29}}],[\"商品\",{\"1\":{\"17\":5}}],[\"商品有\",{\"1\":{\"17\":1}}],[\"元数据系统\",{\"1\":{\"70\":1}}],[\"元数据用于在运行时解析和执行代码\",{\"1\":{\"70\":1}}],[\"元数据是cil代码的一部分\",{\"1\":{\"70\":1}}],[\"元数据\",{\"1\":{\"70\":1,\"725\":1}}],[\"元素节点\",{\"1\":{\"590\":1,\"613\":1}}],[\"元素进行更新\",{\"1\":{\"589\":1}}],[\"元素下\",{\"1\":{\"588\":1}}],[\"元素使用\",{\"1\":{\"528\":1}}],[\"元素会优先排列\",{\"1\":{\"175\":1}}],[\"元素的标签必须相同\",{\"1\":{\"589\":1}}],[\"元素的盒阴影\",{\"1\":{\"152\":1}}],[\"元素的边框\",{\"1\":{\"152\":1}}],[\"元素的文本内容\",{\"1\":{\"152\":1}}],[\"元素继承的值\",{\"1\":{\"152\":1}}],[\"元素\",{\"1\":{\"54\":2,\"589\":1,\"603\":1}}],[\"元素交换\",{\"1\":{\"53\":1}}],[\"元\",{\"1\":{\"17\":7,\"18\":3}}],[\"吉他\",{\"1\":{\"17\":7}}],[\"笔记本电脑\",{\"1\":{\"17\":7}}],[\"件\",{\"1\":{\"17\":1}}],[\"^=\",{\"1\":{\"804\":1}}],[\"^>\",{\"1\":{\"606\":1}}],[\"^<\",{\"1\":{\"606\":3,\"690\":2}}],[\"^v\",{\"1\":{\"534\":2}}],[\"^^\",{\"1\":{\"221\":1}}],[\"^\",{\"1\":{\"13\":2,\"102\":1,\"103\":1,\"104\":2,\"534\":1,\"607\":7,\"625\":1,\"670\":1}}],[\"za\",{\"1\":{\"607\":1,\"689\":2}}],[\"zeroes\",{\"1\":{\"271\":2}}],[\"z为0或1\",{\"1\":{\"199\":2}}],[\"zoom更全面\",{\"1\":{\"147\":1}}],[\"zoom和scale\",{\"0\":{\"147\":1}}],[\"zoom\",{\"0\":{\"146\":1},\"1\":{\"145\":2,\"146\":3}}],[\"z\",{\"1\":{\"66\":2,\"103\":1,\"158\":2,\"195\":8,\"196\":3,\"206\":15,\"231\":35,\"234\":3,\"239\":4,\"240\":1,\"243\":9,\"607\":1,\"689\":2}}],[\"zui\",{\"1\":{\"13\":1,\"18\":1}}],[\"zh\",{\"1\":{\"644\":1,\"660\":1}}],[\"zhuan\",{\"1\":{\"18\":1}}],[\"zhuanlan\",{\"1\":{\"1\":1,\"220\":1}}],[\"zhong\",{\"1\":{\"18\":1}}],[\"zhan\",{\"1\":{\"18\":1}}],[\"zhihu\",{\"1\":{\"1\":1,\"220\":1}}],[\"在扩展数据之后\",{\"1\":{\"803\":1}}],[\"在客户端和服务器保有一个持久的连接\",{\"1\":{\"796\":1}}],[\"在某种程度上减小了网络带宽和\",{\"1\":{\"794\":1}}],[\"在浏览器中开启\",{\"1\":{\"758\":1}}],[\"在浏览器完成后面的其他语句后\",{\"1\":{\"568\":1}}],[\"在转换后的代码\",{\"1\":{\"758\":1}}],[\"在webpack中使用postcss\",{\"1\":{\"755\":1}}],[\"在windows上是同步的\",{\"1\":{\"455\":1}}],[\"在windows上是异步的\",{\"1\":{\"455\":1}}],[\"在windows和posix上同步的\",{\"1\":{\"455\":1}}],[\"在插件函数的\",{\"1\":{\"736\":1}}],[\"在插件实例的\",{\"1\":{\"636\":1}}],[\"在postcss使用postcss\",{\"1\":{\"755\":1}}],[\"在postcss里使用autoprefixer\",{\"1\":{\"755\":1}}],[\"在posix上是异步的\",{\"1\":{\"455\":1}}],[\"在posix上是同步的\",{\"1\":{\"455\":1}}],[\"在package\",{\"1\":{\"715\":1}}],[\"在差异服务中很有用\",{\"1\":{\"713\":1}}],[\"在该preset里使用profill\",{\"1\":{\"699\":1}}],[\"在当前路由改变\",{\"1\":{\"648\":1}}],[\"在渲染时直接复用即可\",{\"1\":{\"676\":1}}],[\"在渲染该组件的对应路由被\",{\"1\":{\"648\":1}}],[\"在渲染引擎内部\",{\"1\":{\"134\":1}}],[\"在原有\",{\"1\":{\"636\":1}}],[\"在右到左执行\",{\"1\":{\"634\":1}}],[\"在递归组件中小心使用后代选择器\",{\"1\":{\"624\":1}}],[\"在优化阶段将所有静态节点都打上标记\",{\"1\":{\"612\":1}}],[\"在编译过程中的一处优化\",{\"1\":{\"603\":1}}],[\"在编译阶段会被存放到词法环境\",{\"1\":{\"122\":1}}],[\"在编译阶段全都被存放到变量环境里面了\",{\"1\":{\"122\":1}}],[\"在有问题的uiwebviews中\",{\"1\":{\"568\":1}}],[\"在选择的对应任务队列中\",{\"1\":{\"567\":1}}],[\"在次触发\",{\"1\":{\"566\":1}}],[\"在更新时设置新值并通知依赖更新\",{\"1\":{\"563\":1}}],[\"在第一次读取时收集依赖\",{\"1\":{\"563\":1}}],[\"在第三方网站中\",{\"1\":{\"469\":1}}],[\"在使用\",{\"1\":{\"558\":1}}],[\"在其内部对象上创建各种钩子\",{\"1\":{\"776\":1}}],[\"在其渲染\",{\"1\":{\"558\":1}}],[\"在其中就会产生电流\",{\"1\":{\"389\":1}}],[\"在此期间往队列中\",{\"1\":{\"558\":1}}],[\"在此情况下\",{\"1\":{\"13\":1}}],[\"在方法中会执行this\",{\"1\":{\"556\":1}}],[\"在initstate\",{\"1\":{\"556\":1}}],[\"在页面的一次渲染中\",{\"1\":{\"554\":1}}],[\"在内部为不同的输入元素使用不同的\",{\"1\":{\"528\":1}}],[\"在内存中开辟空间需要连接一起的空间\",{\"1\":{\"49\":1}}],[\"在计算机编程中\",{\"1\":{\"482\":1}}],[\"在打开同一文件写入新数据\",{\"1\":{\"455\":1}}],[\"在路由表中进行查询\",{\"1\":{\"398\":1}}],[\"在数据信号之外再发送一组用来区分比特间隔的时钟信号\",{\"1\":{\"381\":1}}],[\"在末尾加上用于检测错误的帧校验序列\",{\"1\":{\"381\":1}}],[\"在前面加上包含制信息的头部\",{\"1\":{\"375\":1}}],[\"在协议栈内部有一块用于存放控制信息的内存空间\",{\"1\":{\"356\":1}}],[\"在真实的互联网中\",{\"1\":{\"347\":1}}],[\"在互联网以外的其他网络中的应用\",{\"1\":{\"345\":1}}],[\"在最早设计dns\",{\"1\":{\"345\":1}}],[\"在委托操作系统发送消息时\",{\"1\":{\"339\":1}}],[\"在组件实例被从页面节点树移除时执行\",{\"1\":{\"328\":2}}],[\"在组件实例进入页面节点树时执行\",{\"1\":{\"328\":2}}],[\"在拦截器内部\",{\"1\":{\"320\":1}}],[\"在通过互联网接入路由器之后\",{\"1\":{\"418\":1}}],[\"在通过\",{\"1\":{\"296\":1}}],[\"在定义新属性时如果发生问题\",{\"1\":{\"294\":1}}],[\"在实际\",{\"1\":{\"725\":1}}],[\"在实际中\",{\"1\":{\"139\":1}}],[\"在实例化\",{\"1\":{\"563\":1}}],[\"在实例化时同时生成撤销函数revoke和代理对象proxy\",{\"1\":{\"291\":1}}],[\"在代理对象上执行的任何操作实际上都会应用到目标对象\",{\"1\":{\"287\":1}}],[\"在对目标对象的各种操作影响目标对象之前\",{\"1\":{\"285\":1}}],[\"在对此创建完毕之前无法访问this\",{\"1\":{\"281\":1}}],[\"在这种状态下\",{\"1\":{\"568\":1}}],[\"在这里可以进行一次性的初始化设置\",{\"1\":{\"532\":1}}],[\"在这里配置的属性将会影响到项目所有的\",{\"1\":{\"517\":1}}],[\"在这里\",{\"1\":{\"280\":1}}],[\"在这间教室上的第二堂课\",{\"1\":{\"22\":1}}],[\"在生成器对象上显式调用\",{\"1\":{\"270\":1}}],[\"在生成器中使用\",{\"1\":{\"263\":1}}],[\"在上述代码中\",{\"1\":{\"257\":1}}],[\"在创建全局执行上下文的时候\",{\"1\":{\"250\":1}}],[\"在光照计算中使用\",{\"1\":{\"239\":1}}],[\"在片元着色器中使用纹理坐标进行纹理采样\",{\"1\":{\"239\":1}}],[\"在片元着色器中使用\",{\"1\":{\"239\":1}}],[\"在雾效果中使用\",{\"1\":{\"239\":1}}],[\"在顶点着色器中使用法向量变换矩阵将法向量从模型坐标系变换到相机坐标系中\",{\"1\":{\"239\":1}}],[\"在顶点着色器中使用纹理坐标变换矩阵实现纹理旋转效果\",{\"1\":{\"239\":1}}],[\"在顶点着色器中声明输入变量\",{\"1\":{\"236\":1}}],[\"在顶点着色器和片元着色器之间声明变量\",{\"1\":{\"236\":1}}],[\"在顶点着色器和片元着色器中声明全局变量\",{\"1\":{\"236\":1}}],[\"在指定纹理采样器和纹理坐标下采样纹理\",{\"1\":{\"235\":6}}],[\"在指定范围内\",{\"1\":{\"195\":1}}],[\"在给定纹理坐标和x\",{\"1\":{\"199\":1}}],[\"在sampler2d和samplercube类型的采样器中\",{\"1\":{\"199\":1}}],[\"在执行\",{\"1\":{\"567\":1}}],[\"在执行上下文栈中只包含平台代码之前\",{\"1\":{\"281\":1}}],[\"在执行上下文创建好后\",{\"1\":{\"117\":1}}],[\"在执行纹理采样时\",{\"1\":{\"199\":2}}],[\"在级别不匹配的情况下\",{\"1\":{\"199\":1}}],[\"在\",{\"1\":{\"199\":2,\"232\":1,\"234\":2,\"256\":1,\"263\":1,\"476\":1,\"517\":2,\"543\":1,\"552\":1,\"563\":1,\"612\":2,\"646\":1,\"648\":1,\"713\":1,\"749\":1}}],[\"在水平方向有效在垂直方向无效\",{\"1\":{\"175\":1}}],[\"在垂直方向上将以容器顶部开始向下排列\",{\"1\":{\"175\":1}}],[\"在正负号和数值之间没有任何空格\",{\"1\":{\"163\":1}}],[\"在父元素上创建伪元素\",{\"1\":{\"145\":1}}],[\"在旧的web时代\",{\"1\":{\"145\":1}}],[\"在严格模式下\",{\"1\":{\"129\":1,\"303\":1}}],[\"在下次\",{\"1\":{\"128\":1}}],[\"在词法环境内部\",{\"1\":{\"122\":1}}],[\"在函数的作用域内部\",{\"1\":{\"122\":1}}],[\"在es6之前\",{\"1\":{\"119\":1}}],[\"在一个函数定义之前使用它\",{\"1\":{\"114\":1}}],[\"在一个变量定义之前使用它\",{\"1\":{\"114\":1}}],[\"在预解析阶段\",{\"1\":{\"102\":1,\"103\":1,\"104\":1}}],[\"在网络进程中发起url请求\",{\"1\":{\"102\":1,\"103\":1,\"104\":1}}],[\"在网络进程中发起\",{\"1\":{\"96\":1}}],[\"在c\",{\"1\":{\"66\":2,\"68\":1,\"78\":1}}],[\"在排序好的序列中进行对比排序插入\",{\"1\":{\"55\":1}}],[\"在排序数组中查找元素的第一个和最后一个位置\",{\"0\":{\"8\":1}}],[\"wsserver\",{\"1\":{\"797\":2}}],[\"ws\",{\"1\":{\"796\":1,\"797\":6,\"799\":1}}],[\"would\",{\"1\":{\"590\":1,\"651\":1}}],[\"worker\",{\"0\":{\"508\":1}}],[\"work\",{\"1\":{\"218\":2,\"445\":1,\"585\":1,\"644\":1}}],[\"worldpos\",{\"1\":{\"199\":6}}],[\"world\",{\"1\":{\"64\":1,\"80\":1,\"238\":1}}],[\"wrap\",{\"1\":{\"751\":1}}],[\"wrappedgetter\",{\"1\":{\"663\":1}}],[\"wrappedgetters\",{\"1\":{\"660\":2,\"663\":5}}],[\"wrappedactionhandler\",{\"1\":{\"663\":1}}],[\"wrappedmutationhandler\",{\"1\":{\"663\":1}}],[\"wrapper\",{\"1\":{\"517\":2}}],[\"writable\",{\"1\":{\"290\":1,\"302\":1,\"305\":1}}],[\"writefile\",{\"1\":{\"455\":3}}],[\"write\",{\"1\":{\"102\":1,\"103\":1,\"104\":1,\"454\":1,\"455\":4,\"463\":1,\"795\":1}}],[\"writeline\",{\"1\":{\"64\":1,\"77\":8,\"79\":1,\"80\":2,\"81\":1,\"82\":2,\"84\":4,\"89\":5}}],[\"where\",{\"1\":{\"646\":1}}],[\"when\",{\"1\":{\"326\":3,\"548\":1,\"559\":1,\"561\":1,\"565\":2,\"583\":1,\"584\":1,\"588\":1,\"590\":1,\"629\":2,\"656\":1,\"670\":2}}],[\"whole\",{\"1\":{\"615\":2}}],[\"what\",{\"1\":{\"442\":1}}],[\"whatisthis\",{\"1\":{\"334\":1}}],[\"whitespacere\",{\"1\":{\"610\":1}}],[\"whitespaces\",{\"1\":{\"610\":1}}],[\"whitespaceoption\",{\"1\":{\"610\":3}}],[\"whitespace\",{\"1\":{\"610\":2,\"689\":2,\"690\":1}}],[\"which\",{\"1\":{\"141\":1,\"582\":1,\"660\":1,\"663\":1}}],[\"while\",{\"1\":{\"1\":1,\"7\":1,\"8\":1,\"13\":1,\"55\":1,\"56\":1,\"57\":3,\"59\":3,\"60\":1,\"62\":1,\"139\":1,\"141\":1,\"270\":1,\"271\":2,\"281\":2,\"283\":2,\"521\":1,\"547\":1,\"553\":1,\"557\":1,\"565\":3,\"575\":1,\"588\":1,\"597\":1,\"606\":2,\"607\":1,\"611\":1,\"656\":1,\"690\":1}}],[\"wm\",{\"1\":{\"299\":4}}],[\"weren\",{\"1\":{\"656\":1}}],[\"welcome\",{\"1\":{\"584\":1}}],[\"well\",{\"1\":{\"139\":1,\"586\":1}}],[\"weex\",{\"1\":{\"542\":1}}],[\"websocketaccept\",{\"1\":{\"801\":2}}],[\"websocketkey\",{\"1\":{\"801\":2}}],[\"websocketserver\",{\"1\":{\"797\":2}}],[\"websockets\",{\"1\":{\"796\":1}}],[\"websocket\",{\"0\":{\"791\":1,\"796\":1,\"798\":1,\"801\":1,\"802\":1,\"822\":1},\"1\":{\"787\":1,\"788\":1,\"797\":1,\"798\":4,\"799\":9,\"800\":2,\"801\":10,\"802\":1,\"803\":2},\"2\":{\"790\":1,\"805\":1}}],[\"webpack启动流程\",{\"0\":{\"771\":1}}],[\"webpack在打包时\",{\"1\":{\"758\":1}}],[\"webpack的配置\",{\"1\":{\"751\":1}}],[\"webpackoptionsapply\",{\"1\":{\"738\":1}}],[\"webpack5\",{\"1\":{\"719\":1},\"2\":{\"732\":1,\"742\":1}}],[\"webpack常见配置\",{\"0\":{\"717\":1}}],[\"webpack\",{\"0\":{\"776\":1,\"821\":1},\"1\":{\"584\":1,\"626\":1,\"636\":3,\"653\":3,\"699\":1,\"703\":1,\"704\":1,\"705\":1,\"709\":1,\"718\":6,\"719\":3,\"720\":8,\"723\":1,\"724\":1,\"726\":1,\"727\":1,\"728\":1,\"729\":1,\"730\":1,\"734\":2,\"736\":4,\"737\":5,\"738\":2,\"744\":2,\"751\":3,\"752\":3,\"755\":3,\"758\":1,\"762\":1,\"766\":1,\"771\":8,\"772\":4,\"776\":7},\"2\":{\"639\":1,\"691\":1,\"708\":1,\"716\":1,\"721\":1,\"731\":1,\"741\":1,\"753\":1,\"770\":1,\"774\":1,\"785\":1}}],[\"web\",{\"1\":{\"540\":1,\"601\":1,\"603\":1,\"719\":1,\"792\":1}}],[\"webkit\",{\"1\":{\"517\":2}}],[\"web服务器\",{\"1\":{\"330\":1}}],[\"weighted\",{\"0\":{\"448\":1}}],[\"weakmap\",{\"1\":{\"299\":2}}],[\"we\",{\"1\":{\"215\":1,\"521\":1,\"551\":1,\"554\":1,\"575\":1,\"582\":1,\"588\":1,\"590\":1,\"591\":1,\"596\":2,\"626\":2,\"629\":1,\"635\":1,\"642\":3,\"653\":2,\"656\":2}}],[\"want\",{\"1\":{\"653\":1}}],[\"wait\",{\"1\":{\"651\":1,\"655\":1}}],[\"waiting\",{\"1\":{\"557\":2,\"558\":3}}],[\"was\",{\"1\":{\"590\":1,\"656\":1}}],[\"way\",{\"1\":{\"575\":1}}],[\"walk\",{\"1\":{\"561\":3}}],[\"wathcer\",{\"1\":{\"554\":1}}],[\"watch的函数\",{\"1\":{\"670\":1}}],[\"watch原理分析\",{\"0\":{\"667\":1}}],[\"watch\",{\"1\":{\"549\":3,\"555\":4,\"558\":2,\"559\":1,\"660\":1,\"667\":4,\"668\":6,\"670\":3,\"671\":1}}],[\"watch优先级\",{\"1\":{\"549\":1}}],[\"watching\",{\"1\":{\"521\":1,\"565\":1,\"670\":1}}],[\"watchervm\",{\"1\":{\"660\":1}}],[\"watcher对象集合\",{\"1\":{\"568\":1}}],[\"watcher里的\",{\"1\":{\"556\":1}}],[\"watcheroptions\",{\"1\":{\"521\":1,\"565\":1,\"566\":2,\"582\":3}}],[\"watchers\",{\"1\":{\"521\":2,\"554\":2,\"558\":4,\"559\":2,\"565\":4,\"582\":1,\"663\":2,\"670\":2}}],[\"watcher\",{\"0\":{\"559\":1,\"565\":1},\"1\":{\"521\":14,\"523\":3,\"524\":3,\"554\":17,\"555\":8,\"556\":10,\"557\":19,\"558\":25,\"559\":7,\"563\":4,\"564\":3,\"565\":6,\"566\":3,\"582\":5,\"670\":13,\"671\":5}}],[\"waterfall\",{\"1\":{\"777\":1}}],[\"water\",{\"1\":{\"13\":2}}],[\"warnings\",{\"1\":{\"663\":1,\"720\":1}}],[\"warningmessage\",{\"1\":{\"603\":3}}],[\"warn\",{\"1\":{\"457\":1,\"534\":4,\"542\":1,\"543\":1,\"585\":1,\"588\":1,\"603\":6,\"604\":1,\"650\":1,\"651\":1,\"653\":1}}],[\"waveuv\",{\"1\":{\"206\":6}}],[\"w\",{\"1\":{\"199\":2,\"206\":15,\"231\":24,\"239\":1,\"240\":1,\"243\":5,\"534\":1,\"607\":1,\"670\":1}}],[\"will\",{\"1\":{\"557\":1,\"565\":2,\"614\":1,\"635\":1,\"656\":1}}],[\"width\",{\"1\":{\"83\":5,\"102\":2,\"103\":2,\"104\":4,\"166\":1,\"218\":6,\"230\":3,\"237\":1}}],[\"window\",{\"1\":{\"129\":1,\"237\":2,\"645\":1,\"646\":4,\"647\":3,\"660\":3,\"789\":1}}],[\"windows\",{\"1\":{\"65\":1,\"517\":1}}],[\"windows程序\",{\"1\":{\"65\":1}}],[\"winform和webform\",{\"1\":{\"65\":1}}],[\"withcommit\",{\"1\":{\"662\":2,\"663\":2}}],[\"without\",{\"1\":{\"139\":1,\"319\":2,\"544\":1,\"563\":1}}],[\"within\",{\"1\":{\"18\":2,\"140\":2,\"631\":1}}],[\"with\",{\"1\":{\"13\":2,\"77\":1,\"139\":1,\"141\":4,\"218\":1,\"282\":1,\"283\":1,\"295\":1,\"304\":1,\"534\":1,\"542\":1,\"543\":1,\"575\":1,\"585\":2,\"601\":1,\"650\":1,\"651\":1}}],[\"www\",{\"1\":{\"43\":1,\"218\":1,\"225\":1,\"334\":4,\"341\":1,\"517\":2,\"705\":1}}],[\"盛最多水的容器\",{\"0\":{\"13\":1}}],[\"给服务器之后\",{\"1\":{\"794\":1}}],[\"给value新增一个\",{\"1\":{\"561\":1}}],[\"给非\",{\"1\":{\"560\":1}}],[\"给网络包加3个控制数据\",{\"0\":{\"381\":1}}],[\"给代理属性赋值会反映在两个对象上\",{\"1\":{\"287\":1}}],[\"给目标属性赋值会反映在两个对象上\",{\"1\":{\"287\":1}}],[\"给每个线程输入数据\",{\"1\":{\"210\":1,\"237\":1}}],[\"给\",{\"1\":{\"134\":1,\"419\":1}}],[\"给你一个非负整数数组\",{\"1\":{\"23\":1}}],[\"给你一个数组\",{\"1\":{\"18\":1}}],[\"给你一个按照非递减顺序排列的整数数组\",{\"1\":{\"8\":1}}],[\"给定两个大小分别为\",{\"1\":{\"9\":1}}],[\"寻找两个正序数组的中位数\",{\"0\":{\"9\":1}}],[\"左边界\",{\"1\":{\"8\":1}}],[\"即浏览器\",{\"1\":{\"798\":1}}],[\"即只对动态导入的文件进行拆分\",{\"1\":{\"720\":1}}],[\"即与特性选择器组合使用时\",{\"1\":{\"624\":1}}],[\"即不能是组件\",{\"1\":{\"613\":1}}],[\"即标签名不能是\",{\"1\":{\"613\":1}}],[\"即标签上不能有\",{\"1\":{\"613\":1}}],[\"即指对旧的\",{\"1\":{\"587\":1}}],[\"即将当前vm做为router\",{\"1\":{\"642\":1}}],[\"即将当前\",{\"1\":{\"557\":1}}],[\"即执行this\",{\"1\":{\"555\":1}}],[\"即执行\",{\"1\":{\"554\":1,\"555\":1}}],[\"即通过这种信号将自己能够支持的工作模式\",{\"1\":{\"396\":1}}],[\"即冷启动\",{\"1\":{\"323\":1}}],[\"即patch操作\",{\"1\":{\"582\":1}}],[\"即property属性的value值\",{\"1\":{\"320\":1}}],[\"即pct=1时颜色值为绿色\",{\"1\":{\"190\":1}}],[\"即是否能够添加新的属性\",{\"1\":{\"311\":1}}],[\"即内部的\",{\"1\":{\"309\":1,\"310\":1}}],[\"即\",{\"1\":{\"257\":1,\"302\":2,\"339\":1,\"476\":1,\"563\":1,\"588\":1}}],[\"即光线所将要进入的介质\",{\"1\":{\"197\":1}}],[\"即光线所处的介质\",{\"1\":{\"197\":1}}],[\"即欧几里得范数\",{\"1\":{\"197\":1}}],[\"即行数和列数相等\",{\"1\":{\"196\":1}}],[\"即返回值都是布尔值\",{\"1\":{\"294\":1}}],[\"即返回\",{\"1\":{\"195\":1}}],[\"即返回大于或等于\",{\"1\":{\"195\":1}}],[\"即参与何种格式化上下文\",{\"1\":{\"183\":1}}],[\"即可\",{\"1\":{\"174\":1}}],[\"即可在最短时间内前往的节点\",{\"1\":{\"1\":1}}],[\"即使存在浮动也是如此\",{\"1\":{\"174\":1}}],[\"即作用域控制着变量和函数的可见性和生命周期\",{\"1\":{\"119\":1}}],[\"即第一个单词的首字母小写\",{\"1\":{\"66\":1}}],[\"即每个单词的首字母大写\",{\"1\":{\"66\":1}}],[\"即target已经离开匹配范围\",{\"1\":{\"8\":1}}],[\"最高位为\",{\"1\":{\"803\":1}}],[\"最高等级的\",{\"1\":{\"457\":1}}],[\"最主要的作用是预防一些常见的意外情况\",{\"1\":{\"801\":1}}],[\"最主要是设置了父子组件的引用关系\",{\"1\":{\"544\":1}}],[\"最初始的文件\",{\"1\":{\"759\":1}}],[\"最初被调用的构造函数\",{\"1\":{\"314\":1}}],[\"最新的\",{\"1\":{\"713\":1}}],[\"最近\",{\"1\":{\"713\":2}}],[\"最低等级的\",{\"1\":{\"457\":1}}],[\"最后添加一个注释\",{\"1\":{\"758\":1}}],[\"最后把数组tokens中的所有元素用\",{\"1\":{\"611\":1}}],[\"最后将后面的文本再加入到tokens中\",{\"1\":{\"611\":1}}],[\"最后将数据交给应用程序\",{\"1\":{\"368\":1}}],[\"最后\",{\"1\":{\"325\":1,\"523\":1}}],[\"最后一个分量表示深度比较值\",{\"1\":{\"199\":2}}],[\"最多可以有\",{\"1\":{\"240\":1}}],[\"最多达成k+1次航班\",{\"1\":{\"18\":1}}],[\"最终转换成javascript\",{\"1\":{\"757\":1}}],[\"最终还是调用basecompile\",{\"1\":{\"603\":1}}],[\"最终触发更新函数\",{\"1\":{\"558\":1}}],[\"最终到达服务器\",{\"1\":{\"409\":1}}],[\"最终到达目的地\",{\"1\":{\"349\":1,\"387\":1}}],[\"最终将导致\",{\"1\":{\"282\":1}}],[\"最终渲染结果将取决于此变量的值\",{\"1\":{\"240\":1}}],[\"最终的\",{\"1\":{\"766\":1}}],[\"最终的像素颜色取决于预设的全局变量\",{\"1\":{\"209\":1}}],[\"最终的片元颜色\",{\"1\":{\"190\":1}}],[\"最终执行上下文如下图所示\",{\"1\":{\"122\":1}}],[\"最终生成的位图就保存在了\",{\"1\":{\"97\":1,\"105\":1}}],[\"最终会得到target所在位置\",{\"1\":{\"8\":1}}],[\"最终会得到比target大的第一位数\",{\"1\":{\"8\":1}}],[\"最小值\",{\"1\":{\"60\":1}}],[\"最坏情况\",{\"1\":{\"56\":1,\"57\":1}}],[\"最好情况\",{\"1\":{\"56\":1,\"57\":1}}],[\"最大值\",{\"1\":{\"13\":1}}],[\"最短路径的权\",{\"1\":{\"1\":1}}],[\"获取传入参数\",{\"0\":{\"729\":1}}],[\"获取局部状态\",{\"1\":{\"664\":1}}],[\"获取到\",{\"1\":{\"654\":2}}],[\"获取路由守卫\",{\"1\":{\"654\":1}}],[\"获取父节点\",{\"1\":{\"594\":1}}],[\"获取父类身上options\",{\"1\":{\"546\":1}}],[\"获取老节点的父元素\",{\"1\":{\"588\":1}}],[\"获取组件更新守卫\",{\"1\":{\"654\":1}}],[\"获取组件离开守卫\",{\"1\":{\"654\":1}}],[\"获取组件实例\",{\"1\":{\"648\":1}}],[\"获取组件\",{\"1\":{\"573\":1,\"656\":1}}],[\"获取值进行对比\",{\"1\":{\"556\":1}}],[\"获取\",{\"1\":{\"551\":1,\"555\":1,\"558\":1,\"559\":1,\"563\":1,\"566\":1,\"636\":1,\"653\":1,\"654\":1,\"655\":1,\"660\":1,\"661\":1,\"663\":2}}],[\"获取文件句柄\",{\"1\":{\"455\":1}}],[\"获取新的\",{\"1\":{\"256\":1}}],[\"获取当前片元的模板测试参考值\",{\"1\":{\"240\":2}}],[\"获取当前片元到第\",{\"1\":{\"240\":1}}],[\"获取当前片元到每个裁剪平面的距离值\",{\"1\":{\"240\":1}}],[\"获取当前片元所在的视口的索引值\",{\"1\":{\"240\":2}}],[\"获取当前片元所在的图元的渲染层次\",{\"1\":{\"240\":2}}],[\"获取当前片元所在的图元\",{\"1\":{\"240\":2}}],[\"获取当前片元所在的样本序号\",{\"1\":{\"240\":2}}],[\"获取当前片元所在样本的位置坐标\",{\"1\":{\"240\":2}}],[\"获取当前片元着色器中第\",{\"1\":{\"240\":1}}],[\"获取当前像素在屏幕中的位置\",{\"1\":{\"190\":1}}],[\"获取多重采样缓冲区中每个样本的掩码值\",{\"1\":{\"240\":1}}],[\"获取纹理的样本数\",{\"1\":{\"199\":1}}],[\"获取纹理某个\",{\"1\":{\"199\":1}}],[\"获取指定\",{\"1\":{\"199\":1}}],[\"获取片元坐标\",{\"1\":{\"190\":1}}],[\"获取序列末尾元素\",{\"1\":{\"55\":1}}],[\"获取最小元素的index\",{\"1\":{\"54\":1}}],[\"获取右边界\",{\"1\":{\"8\":1}}],[\"获取左边界\",{\"1\":{\"8\":1}}],[\"risk\",{\"1\":{\"542\":1}}],[\"right\",{\"1\":{\"8\":8,\"57\":8,\"58\":9,\"59\":5,\"224\":1,\"597\":1,\"610\":1,\"631\":1}}],[\"rightidx<\",{\"1\":{\"8\":1}}],[\"rightidx\",{\"1\":{\"8\":4}}],[\"rpc\",{\"0\":{\"443\":1,\"444\":1,\"447\":1}}],[\"rt\",{\"0\":{\"437\":1}}],[\"rj\",{\"1\":{\"388\":1}}],[\"r<=\",{\"1\":{\"218\":1}}],[\"r<radius\",{\"1\":{\"218\":2}}],[\"r+width\",{\"1\":{\"218\":3}}],[\"r+1\",{\"1\":{\"218\":1}}],[\"rsv3\",{\"1\":{\"803\":1}}],[\"rsv2\",{\"1\":{\"803\":1}}],[\"rsv1\",{\"1\":{\"803\":2}}],[\"rsa\",{\"1\":{\"517\":1}}],[\"rs\",{\"1\":{\"218\":5}}],[\"road\",{\"1\":{\"590\":1}}],[\"route对象\",{\"1\":{\"649\":1}}],[\"route的组件\",{\"1\":{\"642\":1}}],[\"route发生变化\",{\"1\":{\"642\":1}}],[\"route发生变化时\",{\"1\":{\"642\":1}}],[\"route被定义为响应式\",{\"1\":{\"642\":1}}],[\"route赋值\",{\"1\":{\"642\":1}}],[\"routeorerror\",{\"1\":{\"642\":5}}],[\"route属性\",{\"1\":{\"642\":1}}],[\"route\",{\"1\":{\"642\":8,\"644\":29,\"646\":11,\"647\":8,\"649\":11,\"650\":5,\"651\":23,\"655\":9,\"656\":10}}],[\"routes\",{\"1\":{\"572\":1,\"641\":1,\"643\":5,\"644\":5,\"648\":1,\"656\":2}}],[\"routerecord\",{\"1\":{\"644\":1}}],[\"routeroptions\",{\"1\":{\"643\":1}}],[\"routerlink\",{\"1\":{\"642\":1}}],[\"routerviewdepth\",{\"1\":{\"656\":1}}],[\"routerviewcache\",{\"1\":{\"656\":2}}],[\"routerview\",{\"1\":{\"642\":1,\"656\":4}}],[\"router仅存在于vue根实例上\",{\"1\":{\"642\":1}}],[\"routerroot\",{\"1\":{\"642\":6,\"656\":1}}],[\"router3\",{\"0\":{\"641\":1}}],[\"router<\",{\"1\":{\"635\":2}}],[\"router\",{\"0\":{\"656\":1},\"1\":{\"543\":1,\"572\":3,\"584\":3,\"635\":2,\"641\":4,\"642\":15,\"643\":1,\"644\":2,\"645\":7,\"646\":7,\"647\":2,\"648\":4,\"649\":5,\"650\":1,\"651\":6,\"655\":4,\"656\":4}}],[\"roundevenv\",{\"1\":{\"195\":1}}],[\"roundevena\",{\"1\":{\"195\":1}}],[\"roundeven\",{\"1\":{\"195\":4}}],[\"roundv\",{\"1\":{\"195\":1}}],[\"rounda\",{\"1\":{\"195\":1}}],[\"round\",{\"0\":{\"448\":2},\"1\":{\"195\":4}}],[\"robin\",{\"0\":{\"448\":2}}],[\"robert\",{\"1\":{\"227\":1}}],[\"rotationmatrix\",{\"1\":{\"233\":1}}],[\"rotation\",{\"1\":{\"200\":5,\"206\":5,\"234\":2,\"243\":5}}],[\"rotate2d\",{\"1\":{\"216\":2}}],[\"rotateuv\",{\"1\":{\"206\":4}}],[\"rotate\",{\"1\":{\"196\":3,\"200\":1,\"206\":3,\"216\":1,\"243\":1}}],[\"rootgetters\",{\"1\":{\"663\":1}}],[\"rootstate\",{\"1\":{\"663\":4}}],[\"root\",{\"1\":{\"184\":1,\"225\":1,\"551\":1,\"561\":1,\"588\":1,\"592\":1,\"604\":1,\"609\":3,\"612\":4,\"614\":1,\"660\":2,\"663\":11}}],[\"row\",{\"1\":{\"177\":1}}],[\"rows\",{\"1\":{\"177\":1}}],[\"rong\",{\"1\":{\"13\":1}}],[\"rare\",{\"1\":{\"588\":1}}],[\"rawoptions\",{\"1\":{\"738\":2}}],[\"rawgetter\",{\"1\":{\"663\":2}}],[\"rawstate\",{\"1\":{\"663\":4}}],[\"rawshortfilepath\",{\"1\":{\"625\":2}}],[\"rawchildmodule\",{\"1\":{\"663\":2}}],[\"rawmodule\",{\"1\":{\"663\":8}}],[\"rawrootmodule\",{\"1\":{\"663\":3}}],[\"rawrule\",{\"1\":{\"636\":2}}],[\"rawlocation\",{\"1\":{\"646\":2,\"647\":2,\"649\":1,\"650\":2}}],[\"rawvuerules\",{\"1\":{\"636\":1}}],[\"rawtokens\",{\"1\":{\"611\":5}}],[\"raw\",{\"1\":{\"547\":1,\"650\":4}}],[\"rawname\",{\"1\":{\"528\":1,\"532\":1,\"534\":4,\"584\":1,\"615\":1}}],[\"race\",{\"1\":{\"263\":1,\"283\":1}}],[\"radar\",{\"1\":{\"218\":1}}],[\"radio\",{\"1\":{\"528\":1}}],[\"radians\",{\"1\":{\"196\":1,\"198\":5,\"233\":1}}],[\"radius+\",{\"1\":{\"226\":1}}],[\"radius\",{\"1\":{\"79\":4,\"81\":3,\"218\":25,\"226\":5,\"230\":6}}],[\"radixsort\",{\"1\":{\"62\":1}}],[\"random\",{\"1\":{\"200\":5,\"204\":4,\"206\":10,\"218\":1,\"243\":5}}],[\"range\",{\"1\":{\"191\":1,\"218\":1,\"264\":2,\"271\":2,\"603\":1}}],[\"ratio\",{\"0\":{\"171\":1}}],[\"rgba\",{\"0\":{\"153\":1},\"1\":{\"153\":1}}],[\"rgb\",{\"0\":{\"153\":1},\"1\":{\"153\":2,\"190\":1}}],[\"ruby\",{\"1\":{\"187\":1}}],[\"rule处理\",{\"1\":{\"637\":1}}],[\"rule\",{\"1\":{\"102\":3,\"103\":3,\"104\":3,\"636\":1}}],[\"rules\",{\"1\":{\"102\":1,\"103\":1,\"104\":1,\"517\":1,\"636\":6,\"637\":3,\"699\":1,\"703\":1,\"704\":1,\"705\":1,\"718\":1,\"723\":1,\"724\":1,\"745\":1,\"746\":1,\"755\":4}}],[\"runwebpack执行createcompiler\",{\"1\":{\"771\":1}}],[\"runcli\",{\"1\":{\"771\":2}}],[\"runner库会调用这个函数\",{\"1\":{\"723\":1}}],[\"running\",{\"1\":{\"434\":1,\"464\":1}}],[\"runqueue\",{\"0\":{\"655\":1},\"1\":{\"651\":2,\"655\":4}}],[\"run方法逻辑不同\",{\"1\":{\"555\":1}}],[\"runtimechunk\",{\"1\":{\"720\":1}}],[\"runtime来完成polyfill的功能\",{\"1\":{\"700\":1}}],[\"runtime来完成polyfill的使用\",{\"1\":{\"699\":1}}],[\"runtime\",{\"0\":{\"694\":1},\"1\":{\"71\":1,\"540\":4,\"584\":1,\"600\":2,\"601\":1,\"635\":1,\"663\":6,\"699\":2}}],[\"run\",{\"0\":{\"559\":1},\"1\":{\"65\":1,\"434\":1,\"524\":1,\"555\":1,\"556\":2,\"557\":3,\"558\":6,\"559\":2,\"565\":2,\"582\":1,\"670\":1,\"671\":1,\"735\":1,\"771\":1,\"772\":1}}],[\"r\",{\"1\":{\"13\":6,\"102\":1,\"103\":1,\"104\":2,\"218\":26,\"225\":4,\"226\":3,\"227\":2,\"282\":3,\"625\":1,\"636\":2}}],[\"rerender\",{\"1\":{\"635\":1}}],[\"reused\",{\"1\":{\"596\":1,\"642\":1,\"656\":1}}],[\"reuse\",{\"1\":{\"595\":1,\"596\":1}}],[\"regions\",{\"1\":{\"713\":1}}],[\"registration\",{\"1\":{\"656\":1}}],[\"registry\",{\"1\":{\"220\":1}}],[\"registergetter\",{\"1\":{\"663\":2}}],[\"registeraction\",{\"1\":{\"663\":2}}],[\"registermutation\",{\"1\":{\"663\":2}}],[\"registers\",{\"1\":{\"660\":1}}],[\"register\",{\"1\":{\"656\":2,\"663\":6}}],[\"registerrouteinstance\",{\"1\":{\"642\":3,\"656\":1}}],[\"registerrouteinstance方法\",{\"1\":{\"642\":1}}],[\"registerref\",{\"1\":{\"588\":1,\"592\":1}}],[\"registerinstance\",{\"1\":{\"642\":3}}],[\"registerdeepbindings\",{\"1\":{\"584\":1}}],[\"registered\",{\"1\":{\"573\":1,\"656\":1}}],[\"regenerator\",{\"1\":{\"699\":1}}],[\"regex\",{\"1\":{\"644\":1,\"650\":2}}],[\"regexescapere\",{\"1\":{\"611\":2}}],[\"regexp\",{\"1\":{\"573\":2,\"607\":1,\"611\":1}}],[\"re\",{\"1\":{\"565\":1,\"588\":1,\"596\":1,\"663\":1}}],[\"reverse\",{\"1\":{\"562\":1,\"654\":4}}],[\"revoke\",{\"1\":{\"291\":3}}],[\"revocable\",{\"1\":{\"291\":2}}],[\"rel=\",{\"1\":{\"635\":26}}],[\"relative\",{\"1\":{\"597\":1,\"625\":1,\"626\":2}}],[\"related\",{\"1\":{\"592\":1}}],[\"reloading\",{\"1\":{\"613\":1,\"663\":1}}],[\"reload\",{\"1\":{\"596\":1,\"625\":1,\"635\":3}}],[\"reloadonchange\",{\"1\":{\"89\":2}}],[\"reloadonchange参数\",{\"1\":{\"89\":2}}],[\"relies\",{\"1\":{\"582\":1}}],[\"relying\",{\"1\":{\"542\":1}}],[\"release\",{\"1\":{\"517\":4,\"642\":1}}],[\"req\",{\"1\":{\"445\":1,\"789\":1,\"793\":1,\"795\":1,\"797\":1}}],[\"require\",{\"1\":{\"102\":6,\"103\":6,\"104\":6,\"257\":1,\"445\":3,\"452\":1,\"463\":2,\"483\":1,\"529\":1,\"584\":1,\"626\":2,\"627\":1,\"629\":1,\"631\":2,\"635\":3,\"636\":1,\"653\":1,\"718\":10,\"719\":2,\"720\":10,\"723\":1,\"724\":1,\"729\":1,\"730\":3,\"751\":1,\"752\":1,\"755\":5,\"772\":2,\"776\":1,\"778\":1,\"779\":1,\"780\":1,\"781\":1,\"782\":1,\"783\":1,\"784\":1,\"789\":4,\"793\":1,\"795\":1,\"797\":4,\"801\":2}}],[\"requests\",{\"1\":{\"631\":1}}],[\"requestanimationframe\",{\"1\":{\"567\":1}}],[\"request\",{\"1\":{\"102\":8,\"103\":8,\"104\":8,\"469\":1,\"475\":1,\"625\":2,\"626\":4,\"630\":8,\"635\":1,\"637\":2,\"725\":1}}],[\"react\",{\"0\":{\"698\":1},\"1\":{\"696\":1,\"698\":1}}],[\"reactivity\",{\"1\":{\"660\":1}}],[\"reactivated\",{\"1\":{\"575\":2}}],[\"reactivatecomponent\",{\"1\":{\"574\":1,\"575\":2,\"591\":1}}],[\"reactivesetter\",{\"1\":{\"563\":1}}],[\"reactivegetter\",{\"1\":{\"563\":1}}],[\"real\",{\"1\":{\"544\":1,\"588\":1}}],[\"reason\",{\"1\":{\"278\":1,\"280\":5,\"282\":2,\"283\":8,\"626\":1,\"653\":4}}],[\"readystate\",{\"1\":{\"793\":1,\"794\":1}}],[\"readyerrorcbs\",{\"1\":{\"649\":1}}],[\"readycbs\",{\"1\":{\"649\":1}}],[\"ready\",{\"1\":{\"325\":1,\"649\":6}}],[\"readfile\",{\"1\":{\"257\":1,\"455\":1}}],[\"readthedocs\",{\"1\":{\"220\":1}}],[\"readkey\",{\"1\":{\"82\":1}}],[\"rejectpromise\",{\"1\":{\"282\":4}}],[\"rejected\",{\"1\":{\"280\":6,\"281\":2,\"283\":4}}],[\"reject\",{\"1\":{\"252\":1,\"280\":3,\"281\":10,\"282\":1,\"283\":18,\"653\":6,\"661\":1,\"784\":2}}],[\"refs\",{\"1\":{\"636\":1}}],[\"ref\",{\"1\":{\"592\":1,\"593\":4}}],[\"refelm\",{\"1\":{\"575\":5,\"590\":5,\"591\":4,\"597\":3}}],[\"reference\",{\"1\":{\"226\":1,\"586\":1,\"590\":1}}],[\"refpages\",{\"1\":{\"220\":1}}],[\"refracted\",{\"1\":{\"197\":1}}],[\"refract\",{\"1\":{\"197\":4}}],[\"reflect\",{\"0\":{\"302\":1,\"303\":1,\"304\":1,\"305\":1,\"306\":1,\"307\":1,\"308\":1,\"309\":1,\"310\":1,\"311\":1,\"312\":1,\"313\":1,\"314\":1},\"1\":{\"197\":5,\"289\":5,\"294\":7,\"295\":5,\"296\":2,\"297\":2,\"302\":3,\"303\":3,\"304\":3,\"305\":3,\"306\":3,\"307\":3,\"308\":3,\"309\":3,\"310\":3,\"311\":3,\"312\":3,\"313\":3,\"314\":2,\"316\":2,\"317\":2,\"318\":1,\"319\":2,\"320\":7}}],[\"reflected\",{\"1\":{\"197\":2}}],[\"removeeventlistener\",{\"1\":{\"646\":1}}],[\"removechild\",{\"1\":{\"594\":1}}],[\"removed\",{\"1\":{\"594\":1,\"597\":1}}],[\"removenode\",{\"0\":{\"594\":1},\"1\":{\"594\":1}}],[\"removevnodes\",{\"1\":{\"588\":1,\"596\":1,\"597\":1}}],[\"removeattribute\",{\"1\":{\"588\":1}}],[\"removeonly\",{\"1\":{\"586\":1,\"587\":1,\"588\":2,\"596\":2,\"597\":3}}],[\"remove\",{\"1\":{\"564\":1,\"565\":2,\"573\":2,\"595\":1,\"610\":2}}],[\"removesub\",{\"1\":{\"564\":1,\"565\":2}}],[\"remap\",{\"1\":{\"226\":1}}],[\"remainingrequest\",{\"1\":{\"637\":1,\"748\":1}}],[\"remaining\",{\"1\":{\"606\":1}}],[\"remain\",{\"1\":{\"139\":1}}],[\"rem\",{\"1\":{\"181\":1}}],[\"representation\",{\"1\":{\"139\":1}}],[\"replace记录\",{\"1\":{\"649\":1}}],[\"replacehash\",{\"1\":{\"647\":2}}],[\"replacestate\",{\"1\":{\"646\":3,\"647\":1}}],[\"replaced\",{\"1\":{\"141\":1,\"187\":1}}],[\"replace\",{\"1\":{\"102\":1,\"103\":1,\"104\":2,\"534\":6,\"585\":1,\"588\":1,\"610\":1,\"611\":2,\"625\":3,\"626\":1,\"645\":2,\"646\":5,\"647\":2,\"651\":2,\"655\":2}}],[\"responsible\",{\"1\":{\"660\":1}}],[\"responsetext\",{\"1\":{\"793\":1,\"794\":1}}],[\"response\",{\"1\":{\"102\":8,\"103\":8,\"104\":8}}],[\"resource\",{\"1\":{\"718\":1}}],[\"resourcequery\",{\"1\":{\"625\":1,\"629\":1,\"631\":1,\"636\":1,\"637\":2}}],[\"resourcepath\",{\"1\":{\"625\":2,\"629\":3,\"631\":1}}],[\"resolving\",{\"1\":{\"653\":1}}],[\"resolveloader\",{\"1\":{\"724\":1}}],[\"resolvequeue\",{\"0\":{\"652\":1},\"1\":{\"651\":1,\"652\":1}}],[\"resolvehooks\",{\"1\":{\"643\":1,\"651\":1,\"655\":1}}],[\"resolveddef\",{\"1\":{\"653\":8}}],[\"resolved\",{\"1\":{\"596\":1,\"651\":1,\"653\":3,\"655\":1}}],[\"resolveasynccomponents\",{\"0\":{\"653\":1},\"1\":{\"651\":1,\"653\":2}}],[\"resolveasynccomponent\",{\"1\":{\"585\":1}}],[\"resolveasset\",{\"1\":{\"584\":1}}],[\"resolvemodifiedoptions\",{\"1\":{\"546\":1,\"547\":1}}],[\"resolveconstructoroptions\",{\"0\":{\"546\":1},\"1\":{\"544\":1,\"545\":1,\"546\":3,\"547\":3,\"585\":1}}],[\"resolver\",{\"1\":{\"341\":1}}],[\"resolvepromise\",{\"1\":{\"282\":4}}],[\"resolve\",{\"1\":{\"252\":3,\"253\":6,\"254\":3,\"256\":3,\"257\":1,\"258\":2,\"280\":2,\"281\":14,\"282\":6,\"283\":21,\"544\":2,\"546\":1,\"547\":1,\"567\":6,\"568\":1,\"601\":1,\"603\":1,\"626\":1,\"636\":1,\"653\":10,\"656\":1,\"661\":2,\"663\":1,\"718\":6,\"723\":1,\"724\":1,\"784\":4,\"789\":1,\"797\":1}}],[\"resolution\",{\"1\":{\"190\":6,\"211\":2,\"215\":2,\"216\":2,\"217\":2,\"224\":4,\"225\":2,\"226\":6,\"227\":2,\"237\":3,\"341\":1}}],[\"rest\",{\"1\":{\"606\":8}}],[\"restoreactiveinstance\",{\"1\":{\"586\":2}}],[\"resetstorevm\",{\"1\":{\"660\":1,\"663\":3}}],[\"resetschedulerstate\",{\"1\":{\"557\":1,\"558\":3}}],[\"reset\",{\"1\":{\"596\":1,\"663\":1,\"697\":1}}],[\"resetting\",{\"1\":{\"558\":1}}],[\"res内容巨多\",{\"1\":{\"517\":1}}],[\"res\",{\"1\":{\"283\":2,\"445\":1,\"517\":1,\"547\":4,\"603\":4,\"610\":6,\"653\":6,\"661\":2,\"663\":6,\"664\":8,\"670\":9,\"789\":2,\"793\":3,\"795\":2,\"797\":2}}],[\"result\",{\"1\":{\"8\":3,\"57\":6,\"60\":1,\"117\":1,\"195\":2,\"198\":14,\"260\":5,\"280\":6,\"281\":15,\"283\":12,\"320\":3,\"547\":1,\"562\":2,\"583\":1,\"661\":2,\"689\":3,\"690\":4}}],[\"rendered\",{\"1\":{\"588\":4,\"656\":1}}],[\"renderer\",{\"1\":{\"237\":4}}],[\"render获取虚拟vnode\",{\"1\":{\"580\":2}}],[\"render`\",{\"1\":{\"543\":1}}],[\"rendermixin\",{\"1\":{\"543\":2}}],[\"renderproxy\",{\"1\":{\"538\":2,\"544\":1,\"566\":1,\"583\":2,\"584\":3}}],[\"rendering\",{\"1\":{\"249\":1,\"586\":1}}],[\"render\",{\"0\":{\"583\":1},\"1\":{\"102\":4,\"103\":4,\"104\":4,\"237\":2,\"528\":1,\"529\":1,\"532\":1,\"534\":1,\"538\":2,\"543\":3,\"544\":2,\"556\":1,\"558\":2,\"563\":1,\"566\":8,\"573\":1,\"582\":5,\"583\":11,\"584\":8,\"586\":2,\"588\":1,\"590\":1,\"596\":2,\"601\":5,\"602\":1,\"603\":11,\"614\":1,\"615\":4,\"625\":3,\"635\":4,\"638\":3,\"656\":4,\"735\":1}}],[\"redirectedfrom\",{\"1\":{\"650\":5}}],[\"redirected\",{\"1\":{\"649\":1}}],[\"redirection\",{\"1\":{\"649\":2}}],[\"redirect\",{\"1\":{\"644\":3,\"649\":1,\"651\":2,\"655\":1}}],[\"reduce\",{\"1\":{\"320\":1,\"663\":1}}],[\"red\",{\"1\":{\"89\":1,\"141\":1,\"153\":1,\"218\":2,\"254\":1,\"617\":1,\"619\":2,\"624\":2}}],[\"recipes\",{\"1\":{\"635\":2}}],[\"records\",{\"1\":{\"653\":1,\"654\":2}}],[\"record\",{\"1\":{\"644\":12,\"650\":12,\"654\":1}}],[\"recordeffectscope\",{\"1\":{\"565\":1}}],[\"record<string\",{\"1\":{\"521\":1,\"544\":1,\"547\":4,\"554\":1,\"555\":1,\"670\":1}}],[\"recyclerview\",{\"1\":{\"517\":2}}],[\"receiver则为setter调用时的this值\",{\"1\":{\"303\":1}}],[\"receiver\",{\"1\":{\"289\":4,\"302\":4,\"303\":4,\"316\":2,\"320\":2}}],[\"recalculatestyle\",{\"1\":{\"102\":3,\"103\":3,\"104\":3}}],[\"rectangle\",{\"1\":{\"83\":3}}],[\"recursive\",{\"1\":{\"46\":1}}],[\"returns\",{\"1\":{\"591\":1}}],[\"returned\",{\"1\":{\"583\":1}}],[\"return\",{\"1\":{\"1\":1,\"7\":2,\"8\":2,\"13\":1,\"18\":1,\"23\":1,\"43\":1,\"53\":1,\"54\":1,\"55\":1,\"56\":1,\"57\":3,\"58\":2,\"60\":1,\"61\":2,\"62\":1,\"76\":1,\"77\":3,\"79\":4,\"80\":1,\"81\":1,\"82\":1,\"102\":3,\"103\":5,\"104\":7,\"117\":3,\"118\":1,\"127\":2,\"190\":3,\"191\":1,\"192\":1,\"200\":3,\"204\":2,\"206\":14,\"215\":2,\"216\":3,\"217\":3,\"218\":15,\"226\":1,\"232\":1,\"238\":3,\"243\":6,\"264\":5,\"266\":6,\"268\":1,\"269\":3,\"271\":1,\"274\":4,\"280\":3,\"281\":2,\"282\":4,\"283\":13,\"288\":1,\"289\":2,\"290\":1,\"291\":1,\"297\":2,\"299\":2,\"302\":1,\"303\":1,\"304\":1,\"305\":1,\"306\":1,\"307\":1,\"308\":1,\"309\":1,\"310\":1,\"311\":1,\"312\":1,\"313\":1,\"316\":2,\"317\":4,\"318\":2,\"319\":3,\"320\":4,\"483\":1,\"519\":2,\"521\":3,\"528\":1,\"532\":2,\"534\":1,\"540\":1,\"546\":2,\"547\":3,\"550\":1,\"554\":2,\"555\":3,\"557\":2,\"559\":1,\"560\":2,\"562\":1,\"563\":8,\"565\":1,\"566\":3,\"567\":1,\"573\":6,\"575\":2,\"581\":1,\"582\":1,\"583\":3,\"584\":6,\"585\":6,\"587\":1,\"588\":8,\"589\":1,\"590\":1,\"591\":2,\"596\":3,\"601\":3,\"602\":1,\"603\":14,\"604\":1,\"607\":1,\"609\":1,\"610\":2,\"611\":3,\"612\":1,\"613\":4,\"614\":1,\"615\":18,\"626\":1,\"629\":1,\"630\":1,\"635\":5,\"636\":2,\"637\":1,\"638\":2,\"642\":5,\"644\":2,\"646\":2,\"647\":1,\"650\":5,\"651\":3,\"652\":1,\"653\":1,\"654\":10,\"655\":2,\"656\":6,\"659\":1,\"660\":2,\"661\":2,\"662\":1,\"663\":7,\"664\":7,\"665\":7,\"669\":1,\"670\":8,\"689\":1,\"690\":1,\"718\":2,\"723\":1,\"727\":2,\"738\":1,\"779\":1,\"780\":1,\"781\":1,\"784\":2}}],[\"6513\",{\"1\":{\"588\":1}}],[\"6950826293923414047\",{\"1\":{\"561\":1}}],[\"6887\",{\"1\":{\"534\":1}}],[\"64\",{\"1\":{\"230\":1,\"803\":2}}],[\"640x\",{\"1\":{\"43\":1}}],[\"640x400\",{\"1\":{\"43\":1}}],[\"640x640\",{\"1\":{\"43\":2}}],[\"640=>\",{\"1\":{\"43\":1}}],[\"640\",{\"1\":{\"43\":1}}],[\"6~7\",{\"1\":{\"230\":1}}],[\"600\",{\"1\":{\"230\":1}}],[\"60\",{\"1\":{\"198\":4}}],[\"667\",{\"1\":{\"197\":2}}],[\"6\",{\"1\":{\"8\":1,\"13\":3,\"43\":1,\"82\":2,\"102\":1,\"103\":2,\"104\":2,\"117\":1,\"158\":1,\"185\":1,\"193\":1,\"195\":3,\"196\":1,\"197\":1,\"206\":6,\"218\":1,\"224\":2,\"226\":1,\"243\":1,\"252\":2,\"253\":4,\"256\":1,\"271\":1,\"281\":3,\"282\":1,\"285\":1,\"517\":1,\"557\":1,\"566\":1,\"590\":1,\"713\":1,\"803\":3}}],[\"输出apk文件\",{\"1\":{\"517\":1}}],[\"输出变量的名称\",{\"1\":{\"236\":1}}],[\"输出变量的类型\",{\"1\":{\"236\":1}}],[\"输出变量的值由着色器计算\",{\"1\":{\"236\":1}}],[\"输出颜色值\",{\"1\":{\"239\":1}}],[\"输出颜色\",{\"1\":{\"190\":1}}],[\"输出\",{\"1\":{\"8\":2,\"9\":1,\"13\":1,\"18\":1,\"23\":1,\"79\":1,\"80\":2,\"82\":1,\"84\":2,\"638\":1}}],[\"输入密码\",{\"1\":{\"517\":2}}],[\"输入处理程序防抖\",{\"0\":{\"511\":1}}],[\"输入变量的名称\",{\"1\":{\"236\":1}}],[\"输入变量的类型\",{\"1\":{\"236\":1}}],[\"输入变量的值由于渲染管线输出阶段提供\",{\"1\":{\"236\":1}}],[\"输入值叫做\",{\"1\":{\"210\":1}}],[\"输入数据的最大值\",{\"1\":{\"61\":1}}],[\"输入数据的最小值\",{\"1\":{\"61\":1}}],[\"输入\",{\"1\":{\"8\":2,\"9\":1,\"13\":1,\"18\":1,\"23\":1}}],[\"8d\",{\"1\":{\"644\":1}}],[\"8888\",{\"1\":{\"797\":2,\"799\":2}}],[\"88\",{\"1\":{\"644\":1}}],[\"8代码分析\",{\"0\":{\"633\":1}}],[\"8+\",{\"1\":{\"227\":2}}],[\"89\",{\"1\":{\"218\":1}}],[\"83\",{\"1\":{\"218\":1}}],[\"87\",{\"1\":{\"218\":2}}],[\"85373472095314\",{\"1\":{\"206\":3,\"243\":1}}],[\"8利用step\",{\"1\":{\"202\":1}}],[\"8000\",{\"1\":{\"793\":1}}],[\"800\",{\"1\":{\"230\":1}}],[\"80\",{\"1\":{\"102\":1,\"103\":1,\"104\":1,\"218\":1,\"789\":1}}],[\"8080\",{\"1\":{\"89\":1,\"793\":2,\"794\":1,\"795\":1}}],[\"80x80\",{\"1\":{\"43\":2}}],[\"8\",{\"1\":{\"8\":5,\"13\":6,\"102\":1,\"103\":1,\"104\":1,\"195\":6,\"196\":1,\"198\":2,\"202\":14,\"218\":9,\"230\":2,\"253\":2,\"271\":1,\"517\":1,\"635\":1,\"637\":6,\"638\":2,\"699\":1,\"713\":2,\"718\":1,\"720\":1,\"803\":4}}],[\"7+64\",{\"1\":{\"803\":1}}],[\"7+16\",{\"1\":{\"803\":1}}],[\"7+0\",{\"1\":{\"225\":1}}],[\"71行\",{\"1\":{\"642\":1}}],[\"7981\",{\"1\":{\"563\":1}}],[\"79284291400159\",{\"1\":{\"206\":3,\"243\":1}}],[\"7573\",{\"1\":{\"548\":1}}],[\"75\",{\"1\":{\"225\":1}}],[\"76\",{\"1\":{\"218\":1}}],[\"74\",{\"1\":{\"218\":1}}],[\"7利用通过取模达到反复效果\",{\"1\":{\"202\":1}}],[\"78\",{\"1\":{\"200\":1,\"204\":2,\"206\":2,\"243\":1}}],[\"7\",{\"1\":{\"8\":4,\"13\":3,\"102\":1,\"103\":1,\"104\":2,\"120\":1,\"195\":9,\"196\":1,\"218\":7,\"230\":2,\"251\":1,\"252\":2,\"253\":2,\"271\":1,\"281\":5,\"319\":2,\"557\":1,\"568\":1,\"713\":3,\"803\":6}}],[\"5kb\",{\"1\":{\"679\":2}}],[\"5plus\",{\"1\":{\"517\":1}}],[\"5+\",{\"1\":{\"227\":1}}],[\"5+a\",{\"1\":{\"226\":1}}],[\"5+0\",{\"1\":{\"218\":1,\"227\":1}}],[\"588\",{\"1\":{\"224\":1}}],[\"54\",{\"1\":{\"218\":1}}],[\"5453123\",{\"1\":{\"200\":1,\"204\":2,\"206\":2,\"243\":1}}],[\"5时\",{\"1\":{\"190\":2}}],[\"55\",{\"1\":{\"163\":1}}],[\"50\",{\"1\":{\"146\":1,\"166\":1,\"218\":3}}],[\"5000\",{\"1\":{\"464\":1}}],[\"500\",{\"1\":{\"18\":2}}],[\"51040417\",{\"1\":{\"87\":1}}],[\"5块\",{\"1\":{\"26\":1}}],[\"5\",{\"1\":{\"8\":2,\"13\":3,\"43\":1,\"61\":1,\"81\":1,\"102\":2,\"103\":2,\"104\":2,\"122\":1,\"146\":1,\"190\":4,\"193\":1,\"195\":7,\"196\":2,\"197\":3,\"198\":6,\"199\":5,\"202\":1,\"204\":18,\"206\":30,\"215\":2,\"216\":4,\"217\":4,\"218\":9,\"225\":5,\"226\":1,\"227\":7,\"232\":3,\"235\":12,\"239\":2,\"240\":4,\"243\":2,\"252\":2,\"253\":4,\"261\":2,\"271\":2,\"278\":1,\"281\":1,\"282\":1,\"517\":3,\"557\":1,\"566\":1,\"606\":1,\"608\":1,\"638\":1,\"667\":2,\"713\":9,\"715\":1,\"720\":2,\"788\":1,\"803\":3}}],[\"oaid\",{\"1\":{\"517\":1}}],[\"os\",{\"1\":{\"445\":1,\"455\":1}}],[\"output\",{\"1\":{\"720\":2}}],[\"outputsourcerange\",{\"1\":{\"601\":1,\"603\":1,\"604\":2,\"627\":1}}],[\"outside\",{\"1\":{\"663\":1}}],[\"outweigh\",{\"1\":{\"614\":1}}],[\"outcolor2\",{\"1\":{\"240\":2}}],[\"outcolor1\",{\"1\":{\"240\":2}}],[\"out\",{\"1\":{\"236\":3,\"240\":2,\"583\":1,\"614\":1,\"635\":2,\"642\":1,\"702\":2}}],[\"outerhtml\",{\"1\":{\"603\":2}}],[\"outer\",{\"0\":{\"184\":1},\"1\":{\"183\":1}}],[\"obsolete\",{\"1\":{\"709\":1}}],[\"observearray\",{\"1\":{\"561\":2,\"562\":1}}],[\"observer\",{\"0\":{\"561\":1},\"1\":{\"556\":1,\"560\":6,\"561\":2,\"568\":2}}],[\"observed\",{\"1\":{\"544\":1}}],[\"observe\",{\"0\":{\"560\":1},\"1\":{\"250\":1,\"549\":1,\"553\":2,\"556\":1,\"560\":4,\"561\":2,\"563\":3,\"568\":1}}],[\"ob\",{\"1\":{\"549\":3,\"553\":3,\"560\":12,\"561\":2,\"562\":4,\"563\":2}}],[\"obj\",{\"1\":{\"263\":2,\"283\":8,\"561\":4,\"563\":10,\"670\":6}}],[\"objectcolor\",{\"1\":{\"236\":1}}],[\"object\",{\"1\":{\"102\":2,\"103\":3,\"104\":3,\"186\":1,\"250\":1,\"283\":3,\"287\":2,\"288\":2,\"290\":1,\"293\":2,\"294\":1,\"300\":1,\"302\":1,\"303\":1,\"304\":1,\"305\":3,\"306\":3,\"308\":5,\"309\":7,\"310\":5,\"311\":3,\"312\":4,\"521\":3,\"532\":2,\"542\":4,\"547\":1,\"550\":2,\"551\":2,\"552\":1,\"553\":1,\"554\":3,\"555\":2,\"559\":3,\"560\":1,\"561\":4,\"562\":1,\"563\":4,\"565\":1,\"567\":1,\"568\":1,\"573\":1,\"584\":2,\"585\":1,\"603\":3,\"613\":1,\"627\":1,\"635\":1,\"642\":2,\"644\":2,\"650\":2,\"651\":2,\"654\":2,\"655\":2,\"656\":2,\"660\":5,\"661\":1,\"662\":1,\"663\":4,\"665\":2,\"668\":1,\"669\":1,\"670\":1,\"730\":1}}],[\"oblivion\",{\"1\":{\"218\":2}}],[\"oldnamemap\",{\"1\":{\"644\":2}}],[\"oldpathmap\",{\"1\":{\"644\":2}}],[\"oldpathlist\",{\"1\":{\"644\":2}}],[\"oldkeytoidx\",{\"1\":{\"597\":5}}],[\"oldstartvnode\",{\"1\":{\"597\":14}}],[\"oldstartidx\",{\"1\":{\"597\":6}}],[\"oldchildren\",{\"1\":{\"597\":6}}],[\"oldch\",{\"1\":{\"596\":7,\"597\":15}}],[\"old\",{\"1\":{\"588\":2,\"667\":1}}],[\"oldendvnode\",{\"1\":{\"597\":11}}],[\"oldendidx\",{\"1\":{\"597\":10}}],[\"oldelm\",{\"1\":{\"588\":4}}],[\"oldest\",{\"1\":{\"573\":1}}],[\"oldarg\",{\"1\":{\"535\":1}}],[\"oldarr\",{\"1\":{\"53\":2,\"54\":2,\"55\":2,\"56\":2,\"57\":2}}],[\"oldvm\",{\"1\":{\"663\":4}}],[\"oldval\",{\"1\":{\"559\":1,\"667\":6}}],[\"oldvalue\",{\"1\":{\"535\":1,\"559\":3,\"565\":3,\"670\":3}}],[\"oldvnode\",{\"1\":{\"535\":13,\"587\":7,\"588\":20,\"591\":2,\"596\":16}}],[\"olddir\",{\"1\":{\"535\":5}}],[\"olddirs\",{\"1\":{\"535\":4}}],[\"ol有序列表\",{\"1\":{\"185\":1}}],[\"origin\",{\"1\":{\"663\":2,\"793\":1}}],[\"originalmatrix\",{\"1\":{\"196\":2}}],[\"original\",{\"1\":{\"141\":1,\"216\":1,\"562\":3}}],[\"oracle\",{\"1\":{\"517\":1}}],[\"org\",{\"1\":{\"220\":1,\"635\":16,\"644\":1,\"660\":1}}],[\"or\",{\"1\":{\"139\":3,\"140\":1,\"141\":4,\"583\":1,\"584\":1,\"588\":2,\"613\":2,\"615\":1,\"642\":1,\"651\":1,\"655\":1,\"656\":1}}],[\"otherwise\",{\"1\":{\"610\":1,\"614\":1}}],[\"other\",{\"1\":{\"139\":2,\"140\":1,\"585\":1,\"603\":1}}],[\"ownerarray\",{\"1\":{\"590\":3,\"596\":3}}],[\"ownkeys\",{\"0\":{\"308\":2},\"1\":{\"308\":7,\"320\":1}}],[\"own\",{\"1\":{\"139\":1,\"141\":1}}],[\"onmessage\",{\"1\":{\"797\":1}}],[\"onopen\",{\"1\":{\"797\":1}}],[\"onopentag\",{\"1\":{\"102\":1,\"103\":1,\"104\":1}}],[\"onabort\",{\"1\":{\"645\":4,\"646\":4,\"647\":4,\"649\":3,\"651\":3}}],[\"oncomplete\",{\"1\":{\"645\":4,\"646\":6,\"647\":6,\"649\":3,\"651\":2,\"655\":1}}],[\"onceprocessed\",{\"1\":{\"615\":1}}],[\"once\",{\"1\":{\"614\":1,\"615\":1,\"642\":1,\"649\":1,\"653\":2,\"659\":1}}],[\"once指令\",{\"1\":{\"596\":1}}],[\"onclosetag\",{\"1\":{\"102\":1,\"103\":1,\"104\":1}}],[\"onstop\",{\"1\":{\"565\":3}}],[\"onshareappmessage\",{\"1\":{\"327\":1}}],[\"onshow\",{\"1\":{\"325\":2,\"326\":1,\"327\":1}}],[\"one\",{\"1\":{\"434\":1,\"583\":1,\"609\":1}}],[\"onerrors\",{\"1\":{\"718\":1}}],[\"onerror\",{\"1\":{\"326\":1}}],[\"onto\",{\"1\":{\"585\":1}}],[\"ontrigger\",{\"1\":{\"565\":3}}],[\"ontrack\",{\"1\":{\"565\":3}}],[\"ontabitemtap\",{\"1\":{\"327\":1}}],[\"ontext\",{\"1\":{\"102\":1,\"103\":1,\"104\":1}}],[\"onpagescroll\",{\"1\":{\"327\":1}}],[\"onpulldownrefresh\",{\"1\":{\"327\":1}}],[\"onunload\",{\"1\":{\"327\":1}}],[\"onhide\",{\"1\":{\"326\":1,\"327\":1}}],[\"onload\",{\"1\":{\"325\":1,\"327\":1,\"789\":1}}],[\"onlaunch\",{\"1\":{\"325\":1,\"326\":1}}],[\"onlynumbersgohere\",{\"1\":{\"318\":5}}],[\"only\",{\"1\":{\"139\":1,\"140\":1,\"141\":1,\"521\":1,\"547\":2,\"551\":1,\"554\":1,\"561\":1,\"565\":2,\"583\":1,\"588\":1,\"596\":1,\"597\":1,\"600\":1,\"610\":1,\"626\":1,\"629\":1,\"635\":1,\"659\":1,\"720\":1}}],[\"onfinally\",{\"1\":{\"283\":3}}],[\"onfullfilled\",{\"1\":{\"280\":1}}],[\"onfulfilled\",{\"1\":{\"280\":1,\"281\":20,\"282\":4,\"283\":12}}],[\"onre\",{\"1\":{\"534\":2}}],[\"onresize\",{\"1\":{\"327\":1}}],[\"onreachbottom\",{\"1\":{\"327\":1}}],[\"onreadystatechange\",{\"1\":{\"793\":1,\"794\":1}}],[\"onready\",{\"1\":{\"325\":1,\"327\":1}}],[\"onrejected\",{\"1\":{\"280\":2,\"281\":19,\"282\":5,\"283\":16}}],[\"onrjected\",{\"1\":{\"281\":1}}],[\"onwindowresize\",{\"1\":{\"237\":1}}],[\"on\",{\"1\":{\"102\":9,\"103\":9,\"104\":9,\"139\":3,\"140\":2,\"141\":2,\"190\":1,\"215\":2,\"216\":2,\"217\":2,\"218\":2,\"445\":1,\"521\":1,\"528\":2,\"534\":1,\"542\":1,\"547\":1,\"551\":1,\"553\":1,\"554\":1,\"557\":1,\"559\":1,\"565\":2,\"582\":2,\"583\":1,\"584\":1,\"585\":2,\"586\":1,\"590\":1,\"635\":2,\"651\":1,\"653\":1,\"655\":1,\"660\":1,\"670\":1,\"789\":5,\"797\":2}}],[\"onnamechanged\",{\"1\":{\"77\":2}}],[\"opcode|m|\",{\"1\":{\"803\":1}}],[\"opcode\",{\"1\":{\"803\":4}}],[\"optimization\",{\"0\":{\"817\":1},\"1\":{\"720\":1}}],[\"optimizability\",{\"1\":{\"615\":5}}],[\"optimizer\",{\"1\":{\"603\":1}}],[\"optimize\",{\"0\":{\"612\":1},\"1\":{\"544\":1,\"603\":4,\"612\":1,\"735\":1}}],[\"optionmergestrategies\",{\"1\":{\"642\":1}}],[\"option\",{\"1\":{\"546\":1,\"547\":1,\"649\":1}}],[\"options中的\",{\"1\":{\"646\":1}}],[\"options`\",{\"1\":{\"626\":1}}],[\"options\",{\"1\":{\"102\":4,\"103\":4,\"104\":4,\"326\":2,\"327\":1,\"455\":12,\"521\":2,\"532\":2,\"540\":2,\"542\":5,\"543\":3,\"544\":10,\"545\":1,\"546\":13,\"547\":21,\"555\":10,\"558\":1,\"565\":10,\"566\":1,\"584\":1,\"585\":8,\"601\":7,\"603\":32,\"604\":9,\"606\":11,\"608\":4,\"609\":1,\"612\":3,\"615\":4,\"627\":2,\"635\":5,\"636\":4,\"637\":5,\"638\":3,\"642\":1,\"643\":9,\"646\":1,\"654\":2,\"656\":4,\"659\":9,\"660\":8,\"662\":5,\"663\":4,\"665\":3,\"669\":3,\"670\":11,\"704\":1,\"705\":1,\"718\":2,\"729\":4,\"730\":5,\"737\":1,\"738\":9,\"739\":4,\"740\":4,\"745\":1,\"746\":1,\"755\":4}}],[\"optional\",{\"1\":{\"89\":2,\"650\":1}}],[\"optional参数\",{\"1\":{\"89\":2}}],[\"opts\",{\"1\":{\"520\":3,\"549\":11,\"668\":4}}],[\"operamobile\",{\"1\":{\"713\":1}}],[\"opera10\",{\"1\":{\"561\":1}}],[\"operator\",{\"1\":{\"77\":2,\"689\":2,\"690\":1}}],[\"open\",{\"1\":{\"611\":2,\"719\":1,\"793\":1,\"794\":1}}],[\"openssl\",{\"1\":{\"517\":1}}],[\"openingelement\",{\"1\":{\"690\":2}}],[\"opening\",{\"1\":{\"218\":2,\"610\":1}}],[\"opengles\",{\"1\":{\"220\":1}}],[\"opengl\",{\"1\":{\"189\":1,\"212\":2,\"220\":3,\"223\":1,\"238\":1}}],[\"overwriting\",{\"1\":{\"590\":1}}],[\"overlay\",{\"1\":{\"517\":1}}],[\"overloading\",{\"1\":{\"77\":2}}],[\"over\",{\"1\":{\"434\":1}}],[\"overflow\",{\"1\":{\"118\":1,\"144\":1,\"174\":1}}],[\"overriden\",{\"1\":{\"646\":1}}],[\"override\",{\"1\":{\"84\":1,\"288\":4}}],[\"o\",{\"1\":{\"8\":1,\"9\":1,\"32\":1,\"33\":6,\"49\":3,\"56\":4,\"57\":4,\"249\":1,\"255\":1,\"256\":6,\"257\":1,\"294\":4,\"754\":1}}],[\"off\",{\"1\":{\"457\":1,\"614\":1}}],[\"offset\",{\"1\":{\"199\":22}}],[\"of\",{\"1\":{\"8\":1,\"9\":1,\"18\":1,\"73\":1,\"77\":1,\"139\":1,\"140\":2,\"141\":1,\"189\":1,\"200\":1,\"206\":2,\"208\":1,\"215\":1,\"216\":1,\"217\":1,\"218\":3,\"223\":1,\"225\":2,\"226\":2,\"243\":1,\"263\":4,\"264\":1,\"266\":5,\"270\":2,\"271\":1,\"272\":2,\"273\":1,\"274\":4,\"319\":1,\"434\":1,\"542\":2,\"544\":1,\"547\":1,\"551\":1,\"558\":1,\"561\":2,\"565\":1,\"584\":1,\"585\":1,\"614\":1,\"738\":1}}],[\"返回该数据\",{\"1\":{\"670\":1}}],[\"返回了一个\",{\"1\":{\"603\":1}}],[\"返回vnode\",{\"1\":{\"580\":1}}],[\"返回的结果\",{\"1\":{\"604\":1}}],[\"返回的函数\",{\"1\":{\"559\":1}}],[\"返回的可枚举对象必须包含\",{\"1\":{\"308\":1}}],[\"返回ack号和更新窗口的时机\",{\"1\":{\"367\":1}}],[\"返回小于或等于一个给定数字的最大整数\",{\"1\":{\"319\":1}}],[\"返回非布尔值会被转\",{\"1\":{\"312\":1}}],[\"返回非布尔值会被转型为布尔值\",{\"1\":{\"304\":1,\"305\":1,\"310\":1,\"311\":1}}],[\"返回其原型\",{\"1\":{\"309\":1}}],[\"返回指定对象的原型\",{\"1\":{\"309\":1}}],[\"返回指定索引的值\",{\"1\":{\"80\":1}}],[\"返回false\",{\"1\":{\"303\":1}}],[\"返回true表示设置property为值value成功\",{\"1\":{\"320\":1}}],[\"返回true\",{\"1\":{\"303\":1}}],[\"返回它们自己\",{\"1\":{\"261\":1}}],[\"返回给定采样器\",{\"1\":{\"199\":1}}],[\"返回给定纹理\",{\"1\":{\"199\":1}}],[\"返回采样结果\",{\"1\":{\"199\":2}}],[\"返回类型为vec4\",{\"1\":{\"199\":3}}],[\"返回深度值\",{\"1\":{\"199\":4}}],[\"返回颜色值\",{\"1\":{\"199\":7}}],[\"返回从介质\",{\"1\":{\"197\":1}}],[\"返回与出射矢量\",{\"1\":{\"197\":1}}],[\"返回与参数\",{\"1\":{\"195\":1}}],[\"返回两个点\",{\"1\":{\"197\":1}}],[\"返回矢量\",{\"1\":{\"197\":5}}],[\"返回投影矩阵的逆矩阵\",{\"1\":{\"196\":1}}],[\"返回一个由目标对象自身的属性键组成的数组\",{\"1\":{\"308\":1}}],[\"返回一个值\",{\"1\":{\"281\":1}}],[\"返回一个浮点数\",{\"1\":{\"199\":2}}],[\"返回一个矩阵\",{\"1\":{\"196\":1}}],[\"返回一个缩放变换矩阵\",{\"1\":{\"196\":1}}],[\"返回一个旋转变换矩阵\",{\"1\":{\"196\":1}}],[\"返回一个平移变换矩阵\",{\"1\":{\"196\":1}}],[\"返回一个在\",{\"1\":{\"195\":1}}],[\"返回一个0到1之间的值\",{\"1\":{\"190\":1}}],[\"返回一个0\",{\"1\":{\"190\":1}}],[\"返回在最小值\",{\"1\":{\"195\":1}}],[\"返回值\",{\"1\":{\"196\":1,\"199\":18,\"302\":1,\"303\":2,\"304\":2,\"305\":1,\"306\":1,\"307\":2,\"308\":1,\"310\":1,\"311\":2,\"312\":1,\"313\":1,\"314\":1}}],[\"返回值为\",{\"1\":{\"195\":1}}],[\"返回值的符号与\",{\"1\":{\"195\":1}}],[\"返回比参数\",{\"1\":{\"195\":2}}],[\"返回参数\",{\"1\":{\"195\":2}}],[\"返回1\",{\"1\":{\"190\":1}}],[\"返回0\",{\"1\":{\"190\":1,\"202\":3}}],[\"返回集合中元素的数量\",{\"1\":{\"80\":1}}],[\"返回\",{\"1\":{\"8\":1,\"195\":3}}],[\"t|j\",{\"1\":{\"718\":1,\"746\":1}}],[\"tuntime\",{\"1\":{\"700\":1}}],[\"turn\",{\"1\":{\"585\":1,\"603\":1}}],[\"ture\",{\"1\":{\"558\":1}}],[\"twitter\",{\"1\":{\"635\":2}}],[\"two\",{\"1\":{\"9\":1,\"140\":1,\"141\":1,\"190\":1,\"226\":2}}],[\"tmp\",{\"1\":{\"565\":4}}],[\"tml\",{\"1\":{\"334\":1}}],[\"ts$\",{\"1\":{\"718\":1}}],[\"ts\",{\"1\":{\"535\":1,\"540\":1,\"547\":1,\"573\":2,\"585\":8,\"601\":1,\"603\":1,\"656\":1,\"718\":1}}],[\"tsparsehtml\",{\"1\":{\"534\":1}}],[\"tps\",{\"0\":{\"436\":1}}],[\"tcp\",{\"1\":{\"374\":1,\"412\":1,\"464\":2,\"796\":1,\"798\":4}}],[\"tc\",{\"1\":{\"225\":4}}],[\"txt\",{\"1\":{\"455\":4}}],[\"tx\",{\"1\":{\"206\":6,\"243\":2}}],[\"t2\",{\"1\":{\"191\":2}}],[\"t1\",{\"1\":{\"191\":3}}],[\"tty\",{\"1\":{\"455\":1}}],[\"ttl\",{\"1\":{\"403\":2}}],[\"tt\",{\"1\":{\"186\":1}}],[\"trim\",{\"1\":{\"603\":3,\"604\":1,\"610\":1,\"611\":1,\"631\":1}}],[\"triggering\",{\"1\":{\"670\":1}}],[\"triggered\",{\"1\":{\"649\":1}}],[\"trigger\",{\"1\":{\"575\":1}}],[\"triangles\",{\"1\":{\"218\":2}}],[\"treat\",{\"1\":{\"597\":1,\"606\":1}}],[\"treated\",{\"1\":{\"585\":1}}],[\"treatment\",{\"1\":{\"544\":1}}],[\"treeshake\",{\"1\":{\"679\":1}}],[\"trees\",{\"1\":{\"596\":1}}],[\"tree\",{\"0\":{\"489\":1},\"1\":{\"588\":1,\"615\":2,\"635\":4,\"656\":2,\"663\":1,\"720\":1}}],[\"traverse\",{\"1\":{\"521\":1,\"565\":1,\"566\":1,\"670\":1}}],[\"tracked\",{\"1\":{\"521\":1,\"565\":1,\"670\":1}}],[\"trace\",{\"1\":{\"457\":1}}],[\"traptarget\",{\"1\":{\"289\":4}}],[\"trap\",{\"1\":{\"288\":1}}],[\"transformation\",{\"1\":{\"707\":1}}],[\"transform\",{\"0\":{\"694\":1},\"1\":{\"700\":2,\"702\":5,\"704\":2}}],[\"transforms\",{\"1\":{\"609\":1,\"615\":3,\"631\":1}}],[\"transformmodel\",{\"1\":{\"585\":1}}],[\"transformedtexcoord\",{\"1\":{\"239\":1}}],[\"transformednormal\",{\"1\":{\"236\":1,\"239\":2}}],[\"transformedposition\",{\"1\":{\"236\":1}}],[\"transposedmatrix\",{\"1\":{\"196\":1}}],[\"transpose\",{\"1\":{\"196\":3}}],[\"transparent\",{\"0\":{\"151\":1},\"1\":{\"151\":1}}],[\"translate\",{\"1\":{\"196\":3,\"215\":2}}],[\"transitionto\",{\"0\":{\"649\":1},\"1\":{\"642\":1,\"646\":3,\"647\":2,\"649\":2}}],[\"transitions\",{\"1\":{\"597\":1}}],[\"transition\",{\"0\":{\"137\":1},\"1\":{\"280\":5,\"283\":3,\"575\":2,\"588\":2,\"590\":1,\"651\":1,\"655\":1,\"656\":1}}],[\"try\",{\"1\":{\"274\":2,\"280\":1,\"281\":2,\"282\":1,\"283\":3,\"294\":1,\"483\":1,\"521\":1,\"565\":1,\"566\":1,\"567\":1,\"583\":1,\"646\":2,\"649\":1,\"651\":1,\"653\":1,\"655\":1,\"670\":2}}],[\"tr\",{\"1\":{\"224\":3}}],[\"truncv\",{\"1\":{\"195\":1}}],[\"truncation\",{\"1\":{\"206\":3,\"243\":1}}],[\"trunca\",{\"1\":{\"195\":1}}],[\"trunc\",{\"1\":{\"195\":4}}],[\"true\",{\"1\":{\"1\":2,\"8\":2,\"102\":1,\"103\":2,\"104\":2,\"121\":2,\"141\":2,\"193\":3,\"230\":2,\"231\":2,\"240\":1,\"260\":1,\"264\":1,\"265\":7,\"266\":2,\"268\":1,\"269\":3,\"271\":1,\"274\":5,\"280\":2,\"283\":2,\"287\":2,\"289\":2,\"294\":1,\"299\":1,\"300\":1,\"304\":2,\"307\":1,\"310\":1,\"311\":2,\"312\":1,\"317\":1,\"452\":1,\"521\":3,\"534\":5,\"544\":3,\"550\":2,\"551\":1,\"554\":1,\"555\":7,\"557\":4,\"558\":1,\"559\":2,\"563\":2,\"565\":2,\"566\":1,\"567\":2,\"568\":3,\"572\":1,\"573\":2,\"575\":1,\"582\":2,\"584\":1,\"588\":4,\"589\":1,\"591\":2,\"596\":1,\"603\":1,\"609\":3,\"613\":1,\"614\":1,\"615\":2,\"627\":1,\"631\":1,\"635\":1,\"641\":1,\"642\":1,\"646\":2,\"649\":3,\"651\":2,\"653\":1,\"654\":1,\"655\":2,\"656\":3,\"662\":1,\"663\":5,\"664\":2,\"667\":2,\"670\":5,\"688\":1,\"689\":1,\"718\":1,\"719\":4,\"720\":5,\"745\":1,\"746\":1,\"777\":1,\"780\":2,\"793\":1,\"794\":1}}],[\"terseroptions\",{\"1\":{\"720\":1}}],[\"terser\",{\"1\":{\"720\":1}}],[\"terserplugin\",{\"1\":{\"720\":2}}],[\"teleport\",{\"0\":{\"683\":1}}],[\"teardown\",{\"1\":{\"555\":1,\"565\":1,\"642\":1,\"670\":1}}],[\"technologies\",{\"1\":{\"517\":1}}],[\"texcolor\",{\"1\":{\"235\":4}}],[\"texcoord\",{\"1\":{\"199\":14,\"235\":12,\"239\":10}}],[\"tex\",{\"1\":{\"199\":12}}],[\"texelgrad\",{\"1\":{\"199\":1}}],[\"texel\",{\"1\":{\"199\":4}}],[\"texelfetchoffset\",{\"1\":{\"199\":7}}],[\"texelfetch\",{\"1\":{\"199\":7}}],[\"textend\",{\"1\":{\"606\":8}}],[\"textcontent\",{\"1\":{\"237\":2}}],[\"texturematrixtranspose\",{\"1\":{\"239\":1}}],[\"texturematrixinversetranspose\",{\"1\":{\"239\":3}}],[\"texturematrixinverse\",{\"1\":{\"239\":3}}],[\"texturematrix\",{\"1\":{\"239\":6}}],[\"texturecubearray\",{\"1\":{\"199\":3}}],[\"texturecube\",{\"1\":{\"199\":3}}],[\"texturecoord\",{\"1\":{\"199\":7}}],[\"texturecolor\",{\"1\":{\"199\":14}}],[\"texture3d\",{\"1\":{\"199\":3}}],[\"texture2darray\",{\"1\":{\"199\":3}}],[\"texture2d\",{\"1\":{\"199\":3,\"239\":1}}],[\"texture1darray\",{\"1\":{\"199\":3}}],[\"texture1d\",{\"1\":{\"199\":3}}],[\"texturesamples\",{\"1\":{\"199\":3}}],[\"texturesampler\",{\"1\":{\"199\":33}}],[\"texturesize\",{\"1\":{\"199\":8}}],[\"texturegradoffset\",{\"1\":{\"199\":4}}],[\"texturegrad\",{\"1\":{\"199\":7}}],[\"textureprojoffset\",{\"1\":{\"199\":7}}],[\"textureproj\",{\"1\":{\"199\":7}}],[\"textureoffset\",{\"1\":{\"199\":4}}],[\"texturelodoffset\",{\"1\":{\"199\":3}}],[\"texturelod\",{\"1\":{\"199\":7}}],[\"texture\",{\"1\":{\"199\":4,\"235\":6,\"239\":2}}],[\"textarea\",{\"1\":{\"186\":1,\"528\":1,\"606\":1,\"610\":2}}],[\"textnode\",{\"1\":{\"102\":2,\"103\":2,\"104\":2,\"568\":3}}],[\"text\",{\"1\":{\"102\":6,\"103\":6,\"104\":8,\"134\":1,\"141\":1,\"175\":2,\"327\":3,\"528\":1,\"590\":2,\"594\":1,\"596\":6,\"604\":2,\"606\":10,\"607\":1,\"610\":22,\"611\":8,\"614\":1,\"795\":1}}],[\"test用来编写\",{\"1\":{\"517\":1}}],[\"testalias\",{\"1\":{\"517\":1}}],[\"testaddtow\",{\"1\":{\"483\":1}}],[\"testing\",{\"1\":{\"482\":1}}],[\"tests\",{\"1\":{\"277\":3}}],[\"testvec\",{\"1\":{\"231\":1}}],[\"test2\",{\"1\":{\"127\":1}}],[\"test1\",{\"1\":{\"126\":1,\"127\":2}}],[\"test\",{\"1\":{\"89\":1,\"102\":1,\"103\":1,\"104\":1,\"126\":4,\"517\":5,\"534\":7,\"573\":1,\"606\":6,\"610\":1,\"611\":1,\"635\":1,\"670\":1,\"689\":4,\"699\":1,\"703\":1,\"704\":1,\"705\":1,\"718\":7,\"720\":2,\"723\":1,\"724\":1,\"726\":1,\"729\":1,\"730\":1,\"745\":1,\"746\":1,\"755\":6}}],[\"templateloader\",{\"1\":{\"637\":1,\"638\":2}}],[\"templateloaderpath\",{\"0\":{\"627\":1},\"1\":{\"626\":1}}],[\"templaterequest\",{\"1\":{\"625\":2,\"635\":1}}],[\"templateimport\",{\"1\":{\"625\":2}}],[\"template>\",{\"1\":{\"534\":1,\"554\":1,\"615\":1,\"619\":2,\"635\":1,\"677\":1}}],[\"template\",{\"0\":{\"625\":1},\"1\":{\"528\":1,\"534\":1,\"601\":15,\"603\":27,\"604\":3,\"613\":2,\"615\":3,\"625\":3,\"626\":3,\"627\":3,\"635\":3,\"637\":2,\"638\":2,\"653\":1,\"718\":1,\"735\":1}}],[\"temp\",{\"1\":{\"53\":2,\"54\":3,\"58\":2}}],[\"though\",{\"1\":{\"626\":1}}],[\"thumbs\",{\"1\":{\"517\":1}}],[\"than\",{\"1\":{\"457\":1,\"585\":1}}],[\"that\",{\"1\":{\"139\":1,\"226\":1,\"547\":1,\"551\":1,\"558\":1,\"561\":1,\"575\":1,\"586\":1,\"588\":2,\"591\":1,\"614\":1,\"629\":1,\"631\":1,\"651\":1,\"654\":1,\"656\":1}}],[\"through\",{\"1\":{\"561\":1}}],[\"thrown\",{\"1\":{\"649\":1}}],[\"throw\",{\"1\":{\"79\":1,\"274\":3,\"278\":1,\"283\":1,\"319\":2,\"455\":1,\"521\":1,\"565\":1,\"649\":1,\"663\":1,\"670\":1}}],[\"three\",{\"0\":{\"679\":1},\"1\":{\"237\":3}}],[\"thndl\",{\"1\":{\"226\":1}}],[\"these\",{\"1\":{\"542\":1,\"585\":1}}],[\"then不会完全中断\",{\"1\":{\"568\":1}}],[\"thenalbe\",{\"1\":{\"282\":1}}],[\"thenable\",{\"1\":{\"278\":2,\"282\":5}}],[\"then\",{\"1\":{\"252\":2,\"253\":2,\"254\":3,\"256\":4,\"257\":1,\"258\":3,\"278\":2,\"281\":9,\"282\":14,\"283\":14,\"568\":1,\"645\":2,\"653\":4,\"656\":1,\"661\":1,\"784\":1}}],[\"theta+2\",{\"1\":{\"218\":1}}],[\"theta=theta0\",{\"1\":{\"218\":1}}],[\"theta0\",{\"1\":{\"218\":4}}],[\"theta\",{\"1\":{\"197\":1,\"218\":4}}],[\"the\",{\"1\":{\"141\":1,\"189\":1,\"208\":1,\"215\":7,\"216\":9,\"217\":5,\"218\":5,\"223\":1,\"225\":12,\"226\":3,\"434\":1,\"457\":1,\"464\":1,\"521\":2,\"534\":1,\"542\":3,\"543\":1,\"544\":1,\"547\":3,\"551\":1,\"554\":2,\"557\":2,\"558\":3,\"559\":3,\"565\":7,\"573\":1,\"575\":6,\"582\":2,\"583\":4,\"585\":1,\"586\":2,\"588\":2,\"590\":2,\"591\":5,\"592\":1,\"596\":4,\"610\":2,\"614\":2,\"626\":2,\"629\":1,\"631\":1,\"635\":3,\"642\":2,\"646\":3,\"649\":2,\"651\":3,\"653\":2,\"655\":1,\"656\":7,\"660\":2,\"663\":5,\"664\":1,\"670\":3,\"803\":1}}],[\"theme\",{\"1\":{\"141\":3}}],[\"them\",{\"1\":{\"141\":1,\"542\":1,\"561\":1}}],[\"there\",{\"1\":{\"139\":1,\"455\":1,\"546\":1,\"547\":1,\"575\":1,\"583\":1,\"609\":1}}],[\"they\",{\"1\":{\"139\":1,\"141\":1,\"521\":1,\"565\":1,\"670\":1}}],[\"thisarg\",{\"1\":{\"313\":3,\"319\":1}}],[\"thisargument\",{\"1\":{\"313\":3}}],[\"thisvalequalsproxy\",{\"1\":{\"299\":3}}],[\"thisval\",{\"1\":{\"296\":2}}],[\"this\",{\"0\":{\"129\":1,\"299\":1},\"1\":{\"76\":1,\"77\":2,\"80\":1,\"102\":2,\"103\":2,\"104\":2,\"129\":6,\"160\":1,\"264\":9,\"266\":8,\"273\":2,\"280\":3,\"281\":7,\"282\":1,\"283\":10,\"299\":4,\"300\":2,\"319\":1,\"320\":1,\"327\":3,\"434\":1,\"455\":2,\"519\":3,\"521\":24,\"524\":1,\"532\":2,\"534\":1,\"540\":1,\"542\":1,\"543\":3,\"544\":4,\"546\":1,\"550\":2,\"552\":1,\"554\":3,\"555\":4,\"556\":5,\"557\":6,\"558\":2,\"559\":17,\"561\":8,\"562\":2,\"564\":9,\"565\":94,\"566\":15,\"573\":22,\"581\":2,\"582\":1,\"583\":2,\"584\":1,\"586\":1,\"588\":2,\"590\":1,\"596\":1,\"601\":5,\"602\":1,\"603\":5,\"613\":1,\"615\":2,\"631\":5,\"635\":4,\"637\":2,\"642\":35,\"643\":18,\"646\":17,\"647\":6,\"649\":17,\"650\":1,\"651\":20,\"654\":1,\"655\":11,\"656\":4,\"659\":4,\"660\":21,\"661\":6,\"662\":8,\"663\":20,\"664\":7,\"665\":17,\"667\":1,\"670\":34,\"671\":4,\"727\":3,\"728\":1,\"729\":2,\"730\":2,\"739\":2,\"740\":2,\"778\":5,\"779\":4,\"780\":4,\"781\":4,\"782\":4,\"783\":4,\"784\":4}}],[\"type下所有action处理函数的集合\",{\"1\":{\"661\":1}}],[\"typescript\",{\"1\":{\"696\":1}}],[\"types\",{\"1\":{\"542\":1}}],[\"typeerror\",{\"1\":{\"282\":3,\"283\":1,\"287\":2,\"290\":2,\"291\":1,\"300\":2,\"303\":1,\"455\":1}}],[\"type>\",{\"1\":{\"199\":3}}],[\"type=script\",{\"1\":{\"635\":2,\"637\":4}}],[\"type=style\",{\"1\":{\"629\":2,\"635\":1,\"637\":2}}],[\"type=template\",{\"1\":{\"625\":1,\"635\":4,\"637\":3,\"638\":4}}],[\"type=template$\",{\"1\":{\"625\":1}}],[\"type=\",{\"1\":{\"141\":2,\"528\":1,\"607\":1,\"638\":1,\"795\":1}}],[\"type\",{\"0\":{\"184\":1,\"187\":1},\"1\":{\"70\":3,\"77\":1,\"102\":4,\"103\":4,\"104\":5,\"134\":2,\"183\":3,\"237\":2,\"238\":4,\"241\":2,\"464\":3,\"534\":2,\"542\":2,\"547\":3,\"561\":1,\"604\":1,\"609\":1,\"610\":2,\"613\":5,\"614\":2,\"626\":1,\"630\":1,\"635\":7,\"637\":2,\"638\":1,\"656\":2,\"660\":4,\"661\":8,\"662\":9,\"663\":11,\"689\":9,\"690\":30,\"718\":2,\"719\":1,\"730\":3}}],[\"typeof\",{\"1\":{\"58\":2,\"264\":1,\"283\":1,\"318\":1,\"319\":1,\"546\":1,\"547\":2,\"552\":1,\"555\":1,\"567\":1,\"568\":3,\"573\":1,\"584\":1,\"585\":5,\"601\":1,\"603\":1,\"644\":2,\"650\":2,\"651\":5,\"653\":4,\"654\":1,\"655\":5,\"659\":1,\"660\":1,\"663\":1,\"664\":1,\"669\":1,\"738\":1}}],[\"tip\",{\"1\":{\"603\":2}}],[\"tips\",{\"1\":{\"603\":4}}],[\"title\",{\"1\":{\"190\":1,\"718\":2}}],[\"tied\",{\"1\":{\"140\":1}}],[\"tile\",{\"1\":{\"97\":2,\"104\":1,\"105\":2,\"106\":1,\"200\":1,\"206\":2,\"243\":1}}],[\"times\",{\"1\":{\"670\":1}}],[\"timerfunc\",{\"0\":{\"568\":1},\"1\":{\"567\":1,\"568\":6}}],[\"timer2\",{\"1\":{\"256\":3,\"258\":3}}],[\"timer1=>timer2=>promise1=>promise2\",{\"1\":{\"258\":1}}],[\"timer1=>promise1=>timer2=>promise2\",{\"1\":{\"258\":1}}],[\"timer1\",{\"1\":{\"256\":3,\"257\":1,\"258\":3}}],[\"timers\",{\"1\":{\"256\":4,\"258\":1}}],[\"timer\",{\"1\":{\"256\":10,\"257\":2,\"258\":3}}],[\"time\",{\"1\":{\"190\":3,\"209\":1,\"210\":2,\"211\":1,\"215\":3,\"216\":2,\"217\":2,\"224\":1,\"225\":1,\"226\":2,\"227\":1,\"237\":2,\"281\":2,\"283\":2,\"403\":1,\"434\":1,\"646\":1}}],[\"time编译器\",{\"1\":{\"72\":1,\"73\":1}}],[\"timeout\",{\"1\":{\"66\":1,\"257\":4}}],[\"time底下的\",{\"1\":{\"65\":1}}],[\"tiao\",{\"1\":{\"23\":1}}],[\"tolocaletimestring\",{\"1\":{\"793\":1,\"795\":1}}],[\"tolowercase\",{\"1\":{\"608\":1}}],[\"to后的路径是相对于打包后的dist目录\",{\"1\":{\"720\":1}}],[\"toggled\",{\"1\":{\"656\":1}}],[\"toggleobserving\",{\"1\":{\"551\":2}}],[\"touch\",{\"1\":{\"521\":1,\"565\":1,\"670\":1}}],[\"tocenter\",{\"1\":{\"225\":2}}],[\"tostring\",{\"1\":{\"102\":1,\"103\":1,\"104\":1,\"264\":1,\"283\":3,\"565\":1,\"568\":1}}],[\"toppromise\",{\"0\":{\"784\":1}}],[\"top\",{\"1\":{\"102\":8,\"103\":8,\"104\":11,\"224\":1}}],[\"tokenvalue\",{\"1\":{\"611\":5}}],[\"tokens\",{\"1\":{\"610\":3,\"611\":7,\"689\":6,\"690\":6}}],[\"tokenstack\",{\"1\":{\"102\":6,\"103\":6,\"104\":6}}],[\"token\",{\"1\":{\"98\":6,\"134\":1,\"611\":2,\"689\":9}}],[\"to\",{\"1\":{\"77\":1,\"139\":1,\"140\":1,\"141\":4,\"191\":1,\"206\":3,\"215\":1,\"216\":2,\"218\":2,\"225\":3,\"226\":3,\"243\":1,\"264\":6,\"403\":1,\"464\":1,\"521\":1,\"542\":2,\"544\":2,\"546\":1,\"547\":1,\"551\":1,\"554\":1,\"558\":1,\"565\":1,\"568\":1,\"575\":3,\"582\":1,\"583\":4,\"584\":4,\"585\":1,\"586\":1,\"588\":2,\"592\":1,\"594\":1,\"596\":1,\"597\":1,\"601\":1,\"603\":1,\"610\":1,\"613\":1,\"614\":2,\"626\":2,\"629\":1,\"635\":4,\"642\":1,\"644\":1,\"646\":2,\"648\":10,\"651\":15,\"652\":1,\"653\":3,\"655\":14,\"656\":3,\"662\":1,\"663\":2,\"720\":1,\"803\":1}}],[\"total\",{\"1\":{\"43\":4}}],[\"toi\",{\"1\":{\"18\":2}}],[\"tb\",{\"1\":{\"40\":1,\"149\":1,\"580\":1}}],[\"tappromise\",{\"1\":{\"784\":2}}],[\"tapable\",{\"0\":{\"775\":1},\"1\":{\"776\":3,\"778\":1,\"779\":1,\"780\":1,\"781\":1,\"782\":1,\"783\":1,\"784\":1},\"2\":{\"786\":1}}],[\"tapasync\",{\"1\":{\"740\":1,\"782\":2,\"783\":2}}],[\"tap\",{\"1\":{\"739\":1,\"778\":2,\"779\":2,\"780\":2,\"781\":2}}],[\"tail\",{\"1\":{\"261\":2}}],[\"tab\",{\"1\":{\"246\":2,\"327\":1}}],[\"table表格\",{\"1\":{\"185\":1}}],[\"table\",{\"1\":{\"26\":3,\"174\":2,\"184\":2}}],[\"tau\",{\"1\":{\"225\":3}}],[\"tangent\",{\"1\":{\"198\":1}}],[\"tanhx\",{\"1\":{\"198\":1}}],[\"tanh\",{\"1\":{\"198\":3}}],[\"tan\",{\"1\":{\"198\":3,\"233\":2}}],[\"tagre\",{\"1\":{\"611\":7}}],[\"tags\",{\"1\":{\"606\":1,\"629\":1}}],[\"tag是component类型\",{\"1\":{\"580\":2}}],[\"tag是真实节点\",{\"1\":{\"580\":1}}],[\"tag\",{\"1\":{\"139\":1,\"140\":1,\"534\":2,\"573\":6,\"584\":15,\"585\":5,\"587\":1,\"588\":1,\"589\":2,\"590\":5,\"604\":2,\"606\":2,\"608\":1,\"609\":6,\"610\":2,\"611\":1,\"613\":5,\"615\":12,\"635\":2}}],[\"tagname\",{\"1\":{\"102\":6,\"103\":6,\"104\":6,\"606\":2,\"607\":1,\"608\":12}}],[\"targets\",{\"1\":{\"697\":1}}],[\"targetstack\",{\"1\":{\"563\":5}}],[\"target=\",{\"1\":{\"635\":26}}],[\"targetobject\",{\"1\":{\"317\":2}}],[\"target函数调用时传入的实参列表\",{\"1\":{\"313\":1}}],[\"target\",{\"1\":{\"8\":12,\"287\":14,\"288\":5,\"289\":16,\"290\":3,\"291\":4,\"297\":2,\"299\":3,\"300\":3,\"302\":6,\"303\":5,\"304\":5,\"305\":3,\"306\":10,\"307\":3,\"308\":5,\"309\":5,\"310\":5,\"311\":5,\"312\":3,\"313\":6,\"314\":5,\"316\":2,\"317\":2,\"318\":3,\"319\":2,\"320\":2,\"521\":4,\"523\":2,\"528\":3,\"550\":2,\"554\":4,\"556\":2,\"557\":1,\"563\":10,\"564\":4,\"566\":1,\"671\":1,\"719\":1}}],[\"t\",{\"1\":{\"18\":9,\"33\":1,\"197\":1,\"206\":18,\"218\":5,\"243\":6,\"534\":1,\"547\":1,\"575\":2,\"588\":1,\"629\":1,\"642\":1,\"653\":1,\"656\":1}}],[\"nginx\",{\"0\":{\"815\":1}}],[\"npx\",{\"1\":{\"702\":2,\"714\":1,\"754\":1}}],[\"npm\",{\"1\":{\"277\":1,\"702\":2,\"729\":1,\"730\":1,\"751\":1,\"752\":1,\"754\":1,\"755\":1}}],[\"n`\",{\"1\":{\"635\":1}}],[\"ncname\",{\"1\":{\"607\":3}}],[\"ns\",{\"1\":{\"584\":5,\"590\":2,\"609\":7}}],[\"ntimes\",{\"1\":{\"270\":2}}],[\"n11\",{\"1\":{\"206\":6,\"243\":2}}],[\"n10\",{\"1\":{\"206\":6,\"243\":2}}],[\"n01\",{\"1\":{\"206\":6,\"243\":2}}],[\"n00\",{\"1\":{\"206\":6,\"243\":2}}],[\"nref\",{\"1\":{\"197\":3}}],[\"navigationguard\",{\"1\":{\"651\":1,\"654\":3,\"655\":1}}],[\"navigationguard>\",{\"1\":{\"651\":1,\"655\":1}}],[\"navigation\",{\"1\":{\"651\":3,\"653\":1,\"655\":1}}],[\"navigationfailuretype\",{\"1\":{\"649\":1}}],[\"nativeon\",{\"1\":{\"585\":1}}],[\"nativewatch\",{\"1\":{\"549\":1,\"668\":1}}],[\"nativesupport\",{\"1\":{\"517\":2}}],[\"native\",{\"1\":{\"263\":5,\"265\":1,\"268\":1,\"585\":1}}],[\"nan\",{\"1\":{\"195\":3}}],[\"naming\",{\"1\":{\"139\":1,\"140\":1,\"141\":1}}],[\"named\",{\"1\":{\"656\":1}}],[\"namemap\",{\"1\":{\"644\":12,\"650\":3}}],[\"name=\",{\"1\":{\"517\":1}}],[\"name=<script>alert\",{\"1\":{\"473\":1}}],[\"namespacing\",{\"1\":{\"139\":1}}],[\"namespacedtype\",{\"1\":{\"663\":4}}],[\"namespaced\",{\"1\":{\"584\":1,\"663\":2}}],[\"namespace\",{\"1\":{\"64\":1,\"74\":2,\"82\":1,\"584\":1,\"609\":1,\"663\":10,\"664\":8}}],[\"names\",{\"1\":{\"139\":1,\"140\":1,\"141\":1,\"759\":1}}],[\"namechanged\",{\"1\":{\"77\":3}}],[\"name\",{\"1\":{\"77\":21,\"78\":1,\"79\":8,\"89\":1,\"102\":2,\"103\":2,\"104\":2,\"139\":3,\"140\":4,\"141\":3,\"238\":4,\"316\":3,\"320\":3,\"528\":1,\"532\":1,\"534\":49,\"544\":2,\"546\":2,\"547\":10,\"572\":1,\"573\":19,\"584\":1,\"585\":4,\"606\":2,\"608\":1,\"610\":3,\"615\":1,\"635\":2,\"642\":4,\"644\":7,\"649\":1,\"650\":8,\"651\":1,\"654\":2,\"655\":1,\"656\":17,\"667\":2,\"690\":12,\"718\":3,\"720\":3,\"729\":1,\"730\":2,\"739\":1,\"740\":1,\"778\":6,\"779\":5,\"780\":5,\"781\":5,\"782\":5,\"783\":5,\"784\":5}}],[\"nosources\",{\"0\":{\"768\":1},\"1\":{\"769\":2}}],[\"nodir\",{\"1\":{\"720\":1}}],[\"nodeenvironmentplugin\",{\"1\":{\"738\":1}}],[\"nodepolyfillplugin\",{\"1\":{\"718\":2}}],[\"nodes\",{\"1\":{\"613\":1}}],[\"nodetype\",{\"1\":{\"588\":2,\"601\":1,\"603\":1}}],[\"nodeops\",{\"1\":{\"587\":1,\"588\":2,\"590\":4,\"593\":3,\"594\":2,\"595\":1,\"596\":3,\"597\":4}}],[\"nodelist\",{\"1\":{\"263\":1}}],[\"node10\",{\"0\":{\"255\":1}}],[\"nodejs中的测试\",{\"0\":{\"481\":1}}],[\"nodejs中的日志\",{\"0\":{\"453\":1}}],[\"nodejs安全风险\",{\"0\":{\"468\":1}}],[\"nodejs日志的原理\",{\"1\":{\"454\":1}}],[\"nodejs的apm系统\",{\"0\":{\"433\":1}}],[\"nodejs\",{\"0\":{\"450\":1,\"816\":1},\"1\":{\"250\":1,\"787\":1},\"2\":{\"467\":1,\"480\":1}}],[\"node\",{\"1\":{\"139\":1,\"140\":1,\"141\":1,\"255\":5,\"256\":5,\"258\":2,\"543\":1,\"575\":1,\"583\":2,\"585\":1,\"588\":2,\"590\":3,\"596\":1,\"610\":2,\"613\":25,\"614\":19,\"635\":1,\"637\":6,\"650\":1,\"651\":1,\"653\":1,\"656\":1,\"699\":1,\"709\":1,\"713\":9,\"718\":6,\"720\":1,\"724\":1,\"746\":1,\"771\":2,\"772\":1}}],[\"now\",{\"1\":{\"590\":1,\"626\":1,\"654\":1}}],[\"norecurse\",{\"1\":{\"557\":1,\"565\":1}}],[\"norm\",{\"1\":{\"197\":1,\"206\":15,\"239\":2,\"243\":5}}],[\"normal函数\",{\"1\":{\"748\":1}}],[\"normalmoduleloader\",{\"1\":{\"735\":1}}],[\"normalmatrix\",{\"1\":{\"239\":3}}],[\"normalloader\",{\"1\":{\"729\":1,\"730\":1}}],[\"normalizationtype\",{\"1\":{\"584\":8}}],[\"normalizemap\",{\"1\":{\"664\":2}}],[\"normalizenamespace\",{\"1\":{\"664\":3}}],[\"normalizelocation\",{\"1\":{\"650\":1}}],[\"normalizepath\",{\"1\":{\"644\":1}}],[\"normalizeprops\",{\"1\":{\"547\":3}}],[\"normalizer\",{\"1\":{\"635\":2,\"638\":1}}],[\"normalizes\",{\"1\":{\"584\":1}}],[\"normalizescopedslots\",{\"1\":{\"583\":1}}],[\"normalizechildren\",{\"1\":{\"584\":1}}],[\"normalizeinject\",{\"1\":{\"547\":1}}],[\"normalizedpath\",{\"1\":{\"644\":3}}],[\"normalizedirectives\",{\"1\":{\"535\":2,\"547\":1}}],[\"normalizedvector\",{\"1\":{\"197\":1}}],[\"normalize\",{\"1\":{\"197\":4,\"218\":3,\"239\":4,\"584\":3,\"635\":1,\"709\":1}}],[\"normal\",{\"1\":{\"197\":8,\"239\":3,\"534\":1,\"726\":3,\"747\":1,\"748\":3}}],[\"normal等同于zoom\",{\"1\":{\"146\":1}}],[\"normal关键字\",{\"1\":{\"146\":1}}],[\"noopener\",{\"1\":{\"635\":26}}],[\"noop\",{\"1\":{\"521\":5,\"540\":1,\"550\":2,\"552\":1,\"554\":5,\"559\":1,\"565\":1,\"566\":1,\"568\":1,\"582\":1,\"587\":1,\"670\":1}}],[\"nonnullable<t>\",{\"1\":{\"588\":1}}],[\"non\",{\"1\":{\"287\":2,\"319\":2}}],[\"none\",{\"1\":{\"102\":1,\"103\":1,\"104\":1,\"174\":1,\"544\":1,\"635\":2,\"760\":1,\"795\":1}}],[\"noise\",{\"1\":{\"200\":1,\"206\":4,\"243\":2}}],[\"notifier\",{\"1\":{\"718\":3}}],[\"notify\",{\"1\":{\"281\":4,\"283\":3,\"524\":1,\"556\":2,\"557\":3,\"562\":2,\"563\":1,\"564\":1,\"671\":1,\"718\":1}}],[\"notifyall\",{\"1\":{\"280\":1,\"281\":3,\"283\":4}}],[\"note\",{\"1\":{\"319\":1,\"542\":1,\"596\":1}}],[\"nothing\",{\"1\":{\"266\":1}}],[\"not\",{\"1\":{\"141\":2,\"282\":1,\"283\":1,\"300\":1,\"535\":1,\"542\":1,\"573\":2,\"575\":3,\"585\":1,\"588\":3,\"596\":1,\"613\":5,\"614\":1,\"642\":1,\"646\":1,\"649\":1,\"650\":1,\"653\":1,\"656\":1,\"663\":1,\"712\":1,\"713\":2,\"714\":1,\"715\":2,\"806\":1}}],[\"no\",{\"1\":{\"139\":3,\"140\":3,\"535\":1,\"561\":1,\"563\":1,\"583\":1,\"606\":2,\"612\":1,\"613\":1,\"635\":1,\"642\":1,\"650\":1,\"656\":2,\"709\":1}}],[\"nlog\",{\"1\":{\"57\":2}}],[\"nlog2\",{\"1\":{\"56\":2}}],[\"nlogn\",{\"1\":{\"56\":1,\"57\":1}}],[\"n2\",{\"1\":{\"49\":1}}],[\"nexport\",{\"1\":{\"638\":1}}],[\"next=\",{\"1\":{\"652\":1}}],[\"nextsibling\",{\"1\":{\"588\":1,\"597\":1}}],[\"next++\",{\"1\":{\"264\":1}}],[\"nexttick的callbacks数组中\",{\"1\":{\"558\":1}}],[\"nexttick=>nexttick=>nexttick=>nexttick=>timer1=>promise1\",{\"1\":{\"257\":1}}],[\"nexttick\",{\"0\":{\"567\":1},\"1\":{\"250\":1,\"256\":1,\"257\":10,\"542\":2,\"543\":1,\"556\":1,\"557\":2,\"567\":2,\"568\":1,\"663\":1}}],[\"next\",{\"1\":{\"76\":1,\"260\":4,\"261\":1,\"264\":3,\"265\":14,\"266\":2,\"268\":7,\"269\":7,\"270\":1,\"271\":14,\"274\":6,\"557\":1,\"573\":1,\"606\":4,\"648\":9,\"651\":5,\"652\":6,\"653\":4,\"655\":6,\"793\":1}}],[\"necessary\",{\"1\":{\"629\":1}}],[\"nesting\",{\"1\":{\"588\":1}}],[\"nestedinstance\",{\"1\":{\"77\":2}}],[\"nestedmethod\",{\"1\":{\"77\":2}}],[\"nestedclass\",{\"1\":{\"77\":4}}],[\"nested\",{\"1\":{\"77\":1,\"139\":1,\"583\":1,\"590\":2,\"663\":1,\"670\":1}}],[\"needmap\",{\"1\":{\"635\":1}}],[\"needsexplicitinjection\",{\"1\":{\"629\":1}}],[\"needshotreload\",{\"1\":{\"629\":2,\"635\":1}}],[\"needs\",{\"1\":{\"544\":1,\"585\":1,\"629\":1}}],[\"need\",{\"1\":{\"521\":1,\"546\":1,\"547\":1,\"551\":1,\"554\":1,\"583\":1,\"596\":1,\"642\":1}}],[\"near\",{\"1\":{\"233\":5}}],[\"network\",{\"0\":{\"814\":1},\"1\":{\"102\":4,\"103\":4,\"104\":4,\"434\":1},\"2\":{\"351\":1,\"383\":1,\"413\":1,\"429\":1}}],[\"net框架中\",{\"1\":{\"72\":1}}],[\"net框架的核心组件\",{\"1\":{\"71\":1}}],[\"net框架开发的一种语言无关的\",{\"1\":{\"70\":1}}],[\"net系统包括的语言有c\",{\"1\":{\"70\":1}}],[\"net中描述数据的数据\",{\"1\":{\"70\":1}}],[\"net中数据的类型\",{\"1\":{\"70\":1}}],[\"net中所有的编程语言\",{\"1\":{\"65\":1}}],[\"net网站\",{\"1\":{\"65\":1}}],[\"net有很多种语言组成\",{\"1\":{\"65\":1}}],[\"net不是一种编程语言\",{\"1\":{\"65\":1}}],[\"net全称\",{\"1\":{\"65\":1}}],[\"net来开发\",{\"1\":{\"65\":1}}],[\"net可以用c\",{\"1\":{\"65\":1}}],[\"net就是属于webform\",{\"1\":{\"65\":1}}],[\"net等编写的程序必须在\",{\"1\":{\"65\":1}}],[\"net只是一个框架\",{\"1\":{\"65\":1}}],[\"net\",{\"1\":{\"65\":8,\"87\":1,\"190\":1,\"517\":2,\"690\":2},\"2\":{\"90\":1}}],[\"net是一种用来快速创建动态web网站的技术\",{\"1\":{\"65\":1}}],[\"net和c\",{\"0\":{\"65\":1}}],[\"newmodule\",{\"1\":{\"663\":3}}],[\"news\",{\"1\":{\"635\":2}}],[\"newstartvnode\",{\"1\":{\"597\":15}}],[\"newstartidx\",{\"1\":{\"597\":9}}],[\"newendvnode\",{\"1\":{\"597\":7}}],[\"newendidx\",{\"1\":{\"597\":11}}],[\"newch\",{\"1\":{\"597\":19}}],[\"newchildren\",{\"1\":{\"597\":6}}],[\"newly\",{\"1\":{\"575\":1}}],[\"newval\",{\"1\":{\"559\":2,\"563\":7}}],[\"newvalue\",{\"1\":{\"320\":2}}],[\"newdepids\",{\"1\":{\"565\":8}}],[\"newdeps\",{\"1\":{\"556\":1,\"565\":6}}],[\"newdirs\",{\"1\":{\"535\":4}}],[\"newdata\",{\"1\":{\"455\":1}}],[\"newuser\",{\"1\":{\"320\":3}}],[\"newtarget\",{\"1\":{\"314\":3,\"319\":1}}],[\"newname\",{\"1\":{\"77\":3,\"127\":2,\"667\":2}}],[\"new\",{\"1\":{\"18\":2,\"60\":1,\"61\":1,\"75\":1,\"77\":6,\"79\":2,\"80\":2,\"82\":1,\"84\":1,\"89\":2,\"102\":1,\"103\":1,\"104\":1,\"237\":3,\"252\":1,\"253\":2,\"263\":5,\"264\":1,\"266\":2,\"273\":1,\"281\":3,\"282\":2,\"283\":9,\"287\":2,\"288\":1,\"289\":5,\"290\":1,\"295\":1,\"297\":2,\"299\":6,\"300\":2,\"302\":1,\"303\":1,\"304\":1,\"305\":1,\"306\":1,\"307\":1,\"308\":1,\"309\":1,\"310\":1,\"311\":1,\"312\":1,\"313\":1,\"314\":4,\"316\":1,\"317\":1,\"318\":1,\"319\":4,\"320\":6,\"455\":2,\"519\":1,\"521\":1,\"535\":1,\"538\":1,\"544\":1,\"546\":1,\"547\":1,\"554\":1,\"555\":1,\"556\":2,\"559\":1,\"560\":1,\"561\":1,\"563\":2,\"564\":1,\"565\":3,\"566\":2,\"567\":1,\"568\":1,\"572\":1,\"582\":1,\"584\":2,\"585\":1,\"588\":1,\"590\":1,\"596\":1,\"597\":2,\"601\":1,\"602\":1,\"607\":1,\"608\":1,\"611\":1,\"615\":1,\"629\":1,\"641\":2,\"642\":2,\"643\":4,\"648\":1,\"653\":3,\"658\":2,\"660\":3,\"661\":1,\"663\":5,\"665\":1,\"667\":2,\"670\":2,\"671\":1,\"718\":5,\"720\":6,\"738\":3,\"751\":1,\"752\":1,\"778\":2,\"779\":2,\"780\":2,\"781\":2,\"782\":2,\"783\":2,\"784\":4,\"793\":2,\"794\":1,\"795\":1,\"797\":2}}],[\"nei\",{\"1\":{\"18\":1}}],[\"n\",{\"1\":{\"7\":1,\"8\":1,\"9\":1,\"18\":6,\"33\":6,\"49\":6,\"56\":2,\"57\":3,\"59\":3,\"102\":1,\"103\":1,\"104\":2,\"197\":10,\"206\":15,\"226\":2,\"238\":1,\"243\":5,\"270\":2,\"271\":2,\"455\":2,\"464\":1,\"606\":3,\"611\":2,\"625\":3,\"635\":63,\"645\":2}}],[\"nuget安装\",{\"1\":{\"89\":1}}],[\"nuget安装microsoft\",{\"1\":{\"89\":1}}],[\"numcpus\",{\"1\":{\"445\":1}}],[\"num2\",{\"1\":{\"195\":6,\"230\":4}}],[\"num1\",{\"1\":{\"195\":8,\"230\":4}}],[\"num\",{\"1\":{\"195\":7,\"263\":2,\"584\":3}}],[\"nums2\",{\"1\":{\"9\":2}}],[\"nums1\",{\"1\":{\"9\":2}}],[\"nums\",{\"1\":{\"8\":13,\"23\":5,\"319\":3}}],[\"numberdate\",{\"1\":{\"300\":1}}],[\"number\",{\"0\":{\"164\":1},\"1\":{\"1\":4,\"8\":7,\"58\":2,\"165\":1,\"226\":1,\"264\":1,\"318\":1,\"319\":3,\"464\":1,\"561\":2,\"564\":1,\"565\":1,\"573\":1,\"584\":1,\"603\":2,\"604\":2,\"610\":2,\"659\":1,\"730\":1,\"801\":2}}],[\"null\",{\"1\":{\"7\":1,\"62\":2,\"281\":1,\"283\":1,\"310\":2,\"521\":3,\"534\":3,\"542\":2,\"547\":3,\"548\":1,\"554\":1,\"557\":1,\"558\":1,\"563\":5,\"564\":1,\"565\":3,\"566\":3,\"573\":4,\"582\":2,\"583\":1,\"586\":1,\"588\":6,\"592\":1,\"596\":1,\"597\":1,\"603\":2,\"606\":4,\"612\":1,\"613\":1,\"615\":1,\"627\":1,\"631\":1,\"635\":2,\"636\":1,\"638\":2,\"642\":2,\"643\":1,\"644\":3,\"650\":2,\"651\":2,\"653\":1,\"655\":1,\"656\":1,\"660\":5,\"663\":3,\"670\":1,\"727\":2,\"728\":1,\"729\":1,\"730\":1}}],[\">0\",{\"1\":{\"715\":1}}],[\">awesome\",{\"1\":{\"635\":2}}],[\">twitter<\",{\"1\":{\"635\":2}}],[\">community\",{\"1\":{\"635\":2}}],[\">core\",{\"1\":{\"635\":2}}],[\">forum<\",{\"1\":{\"635\":2}}],[\">eslint<\",{\"1\":{\"635\":2}}],[\">babel<\",{\"1\":{\"635\":2}}],[\">vuex<\",{\"1\":{\"635\":2}}],[\">vue\",{\"1\":{\"635\":8}}],[\">>>\",{\"1\":{\"622\":4}}],[\">hi<\",{\"1\":{\"619\":1}}],[\">hsl和hsla\",{\"1\":{\"149\":1}}],[\">子destroyed\",{\"1\":{\"578\":1}}],[\">子updated\",{\"1\":{\"578\":1}}],[\">子mounted\",{\"1\":{\"578\":1}}],[\">子beforedestroy\",{\"1\":{\"578\":1}}],[\">子beforeupdate\",{\"1\":{\"578\":1}}],[\">子beforemount\",{\"1\":{\"578\":1}}],[\">子beforecreate\",{\"1\":{\"578\":1}}],[\">子created\",{\"1\":{\"578\":1}}],[\">父destroyed\",{\"1\":{\"578\":1}}],[\">父updated\",{\"1\":{\"578\":1}}],[\">父mounte\",{\"1\":{\"578\":1}}],[\">父beforemount\",{\"1\":{\"578\":1}}],[\">父created\",{\"1\":{\"578\":1}}],[\">news<\",{\"1\":{\"635\":2}}],[\">new\",{\"1\":{\"560\":1}}],[\">observe\",{\"1\":{\"560\":1}}],[\">闲置阶段\",{\"1\":{\"256\":1}}],[\">i\",{\"1\":{\"256\":1}}],[\">定时器检测阶段\",{\"1\":{\"256\":1}}],[\">关闭事件回调阶段\",{\"1\":{\"256\":1}}],[\">检查阶段\",{\"1\":{\"256\":1}}],[\">轮询阶段\",{\"1\":{\"256\":2}}],[\">rgb和rgba\",{\"1\":{\"149\":1}}],[\">原始color值\",{\"1\":{\"149\":1}}],[\">透明\",{\"1\":{\"149\":1}}],[\">色彩关键字\",{\"1\":{\"149\":1}}],[\"><div><\",{\"1\":{\"607\":2}}],[\"><\",{\"1\":{\"140\":1,\"528\":1,\"571\":4,\"572\":2,\"607\":5,\"608\":1}}],[\">1\",{\"1\":{\"18\":1,\"714\":1}}],[\">=\",{\"1\":{\"8\":2,\"55\":1,\"56\":1,\"218\":1,\"221\":1,\"606\":3,\"647\":1,\"655\":1,\"659\":1,\"713\":2}}],[\">\",{\"1\":{\"7\":1,\"8\":2,\"18\":2,\"40\":1,\"53\":1,\"55\":1,\"56\":1,\"57\":2,\"59\":3,\"60\":1,\"61\":1,\"79\":1,\"139\":1,\"140\":1,\"141\":6,\"218\":1,\"253\":12,\"271\":1,\"325\":4,\"517\":2,\"528\":2,\"529\":1,\"532\":1,\"534\":2,\"557\":2,\"567\":4,\"571\":8,\"572\":1,\"573\":3,\"580\":15,\"597\":2,\"603\":2,\"606\":5,\"607\":7,\"611\":1,\"615\":2,\"630\":1,\"635\":3,\"642\":1,\"646\":1,\"650\":1,\"651\":2,\"655\":2,\"661\":1,\"663\":2,\"682\":1,\"689\":1,\"690\":1,\"712\":1,\"713\":5,\"715\":1,\"748\":3,\"795\":2}}],[\"g|gif\",{\"1\":{\"718\":1}}],[\"guards\",{\"1\":{\"651\":3,\"654\":3,\"655\":1}}],[\"guard\",{\"1\":{\"646\":1,\"654\":10}}],[\"guardiesvgbug\",{\"1\":{\"609\":1}}],[\"guide\",{\"1\":{\"435\":1,\"635\":2,\"644\":1}}],[\"gui\",{\"1\":{\"247\":2,\"249\":1}}],[\"gustavson\",{\"1\":{\"243\":1}}],[\"guess\",{\"1\":{\"7\":4}}],[\"gif\",{\"1\":{\"517\":2}}],[\"git\",{\"1\":{\"517\":1}}],[\"gitignore这个是用来将指定目录或文件排除在版本控制之外的\",{\"1\":{\"517\":1}}],[\"gitignore\",{\"1\":{\"517\":1}}],[\"gitignore和外层的\",{\"1\":{\"517\":1}}],[\"github\",{\"1\":{\"220\":1,\"277\":1,\"464\":2,\"517\":1,\"635\":9,\"642\":1,\"649\":3,\"651\":1}}],[\"given\",{\"1\":{\"140\":1}}],[\"gfx\",{\"1\":{\"218\":1}}],[\"gfc将改变传统的布局模式\",{\"1\":{\"177\":1}}],[\"gfc\",{\"0\":{\"177\":1},\"1\":{\"177\":1,\"187\":1}}],[\"gmunk\",{\"1\":{\"218\":2}}],[\"g11\",{\"1\":{\"206\":15,\"243\":5}}],[\"g10\",{\"1\":{\"206\":15,\"243\":5}}],[\"g01\",{\"1\":{\"206\":15,\"243\":5}}],[\"g00\",{\"1\":{\"206\":15,\"243\":5}}],[\"gy\",{\"1\":{\"206\":15,\"243\":5}}],[\"gx\",{\"1\":{\"206\":27,\"243\":9}}],[\"glob\",{\"1\":{\"720\":3}}],[\"globalapi\",{\"1\":{\"542\":1}}],[\"global\",{\"1\":{\"326\":1,\"541\":1,\"631\":1,\"651\":1,\"654\":1,\"656\":1,\"663\":1}}],[\"globaldata\",{\"1\":{\"326\":1}}],[\"glide\",{\"1\":{\"517\":2}}],[\"glasscom\",{\"1\":{\"334\":4,\"341\":1,\"343\":1}}],[\"glstencilfuncseparate\",{\"1\":{\"240\":1}}],[\"glsl的变量\",{\"0\":{\"229\":1}}],[\"glsl中的形状\",{\"0\":{\"223\":1}}],[\"glsl中的语句\",{\"0\":{\"220\":1}}],[\"glsl中的矩阵\",{\"0\":{\"214\":1}}],[\"glsl中的函数\",{\"0\":{\"189\":1}}],[\"glsl图形\",{\"0\":{\"202\":1,\"204\":1,\"206\":1}}],[\"glsl\",{\"0\":{\"208\":1,\"212\":1,\"811\":1},\"1\":{\"192\":1,\"195\":2,\"209\":1,\"212\":1,\"220\":1,\"232\":3,\"234\":2,\"238\":1},\"2\":{\"201\":1,\"203\":1,\"205\":1,\"207\":1,\"213\":1,\"219\":1,\"222\":1,\"228\":1,\"242\":1,\"244\":1}}],[\"glenable\",{\"1\":{\"239\":1}}],[\"gl4\",{\"1\":{\"220\":1}}],[\"gl\",{\"0\":{\"211\":1},\"1\":{\"190\":10,\"199\":11,\"202\":16,\"204\":16,\"206\":17,\"209\":5,\"210\":2,\"211\":4,\"215\":3,\"216\":3,\"217\":3,\"218\":3,\"224\":8,\"225\":6,\"226\":6,\"227\":3,\"238\":9,\"239\":78,\"240\":36,\"243\":2}}],[\"go\",{\"1\":{\"158\":2,\"645\":2}}],[\"good\",{\"1\":{\"140\":1,\"141\":1}}],[\"groups\",{\"1\":{\"607\":3,\"608\":1}}],[\"group>\",{\"1\":{\"597\":1}}],[\"gradle用于指定项目中所有引进的模块\",{\"1\":{\"517\":1}}],[\"gradlew\",{\"1\":{\"517\":4}}],[\"gradle这个目录之下包含了\",{\"1\":{\"517\":1}}],[\"gradle这是项目全局的\",{\"1\":{\"517\":1}}],[\"gradle这是\",{\"1\":{\"517\":1}}],[\"gradle\",{\"1\":{\"517\":13}}],[\"gradient\",{\"1\":{\"218\":3}}],[\"grained\",{\"1\":{\"457\":1}}],[\"graceful\",{\"0\":{\"451\":1}}],[\"graphite\",{\"0\":{\"438\":1}}],[\"graph\",{\"1\":{\"1\":5,\"40\":1}}],[\"gridlayout\",{\"1\":{\"177\":1}}],[\"grid\",{\"1\":{\"158\":1,\"174\":2,\"177\":7,\"184\":1,\"187\":1}}],[\"greencolor\",{\"1\":{\"206\":2}}],[\"green\",{\"1\":{\"153\":1,\"718\":1}}],[\"g\",{\"1\":{\"102\":1,\"103\":1,\"104\":2,\"225\":2,\"268\":3,\"274\":18,\"582\":1,\"588\":1,\"611\":2,\"625\":2,\"626\":1,\"635\":1,\"667\":2}}],[\"gpu\",{\"1\":{\"95\":1,\"97\":3,\"105\":3,\"241\":5,\"246\":1}}],[\"genhotreloadcode\",{\"1\":{\"635\":1}}],[\"genrequest\",{\"1\":{\"626\":1,\"630\":1}}],[\"gendata\",{\"1\":{\"615\":1}}],[\"gencomponent\",{\"1\":{\"615\":1}}],[\"genchildren\",{\"1\":{\"615\":2}}],[\"genchildrenasstringnode\",{\"1\":{\"615\":1}}],[\"genonce\",{\"1\":{\"615\":1}}],[\"genelement\",{\"1\":{\"615\":3}}],[\"generation\",{\"1\":{\"707\":1}}],[\"generate\",{\"0\":{\"615\":1},\"1\":{\"603\":1,\"615\":4,\"626\":1}}],[\"generator\",{\"1\":{\"699\":1,\"718\":2}}],[\"generatorobject\",{\"1\":{\"268\":5,\"269\":7,\"271\":14,\"272\":1}}],[\"generatorfne\",{\"1\":{\"268\":1}}],[\"generatorfnd\",{\"1\":{\"268\":1}}],[\"generatorfnc\",{\"1\":{\"268\":1}}],[\"generatorfnb\",{\"1\":{\"268\":1}}],[\"generatorfna\",{\"1\":{\"268\":1}}],[\"generatorfn\",{\"1\":{\"268\":13,\"269\":4,\"270\":2,\"271\":6,\"272\":4,\"274\":12}}],[\"generic\",{\"1\":{\"84\":1}}],[\"gennormalelement\",{\"1\":{\"615\":2}}],[\"genif\",{\"1\":{\"615\":2}}],[\"genfor\",{\"1\":{\"615\":2}}],[\"genslot\",{\"1\":{\"615\":1}}],[\"genstatekey\",{\"1\":{\"646\":1}}],[\"genstatic\",{\"1\":{\"615\":1}}],[\"genstatickeyscached\",{\"1\":{\"612\":1}}],[\"genstylerequest\",{\"1\":{\"629\":1}}],[\"genstyleinjectioncode\",{\"1\":{\"629\":1}}],[\"genstylescode\",{\"1\":{\"629\":3}}],[\"genstringelementwithchildren\",{\"1\":{\"615\":1}}],[\"genstringelement\",{\"1\":{\"615\":1}}],[\"genssrchildren\",{\"1\":{\"615\":1}}],[\"genssrelement\",{\"1\":{\"615\":4}}],[\"genassignmentcode\",{\"1\":{\"534\":1}}],[\"genkey\",{\"1\":{\"517\":1}}],[\"getmodulebynamespace\",{\"1\":{\"664\":2}}],[\"geturl\",{\"1\":{\"647\":4}}],[\"getroutes\",{\"1\":{\"644\":1}}],[\"getchild\",{\"1\":{\"663\":2}}],[\"getcurrentlocation\",{\"1\":{\"642\":1}}],[\"getcomponentname\",{\"1\":{\"573\":2}}],[\"getoptions\",{\"1\":{\"729\":2,\"730\":2}}],[\"getouterhtml\",{\"1\":{\"601\":1,\"603\":2}}],[\"getownpropertysymbols\",{\"1\":{\"308\":1}}],[\"getownpropertynames\",{\"1\":{\"308\":1}}],[\"getownpropertydescriptor\",{\"0\":{\"306\":2},\"1\":{\"306\":11,\"563\":2}}],[\"getfirstcomponentchild\",{\"1\":{\"573\":1}}],[\"getstatekey\",{\"1\":{\"646\":1}}],[\"gets\",{\"1\":{\"565\":1,\"585\":1}}],[\"getsection\",{\"1\":{\"89\":3}}],[\"getnormalizedwebpackoptions\",{\"1\":{\"738\":1}}],[\"getnow\",{\"1\":{\"558\":1}}],[\"getnestedstate\",{\"1\":{\"663\":1}}],[\"getnamespace\",{\"1\":{\"663\":1}}],[\"getname\",{\"1\":{\"127\":3}}],[\"get会在次触发updatecomponent\",{\"1\":{\"556\":1}}],[\"get时\",{\"1\":{\"556\":1}}],[\"gettagnamespace\",{\"1\":{\"584\":1}}],[\"getter函数\",{\"1\":{\"521\":1}}],[\"getter\",{\"1\":{\"521\":5,\"523\":2,\"524\":1,\"554\":2,\"561\":2,\"563\":8,\"565\":8,\"566\":4,\"660\":2,\"663\":3,\"664\":3,\"670\":6,\"671\":1}}],[\"getters\",{\"1\":{\"521\":1,\"554\":1,\"663\":15,\"664\":8,\"665\":4}}],[\"getting\",{\"1\":{\"316\":1}}],[\"getlocation\",{\"1\":{\"646\":1}}],[\"getlogger\",{\"1\":{\"464\":1}}],[\"getlength\",{\"1\":{\"82\":2}}],[\"getprototypeof\",{\"0\":{\"309\":2},\"1\":{\"309\":12,\"310\":1}}],[\"getdata\",{\"1\":{\"553\":1,\"560\":1}}],[\"getdate\",{\"1\":{\"300\":2}}],[\"getdelta\",{\"1\":{\"237\":1}}],[\"getelementbyid\",{\"1\":{\"237\":2,\"795\":1}}],[\"get<config>\",{\"1\":{\"89\":1}}],[\"get<proxy>\",{\"1\":{\"89\":1}}],[\"get\",{\"0\":{\"302\":2},\"1\":{\"76\":1,\"77\":2,\"79\":7,\"80\":1,\"83\":2,\"89\":3,\"225\":1,\"288\":1,\"289\":9,\"290\":1,\"291\":1,\"295\":1,\"297\":4,\"299\":2,\"300\":1,\"302\":9,\"305\":1,\"316\":3,\"317\":3,\"320\":2,\"464\":3,\"519\":1,\"521\":9,\"523\":4,\"524\":1,\"542\":1,\"550\":2,\"554\":6,\"556\":6,\"559\":3,\"563\":2,\"564\":1,\"565\":4,\"566\":5,\"573\":1,\"584\":1,\"642\":2,\"646\":1,\"663\":3,\"665\":2,\"670\":4,\"671\":2,\"789\":1,\"793\":1,\"794\":1,\"795\":1,\"797\":1,\"799\":2}}],[\"gauges\",{\"0\":{\"439\":1}}],[\"garbage\",{\"1\":{\"70\":1}}],[\"gap\",{\"1\":{\"56\":9}}],[\"game\",{\"1\":{\"23\":2}}],[\"href=\",{\"1\":{\"635\":26}}],[\"href\",{\"1\":{\"608\":1,\"647\":5}}],[\"hr水平分割线\",{\"1\":{\"185\":1}}],[\"hydrate\",{\"1\":{\"588\":1,\"596\":1}}],[\"hydration\",{\"1\":{\"588\":4}}],[\"hydrating\",{\"1\":{\"540\":2,\"566\":5,\"575\":1,\"581\":2,\"582\":3,\"586\":3,\"587\":1,\"588\":3,\"591\":1,\"601\":2,\"602\":2,\"603\":2}}],[\"hyphenate\",{\"1\":{\"534\":2}}],[\"hyperbolic\",{\"1\":{\"198\":3}}],[\"hbuilderx\",{\"1\":{\"517\":1}}],[\"hpp\",{\"0\":{\"476\":1},\"1\":{\"476\":1}}],[\"hgroup\",{\"1\":{\"185\":1}}],[\"h6标题级别\",{\"1\":{\"185\":1}}],[\"h5\",{\"1\":{\"185\":1}}],[\"h4\",{\"1\":{\"185\":1}}],[\"h3>\",{\"1\":{\"635\":6}}],[\"h3\",{\"1\":{\"185\":1,\"635\":2}}],[\"h2\",{\"1\":{\"185\":1}}],[\"h1>`\",{\"1\":{\"689\":1}}],[\"h1>\",{\"1\":{\"635\":2,\"689\":1,\"690\":1}}],[\"h1\",{\"1\":{\"185\":1,\"690\":5}}],[\"h\",{\"1\":{\"154\":1,\"538\":3,\"566\":2,\"584\":5,\"602\":1,\"656\":5}}],[\"hue\",{\"1\":{\"154\":1}}],[\"hsla\",{\"0\":{\"154\":1},\"1\":{\"154\":1}}],[\"hsl\",{\"0\":{\"154\":1},\"1\":{\"154\":1}}],[\"history特性\",{\"1\":{\"646\":1}}],[\"history\",{\"1\":{\"642\":12,\"643\":5,\"645\":1,\"646\":8,\"647\":1,\"649\":1}}],[\"hi\",{\"1\":{\"327\":1}}],[\"hide\",{\"1\":{\"326\":1}}],[\"hiddenproperties\",{\"1\":{\"317\":3}}],[\"hidden\",{\"0\":{\"767\":1},\"1\":{\"141\":1,\"144\":1,\"641\":1}}],[\"hierarchy\",{\"1\":{\"139\":1}}],[\"highp\",{\"1\":{\"209\":1,\"241\":7,\"243\":2}}],[\"high\",{\"1\":{\"7\":1,\"195\":2}}],[\"hight\",{\"1\":{\"7\":3}}],[\"hoiststatic\",{\"0\":{\"676\":1}}],[\"hoisting\",{\"0\":{\"115\":1},\"1\":{\"614\":1}}],[\"how\",{\"1\":{\"635\":2}}],[\"hot\",{\"1\":{\"596\":1,\"613\":1,\"625\":1,\"635\":5,\"663\":6,\"719\":1}}],[\"hocs\",{\"1\":{\"588\":1}}],[\"hoc\",{\"1\":{\"586\":1}}],[\"hook`\",{\"1\":{\"548\":1}}],[\"hooks\",{\"1\":{\"548\":1,\"558\":1,\"575\":1,\"585\":1,\"588\":2,\"595\":6,\"642\":1,\"651\":2,\"656\":1,\"738\":3,\"739\":1,\"740\":1,\"778\":5,\"779\":4,\"780\":4,\"781\":4,\"782\":4,\"783\":4,\"784\":4}}],[\"hook\",{\"0\":{\"777\":1},\"1\":{\"548\":5,\"558\":1,\"575\":2,\"582\":2,\"586\":2,\"588\":3,\"591\":2,\"592\":1,\"595\":1,\"596\":3,\"636\":1,\"642\":2,\"649\":3,\"651\":2,\"655\":3,\"656\":6,\"777\":2}}],[\"homecontroller\",{\"1\":{\"464\":2}}],[\"home\",{\"1\":{\"324\":1,\"464\":1,\"517\":1,\"572\":2,\"584\":2,\"644\":4}}],[\"horbeam\",{\"1\":{\"225\":2}}],[\"horcolour\",{\"1\":{\"225\":8}}],[\"holistic\",{\"1\":{\"139\":1}}],[\"host\",{\"1\":{\"102\":2,\"103\":2,\"104\":2,\"464\":1,\"799\":1}}],[\"here\",{\"1\":{\"158\":2,\"521\":1,\"551\":1,\"554\":1,\"575\":1,\"626\":1,\"656\":1}}],[\"health\",{\"0\":{\"452\":1},\"1\":{\"452\":1}}],[\"header\",{\"1\":{\"185\":1,\"606\":3,\"793\":2,\"801\":2}}],[\"headers\",{\"1\":{\"102\":3,\"103\":3,\"104\":3}}],[\"head\",{\"1\":{\"102\":1,\"103\":1,\"104\":1,\"261\":2}}],[\"heapify\",{\"1\":{\"59\":2}}],[\"heapinsert\",{\"1\":{\"59\":2}}],[\"heapsort\",{\"1\":{\"59\":1}}],[\"helloworld\",{\"1\":{\"625\":1,\"629\":1,\"635\":10,\"637\":4,\"638\":3}}],[\"helloworldvue\",{\"1\":{\"584\":1}}],[\"hello\",{\"0\":{\"208\":1},\"1\":{\"64\":1,\"80\":2,\"238\":1,\"455\":1,\"617\":1,\"635\":2,\"690\":2,\"739\":1,\"740\":1,\"797\":1}}],[\"height\",{\"1\":{\"13\":6,\"66\":1,\"83\":5,\"102\":3,\"103\":3,\"104\":5,\"175\":1,\"230\":3,\"237\":1}}],[\"htm\",{\"1\":{\"334\":3}}],[\"htmlminimizerplugin\",{\"1\":{\"720\":2}}],[\"htmlwebpackplugin\",{\"1\":{\"718\":2}}],[\"html5\",{\"0\":{\"646\":1},\"1\":{\"796\":1}}],[\"html5history\",{\"1\":{\"642\":1,\"643\":1,\"646\":1}}],[\"html字符串还剩下\",{\"1\":{\"607\":1}}],[\"html>\",{\"1\":{\"606\":1}}],[\"html者\",{\"1\":{\"334\":1}}],[\"htmlparseroptions\",{\"1\":{\"606\":1}}],[\"htmlparser\",{\"1\":{\"134\":1}}],[\"htmlparser2\",{\"1\":{\"102\":3,\"103\":3,\"104\":3}}],[\"html解析完毕和加载子资源页面加载完成后会通知主进程页面加载完成\",{\"1\":{\"102\":1,\"103\":1,\"104\":1}}],[\"html接收接受完毕后通知主进程确认导航\",{\"1\":{\"102\":1,\"103\":1,\"104\":1}}],[\"html发现css和js文件会并行下载\",{\"1\":{\"102\":1,\"103\":1,\"104\":1}}],[\"html\",{\"0\":{\"96\":1,\"98\":1,\"605\":1},\"1\":{\"43\":1,\"95\":1,\"96\":4,\"97\":1,\"98\":5,\"102\":5,\"103\":5,\"104\":5,\"133\":1,\"134\":7,\"139\":1,\"140\":1,\"141\":2,\"174\":1,\"226\":1,\"330\":1,\"334\":1,\"335\":1,\"517\":1,\"588\":1,\"594\":1,\"606\":20,\"607\":6,\"623\":1,\"644\":1,\"718\":2,\"720\":2,\"789\":1,\"795\":1,\"797\":1}}],[\"http2\",{\"0\":{\"503\":1},\"1\":{\"719\":1}}],[\"http缓存\",{\"0\":{\"499\":1}}],[\"http主要方法\",{\"1\":{\"335\":1}}],[\"http\",{\"0\":{\"335\":1},\"1\":{\"65\":5,\"102\":3,\"103\":3,\"104\":3,\"190\":1,\"218\":1,\"224\":1,\"225\":1,\"226\":2,\"227\":1,\"247\":1,\"330\":1,\"334\":4,\"335\":1,\"445\":3,\"464\":1,\"471\":1,\"473\":1,\"476\":4,\"789\":1,\"793\":3,\"794\":3,\"796\":1,\"797\":1,\"798\":4,\"799\":2,\"800\":1}}],[\"https\",{\"1\":{\"1\":1,\"8\":1,\"9\":1,\"13\":2,\"18\":2,\"23\":2,\"43\":1,\"87\":1,\"89\":1,\"218\":1,\"220\":5,\"225\":1,\"442\":1,\"464\":2,\"517\":4,\"561\":1,\"635\":26,\"642\":1,\"644\":1,\"649\":3,\"651\":1,\"660\":1,\"690\":2,\"705\":1}}],[\"halt\",{\"1\":{\"653\":1}}],[\"happens\",{\"1\":{\"588\":1}}],[\"hack\",{\"1\":{\"575\":1}}],[\"hander\",{\"1\":{\"555\":1}}],[\"handled\",{\"1\":{\"670\":2}}],[\"handle3\",{\"1\":{\"667\":1}}],[\"handle2\",{\"1\":{\"667\":1}}],[\"handle1\",{\"1\":{\"667\":1}}],[\"handleinitialscroll\",{\"1\":{\"642\":2}}],[\"handlescroll\",{\"1\":{\"642\":1,\"646\":3,\"647\":2,\"651\":1}}],[\"handles\",{\"1\":{\"631\":1}}],[\"handlestarttag\",{\"0\":{\"608\":1},\"1\":{\"606\":2,\"608\":1}}],[\"handle\",{\"1\":{\"609\":1}}],[\"handleerror\",{\"1\":{\"521\":1,\"565\":1,\"567\":1,\"583\":1,\"670\":3}}],[\"handlerouteentered\",{\"1\":{\"651\":1,\"655\":1,\"656\":1}}],[\"handleroutingevent\",{\"1\":{\"646\":3}}],[\"handlers\",{\"1\":{\"281\":8,\"283\":8,\"320\":3,\"548\":4,\"663\":1}}],[\"handler\",{\"1\":{\"281\":4,\"283\":2,\"287\":4,\"288\":6,\"289\":8,\"290\":2,\"291\":3,\"534\":1,\"555\":22,\"642\":1,\"661\":2,\"662\":2,\"663\":7,\"667\":3,\"668\":5,\"669\":10,\"670\":5,\"671\":1}}],[\"handling\",{\"1\":{\"70\":1}}],[\"having\",{\"1\":{\"544\":1}}],[\"have\",{\"1\":{\"140\":1,\"141\":1,\"434\":1,\"559\":1,\"561\":1,\"565\":1,\"583\":1,\"588\":1,\"594\":1,\"596\":1,\"614\":1,\"626\":1,\"642\":1,\"653\":1,\"670\":1}}],[\"had\",{\"1\":{\"434\":1}}],[\"hasasync\",{\"1\":{\"653\":3}}],[\"hasattribute\",{\"1\":{\"588\":1}}],[\"hasfunctional\",{\"1\":{\"635\":1}}],[\"hascssmodules\",{\"1\":{\"629\":1}}],[\"haschanged\",{\"1\":{\"563\":1}}],[\"hasscoped\",{\"1\":{\"625\":2}}],[\"hasproto\",{\"1\":{\"561\":2}}],[\"hasown\",{\"1\":{\"547\":1,\"560\":1}}],[\"hasownproperty\",{\"1\":{\"287\":3}}],[\"hasbindings\",{\"1\":{\"534\":1,\"613\":1}}],[\"hashhistory\",{\"1\":{\"642\":1,\"643\":1,\"647\":1}}],[\"hashookevent\",{\"1\":{\"548\":1}}],[\"hash\",{\"0\":{\"448\":1,\"647\":1},\"1\":{\"625\":1,\"626\":2,\"643\":3,\"647\":1,\"649\":1,\"651\":1,\"718\":2,\"735\":1}}],[\"has\",{\"0\":{\"304\":2},\"1\":{\"77\":1,\"264\":1,\"287\":2,\"295\":1,\"304\":9,\"316\":1,\"317\":3,\"434\":1,\"547\":1,\"557\":2,\"558\":4,\"565\":3,\"575\":1,\"591\":1,\"597\":1,\"635\":2,\"651\":1,\"653\":1,\"656\":2,\"663\":1,\"664\":1}}],[\"ha\",{\"1\":{\"18\":1}}],[\"lt\",{\"1\":{\"778\":2,\"779\":2,\"780\":2,\"781\":2,\"782\":2,\"783\":2,\"784\":2}}],[\"lu\",{\"1\":{\"729\":1,\"730\":1,\"778\":1,\"779\":1,\"780\":1,\"781\":1,\"782\":1,\"783\":1,\"784\":1}}],[\"lb\",{\"1\":{\"452\":1}}],[\"lite\",{\"1\":{\"712\":1,\"713\":1}}],[\"literal\",{\"1\":{\"690\":1}}],[\"li>\",{\"1\":{\"635\":24}}],[\"li\",{\"1\":{\"626\":1,\"635\":2}}],[\"likely\",{\"1\":{\"588\":2}}],[\"lifecycle添加的生命周期相关的方法\",{\"1\":{\"543\":1}}],[\"lifecyclehooks\",{\"1\":{\"543\":1}}],[\"lifecycle\",{\"1\":{\"543\":1,\"548\":1,\"582\":1,\"656\":1}}],[\"lifecyclemixin\",{\"1\":{\"543\":2}}],[\"lifetimes\",{\"1\":{\"328\":1}}],[\"lib\",{\"1\":{\"517\":1,\"625\":1,\"635\":1,\"637\":9,\"638\":2,\"771\":2}}],[\"libs\",{\"1\":{\"517\":4}}],[\"libs如果你在项目中使用到了第三方\",{\"1\":{\"517\":1}}],[\"libexec\",{\"1\":{\"517\":1}}],[\"libuv\",{\"1\":{\"255\":3,\"256\":1}}],[\"live\",{\"1\":{\"403\":1}}],[\"limits\",{\"1\":{\"646\":1}}],[\"limit\",{\"1\":{\"266\":10,\"635\":1}}],[\"lightpos\",{\"1\":{\"199\":2}}],[\"lightness\",{\"1\":{\"154\":1}}],[\"linux\",{\"1\":{\"455\":1,\"517\":1}}],[\"links<\",{\"1\":{\"635\":2}}],[\"link\",{\"1\":{\"99\":1,\"584\":2,\"642\":1}}],[\"linebreakre\",{\"1\":{\"610\":1}}],[\"linearly\",{\"1\":{\"190\":1}}],[\"lineapplication\",{\"1\":{\"82\":1}}],[\"line\",{\"1\":{\"82\":7,\"175\":7,\"190\":1,\"218\":2,\"521\":1,\"554\":1,\"567\":1,\"610\":1,\"754\":1}}],[\"listener\",{\"1\":{\"642\":1}}],[\"listeners\",{\"1\":{\"585\":7,\"646\":3}}],[\"listen\",{\"1\":{\"464\":1,\"642\":1,\"789\":1,\"793\":1,\"795\":1,\"797\":1}}],[\"list<string>\",{\"1\":{\"80\":2}}],[\"list\",{\"1\":{\"7\":3,\"184\":1,\"261\":2,\"517\":2,\"534\":13,\"561\":1,\"565\":1,\"635\":2}}],[\"lang=js\",{\"1\":{\"635\":2,\"637\":4}}],[\"lang=css\",{\"1\":{\"629\":1,\"635\":1,\"637\":2}}],[\"language\",{\"1\":{\"70\":3,\"71\":1,\"212\":1,\"635\":1}}],[\"lazy\",{\"1\":{\"521\":7,\"557\":1,\"565\":9,\"566\":1}}],[\"late\",{\"1\":{\"434\":1,\"546\":1,\"547\":1}}],[\"latin\",{\"1\":{\"139\":1,\"140\":1,\"141\":1}}],[\"lab\",{\"1\":{\"334\":4,\"341\":1,\"343\":1}}],[\"label\",{\"1\":{\"186\":1}}],[\"launch\",{\"1\":{\"326\":1}}],[\"layer\",{\"1\":{\"199\":6,\"240\":3}}],[\"layers\",{\"1\":{\"103\":9,\"104\":11}}],[\"layout\",{\"1\":{\"102\":2,\"103\":2,\"104\":5,\"238\":5,\"240\":2}}],[\"layouttree\",{\"1\":{\"102\":2,\"103\":4,\"104\":4}}],[\"largestindex\",{\"1\":{\"59\":8}}],[\"lastcurrentindex\",{\"1\":{\"651\":3}}],[\"lastrouteindex\",{\"1\":{\"651\":3}}],[\"lastindex\",{\"1\":{\"611\":12}}],[\"lasttag\",{\"1\":{\"606\":3,\"608\":4}}],[\"last\",{\"1\":{\"8\":1,\"264\":2,\"606\":3,\"697\":1,\"712\":1,\"713\":6,\"714\":1,\"715\":2}}],[\"l\",{\"1\":{\"13\":5,\"154\":1,\"218\":2,\"534\":3,\"547\":2,\"557\":2,\"561\":2,\"563\":2,\"564\":2,\"608\":3,\"613\":4,\"614\":4,\"644\":3}}],[\"long\",{\"1\":{\"792\":1}}],[\"longer\",{\"1\":{\"535\":1}}],[\"lonedruleset\",{\"1\":{\"637\":1}}],[\"lovingvue\",{\"1\":{\"528\":1}}],[\"loop\",{\"0\":{\"251\":1},\"1\":{\"254\":3,\"255\":2,\"256\":2,\"257\":1,\"258\":1,\"777\":1}}],[\"localvars\",{\"1\":{\"735\":1}}],[\"localcount\",{\"1\":{\"664\":1}}],[\"local\",{\"1\":{\"517\":1,\"573\":1,\"663\":18}}],[\"localhost\",{\"1\":{\"102\":1,\"103\":1,\"104\":1,\"464\":1,\"793\":2,\"794\":1,\"797\":1,\"799\":2}}],[\"location\",{\"1\":{\"238\":3,\"240\":2,\"645\":4,\"646\":8,\"647\":7,\"649\":2,\"650\":19}}],[\"loat\",{\"1\":{\"209\":1}}],[\"loadtemplatecompiler\",{\"1\":{\"635\":1}}],[\"loader的执行顺序是从右向左\",{\"1\":{\"755\":3}}],[\"loader有返回值\",{\"1\":{\"749\":1}}],[\"loader执行顺序\",{\"0\":{\"725\":1}}],[\"loader01\",{\"1\":{\"724\":1,\"729\":1,\"730\":1}}],[\"loader返回必须是一个buffer或者javascript字符串\",{\"1\":{\"723\":1}}],[\"loader本质上是一个导出为函数的javascript模块\",{\"1\":{\"723\":1}}],[\"loader本质\",{\"0\":{\"723\":1}}],[\"loader等\",{\"1\":{\"722\":1}}],[\"loader是用于对模块的源代码进行转换\",{\"1\":{\"722\":1}}],[\"loader处理后续\",{\"1\":{\"638\":1}}],[\"loader处理\",{\"1\":{\"638\":1}}],[\"loader<\",{\"1\":{\"635\":2}}],[\"loadercontext\",{\"1\":{\"629\":3,\"635\":2,\"638\":1}}],[\"loaders\",{\"1\":{\"626\":3,\"630\":3,\"636\":1,\"637\":3,\"638\":1,\"745\":3}}],[\"loader匹配\",{\"1\":{\"625\":1}}],[\"loader\",{\"0\":{\"539\":1,\"626\":1,\"629\":1,\"630\":1,\"633\":1,\"634\":1,\"635\":1,\"744\":1,\"745\":1,\"746\":1,\"747\":1,\"748\":1},\"1\":{\"626\":3,\"631\":2,\"634\":2,\"635\":5,\"636\":1,\"637\":18,\"638\":8,\"699\":2,\"703\":2,\"704\":2,\"705\":2,\"718\":14,\"722\":2,\"723\":3,\"724\":1,\"725\":5,\"726\":5,\"729\":4,\"730\":3,\"737\":1,\"744\":2,\"745\":15,\"746\":4,\"747\":14,\"748\":4,\"749\":17,\"755\":30,\"765\":1,\"766\":2},\"2\":{\"640\":1}}],[\"loading\",{\"0\":{\"494\":1}}],[\"load\",{\"1\":{\"102\":3,\"103\":3,\"104\":3,\"442\":1}}],[\"lod\",{\"1\":{\"199\":52}}],[\"lolengine\",{\"1\":{\"190\":1}}],[\"login\",{\"1\":{\"641\":2}}],[\"logic\",{\"1\":{\"575\":1}}],[\"logo\",{\"1\":{\"529\":4,\"584\":3}}],[\"logger\",{\"1\":{\"464\":4}}],[\"logged\",{\"1\":{\"266\":1}}],[\"logs\",{\"1\":{\"464\":1}}],[\"logstash\",{\"1\":{\"464\":4}}],[\"log4js\",{\"1\":{\"464\":6}}],[\"log清空\",{\"1\":{\"461\":1}}],[\"log拷贝一份为test\",{\"1\":{\"461\":1}}],[\"log文件\",{\"1\":{\"461\":1}}],[\"log重命名为test\",{\"1\":{\"461\":1}}],[\"logrotate\",{\"0\":{\"460\":1}}],[\"log打印出其key值\",{\"1\":{\"320\":1}}],[\"log\",{\"1\":{\"8\":1,\"9\":1,\"102\":3,\"103\":4,\"104\":4,\"114\":2,\"115\":2,\"118\":1,\"120\":3,\"121\":4,\"122\":5,\"123\":1,\"126\":1,\"127\":2,\"198\":4,\"252\":7,\"253\":14,\"254\":6,\"256\":7,\"257\":10,\"258\":4,\"260\":2,\"263\":20,\"264\":1,\"265\":9,\"266\":5,\"268\":5,\"269\":5,\"270\":2,\"271\":13,\"272\":1,\"273\":1,\"274\":13,\"281\":2,\"287\":11,\"288\":6,\"289\":13,\"290\":1,\"291\":3,\"294\":4,\"297\":3,\"299\":5,\"300\":1,\"302\":1,\"303\":1,\"304\":1,\"305\":1,\"306\":1,\"307\":1,\"308\":1,\"309\":1,\"310\":1,\"311\":1,\"312\":1,\"313\":1,\"316\":2,\"317\":6,\"318\":2,\"319\":2,\"320\":3,\"326\":1,\"327\":3,\"455\":8,\"461\":2,\"463\":1,\"464\":1,\"539\":1,\"555\":3,\"559\":2,\"607\":1,\"626\":2,\"630\":1,\"635\":7,\"648\":3,\"665\":1,\"667\":1,\"689\":1,\"690\":2,\"723\":1,\"729\":1,\"730\":1,\"739\":1,\"740\":1,\"772\":1,\"778\":2,\"779\":2,\"780\":2,\"781\":2,\"782\":3,\"783\":3,\"784\":3,\"789\":4,\"797\":4,\"801\":1}}],[\"log2\",{\"1\":{\"7\":1,\"198\":4}}],[\"lowp\",{\"1\":{\"202\":16,\"204\":16,\"206\":16,\"209\":1,\"241\":5,\"243\":2}}],[\"lowercasedtag\",{\"1\":{\"608\":1}}],[\"lower\",{\"1\":{\"8\":4}}],[\"low\",{\"1\":{\"7\":4,\"195\":2}}],[\"le|c\",{\"1\":{\"718\":1}}],[\"less$\",{\"1\":{\"755\":2}}],[\"less都需要使用postcss插件时\",{\"1\":{\"755\":1}}],[\"less\",{\"1\":{\"637\":1,\"718\":1,\"755\":1}}],[\"lesson04\",{\"1\":{\"220\":1}}],[\"leave\",{\"1\":{\"651\":1}}],[\"leavecb\",{\"1\":{\"588\":1}}],[\"leaving\",{\"1\":{\"588\":1,\"597\":1}}],[\"learntable\",{\"1\":{\"778\":2,\"779\":2,\"780\":2,\"781\":2,\"782\":2,\"783\":2,\"784\":2}}],[\"learn\",{\"1\":{\"464\":2}}],[\"learnopengl\",{\"1\":{\"220\":2}}],[\"legacy\",{\"1\":{\"517\":2}}],[\"level\",{\"1\":{\"141\":1,\"184\":2,\"199\":5,\"464\":2,\"588\":1}}],[\"lexical\",{\"1\":{\"122\":1,\"689\":2}}],[\"len==126\",{\"1\":{\"803\":1}}],[\"len\",{\"1\":{\"56\":3,\"57\":3,\"58\":2,\"82\":2,\"803\":2}}],[\"length=x\",{\"1\":{\"803\":3}}],[\"length\",{\"1\":{\"1\":6,\"7\":1,\"8\":2,\"13\":1,\"23\":3,\"43\":1,\"53\":2,\"54\":2,\"55\":1,\"56\":1,\"57\":5,\"58\":1,\"59\":2,\"60\":1,\"61\":7,\"62\":2,\"82\":3,\"102\":1,\"103\":1,\"104\":1,\"197\":5,\"204\":1,\"218\":5,\"225\":3,\"226\":1,\"227\":1,\"232\":3,\"239\":1,\"240\":1,\"281\":2,\"283\":4,\"319\":1,\"434\":2,\"445\":1,\"455\":1,\"521\":1,\"534\":2,\"535\":4,\"547\":2,\"548\":1,\"553\":1,\"555\":1,\"557\":2,\"558\":3,\"561\":2,\"563\":3,\"564\":1,\"565\":4,\"568\":2,\"573\":1,\"575\":1,\"582\":1,\"583\":1,\"584\":1,\"588\":3,\"595\":3,\"596\":3,\"597\":2,\"606\":4,\"607\":3,\"608\":1,\"609\":1,\"610\":3,\"611\":3,\"613\":2,\"614\":4,\"615\":1,\"629\":1,\"631\":1,\"644\":2,\"646\":1,\"650\":1,\"651\":3,\"652\":2,\"655\":1,\"661\":1,\"663\":4,\"668\":1,\"670\":1,\"689\":4,\"759\":1,\"803\":5,\"804\":3}}],[\"left\",{\"1\":{\"8\":4,\"57\":8,\"58\":9,\"59\":5,\"102\":1,\"103\":1,\"104\":4,\"159\":2,\"224\":1,\"597\":2}}],[\"leftidx\",{\"1\":{\"8\":4}}],[\"leetcode\",{\"1\":{\"8\":1,\"9\":1,\"13\":3,\"18\":2,\"23\":3}}],[\"let转换为var\",{\"1\":{\"695\":1}}],[\"letters\",{\"1\":{\"139\":1,\"140\":1,\"141\":1}}],[\"lettest\",{\"1\":{\"121\":1}}],[\"let\",{\"1\":{\"1\":12,\"7\":4,\"8\":2,\"13\":3,\"18\":3,\"23\":5,\"53\":3,\"54\":4,\"55\":3,\"56\":5,\"57\":2,\"58\":4,\"59\":7,\"60\":3,\"61\":7,\"62\":9,\"102\":4,\"103\":5,\"104\":5,\"121\":2,\"122\":3,\"126\":6,\"127\":1,\"237\":3,\"260\":4,\"261\":4,\"263\":17,\"264\":3,\"265\":4,\"266\":8,\"268\":4,\"269\":2,\"270\":1,\"271\":4,\"272\":1,\"280\":5,\"281\":5,\"282\":2,\"283\":14,\"289\":1,\"445\":1,\"521\":2,\"534\":2,\"535\":3,\"544\":1,\"546\":1,\"547\":4,\"548\":1,\"553\":2,\"555\":1,\"557\":3,\"558\":1,\"559\":2,\"560\":2,\"561\":2,\"562\":1,\"563\":2,\"564\":1,\"565\":5,\"566\":2,\"567\":2,\"568\":3,\"575\":3,\"582\":2,\"583\":1,\"584\":2,\"585\":1,\"588\":5,\"591\":1,\"595\":2,\"596\":1,\"597\":9,\"601\":1,\"603\":2,\"606\":4,\"607\":4,\"608\":1,\"609\":2,\"610\":3,\"611\":4,\"613\":2,\"614\":2,\"615\":4,\"625\":2,\"629\":5,\"642\":1,\"643\":1,\"644\":1,\"649\":1,\"650\":1,\"652\":1,\"653\":4,\"656\":2,\"660\":1,\"663\":1,\"664\":2,\"665\":2,\"668\":1,\"670\":3,\"688\":1,\"689\":6,\"690\":9,\"780\":1,\"793\":3,\"794\":1,\"797\":6,\"801\":1,\"804\":1}}],[\"算法会直接跳过静态节点\",{\"1\":{\"603\":1}}],[\"算法的优化\",{\"0\":{\"675\":1}}],[\"算法的渐进时间复杂度\",{\"1\":{\"33\":1}}],[\"算法的时间复杂度应该为\",{\"1\":{\"9\":1}}],[\"算法图解笔记\",{\"0\":{\"43\":1}}],[\"算法图解\",{\"0\":{\"4\":1},\"2\":{\"3\":1,\"6\":1,\"11\":1,\"15\":1,\"20\":1,\"25\":1,\"28\":1,\"31\":1,\"36\":1,\"39\":1,\"42\":1,\"48\":1,\"51\":1}}],[\"算法\",{\"2\":{\"2\":1,\"5\":1,\"10\":1,\"14\":1,\"19\":1,\"24\":1,\"27\":1,\"30\":1,\"35\":1,\"38\":1,\"41\":1,\"44\":1,\"47\":1,\"50\":1,\"63\":1}}],[\"算法是一种贪心算法\",{\"1\":{\"1\":1}}],[\"p>\",{\"1\":{\"635\":2}}],[\"pm2\",{\"1\":{\"452\":2}}],[\"ppp\",{\"0\":{\"426\":1},\"1\":{\"419\":1}}],[\"pppoe\",{\"1\":{\"419\":1}}],[\"phantomjs\",{\"1\":{\"568\":1,\"713\":3}}],[\"phy\",{\"1\":{\"388\":2,\"390\":3,\"400\":1}}],[\"phone\",{\"1\":{\"65\":1}}],[\"pending++\",{\"1\":{\"653\":1}}],[\"pendinginsert\",{\"1\":{\"592\":3}}],[\"pending为\",{\"1\":{\"567\":1}}],[\"pending为false\",{\"1\":{\"567\":1}}],[\"pending\",{\"1\":{\"280\":8,\"281\":2,\"283\":5,\"567\":6,\"568\":2,\"651\":4,\"653\":3,\"655\":4}}],[\"performing\",{\"1\":{\"588\":1}}],[\"perform\",{\"1\":{\"588\":1}}],[\"performance\",{\"0\":{\"674\":1},\"1\":{\"435\":1,\"544\":2}}],[\"perf\",{\"1\":{\"544\":2}}],[\"percent\",{\"1\":{\"434\":1,\"718\":1}}],[\"percentage\",{\"0\":{\"166\":1}}],[\"perlin\",{\"1\":{\"243\":1}}],[\"permutation\",{\"1\":{\"206\":3,\"243\":1}}],[\"permute\",{\"1\":{\"206\":9,\"243\":3}}],[\"perspectivematrix\",{\"1\":{\"233\":1}}],[\"perspective\",{\"1\":{\"196\":1}}],[\"person\",{\"1\":{\"78\":1,\"79\":6}}],[\"pf\",{\"1\":{\"206\":12,\"243\":4}}],[\"p1\",{\"1\":{\"197\":3}}],[\"p0\",{\"1\":{\"197\":4}}],[\"pct+0\",{\"1\":{\"190\":2}}],[\"pct\",{\"1\":{\"190\":26,\"224\":3,\"225\":5}}],[\"p行\",{\"1\":{\"185\":1}}],[\"png|svg|jpe\",{\"1\":{\"718\":1}}],[\"png\",{\"1\":{\"161\":1,\"529\":2,\"584\":2}}],[\"plugins=\",{\"1\":{\"702\":2}}],[\"plugins\",{\"0\":{\"693\":1},\"1\":{\"660\":2,\"700\":1,\"704\":1,\"718\":1,\"720\":1,\"738\":2,\"752\":1,\"755\":5}}],[\"plugins<\",{\"1\":{\"635\":2}}],[\"plugin\",{\"0\":{\"694\":1,\"734\":1},\"1\":{\"635\":4,\"636\":1,\"660\":2,\"696\":1,\"700\":2,\"702\":5,\"704\":2,\"709\":2,\"718\":5,\"720\":6,\"737\":1,\"738\":4,\"751\":2}}],[\"plus\",{\"1\":{\"140\":2,\"141\":1}}],[\"plantforms\",{\"1\":{\"601\":1}}],[\"plain\",{\"1\":{\"542\":1,\"585\":1,\"606\":1,\"613\":1,\"615\":1}}],[\"platformispretag\",{\"1\":{\"609\":1}}],[\"platformgettagnamespace\",{\"1\":{\"609\":1}}],[\"platform\",{\"1\":{\"540\":3,\"543\":1,\"584\":1}}],[\"platformcomponents\",{\"1\":{\"540\":2}}],[\"platformdirectives\",{\"1\":{\"540\":2}}],[\"platforms\",{\"1\":{\"540\":2,\"603\":1}}],[\"platformmustuseprop\",{\"1\":{\"534\":2}}],[\"placeholder\",{\"1\":{\"575\":1,\"583\":1,\"585\":2,\"591\":1,\"610\":2}}],[\"place\",{\"1\":{\"56\":1,\"57\":1,\"216\":1}}],[\"plot\",{\"1\":{\"190\":8}}],[\"ping\",{\"1\":{\"803\":1}}],[\"pitch导出函数为pitch方法\",{\"1\":{\"749\":1}}],[\"pitch函数\",{\"1\":{\"748\":1}}],[\"pitching\",{\"1\":{\"726\":1}}],[\"pitchloader\",{\"0\":{\"637\":1}}],[\"pitch\",{\"0\":{\"630\":1,\"749\":1},\"1\":{\"631\":1,\"634\":3,\"637\":2,\"638\":1,\"725\":1,\"726\":1,\"748\":3,\"749\":9}}],[\"pitcher\",{\"0\":{\"626\":1},\"1\":{\"625\":1,\"626\":1,\"631\":1,\"636\":5,\"637\":1}}],[\"picasa\",{\"1\":{\"517\":1}}],[\"pixel\",{\"1\":{\"225\":3,\"226\":1}}],[\"pi+theta0\",{\"1\":{\"218\":1}}],[\"pi\",{\"1\":{\"77\":1,\"79\":1,\"81\":2,\"190\":2,\"206\":19,\"216\":2,\"217\":1,\"218\":4,\"226\":3,\"230\":6,\"236\":2,\"243\":5}}],[\"pivot\",{\"1\":{\"58\":5}}],[\"purgecss\",{\"1\":{\"720\":1}}],[\"purgecssplugin\",{\"1\":{\"720\":2}}],[\"purplecolor\",{\"1\":{\"206\":1}}],[\"pull\",{\"1\":{\"651\":1}}],[\"publicvalue\",{\"1\":{\"78\":1}}],[\"public\",{\"1\":{\"76\":3,\"77\":12,\"78\":5,\"79\":7,\"80\":4,\"81\":3,\"82\":3,\"83\":5,\"84\":8,\"89\":3,\"540\":1,\"542\":1,\"561\":2,\"663\":1,\"718\":1,\"720\":2}}],[\"pushhash\",{\"1\":{\"647\":2}}],[\"pushstate\",{\"1\":{\"646\":6,\"647\":1}}],[\"pushtarget\",{\"1\":{\"521\":1,\"548\":1,\"555\":1,\"563\":1,\"564\":1,\"565\":1,\"566\":1,\"670\":2,\"671\":1}}],[\"push\",{\"1\":{\"57\":4,\"61\":2,\"62\":1,\"102\":4,\"103\":5,\"104\":10,\"281\":1,\"283\":1,\"320\":3,\"535\":2,\"551\":1,\"556\":2,\"557\":1,\"558\":1,\"562\":2,\"563\":1,\"564\":1,\"565\":1,\"567\":1,\"573\":2,\"575\":1,\"592\":2,\"595\":2,\"603\":1,\"607\":1,\"608\":1,\"609\":1,\"610\":2,\"611\":7,\"642\":1,\"644\":2,\"645\":2,\"646\":3,\"647\":1,\"651\":1,\"655\":1,\"663\":2,\"689\":4,\"690\":2}}],[\"package\",{\"1\":{\"771\":1}}],[\"package中设置\",{\"1\":{\"718\":1}}],[\"packages\",{\"1\":{\"635\":4}}],[\"payload\",{\"1\":{\"660\":4,\"661\":9,\"662\":7,\"663\":4,\"665\":4,\"803\":16}}],[\"passed\",{\"1\":{\"663\":1}}],[\"pass\",{\"1\":{\"629\":1,\"651\":1,\"655\":1,\"656\":1}}],[\"password\",{\"1\":{\"517\":2}}],[\"past\",{\"1\":{\"557\":1}}],[\"pascalcase\",{\"1\":{\"66\":1}}],[\"pairs\",{\"1\":{\"263\":3}}],[\"paint\",{\"1\":{\"104\":3}}],[\"paintsteps\",{\"1\":{\"104\":10}}],[\"patterns\",{\"1\":{\"720\":1}}],[\"patterntypes\",{\"1\":{\"573\":3}}],[\"pattern\",{\"1\":{\"573\":8}}],[\"patchflag\",{\"1\":{\"675\":1}}],[\"patchable\",{\"1\":{\"588\":2}}],[\"patchvnode\",{\"0\":{\"596\":1},\"1\":{\"588\":1,\"589\":2,\"596\":1,\"597\":5}}],[\"patched\",{\"1\":{\"583\":1}}],[\"patch\",{\"1\":{\"524\":1,\"535\":1,\"540\":3,\"556\":1,\"574\":1,\"582\":1,\"585\":1,\"586\":3,\"587\":6,\"588\":2,\"589\":2,\"590\":1,\"603\":2,\"612\":1,\"675\":1}}],[\"patriciogonzalezvivo\",{\"1\":{\"215\":1,\"216\":1,\"217\":1,\"224\":1,\"225\":1,\"226\":1,\"227\":1}}],[\"patriciogv\",{\"1\":{\"215\":1,\"216\":1,\"217\":1,\"224\":1,\"225\":1,\"226\":1,\"227\":1}}],[\"path进行处理\",{\"1\":{\"644\":1}}],[\"pathtoregexpoptions\",{\"1\":{\"644\":5}}],[\"pathmap\",{\"1\":{\"644\":12,\"650\":2}}],[\"pathlist\",{\"1\":{\"644\":14,\"650\":2}}],[\"paths\",{\"1\":{\"626\":1,\"718\":2,\"720\":4}}],[\"path\",{\"0\":{\"588\":1},\"1\":{\"102\":1,\"103\":1,\"104\":1,\"455\":2,\"572\":1,\"625\":1,\"626\":6,\"641\":1,\"643\":2,\"644\":12,\"647\":8,\"648\":1,\"649\":1,\"650\":6,\"651\":2,\"655\":2,\"663\":18,\"670\":3,\"718\":6,\"723\":3,\"724\":3,\"789\":3,\"797\":3}}],[\"padding\",{\"0\":{\"170\":1},\"1\":{\"175\":1,\"635\":2}}],[\"pagename\",{\"1\":{\"528\":5,\"635\":2}}],[\"pagepath\",{\"1\":{\"327\":1}}],[\"page\",{\"1\":{\"139\":1,\"140\":1,\"325\":3,\"327\":2}}],[\"parallel\",{\"1\":{\"720\":1,\"777\":1}}],[\"paramnames\",{\"1\":{\"650\":2}}],[\"params\",{\"1\":{\"649\":1,\"650\":10}}],[\"param\",{\"1\":{\"102\":1,\"103\":1,\"104\":1,\"591\":4}}],[\"parameter\",{\"1\":{\"77\":1,\"476\":1}}],[\"parsing\",{\"1\":{\"707\":1}}],[\"parsed\",{\"1\":{\"636\":2}}],[\"parsetext\",{\"0\":{\"611\":1},\"1\":{\"610\":2,\"611\":1}}],[\"parsestarttag\",{\"1\":{\"606\":2,\"607\":1}}],[\"parseendtag\",{\"1\":{\"606\":3,\"608\":2}}],[\"parsehtmlparsestarttaghandlestarttagstart\",{\"1\":{\"605\":1}}],[\"parsehtml\",{\"0\":{\"606\":1},\"1\":{\"604\":2,\"606\":1}}],[\"parseplatformtagname\",{\"1\":{\"584\":1}}],[\"parsepath\",{\"1\":{\"559\":1,\"565\":1,\"566\":1,\"670\":3,\"671\":1}}],[\"parsefilters\",{\"1\":{\"534\":1,\"611\":1}}],[\"parsemodifiers\",{\"1\":{\"534\":1}}],[\"parse\",{\"0\":{\"604\":1},\"1\":{\"102\":1,\"103\":1,\"104\":1,\"534\":1,\"565\":1,\"603\":2,\"604\":3,\"606\":2,\"631\":1,\"635\":3,\"636\":1,\"637\":1,\"690\":2,\"720\":1}}],[\"parser\",{\"1\":{\"102\":3,\"103\":3,\"104\":3,\"534\":1,\"603\":1,\"718\":1,\"735\":2}}],[\"parseint\",{\"1\":{\"7\":1,\"62\":1,\"102\":1,\"103\":1,\"104\":3,\"573\":1}}],[\"partial\",{\"1\":{\"615\":1,\"663\":1}}],[\"partition\",{\"1\":{\"58\":2}}],[\"partitionindex\",{\"1\":{\"58\":4}}],[\"part\",{\"1\":{\"542\":1}}],[\"parts\",{\"1\":{\"140\":1}}],[\"parentstate\",{\"1\":{\"663\":2}}],[\"parentroute\",{\"1\":{\"644\":2}}],[\"parentnode\",{\"1\":{\"588\":1,\"593\":1,\"594\":1}}],[\"parentelm\",{\"1\":{\"575\":5,\"588\":3,\"590\":5,\"591\":4,\"597\":7}}],[\"parentvnode\",{\"1\":{\"566\":1,\"583\":5,\"642\":2}}],[\"parentcomputedstyle\",{\"1\":{\"102\":2,\"103\":2,\"104\":2}}],[\"parenttop\",{\"1\":{\"102\":2,\"103\":2,\"104\":2}}],[\"parent\",{\"1\":{\"102\":6,\"103\":6,\"104\":6,\"144\":1,\"547\":8,\"558\":3,\"583\":4,\"584\":1,\"585\":1,\"586\":2,\"588\":3,\"593\":5,\"594\":3,\"609\":3,\"613\":1,\"615\":2,\"644\":5,\"650\":1,\"656\":15,\"659\":3,\"663\":2,\"795\":1}}],[\"pong\",{\"1\":{\"803\":1}}],[\"potential\",{\"1\":{\"590\":1}}],[\"polyfill\",{\"1\":{\"619\":1,\"699\":1,\"718\":1}}],[\"polynomial\",{\"1\":{\"191\":1}}],[\"polling\",{\"1\":{\"792\":2}}],[\"pollution\",{\"1\":{\"476\":1}}],[\"poll\",{\"1\":{\"256\":11,\"257\":3,\"794\":1}}],[\"points\",{\"1\":{\"586\":1}}],[\"pointsize\",{\"1\":{\"238\":1,\"239\":2}}],[\"pointcoord\",{\"1\":{\"240\":3}}],[\"point\",{\"1\":{\"231\":2,\"234\":1}}],[\"pointb\",{\"1\":{\"197\":2}}],[\"pointa\",{\"1\":{\"197\":2}}],[\"pow\",{\"1\":{\"190\":1,\"198\":3,\"230\":2}}],[\"portal\",{\"1\":{\"683\":1}}],[\"port=\",{\"1\":{\"89\":1}}],[\"port\",{\"1\":{\"89\":5,\"102\":2,\"103\":2,\"104\":2,\"464\":5,\"797\":1}}],[\"postloader\",{\"1\":{\"747\":1}}],[\"postloaders\",{\"1\":{\"626\":2,\"638\":1,\"747\":1}}],[\"postcssoptions\",{\"1\":{\"755\":4}}],[\"postcss是一个通过javascript来转换样式的工具\",{\"1\":{\"754\":1}}],[\"postcss\",{\"0\":{\"754\":1},\"1\":{\"619\":1,\"637\":1,\"709\":2,\"718\":1,\"754\":4,\"755\":12}}],[\"post\",{\"1\":{\"558\":1,\"561\":1,\"631\":1,\"726\":2,\"746\":1,\"748\":1}}],[\"postpatch\",{\"1\":{\"535\":1,\"596\":1}}],[\"posix\",{\"1\":{\"455\":1}}],[\"positions\",{\"1\":{\"597\":1}}],[\"position\",{\"1\":{\"8\":1,\"103\":1,\"104\":1,\"174\":1,\"199\":2,\"234\":3,\"238\":7,\"239\":28,\"240\":1,\"243\":4}}],[\"pos++\",{\"1\":{\"62\":1}}],[\"pos\",{\"1\":{\"62\":1,\"227\":4,\"231\":2}}],[\"popstate\",{\"1\":{\"646\":2}}],[\"poptarget\",{\"1\":{\"521\":1,\"548\":1,\"555\":1,\"563\":1,\"565\":1,\"566\":1,\"670\":2}}],[\"pop\",{\"1\":{\"43\":1,\"102\":1,\"103\":1,\"104\":1,\"562\":1,\"563\":1}}],[\"prune\",{\"1\":{\"573\":1}}],[\"prunecacheentry\",{\"1\":{\"573\":4}}],[\"prunecache\",{\"1\":{\"573\":3}}],[\"preloader\",{\"1\":{\"638\":1,\"747\":2}}],[\"preloaders\",{\"1\":{\"626\":2}}],[\"pretransforms\",{\"1\":{\"609\":2}}],[\"pretty\",{\"1\":{\"544\":1}}],[\"prepatch\",{\"1\":{\"596\":2,\"656\":2}}],[\"prepare\",{\"1\":{\"256\":2}}],[\"preparerender\",{\"1\":{\"102\":2,\"103\":2,\"104\":2}}],[\"prewatchers\",{\"1\":{\"582\":5}}],[\"pre\",{\"1\":{\"563\":1,\"582\":1,\"584\":1,\"609\":2,\"613\":3,\"615\":5,\"726\":3,\"746\":1,\"748\":1}}],[\"prevvnode\",{\"1\":{\"586\":3}}],[\"prevel\",{\"1\":{\"586\":3}}],[\"prevent\",{\"1\":{\"583\":1,\"662\":1}}],[\"preventextensions\",{\"0\":{\"312\":2},\"1\":{\"294\":1,\"312\":11}}],[\"previously\",{\"1\":{\"642\":1}}],[\"previous\",{\"1\":{\"583\":1,\"590\":1,\"656\":2}}],[\"prev\",{\"1\":{\"548\":2,\"649\":3}}],[\"preset\",{\"0\":{\"696\":1,\"697\":1,\"698\":1},\"1\":{\"693\":1,\"699\":1,\"705\":3,\"706\":2,\"709\":1,\"755\":4}}],[\"presets\",{\"1\":{\"693\":1,\"697\":1,\"699\":1,\"705\":1}}],[\"preserve\",{\"1\":{\"646\":1}}],[\"preservewhitespace\",{\"1\":{\"610\":1}}],[\"present\",{\"1\":{\"535\":1}}],[\"press\",{\"1\":{\"464\":1}}],[\"precisionlevel\",{\"1\":{\"241\":2}}],[\"precision\",{\"1\":{\"190\":3,\"202\":16,\"204\":16,\"206\":16,\"209\":3,\"210\":1,\"211\":1,\"215\":1,\"216\":1,\"217\":1,\"218\":1,\"224\":2,\"225\":2,\"226\":2,\"227\":1,\"241\":6,\"243\":2}}],[\"precedence\",{\"1\":{\"139\":1}}],[\"pre预格式化文本\",{\"1\":{\"185\":1}}],[\"prefix\",{\"1\":{\"139\":1}}],[\"preindex\",{\"1\":{\"55\":8}}],[\"priority\",{\"1\":{\"720\":2}}],[\"price属性被修改了\",{\"1\":{\"559\":1}}],[\"price属性被读取了\",{\"1\":{\"559\":1}}],[\"price\",{\"1\":{\"559\":1}}],[\"pricei\",{\"1\":{\"18\":2}}],[\"primitiveid\",{\"1\":{\"240\":3}}],[\"printf\",{\"1\":{\"238\":1}}],[\"printmessage\",{\"1\":{\"238\":1}}],[\"privatevalue\",{\"1\":{\"78\":1}}],[\"private\",{\"1\":{\"76\":1,\"77\":2,\"78\":5,\"79\":2,\"80\":1,\"82\":1}}],[\"privatefield\",{\"1\":{\"66\":1}}],[\"prod\",{\"1\":{\"720\":1}}],[\"produce\",{\"1\":{\"651\":1}}],[\"production模式下的默认值\",{\"1\":{\"760\":1}}],[\"production\",{\"1\":{\"543\":1,\"650\":1,\"651\":1,\"653\":1,\"718\":1}}],[\"product\",{\"1\":{\"197\":2}}],[\"productname\",{\"1\":{\"66\":1}}],[\"proxied\",{\"1\":{\"551\":1}}],[\"proxysetter\",{\"1\":{\"550\":1}}],[\"proxygetter\",{\"1\":{\"550\":1}}],[\"proxyuser\",{\"1\":{\"299\":2}}],[\"proxyaddress\",{\"1\":{\"89\":2}}],[\"proxy\",{\"0\":{\"550\":1},\"1\":{\"89\":10,\"287\":15,\"288\":5,\"289\":17,\"290\":3,\"291\":5,\"297\":6,\"299\":6,\"300\":4,\"302\":7,\"303\":7,\"304\":7,\"305\":5,\"306\":5,\"307\":6,\"308\":7,\"309\":9,\"310\":5,\"311\":5,\"312\":6,\"313\":4,\"314\":1,\"316\":4,\"317\":8,\"318\":6,\"319\":8,\"320\":10,\"550\":1,\"551\":2,\"553\":2}}],[\"provide\",{\"1\":{\"544\":1}}],[\"provided\",{\"1\":{\"319\":2}}],[\"proper\",{\"1\":{\"596\":1}}],[\"properties用于指定本机中的\",{\"1\":{\"517\":1}}],[\"properties这个文件是全局的\",{\"1\":{\"517\":1}}],[\"properties\",{\"1\":{\"78\":1,\"521\":3,\"554\":3,\"561\":1,\"563\":1,\"660\":1,\"730\":1}}],[\"propertykey\",{\"1\":{\"302\":1,\"303\":1,\"304\":1,\"307\":1}}],[\"property\",{\"1\":{\"77\":1,\"102\":6,\"103\":8,\"104\":8,\"289\":5,\"302\":9,\"303\":8,\"304\":7,\"305\":5,\"306\":10,\"307\":5,\"316\":4,\"317\":4,\"318\":1,\"320\":2,\"521\":2,\"528\":3,\"547\":1,\"554\":1,\"563\":7,\"565\":1,\"667\":1,\"670\":1}}],[\"propkeys\",{\"1\":{\"551\":1}}],[\"propbindre\",{\"1\":{\"534\":1}}],[\"props`\",{\"1\":{\"551\":1}}],[\"propsdata\",{\"1\":{\"551\":3,\"585\":3}}],[\"propsoptions\",{\"1\":{\"551\":3}}],[\"props在\",{\"1\":{\"547\":1}}],[\"props\",{\"1\":{\"528\":1,\"544\":2,\"547\":13,\"549\":5,\"550\":1,\"551\":13,\"552\":2,\"553\":2,\"556\":1,\"573\":1,\"585\":2,\"635\":2,\"642\":1,\"644\":4,\"656\":6}}],[\"prop\",{\"1\":{\"528\":2,\"534\":6,\"551\":1,\"571\":1}}],[\"pro用于指定项目代码的混淆规则\",{\"1\":{\"517\":1}}],[\"proguard\",{\"1\":{\"517\":1}}],[\"progress\",{\"1\":{\"718\":1}}],[\"progressbarplugin\",{\"1\":{\"718\":2}}],[\"progressbar\",{\"1\":{\"463\":1}}],[\"programmer\",{\"1\":{\"663\":1}}],[\"program1\",{\"1\":{\"335\":1}}],[\"program\",{\"1\":{\"64\":1,\"68\":1,\"75\":1,\"76\":2,\"77\":1,\"84\":1,\"452\":1,\"690\":2,\"735\":1}}],[\"promsie\",{\"1\":{\"281\":2}}],[\"promise实现\",{\"0\":{\"276\":1}}],[\"promise3\",{\"1\":{\"256\":2}}],[\"promise2\",{\"1\":{\"256\":1,\"258\":2,\"281\":4}}],[\"promise1\",{\"1\":{\"256\":1,\"257\":1,\"258\":3,\"281\":4}}],[\"promise\",{\"0\":{\"252\":1,\"283\":1},\"1\":{\"252\":2,\"253\":6,\"254\":3,\"256\":4,\"257\":1,\"258\":2,\"263\":2,\"278\":3,\"280\":11,\"281\":22,\"282\":35,\"283\":46,\"567\":3,\"568\":4,\"661\":2,\"663\":1,\"670\":1,\"699\":1,\"784\":3}}],[\"promises\",{\"1\":{\"250\":1,\"276\":2,\"277\":4,\"283\":6}}],[\"processonce\",{\"1\":{\"609\":1}}],[\"processif\",{\"1\":{\"609\":1}}],[\"processfor\",{\"1\":{\"609\":1}}],[\"processrawattrs\",{\"1\":{\"609\":1}}],[\"processpre\",{\"1\":{\"609\":1}}],[\"processed\",{\"1\":{\"585\":1,\"609\":1}}],[\"processelement\",{\"1\":{\"534\":1}}],[\"processattrs\",{\"1\":{\"534\":3}}],[\"process\",{\"1\":{\"250\":1,\"256\":1,\"257\":5,\"452\":3,\"454\":1,\"455\":1,\"463\":5,\"534\":2,\"543\":1,\"626\":1,\"650\":1,\"651\":1,\"653\":1,\"718\":1,\"738\":1}}],[\"project\",{\"1\":{\"635\":2}}],[\"projectedcoord\",{\"1\":{\"199\":4}}],[\"projectionmatrixtranspose\",{\"1\":{\"239\":1}}],[\"projectionmatrixinversetranspose\",{\"1\":{\"239\":1}}],[\"projectionmatrixinverse\",{\"1\":{\"239\":3}}],[\"projectionmatrix\",{\"1\":{\"196\":2,\"199\":6,\"239\":5,\"243\":2}}],[\"protocols\",{\"1\":{\"800\":1}}],[\"protoaugment\",{\"1\":{\"561\":1}}],[\"proto\",{\"1\":{\"309\":1,\"561\":9}}],[\"prototype\",{\"1\":{\"102\":1,\"103\":1,\"104\":1,\"281\":3,\"283\":4,\"287\":3,\"296\":1,\"309\":2,\"310\":5,\"313\":2,\"455\":1,\"521\":1,\"540\":2,\"543\":17,\"544\":1,\"551\":1,\"554\":1,\"555\":1,\"562\":1,\"566\":2,\"581\":1,\"583\":1,\"586\":2,\"587\":1,\"601\":2,\"602\":1,\"603\":2,\"642\":2,\"654\":1,\"665\":1,\"670\":1,\"699\":1,\"736\":1,\"738\":1}}],[\"protectedinternalvalue\",{\"1\":{\"78\":1}}],[\"protectedvalue\",{\"1\":{\"78\":1}}],[\"protected和internal\",{\"1\":{\"78\":1}}],[\"protected\",{\"1\":{\"77\":1,\"78\":3}}],[\"problems\",{\"1\":{\"8\":1,\"9\":1,\"13\":2,\"18\":2,\"23\":2}}],[\"p\",{\"1\":{\"1\":1,\"43\":1,\"206\":9,\"218\":8,\"220\":1,\"225\":4,\"243\":3,\"287\":2,\"517\":1,\"568\":2,\"589\":1,\"608\":1,\"624\":1,\"718\":2}}],[\"进而将自身的返回结果传递给上一个\",{\"1\":{\"749\":1}}],[\"进度条\",{\"1\":{\"718\":1}}],[\"进入下一个阶段之前\",{\"1\":{\"258\":1}}],[\"进入下一次循环\",{\"1\":{\"1\":1}}],[\"进入事件循环也是需要成本的\",{\"1\":{\"257\":1}}],[\"进入一个作用域块后\",{\"1\":{\"122\":1}}],[\"进程id\",{\"1\":{\"458\":1}}],[\"进程每新打开一个文件\",{\"1\":{\"455\":1}}],[\"进程间通信\",{\"0\":{\"446\":1}}],[\"进程负载均衡和\",{\"0\":{\"443\":1}}],[\"进程来完成\",{\"1\":{\"97\":1,\"105\":1}}],[\"进程\",{\"1\":{\"95\":1,\"246\":1}}],[\"进程架构\",{\"0\":{\"94\":1}}],[\"进行简化\",{\"1\":{\"766\":1}}],[\"进行本次提交\",{\"1\":{\"662\":1}}],[\"进行处理\",{\"1\":{\"638\":1}}],[\"进行依赖收集\",{\"1\":{\"563\":1,\"670\":1,\"671\":1}}],[\"进行合并\",{\"1\":{\"546\":1}}],[\"进行\",{\"1\":{\"523\":1,\"589\":1}}],[\"进行求值时触发\",{\"1\":{\"523\":1}}],[\"进行拦截操作\",{\"1\":{\"556\":1}}],[\"进行拦截\",{\"1\":{\"521\":1,\"556\":1}}],[\"进行错误校验\",{\"1\":{\"400\":1}}],[\"进行解析之后\",{\"1\":{\"336\":1}}],[\"进行怎样的操作\",{\"1\":{\"335\":2}}],[\"进行状态迁移\",{\"1\":{\"280\":2}}],[\"进行插值\",{\"1\":{\"195\":1}}],[\"进行线性插值\",{\"1\":{\"195\":1}}],[\"进行范围约束\",{\"1\":{\"195\":1}}],[\"进行后移\",{\"1\":{\"55\":1}}],[\"进行排序\",{\"1\":{\"49\":1}}],[\"进行比较\",{\"1\":{\"1\":1,\"195\":1}}],[\"mjs\",{\"1\":{\"706\":2}}],[\"md5\",{\"1\":{\"517\":1}}],[\"msg\",{\"1\":{\"326\":2,\"584\":1,\"603\":2,\"635\":4,\"653\":3,\"718\":1}}],[\"multiple\",{\"1\":{\"629\":1,\"670\":1}}],[\"multi\",{\"1\":{\"542\":1}}],[\"multitexcoord0\",{\"1\":{\"239\":1}}],[\"mutate\",{\"1\":{\"613\":1,\"663\":1}}],[\"mutated\",{\"1\":{\"559\":1,\"565\":1,\"664\":1,\"670\":1}}],[\"mutator\",{\"1\":{\"562\":1}}],[\"mutation\",{\"1\":{\"660\":2,\"662\":2,\"663\":3}}],[\"mutations中的\",{\"1\":{\"662\":1}}],[\"mutations操作对象\",{\"1\":{\"660\":1}}],[\"mutations\",{\"1\":{\"658\":1,\"660\":1,\"662\":1,\"663\":5,\"665\":1}}],[\"mutationobserverconstructor\",{\"1\":{\"568\":1}}],[\"mutationobserver\",{\"1\":{\"250\":1,\"568\":5}}],[\"mutating\",{\"1\":{\"562\":1}}],[\"muted\",{\"1\":{\"534\":2}}],[\"mustuseprop\",{\"1\":{\"540\":2}}],[\"must\",{\"1\":{\"79\":1}}],[\"m33\",{\"1\":{\"233\":2}}],[\"m32\",{\"1\":{\"233\":2}}],[\"m31\",{\"1\":{\"233\":2}}],[\"m30\",{\"1\":{\"233\":2}}],[\"m23\",{\"1\":{\"233\":2}}],[\"m22\",{\"1\":{\"233\":4}}],[\"m21\",{\"1\":{\"233\":4}}],[\"m20\",{\"1\":{\"233\":4}}],[\"m13\",{\"1\":{\"233\":2}}],[\"m12\",{\"1\":{\"233\":4}}],[\"m11\",{\"1\":{\"233\":6}}],[\"m10\",{\"1\":{\"233\":6}}],[\"m03\",{\"1\":{\"233\":2}}],[\"m02\",{\"1\":{\"233\":4}}],[\"m01\",{\"1\":{\"233\":6}}],[\"m00\",{\"1\":{\"233\":6}}],[\"mycompanynpm\",{\"1\":{\"713\":1}}],[\"mycompany\",{\"1\":{\"713\":3}}],[\"myclass\",{\"1\":{\"74\":1,\"75\":3}}],[\"mydemo\",{\"1\":{\"517\":1}}],[\"mydog\",{\"1\":{\"84\":3}}],[\"mytarget\",{\"1\":{\"302\":2,\"303\":2,\"304\":2,\"305\":2,\"306\":2,\"307\":2,\"308\":2,\"309\":2,\"310\":2,\"311\":2,\"312\":2,\"313\":2}}],[\"mytexture\",{\"1\":{\"235\":8}}],[\"myfunc\",{\"1\":{\"296\":2}}],[\"myfloat\",{\"1\":{\"195\":6}}],[\"myshadow\",{\"1\":{\"235\":4}}],[\"mystruct\",{\"1\":{\"234\":6}}],[\"myobject\",{\"1\":{\"234\":2}}],[\"myuint\",{\"1\":{\"195\":3}}],[\"myint\",{\"1\":{\"195\":3}}],[\"my\",{\"1\":{\"160\":1,\"161\":1,\"532\":1,\"653\":4,\"713\":2}}],[\"myage\",{\"1\":{\"126\":1}}],[\"myname\",{\"1\":{\"114\":2,\"115\":3,\"120\":4,\"123\":3,\"126\":4,\"127\":3}}],[\"mynamespace\",{\"1\":{\"74\":1,\"75\":1}}],[\"mechanism\",{\"1\":{\"653\":1}}],[\"means\",{\"1\":{\"596\":1}}],[\"meaning\",{\"1\":{\"140\":1}}],[\"meaningful\",{\"1\":{\"139\":1}}],[\"measure\",{\"1\":{\"544\":1,\"751\":2}}],[\"merging\",{\"1\":{\"544\":1,\"642\":1}}],[\"mergefield\",{\"1\":{\"547\":3}}],[\"merged\",{\"1\":{\"547\":1,\"588\":2}}],[\"mergeoptions时调用normalizeprops方法进行处理\",{\"1\":{\"547\":1}}],[\"mergeoptions\",{\"0\":{\"547\":1},\"1\":{\"542\":1,\"544\":1,\"545\":1,\"546\":1,\"547\":6}}],[\"mergevnodehook\",{\"1\":{\"535\":2}}],[\"merge\",{\"1\":{\"57\":2,\"544\":1,\"603\":2,\"719\":3,\"720\":3}}],[\"mergesort\",{\"1\":{\"57\":3}}],[\"message\",{\"1\":{\"455\":1,\"718\":1,\"789\":4,\"797\":4,\"802\":1,\"803\":2}}],[\"mediump\",{\"1\":{\"190\":3,\"209\":1,\"210\":1,\"211\":1,\"215\":1,\"216\":1,\"217\":1,\"218\":1,\"224\":2,\"225\":2,\"226\":2,\"227\":1,\"241\":5,\"243\":1}}],[\"media\",{\"1\":{\"181\":1}}],[\"median\",{\"1\":{\"9\":1,\"319\":2}}],[\"meta\",{\"1\":{\"572\":3,\"644\":2,\"649\":1,\"723\":2}}],[\"metadata\",{\"1\":{\"70\":3,\"725\":1}}],[\"methodstopatch\",{\"1\":{\"562\":2}}],[\"methods\",{\"1\":{\"542\":1,\"549\":5,\"552\":4,\"553\":2,\"555\":1,\"562\":1,\"573\":1}}],[\"method\",{\"0\":{\"434\":1},\"1\":{\"77\":2,\"540\":1,\"561\":1,\"562\":5}}],[\"mob\",{\"1\":{\"713\":1}}],[\"mobin\",{\"1\":{\"43\":1}}],[\"mounting\",{\"1\":{\"588\":1}}],[\"mounted\",{\"1\":{\"570\":1,\"573\":1,\"575\":1,\"582\":5,\"588\":1,\"591\":1,\"635\":4}}],[\"mountcomponent\",{\"0\":{\"582\":1},\"1\":{\"540\":1,\"566\":3,\"580\":2,\"581\":1,\"582\":1,\"586\":1,\"602\":1}}],[\"mount\",{\"0\":{\"581\":1},\"1\":{\"540\":1,\"588\":1,\"601\":2,\"603\":2}}],[\"mouse\",{\"1\":{\"190\":2,\"211\":1,\"224\":1,\"225\":1,\"226\":2,\"227\":1}}],[\"mocha\",{\"0\":{\"484\":1}}],[\"monitoring\",{\"1\":{\"435\":1}}],[\"movingline\",{\"1\":{\"218\":2}}],[\"mov\",{\"1\":{\"218\":4}}],[\"moved\",{\"1\":{\"597\":3}}],[\"movements\",{\"1\":{\"218\":1}}],[\"move\",{\"1\":{\"215\":2,\"216\":2}}],[\"mode\",{\"1\":{\"452\":1,\"455\":2,\"464\":1,\"610\":1,\"643\":8,\"660\":1,\"663\":1,\"719\":1,\"720\":1,\"724\":1}}],[\"modem\",{\"0\":{\"419\":1},\"1\":{\"419\":2,\"420\":1}}],[\"model`\",{\"1\":{\"540\":1,\"543\":1}}],[\"model=\",{\"1\":{\"528\":2}}],[\"modelposition\",{\"1\":{\"243\":13}}],[\"modelviewprojectionmatrixtranspose\",{\"1\":{\"239\":1}}],[\"modelviewprojectionmatrixinversetranspose\",{\"1\":{\"239\":3}}],[\"modelviewprojectionmatrixinverse\",{\"1\":{\"239\":3}}],[\"modelviewprojectionmatrix\",{\"1\":{\"239\":9}}],[\"modelviewmatrixtranspose\",{\"1\":{\"239\":1}}],[\"modelviewmatrixinversetranspose\",{\"1\":{\"239\":1}}],[\"modelviewmatrixinverse\",{\"1\":{\"239\":3}}],[\"modelviewmatrix\",{\"1\":{\"239\":6}}],[\"modelmatrix\",{\"1\":{\"196\":3,\"243\":2}}],[\"models\",{\"1\":{\"139\":1}}],[\"model\",{\"0\":{\"528\":1},\"1\":{\"79\":1,\"183\":1,\"528\":5,\"585\":1}}],[\"modulename\",{\"1\":{\"663\":2}}],[\"moduleb\",{\"1\":{\"663\":3}}],[\"modulea\",{\"1\":{\"663\":3}}],[\"modulecollection\",{\"1\":{\"660\":1,\"663\":3}}],[\"modules中的三方库\",{\"1\":{\"720\":1}}],[\"modulesnamespacemap\",{\"1\":{\"660\":1,\"663\":2}}],[\"modules\",{\"1\":{\"587\":1,\"592\":1,\"595\":4,\"603\":6,\"635\":1,\"637\":6,\"660\":4,\"663\":8,\"699\":1,\"718\":2,\"720\":1,\"724\":2,\"745\":2,\"746\":1,\"747\":4,\"771\":2}}],[\"module\",{\"0\":{\"663\":1,\"766\":1},\"1\":{\"283\":1,\"575\":1,\"615\":1,\"625\":1,\"629\":1,\"630\":2,\"631\":1,\"635\":4,\"636\":3,\"637\":1,\"660\":1,\"663\":22,\"664\":4,\"699\":3,\"700\":1,\"703\":2,\"704\":2,\"705\":2,\"706\":1,\"713\":3,\"718\":2,\"719\":1,\"720\":1,\"723\":3,\"724\":2,\"727\":1,\"728\":1,\"729\":1,\"730\":1,\"735\":2,\"739\":1,\"740\":1,\"745\":2,\"748\":2,\"749\":1,\"751\":1,\"752\":1,\"755\":5,\"758\":1,\"762\":1,\"769\":1}}],[\"modulate\",{\"1\":{\"226\":1}}],[\"modf\",{\"1\":{\"195\":4}}],[\"modv\",{\"1\":{\"195\":1}}],[\"modab\",{\"1\":{\"195\":1}}],[\"modifiedoptions\",{\"1\":{\"546\":3,\"547\":3}}],[\"modified\",{\"1\":{\"546\":1,\"547\":1}}],[\"modifierre\",{\"1\":{\"534\":2}}],[\"modifiers\",{\"1\":{\"141\":2,\"534\":14}}],[\"modifier\",{\"1\":{\"141\":7,\"534\":1,\"585\":1}}],[\"modify\",{\"1\":{\"141\":1}}],[\"mod\",{\"1\":{\"62\":3,\"141\":6,\"195\":4,\"202\":24,\"206\":7,\"218\":4,\"225\":1,\"243\":2,\"637\":4}}],[\"most\",{\"1\":{\"13\":2}}],[\"m+n\",{\"1\":{\"9\":1}}],[\"m\",{\"1\":{\"9\":1,\"193\":2,\"196\":13,\"218\":5,\"651\":2,\"654\":5}}],[\"major\",{\"1\":{\"713\":2}}],[\"makecommand在执行runwebpack方法\",{\"1\":{\"771\":1}}],[\"makecommand内部执行makeoption方法\",{\"1\":{\"771\":1}}],[\"makecommand\",{\"1\":{\"771\":1}}],[\"makelocalcontext\",{\"1\":{\"663\":1}}],[\"makelocalgetterscache\",{\"1\":{\"660\":1,\"663\":1}}],[\"makeattrsmap\",{\"1\":{\"609\":1}}],[\"make\",{\"1\":{\"573\":1,\"592\":1,\"613\":1,\"629\":1,\"644\":1,\"735\":1}}],[\"makesound\",{\"1\":{\"84\":2}}],[\"markstaticroots\",{\"0\":{\"614\":1},\"1\":{\"612\":1,\"614\":3}}],[\"markstatic\",{\"0\":{\"613\":1},\"1\":{\"612\":1,\"613\":3}}],[\"markup\",{\"1\":{\"588\":1}}],[\"mark\",{\"1\":{\"534\":1,\"544\":5,\"649\":1,\"664\":2}}],[\"margin\",{\"1\":{\"174\":6,\"175\":1,\"635\":4}}],[\"mau\",{\"1\":{\"382\":1,\"388\":2,\"390\":3,\"400\":1}}],[\"mac\",{\"0\":{\"393\":1},\"1\":{\"375\":1,\"381\":1,\"390\":1,\"392\":5,\"393\":3,\"394\":1,\"398\":1,\"399\":2,\"400\":4,\"401\":5,\"405\":1,\"406\":1,\"412\":1,\"419\":1,\"455\":1,\"517\":1}}],[\"macrotask\",{\"1\":{\"251\":1,\"258\":2}}],[\"masking\",{\"1\":{\"803\":6,\"804\":1}}],[\"mask\",{\"1\":{\"240\":1,\"803\":7,\"804\":2}}],[\"mangle\",{\"1\":{\"720\":1}}],[\"mangold\",{\"1\":{\"227\":1}}],[\"management\",{\"1\":{\"585\":1}}],[\"managed\",{\"1\":{\"65\":1,\"70\":1}}],[\"manually\",{\"1\":{\"582\":1}}],[\"matchroute\",{\"1\":{\"650\":1}}],[\"matchas\",{\"1\":{\"644\":6}}],[\"matcher\",{\"1\":{\"643\":1,\"644\":1,\"650\":1}}],[\"matched\",{\"1\":{\"642\":2,\"649\":1,\"650\":1,\"651\":9,\"652\":1,\"653\":3,\"654\":2,\"656\":13}}],[\"matches\",{\"1\":{\"573\":5}}],[\"matching\",{\"1\":{\"588\":1,\"635\":1}}],[\"match\",{\"0\":{\"650\":1},\"1\":{\"534\":1,\"606\":3,\"607\":13,\"608\":10,\"611\":5,\"644\":1,\"649\":1,\"650\":5,\"653\":3,\"654\":3,\"690\":1}}],[\"material\",{\"1\":{\"234\":5,\"237\":1}}],[\"matrix\",{\"1\":{\"233\":1}}],[\"mat4x3\",{\"1\":{\"193\":1,\"233\":1}}],[\"mat4x2\",{\"1\":{\"193\":1,\"233\":1}}],[\"mat4\",{\"1\":{\"193\":1,\"196\":22,\"199\":2,\"210\":1,\"233\":6,\"239\":30}}],[\"mat3x4\",{\"1\":{\"193\":1,\"233\":1}}],[\"mat3x2\",{\"1\":{\"193\":1,\"233\":4}}],[\"mat3\",{\"1\":{\"193\":1,\"210\":1,\"233\":6,\"239\":3,\"241\":1}}],[\"mat2x4\",{\"1\":{\"193\":1,\"233\":1}}],[\"mat2x3\",{\"1\":{\"193\":3,\"233\":1}}],[\"mat2\",{\"1\":{\"193\":3,\"196\":2,\"210\":1,\"216\":2,\"217\":2,\"233\":6}}],[\"mathhelper\",{\"1\":{\"81\":2}}],[\"math\",{\"1\":{\"8\":1,\"13\":2,\"18\":2,\"23\":1,\"56\":2,\"57\":1,\"61\":2,\"79\":1,\"264\":1,\"319\":3,\"652\":1}}],[\"maybecomponent\",{\"1\":{\"615\":1}}],[\"maybecallback\",{\"1\":{\"455\":1}}],[\"may\",{\"1\":{\"139\":1,\"140\":1,\"141\":1,\"559\":1,\"565\":1,\"573\":1,\"582\":1,\"584\":1,\"588\":1,\"594\":1,\"670\":1}}],[\"maintained\",{\"1\":{\"713\":1}}],[\"maintain\",{\"1\":{\"583\":1}}],[\"mainactivity\",{\"1\":{\"517\":1}}],[\"main方法可以接受一个字符串数组作为参数\",{\"1\":{\"68\":1}}],[\"main方法通常返回一个整数类型\",{\"1\":{\"68\":1}}],[\"main方法是程序的入口点\",{\"1\":{\"68\":1}}],[\"main方法\",{\"0\":{\"68\":1}}],[\"main\",{\"1\":{\"64\":1,\"68\":1,\"75\":1,\"77\":1,\"82\":1,\"84\":1,\"89\":2,\"102\":12,\"103\":12,\"104\":12,\"190\":3,\"199\":13,\"200\":1,\"202\":16,\"204\":16,\"206\":16,\"209\":3,\"210\":1,\"211\":1,\"215\":1,\"216\":1,\"217\":1,\"218\":1,\"224\":2,\"225\":2,\"226\":2,\"227\":1,\"238\":3,\"239\":19,\"240\":6,\"243\":2,\"258\":2,\"642\":2,\"658\":1,\"718\":1}}],[\"map信息的base64编码\",{\"1\":{\"764\":1}}],[\"map的dataurl\",{\"1\":{\"764\":1}}],[\"map是以dataurl添加到eval函数的后面\",{\"1\":{\"763\":1}}],[\"map是从已转换的代码\",{\"1\":{\"757\":1}}],[\"map相关的内容\",{\"1\":{\"760\":1}}],[\"map用来和源文件映射的信息\",{\"1\":{\"759\":1}}],[\"mapping\",{\"1\":{\"765\":1}}],[\"mappings\",{\"1\":{\"759\":1}}],[\"mappedgetter\",{\"1\":{\"664\":1}}],[\"mappedstate\",{\"1\":{\"664\":1}}],[\"map和打包的代码\",{\"1\":{\"759\":1}}],[\"map源码\",{\"0\":{\"759\":1}}],[\"map文件进行引用\",{\"1\":{\"767\":1}}],[\"map文件\",{\"1\":{\"758\":1,\"761\":1,\"762\":2,\"764\":1}}],[\"mapgetters\",{\"1\":{\"664\":4}}],[\"mapstate\",{\"1\":{\"664\":4}}],[\"mapiterator\",{\"1\":{\"263\":1}}],[\"map\",{\"0\":{\"756\":1,\"757\":1,\"758\":1,\"760\":1,\"763\":1,\"764\":1,\"765\":1,\"766\":1,\"767\":1,\"768\":1},\"1\":{\"18\":1,\"104\":1,\"186\":1,\"263\":10,\"603\":1,\"629\":1,\"631\":3,\"636\":1,\"650\":1,\"651\":2,\"654\":3,\"661\":1,\"663\":1,\"723\":2,\"758\":3,\"760\":4,\"762\":1,\"766\":1,\"769\":1}}],[\"maxsize\",{\"1\":{\"718\":1}}],[\"max设置值\",{\"1\":{\"573\":1}}],[\"maxval\",{\"1\":{\"192\":4,\"195\":4}}],[\"maxvalue\",{\"1\":{\"60\":3,\"61\":4,\"195\":2}}],[\"maxdigit\",{\"1\":{\"62\":2}}],[\"maxposition\",{\"1\":{\"23\":4}}],[\"maxarea\",{\"1\":{\"13\":1}}],[\"max\",{\"1\":{\"1\":1,\"13\":1,\"23\":1,\"60\":2,\"192\":1,\"195\":6,\"204\":2,\"218\":1,\"240\":1,\"573\":3,\"652\":3}}],[\"missing\",{\"1\":{\"588\":1}}],[\"microtask\",{\"1\":{\"251\":7,\"256\":1,\"257\":1,\"258\":5}}],[\"microsoft\",{\"1\":{\"89\":2}}],[\"mipmap\",{\"1\":{\"199\":15}}],[\"mixins\",{\"1\":{\"547\":4,\"654\":1,\"663\":1}}],[\"mixin\",{\"1\":{\"542\":1,\"543\":1,\"642\":1,\"659\":2,\"665\":1}}],[\"mixcolor\",{\"1\":{\"206\":3}}],[\"mix\",{\"1\":{\"195\":4,\"200\":1,\"206\":9,\"218\":1,\"239\":2,\"243\":3}}],[\"milk\",{\"1\":{\"26\":1}}],[\"middle\",{\"1\":{\"57\":3,\"175\":1}}],[\"mid\",{\"1\":{\"7\":6,\"8\":5,\"200\":7,\"206\":7,\"243\":7}}],[\"minprogram\",{\"0\":{\"813\":1}}],[\"minchunks\",{\"1\":{\"720\":2}}],[\"minsize\",{\"1\":{\"720\":1}}],[\"minimizer\",{\"1\":{\"720\":2}}],[\"mini\",{\"1\":{\"718\":1,\"720\":1}}],[\"minicssextractplugin\",{\"1\":{\"718\":2,\"720\":2}}],[\"miniprogram\",{\"2\":{\"329\":1}}],[\"minindex\",{\"1\":{\"1\":3,\"54\":6}}],[\"mina\",{\"1\":{\"327\":1}}],[\"minval\",{\"1\":{\"192\":4,\"195\":4}}],[\"minvalue\",{\"1\":{\"61\":5,\"195\":2}}],[\"min\",{\"0\":{\"665\":1},\"1\":{\"1\":3,\"13\":1,\"18\":2,\"60\":2,\"192\":1,\"195\":6}}],[\"重要的位在前\",{\"1\":{\"803\":1}}],[\"重点\",{\"1\":{\"590\":1}}],[\"重点包括光纤结构\",{\"1\":{\"423\":1}}],[\"重点包括\",{\"1\":{\"416\":1}}],[\"重置更新队列\",{\"1\":{\"558\":1}}],[\"重置调度状态\",{\"1\":{\"558\":1}}],[\"重置\",{\"1\":{\"523\":1,\"558\":1}}],[\"重大错误\",{\"1\":{\"457\":1}}],[\"重构后的代码\",{\"1\":{\"294\":1}}],[\"重新为app\",{\"1\":{\"642\":1}}],[\"重新置为\",{\"1\":{\"554\":1}}],[\"重新计算样式\",{\"1\":{\"102\":1,\"103\":1,\"104\":1}}],[\"重新探路\",{\"1\":{\"1\":1}}],[\"重载\",{\"0\":{\"83\":1}}],[\"重复\",{\"1\":{\"549\":1}}],[\"重复调用这个迭代器对象的\",{\"1\":{\"260\":1}}],[\"重复第\",{\"1\":{\"251\":1}}],[\"重复方式等\",{\"1\":{\"199\":6}}],[\"重复步骤\",{\"1\":{\"53\":1}}],[\"重复上述操作\",{\"1\":{\"43\":1}}],[\"重复这个过程\",{\"1\":{\"1\":1}}],[\"重量\",{\"1\":{\"17\":5}}],[\"迪杰斯特拉的核心算法\",{\"1\":{\"1\":1}}],[\"和服务器端的\",{\"1\":{\"787\":1}}],[\"和负责创建\",{\"1\":{\"776\":1}}],[\"和sources是对应的关系\",{\"1\":{\"759\":1}}],[\"和set\",{\"1\":{\"305\":1,\"521\":1}}],[\"和我们编写的代码其实是有差异的\",{\"1\":{\"757\":1}}],[\"和postcss一样\",{\"1\":{\"701\":1}}],[\"和子组件的\",{\"1\":{\"621\":1}}],[\"和非\",{\"1\":{\"620\":1}}],[\"和旧的\",{\"1\":{\"587\":1}}],[\"和new\",{\"1\":{\"549\":1}}],[\"和套接字\",{\"1\":{\"455\":1}}],[\"和隧道\",{\"0\":{\"426\":1}}],[\"和家庭\",{\"1\":{\"417\":1}}],[\"和传输速率相互告知对方\",{\"1\":{\"396\":1}}],[\"和1\",{\"1\":{\"381\":1}}],[\"和参数\",{\"1\":{\"320\":1}}],[\"和一个值作为输入\",{\"1\":{\"282\":1}}],[\"和一个目标值\",{\"1\":{\"8\":1}}],[\"和浏览器中的是完全不相同的东西\",{\"1\":{\"255\":1}}],[\"和移动设备支持的精度级别不同\",{\"1\":{\"241\":1}}],[\"和纹理坐标偏移量\",{\"1\":{\"199\":2}}],[\"和纹理坐标\",{\"1\":{\"199\":1}}],[\"和矢量\",{\"1\":{\"197\":3}}],[\"和最大值\",{\"1\":{\"195\":1}}],[\"和网格列\",{\"1\":{\"177\":1}}],[\"和网格定义列\",{\"1\":{\"177\":1}}],[\"和与其中的浮动来决定\",{\"1\":{\"175\":1}}],[\"和其他元素不同\",{\"1\":{\"169\":1}}],[\"和公共语言规范\",{\"1\":{\"70\":1}}],[\"和递归条件\",{\"1\":{\"46\":1}}],[\"和目的地\",{\"1\":{\"18\":1}}],[\"和\",{\"0\":{\"153\":1,\"154\":1,\"737\":1},\"1\":{\"1\":1,\"9\":2,\"49\":1,\"66\":1,\"95\":2,\"175\":1,\"184\":1,\"190\":1,\"195\":13,\"196\":3,\"197\":1,\"230\":2,\"231\":7,\"234\":1,\"240\":1,\"241\":1,\"247\":1,\"256\":1,\"257\":1,\"260\":1,\"265\":1,\"280\":1,\"281\":3,\"282\":2,\"300\":1,\"316\":1,\"335\":1,\"420\":2,\"464\":1,\"517\":3,\"528\":4,\"540\":2,\"542\":1,\"543\":3,\"544\":1,\"550\":1,\"556\":2,\"559\":1,\"561\":1,\"571\":1,\"585\":1,\"597\":1,\"613\":1,\"638\":1,\"648\":1,\"652\":1,\"713\":4,\"737\":1,\"744\":1,\"747\":1,\"792\":1}}],[\"+|\",{\"1\":{\"607\":2}}],[\"+>\",{\"1\":{\"606\":1}}],[\"+2\",{\"1\":{\"483\":2}}],[\"+pi\",{\"1\":{\"226\":1}}],[\"+d\",{\"1\":{\"218\":1}}],[\"+b\",{\"1\":{\"218\":1}}],[\"+10\",{\"1\":{\"206\":3,\"243\":1}}],[\"+1\",{\"1\":{\"206\":3,\"217\":1,\"243\":1}}],[\"+0\",{\"1\":{\"204\":3,\"218\":3}}],[\"+function\",{\"1\":{\"102\":1,\"103\":2,\"104\":2}}],[\"+=\",{\"1\":{\"43\":1,\"77\":1,\"102\":1,\"103\":1,\"104\":1,\"202\":1,\"215\":2,\"216\":2,\"217\":2,\"218\":10,\"221\":1,\"225\":6,\"232\":2,\"237\":1,\"243\":4,\"283\":1,\"606\":2,\"635\":1,\"689\":3,\"690\":2}}],[\"+80x80\",{\"1\":{\"43\":1}}],[\"++newstartidx\",{\"1\":{\"597\":3}}],[\"++oldstartidx\",{\"1\":{\"597\":3}}],[\"++j\",{\"1\":{\"595\":1}}],[\"++uid\",{\"1\":{\"565\":1}}],[\"++i\",{\"1\":{\"260\":1,\"271\":1,\"575\":1,\"588\":2,\"595\":2,\"596\":1,\"644\":1}}],[\"++\",{\"1\":{\"60\":1,\"221\":1}}],[\"++t\",{\"1\":{\"18\":2}}],[\"++l\",{\"1\":{\"13\":1}}],[\"+\",{\"0\":{\"438\":1},\"1\":{\"1\":3,\"7\":2,\"8\":3,\"18\":5,\"23\":1,\"43\":6,\"53\":3,\"54\":1,\"55\":2,\"58\":2,\"59\":4,\"60\":2,\"61\":1,\"76\":1,\"77\":4,\"81\":1,\"102\":20,\"103\":28,\"104\":22,\"163\":1,\"164\":1,\"200\":8,\"206\":22,\"215\":1,\"216\":1,\"217\":1,\"218\":8,\"221\":2,\"225\":1,\"230\":1,\"238\":1,\"239\":1,\"243\":11,\"289\":1,\"455\":1,\"519\":1,\"534\":3,\"542\":1,\"548\":1,\"557\":1,\"568\":1,\"573\":1,\"584\":1,\"588\":6,\"597\":2,\"600\":1,\"603\":1,\"606\":4,\"607\":2,\"610\":4,\"611\":7,\"625\":5,\"626\":2,\"629\":1,\"630\":2,\"635\":61,\"638\":1,\"644\":2,\"646\":2,\"655\":2,\"656\":1,\"663\":3,\"664\":2,\"670\":1,\"690\":2,\"718\":2,\"797\":3,\"801\":1,\"803\":30}}],[\"为运行时代码创建一个额外的\",{\"1\":{\"720\":1}}],[\"为避免命名冲突\",{\"1\":{\"683\":1}}],[\"为了能够使用\",{\"1\":{\"664\":1}}],[\"为了让一个可迭代对象能够创建多个迭代器\",{\"1\":{\"266\":1}}],[\"为了让这条曲线具有动态效果\",{\"1\":{\"190\":1}}],[\"为默认值\",{\"1\":{\"663\":1}}],[\"为所有的vue组件混入\",{\"1\":{\"642\":1}}],[\"为router\",{\"1\":{\"642\":2}}],[\"为准\",{\"1\":{\"587\":1}}],[\"为undefined\",{\"1\":{\"575\":1}}],[\"为每个\",{\"1\":{\"561\":1}}],[\"为每一个网格项目\",{\"1\":{\"177\":1}}],[\"为什么要判断\",{\"1\":{\"561\":1}}],[\"为什么被拒绝的一个值\",{\"1\":{\"278\":1}}],[\"为数组的每一项设置观察\",{\"1\":{\"561\":1}}],[\"为数组\",{\"1\":{\"561\":1}}],[\"为用户\",{\"1\":{\"558\":1}}],[\"为字符串\",{\"1\":{\"555\":1}}],[\"为对象创建观察者实例\",{\"1\":{\"560\":1}}],[\"为对象\",{\"1\":{\"555\":1}}],[\"为不和层叠样式表\",{\"1\":{\"470\":1}}],[\"为1\",{\"1\":{\"372\":1}}],[\"为向下取整\",{\"1\":{\"319\":1}}],[\"为向量类型\",{\"1\":{\"195\":4}}],[\"为另一个对象或\",{\"1\":{\"310\":1}}],[\"为绕过这个问题\",{\"1\":{\"296\":1}}],[\"为开发者准备好了样板代码\",{\"1\":{\"289\":1}}],[\"为开发语言\",{\"1\":{\"65\":1}}],[\"为此\",{\"1\":{\"266\":1}}],[\"为空\",{\"1\":{\"251\":1}}],[\"为空队列\",{\"1\":{\"251\":1}}],[\"为底的对数\",{\"1\":{\"198\":2}}],[\"为自然对数的底\",{\"1\":{\"198\":1}}],[\"为负数\",{\"1\":{\"195\":2}}],[\"为正数\",{\"1\":{\"195\":2}}],[\"为\",{\"1\":{\"1\":1,\"49\":1,\"174\":1,\"184\":2,\"190\":2,\"265\":2,\"280\":4,\"282\":1,\"551\":1,\"555\":1,\"558\":1,\"563\":1,\"567\":2,\"604\":3,\"654\":1,\"803\":7}}],[\"例如影响子组件\",{\"1\":{\"622\":1}}],[\"例如处理一个计时器\",{\"1\":{\"568\":1}}],[\"例如银行网站\",{\"1\":{\"477\":1}}],[\"例如将私有\",{\"1\":{\"407\":1}}],[\"例如通信对象的ip\",{\"1\":{\"356\":1}}],[\"例如物体的表面\",{\"1\":{\"199\":1}}],[\"例如test\",{\"1\":{\"89\":1}}],[\"例如class\",{\"1\":{\"66\":1,\"67\":1}}],[\"例如\",{\"1\":{\"1\":1,\"66\":1,\"74\":1,\"75\":1,\"76\":1,\"163\":1,\"164\":1,\"165\":1,\"195\":4,\"199\":3,\"232\":5,\"234\":1,\"238\":3,\"241\":2,\"280\":1,\"312\":1,\"335\":1,\"699\":1,\"713\":1,\"749\":1}}],[\"对原来的索引进行异或对应的掩码字节\",{\"1\":{\"804\":1}}],[\"对索引\",{\"1\":{\"804\":1}}],[\"对要提取的trunk进行分组\",{\"1\":{\"720\":1}}],[\"对比\",{\"0\":{\"673\":1},\"1\":{\"652\":1}}],[\"对选择器\",{\"1\":{\"624\":1}}],[\"对它的优化成本将大于优化后带来的收益\",{\"1\":{\"614\":1}}],[\"对新值进行观察\",{\"1\":{\"563\":1}}],[\"对数据进行\",{\"1\":{\"556\":2}}],[\"对项目进行一些自动化测试\",{\"1\":{\"517\":1}}],[\"对信号进行合成来表示\",{\"1\":{\"420\":1}}],[\"对路由表进行维护的方法\",{\"1\":{\"399\":1}}],[\"对较大的数据进行拆分\",{\"0\":{\"363\":1}}],[\"对url\",{\"1\":{\"336\":1}}],[\"对什么\",{\"1\":{\"335\":2}}],[\"对设置隐藏的foo\",{\"1\":{\"317\":1}}],[\"对应的值\",{\"1\":{\"554\":1}}],[\"对应的\",{\"1\":{\"554\":1,\"613\":1}}],[\"对应的那一行程序就会被执行\",{\"1\":{\"343\":1}}],[\"对应的边集合\",{\"1\":{\"1\":1}}],[\"对应\",{\"0\":{\"302\":1,\"303\":1,\"304\":1,\"305\":1,\"306\":1,\"307\":1,\"308\":1,\"309\":1,\"310\":1,\"311\":1,\"312\":1,\"313\":1,\"314\":1}}],[\"对外提供统一的\",{\"1\":{\"255\":1}}],[\"对外显示方面\",{\"1\":{\"184\":1}}],[\"对外显示\",{\"1\":{\"183\":1}}],[\"对象也提供了很多关键时机的回调\",{\"1\":{\"737\":1}}],[\"对象表现了当前的模块资源\",{\"1\":{\"737\":1}}],[\"对象代表了一次资源版本构建\",{\"1\":{\"737\":1}}],[\"对象代表了完整的\",{\"1\":{\"737\":1}}],[\"对象结构\",{\"1\":{\"670\":1}}],[\"对象上存在\",{\"1\":{\"560\":1}}],[\"对象上\",{\"1\":{\"551\":1}}],[\"对象的引用\",{\"1\":{\"737\":1,\"738\":1}}],[\"对象的属性添加\",{\"1\":{\"561\":1}}],[\"对象的每个属性设置为响应式\",{\"1\":{\"551\":1}}],[\"对象的新原型\",{\"1\":{\"310\":1}}],[\"对象中\",{\"1\":{\"664\":1}}],[\"对象中的属性到\",{\"1\":{\"554\":1}}],[\"对象中的属性不能出现重复\",{\"1\":{\"549\":1}}],[\"对象中异步执行\",{\"1\":{\"253\":1}}],[\"对象\",{\"1\":{\"253\":2,\"263\":1,\"265\":1,\"542\":1,\"551\":2,\"636\":2,\"653\":1,\"735\":1,\"738\":2}}],[\"对象已创建\",{\"1\":{\"82\":2}}],[\"对片段着色语言是可选项\",{\"1\":{\"241\":1}}],[\"对纹理坐标进行变换\",{\"1\":{\"239\":1}}],[\"对从纹理中获取的颜色进行梯度计算\",{\"1\":{\"199\":1}}],[\"对一个输入值\",{\"1\":{\"195\":1}}],[\"对\",{\"1\":{\"195\":2,\"523\":1,\"556\":1,\"636\":1,\"766\":1}}],[\"对内方面\",{\"1\":{\"187\":1}}],[\"对内显示\",{\"1\":{\"183\":1}}],[\"对于一个带有动态参数的路径\",{\"1\":{\"648\":1}}],[\"对于以上代码来说\",{\"1\":{\"257\":1}}],[\"对于sampler2d类型的采样器\",{\"1\":{\"199\":3}}],[\"对于sampler2d和samplercube类型的采样器\",{\"1\":{\"199\":2}}],[\"对于向量\",{\"1\":{\"195\":2}}],[\"对于从左往右的格式化\",{\"1\":{\"174\":1}}],[\"对于该节点的邻居\",{\"1\":{\"1\":1}}],[\"对单独的层重新计算位置\",{\"1\":{\"103\":1,\"104\":1}}],[\"对每个桶进行排序\",{\"1\":{\"61\":1}}],[\"对每一对相邻元素作同样的工作\",{\"1\":{\"53\":1}}],[\"对桶内数据进行排序\",{\"1\":{\"61\":1}}],[\"对左右两边数组重复上述操作\",{\"1\":{\"58\":1}}],[\"对挑选出的\",{\"1\":{\"43\":1}}],[\"对这两个子数组进行快速排序\",{\"1\":{\"43\":1}}],[\"的二进制表达采用网络序\",{\"1\":{\"803\":1}}],[\"的二进制表示为\",{\"1\":{\"195\":4}}],[\"的转换计算公式是公开的\",{\"1\":{\"801\":1}}],[\"的计算\",{\"0\":{\"801\":1}}],[\"的版本\",{\"1\":{\"799\":1}}],[\"的版本高于\",{\"1\":{\"713\":1}}],[\"的协议\",{\"1\":{\"798\":1}}],[\"的握手通道\",{\"1\":{\"796\":1}}],[\"的利用率\",{\"1\":{\"793\":1}}],[\"的推送技术\",{\"1\":{\"792\":1}}],[\"的插件机制\",{\"0\":{\"776\":1}}],[\"的简写\",{\"1\":{\"755\":3}}],[\"的情况下\",{\"1\":{\"748\":1}}],[\"的优先级\",{\"0\":{\"748\":1}}],[\"的分类\",{\"0\":{\"746\":1}}],[\"的使用\",{\"0\":{\"745\":1}}],[\"的使用会受到限制\",{\"1\":{\"324\":1}}],[\"的主环境\",{\"1\":{\"737\":1}}],[\"的主要作用是标记静态节点\",{\"1\":{\"603\":1}}],[\"的顺序调用\",{\"1\":{\"726\":2}}],[\"的顺序执行\",{\"1\":{\"281\":2}}],[\"的默认浏览器\",{\"1\":{\"713\":1}}],[\"的默认值\",{\"1\":{\"551\":1}}],[\"的网站上\",{\"1\":{\"712\":1}}],[\"的工具\",{\"1\":{\"712\":1}}],[\"的浏览器\",{\"1\":{\"712\":2}}],[\"的组合\",{\"1\":{\"696\":1}}],[\"的节点\",{\"1\":{\"675\":1}}],[\"的函数\",{\"1\":{\"670\":1}}],[\"的get\",{\"1\":{\"670\":1}}],[\"的子类\",{\"1\":{\"656\":1}}],[\"的子节点\",{\"1\":{\"584\":1}}],[\"的postloader\",{\"1\":{\"638\":1}}],[\"的作用\",{\"1\":{\"636\":1,\"801\":1}}],[\"的作用很简单\",{\"1\":{\"568\":1}}],[\"的元素包含一个递归子组件\",{\"1\":{\"624\":1}}],[\"的影响\",{\"1\":{\"621\":1}}],[\"的内容不是在纯文本标签里\",{\"1\":{\"606\":1}}],[\"的内容是一个存放网页据的文件名或者是一个cgi\",{\"1\":{\"335\":1}}],[\"的字符串以及\",{\"1\":{\"603\":1}}],[\"的字面意思就是透明\",{\"1\":{\"151\":1}}],[\"的性能\",{\"1\":{\"603\":1}}],[\"的下一个兄弟节点\",{\"1\":{\"591\":1}}],[\"的父节点\",{\"1\":{\"591\":1}}],[\"的上下文环境\",{\"1\":{\"584\":1}}],[\"的上百个不同频率的波进行合成\",{\"1\":{\"421\":1}}],[\"的subs数组中添加watcher\",{\"1\":{\"563\":1}}],[\"的读取行为\",{\"1\":{\"563\":1}}],[\"的读取和设置操作\",{\"1\":{\"563\":1}}],[\"的属性描述符\",{\"1\":{\"563\":1}}],[\"的第二个参数\",{\"1\":{\"558\":1}}],[\"的第一个参数\",{\"1\":{\"552\":1}}],[\"的结果\",{\"1\":{\"554\":1,\"725\":1}}],[\"的每个\",{\"1\":{\"551\":1}}],[\"的准备工作\",{\"1\":{\"544\":1}}],[\"的别名\",{\"1\":{\"544\":1,\"622\":1}}],[\"的配置文件\",{\"1\":{\"517\":1}}],[\"的缩写混淆\",{\"1\":{\"470\":1}}],[\"的缩放矩阵\",{\"1\":{\"233\":1}}],[\"的启动流程\",{\"1\":{\"452\":1}}],[\"的概念\",{\"0\":{\"451\":1}}],[\"的方式不需要提前将\",{\"1\":{\"517\":1}}],[\"的方式\",{\"1\":{\"420\":1}}],[\"的方法\",{\"1\":{\"261\":1}}],[\"的技术\",{\"1\":{\"420\":1}}],[\"的记录表示\",{\"1\":{\"402\":1}}],[\"的意思就是以两根信号线为一组缠绕在一起\",{\"1\":{\"389\":1}}],[\"的tcp\",{\"1\":{\"372\":1}}],[\"的名称\",{\"1\":{\"345\":1}}],[\"的一个函数\",{\"1\":{\"559\":1}}],[\"的一个设置项目事先设置好的\",{\"1\":{\"343\":1}}],[\"的一个或多个十进制数字\",{\"1\":{\"163\":1}}],[\"的数据\",{\"1\":{\"343\":1,\"584\":1}}],[\"的数值\",{\"1\":{\"154\":1}}],[\"的规格\",{\"1\":{\"343\":1}}],[\"的其中一种程序组件\",{\"1\":{\"341\":1}}],[\"的ip\",{\"1\":{\"341\":1,\"343\":1}}],[\"的部分称为方法\",{\"1\":{\"335\":1}}],[\"的部分称为ur\",{\"1\":{\"335\":1}}],[\"的目录\",{\"1\":{\"334\":1}}],[\"的文件名\",{\"1\":{\"335\":1}}],[\"的文件\",{\"1\":{\"334\":1}}],[\"的返回值\",{\"1\":{\"309\":1,\"310\":1,\"320\":1,\"603\":1}}],[\"的所有不可配置的自有属性\",{\"1\":{\"308\":1}}],[\"的键\",{\"1\":{\"299\":1}}],[\"的操作\",{\"1\":{\"297\":1}}],[\"的布尔值\",{\"1\":{\"294\":1}}],[\"的空代理\",{\"1\":{\"289\":1}}],[\"的递归特性\",{\"1\":{\"282\":1}}],[\"的实例\",{\"1\":{\"776\":1}}],[\"的实例通常可以很好地协同\",{\"1\":{\"300\":1}}],[\"的实例应该迭代limit\",{\"1\":{\"266\":1}}],[\"的实现更具有通用性\",{\"1\":{\"282\":1}}],[\"的特性使得\",{\"1\":{\"282\":1}}],[\"的原因作为它的第一个参数\",{\"1\":{\"281\":1}}],[\"的状态一旦更改就不会再改变\",{\"1\":{\"282\":1}}],[\"的状态\",{\"1\":{\"268\":1,\"282\":1,\"663\":2}}],[\"的遍历过程是这样的\",{\"1\":{\"265\":1}}],[\"的迭代结果对象\",{\"1\":{\"260\":1}}],[\"的对象类型数据添加一个\",{\"1\":{\"560\":1}}],[\"的对象\",{\"1\":{\"260\":1}}],[\"的任务队列是每个\",{\"1\":{\"258\":1}}],[\"的时间\",{\"1\":{\"257\":1}}],[\"的阶段图可以知道\",{\"1\":{\"256\":1}}],[\"的话且\",{\"1\":{\"256\":1}}],[\"的话\",{\"1\":{\"256\":1,\"282\":1}}],[\"的回调函数计算实际的值\",{\"1\":{\"554\":1}}],[\"的回调函数来得到\",{\"1\":{\"554\":1}}],[\"的回调函数\",{\"1\":{\"256\":1,\"258\":1,\"559\":1}}],[\"的回调会被加入\",{\"1\":{\"256\":1}}],[\"的回调\",{\"1\":{\"256\":2}}],[\"的执行\",{\"1\":{\"255\":1}}],[\"的运行机制如下\",{\"1\":{\"255\":1}}],[\"的运行环境\",{\"1\":{\"70\":1}}],[\"的解析引擎\",{\"1\":{\"255\":1}}],[\"的过程中\",{\"1\":{\"251\":1,\"603\":1}}],[\"的过渡值\",{\"1\":{\"190\":2}}],[\"的透视投影矩阵\",{\"1\":{\"233\":1}}],[\"的旋转矩阵\",{\"1\":{\"233\":1}}],[\"的矩阵\",{\"1\":{\"233\":4}}],[\"的浮点型向量\",{\"1\":{\"231\":3}}],[\"的浮点数矩阵\",{\"1\":{\"196\":2}}],[\"的和\",{\"1\":{\"230\":1}}],[\"的宽度和高度\",{\"1\":{\"199\":1}}],[\"的纵向变化率\",{\"1\":{\"199\":2}}],[\"的横向变化率\",{\"1\":{\"199\":2}}],[\"的像素偏移量\",{\"1\":{\"199\":2}}],[\"的颜色值\",{\"1\":{\"199\":1}}],[\"的纹理偏移值\",{\"1\":{\"199\":1}}],[\"的纹理坐标\",{\"1\":{\"199\":9}}],[\"的纹理采样器\",{\"1\":{\"199\":7}}],[\"的反双曲正切值\",{\"1\":{\"198\":1}}],[\"的反余弦值\",{\"1\":{\"198\":1}}],[\"的反正弦值\",{\"1\":{\"198\":1}}],[\"的反射矢量\",{\"1\":{\"197\":1}}],[\"的平方根的倒数\",{\"1\":{\"198\":1}}],[\"的平方根\",{\"1\":{\"198\":1}}],[\"的平均值\",{\"1\":{\"195\":1}}],[\"的幂\",{\"1\":{\"198\":1}}],[\"的折射率的比值\",{\"1\":{\"197\":1}}],[\"的折射率与介质\",{\"1\":{\"197\":1}}],[\"的单位矢量\",{\"1\":{\"197\":1}}],[\"的叉积\",{\"1\":{\"197\":1}}],[\"的点积\",{\"1\":{\"197\":1}}],[\"的长度\",{\"1\":{\"197\":1,\"803\":1}}],[\"的行为至少在某种程度上类似于\",{\"1\":{\"282\":1}}],[\"的行为\",{\"1\":{\"272\":1,\"287\":1}}],[\"的行和列互换\",{\"1\":{\"196\":1}}],[\"的行列式值\",{\"1\":{\"196\":1}}],[\"的行列式\",{\"1\":{\"196\":1}}],[\"的处理方式相同\",{\"1\":{\"195\":2}}],[\"的整数部分\",{\"1\":{\"195\":1}}],[\"的余数\",{\"1\":{\"195\":1}}],[\"的小数部分和整数部分\",{\"1\":{\"195\":1}}],[\"的小数部分\",{\"1\":{\"195\":2}}],[\"的最后一个分片\",{\"1\":{\"803\":2}}],[\"的最小整数\",{\"1\":{\"195\":1}}],[\"的最大整数\",{\"1\":{\"195\":4}}],[\"的最大值为\",{\"1\":{\"13\":1}}],[\"的符号\",{\"1\":{\"195\":1}}],[\"的绝对值\",{\"1\":{\"195\":1}}],[\"的值决定了应该如何解析后续的数据载荷\",{\"1\":{\"803\":1}}],[\"的值作为它的第一个参数\",{\"1\":{\"281\":1}}],[\"的值作为\",{\"1\":{\"253\":1}}],[\"的值为对象的情况\",{\"1\":{\"563\":1}}],[\"的值为\",{\"1\":{\"199\":4}}],[\"的值为1\",{\"1\":{\"190\":1}}],[\"的值\",{\"1\":{\"198\":3,\"236\":1,\"271\":1}}],[\"的值被设为0\",{\"1\":{\"190\":1}}],[\"的值进行插值计算\",{\"1\":{\"190\":1}}],[\"的值不同\",{\"1\":{\"187\":1}}],[\"的值是当前像素点的横坐标\",{\"1\":{\"190\":1}}],[\"的值是\",{\"1\":{\"134\":1}}],[\"的基础概念之一\",{\"1\":{\"183\":1}}],[\"的容器则渲染为一个行内元素\",{\"1\":{\"176\":1}}],[\"的容器被渲染为一个块级元素\",{\"1\":{\"176\":1}}],[\"的形成条件非常简单\",{\"1\":{\"175\":1}}],[\"的区域不会和浮动区域重叠\",{\"1\":{\"174\":1}}],[\"的区域不会与\",{\"1\":{\"174\":1}}],[\"的高度时\",{\"1\":{\"174\":2}}],[\"的左边相接触\",{\"1\":{\"174\":1}}],[\"的左边\",{\"1\":{\"174\":1}}],[\"的两个相邻盒子的\",{\"1\":{\"174\":1}}],[\"的固定宽高比的空盒子\",{\"1\":{\"170\":1,\"171\":1}}],[\"的边框颜色\",{\"1\":{\"152\":1}}],[\"的另外一端是渲染进程的\",{\"1\":{\"134\":1}}],[\"的模块\",{\"1\":{\"134\":1}}],[\"的继承和层叠规则计算\",{\"1\":{\"100\":1}}],[\"的进程架构\",{\"0\":{\"95\":1}}],[\"的类型\",{\"1\":{\"193\":1}}],[\"的类型依据\",{\"1\":{\"187\":1}}],[\"的类\",{\"1\":{\"77\":1}}],[\"的信息性描述\",{\"1\":{\"70\":1}}],[\"的标准化描述\",{\"1\":{\"70\":1}}],[\"的关系\",{\"0\":{\"65\":1}}],[\"的图片分成方块\",{\"1\":{\"43\":1}}],[\"的位置\",{\"1\":{\"23\":1,\"557\":1}}],[\"的正序\",{\"1\":{\"9\":1}}],[\"的算法解决此问题\",{\"1\":{\"8\":1}}],[\"的权\",{\"1\":{\"1\":2}}],[\"的\",{\"1\":{\"1\":1,\"18\":1,\"152\":1,\"187\":1,\"198\":5,\"232\":1,\"256\":1,\"281\":1,\"452\":1,\"483\":1,\"613\":1,\"652\":1,\"671\":1,\"713\":1,\"765\":2,\"766\":1,\"776\":1,\"793\":1,\"795\":1}}],[\"找不到匹配路由时选择默认路由\",{\"0\":{\"402\":1}}],[\"找出其中的静态节点\",{\"1\":{\"603\":1}}],[\"找出数组中的最大值\",{\"1\":{\"60\":1}}],[\"找出播放次数最多的歌曲\",{\"1\":{\"49\":1}}],[\"找出基线条件\",{\"1\":{\"43\":1}}],[\"找出最便宜的节点\",{\"1\":{\"1\":1}}],[\"找到对应mutations里面的函数\",{\"1\":{\"665\":1}}],[\"找到对应节点\",{\"1\":{\"1\":1}}],[\"找到老节点中每个节点\",{\"1\":{\"597\":1}}],[\"找到它大于的\",{\"1\":{\"557\":1}}],[\"找到相应的路由记录后将包转发到这条路由的目标网关\",{\"1\":{\"418\":1}}],[\"找到列表的中间值\",{\"1\":{\"7\":1}}],[\"找到最短路径\",{\"1\":{\"1\":2}}],[\"<并且<=也可以使用\",{\"1\":{\"713\":1}}],[\"<和<=工作过\",{\"1\":{\"713\":1}}],[\"<li><a\",{\"1\":{\"635\":24}}],[\"<ul>\",{\"1\":{\"635\":6}}],[\"<url>\",{\"1\":{\"157\":1}}],[\"<a\",{\"1\":{\"635\":2}}],[\"<application\",{\"1\":{\"517\":1}}],[\"<br>\",{\"1\":{\"635\":3}}],[\"<base\",{\"1\":{\"528\":1}}],[\"<h3>ecosystem<\",{\"1\":{\"635\":2}}],[\"<h3>essential\",{\"1\":{\"635\":2}}],[\"<h3>installed\",{\"1\":{\"635\":2}}],[\"<h1>hello<\",{\"1\":{\"689\":1,\"690\":1}}],[\"<h1>\",{\"1\":{\"635\":2}}],[\"<hr>\",{\"1\":{\"152\":1}}],[\"<p>\",{\"1\":{\"588\":1,\"635\":2}}],[\"<percentage>\",{\"1\":{\"162\":1}}],[\"<router\",{\"1\":{\"572\":2}}],[\"<return\",{\"1\":{\"199\":3}}],[\"<keep\",{\"1\":{\"570\":2,\"571\":4,\"572\":1}}],[\"<transition\",{\"1\":{\"597\":1}}],[\"<tbody>\",{\"1\":{\"588\":1}}],[\"<template>\",{\"1\":{\"534\":1,\"554\":1,\"615\":1,\"619\":2,\"635\":1,\"677\":1}}],[\"<type>\",{\"1\":{\"236\":12}}],[\"<meta\",{\"1\":{\"517\":1}}],[\"<2\",{\"1\":{\"328\":1}}],[\"<component\",{\"1\":{\"571\":4}}],[\"<closed>\",{\"1\":{\"274\":2}}],[\"<custom\",{\"1\":{\"157\":1,\"158\":1}}],[\"<value>\",{\"1\":{\"236\":2}}],[\"<video>\",{\"1\":{\"169\":1}}],[\"<name>\",{\"1\":{\"236\":12}}],[\"<number>\",{\"1\":{\"162\":1}}],[\"<成员列表>\",{\"1\":{\"234\":2}}],[\"<结构体名>\",{\"1\":{\"234\":2}}],[\"<>\",{\"1\":{\"221\":1,\"607\":1}}],[\"<dimension>\",{\"1\":{\"162\":1}}],[\"<div>2<\",{\"1\":{\"677\":1}}],[\"<div>1<\",{\"1\":{\"677\":1}}],[\"<div>i\",{\"1\":{\"653\":1}}],[\"<div><\",{\"1\":{\"601\":1,\"607\":3}}],[\"<div>\",{\"1\":{\"554\":2,\"606\":1}}],[\"<div\",{\"1\":{\"139\":1,\"140\":1,\"141\":3,\"534\":1,\"607\":2,\"615\":1,\"619\":2,\"635\":2}}],[\"<style\",{\"1\":{\"619\":1,\"620\":1,\"622\":1,\"631\":1,\"635\":1}}],[\"<style>\",{\"1\":{\"619\":2,\"620\":1}}],[\"<string>\",{\"1\":{\"157\":1}}],[\"<script>\",{\"1\":{\"635\":1}}],[\"<script\",{\"1\":{\"615\":1,\"795\":1}}],[\"<suspended>\",{\"1\":{\"268\":2,\"274\":2}}],[\"<span\",{\"1\":{\"140\":1}}],[\"<iframe\",{\"1\":{\"795\":1}}],[\"<img\",{\"1\":{\"529\":1}}],[\"<img>\",{\"1\":{\"152\":1}}],[\"<integer>\",{\"1\":{\"162\":1}}],[\"<input\",{\"1\":{\"141\":2,\"528\":2,\"532\":1,\"534\":1,\"607\":1,\"615\":1}}],[\"<ident>\",{\"1\":{\"157\":1}}],[\"<form\",{\"1\":{\"141\":1}}],[\"<=1\",{\"1\":{\"218\":2}}],[\"<=\",{\"1\":{\"7\":1,\"8\":2,\"13\":1,\"18\":2,\"57\":1,\"58\":1,\"218\":1,\"221\":1,\"260\":1,\"264\":5,\"266\":2,\"597\":2,\"653\":1,\"713\":1}}],[\"<\",{\"1\":{\"1\":6,\"13\":1,\"23\":1,\"53\":2,\"54\":3,\"55\":1,\"56\":2,\"57\":1,\"58\":2,\"59\":4,\"60\":2,\"61\":6,\"62\":3,\"79\":1,\"120\":1,\"139\":1,\"140\":1,\"141\":4,\"202\":3,\"218\":3,\"224\":2,\"225\":2,\"232\":2,\"240\":1,\"471\":1,\"472\":2,\"473\":1,\"534\":3,\"535\":2,\"547\":1,\"548\":1,\"554\":3,\"555\":1,\"557\":1,\"558\":1,\"561\":2,\"563\":1,\"564\":1,\"568\":1,\"571\":9,\"572\":1,\"575\":1,\"582\":1,\"588\":3,\"595\":3,\"596\":1,\"606\":11,\"608\":1,\"609\":1,\"611\":2,\"613\":2,\"614\":2,\"615\":3,\"619\":4,\"620\":2,\"622\":1,\"635\":16,\"644\":2,\"650\":1,\"652\":1,\"653\":1,\"668\":1,\"670\":1,\"677\":1,\"689\":5,\"690\":1,\"780\":1,\"795\":1,\"804\":1}}],[\"ihfmdf8a0aqxbwqo1pkgda==\",{\"1\":{\"799\":1,\"801\":1}}],[\"i<numcpus\",{\"1\":{\"445\":1}}],[\"i=0\",{\"1\":{\"445\":1}}],[\"ignoreassetspattern\",{\"1\":{\"517\":1}}],[\"ignore\",{\"1\":{\"280\":5,\"283\":5,\"452\":1,\"517\":1,\"544\":3,\"557\":1,\"558\":1,\"565\":1,\"573\":1,\"583\":1,\"601\":3,\"603\":1,\"609\":1,\"610\":1,\"656\":1}}],[\"io多路复用epoll\",{\"1\":{\"432\":1}}],[\"ios\",{\"1\":{\"324\":1,\"568\":1,\"713\":3}}],[\"io\",{\"0\":{\"787\":1},\"1\":{\"220\":2,\"257\":2,\"787\":1,\"788\":2,\"789\":4}}],[\"iresolution\",{\"1\":{\"218\":2,\"225\":3}}],[\"iy\",{\"1\":{\"206\":6,\"243\":2}}],[\"ix\",{\"1\":{\"206\":6,\"243\":2}}],[\"ip与以太网的包收发操\",{\"0\":{\"373\":1}}],[\"ip数据\",{\"0\":{\"353\":1}}],[\"ip地址\",{\"0\":{\"339\":1}}],[\"ipart\",{\"1\":{\"195\":3}}],[\"ip\",{\"0\":{\"408\":1,\"448\":1},\"1\":{\"195\":3,\"339\":1,\"343\":1,\"374\":1,\"375\":4,\"397\":1,\"398\":3,\"399\":2,\"401\":1,\"403\":1,\"405\":3,\"406\":3,\"409\":3,\"412\":1,\"418\":2,\"458\":1}}],[\"iphone\",{\"1\":{\"17\":3}}],[\"ivec\",{\"1\":{\"199\":9}}],[\"ivec4\",{\"1\":{\"193\":1,\"231\":2}}],[\"ivec3\",{\"1\":{\"193\":1,\"231\":4}}],[\"ivec2\",{\"1\":{\"193\":3,\"199\":20,\"231\":2}}],[\"imliml\",{\"1\":{\"517\":1}}],[\"implements\",{\"1\":{\"521\":1,\"565\":1,\"566\":1}}],[\"implementation\",{\"1\":{\"517\":10}}],[\"import文件\",{\"1\":{\"637\":1}}],[\"import\",{\"1\":{\"464\":3,\"538\":2,\"539\":1,\"540\":7,\"541\":2,\"543\":5,\"572\":1,\"602\":1,\"625\":1,\"629\":2,\"635\":4,\"637\":1,\"638\":1,\"641\":3,\"653\":2,\"658\":2,\"699\":1,\"745\":1,\"747\":4}}],[\"impact\",{\"1\":{\"104\":1}}],[\"immediately\",{\"1\":{\"534\":1,\"557\":1}}],[\"immediate\",{\"1\":{\"257\":4,\"555\":5,\"667\":1,\"670\":3}}],[\"img\",{\"1\":{\"186\":1,\"187\":2,\"529\":1,\"584\":1,\"773\":1}}],[\"images\",{\"1\":{\"161\":1,\"718\":1}}],[\"image\",{\"1\":{\"161\":1,\"218\":1,\"723\":1,\"724\":1,\"725\":1,\"729\":1,\"730\":1,\"751\":1,\"752\":1,\"758\":1,\"759\":1,\"761\":4,\"762\":2,\"763\":2,\"764\":3,\"765\":1,\"766\":2,\"768\":1,\"771\":13,\"778\":1,\"779\":1,\"780\":1,\"781\":1,\"782\":1,\"783\":1}}],[\"ie5\",{\"1\":{\"788\":1}}],[\"ie\",{\"1\":{\"606\":1,\"609\":1,\"610\":1,\"710\":1,\"713\":4}}],[\"ie6\",{\"1\":{\"561\":1}}],[\"ie全族\",{\"1\":{\"147\":1}}],[\"ie7浏览器增加haslayout\",{\"1\":{\"145\":1}}],[\"iter\",{\"1\":{\"261\":3,\"265\":10}}],[\"iterate\",{\"1\":{\"551\":1}}],[\"iteratorresult\",{\"1\":{\"265\":2}}],[\"iterator\",{\"0\":{\"261\":1},\"1\":{\"260\":4,\"261\":2,\"263\":14,\"264\":2,\"265\":4,\"266\":3,\"273\":1,\"651\":3,\"655\":4,\"662\":1}}],[\"iterable\",{\"1\":{\"260\":2,\"263\":3,\"273\":1}}],[\"items\",{\"1\":{\"561\":4}}],[\"item\",{\"1\":{\"158\":1,\"160\":1,\"177\":2,\"184\":1,\"327\":4,\"663\":1}}],[\"itime+7\",{\"1\":{\"218\":1}}],[\"itime\",{\"1\":{\"218\":10,\"225\":3}}],[\"it\",{\"1\":{\"139\":1,\"141\":1,\"216\":1,\"547\":1,\"557\":1,\"575\":4,\"583\":1,\"584\":1,\"585\":2,\"588\":1,\"590\":3,\"591\":2,\"596\":1,\"606\":1,\"610\":1,\"614\":3,\"642\":1,\"644\":1,\"646\":2,\"649\":1,\"653\":3,\"656\":1}}],[\"itself\",{\"1\":{\"282\":1,\"283\":1,\"575\":1}}],[\"its\",{\"1\":{\"139\":1,\"140\":1,\"141\":1,\"557\":2,\"558\":2,\"582\":1,\"584\":1,\"586\":1,\"590\":1}}],[\"isenvproduction\",{\"1\":{\"718\":2}}],[\"isesmodule\",{\"1\":{\"653\":1}}],[\"iserror\",{\"1\":{\"651\":2,\"653\":1,\"655\":1}}],[\"isextensible\",{\"0\":{\"311\":2},\"1\":{\"311\":11,\"312\":1,\"560\":1}}],[\"isonce\",{\"1\":{\"596\":1}}],[\"isobject\",{\"1\":{\"283\":2,\"455\":1,\"559\":1,\"560\":1,\"565\":1,\"585\":1,\"670\":1}}],[\"isabsolute\",{\"1\":{\"626\":1}}],[\"isasyncplaceholder\",{\"1\":{\"589\":1,\"596\":2}}],[\"isarray\",{\"1\":{\"547\":1,\"555\":1,\"560\":1,\"561\":1,\"563\":2,\"573\":1,\"583\":1,\"584\":3,\"644\":1,\"654\":1,\"668\":1,\"738\":1}}],[\"isunarytag\",{\"1\":{\"604\":2,\"606\":2,\"608\":1}}],[\"isundef\",{\"1\":{\"585\":2,\"588\":3,\"589\":1,\"596\":1,\"597\":5}}],[\"isusingmicrotask\",{\"1\":{\"568\":2}}],[\"ismounted\",{\"1\":{\"582\":2}}],[\"ismater\",{\"1\":{\"445\":1}}],[\"is=\",{\"1\":{\"571\":4,\"572\":1}}],[\"isinitialpatch\",{\"1\":{\"588\":3}}],[\"isinfor\",{\"1\":{\"614\":4}}],[\"isinf\",{\"1\":{\"195\":4}}],[\"isie\",{\"1\":{\"568\":1,\"609\":1,\"610\":1}}],[\"isios\",{\"1\":{\"568\":1}}],[\"isbuiltintag\",{\"1\":{\"613\":1}}],[\"isbeingdestroyed\",{\"1\":{\"565\":1}}],[\"isblack\",{\"1\":{\"230\":2}}],[\"isrecorded\",{\"1\":{\"635\":1}}],[\"isrealelement\",{\"1\":{\"588\":3}}],[\"isreactivated\",{\"1\":{\"575\":2,\"591\":2}}],[\"isregexp\",{\"1\":{\"573\":1}}],[\"isref\",{\"1\":{\"560\":1,\"563\":3}}],[\"isreservedtag\",{\"1\":{\"584\":1,\"612\":1}}],[\"isreserved\",{\"1\":{\"553\":1}}],[\"isrenderwatcher\",{\"1\":{\"521\":1,\"565\":2,\"566\":2,\"582\":1}}],[\"isrootinsert\",{\"1\":{\"590\":1}}],[\"isroot\",{\"1\":{\"551\":2,\"663\":2}}],[\"ispostloader\",{\"1\":{\"626\":1}}],[\"isplatformreservedtag\",{\"1\":{\"612\":1,\"613\":2}}],[\"isplaintextelement\",{\"1\":{\"606\":1}}],[\"isplainobject\",{\"1\":{\"547\":2,\"553\":1,\"555\":2,\"560\":1,\"669\":1,\"670\":1}}],[\"ispatchable\",{\"1\":{\"588\":1,\"592\":1,\"596\":1}}],[\"ispreloader\",{\"1\":{\"626\":1}}],[\"isprimitive\",{\"1\":{\"584\":1}}],[\"isproduction\",{\"1\":{\"625\":1}}],[\"isprototypeof\",{\"1\":{\"309\":1}}],[\"ispromise\",{\"1\":{\"283\":3,\"663\":1,\"670\":1}}],[\"isnonphrasingtag\",{\"1\":{\"608\":1}}],[\"isnavigationfailure\",{\"1\":{\"649\":1,\"651\":1}}],[\"isnative\",{\"1\":{\"568\":3}}],[\"isnan\",{\"1\":{\"195\":4}}],[\"isn\",{\"1\":{\"547\":1}}],[\"isclose\",{\"1\":{\"689\":3}}],[\"iscloned\",{\"1\":{\"596\":1}}],[\"iscssloader\",{\"1\":{\"630\":1}}],[\"iscomment属性是否为true\",{\"1\":{\"590\":1}}],[\"iscomment\",{\"1\":{\"589\":2,\"590\":1}}],[\"iscomponent\",{\"1\":{\"544\":1}}],[\"iscreate\",{\"1\":{\"535\":3}}],[\"isvue\",{\"1\":{\"544\":1,\"670\":1}}],[\"isdirectchildoftemplatefor\",{\"1\":{\"613\":1}}],[\"isdef<t>\",{\"1\":{\"588\":1}}],[\"isdef\",{\"1\":{\"575\":7,\"584\":6,\"585\":1,\"588\":5,\"589\":2,\"590\":4,\"591\":5,\"592\":1,\"593\":2,\"594\":1,\"595\":4,\"596\":18,\"597\":1,\"642\":5}}],[\"isdestroyed\",{\"1\":{\"582\":1}}],[\"isdestroy\",{\"1\":{\"535\":2}}],[\"isdynamic\",{\"1\":{\"534\":14}}],[\"isdn\",{\"1\":{\"418\":1}}],[\"isforbiddentag\",{\"1\":{\"609\":1}}],[\"isfalse\",{\"1\":{\"529\":2,\"588\":1}}],[\"isfunction\",{\"1\":{\"281\":4,\"282\":1,\"283\":5,\"455\":1,\"521\":2,\"547\":1,\"553\":1,\"554\":2,\"560\":1,\"565\":1,\"566\":1,\"584\":1,\"670\":1}}],[\"istexttag\",{\"1\":{\"610\":1}}],[\"istrue\",{\"1\":{\"575\":1,\"584\":1,\"585\":2,\"588\":2,\"589\":1,\"590\":1,\"591\":1,\"596\":5}}],[\"istanbul\",{\"1\":{\"544\":3,\"557\":1,\"558\":1,\"565\":1,\"573\":1,\"583\":1,\"601\":3,\"603\":1,\"609\":1,\"610\":1,\"656\":1}}],[\"istty\",{\"1\":{\"463\":1}}],[\"isthenable\",{\"1\":{\"282\":1,\"283\":2}}],[\"issue\",{\"1\":{\"670\":1}}],[\"issues\",{\"1\":{\"642\":1,\"649\":3}}],[\"issameroute\",{\"1\":{\"651\":1}}],[\"isshadow\",{\"1\":{\"629\":1}}],[\"isshow\",{\"1\":{\"102\":6,\"103\":6,\"104\":6,\"606\":3}}],[\"isserver\",{\"1\":{\"629\":1}}],[\"isserverrendering\",{\"1\":{\"521\":2,\"554\":2,\"560\":1,\"609\":1}}],[\"isscriptsetup\",{\"1\":{\"615\":1}}],[\"isstatickey\",{\"1\":{\"612\":1,\"613\":1}}],[\"isstatic\",{\"1\":{\"596\":2,\"613\":2}}],[\"isstring\",{\"1\":{\"455\":1}}],[\"isssr\",{\"1\":{\"521\":2,\"554\":2}}],[\"iswhite\",{\"1\":{\"230\":2}}],[\"is\",{\"1\":{\"139\":2,\"140\":2,\"141\":3,\"160\":1,\"300\":1,\"327\":2,\"434\":1,\"442\":1,\"464\":1,\"535\":1,\"542\":1,\"543\":1,\"544\":1,\"547\":1,\"558\":2,\"559\":1,\"561\":1,\"565\":1,\"573\":1,\"575\":1,\"582\":1,\"583\":1,\"584\":3,\"586\":3,\"588\":6,\"591\":1,\"596\":2,\"597\":1,\"609\":1,\"615\":1,\"626\":2,\"631\":1,\"635\":1,\"656\":2,\"660\":1,\"670\":1}}],[\"i的值并未被销毁\",{\"1\":{\"120\":1}}],[\"idquery\",{\"1\":{\"625\":2,\"629\":2}}],[\"idtotemplate\",{\"1\":{\"601\":1,\"603\":2}}],[\"idx1\",{\"1\":{\"597\":1}}],[\"idxinold\",{\"1\":{\"597\":5}}],[\"id=39502b8f\",{\"1\":{\"637\":1}}],[\"id=3942140e\",{\"1\":{\"637\":1}}],[\"id=xxxxx\",{\"1\":{\"635\":1}}],[\"id=469af010\",{\"1\":{\"625\":1,\"629\":1,\"635\":3,\"637\":3,\"638\":3}}],[\"id=$\",{\"1\":{\"625\":1,\"629\":1}}],[\"id=\",{\"1\":{\"534\":1,\"607\":2,\"608\":1,\"615\":1}}],[\"ideal\",{\"1\":{\"575\":1}}],[\"idea\",{\"1\":{\"517\":3}}],[\"idea在这两个目录下放置的都是\",{\"1\":{\"517\":1}}],[\"identifier\",{\"1\":{\"689\":3,\"690\":5}}],[\"identify\",{\"1\":{\"542\":1}}],[\"ident\",{\"0\":{\"158\":1}}],[\"ident>\",{\"1\":{\"157\":1,\"158\":1}}],[\"idle\",{\"1\":{\"256\":2}}],[\"idate\",{\"1\":{\"218\":1,\"225\":1}}],[\"idataservice\",{\"1\":{\"66\":1}}],[\"ids\",{\"1\":{\"139\":1,\"140\":1}}],[\"id\",{\"1\":{\"102\":1,\"103\":1,\"104\":1,\"240\":2,\"287\":12,\"299\":5,\"319\":5,\"532\":3,\"534\":1,\"557\":11,\"558\":7,\"564\":2,\"565\":8,\"566\":1,\"584\":1,\"603\":3,\"615\":1,\"624\":1,\"625\":4,\"627\":1,\"629\":4,\"631\":2,\"635\":1,\"648\":1,\"656\":4,\"690\":2}}],[\"iqueryable\",{\"0\":{\"92\":1}}],[\"iconfigurationroot\",{\"1\":{\"89\":2}}],[\"ii\",{\"1\":{\"23\":3}}],[\"iframe\",{\"0\":{\"795\":1},\"1\":{\"788\":1,\"792\":1,\"795\":2}}],[\"if判断是因为我们只在根实例里面传入了store\",{\"1\":{\"665\":1}}],[\"ifprocessed\",{\"1\":{\"615\":2}}],[\"if=\",{\"1\":{\"529\":1,\"572\":2,\"606\":1}}],[\"ifndef\",{\"1\":{\"209\":1}}],[\"ifdef\",{\"1\":{\"190\":3,\"209\":2,\"210\":1,\"211\":1,\"215\":1,\"216\":1,\"217\":1,\"218\":1,\"224\":2,\"225\":2,\"226\":2,\"227\":1}}],[\"ifconditions\",{\"1\":{\"613\":3,\"614\":3}}],[\"ifc\",{\"0\":{\"175\":1},\"1\":{\"175\":8,\"184\":1,\"187\":1}}],[\"if等\",{\"1\":{\"66\":1,\"67\":1}}],[\"if\",{\"0\":{\"529\":1},\"1\":{\"1\":3,\"7\":2,\"8\":2,\"13\":1,\"23\":1,\"43\":1,\"53\":1,\"54\":1,\"57\":2,\"58\":2,\"59\":3,\"60\":1,\"61\":3,\"62\":2,\"77\":1,\"79\":1,\"102\":7,\"103\":9,\"104\":10,\"120\":1,\"121\":2,\"126\":1,\"139\":1,\"195\":5,\"218\":7,\"224\":1,\"225\":2,\"240\":2,\"266\":2,\"280\":3,\"281\":4,\"282\":4,\"283\":11,\"289\":1,\"294\":1,\"317\":2,\"318\":1,\"319\":2,\"320\":1,\"445\":1,\"455\":4,\"520\":1,\"521\":8,\"528\":1,\"532\":1,\"534\":19,\"535\":9,\"543\":1,\"544\":7,\"546\":5,\"547\":15,\"548\":2,\"549\":5,\"551\":2,\"553\":2,\"554\":6,\"555\":5,\"557\":8,\"558\":4,\"559\":3,\"560\":3,\"561\":3,\"562\":1,\"563\":11,\"564\":1,\"565\":19,\"566\":3,\"567\":4,\"568\":4,\"573\":11,\"575\":6,\"581\":1,\"582\":4,\"583\":5,\"584\":14,\"585\":10,\"586\":5,\"588\":17,\"590\":5,\"591\":5,\"592\":2,\"593\":3,\"594\":1,\"595\":4,\"596\":20,\"597\":11,\"601\":11,\"603\":16,\"606\":20,\"607\":2,\"608\":5,\"609\":13,\"610\":13,\"611\":3,\"612\":1,\"613\":10,\"614\":5,\"615\":17,\"625\":1,\"626\":2,\"629\":1,\"630\":2,\"631\":1,\"635\":6,\"636\":1,\"637\":2,\"638\":1,\"642\":11,\"643\":2,\"644\":8,\"646\":5,\"647\":2,\"649\":4,\"650\":8,\"651\":12,\"652\":1,\"653\":9,\"654\":3,\"655\":9,\"656\":15,\"659\":5,\"660\":2,\"662\":1,\"663\":11,\"664\":3,\"665\":3,\"668\":2,\"669\":2,\"670\":12,\"688\":1,\"689\":8,\"690\":2,\"718\":1,\"738\":2,\"772\":1,\"780\":1,\"793\":1,\"794\":1,\"803\":3}}],[\"i++\",{\"1\":{\"1\":4,\"23\":1,\"53\":1,\"54\":1,\"55\":1,\"56\":1,\"58\":1,\"59\":1,\"60\":1,\"61\":4,\"62\":1,\"120\":1,\"232\":2,\"445\":1,\"534\":1,\"535\":2,\"547\":1,\"548\":1,\"555\":1,\"557\":1,\"561\":2,\"563\":1,\"564\":1,\"568\":1,\"582\":1,\"588\":1,\"608\":1,\"609\":1,\"613\":2,\"614\":2,\"615\":1,\"644\":1,\"650\":1,\"652\":1,\"668\":1,\"670\":1,\"689\":7,\"690\":1,\"804\":1}}],[\"i\",{\"1\":{\"1\":23,\"18\":5,\"23\":5,\"53\":4,\"54\":5,\"55\":4,\"56\":4,\"58\":7,\"59\":3,\"60\":8,\"61\":19,\"62\":2,\"120\":3,\"186\":1,\"193\":2,\"197\":8,\"200\":5,\"206\":16,\"232\":6,\"243\":7,\"249\":1,\"255\":1,\"256\":5,\"257\":1,\"260\":3,\"263\":2,\"266\":10,\"271\":2,\"283\":3,\"326\":1,\"521\":3,\"524\":1,\"534\":14,\"535\":6,\"547\":7,\"548\":3,\"553\":3,\"555\":3,\"557\":8,\"561\":6,\"563\":3,\"564\":3,\"565\":9,\"568\":3,\"575\":15,\"582\":3,\"588\":9,\"591\":8,\"595\":15,\"596\":16,\"606\":1,\"608\":4,\"609\":3,\"613\":6,\"614\":6,\"615\":3,\"629\":2,\"642\":8,\"644\":8,\"647\":3,\"650\":3,\"652\":8,\"668\":3,\"670\":3,\"689\":11,\"690\":6,\"723\":1,\"724\":1,\"726\":1,\"729\":2,\"730\":2,\"804\":5}}],[\"inactive\",{\"1\":{\"656\":6}}],[\"inmap\",{\"1\":{\"631\":2}}],[\"inpre\",{\"1\":{\"609\":1,\"610\":2}}],[\"input\",{\"1\":{\"141\":3,\"186\":1,\"528\":3,\"532\":1,\"534\":1,\"584\":1,\"589\":1,\"607\":4,\"608\":1,\"615\":1}}],[\"inheritquery\",{\"1\":{\"625\":1,\"629\":2}}],[\"inherit\",{\"1\":{\"609\":1}}],[\"inject\",{\"1\":{\"629\":1}}],[\"injection\",{\"1\":{\"629\":1,\"659\":1}}],[\"injections\",{\"1\":{\"544\":1}}],[\"injected\",{\"1\":{\"586\":1,\"631\":1,\"656\":1}}],[\"inbrowser\",{\"1\":{\"540\":2,\"566\":1,\"581\":1,\"587\":1,\"602\":1,\"643\":1}}],[\"inquirer\",{\"1\":{\"463\":1}}],[\"indices\",{\"1\":{\"231\":1}}],[\"index=$\",{\"1\":{\"629\":1}}],[\"index=0\",{\"1\":{\"629\":1,\"635\":1,\"637\":2}}],[\"indexer\",{\"1\":{\"77\":1}}],[\"indexof\",{\"1\":{\"66\":1,\"102\":1,\"103\":1,\"104\":1,\"573\":2,\"606\":4,\"642\":1,\"647\":1,\"650\":1}}],[\"index++\",{\"1\":{\"58\":1,\"558\":1}}],[\"index\",{\"1\":{\"58\":5,\"59\":10,\"77\":4,\"80\":3,\"102\":1,\"103\":2,\"104\":1,\"283\":2,\"327\":2,\"334\":3,\"464\":2,\"534\":1,\"540\":5,\"541\":3,\"543\":1,\"557\":1,\"558\":4,\"588\":1,\"590\":2,\"596\":2,\"603\":2,\"606\":8,\"607\":6,\"608\":1,\"611\":6,\"625\":1,\"635\":1,\"637\":6,\"638\":1,\"641\":1,\"642\":3,\"655\":6,\"718\":1,\"789\":1,\"797\":1}}],[\"increment\",{\"1\":{\"658\":3,\"661\":1,\"662\":1}}],[\"incoming\",{\"1\":{\"653\":1}}],[\"incomingquery\",{\"1\":{\"635\":2,\"638\":2}}],[\"incorrect\",{\"1\":{\"588\":1}}],[\"included\",{\"1\":{\"573\":1}}],[\"include=\",{\"1\":{\"571\":3}}],[\"include\",{\"1\":{\"517\":2,\"571\":1,\"573\":5}}],[\"includes等\",{\"1\":{\"699\":1}}],[\"includes\",{\"1\":{\"317\":2}}],[\"incline\",{\"1\":{\"175\":6}}],[\"incident\",{\"1\":{\"197\":7}}],[\"invalidation\",{\"1\":{\"662\":1}}],[\"invalidgeneratorfnc\",{\"1\":{\"269\":1}}],[\"invalidgeneratorfnb\",{\"1\":{\"269\":1}}],[\"invalidgeneratorfna\",{\"1\":{\"269\":1}}],[\"invpre\",{\"1\":{\"609\":3,\"610\":1}}],[\"involve\",{\"1\":{\"575\":1}}],[\"invoking\",{\"1\":{\"548\":1,\"588\":1}}],[\"invokeinserthook\",{\"1\":{\"588\":2}}],[\"invokedestroyhook\",{\"1\":{\"588\":2}}],[\"invokewitherrorhandling\",{\"1\":{\"548\":1,\"555\":1,\"559\":1,\"565\":1,\"670\":4}}],[\"invokecreatehooks\",{\"0\":{\"595\":1},\"1\":{\"535\":1,\"590\":1,\"592\":1,\"595\":1}}],[\"invoke\",{\"1\":{\"77\":1,\"588\":1,\"592\":1}}],[\"invertedmatrix\",{\"1\":{\"196\":1}}],[\"inversesqrt\",{\"1\":{\"198\":3}}],[\"inverse\",{\"1\":{\"196\":3}}],[\"iniitial\",{\"1\":{\"561\":1,\"563\":1}}],[\"initcomponent\",{\"0\":{\"592\":1},\"1\":{\"575\":1,\"591\":1,\"592\":1}}],[\"initcomputed\",{\"0\":{\"521\":1,\"554\":1},\"1\":{\"520\":1,\"521\":1,\"549\":1,\"554\":1}}],[\"initwatch\",{\"0\":{\"555\":1},\"1\":{\"549\":1,\"555\":1,\"668\":2}}],[\"initdata\",{\"0\":{\"553\":1},\"1\":{\"549\":1,\"553\":1,\"556\":1,\"560\":2}}],[\"initmethods\",{\"0\":{\"552\":1},\"1\":{\"549\":1,\"552\":1}}],[\"initmixin\",{\"1\":{\"542\":1,\"543\":2}}],[\"initsetup\",{\"1\":{\"549\":1}}],[\"initstate\",{\"0\":{\"549\":1},\"1\":{\"520\":1,\"543\":1,\"544\":1,\"549\":1,\"556\":1,\"560\":1,\"668\":1}}],[\"initprops\",{\"0\":{\"551\":1},\"1\":{\"549\":1,\"551\":1,\"556\":1}}],[\"initprovide\",{\"1\":{\"544\":1}}],[\"initproxy\",{\"1\":{\"544\":1}}],[\"initrender\",{\"1\":{\"544\":1}}],[\"initevents\",{\"1\":{\"544\":1}}],[\"initextend\",{\"1\":{\"542\":1}}],[\"initlifecycle\",{\"1\":{\"544\":1}}],[\"initiated\",{\"1\":{\"631\":1}}],[\"initialize\",{\"1\":{\"660\":1,\"738\":1}}],[\"initialized\",{\"1\":{\"642\":1}}],[\"initial\",{\"1\":{\"271\":2,\"326\":1,\"582\":1,\"586\":1,\"649\":1}}],[\"initialname\",{\"1\":{\"77\":3}}],[\"initinjections\",{\"1\":{\"544\":1}}],[\"initinternalcomponent\",{\"1\":{\"544\":1}}],[\"init`\",{\"1\":{\"543\":1,\"544\":1}}],[\"init方法\",{\"1\":{\"543\":1}}],[\"initassetregisters\",{\"1\":{\"542\":1}}],[\"inituse\",{\"1\":{\"542\":1}}],[\"initglobalapi\",{\"0\":{\"542\":1},\"1\":{\"541\":2,\"542\":2}}],[\"init\",{\"0\":{\"520\":1,\"544\":1,\"668\":1},\"1\":{\"538\":1,\"543\":4,\"544\":3,\"566\":1,\"575\":3,\"580\":1,\"581\":1,\"590\":1,\"591\":4,\"642\":3,\"646\":1,\"656\":2,\"690\":3}}],[\"ini\",{\"1\":{\"517\":1}}],[\"inigo\",{\"1\":{\"190\":1}}],[\"innernode\",{\"1\":{\"575\":7}}],[\"innerhtml\",{\"1\":{\"534\":2,\"601\":1,\"603\":3,\"793\":1,\"794\":1,\"795\":1}}],[\"innerheight\",{\"1\":{\"237\":1}}],[\"innerwidth\",{\"1\":{\"237\":1}}],[\"inner\",{\"0\":{\"187\":1},\"1\":{\"183\":1,\"575\":2}}],[\"innerbar\",{\"1\":{\"127\":2}}],[\"inlinetemplate\",{\"1\":{\"615\":1}}],[\"inline\",{\"0\":{\"747\":1,\"764\":1},\"1\":{\"174\":3,\"175\":2,\"176\":2,\"184\":4,\"613\":1,\"635\":2,\"720\":1,\"726\":2,\"748\":1,\"769\":2}}],[\"instead\",{\"1\":{\"551\":1,\"585\":1,\"590\":1,\"649\":1}}],[\"instantiation\",{\"1\":{\"521\":1,\"544\":1,\"551\":1,\"554\":1}}],[\"instantiated\",{\"1\":{\"319\":2}}],[\"instances\",{\"1\":{\"544\":1,\"642\":2,\"644\":1,\"653\":1,\"654\":1,\"656\":5}}],[\"instanceof\",{\"1\":{\"282\":1,\"283\":2,\"287\":4,\"300\":1,\"309\":1,\"543\":1,\"544\":1,\"560\":2,\"583\":1,\"642\":2}}],[\"instance\",{\"0\":{\"543\":1},\"1\":{\"77\":1,\"541\":1,\"542\":1,\"543\":2,\"544\":1,\"551\":1,\"553\":1,\"575\":1,\"582\":2,\"591\":1,\"642\":1,\"654\":7,\"656\":5,\"663\":1}}],[\"instance2\",{\"1\":{\"77\":3}}],[\"instance1\",{\"1\":{\"77\":11}}],[\"installmodule\",{\"1\":{\"660\":1,\"663\":4}}],[\"install方法中的\",{\"1\":{\"646\":1}}],[\"installed\",{\"1\":{\"642\":2,\"659\":1}}],[\"installcomponenthooks\",{\"1\":{\"585\":1}}],[\"install\",{\"0\":{\"642\":1},\"1\":{\"277\":1,\"540\":3,\"585\":1,\"635\":1,\"642\":4,\"659\":2,\"660\":2,\"665\":2,\"702\":2,\"751\":1,\"752\":1,\"754\":1,\"755\":1}}],[\"insertbefore\",{\"1\":{\"593\":1,\"597\":3}}],[\"insertion\",{\"1\":{\"590\":1}}],[\"insertionsort\",{\"1\":{\"55\":1,\"61\":1}}],[\"insert\",{\"0\":{\"593\":1},\"1\":{\"535\":1,\"575\":3,\"588\":7,\"590\":3,\"591\":1,\"592\":1,\"593\":1,\"595\":1}}],[\"insertedvnodequeue\",{\"1\":{\"575\":5,\"588\":7,\"590\":4,\"591\":4,\"592\":5,\"595\":2,\"596\":4,\"597\":9}}],[\"inserted\",{\"1\":{\"532\":3,\"533\":1,\"535\":2,\"562\":5,\"582\":1,\"588\":1}}],[\"inside\",{\"1\":{\"77\":1,\"582\":2,\"588\":1}}],[\"into\",{\"1\":{\"561\":1,\"585\":1,\"603\":1,\"610\":1}}],[\"intbitstofloat\",{\"1\":{\"195\":3}}],[\"intellij\",{\"1\":{\"517\":3}}],[\"intercept\",{\"1\":{\"562\":1}}],[\"intercepted\",{\"1\":{\"291\":2}}],[\"interface\",{\"1\":{\"434\":1,\"565\":2,\"754\":1}}],[\"interval\",{\"1\":{\"434\":1}}],[\"interpolating\",{\"1\":{\"190\":1}}],[\"interact\",{\"1\":{\"139\":1}}],[\"internalvalue\",{\"1\":{\"78\":1}}],[\"internal\",{\"1\":{\"78\":3,\"521\":1,\"544\":2,\"554\":1}}],[\"intermediate\",{\"1\":{\"70\":1}}],[\"integer\",{\"0\":{\"163\":1},\"1\":{\"1\":1}}],[\"int\",{\"1\":{\"66\":1,\"67\":1,\"76\":3,\"77\":1,\"78\":6,\"79\":3,\"80\":2,\"89\":1,\"193\":2,\"195\":4,\"199\":12,\"218\":4,\"226\":1,\"230\":4,\"232\":3,\"240\":10,\"241\":1}}],[\"in\",{\"1\":{\"8\":1,\"56\":1,\"57\":1,\"72\":1,\"141\":1,\"200\":2,\"206\":7,\"215\":3,\"216\":3,\"217\":3,\"226\":2,\"236\":3,\"238\":2,\"243\":3,\"283\":1,\"287\":2,\"295\":1,\"304\":4,\"317\":3,\"464\":1,\"521\":2,\"535\":2,\"542\":1,\"547\":3,\"551\":2,\"552\":1,\"554\":2,\"555\":1,\"561\":1,\"573\":2,\"575\":2,\"582\":2,\"583\":1,\"584\":3,\"586\":2,\"588\":1,\"590\":1,\"591\":1,\"597\":1,\"603\":1,\"606\":1,\"610\":1,\"613\":1,\"615\":1,\"626\":1,\"642\":1,\"644\":1,\"646\":1,\"650\":2,\"651\":5,\"653\":2,\"655\":1,\"656\":6,\"663\":3,\"668\":1,\"713\":6}}],[\"info\",{\"1\":{\"457\":1,\"464\":2,\"548\":2,\"555\":2,\"557\":1,\"559\":2,\"564\":2,\"565\":2,\"670\":7}}],[\"informational\",{\"1\":{\"457\":1}}],[\"infrastructurelogging\",{\"1\":{\"738\":2}}],[\"infrastructure\",{\"1\":{\"70\":1}}],[\"inf\",{\"1\":{\"1\":3,\"18\":4}}],[\"ss$\",{\"1\":{\"718\":1}}],[\"ssroptimizability\",{\"1\":{\"615\":2}}],[\"ssr\",{\"1\":{\"521\":1,\"554\":1,\"588\":2}}],[\"ssrf攻击通常针对外部网络无法直接访问的内部系统\",{\"1\":{\"475\":1}}],[\"ssrf\",{\"0\":{\"475\":1}}],[\"s$\",{\"1\":{\"718\":1,\"746\":1}}],[\"svg\",{\"1\":{\"609\":2}}],[\"svn\",{\"1\":{\"517\":1}}],[\"slots\",{\"1\":{\"656\":1}}],[\"slotsproxy\",{\"1\":{\"583\":2}}],[\"slottarget\",{\"1\":{\"615\":2}}],[\"slot\",{\"1\":{\"573\":4,\"584\":1,\"585\":6,\"613\":5,\"615\":1}}],[\"slow\",{\"1\":{\"544\":1}}],[\"slice\",{\"1\":{\"57\":2,\"534\":5,\"557\":1,\"558\":2,\"562\":1,\"564\":1,\"568\":1,\"606\":2,\"611\":2,\"629\":1,\"630\":2,\"631\":1,\"636\":1,\"637\":1,\"647\":1,\"652\":3,\"661\":1,\"662\":1,\"663\":2}}],[\"skipped\",{\"1\":{\"558\":1}}],[\"skip\",{\"1\":{\"544\":1,\"560\":1,\"592\":1,\"644\":1}}],[\"sdk\",{\"1\":{\"517\":6}}],[\"snapshot\",{\"0\":{\"493\":1}}],[\"syncloophook\",{\"0\":{\"780\":1},\"1\":{\"776\":1,\"780\":2,\"781\":1}}],[\"syncwaterfallhook\",{\"0\":{\"781\":1},\"1\":{\"776\":1,\"781\":2}}],[\"syncbailhook\",{\"0\":{\"779\":1},\"1\":{\"776\":1,\"779\":2,\"780\":1,\"781\":1}}],[\"synchook\",{\"0\":{\"778\":1},\"1\":{\"776\":1,\"778\":7,\"779\":5,\"780\":5,\"781\":5}}],[\"synchronously\",{\"1\":{\"662\":1}}],[\"syncsetupslots\",{\"1\":{\"583\":1}}],[\"sync\",{\"1\":{\"534\":1,\"557\":1,\"565\":5,\"663\":1,\"670\":2,\"720\":1,\"777\":1}}],[\"syncgen\",{\"1\":{\"534\":5}}],[\"syntax\",{\"1\":{\"534\":1,\"584\":1,\"653\":1}}],[\"symbol等以及实例方法例如array\",{\"1\":{\"699\":1}}],[\"symbol\",{\"0\":{\"261\":1},\"1\":{\"260\":1,\"261\":2,\"263\":13,\"264\":2,\"265\":3,\"266\":2,\"273\":1,\"280\":3,\"283\":3}}],[\"system\",{\"1\":{\"64\":1,\"70\":3,\"75\":1,\"77\":1,\"82\":1}}],[\"square\",{\"1\":{\"225\":1,\"226\":1}}],[\"sqrt\",{\"1\":{\"198\":3,\"218\":5,\"225\":1}}],[\"sgnv\",{\"1\":{\"195\":1}}],[\"sgna\",{\"1\":{\"195\":1}}],[\"smp\",{\"1\":{\"751\":2}}],[\"smooth\",{\"1\":{\"218\":13}}],[\"smoothvalue\",{\"1\":{\"195\":1}}],[\"smoothstep函数是一个常用的插值函数\",{\"1\":{\"190\":1}}],[\"smoothstep函数会将参数在起点和终点之间线性插值\",{\"1\":{\"190\":1}}],[\"smoothstep\",{\"0\":{\"191\":1},\"1\":{\"190\":6,\"191\":1,\"195\":4,\"215\":2,\"216\":2,\"217\":2,\"218\":9,\"226\":2,\"227\":3}}],[\"small\",{\"1\":{\"186\":1}}],[\"səbˈmɪt\",{\"1\":{\"141\":1}}],[\"s+$\",{\"1\":{\"104\":1}}],[\"s+|\",{\"1\":{\"104\":1}}],[\"s+\",{\"1\":{\"102\":1,\"103\":1,\"104\":1}}],[\"speedmeasureplugin\",{\"1\":{\"751\":2}}],[\"speed\",{\"1\":{\"751\":2}}],[\"special\",{\"1\":{\"544\":1,\"597\":1}}],[\"specific\",{\"1\":{\"540\":1,\"575\":1}}],[\"specification\",{\"1\":{\"70\":1}}],[\"specular\",{\"1\":{\"234\":1}}],[\"splice\",{\"1\":{\"557\":2,\"562\":2,\"642\":1,\"644\":1}}],[\"splitchunks\",{\"1\":{\"720\":1}}],[\"splitting\",{\"0\":{\"490\":1}}],[\"split\",{\"1\":{\"102\":4,\"103\":6,\"104\":6,\"573\":1,\"659\":1,\"670\":1}}],[\"spawn\",{\"1\":{\"452\":2}}],[\"space\",{\"1\":{\"215\":2,\"216\":3,\"217\":1,\"226\":1,\"610\":2}}],[\"spaces\",{\"1\":{\"141\":1}}],[\"span\",{\"1\":{\"186\":1}}],[\"span>\",{\"1\":{\"140\":1}}],[\"schema\",{\"1\":{\"730\":7}}],[\"scheduler\",{\"1\":{\"565\":2,\"586\":1}}],[\"scenarios\",{\"1\":{\"542\":1}}],[\"scene\",{\"1\":{\"237\":1}}],[\"scc\",{\"1\":{\"517\":1}}],[\"scalar\",{\"1\":{\"434\":1}}],[\"scalematrix\",{\"1\":{\"233\":1}}],[\"scaley\",{\"1\":{\"233\":2}}],[\"scalex\",{\"1\":{\"233\":2}}],[\"scale\",{\"1\":{\"191\":1,\"196\":3,\"217\":5,\"234\":2}}],[\"scrollbehavior\",{\"1\":{\"641\":1,\"642\":1,\"646\":2}}],[\"screencoord\",{\"1\":{\"240\":2}}],[\"script>提交到网站\",{\"1\":{\"472\":1}}],[\"script>\",{\"1\":{\"471\":1,\"472\":1,\"473\":1,\"635\":1,\"795\":1}}],[\"scripting\",{\"1\":{\"470\":1}}],[\"script\",{\"1\":{\"102\":1,\"103\":1,\"104\":1,\"186\":1,\"249\":1,\"251\":2,\"606\":1,\"635\":5,\"637\":2,\"638\":1,\"690\":2}}],[\"sci\",{\"1\":{\"218\":1}}],[\"scoping\",{\"1\":{\"702\":2,\"704\":1}}],[\"scopeid\",{\"1\":{\"627\":1}}],[\"scoped=true\",{\"1\":{\"625\":1,\"629\":1,\"635\":3,\"637\":5,\"638\":3}}],[\"scoped=true`\",{\"1\":{\"625\":1}}],[\"scopedquery\",{\"1\":{\"625\":2}}],[\"scoped>\",{\"1\":{\"619\":1,\"620\":1,\"622\":1,\"631\":1,\"635\":1}}],[\"scoped原理分析\",{\"0\":{\"617\":1}}],[\"scoped\",{\"0\":{\"619\":1},\"1\":{\"584\":1,\"619\":1,\"620\":2,\"621\":3,\"622\":1,\"623\":1,\"624\":2,\"625\":2,\"627\":1,\"629\":1,\"631\":3,\"635\":2}}],[\"scopedslots\",{\"1\":{\"583\":1,\"584\":1}}],[\"scope\",{\"0\":{\"119\":1},\"1\":{\"544\":2,\"565\":2}}],[\"score\",{\"1\":{\"79\":5}}],[\"switching\",{\"1\":{\"800\":1}}],[\"switch\",{\"1\":{\"102\":1,\"103\":1,\"104\":1,\"562\":1,\"615\":1,\"643\":1}}],[\"swap\",{\"1\":{\"58\":3,\"59\":3}}],[\"s\",{\"1\":{\"102\":3,\"103\":4,\"104\":4,\"141\":2,\"154\":1,\"464\":1,\"542\":2,\"551\":1,\"558\":2,\"575\":3,\"582\":3,\"583\":2,\"584\":1,\"586\":1,\"590\":2,\"591\":1,\"607\":7,\"610\":2,\"611\":2,\"614\":1,\"625\":2,\"649\":1,\"653\":4,\"656\":3,\"663\":1,\"667\":3,\"689\":2,\"718\":1}}],[\"save\",{\"1\":{\"653\":1,\"656\":1}}],[\"savescrollposition\",{\"1\":{\"646\":1}}],[\"sass\",{\"1\":{\"622\":1,\"745\":3}}],[\"samsung\",{\"1\":{\"713\":1}}],[\"sameinputtype\",{\"1\":{\"589\":1}}],[\"samevnode\",{\"0\":{\"589\":1},\"1\":{\"588\":1,\"589\":1,\"597\":5}}],[\"same\",{\"1\":{\"559\":1,\"565\":1,\"573\":1,\"597\":1,\"629\":1,\"642\":1,\"646\":1,\"656\":1,\"670\":1}}],[\"sampleposition\",{\"1\":{\"240\":2}}],[\"sampleid\",{\"1\":{\"240\":3}}],[\"samplemask\",{\"1\":{\"240\":2}}],[\"samples\",{\"1\":{\"199\":1,\"240\":1}}],[\"sampler3d\",{\"1\":{\"235\":2}}],[\"sampler3d或samplercube\",{\"1\":{\"199\":3}}],[\"sampler1dshadow\",{\"1\":{\"235\":2}}],[\"sampler1d\",{\"1\":{\"235\":2}}],[\"samplercube\",{\"1\":{\"210\":1,\"235\":2}}],[\"samplercubearrayshadow\",{\"1\":{\"199\":2}}],[\"samplercubeshadow\",{\"1\":{\"199\":2}}],[\"sampler2dshadow\",{\"1\":{\"235\":2}}],[\"sampler2dms\",{\"1\":{\"199\":1}}],[\"sampler2d\",{\"1\":{\"199\":22,\"210\":1,\"235\":2,\"239\":1}}],[\"sampler\",{\"1\":{\"199\":80}}],[\"sampleclass\",{\"1\":{\"77\":18}}],[\"samp\",{\"1\":{\"186\":1}}],[\"saturate\",{\"1\":{\"191\":1}}],[\"saturation\",{\"1\":{\"154\":1,\"434\":1}}],[\"safari10\",{\"1\":{\"720\":1}}],[\"safari\",{\"1\":{\"646\":1,\"710\":1,\"713\":1}}],[\"safari和ie9+现代浏览器的差别\",{\"1\":{\"147\":1}}],[\"safe\",{\"1\":{\"1\":1}}],[\"sure\",{\"1\":{\"592\":1,\"629\":1}}],[\"succeedmodule\",{\"1\":{\"735\":1}}],[\"successful\",{\"1\":{\"588\":1}}],[\"success\",{\"1\":{\"281\":1,\"294\":2}}],[\"such\",{\"1\":{\"139\":1}}],[\"suspended\",{\"1\":{\"268\":1}}],[\"suppress\",{\"1\":{\"663\":1}}],[\"supports\",{\"1\":{\"713\":2}}],[\"supportspushstate\",{\"1\":{\"642\":1,\"643\":1,\"646\":1,\"647\":2}}],[\"supportsscroll\",{\"1\":{\"642\":2,\"646\":3}}],[\"support\",{\"1\":{\"517\":1,\"534\":1,\"584\":1}}],[\"suppose\",{\"1\":{\"141\":1}}],[\"superoptions\",{\"1\":{\"546\":6,\"547\":6}}],[\"super\",{\"1\":{\"546\":5,\"547\":3}}],[\"sup\",{\"1\":{\"186\":1}}],[\"subtitle\",{\"1\":{\"718\":1}}],[\"subscribed\",{\"1\":{\"663\":1}}],[\"subscribers\",{\"1\":{\"660\":1,\"662\":1}}],[\"subscriber\",{\"1\":{\"565\":2,\"662\":1}}],[\"substring\",{\"1\":{\"606\":3}}],[\"subs\",{\"1\":{\"524\":1,\"556\":2,\"557\":4,\"564\":8}}],[\"subprocess\",{\"1\":{\"452\":2}}],[\"sub\",{\"1\":{\"186\":1,\"546\":3,\"564\":4,\"661\":8,\"662\":2}}],[\"submitting\",{\"1\":{\"141\":1}}],[\"submit\",{\"1\":{\"141\":7}}],[\"subnamespace\",{\"1\":{\"74\":1,\"75\":1}}],[\"sum\",{\"1\":{\"43\":2,\"230\":1,\"232\":5}}],[\"s模式\",{\"1\":{\"65\":1}}],[\"s模式的开发\",{\"1\":{\"65\":1}}],[\"silent\",{\"1\":{\"663\":5}}],[\"side\",{\"1\":{\"475\":1,\"588\":2}}],[\"sides\",{\"1\":{\"226\":1}}],[\"site\",{\"1\":{\"469\":1,\"470\":1}}],[\"single\",{\"1\":{\"583\":1,\"584\":1,\"610\":2}}],[\"since\",{\"1\":{\"457\":1,\"544\":1,\"582\":1,\"585\":1,\"646\":1,\"713\":3}}],[\"sine\",{\"1\":{\"198\":1}}],[\"sinhx\",{\"1\":{\"198\":1}}],[\"sinh\",{\"1\":{\"198\":3}}],[\"sin\",{\"1\":{\"198\":5,\"200\":3,\"204\":2,\"206\":7,\"210\":1,\"215\":1,\"216\":3,\"217\":1,\"218\":4,\"227\":2,\"233\":2,\"243\":6}}],[\"signal\",{\"1\":{\"445\":1}}],[\"sign\",{\"1\":{\"195\":4}}],[\"simplenormalizechildren\",{\"1\":{\"584\":1}}],[\"simpleset\",{\"1\":{\"565\":2}}],[\"simple\",{\"1\":{\"64\":1,\"141\":3,\"584\":1}}],[\"size+vec2\",{\"1\":{\"215\":2,\"216\":2,\"217\":2}}],[\"size\",{\"1\":{\"59\":8,\"61\":2,\"141\":1,\"199\":1,\"215\":10,\"216\":10,\"217\":10}}],[\"series\",{\"1\":{\"777\":1}}],[\"server\",{\"1\":{\"464\":2,\"475\":1,\"588\":3,\"789\":3,\"797\":2}}],[\"seal\",{\"1\":{\"735\":2}}],[\"searchrange\",{\"1\":{\"8\":1}}],[\"search\",{\"1\":{\"7\":1,\"8\":3}}],[\"severity\",{\"1\":{\"718\":3}}],[\"segments\",{\"1\":{\"670\":3}}],[\"see\",{\"1\":{\"656\":1}}],[\"seem\",{\"1\":{\"575\":1}}],[\"separately\",{\"1\":{\"583\":1}}],[\"self\",{\"1\":{\"544\":2,\"565\":1,\"566\":1,\"582\":1,\"583\":1,\"584\":1,\"615\":4}}],[\"selectblock\",{\"1\":{\"635\":1,\"638\":1}}],[\"selection\",{\"1\":{\"631\":1}}],[\"selectionsort\",{\"1\":{\"54\":1}}],[\"select\",{\"1\":{\"186\":1,\"528\":1}}],[\"selectors\",{\"1\":{\"102\":1,\"103\":1,\"104\":1}}],[\"selector\",{\"1\":{\"102\":3,\"103\":3,\"104\":3,\"139\":1,\"140\":1,\"141\":1}}],[\"send\",{\"1\":{\"789\":1,\"793\":1,\"794\":1,\"797\":2}}],[\"sendfile\",{\"1\":{\"789\":1,\"797\":1}}],[\"sender\",{\"1\":{\"77\":1}}],[\"sensitive\",{\"1\":{\"644\":1}}],[\"sentry不会收集全量日志\",{\"1\":{\"466\":1}}],[\"sentry和elk\",{\"0\":{\"466\":1}}],[\"sentry\",{\"0\":{\"465\":1}}],[\"sec\",{\"0\":{\"801\":1},\"1\":{\"799\":5,\"800\":1,\"801\":8}}],[\"second\",{\"1\":{\"297\":2}}],[\"secondproxy\",{\"1\":{\"297\":2}}],[\"section\",{\"1\":{\"185\":1}}],[\"semantically\",{\"1\":{\"139\":1,\"140\":2}}],[\"setactiveinstance\",{\"1\":{\"586\":1}}],[\"setupscroll\",{\"1\":{\"646\":1}}],[\"setuplisteners\",{\"1\":{\"642\":4,\"646\":1}}],[\"setup>\",{\"1\":{\"615\":1}}],[\"setup\",{\"1\":{\"582\":1}}],[\"set时\",{\"1\":{\"556\":1}}],[\"setcurrentinstance\",{\"1\":{\"548\":2,\"583\":2}}],[\"setstatekey\",{\"1\":{\"646\":1}}],[\"setscope\",{\"1\":{\"590\":1,\"592\":1}}],[\"sets\",{\"0\":{\"439\":1}}],[\"setsize\",{\"1\":{\"237\":1}}],[\"setdata\",{\"1\":{\"327\":2}}],[\"settextcontent\",{\"1\":{\"596\":3}}],[\"setters\",{\"1\":{\"561\":1,\"563\":1}}],[\"setter\",{\"1\":{\"303\":1,\"561\":1,\"563\":5}}],[\"settings\",{\"1\":{\"517\":1}}],[\"setting\",{\"1\":{\"316\":1,\"573\":1}}],[\"settimeout\",{\"1\":{\"247\":2,\"249\":1,\"251\":1,\"252\":2,\"253\":1,\"254\":2,\"256\":5,\"257\":10,\"258\":2,\"281\":3,\"283\":2,\"568\":3,\"653\":1,\"728\":1,\"729\":1,\"730\":1,\"782\":2,\"783\":2,\"784\":2}}],[\"setprototypeof\",{\"0\":{\"310\":2},\"1\":{\"294\":1,\"310\":11}}],[\"setiterator\",{\"1\":{\"263\":1}}],[\"setimmediate\",{\"1\":{\"249\":1,\"256\":4,\"257\":8,\"568\":3}}],[\"setinterval\",{\"1\":{\"247\":1,\"249\":1,\"256\":3,\"793\":1,\"795\":1}}],[\"setname\",{\"1\":{\"127\":2}}],[\"setlength\",{\"1\":{\"82\":2}}],[\"set\",{\"0\":{\"303\":2},\"1\":{\"76\":1,\"77\":3,\"79\":5,\"80\":1,\"89\":3,\"263\":12,\"294\":1,\"295\":1,\"299\":3,\"300\":1,\"303\":9,\"316\":3,\"318\":3,\"320\":3,\"327\":1,\"519\":1,\"521\":3,\"524\":2,\"534\":1,\"542\":2,\"543\":1,\"550\":2,\"554\":3,\"556\":3,\"557\":1,\"559\":2,\"563\":2,\"565\":3,\"575\":1,\"582\":1,\"583\":2,\"584\":1,\"591\":1,\"642\":2,\"663\":2,\"665\":1,\"670\":1,\"671\":1,\"803\":1}}],[\"store\",{\"0\":{\"660\":1},\"1\":{\"658\":3,\"659\":6,\"660\":7,\"661\":2,\"662\":2,\"663\":55,\"665\":7}}],[\"stop\",{\"1\":{\"464\":1}}],[\"stops\",{\"1\":{\"18\":2}}],[\"still\",{\"1\":{\"642\":1,\"649\":1}}],[\"studio\",{\"1\":{\"517\":3}}],[\"stdin\",{\"1\":{\"455\":1}}],[\"stdio\",{\"1\":{\"452\":1}}],[\"stdout\",{\"1\":{\"454\":1,\"455\":4,\"463\":4}}],[\"stefan\",{\"1\":{\"243\":1}}],[\"stencilref\",{\"1\":{\"240\":1}}],[\"step函数才会返回1\",{\"1\":{\"190\":1}}],[\"step\",{\"1\":{\"190\":2,\"195\":6,\"202\":23,\"204\":4,\"206\":9,\"218\":3,\"224\":3,\"655\":4}}],[\"steps++\",{\"1\":{\"23\":1}}],[\"steps\",{\"1\":{\"23\":2}}],[\"st\",{\"1\":{\"190\":22,\"200\":5,\"204\":4,\"206\":10,\"211\":3,\"215\":11,\"216\":14,\"217\":14,\"224\":3,\"225\":4,\"226\":11,\"227\":2,\"243\":5}}],[\"stable\",{\"1\":{\"699\":1}}],[\"stay\",{\"1\":{\"597\":1}}],[\"startlocation\",{\"1\":{\"646\":1}}],[\"starttagclose\",{\"1\":{\"607\":6}}],[\"starttagopen\",{\"1\":{\"606\":1,\"607\":3}}],[\"starttagmatch\",{\"1\":{\"606\":4}}],[\"starttag\",{\"1\":{\"544\":4}}],[\"start++\",{\"1\":{\"271\":1}}],[\"start=>end=>promise3=>timer1=>timer2=>promise1=>promise2\",{\"1\":{\"256\":1}}],[\"start\",{\"0\":{\"609\":1},\"1\":{\"195\":2,\"256\":2,\"271\":2,\"544\":1,\"588\":1,\"603\":1,\"604\":5,\"606\":4,\"607\":5,\"608\":5,\"609\":2,\"610\":2,\"635\":3,\"646\":1,\"649\":1}}],[\"status\",{\"1\":{\"772\":2,\"793\":1,\"794\":1}}],[\"stats\",{\"1\":{\"713\":4,\"739\":1,\"740\":1}}],[\"statement\",{\"1\":{\"735\":1}}],[\"statemixin\",{\"1\":{\"543\":2}}],[\"states\",{\"1\":{\"664\":2}}],[\"statea\",{\"1\":{\"663\":1}}],[\"state方法\",{\"1\":{\"663\":1}}],[\"statecopy\",{\"1\":{\"646\":3}}],[\"state\",{\"1\":{\"141\":1,\"280\":10,\"281\":12,\"283\":13,\"534\":1,\"543\":1,\"558\":1,\"615\":28,\"646\":2,\"658\":3,\"660\":6,\"661\":2,\"662\":1,\"663\":31,\"664\":11,\"665\":5}}],[\"staticprocessed\",{\"1\":{\"615\":1}}],[\"staticroot\",{\"1\":{\"614\":2,\"615\":1}}],[\"staticrenderfns`\",{\"1\":{\"625\":1}}],[\"staticrenderfns\",{\"1\":{\"601\":3,\"603\":8,\"615\":2,\"625\":2,\"635\":4,\"638\":3}}],[\"staticinfor\",{\"1\":{\"614\":1}}],[\"statickeys\",{\"1\":{\"612\":1}}],[\"static\",{\"1\":{\"64\":1,\"68\":1,\"75\":1,\"77\":2,\"81\":2,\"82\":1,\"84\":1,\"89\":2,\"268\":1,\"551\":1,\"564\":1,\"596\":1,\"613\":7,\"614\":4,\"793\":1,\"795\":1}}],[\"standalone\",{\"1\":{\"139\":1,\"140\":1}}],[\"stack\",{\"1\":{\"118\":1,\"251\":6,\"583\":1,\"604\":1,\"606\":2,\"608\":1,\"609\":1}}],[\"streaming\",{\"1\":{\"792\":1}}],[\"strength\",{\"1\":{\"202\":64,\"204\":68,\"206\":62}}],[\"strict模式下\",{\"1\":{\"662\":1}}],[\"strict\",{\"1\":{\"644\":1,\"660\":3,\"663\":2}}],[\"string或者buffer\",{\"1\":{\"727\":1}}],[\"stringifyrequest\",{\"1\":{\"625\":1,\"629\":3}}],[\"stringify\",{\"1\":{\"534\":1,\"611\":2,\"615\":3,\"626\":1,\"690\":1}}],[\"stringiterator\",{\"1\":{\"263\":1}}],[\"strings\",{\"1\":{\"80\":5}}],[\"stringcollection\",{\"1\":{\"80\":2}}],[\"string\",{\"1\":{\"68\":1,\"77\":8,\"78\":2,\"79\":3,\"80\":2,\"82\":1,\"84\":1,\"89\":6,\"464\":1,\"521\":2,\"532\":1,\"540\":1,\"547\":3,\"548\":1,\"550\":2,\"551\":1,\"554\":1,\"555\":4,\"563\":1,\"565\":2,\"566\":2,\"568\":2,\"573\":7,\"581\":1,\"584\":2,\"585\":2,\"601\":2,\"602\":1,\"603\":8,\"604\":3,\"610\":2,\"615\":3,\"635\":2,\"644\":1,\"646\":2,\"651\":3,\"654\":2,\"655\":3,\"656\":2,\"669\":2,\"670\":3,\"730\":1}}],[\"strategy\",{\"1\":{\"642\":1}}],[\"strats\",{\"1\":{\"547\":1,\"642\":5}}],[\"strat\",{\"1\":{\"547\":2}}],[\"str\",{\"1\":{\"263\":3,\"463\":1}}],[\"structural\",{\"1\":{\"609\":1}}],[\"struct\",{\"1\":{\"234\":6}}],[\"strong\",{\"1\":{\"186\":1}}],[\"stroketext\",{\"1\":{\"104\":1}}],[\"strokestyle\",{\"1\":{\"104\":1}}],[\"style=\",{\"1\":{\"795\":1}}],[\"stylelint\",{\"1\":{\"709\":1}}],[\"stylepostloader\",{\"0\":{\"631\":1},\"1\":{\"637\":1}}],[\"stylepostloaderpath\",{\"1\":{\"630\":1}}],[\"styleimportscode\",{\"1\":{\"629\":1}}],[\"styleinjectioncode\",{\"1\":{\"629\":1}}],[\"styleinjection\",{\"1\":{\"629\":1}}],[\"style0\",{\"1\":{\"629\":1,\"635\":1}}],[\"stylescode\",{\"1\":{\"629\":2}}],[\"styles\",{\"1\":{\"625\":1,\"629\":3,\"635\":2,\"745\":2,\"747\":8}}],[\"stylesheets\",{\"1\":{\"99\":1,\"102\":1,\"103\":1,\"104\":1}}],[\"stylesheet\",{\"0\":{\"99\":1},\"1\":{\"97\":2,\"99\":1,\"102\":1,\"103\":1,\"104\":1}}],[\"style>\",{\"1\":{\"619\":2,\"620\":2,\"622\":1,\"635\":1}}],[\"styletoken\",{\"1\":{\"102\":2,\"103\":2,\"104\":2}}],[\"style\",{\"0\":{\"628\":1},\"1\":{\"99\":2,\"102\":3,\"103\":4,\"104\":4,\"254\":2,\"470\":1,\"603\":1,\"606\":1,\"625\":1,\"629\":4,\"630\":1,\"635\":3,\"637\":3,\"661\":1,\"662\":1,\"718\":1,\"722\":1,\"745\":4,\"747\":4,\"754\":1,\"755\":9}}],[\"shininess\",{\"1\":{\"234\":1}}],[\"shift\",{\"1\":{\"57\":4,\"62\":1,\"281\":2,\"283\":2,\"562\":1}}],[\"sha1\",{\"1\":{\"801\":2}}],[\"shallow\",{\"1\":{\"560\":2,\"561\":5,\"563\":3,\"662\":1}}],[\"shallowreactive\",{\"1\":{\"551\":1}}],[\"shared\",{\"1\":{\"540\":1}}],[\"sharedpropertydefinition\",{\"1\":{\"521\":5,\"550\":4,\"554\":5}}],[\"sharp\",{\"0\":{\"808\":1},\"2\":{\"88\":1}}],[\"shaking\",{\"0\":{\"489\":1,\"679\":1},\"1\":{\"720\":1}}],[\"shaping\",{\"1\":{\"226\":1}}],[\"shaped\",{\"1\":{\"226\":1}}],[\"shape\",{\"1\":{\"215\":1,\"216\":1,\"217\":1,\"226\":1}}],[\"shading\",{\"1\":{\"212\":1}}],[\"shadermaterial\",{\"1\":{\"237\":1}}],[\"shadertoy\",{\"1\":{\"218\":1,\"225\":1}}],[\"shaders\",{\"1\":{\"208\":1,\"209\":2,\"226\":1}}],[\"shader\",{\"0\":{\"209\":1},\"1\":{\"189\":1,\"200\":1,\"209\":1,\"223\":1}}],[\"shadowvalue\",{\"1\":{\"235\":2}}],[\"shadowmap\",{\"1\":{\"199\":4}}],[\"shadowcubearray\",{\"1\":{\"199\":4}}],[\"shadowcube\",{\"1\":{\"199\":4}}],[\"shadowcoord\",{\"1\":{\"199\":4}}],[\"shadow2darray\",{\"1\":{\"199\":3}}],[\"shadow2d\",{\"1\":{\"199\":3}}],[\"shadowsampler\",{\"1\":{\"199\":4}}],[\"shadow1darray\",{\"1\":{\"199\":3}}],[\"shadow1d\",{\"1\":{\"199\":3}}],[\"shadow\",{\"1\":{\"141\":1,\"152\":1,\"199\":2,\"619\":1}}],[\"shouldignorefirstnewline\",{\"1\":{\"606\":1}}],[\"shouldkeepcomment\",{\"1\":{\"604\":1,\"606\":1}}],[\"shoulddecodenewlinesforhref\",{\"1\":{\"601\":1,\"603\":1,\"604\":2,\"608\":1}}],[\"shoulddecodenewlines\",{\"1\":{\"601\":1,\"603\":1,\"604\":2,\"608\":3}}],[\"shouldobserve\",{\"1\":{\"560\":1}}],[\"should\",{\"1\":{\"543\":1,\"551\":1,\"559\":1,\"561\":1,\"565\":1,\"575\":1,\"591\":1,\"614\":1,\"649\":2,\"659\":1,\"670\":1}}],[\"shouldcache\",{\"1\":{\"521\":3,\"554\":3}}],[\"show`\",{\"1\":{\"540\":1,\"543\":1}}],[\"show\",{\"1\":{\"215\":1,\"216\":1,\"217\":1,\"326\":1}}],[\"showname\",{\"1\":{\"114\":2,\"120\":2}}],[\"shortfilepath\",{\"1\":{\"625\":3}}],[\"shorthand\",{\"1\":{\"534\":3}}],[\"short\",{\"1\":{\"139\":1}}],[\"sheets\",{\"1\":{\"470\":1}}],[\"shellsort\",{\"1\":{\"56\":1}}],[\"sheng\",{\"1\":{\"13\":1}}],[\"shui\",{\"1\":{\"13\":1}}],[\"so\",{\"1\":{\"521\":1,\"551\":1,\"565\":1,\"573\":1,\"585\":1,\"629\":1,\"642\":1,\"654\":1,\"656\":2,\"670\":1}}],[\"sourceurl\",{\"1\":{\"761\":1}}],[\"sourceurl=\",{\"1\":{\"760\":1}}],[\"sourcecontent\",{\"1\":{\"759\":1}}],[\"sources\",{\"1\":{\"759\":1}}],[\"sourcetype\",{\"1\":{\"690\":2}}],[\"sourcemappingurl=main\",{\"1\":{\"758\":1}}],[\"sourcemap相关的数据\",{\"1\":{\"723\":1}}],[\"sourcemap\",{\"1\":{\"635\":1,\"765\":2,\"766\":3}}],[\"sourceroot\",{\"1\":{\"635\":1,\"759\":1}}],[\"sourcekey\",{\"1\":{\"550\":3}}],[\"source\",{\"0\":{\"448\":1,\"756\":1,\"757\":1,\"759\":1,\"763\":1,\"764\":1,\"765\":1,\"766\":1,\"767\":1,\"768\":1},\"1\":{\"625\":1,\"631\":2,\"635\":5,\"637\":6,\"638\":2,\"718\":2,\"748\":1,\"757\":1,\"758\":1,\"759\":1,\"762\":1,\"766\":1,\"769\":1}}],[\"sound\",{\"1\":{\"84\":1}}],[\"sort\",{\"1\":{\"319\":1,\"558\":2,\"562\":1}}],[\"sortedindex++\",{\"1\":{\"60\":1}}],[\"sortedindex\",{\"1\":{\"60\":1}}],[\"sorted\",{\"1\":{\"8\":1,\"9\":1}}],[\"socket库提供查询ip地址\",{\"0\":{\"341\":1}}],[\"socket库\",{\"1\":{\"330\":1}}],[\"socket\",{\"0\":{\"787\":1},\"1\":{\"256\":1,\"341\":1,\"787\":1,\"788\":2,\"789\":8,\"796\":1,\"797\":3}}],[\"somemethod\",{\"1\":{\"667\":2}}],[\"something\",{\"1\":{\"326\":3}}],[\"some\",{\"1\":{\"84\":1,\"218\":1,\"327\":1,\"625\":1,\"626\":1,\"646\":1,\"663\":2}}],[\"solution\",{\"1\":{\"13\":1,\"23\":1}}],[\"solutions\",{\"1\":{\"13\":1,\"18\":1,\"23\":1}}],[\"src=\",{\"1\":{\"529\":1,\"795\":1}}],[\"src\",{\"1\":{\"1\":9,\"18\":6,\"187\":1,\"529\":1,\"534\":1,\"584\":2,\"603\":7,\"625\":3,\"629\":3,\"635\":1,\"702\":2,\"718\":2,\"754\":1,\"795\":1}}],[\"储存\",{\"1\":{\"521\":1}}],[\"储存型xss攻击\",{\"0\":{\"472\":1}}],[\"储存所有顶点的数量\",{\"1\":{\"1\":1}}],[\"储存abcdef顶点是否被访问过\",{\"1\":{\"1\":1}}],[\"储存当前a顶点到其它各个顶点间的距离\",{\"1\":{\"1\":1}}],[\"起点\",{\"1\":{\"1\":1,\"190\":1}}],[\"邻接矩阵\",{\"1\":{\"1\":1}}],[\"0~125\",{\"1\":{\"803\":1}}],[\"0之后\",{\"1\":{\"699\":1}}],[\"0之前\",{\"1\":{\"699\":1}}],[\"0之间\",{\"1\":{\"190\":1}}],[\"0之间的值\",{\"1\":{\"190\":1}}],[\"0xff\",{\"1\":{\"240\":1}}],[\"0+sin\",{\"1\":{\"218\":1}}],[\"0+0\",{\"1\":{\"218\":1}}],[\"0+mod\",{\"1\":{\"218\":1}}],[\"0+d\",{\"1\":{\"218\":4}}],[\"0+utime\",{\"1\":{\"206\":1}}],[\"00\",{\"1\":{\"218\":3}}],[\"001\",{\"1\":{\"215\":2,\"216\":2,\"217\":2}}],[\"00000\",{\"1\":{\"9\":1}}],[\"01\",{\"1\":{\"206\":3,\"226\":2,\"235\":2}}],[\"01000000100100000000000000000000\",{\"1\":{\"195\":4}}],[\"033+背景颜色+颜色+m作为前缀\",{\"1\":{\"463\":1}}],[\"03\",{\"1\":{\"190\":1,\"713\":2}}],[\"024\",{\"1\":{\"206\":3,\"243\":1}}],[\"0243902439\",{\"1\":{\"206\":3,\"243\":1}}],[\"02\",{\"1\":{\"190\":5,\"227\":1}}],[\"042\",{\"1\":{\"139\":1,\"140\":3}}],[\"0城市\",{\"1\":{\"18\":1}}],[\"0\",{\"1\":{\"1\":33,\"7\":2,\"8\":1,\"13\":2,\"18\":9,\"23\":5,\"43\":2,\"53\":2,\"54\":1,\"55\":1,\"56\":2,\"57\":5,\"58\":1,\"59\":3,\"60\":6,\"61\":8,\"62\":4,\"66\":1,\"77\":4,\"79\":2,\"80\":1,\"81\":1,\"82\":2,\"102\":8,\"103\":8,\"104\":11,\"120\":2,\"146\":1,\"151\":4,\"153\":1,\"154\":3,\"158\":1,\"163\":1,\"164\":1,\"190\":70,\"191\":4,\"193\":14,\"195\":55,\"196\":39,\"197\":73,\"198\":21,\"199\":52,\"200\":11,\"202\":84,\"204\":41,\"206\":171,\"209\":7,\"210\":5,\"211\":3,\"215\":12,\"216\":15,\"217\":18,\"218\":136,\"224\":17,\"225\":35,\"226\":12,\"227\":8,\"230\":9,\"231\":14,\"232\":25,\"233\":56,\"234\":3,\"235\":14,\"237\":1,\"238\":9,\"239\":27,\"240\":54,\"243\":39,\"253\":1,\"254\":2,\"256\":2,\"257\":4,\"258\":2,\"263\":1,\"271\":11,\"281\":2,\"283\":3,\"318\":1,\"319\":1,\"402\":4,\"403\":1,\"420\":3,\"452\":1,\"463\":1,\"464\":2,\"517\":11,\"534\":2,\"535\":2,\"547\":1,\"548\":1,\"555\":1,\"557\":2,\"558\":2,\"561\":3,\"563\":1,\"564\":1,\"565\":1,\"568\":4,\"573\":2,\"575\":1,\"582\":1,\"583\":1,\"584\":3,\"588\":4,\"595\":3,\"596\":3,\"597\":4,\"601\":1,\"603\":1,\"606\":10,\"607\":7,\"608\":2,\"609\":1,\"611\":5,\"613\":1,\"614\":2,\"615\":3,\"630\":1,\"631\":1,\"635\":8,\"637\":6,\"641\":1,\"642\":1,\"644\":3,\"646\":1,\"647\":2,\"650\":1,\"652\":2,\"653\":2,\"655\":1,\"656\":1,\"658\":1,\"659\":1,\"661\":1,\"663\":3,\"668\":1,\"670\":1,\"679\":1,\"689\":1,\"690\":1,\"713\":1,\"715\":1,\"718\":1,\"780\":1,\"803\":13,\"804\":2}}],[\"=<>`\",{\"1\":{\"607\":1}}],[\"=generate\",{\"1\":{\"603\":1}}],[\"=parse\",{\"1\":{\"603\":1}}],[\"=vm\",{\"1\":{\"584\":1}}],[\"=vec4\",{\"1\":{\"202\":15,\"204\":16,\"206\":17}}],[\"=5\",{\"1\":{\"483\":1}}],[\"=0666\",{\"1\":{\"455\":1}}],[\"=$\",{\"1\":{\"316\":1}}],[\"=1\",{\"1\":{\"204\":2,\"206\":1}}],[\"=step\",{\"1\":{\"204\":1}}],[\"=max\",{\"1\":{\"204\":1}}],[\"=min\",{\"1\":{\"204\":1}}],[\"=null\",{\"1\":{\"62\":1}}],[\"==1\",{\"1\":{\"261\":1}}],[\"==null\",{\"1\":{\"62\":1}}],[\"===\",{\"1\":{\"8\":2,\"23\":1,\"43\":1,\"59\":1,\"61\":1,\"102\":6,\"103\":9,\"104\":10,\"257\":1,\"264\":1,\"280\":1,\"281\":4,\"282\":1,\"283\":6,\"287\":1,\"289\":3,\"299\":1,\"319\":1,\"534\":2,\"535\":2,\"547\":1,\"555\":1,\"557\":1,\"563\":3,\"568\":1,\"573\":1,\"583\":1,\"584\":3,\"585\":1,\"586\":1,\"588\":5,\"589\":6,\"593\":1,\"596\":2,\"601\":4,\"603\":4,\"606\":2,\"608\":4,\"609\":1,\"610\":4,\"613\":3,\"614\":3,\"615\":4,\"626\":1,\"630\":1,\"637\":2,\"642\":5,\"643\":1,\"644\":4,\"646\":2,\"650\":1,\"651\":8,\"653\":5,\"655\":6,\"656\":1,\"659\":2,\"663\":2,\"664\":1,\"669\":1,\"718\":1,\"738\":1}}],[\"==\",{\"1\":{\"1\":1,\"7\":1,\"18\":1,\"102\":5,\"103\":5,\"104\":5,\"195\":3,\"221\":1,\"260\":1,\"261\":1,\"280\":1,\"281\":1,\"283\":2,\"318\":1,\"319\":1,\"521\":1,\"534\":1,\"543\":1,\"546\":1,\"547\":1,\"549\":1,\"552\":1,\"554\":1,\"559\":1,\"565\":1,\"567\":1,\"568\":3,\"573\":2,\"582\":1,\"585\":1,\"588\":2,\"596\":2,\"603\":3,\"610\":3,\"613\":2,\"615\":1,\"636\":1,\"642\":2,\"643\":1,\"644\":2,\"649\":1,\"650\":2,\"651\":4,\"652\":1,\"653\":1,\"654\":1,\"655\":2,\"656\":3,\"660\":2,\"668\":1,\"670\":1,\"689\":3,\"690\":4,\"718\":1,\"793\":2,\"794\":2,\"803\":1}}],[\"=>调用\",{\"1\":{\"671\":1}}],[\"=>invokewitherrorhandling\",{\"1\":{\"671\":1}}],[\"=>beforerouteenter\",{\"1\":{\"648\":1}}],[\"=>vm\",{\"1\":{\"556\":1}}],[\"=>createcomputedgetter\",{\"1\":{\"523\":1}}],[\"=>2\",{\"1\":{\"263\":1}}],[\"=>1\",{\"1\":{\"263\":1}}],[\"=>0\",{\"1\":{\"263\":1}}],[\"=>\",{\"1\":{\"1\":1,\"7\":1,\"18\":2,\"43\":5,\"77\":1,\"80\":1,\"102\":12,\"103\":16,\"104\":18,\"252\":5,\"254\":4,\"256\":2,\"257\":8,\"258\":2,\"263\":1,\"269\":2,\"280\":5,\"281\":14,\"282\":1,\"283\":35,\"313\":1,\"320\":2,\"445\":2,\"455\":1,\"464\":1,\"521\":2,\"523\":6,\"524\":9,\"534\":5,\"535\":5,\"538\":3,\"542\":2,\"546\":1,\"551\":1,\"552\":1,\"554\":4,\"555\":3,\"556\":17,\"557\":2,\"558\":1,\"564\":1,\"565\":3,\"566\":2,\"567\":3,\"568\":4,\"572\":1,\"573\":4,\"574\":4,\"582\":1,\"584\":4,\"589\":1,\"597\":1,\"603\":3,\"607\":3,\"610\":1,\"611\":1,\"615\":1,\"625\":1,\"635\":3,\"636\":3,\"641\":3,\"642\":8,\"644\":1,\"646\":5,\"647\":2,\"648\":10,\"649\":6,\"650\":2,\"651\":8,\"652\":1,\"653\":6,\"654\":5,\"655\":8,\"656\":3,\"660\":2,\"661\":7,\"662\":2,\"663\":15,\"664\":6,\"665\":1,\"669\":1,\"670\":2,\"671\":6,\"718\":1,\"728\":1,\"729\":1,\"730\":1,\"738\":1,\"739\":1,\"740\":1,\"749\":7,\"772\":1,\"778\":2,\"779\":2,\"780\":2,\"781\":2,\"782\":5,\"783\":5,\"784\":7}}],[\"=\",{\"1\":{\"1\":21,\"7\":8,\"8\":15,\"9\":3,\"13\":5,\"18\":20,\"23\":8,\"26\":3,\"33\":1,\"43\":2,\"53\":6,\"54\":8,\"55\":6,\"56\":10,\"57\":6,\"58\":13,\"59\":14,\"60\":8,\"61\":15,\"62\":15,\"75\":1,\"76\":1,\"77\":15,\"79\":4,\"80\":4,\"81\":2,\"82\":2,\"83\":4,\"84\":1,\"89\":8,\"102\":46,\"103\":53,\"104\":64,\"114\":1,\"115\":3,\"117\":5,\"120\":3,\"121\":4,\"122\":5,\"123\":2,\"126\":9,\"127\":6,\"145\":1,\"190\":20,\"191\":1,\"193\":11,\"195\":73,\"196\":9,\"197\":24,\"198\":20,\"199\":66,\"200\":7,\"202\":27,\"204\":13,\"206\":133,\"209\":2,\"210\":1,\"211\":2,\"215\":8,\"216\":9,\"217\":9,\"218\":32,\"221\":5,\"224\":13,\"225\":23,\"226\":16,\"227\":17,\"230\":14,\"231\":7,\"232\":6,\"233\":11,\"234\":3,\"235\":14,\"236\":2,\"237\":5,\"238\":5,\"239\":34,\"240\":20,\"243\":46,\"254\":2,\"257\":1,\"260\":5,\"261\":4,\"263\":15,\"264\":4,\"265\":4,\"266\":7,\"268\":5,\"269\":3,\"271\":4,\"272\":1,\"273\":2,\"274\":4,\"280\":14,\"281\":17,\"282\":3,\"283\":51,\"287\":6,\"288\":3,\"289\":16,\"290\":3,\"291\":3,\"294\":2,\"297\":3,\"299\":7,\"300\":2,\"302\":2,\"303\":6,\"304\":2,\"305\":2,\"306\":2,\"307\":2,\"308\":2,\"309\":2,\"310\":2,\"311\":2,\"312\":2,\"313\":2,\"316\":3,\"317\":3,\"318\":4,\"319\":3,\"320\":9,\"445\":3,\"452\":2,\"455\":7,\"463\":2,\"464\":6,\"483\":3,\"519\":2,\"520\":1,\"521\":23,\"528\":1,\"532\":3,\"534\":32,\"535\":14,\"538\":1,\"540\":4,\"541\":1,\"542\":9,\"543\":2,\"544\":12,\"545\":1,\"546\":10,\"547\":26,\"548\":5,\"549\":3,\"550\":4,\"551\":8,\"552\":2,\"553\":10,\"554\":13,\"555\":12,\"556\":3,\"557\":11,\"558\":19,\"559\":8,\"560\":6,\"561\":11,\"562\":8,\"563\":18,\"564\":6,\"565\":48,\"566\":16,\"567\":4,\"568\":16,\"573\":23,\"575\":9,\"581\":2,\"582\":8,\"583\":13,\"584\":25,\"585\":14,\"586\":13,\"587\":3,\"588\":16,\"590\":9,\"591\":4,\"592\":2,\"594\":1,\"595\":8,\"596\":16,\"597\":26,\"601\":11,\"602\":2,\"603\":39,\"604\":2,\"606\":21,\"607\":18,\"608\":13,\"609\":11,\"610\":13,\"611\":19,\"612\":2,\"613\":9,\"614\":7,\"615\":13,\"625\":13,\"626\":5,\"627\":2,\"629\":14,\"630\":4,\"631\":5,\"635\":6,\"636\":6,\"637\":2,\"638\":1,\"641\":3,\"642\":29,\"643\":18,\"644\":23,\"646\":11,\"647\":6,\"648\":1,\"649\":5,\"650\":12,\"651\":11,\"652\":2,\"653\":13,\"654\":3,\"655\":7,\"656\":32,\"658\":1,\"659\":6,\"660\":18,\"661\":5,\"662\":7,\"663\":46,\"664\":14,\"665\":12,\"667\":1,\"668\":3,\"669\":3,\"670\":35,\"671\":4,\"689\":15,\"690\":14,\"699\":2,\"700\":1,\"703\":1,\"704\":1,\"705\":1,\"706\":1,\"718\":13,\"719\":3,\"720\":11,\"723\":3,\"724\":2,\"728\":2,\"729\":4,\"730\":6,\"738\":3,\"739\":2,\"740\":2,\"745\":1,\"748\":2,\"751\":4,\"752\":2,\"755\":3,\"758\":1,\"761\":1,\"762\":1,\"772\":3,\"776\":1,\"778\":3,\"779\":3,\"780\":4,\"781\":3,\"782\":3,\"783\":3,\"784\":3,\"789\":7,\"793\":5,\"794\":3,\"795\":3,\"797\":9,\"801\":4,\"804\":2}}],[\"feat\",{\"1\":{\"713\":1}}],[\"features\",{\"1\":{\"709\":1,\"713\":1}}],[\"f3f3eg9>hi<\",{\"1\":{\"619\":1}}],[\"f3f3eg9\",{\"1\":{\"619\":1,\"622\":1}}],[\"fd\",{\"1\":{\"455\":2}}],[\"ftth\",{\"0\":{\"423\":1},\"1\":{\"418\":1}}],[\"fcs\",{\"1\":{\"400\":1}}],[\"fcsa\",{\"1\":{\"390\":1}}],[\"fʊl\",{\"1\":{\"280\":1}}],[\"funky\",{\"1\":{\"663\":1}}],[\"function>\",{\"1\":{\"654\":4}}],[\"functional\",{\"1\":{\"585\":2,\"656\":1}}],[\"functions\",{\"1\":{\"583\":1,\"596\":1,\"603\":1,\"702\":3,\"704\":1}}],[\"function\",{\"0\":{\"283\":1},\"1\":{\"8\":2,\"13\":1,\"18\":1,\"23\":1,\"53\":1,\"54\":1,\"55\":1,\"56\":1,\"57\":2,\"58\":3,\"59\":3,\"60\":1,\"61\":1,\"62\":1,\"102\":11,\"103\":12,\"104\":14,\"114\":1,\"115\":2,\"117\":3,\"118\":1,\"120\":2,\"121\":2,\"122\":1,\"123\":2,\"126\":2,\"127\":3,\"190\":1,\"226\":1,\"237\":2,\"238\":5,\"253\":8,\"254\":1,\"256\":3,\"257\":3,\"258\":2,\"268\":8,\"269\":7,\"270\":2,\"271\":5,\"272\":2,\"274\":4,\"280\":1,\"281\":4,\"283\":7,\"287\":2,\"296\":2,\"313\":2,\"319\":1,\"320\":1,\"327\":12,\"328\":4,\"455\":2,\"483\":2,\"519\":3,\"520\":1,\"521\":5,\"528\":1,\"532\":9,\"533\":1,\"534\":1,\"535\":3,\"540\":2,\"542\":1,\"543\":2,\"544\":2,\"546\":1,\"547\":4,\"548\":1,\"549\":1,\"550\":3,\"551\":1,\"552\":2,\"553\":1,\"554\":4,\"555\":5,\"557\":1,\"558\":2,\"560\":2,\"562\":2,\"563\":7,\"565\":5,\"566\":5,\"567\":1,\"568\":1,\"573\":4,\"575\":2,\"581\":1,\"582\":1,\"583\":2,\"584\":6,\"585\":3,\"586\":1,\"587\":3,\"588\":5,\"589\":1,\"590\":1,\"591\":1,\"592\":1,\"593\":1,\"594\":1,\"595\":2,\"596\":1,\"597\":1,\"601\":2,\"602\":1,\"603\":13,\"604\":1,\"606\":5,\"607\":1,\"608\":1,\"609\":1,\"611\":1,\"612\":1,\"613\":2,\"614\":1,\"615\":3,\"629\":2,\"631\":1,\"635\":2,\"637\":1,\"642\":2,\"644\":4,\"646\":6,\"647\":7,\"649\":2,\"650\":1,\"651\":2,\"652\":1,\"653\":11,\"654\":12,\"655\":3,\"656\":4,\"659\":4,\"660\":2,\"661\":1,\"662\":2,\"663\":10,\"664\":3,\"665\":2,\"667\":6,\"668\":2,\"669\":1,\"670\":7,\"689\":1,\"690\":1,\"718\":1,\"723\":1,\"727\":1,\"728\":1,\"729\":1,\"730\":1,\"738\":1,\"748\":2,\"789\":7,\"793\":3,\"794\":1,\"795\":2,\"797\":5,\"804\":1}}],[\"fullpath\",{\"1\":{\"642\":1,\"646\":2,\"647\":2,\"649\":1}}],[\"full\",{\"1\":{\"588\":1,\"615\":2}}],[\"fulfilled\",{\"1\":{\"280\":6,\"281\":2,\"283\":4}}],[\"future\",{\"1\":{\"551\":1}}],[\"fufill\",{\"1\":{\"282\":1,\"283\":1}}],[\"fs\",{\"1\":{\"257\":3,\"455\":6}}],[\"fngenerrors\",{\"1\":{\"603\":3}}],[\"fns\",{\"1\":{\"583\":2,\"588\":2}}],[\"fn\",{\"1\":{\"257\":2,\"552\":2,\"654\":3,\"655\":3,\"662\":2,\"663\":2,\"665\":8}}],[\"f+0\",{\"1\":{\"227\":1}}],[\"fy\",{\"1\":{\"206\":15,\"243\":5}}],[\"fx\",{\"1\":{\"206\":15,\"243\":5}}],[\"fpart\",{\"1\":{\"195\":2}}],[\"ffc\",{\"0\":{\"176\":1},\"1\":{\"176\":1,\"187\":1}}],[\"found\",{\"1\":{\"806\":1}}],[\"foundation\",{\"1\":{\"713\":1}}],[\"four\",{\"1\":{\"200\":1,\"206\":2,\"243\":1,\"434\":1}}],[\"focus\",{\"1\":{\"532\":5,\"533\":2,\"534\":3,\"584\":2,\"615\":3}}],[\"focus`\",{\"1\":{\"532\":1}}],[\"fogend\",{\"1\":{\"239\":1}}],[\"fogstart\",{\"1\":{\"239\":2}}],[\"fogfactor\",{\"1\":{\"239\":2}}],[\"fogfar\",{\"1\":{\"239\":2}}],[\"fogfragcoord\",{\"1\":{\"239\":3}}],[\"fognear\",{\"1\":{\"239\":3}}],[\"fogcolor\",{\"1\":{\"239\":4}}],[\"fogcoord\",{\"1\":{\"239\":3}}],[\"fog\",{\"1\":{\"239\":1}}],[\"fovy\",{\"1\":{\"233\":3}}],[\"foobar\",{\"1\":{\"268\":2}}],[\"fooarr\",{\"1\":{\"263\":2}}],[\"fooarray\",{\"1\":{\"263\":2}}],[\"footer\",{\"1\":{\"185\":1}}],[\"foo\",{\"1\":{\"115\":2,\"120\":2,\"122\":2,\"123\":2,\"126\":2,\"127\":2,\"263\":10,\"265\":4,\"268\":5,\"269\":2,\"270\":4,\"271\":5,\"273\":2,\"274\":3,\"287\":3,\"288\":7,\"289\":16,\"290\":2,\"291\":4,\"294\":2,\"297\":2,\"302\":1,\"303\":1,\"304\":1,\"305\":1,\"306\":1,\"307\":1,\"317\":4,\"534\":1,\"555\":5,\"635\":1,\"643\":2,\"648\":6}}],[\"fonts\",{\"1\":{\"718\":1}}],[\"font\",{\"1\":{\"104\":1}}],[\"force\",{\"1\":{\"663\":1}}],[\"forward\",{\"1\":{\"645\":1}}],[\"forum\",{\"1\":{\"635\":2}}],[\"forprocessed\",{\"1\":{\"615\":2}}],[\"forbidden\",{\"1\":{\"609\":1}}],[\"forgiving\",{\"1\":{\"606\":1}}],[\"forgery\",{\"1\":{\"469\":1,\"475\":1}}],[\"fork\",{\"1\":{\"445\":1}}],[\"foreground\",{\"1\":{\"215\":1,\"216\":1,\"217\":1}}],[\"foreachchild\",{\"1\":{\"663\":1}}],[\"foreachgetter\",{\"1\":{\"663\":1}}],[\"foreachaction\",{\"1\":{\"663\":1}}],[\"foreachmutation\",{\"1\":{\"663\":1}}],[\"foreachvalue\",{\"1\":{\"663\":2}}],[\"foreach\",{\"1\":{\"102\":9,\"103\":12,\"104\":13,\"283\":2,\"542\":1,\"562\":1,\"642\":1,\"644\":2,\"649\":4,\"651\":1,\"660\":1,\"661\":2,\"662\":2,\"664\":2,\"665\":1}}],[\"formatcomponentname\",{\"1\":{\"544\":1}}],[\"format\",{\"1\":{\"455\":1,\"718\":1}}],[\"formatting\",{\"1\":{\"173\":1,\"176\":1,\"177\":1,\"183\":1}}],[\"form表单\",{\"1\":{\"185\":1}}],[\"form>\",{\"1\":{\"141\":1}}],[\"formed\",{\"1\":{\"140\":1,\"141\":1}}],[\"form\",{\"1\":{\"139\":1,\"141\":14}}],[\"for\",{\"0\":{\"530\":1},\"1\":{\"1\":3,\"18\":3,\"23\":1,\"53\":2,\"54\":2,\"55\":1,\"56\":2,\"58\":1,\"59\":1,\"60\":2,\"61\":5,\"62\":3,\"120\":1,\"139\":1,\"141\":1,\"190\":1,\"218\":1,\"232\":3,\"260\":2,\"263\":4,\"264\":1,\"266\":5,\"270\":2,\"271\":2,\"272\":2,\"273\":1,\"274\":4,\"277\":1,\"319\":1,\"327\":1,\"445\":1,\"521\":4,\"534\":2,\"535\":4,\"547\":4,\"548\":1,\"551\":1,\"552\":1,\"554\":2,\"555\":3,\"557\":1,\"558\":1,\"559\":1,\"561\":2,\"563\":3,\"564\":1,\"565\":8,\"568\":1,\"573\":2,\"575\":2,\"582\":3,\"588\":5,\"590\":2,\"592\":1,\"595\":3,\"596\":2,\"603\":1,\"608\":1,\"609\":1,\"613\":7,\"614\":4,\"615\":3,\"625\":1,\"626\":2,\"631\":1,\"635\":2,\"642\":2,\"644\":2,\"650\":2,\"652\":1,\"656\":1,\"660\":1,\"663\":4,\"664\":2,\"668\":2,\"670\":5,\"689\":4,\"710\":1,\"738\":1,\"804\":1}}],[\"friendly\",{\"1\":{\"718\":1}}],[\"friendlyerrorswebpackplugin\",{\"1\":{\"718\":2}}],[\"fresh\",{\"1\":{\"614\":1}}],[\"freshest\",{\"1\":{\"573\":1}}],[\"fresco\",{\"1\":{\"517\":3}}],[\"frontfacing\",{\"1\":{\"240\":3}}],[\"from后的路径是相对于项目的根目录\",{\"1\":{\"720\":1}}],[\"fromroute\",{\"1\":{\"646\":4,\"647\":4}}],[\"from\",{\"1\":{\"216\":1,\"225\":3,\"226\":1,\"263\":3,\"264\":6,\"271\":1,\"464\":3,\"538\":2,\"539\":1,\"540\":7,\"541\":2,\"543\":5,\"544\":1,\"558\":1,\"565\":1,\"583\":1,\"602\":1,\"625\":2,\"626\":2,\"629\":1,\"630\":6,\"631\":1,\"635\":5,\"637\":6,\"638\":2,\"641\":2,\"642\":3,\"648\":10,\"651\":1,\"652\":1,\"653\":1,\"655\":1,\"658\":2,\"720\":1,\"745\":1,\"747\":4}}],[\"fromi\",{\"1\":{\"18\":2}}],[\"frame\",{\"1\":{\"803\":2}}],[\"framework框架支持的一种主力开发语言\",{\"1\":{\"65\":1}}],[\"framework框架下运行\",{\"1\":{\"65\":1}}],[\"framework\",{\"1\":{\"65\":1}}],[\"framework是一个开发和运行环境\",{\"1\":{\"65\":1}}],[\"framework再次编译来运行\",{\"1\":{\"65\":1}}],[\"fragstencilref\",{\"1\":{\"240\":2}}],[\"fragdata\",{\"1\":{\"240\":1}}],[\"fragdepth\",{\"1\":{\"240\":2}}],[\"fragmentshader\",{\"1\":{\"237\":2}}],[\"fragment\",{\"0\":{\"209\":1,\"682\":1},\"1\":{\"803\":2}}],[\"fragpos\",{\"1\":{\"199\":2}}],[\"fragcolor\",{\"1\":{\"190\":3,\"199\":11,\"202\":16,\"204\":16,\"206\":17,\"209\":4,\"210\":1,\"211\":1,\"215\":1,\"216\":1,\"217\":1,\"218\":1,\"224\":4,\"225\":2,\"226\":2,\"227\":1,\"238\":3,\"239\":3,\"240\":7}}],[\"fragcoord存储了活动线程正在处理的像素或屏幕碎片的坐标\",{\"1\":{\"211\":1}}],[\"fragcoord\",{\"0\":{\"211\":1},\"1\":{\"190\":4,\"211\":1,\"215\":1,\"216\":1,\"217\":1,\"218\":1,\"224\":2,\"225\":2,\"226\":2,\"227\":1,\"240\":2}}],[\"fractv\",{\"1\":{\"195\":1}}],[\"fracta\",{\"1\":{\"195\":1}}],[\"fract\",{\"1\":{\"195\":4,\"200\":2,\"204\":2,\"206\":10,\"243\":4}}],[\"factory\",{\"1\":{\"653\":1,\"735\":1}}],[\"facebook\",{\"1\":{\"517\":2}}],[\"faceforward\",{\"1\":{\"197\":4}}],[\"falsy\",{\"1\":{\"584\":1}}],[\"false表示失败\",{\"1\":{\"320\":1}}],[\"false表示成功\",{\"1\":{\"294\":1}}],[\"false\",{\"1\":{\"1\":1,\"8\":2,\"89\":4,\"102\":2,\"103\":3,\"104\":3,\"193\":2,\"230\":2,\"231\":1,\"240\":1,\"265\":4,\"266\":2,\"269\":4,\"271\":1,\"274\":3,\"280\":1,\"283\":1,\"287\":1,\"290\":2,\"294\":1,\"299\":1,\"302\":3,\"303\":1,\"304\":1,\"310\":1,\"311\":1,\"312\":1,\"317\":3,\"318\":1,\"521\":2,\"534\":5,\"544\":1,\"551\":1,\"554\":2,\"557\":3,\"558\":3,\"561\":1,\"563\":1,\"565\":3,\"567\":4,\"568\":2,\"573\":1,\"575\":1,\"582\":1,\"586\":1,\"588\":2,\"591\":1,\"597\":2,\"603\":1,\"612\":1,\"613\":3,\"614\":1,\"615\":2,\"629\":1,\"635\":1,\"636\":1,\"638\":1,\"642\":1,\"643\":1,\"646\":2,\"647\":2,\"649\":1,\"650\":1,\"651\":4,\"653\":2,\"655\":2,\"656\":1,\"660\":1,\"663\":1,\"688\":1,\"689\":1,\"699\":1,\"720\":3,\"760\":1}}],[\"fallback\",{\"1\":{\"568\":1,\"643\":4,\"718\":1}}],[\"fastjson\",{\"1\":{\"517\":1}}],[\"fatal\",{\"1\":{\"457\":1}}],[\"fatherindex\",{\"1\":{\"59\":5}}],[\"fails\",{\"1\":{\"613\":1,\"626\":1}}],[\"failed\",{\"1\":{\"588\":1}}],[\"failure\",{\"1\":{\"294\":2}}],[\"fail\",{\"1\":{\"281\":1,\"803\":1}}],[\"far\",{\"1\":{\"233\":5}}],[\"fade\",{\"1\":{\"206\":15,\"243\":5}}],[\"flushcallbacks\",{\"1\":{\"558\":2,\"567\":6,\"568\":6}}],[\"flush\",{\"1\":{\"557\":1,\"558\":3,\"582\":2}}],[\"flushing=\",{\"1\":{\"557\":1}}],[\"flushing\",{\"1\":{\"557\":5,\"558\":5}}],[\"flushschedulerqueue\",{\"0\":{\"558\":1},\"1\":{\"556\":1,\"557\":3,\"558\":3,\"559\":1,\"568\":1}}],[\"fl\",{\"1\":{\"280\":1}}],[\"flippednormal\",{\"1\":{\"197\":1}}],[\"flight\",{\"1\":{\"18\":4}}],[\"flights\",{\"1\":{\"18\":6}}],[\"flex的元素将会生成自适应容器\",{\"1\":{\"176\":1}}],[\"flex\",{\"1\":{\"174\":2,\"176\":7,\"184\":1,\"187\":1}}],[\"flow\",{\"1\":{\"184\":1,\"585\":1}}],[\"flowchart\",{\"1\":{\"149\":1,\"580\":1}}],[\"floatbitstouint\",{\"1\":{\"195\":3}}],[\"floatbitstoint\",{\"1\":{\"195\":3}}],[\"float\",{\"1\":{\"159\":1,\"174\":3,\"175\":2,\"190\":17,\"191\":4,\"192\":4,\"193\":2,\"195\":48,\"196\":3,\"197\":4,\"198\":20,\"199\":19,\"200\":7,\"202\":38,\"204\":34,\"206\":79,\"209\":4,\"210\":3,\"211\":2,\"215\":5,\"216\":6,\"217\":5,\"218\":35,\"224\":4,\"225\":10,\"226\":10,\"227\":5,\"230\":4,\"232\":8,\"233\":7,\"234\":4,\"235\":6,\"236\":1,\"238\":4,\"239\":9,\"240\":4,\"241\":5,\"243\":30}}],[\"floorv\",{\"1\":{\"195\":1}}],[\"floora\",{\"1\":{\"195\":1}}],[\"floor\",{\"1\":{\"8\":1,\"56\":2,\"57\":1,\"61\":2,\"195\":5,\"200\":1,\"204\":4,\"206\":8,\"225\":1,\"226\":1,\"243\":3,\"319\":3}}],[\"flag\",{\"1\":{\"455\":4,\"544\":1,\"597\":1,\"675\":2}}],[\"flags\",{\"1\":{\"141\":1,\"455\":1}}],[\"flatten\",{\"1\":{\"654\":3}}],[\"flatmapcomponents\",{\"1\":{\"653\":2,\"654\":2}}],[\"flat\",{\"1\":{\"104\":1}}],[\"fire\",{\"1\":{\"559\":1,\"565\":1,\"649\":1,\"670\":1}}],[\"firefox\",{\"1\":{\"534\":1,\"713\":5}}],[\"firstproxy\",{\"1\":{\"297\":2}}],[\"first\",{\"1\":{\"8\":1,\"297\":2,\"646\":2}}],[\"fifty\",{\"1\":{\"434\":1}}],[\"fin\",{\"1\":{\"803\":2}}],[\"finishmodules\",{\"1\":{\"735\":1}}],[\"finer\",{\"1\":{\"457\":1}}],[\"finaloptions\",{\"1\":{\"603\":6}}],[\"finally\",{\"1\":{\"283\":1,\"521\":1,\"565\":1,\"566\":1,\"583\":1,\"670\":1}}],[\"finalcolor\",{\"1\":{\"218\":13}}],[\"findindex\",{\"1\":{\"630\":1}}],[\"findidxinold\",{\"1\":{\"597\":1}}],[\"findcheapestprice\",{\"1\":{\"18\":1}}],[\"find\",{\"1\":{\"8\":1}}],[\"fi\",{\"1\":{\"218\":1}}],[\"figcaption\",{\"1\":{\"185\":2}}],[\"fixed\",{\"1\":{\"174\":1}}],[\"fix\",{\"1\":{\"145\":2}}],[\"filesystem\",{\"1\":{\"719\":1}}],[\"files\",{\"1\":{\"631\":1}}],[\"filetree\",{\"1\":{\"517\":2}}],[\"file\",{\"1\":{\"464\":2,\"629\":1,\"635\":1,\"718\":1,\"759\":1}}],[\"file1\",{\"1\":{\"335\":1}}],[\"filename\",{\"1\":{\"257\":1,\"464\":1,\"631\":1,\"635\":1,\"718\":2,\"720\":1}}],[\"filters\",{\"1\":{\"543\":1}}],[\"filter`\",{\"1\":{\"542\":1}}],[\"filter\",{\"1\":{\"102\":1,\"103\":2,\"104\":2,\"152\":1,\"573\":2,\"626\":2,\"636\":1,\"650\":1,\"661\":2}}],[\"fillpropsindata\",{\"1\":{\"656\":2}}],[\"fillparams\",{\"1\":{\"650\":1}}],[\"filled\",{\"1\":{\"141\":1}}],[\"fillrect\",{\"1\":{\"104\":1}}],[\"fillstyle=\",{\"1\":{\"104\":1}}],[\"fill\",{\"1\":{\"18\":2}}],[\"fieldset表单元素分组\",{\"1\":{\"185\":1}}],[\"field\",{\"1\":{\"77\":1,\"78\":1,\"635\":1}}],[\"f\",{\"1\":{\"1\":2,\"18\":7,\"33\":1,\"193\":1,\"200\":4,\"206\":8,\"227\":6,\"237\":1,\"243\":4,\"263\":5,\"265\":1,\"268\":1,\"273\":2,\"280\":2,\"281\":2,\"283\":4,\"635\":1,\"667\":3,\"803\":1}}],[\"e914\",{\"1\":{\"801\":2}}],[\"ecma\",{\"1\":{\"720\":3}}],[\"ecmascript\",{\"1\":{\"263\":1,\"285\":1,\"300\":2,\"301\":1}}],[\"eot|svg|ttf|woff2\",{\"1\":{\"718\":1}}],[\"e5\",{\"1\":{\"644\":2}}],[\"either\",{\"1\":{\"588\":1}}],[\"effect\",{\"1\":{\"544\":1}}],[\"effectscope\",{\"1\":{\"544\":1}}],[\"effects\",{\"1\":{\"206\":3,\"243\":1,\"565\":1}}],[\"egg\",{\"1\":{\"452\":1}}],[\"eg\",{\"1\":{\"434\":3}}],[\"err\",{\"1\":{\"281\":2,\"283\":2,\"455\":1,\"483\":1,\"649\":5,\"651\":7,\"663\":3,\"772\":3}}],[\"errorcbs\",{\"1\":{\"649\":1,\"651\":2}}],[\"errored\",{\"1\":{\"583\":1}}],[\"errors\",{\"1\":{\"434\":1,\"590\":1,\"603\":4,\"631\":3,\"635\":2,\"651\":1,\"718\":3}}],[\"error\",{\"1\":{\"280\":2,\"281\":4,\"282\":2,\"283\":6,\"319\":2,\"457\":1,\"535\":1,\"547\":1,\"573\":2,\"583\":2,\"585\":8,\"589\":1,\"601\":1,\"603\":1,\"651\":2,\"653\":5,\"656\":1,\"659\":1,\"663\":2,\"665\":2,\"718\":5,\"727\":1,\"772\":1}}],[\"eta\",{\"1\":{\"197\":4}}],[\"euclidean\",{\"1\":{\"197\":1}}],[\"edge\",{\"1\":{\"190\":1,\"195\":4,\"202\":6,\"588\":1,\"710\":1}}],[\"edge1\",{\"1\":{\"190\":3,\"195\":5}}],[\"edge0\",{\"1\":{\"190\":3,\"195\":5}}],[\"edges\",{\"1\":{\"18\":1}}],[\"equal\",{\"1\":{\"139\":1,\"140\":1,\"483\":1}}],[\"early\",{\"1\":{\"635\":1}}],[\"each\",{\"1\":{\"139\":1}}],[\"eating\",{\"1\":{\"84\":2}}],[\"eat\",{\"1\":{\"84\":2}}],[\"es6\",{\"1\":{\"713\":3}}],[\"es6解决变量提升的缺陷\",{\"0\":{\"121\":1}}],[\"esr\",{\"1\":{\"713\":3}}],[\"essentials\",{\"1\":{\"644\":1}}],[\"eslint\",{\"1\":{\"635\":2,\"709\":1}}],[\"esm\",{\"1\":{\"626\":1}}],[\"es\",{\"1\":{\"190\":3,\"209\":1,\"210\":1,\"211\":1,\"215\":1,\"216\":1,\"217\":1,\"218\":1,\"224\":2,\"225\":2,\"226\":2,\"227\":1,\"238\":1}}],[\"es的作用域只有两种\",{\"1\":{\"119\":1}}],[\"even1\",{\"1\":{\"778\":1,\"779\":1,\"780\":1,\"781\":1}}],[\"even\",{\"1\":{\"534\":1,\"559\":1,\"565\":1,\"626\":1,\"670\":1}}],[\"event2\",{\"1\":{\"778\":2,\"779\":2,\"780\":2,\"781\":2,\"782\":2,\"783\":2,\"784\":1}}],[\"event1\",{\"1\":{\"778\":1,\"779\":1,\"780\":1,\"781\":2,\"782\":2,\"783\":2,\"784\":3}}],[\"eventsmixin\",{\"1\":{\"543\":2}}],[\"events\",{\"1\":{\"457\":1,\"543\":1,\"562\":1}}],[\"eventloop\",{\"0\":{\"245\":1,\"248\":1,\"255\":1}}],[\"eventargs\",{\"1\":{\"77\":2}}],[\"eventhandler\",{\"1\":{\"77\":1}}],[\"event\",{\"0\":{\"251\":1},\"1\":{\"77\":2,\"237\":1,\"255\":2,\"256\":2,\"257\":1,\"258\":1,\"528\":1,\"534\":1,\"565\":2,\"646\":1,\"665\":4,\"797\":2}}],[\"every\",{\"1\":{\"521\":1,\"565\":1,\"613\":1,\"670\":1}}],[\"eval\",{\"0\":{\"763\":1},\"1\":{\"760\":1}}],[\"evaluation\",{\"1\":{\"663\":1}}],[\"evaluate\",{\"1\":{\"191\":1,\"521\":3,\"554\":1,\"565\":3}}],[\"evalute\",{\"1\":{\"554\":1}}],[\"evalaute\",{\"1\":{\"554\":1}}],[\"eval的代码也会被编译\",{\"1\":{\"117\":1}}],[\"enforce的取值\",{\"1\":{\"746\":1}}],[\"enforce\",{\"1\":{\"726\":1,\"746\":1}}],[\"enablestrictmode\",{\"1\":{\"663\":2}}],[\"enable\",{\"1\":{\"663\":1}}],[\"ensureurl\",{\"1\":{\"649\":1,\"651\":3,\"655\":2}}],[\"ensure\",{\"1\":{\"586\":1,\"597\":1,\"626\":1,\"642\":1,\"651\":1,\"655\":1}}],[\"ensures\",{\"1\":{\"558\":1}}],[\"enough\",{\"1\":{\"573\":1}}],[\"enumeration\",{\"1\":{\"551\":1}}],[\"enumerable\",{\"1\":{\"550\":1,\"559\":1,\"563\":1,\"663\":1}}],[\"env=production\",{\"1\":{\"718\":1}}],[\"env\",{\"0\":{\"697\":1},\"1\":{\"464\":3,\"534\":2,\"543\":2,\"650\":2,\"651\":2,\"653\":2,\"696\":1,\"697\":1,\"699\":1,\"705\":3,\"706\":1,\"709\":1,\"718\":4,\"755\":4}}],[\"environment\",{\"1\":{\"122\":1,\"738\":1}}],[\"encoding\",{\"1\":{\"455\":3}}],[\"encapsulates\",{\"1\":{\"139\":1}}],[\"enterguards\",{\"1\":{\"651\":2,\"655\":2}}],[\"enteredcbs\",{\"1\":{\"644\":1}}],[\"enter\",{\"1\":{\"517\":2,\"590\":1,\"651\":2,\"655\":1}}],[\"entry\",{\"0\":{\"540\":1},\"1\":{\"455\":1,\"540\":1,\"573\":8,\"586\":1,\"661\":4,\"662\":2,\"663\":4,\"699\":1,\"718\":3}}],[\"entries\",{\"1\":{\"102\":2,\"103\":3,\"104\":3}}],[\"entities\",{\"1\":{\"139\":1}}],[\"entity\",{\"1\":{\"139\":1}}],[\"endian\",{\"1\":{\"803\":1}}],[\"endif\",{\"1\":{\"190\":3,\"209\":1,\"210\":1,\"211\":1,\"215\":1,\"216\":1,\"217\":1,\"218\":1,\"224\":2,\"225\":2,\"226\":2,\"227\":1,\"606\":1}}],[\"endtagmatch\",{\"1\":{\"606\":4}}],[\"endtag\",{\"1\":{\"544\":4,\"606\":2}}],[\"end\",{\"1\":{\"23\":4,\"102\":2,\"103\":2,\"104\":2,\"195\":2,\"256\":2,\"271\":2,\"534\":1,\"544\":1,\"603\":1,\"604\":5,\"606\":4,\"607\":7,\"608\":3,\"609\":2,\"610\":1,\"635\":4,\"754\":1,\"793\":1}}],[\"em\",{\"1\":{\"180\":1,\"186\":1}}],[\"emit\",{\"1\":{\"102\":7,\"103\":7,\"104\":7,\"320\":2,\"558\":1,\"562\":1,\"663\":1,\"735\":1,\"778\":2,\"779\":2,\"780\":2,\"781\":2,\"782\":2,\"783\":2,\"784\":2}}],[\"emptynodeat\",{\"1\":{\"588\":1}}],[\"emptynode\",{\"1\":{\"535\":4,\"575\":1,\"588\":1,\"595\":2}}],[\"empty\",{\"1\":{\"77\":1,\"583\":1,\"588\":2,\"592\":1,\"656\":2}}],[\"exec\",{\"1\":{\"611\":1}}],[\"execution\",{\"1\":{\"70\":1}}],[\"except\",{\"1\":{\"592\":1}}],[\"exception\",{\"1\":{\"70\":1,\"278\":1,\"646\":1,\"649\":1}}],[\"excluded\",{\"1\":{\"573\":1}}],[\"exclude\",{\"1\":{\"571\":1,\"573\":5,\"699\":1,\"718\":2,\"746\":1}}],[\"exist`\",{\"1\":{\"650\":1}}],[\"existing\",{\"1\":{\"535\":1,\"646\":1}}],[\"exit\",{\"0\":{\"451\":1},\"1\":{\"445\":1}}],[\"explicit\",{\"1\":{\"629\":1}}],[\"expectscroll\",{\"1\":{\"642\":2,\"646\":2}}],[\"expecthtml\",{\"1\":{\"604\":2,\"606\":2,\"608\":1}}],[\"expect\",{\"1\":{\"535\":1,\"547\":1,\"573\":2,\"585\":8,\"601\":1,\"603\":1,\"656\":1}}],[\"expression\",{\"1\":{\"521\":1,\"528\":1,\"555\":1,\"559\":1,\"565\":5,\"610\":3,\"611\":2,\"670\":3,\"735\":1}}],[\"express\",{\"1\":{\"464\":3,\"789\":3,\"793\":4,\"795\":4,\"797\":3}}],[\"exp2\",{\"1\":{\"198\":3}}],[\"exp\",{\"1\":{\"198\":3,\"611\":4}}],[\"expose\",{\"1\":{\"544\":1}}],[\"exposed\",{\"1\":{\"542\":1}}],[\"exporfn\",{\"1\":{\"521\":2,\"555\":5,\"565\":5,\"566\":4,\"669\":2,\"670\":7}}],[\"exportcert\",{\"1\":{\"517\":1}}],[\"export\",{\"1\":{\"464\":1,\"520\":1,\"521\":2,\"534\":2,\"535\":1,\"540\":2,\"541\":1,\"542\":1,\"543\":1,\"546\":1,\"547\":2,\"548\":1,\"549\":1,\"550\":1,\"554\":1,\"557\":1,\"560\":1,\"561\":1,\"562\":1,\"563\":3,\"564\":1,\"565\":1,\"566\":2,\"567\":1,\"572\":1,\"573\":1,\"582\":1,\"584\":2,\"585\":1,\"587\":2,\"588\":4,\"595\":1,\"603\":3,\"604\":1,\"606\":1,\"609\":1,\"611\":1,\"612\":1,\"615\":2,\"630\":2,\"635\":4,\"637\":6,\"638\":1,\"641\":2,\"642\":2,\"643\":1,\"644\":2,\"646\":3,\"647\":1,\"653\":1,\"654\":2,\"655\":1,\"656\":1,\"659\":2,\"660\":1,\"663\":2,\"664\":2,\"665\":1,\"668\":1,\"670\":2}}],[\"exports导出函数为normal函数\",{\"1\":{\"749\":1}}],[\"exports=\",{\"1\":{\"727\":1}}],[\"exports\",{\"1\":{\"283\":1,\"626\":1,\"629\":1,\"631\":1,\"635\":2,\"637\":1,\"699\":2,\"700\":1,\"703\":1,\"704\":1,\"705\":1,\"706\":1,\"718\":1,\"719\":1,\"720\":1,\"723\":2,\"724\":1,\"728\":1,\"729\":1,\"730\":1,\"739\":1,\"740\":1,\"745\":1,\"748\":2,\"749\":1,\"751\":1,\"752\":1,\"755\":3,\"758\":1,\"762\":1}}],[\"expo\",{\"1\":{\"190\":1}}],[\"ext\",{\"1\":{\"718\":2}}],[\"extremely\",{\"1\":{\"588\":1}}],[\"extractguard\",{\"1\":{\"654\":2}}],[\"extractguards\",{\"0\":{\"654\":1},\"1\":{\"654\":3}}],[\"extractenterguards\",{\"1\":{\"651\":1,\"655\":1}}],[\"extracting\",{\"1\":{\"651\":1,\"655\":1}}],[\"extractupdatehooks\",{\"1\":{\"651\":1,\"654\":1}}],[\"extractleaveguards\",{\"1\":{\"651\":1,\"654\":1}}],[\"extractpropsfromvnodedata\",{\"1\":{\"585\":1}}],[\"extract\",{\"1\":{\"585\":2,\"718\":1,\"720\":1}}],[\"extra\",{\"1\":{\"141\":1}}],[\"extended\",{\"1\":{\"803\":2}}],[\"extendoptions\",{\"1\":{\"546\":2,\"547\":2}}],[\"extend时\",{\"1\":{\"546\":1}}],[\"extend\",{\"1\":{\"455\":1,\"540\":4,\"542\":4,\"546\":2,\"547\":2,\"551\":1,\"585\":1,\"603\":2,\"646\":1,\"653\":1,\"654\":2,\"656\":3}}],[\"extends\",{\"1\":{\"263\":1,\"547\":3,\"646\":1,\"647\":1,\"713\":1}}],[\"extensions\",{\"1\":{\"89\":4}}],[\"example\",{\"1\":{\"78\":1,\"89\":1,\"141\":1,\"588\":1,\"619\":4,\"624\":1,\"653\":3}}],[\"elapsed\",{\"1\":{\"718\":1}}],[\"elasticsearch\",{\"1\":{\"464\":4}}],[\"elm\",{\"1\":{\"575\":4,\"588\":4,\"590\":8,\"591\":2,\"592\":1,\"593\":3,\"596\":10,\"597\":9}}],[\"elm插入父节点\",{\"1\":{\"574\":1}}],[\"elm缓存创建的dom节点\",{\"1\":{\"574\":1}}],[\"elk一般适用于收集\",{\"1\":{\"466\":1}}],[\"elk\",{\"0\":{\"464\":1},\"1\":{\"464\":4}}],[\"el\",{\"1\":{\"263\":4,\"532\":2,\"533\":2,\"534\":18,\"538\":1,\"540\":5,\"544\":2,\"566\":8,\"581\":7,\"582\":2,\"586\":2,\"594\":3,\"601\":10,\"602\":5,\"603\":17,\"615\":54}}],[\"els\",{\"1\":{\"263\":3}}],[\"elsewhere\",{\"1\":{\"653\":1}}],[\"else\",{\"1\":{\"7\":2,\"8\":1,\"13\":1,\"57\":1,\"59\":1,\"61\":1,\"104\":1,\"195\":3,\"218\":5,\"224\":1,\"225\":2,\"240\":2,\"266\":2,\"281\":2,\"283\":3,\"294\":1,\"317\":2,\"318\":1,\"319\":1,\"455\":2,\"521\":3,\"534\":6,\"535\":2,\"544\":3,\"547\":1,\"549\":1,\"554\":1,\"555\":1,\"557\":4,\"559\":1,\"560\":1,\"561\":2,\"563\":3,\"565\":7,\"566\":1,\"567\":1,\"568\":3,\"573\":3,\"583\":1,\"584\":6,\"586\":1,\"588\":5,\"590\":2,\"592\":1,\"593\":1,\"596\":5,\"597\":9,\"601\":3,\"603\":4,\"606\":1,\"609\":2,\"610\":5,\"613\":2,\"614\":1,\"615\":9,\"631\":1,\"635\":1,\"642\":1,\"646\":1,\"647\":2,\"650\":1,\"651\":5,\"653\":1,\"655\":6,\"656\":2,\"659\":2,\"663\":2,\"668\":1,\"670\":3,\"688\":1,\"689\":3,\"690\":1,\"738\":1,\"772\":1}}],[\"ele\",{\"1\":{\"445\":1}}],[\"elevation\",{\"1\":{\"243\":5}}],[\"elem\",{\"1\":{\"140\":5,\"141\":3}}],[\"element=<h1>hello<\",{\"1\":{\"689\":1}}],[\"elements\",{\"1\":{\"77\":3,\"139\":1,\"140\":2,\"141\":4,\"584\":2,\"588\":1,\"597\":1}}],[\"element\",{\"1\":{\"8\":1,\"77\":1,\"102\":25,\"103\":33,\"104\":38,\"140\":4,\"141\":4,\"187\":1,\"534\":2,\"540\":1,\"566\":2,\"575\":1,\"581\":1,\"582\":1,\"588\":3,\"590\":1,\"591\":1,\"592\":1,\"594\":1,\"596\":1,\"597\":3,\"601\":1,\"602\":1,\"603\":2,\"609\":19,\"610\":2,\"615\":1,\"689\":1,\"690\":2}}],[\"e\",{\"1\":{\"1\":2,\"40\":2,\"77\":3,\"198\":4,\"274\":3,\"281\":2,\"282\":4,\"294\":1,\"521\":3,\"529\":1,\"543\":1,\"563\":7,\"565\":3,\"567\":2,\"582\":1,\"583\":2,\"588\":1,\"635\":1,\"646\":1,\"649\":3,\"651\":2,\"652\":2,\"653\":2,\"655\":2,\"667\":4,\"670\":7}}],[\"dynamically\",{\"1\":{\"651\":1}}],[\"dynamicargre\",{\"1\":{\"534\":3}}],[\"dynamic\",{\"1\":{\"534\":3,\"544\":1,\"551\":1,\"613\":1}}],[\"duplicate\",{\"1\":{\"629\":1,\"663\":1}}],[\"due\",{\"1\":{\"594\":1}}],[\"during\",{\"1\":{\"521\":1,\"551\":1,\"554\":1,\"558\":1,\"585\":1,\"597\":1,\"651\":1,\"656\":1}}],[\"duo\",{\"1\":{\"13\":1}}],[\"db\",{\"1\":{\"517\":1}}],[\"dclound\",{\"1\":{\"517\":1}}],[\"dcloud\",{\"1\":{\"517\":3}}],[\"dgst\",{\"1\":{\"517\":1}}],[\"dns预解析\",{\"0\":{\"497\":1}}],[\"dns\",{\"1\":{\"345\":3,\"355\":1}}],[\"dns基本工作\",{\"0\":{\"345\":1}}],[\"dns服务器\",{\"0\":{\"344\":1},\"1\":{\"330\":1}}],[\"dvec4\",{\"1\":{\"231\":2}}],[\"dvec3\",{\"1\":{\"231\":2}}],[\"dvec2\",{\"1\":{\"231\":4}}],[\"drawable\",{\"1\":{\"517\":1}}],[\"draw\",{\"1\":{\"225\":1}}],[\"drop\",{\"1\":{\"152\":1}}],[\"dfd\",{\"1\":{\"283\":5}}],[\"dfdy\",{\"1\":{\"199\":3}}],[\"dfdx\",{\"1\":{\"199\":3}}],[\"dfn\",{\"1\":{\"186\":1}}],[\"dpdy\",{\"1\":{\"199\":12}}],[\"dpdx\",{\"1\":{\"199\":12}}],[\"dl定义列表\",{\"1\":{\"185\":1}}],[\"dd定义列表中定义条目描述\",{\"1\":{\"185\":1}}],[\"date\",{\"1\":{\"300\":5,\"793\":1,\"795\":1}}],[\"dataurlcondition\",{\"1\":{\"718\":1}}],[\"data`\",{\"1\":{\"553\":1}}],[\"data\",{\"1\":{\"70\":1,\"102\":1,\"103\":1,\"104\":1,\"252\":2,\"254\":2,\"281\":2,\"326\":1,\"327\":3,\"455\":3,\"517\":2,\"519\":1,\"535\":4,\"544\":2,\"549\":5,\"550\":1,\"553\":13,\"556\":1,\"560\":10,\"568\":1,\"573\":2,\"575\":2,\"583\":2,\"584\":22,\"585\":16,\"587\":1,\"588\":1,\"589\":3,\"590\":3,\"591\":1,\"592\":3,\"595\":1,\"596\":8,\"615\":5,\"617\":1,\"619\":2,\"622\":1,\"635\":2,\"642\":2,\"656\":13,\"663\":2,\"665\":2,\"667\":1,\"713\":2,\"789\":2,\"797\":1,\"803\":5}}],[\"dash\",{\"1\":{\"141\":1}}],[\"dashes\",{\"1\":{\"139\":1,\"140\":1,\"141\":2}}],[\"don\",{\"1\":{\"629\":1,\"642\":1}}],[\"doneplugin\",{\"1\":{\"739\":3,\"740\":3}}],[\"donetodoscount\",{\"1\":{\"664\":1}}],[\"done\",{\"1\":{\"260\":3,\"264\":1,\"265\":13,\"266\":4,\"268\":2,\"269\":7,\"271\":2,\"274\":8,\"575\":1,\"591\":1,\"735\":1,\"739\":1,\"740\":1}}],[\"down\",{\"1\":{\"590\":1}}],[\"download\",{\"1\":{\"517\":1}}],[\"downloads\",{\"1\":{\"517\":1}}],[\"does\",{\"1\":{\"575\":1,\"650\":1}}],[\"doesn\",{\"1\":{\"534\":1,\"575\":2,\"653\":1}}],[\"docs\",{\"1\":{\"705\":1}}],[\"docs<\",{\"1\":{\"635\":2}}],[\"doctypematch\",{\"1\":{\"606\":3}}],[\"doctype\",{\"1\":{\"606\":5}}],[\"docker\",{\"1\":{\"464\":1}}],[\"documentation<\",{\"1\":{\"635\":2}}],[\"documentelement\",{\"1\":{\"601\":1,\"603\":1}}],[\"document\",{\"1\":{\"99\":1,\"102\":5,\"103\":5,\"104\":5,\"237\":2,\"254\":2,\"263\":1,\"568\":1,\"601\":2,\"603\":3,\"793\":1,\"794\":1,\"795\":1}}],[\"do\",{\"1\":{\"326\":3,\"544\":1,\"575\":1,\"585\":1,\"588\":1,\"596\":2,\"613\":1,\"642\":1}}],[\"dotsize\",{\"1\":{\"239\":2}}],[\"dots\",{\"1\":{\"218\":2}}],[\"dotproduct\",{\"1\":{\"197\":1}}],[\"dot\",{\"1\":{\"197\":5,\"200\":1,\"204\":2,\"206\":26,\"218\":7,\"226\":1,\"243\":9}}],[\"dom更新完成后\",{\"1\":{\"663\":1}}],[\"dom渲染\",{\"1\":{\"567\":1}}],[\"domprops\",{\"1\":{\"528\":1}}],[\"dom型xss攻击\",{\"0\":{\"473\":1}}],[\"domelement\",{\"1\":{\"237\":2}}],[\"dom树的生成\",{\"0\":{\"134\":1}}],[\"dom树\",{\"0\":{\"133\":1}}],[\"domcontentloaded\",{\"1\":{\"102\":3,\"103\":3,\"104\":3}}],[\"dom\",{\"0\":{\"98\":1,\"100\":1},\"1\":{\"97\":3,\"98\":3,\"100\":2,\"108\":2,\"133\":6,\"134\":2,\"139\":2,\"140\":1,\"141\":1,\"249\":1,\"263\":1,\"532\":1,\"554\":1,\"563\":1,\"568\":1,\"585\":1,\"587\":1,\"588\":2,\"589\":3,\"590\":4,\"603\":2,\"619\":1,\"623\":1,\"646\":1,\"675\":1}}],[\"dog\",{\"1\":{\"84\":4}}],[\"double\",{\"1\":{\"77\":1,\"79\":2,\"81\":4,\"82\":3,\"83\":4,\"193\":2,\"230\":4}}],[\"dst\",{\"1\":{\"18\":6}}],[\"dead\",{\"1\":{\"712\":1,\"713\":2,\"714\":1,\"715\":2}}],[\"deactivated\",{\"1\":{\"651\":2,\"652\":3,\"654\":2}}],[\"deamon\",{\"1\":{\"452\":1}}],[\"demand\",{\"1\":{\"590\":1}}],[\"deep\",{\"1\":{\"521\":2,\"555\":2,\"559\":2,\"565\":8,\"566\":1,\"622\":2,\"663\":1,\"667\":1,\"670\":7}}],[\"debuggerevent\",{\"1\":{\"565\":2}}],[\"debuggereventextrainfo\",{\"1\":{\"557\":1,\"564\":2}}],[\"debug\",{\"1\":{\"454\":1,\"457\":2,\"464\":2}}],[\"delimiters\",{\"1\":{\"601\":2,\"603\":4,\"610\":1,\"611\":6}}],[\"del\",{\"1\":{\"542\":1}}],[\"delete\",{\"1\":{\"295\":1,\"307\":4,\"542\":1,\"543\":1,\"603\":1}}],[\"deleteproperty\",{\"0\":{\"307\":2},\"1\":{\"294\":1,\"295\":1,\"307\":7}}],[\"delay\",{\"1\":{\"281\":2,\"283\":2,\"573\":1}}],[\"decodehtmlcached\",{\"1\":{\"610\":1}}],[\"decodeattr\",{\"1\":{\"608\":1}}],[\"decoration\",{\"1\":{\"289\":3}}],[\"declarations\",{\"1\":{\"102\":1,\"103\":1,\"104\":1,\"690\":3}}],[\"depids\",{\"1\":{\"565\":5}}],[\"deps\",{\"1\":{\"521\":2,\"565\":11}}],[\"dependarray\",{\"1\":{\"563\":3}}],[\"depend\",{\"1\":{\"521\":3,\"554\":3,\"556\":1,\"563\":3,\"564\":1,\"565\":3,\"671\":2}}],[\"dependencies\",{\"1\":{\"517\":1,\"521\":1,\"565\":3,\"670\":1}}],[\"dependency\",{\"1\":{\"139\":1,\"140\":1,\"565\":3}}],[\"dep\",{\"0\":{\"564\":1},\"1\":{\"521\":2,\"523\":3,\"524\":3,\"548\":1,\"554\":2,\"556\":8,\"557\":2,\"561\":4,\"562\":1,\"563\":16,\"564\":4,\"565\":8,\"566\":1,\"671\":4}}],[\"deptarget\",{\"1\":{\"521\":1,\"563\":1,\"564\":3,\"565\":1,\"566\":1}}],[\"depth++\",{\"1\":{\"656\":1}}],[\"depthrangefar\",{\"1\":{\"239\":3}}],[\"depthrangenear\",{\"1\":{\"239\":4}}],[\"depth\",{\"1\":{\"199\":4,\"239\":2,\"656\":4}}],[\"degrees\",{\"1\":{\"198\":1}}],[\"determine\",{\"1\":{\"656\":1}}],[\"determinant\",{\"1\":{\"196\":4}}],[\"detached\",{\"1\":{\"328\":2,\"452\":1,\"544\":1}}],[\"details\",{\"1\":{\"87\":1}}],[\"det\",{\"1\":{\"196\":1}}],[\"def\",{\"1\":{\"535\":4,\"561\":1,\"562\":1,\"653\":6,\"654\":7}}],[\"deferred\",{\"1\":{\"283\":1}}],[\"defer\",{\"1\":{\"283\":1}}],[\"definereactive\",{\"0\":{\"563\":1},\"1\":{\"542\":1,\"551\":1,\"556\":2,\"561\":1,\"563\":2,\"642\":1}}],[\"definecomputed\",{\"1\":{\"521\":3,\"554\":2}}],[\"defined\",{\"1\":{\"521\":3,\"551\":1,\"554\":3,\"563\":1,\"582\":1}}],[\"defineproperty对数据的\",{\"1\":{\"556\":1}}],[\"defineproperty\",{\"0\":{\"305\":2},\"1\":{\"290\":1,\"294\":6,\"305\":12,\"521\":2,\"542\":1,\"550\":1,\"554\":1,\"559\":3,\"563\":1,\"642\":2,\"663\":1,\"665\":1}}],[\"defines\",{\"1\":{\"209\":1}}],[\"define\",{\"1\":{\"190\":2,\"206\":2,\"216\":1,\"217\":1,\"218\":10,\"226\":2,\"521\":1,\"554\":1}}],[\"definition\",{\"1\":{\"177\":2,\"532\":7,\"585\":1,\"656\":8}}],[\"defaultvendors\",{\"1\":{\"720\":1}}],[\"defaults\",{\"1\":{\"713\":1}}],[\"defaultstrat\",{\"1\":{\"547\":1}}],[\"defaulttagre\",{\"1\":{\"611\":2}}],[\"default\",{\"1\":{\"61\":2,\"66\":1,\"77\":1,\"102\":1,\"103\":1,\"104\":1,\"334\":2,\"464\":3,\"521\":1,\"535\":1,\"540\":2,\"541\":1,\"543\":1,\"564\":1,\"565\":1,\"566\":1,\"572\":1,\"573\":2,\"584\":2,\"615\":1,\"630\":2,\"635\":3,\"637\":2,\"641\":1,\"642\":1,\"643\":2,\"644\":2,\"653\":2,\"656\":3,\"659\":1,\"663\":2,\"665\":1,\"720\":2}}],[\"destroyed\",{\"1\":{\"558\":1,\"573\":1,\"642\":4}}],[\"destroy\",{\"1\":{\"535\":1,\"588\":4,\"595\":1}}],[\"destructor\",{\"1\":{\"77\":2}}],[\"designates\",{\"1\":{\"457\":1}}],[\"descriptor\",{\"1\":{\"305\":5,\"625\":4,\"629\":2,\"635\":5,\"638\":1}}],[\"description\",{\"1\":{\"13\":1,\"23\":1,\"730\":2}}],[\"devserver\",{\"1\":{\"719\":1}}],[\"development模式下的默认值\",{\"1\":{\"760\":1}}],[\"development\",{\"1\":{\"719\":1,\"720\":1,\"724\":1}}],[\"devtoolhook\",{\"1\":{\"663\":2}}],[\"devtoolplugin\",{\"1\":{\"660\":1}}],[\"devtools<\",{\"1\":{\"635\":2}}],[\"devtools\",{\"1\":{\"558\":3,\"635\":4,\"656\":1,\"660\":3,\"664\":2}}],[\"devtool\",{\"1\":{\"558\":1,\"758\":1,\"762\":1}}],[\"deviantony\",{\"1\":{\"464\":1}}],[\"dev\",{\"1\":{\"62\":3,\"544\":3,\"565\":3,\"585\":1,\"588\":1,\"601\":1,\"603\":1,\"609\":1,\"635\":4,\"644\":1,\"659\":1,\"663\":1,\"719\":1}}],[\"de\",{\"1\":{\"13\":1,\"18\":1}}],[\"digest\",{\"1\":{\"801\":1}}],[\"digits\",{\"1\":{\"139\":1,\"140\":1,\"141\":1}}],[\"dictionary<routerecord>\",{\"1\":{\"644\":6}}],[\"dirname\",{\"1\":{\"718\":2,\"723\":1,\"724\":1,\"793\":1,\"795\":1,\"797\":1}}],[\"directly\",{\"1\":{\"656\":1}}],[\"direct\",{\"1\":{\"584\":1}}],[\"directinactive\",{\"1\":{\"656\":1}}],[\"directive`\",{\"1\":{\"542\":1}}],[\"directive\",{\"1\":{\"532\":3,\"535\":2,\"543\":1,\"565\":1}}],[\"directives属性\",{\"1\":{\"534\":1}}],[\"directives\",{\"1\":{\"528\":1,\"532\":1,\"533\":1,\"534\":2,\"535\":4,\"540\":4,\"543\":1,\"584\":1,\"588\":1,\"603\":6,\"609\":1,\"615\":1}}],[\"directions\",{\"1\":{\"532\":2}}],[\"direction\",{\"1\":{\"199\":2,\"532\":1}}],[\"dirswithpostpatch\",{\"1\":{\"535\":5}}],[\"dirswithinsert\",{\"1\":{\"535\":5}}],[\"dirre\",{\"1\":{\"534\":4}}],[\"dirty\",{\"1\":{\"521\":4,\"554\":4,\"557\":1,\"565\":4}}],[\"dir1\",{\"1\":{\"335\":2}}],[\"dir\",{\"1\":{\"334\":3,\"517\":2,\"535\":12,\"702\":2}}],[\"diff\",{\"0\":{\"675\":1},\"1\":{\"587\":1,\"589\":1,\"596\":1,\"603\":1}}],[\"different\",{\"1\":{\"573\":1,\"597\":1,\"656\":1}}],[\"difference\",{\"1\":{\"218\":1}}],[\"diffuse\",{\"1\":{\"234\":1}}],[\"dimension\",{\"0\":{\"165\":1}}],[\"div文档分区\",{\"1\":{\"185\":1}}],[\"div\",{\"1\":{\"140\":1,\"263\":1,\"534\":1,\"566\":1,\"584\":1,\"589\":2,\"603\":1,\"607\":1,\"615\":2}}],[\"div>\",{\"1\":{\"139\":1,\"140\":1,\"141\":3,\"534\":1,\"554\":2,\"601\":1,\"606\":1,\"607\":11,\"608\":1,\"615\":1,\"619\":2,\"635\":2,\"653\":1,\"677\":2}}],[\"division\",{\"1\":{\"118\":3}}],[\"disconnect\",{\"1\":{\"789\":1}}],[\"dispatch中调用commit\",{\"1\":{\"665\":1}}],[\"dispatch\",{\"0\":{\"661\":1},\"1\":{\"660\":3,\"661\":6,\"663\":3,\"665\":1}}],[\"dispatched\",{\"1\":{\"646\":1}}],[\"display值为flex或者inline\",{\"1\":{\"176\":1}}],[\"display\",{\"0\":{\"184\":1,\"187\":1},\"1\":{\"102\":1,\"103\":1,\"104\":1,\"145\":1,\"174\":6,\"175\":6,\"176\":1,\"183\":5,\"184\":2,\"187\":1,\"635\":2,\"656\":1,\"795\":1}}],[\"displayinfo\",{\"1\":{\"77\":4}}],[\"disable\",{\"1\":{\"521\":1,\"548\":1,\"554\":1,\"567\":1}}],[\"disabled\",{\"1\":{\"141\":3}}],[\"disk\",{\"1\":{\"434\":1}}],[\"distance\",{\"1\":{\"197\":5,\"204\":5,\"206\":7,\"218\":1,\"225\":2,\"226\":1,\"240\":1}}],[\"dist\",{\"1\":{\"1\":13,\"226\":3,\"240\":2,\"635\":1,\"637\":4,\"702\":2,\"719\":1}}],[\"dijkstra\",{\"1\":{\"1\":2}}],[\"d\",{\"1\":{\"1\":2,\"40\":2,\"117\":1,\"122\":2,\"193\":1,\"200\":2,\"206\":4,\"218\":47,\"226\":4,\"243\":2,\"334\":1,\"464\":1,\"584\":2,\"652\":4,\"667\":2,\"702\":2,\"730\":1,\"751\":1,\"752\":1,\"754\":1,\"755\":1}}],[\"c5ab0dc85b11\",{\"1\":{\"801\":2}}],[\"cjs\",{\"1\":{\"637\":4,\"706\":2}}],[\"cwd\",{\"1\":{\"626\":1}}],[\"c=3><\",{\"1\":{\"607\":1}}],[\"cbs\",{\"1\":{\"575\":2,\"588\":4,\"595\":5,\"596\":2,\"649\":1,\"656\":1}}],[\"cb\",{\"1\":{\"521\":1,\"555\":7,\"559\":3,\"565\":6,\"566\":1,\"567\":4,\"649\":8,\"651\":2,\"655\":3,\"670\":8}}],[\"cvs\",{\"1\":{\"517\":1}}],[\"cdn\",{\"0\":{\"504\":1}}],[\"cfonts\",{\"1\":{\"463\":1}}],[\"cgi\",{\"1\":{\"335\":1}}],[\"c+p\",{\"1\":{\"218\":3}}],[\"c++\",{\"1\":{\"65\":1,\"70\":1}}],[\"cpus\",{\"1\":{\"434\":1,\"445\":1}}],[\"cpu\",{\"1\":{\"210\":1,\"237\":1,\"793\":1,\"794\":1}}],[\"crypto\",{\"1\":{\"801\":3}}],[\"crate\",{\"1\":{\"535\":1}}],[\"crafana\",{\"0\":{\"438\":1}}],[\"creating\",{\"1\":{\"590\":1}}],[\"creation\",{\"1\":{\"534\":1}}],[\"createhash\",{\"1\":{\"801\":1}}],[\"createnavigationredirectederror\",{\"1\":{\"651\":1,\"655\":1}}],[\"createnavigationabortederror\",{\"1\":{\"651\":1,\"655\":1}}],[\"createnavigationcancellederror\",{\"1\":{\"651\":2,\"655\":2}}],[\"createnavigationduplicatederror\",{\"1\":{\"651\":1}}],[\"createnewlayer\",{\"1\":{\"103\":2,\"104\":2}}],[\"creatematcher\",{\"0\":{\"644\":1},\"1\":{\"643\":1,\"644\":2}}],[\"createroute\",{\"1\":{\"650\":4}}],[\"createroutemap\",{\"1\":{\"644\":3}}],[\"createrouter\",{\"1\":{\"641\":2}}],[\"createrecord\",{\"1\":{\"635\":1}}],[\"createastelement\",{\"1\":{\"609\":2}}],[\"createasyncplaceholder\",{\"1\":{\"585\":1}}],[\"createfunction\",{\"1\":{\"603\":2}}],[\"createfunctionalcomponent\",{\"1\":{\"585\":1}}],[\"createfunctionalcomponent处理\",{\"1\":{\"580\":1}}],[\"createkeytooldidx\",{\"1\":{\"597\":1}}],[\"createcomment\",{\"1\":{\"590\":1}}],[\"createcompiletofunctionfn\",{\"1\":{\"603\":3}}],[\"createcompiler传入webpack配置生成\",{\"1\":{\"771\":1}}],[\"createcompiler\",{\"1\":{\"603\":5,\"738\":1}}],[\"createcompilercreator\",{\"1\":{\"603\":5}}],[\"createcomponent\",{\"0\":{\"575\":1,\"585\":1,\"591\":1},\"1\":{\"574\":1,\"575\":2,\"584\":3,\"585\":1,\"590\":1,\"591\":1}}],[\"createcomputedgetter\",{\"1\":{\"521\":4,\"554\":3}}],[\"createchildren\",{\"1\":{\"590\":1}}],[\"createpatchfunction\",{\"1\":{\"587\":1,\"595\":2}}],[\"createpathfunction\",{\"0\":{\"587\":1},\"1\":{\"587\":1}}],[\"createemptyvnode\",{\"1\":{\"582\":1,\"583\":1,\"584\":2}}],[\"createelementns\",{\"1\":{\"590\":1}}],[\"createelement\",{\"0\":{\"584\":1},\"1\":{\"538\":1,\"580\":5,\"584\":4,\"590\":1,\"603\":1,\"656\":2}}],[\"createelm\",{\"0\":{\"590\":1},\"1\":{\"535\":1,\"574\":1,\"588\":2,\"589\":2,\"590\":2,\"597\":2}}],[\"createtextnode\",{\"1\":{\"568\":1,\"590\":1}}],[\"createwatcher\",{\"0\":{\"669\":1},\"1\":{\"555\":4,\"668\":2,\"669\":1,\"670\":1}}],[\"createwritestream\",{\"1\":{\"455\":1}}],[\"creategetterinvoker\",{\"1\":{\"521\":2,\"554\":2}}],[\"createserver\",{\"1\":{\"789\":1,\"797\":1}}],[\"createserve\",{\"1\":{\"445\":1}}],[\"create\",{\"0\":{\"461\":1},\"1\":{\"288\":2,\"302\":1,\"303\":1,\"304\":1,\"461\":1,\"521\":2,\"535\":1,\"542\":2,\"554\":2,\"562\":1,\"573\":1,\"588\":5,\"590\":1,\"591\":2,\"595\":5,\"603\":4,\"635\":4,\"644\":2,\"660\":5,\"663\":2}}],[\"created\",{\"1\":{\"103\":3,\"104\":3,\"325\":1,\"543\":1,\"544\":1,\"558\":2,\"570\":1,\"573\":1,\"575\":3,\"582\":1,\"591\":1,\"642\":1}}],[\"createlayertree\",{\"1\":{\"103\":3,\"104\":3}}],[\"createlayout\",{\"1\":{\"102\":3,\"103\":3,\"104\":3}}],[\"crossproduct\",{\"1\":{\"197\":1}}],[\"cross\",{\"1\":{\"197\":5,\"215\":3,\"216\":2,\"217\":2,\"218\":2,\"469\":1,\"470\":1,\"718\":2}}],[\"center\",{\"1\":{\"216\":1,\"218\":19,\"225\":3}}],[\"ceilv\",{\"1\":{\"195\":1}}],[\"ceila\",{\"1\":{\"195\":1}}],[\"ceil\",{\"1\":{\"195\":4,\"204\":4,\"264\":1}}],[\"cell\",{\"1\":{\"174\":1}}],[\"ctx\",{\"1\":{\"552\":2,\"567\":4}}],[\"ctor\",{\"1\":{\"546\":11,\"547\":11,\"573\":1,\"584\":3,\"585\":20}}],[\"ctrl\",{\"1\":{\"464\":1}}],[\"ct=0时的颜色值为color\",{\"1\":{\"190\":1}}],[\"cts\",{\"1\":{\"70\":2}}],[\"cid\",{\"1\":{\"573\":2,\"585\":2,\"653\":2}}],[\"circle3\",{\"1\":{\"218\":2}}],[\"circle2\",{\"1\":{\"218\":2}}],[\"circle\",{\"1\":{\"218\":5,\"226\":2}}],[\"cite\",{\"1\":{\"186\":1}}],[\"cil代码可以在任何支持cli的平台上运行\",{\"1\":{\"70\":1}}],[\"cil是一种低级\",{\"1\":{\"70\":1}}],[\"cil\",{\"1\":{\"70\":1}}],[\"curindex\",{\"1\":{\"606\":2}}],[\"cursorto\",{\"1\":{\"463\":1}}],[\"currenttoken\",{\"1\":{\"690\":11}}],[\"currentroute\",{\"1\":{\"650\":6}}],[\"currentrenderinginstance\",{\"1\":{\"583\":2}}],[\"currentparent\",{\"1\":{\"609\":4,\"610\":6}}],[\"currentflushtimestamp\",{\"1\":{\"558\":1}}],[\"currentinstance\",{\"1\":{\"548\":1}}],[\"currentindex\",{\"1\":{\"59\":6}}],[\"currentcolor\",{\"0\":{\"152\":1}}],[\"current\",{\"1\":{\"55\":4,\"56\":3,\"226\":1,\"573\":4,\"642\":5,\"646\":6,\"647\":2,\"649\":3,\"650\":2,\"651\":16,\"652\":6,\"655\":6,\"656\":4,\"713\":1}}],[\"currentedegs\",{\"1\":{\"1\":1}}],[\"currentedges\",{\"1\":{\"1\":5}}],[\"customize\",{\"1\":{\"635\":2}}],[\"customblocks\",{\"1\":{\"635\":2}}],[\"customsetter\",{\"1\":{\"563\":1}}],[\"customdata\",{\"1\":{\"327\":1}}],[\"custom\",{\"0\":{\"158\":1},\"1\":{\"603\":2,\"637\":1,\"723\":2,\"724\":2,\"729\":2,\"730\":5}}],[\"csrf\",{\"0\":{\"469\":1},\"1\":{\"469\":1}}],[\"css样式的重置\",{\"1\":{\"754\":1}}],[\"css$\",{\"1\":{\"745\":1,\"755\":4}}],[\"css要兼容市场占有率大于1\",{\"1\":{\"712\":1}}],[\"cssloaderindex\",{\"1\":{\"630\":4}}],[\"cssmodulenames\",{\"1\":{\"629\":1}}],[\"cssmoduleshotreloadcode\",{\"1\":{\"629\":1}}],[\"css代码优化\",{\"0\":{\"506\":1}}],[\"css2\",{\"1\":{\"173\":1}}],[\"css中的数据类型\",{\"0\":{\"156\":1}}],[\"css颜色体系\",{\"0\":{\"149\":1},\"1\":{\"149\":5}}],[\"cssast\",{\"1\":{\"102\":2,\"103\":2,\"104\":2}}],[\"cssrules\",{\"1\":{\"102\":6,\"103\":6,\"104\":6}}],[\"css3\",{\"1\":{\"95\":1}}],[\"css\",{\"0\":{\"99\":1,\"619\":1,\"810\":1},\"1\":{\"95\":1,\"97\":1,\"99\":3,\"100\":1,\"102\":3,\"103\":3,\"104\":3,\"108\":3,\"138\":2,\"139\":2,\"140\":2,\"141\":3,\"158\":1,\"159\":1,\"183\":2,\"470\":1,\"619\":1,\"621\":2,\"624\":2,\"625\":1,\"629\":2,\"631\":2,\"635\":1,\"637\":1,\"710\":1,\"718\":2,\"720\":5,\"745\":5,\"747\":8,\"754\":3,\"755\":7},\"2\":{\"142\":1,\"148\":1,\"155\":1,\"167\":1,\"172\":1,\"178\":1,\"182\":1,\"188\":1}}],[\"cs\",{\"1\":{\"89\":2}}],[\"csdn\",{\"1\":{\"87\":1}}],[\"chunk\",{\"1\":{\"720\":1}}],[\"chunks\",{\"1\":{\"720\":1}}],[\"ch\",{\"1\":{\"596\":7}}],[\"chat<\",{\"1\":{\"635\":2}}],[\"chat\",{\"1\":{\"635\":2}}],[\"char\",{\"1\":{\"689\":18}}],[\"chars\",{\"1\":{\"604\":1,\"606\":4,\"610\":1}}],[\"charat\",{\"1\":{\"601\":1,\"603\":1,\"689\":4}}],[\"characterdata\",{\"1\":{\"568\":1}}],[\"chalk\",{\"1\":{\"463\":2,\"718\":3}}],[\"changes\",{\"1\":{\"565\":1,\"663\":1}}],[\"change=\",{\"1\":{\"528\":1}}],[\"change\",{\"1\":{\"141\":1,\"528\":4,\"562\":1,\"651\":1}}],[\"changed\",{\"1\":{\"77\":1,\"546\":1,\"547\":1,\"651\":1,\"656\":1}}],[\"changename\",{\"1\":{\"77\":2}}],[\"cheap可选值\",{\"1\":{\"769\":1}}],[\"cheap低开销\",{\"1\":{\"765\":1}}],[\"cheap\",{\"0\":{\"765\":1,\"766\":1},\"1\":{\"769\":1}}],[\"cheapest\",{\"1\":{\"18\":2}}],[\"checkbindingtype\",{\"1\":{\"615\":3}}],[\"checkbox>\",{\"1\":{\"528\":1}}],[\"checkbox\",{\"1\":{\"528\":4}}],[\"checkrootconstraints\",{\"1\":{\"609\":1}}],[\"checked=\",{\"1\":{\"528\":1}}],[\"checked\",{\"1\":{\"528\":5}}],[\"checkvalue\",{\"1\":{\"282\":1,\"283\":2}}],[\"check这\",{\"1\":{\"256\":1}}],[\"check\",{\"0\":{\"452\":1},\"1\":{\"256\":6,\"257\":2,\"287\":2,\"452\":1,\"544\":1,\"546\":1,\"547\":1,\"573\":1,\"584\":1,\"588\":1,\"590\":1,\"603\":1,\"609\":1,\"615\":3,\"635\":2,\"656\":1,\"661\":1,\"662\":1}}],[\"childmatchas\",{\"1\":{\"644\":2}}],[\"childob\",{\"1\":{\"563\":5}}],[\"child\",{\"1\":{\"102\":7,\"103\":11,\"104\":13,\"452\":2,\"547\":16,\"558\":2,\"575\":3,\"582\":2,\"585\":1,\"591\":3,\"610\":5,\"613\":3,\"644\":3,\"663\":2}}],[\"childtop\",{\"1\":{\"102\":3,\"103\":3,\"104\":3}}],[\"children对象中\",{\"1\":{\"663\":1}}],[\"children调用\",{\"1\":{\"590\":1}}],[\"children\",{\"1\":{\"98\":2,\"102\":13,\"103\":16,\"104\":17,\"584\":20,\"585\":4,\"586\":1,\"587\":1,\"590\":3,\"596\":2,\"609\":1,\"610\":7,\"613\":3,\"614\":8,\"615\":8,\"644\":4,\"656\":3,\"663\":4,\"690\":3}}],[\"chrome开发者工具\",{\"0\":{\"131\":1}}],[\"chrome\",{\"0\":{\"95\":1},\"1\":{\"126\":1,\"147\":1,\"152\":1,\"710\":2,\"713\":3}}],[\"cleanpath\",{\"1\":{\"644\":1,\"646\":2}}],[\"clean\",{\"1\":{\"565\":1,\"606\":1,\"642\":1,\"720\":1}}],[\"cleanupdeps\",{\"1\":{\"521\":1,\"565\":2,\"566\":1,\"670\":1}}],[\"clearline\",{\"1\":{\"463\":1}}],[\"clear\",{\"0\":{\"145\":1},\"1\":{\"145\":3,\"565\":1}}],[\"cluster\",{\"0\":{\"445\":1},\"1\":{\"445\":5,\"452\":1}}],[\"closingelement\",{\"1\":{\"690\":2}}],[\"closeelement\",{\"1\":{\"534\":1,\"609\":1}}],[\"close\",{\"1\":{\"256\":3,\"611\":2}}],[\"clonerule\",{\"1\":{\"636\":1}}],[\"clonenode\",{\"1\":{\"603\":1}}],[\"clonedruleset\",{\"1\":{\"637\":2}}],[\"clonedrules\",{\"1\":{\"636\":3}}],[\"cloned\",{\"1\":{\"596\":2}}],[\"clonevnode\",{\"1\":{\"590\":1,\"596\":1}}],[\"clone\",{\"1\":{\"590\":1,\"596\":2}}],[\"clock\",{\"1\":{\"237\":3,\"793\":1,\"794\":1,\"795\":3}}],[\"clamp\",{\"0\":{\"192\":1},\"1\":{\"191\":1,\"192\":1,\"195\":5,\"218\":2,\"225\":1,\"239\":1}}],[\"classic\",{\"1\":{\"243\":1}}],[\"classes\",{\"1\":{\"141\":1}}],[\"class=\",{\"1\":{\"139\":1,\"140\":2,\"141\":6,\"606\":1,\"607\":3,\"608\":2,\"619\":2,\"635\":2}}],[\"classname=config\",{\"1\":{\"89\":1}}],[\"classname\",{\"1\":{\"89\":4}}],[\"class\",{\"1\":{\"64\":1,\"66\":1,\"67\":1,\"68\":1,\"74\":1,\"75\":1,\"76\":1,\"77\":3,\"78\":2,\"79\":1,\"80\":1,\"81\":1,\"82\":1,\"83\":1,\"84\":5,\"89\":4,\"102\":1,\"103\":1,\"104\":1,\"139\":3,\"140\":2,\"141\":4,\"263\":1,\"264\":1,\"266\":2,\"268\":3,\"273\":1,\"299\":1,\"319\":1,\"320\":1,\"345\":1,\"521\":2,\"561\":1,\"564\":1,\"565\":1,\"566\":1,\"603\":1,\"606\":2,\"607\":1,\"608\":1,\"624\":2,\"636\":1,\"642\":1,\"643\":1,\"646\":1,\"647\":1,\"660\":2,\"663\":2,\"665\":1,\"670\":2,\"739\":1,\"740\":1,\"778\":1,\"779\":1,\"780\":1,\"781\":1,\"782\":1,\"783\":1,\"784\":1}}],[\"clr支持不同编程语言之间的互操作性\",{\"1\":{\"71\":1}}],[\"clr支持异常处理机制\",{\"1\":{\"71\":1}}],[\"clr在运行时检查类型信息\",{\"1\":{\"71\":1}}],[\"clr提供了安全机制\",{\"1\":{\"71\":1}}],[\"clr提供了自动垃圾回收机制\",{\"1\":{\"71\":1}}],[\"clr提供了运行cil代码的环境\",{\"1\":{\"71\":1}}],[\"clr负责将cil代码转换为机器代码\",{\"1\":{\"71\":1}}],[\"clr\",{\"0\":{\"71\":1},\"1\":{\"71\":1}}],[\"clr会调用main方法\",{\"1\":{\"68\":1}}],[\"cls\",{\"1\":{\"70\":2}}],[\"clicommand\",{\"1\":{\"754\":1}}],[\"click\",{\"1\":{\"584\":1}}],[\"client\",{\"1\":{\"588\":2}}],[\"clipdistance\",{\"1\":{\"240\":3}}],[\"cli的全部体系结构\",{\"1\":{\"70\":1}}],[\"cli支持异常处理机制\",{\"1\":{\"70\":1}}],[\"cli提供了一个自动垃圾回收机制\",{\"1\":{\"70\":1}}],[\"cli定义了一个类型系统\",{\"1\":{\"70\":1}}],[\"cli包括以下几个部分\",{\"1\":{\"70\":1}}],[\"cli\",{\"0\":{\"70\":1},\"1\":{\"70\":1,\"635\":14,\"701\":1,\"754\":2,\"771\":6}}],[\"cli和clr\",{\"0\":{\"69\":1}}],[\"capitalize\",{\"1\":{\"615\":1}}],[\"caption\",{\"1\":{\"174\":1}}],[\"cause\",{\"1\":{\"590\":1}}],[\"caused\",{\"1\":{\"588\":1}}],[\"causing\",{\"1\":{\"583\":1}}],[\"car\",{\"1\":{\"559\":2}}],[\"cachegroups\",{\"1\":{\"720\":1}}],[\"cachehandlers\",{\"0\":{\"678\":1},\"1\":{\"678\":2}}],[\"cacheidentifier\",{\"1\":{\"626\":3}}],[\"cacheloader\",{\"1\":{\"626\":2}}],[\"cachedcomponent\",{\"1\":{\"656\":4}}],[\"cacheddata\",{\"1\":{\"656\":6}}],[\"cachedirectory\",{\"1\":{\"626\":6,\"718\":1,\"746\":1}}],[\"cached\",{\"1\":{\"603\":1,\"611\":1}}],[\"cachedsuperoptions\",{\"1\":{\"546\":2,\"547\":2}}],[\"cachevnode\",{\"1\":{\"573\":3}}],[\"cacheentrymap\",{\"1\":{\"573\":2}}],[\"cache\",{\"1\":{\"521\":1,\"551\":1,\"554\":1,\"562\":1,\"573\":18,\"603\":5,\"626\":1,\"656\":7,\"663\":1,\"719\":1}}],[\"cascading\",{\"1\":{\"470\":1}}],[\"casesensitive\",{\"1\":{\"644\":2}}],[\"case\",{\"1\":{\"46\":2,\"102\":1,\"103\":1,\"104\":1,\"562\":3,\"575\":1,\"583\":1,\"584\":1,\"588\":1,\"591\":1,\"615\":4,\"643\":3,\"651\":1,\"653\":1,\"656\":2,\"663\":1}}],[\"cater\",{\"1\":{\"563\":1}}],[\"categories\",{\"1\":{\"464\":1}}],[\"catv\",{\"1\":{\"418\":1}}],[\"catch\",{\"1\":{\"274\":2,\"280\":1,\"281\":2,\"282\":1,\"283\":4,\"294\":1,\"483\":1,\"521\":1,\"565\":1,\"567\":1,\"583\":1,\"645\":2,\"646\":2,\"649\":2,\"651\":1,\"653\":1,\"655\":1,\"663\":1,\"670\":4}}],[\"camel\",{\"1\":{\"534\":1}}],[\"camelize\",{\"1\":{\"534\":4,\"547\":2,\"615\":2}}],[\"camelcase\",{\"1\":{\"66\":1}}],[\"camera\",{\"1\":{\"237\":1}}],[\"caniuse￾lite\",{\"1\":{\"713\":1}}],[\"caniuse\",{\"1\":{\"711\":1,\"712\":2,\"713\":1}}],[\"canbeleftopentag\",{\"1\":{\"604\":2,\"606\":2,\"608\":1}}],[\"canmove\",{\"1\":{\"597\":4}}],[\"cannot\",{\"1\":{\"319\":2}}],[\"can\",{\"1\":{\"139\":3,\"140\":1,\"282\":1,\"283\":1,\"551\":1,\"558\":1,\"573\":3,\"575\":1,\"588\":1,\"591\":1,\"642\":1,\"656\":1}}],[\"callasync\",{\"1\":{\"782\":1,\"783\":1}}],[\"callactivatedhooks\",{\"1\":{\"558\":1}}],[\"calls\",{\"1\":{\"646\":1,\"662\":1,\"670\":1}}],[\"callval\",{\"1\":{\"642\":2}}],[\"calling\",{\"1\":{\"575\":1,\"591\":1}}],[\"callinsert\",{\"1\":{\"535\":3}}],[\"callupdatedhooks\",{\"1\":{\"558\":1}}],[\"callhook\",{\"0\":{\"548\":1},\"1\":{\"535\":5,\"544\":2,\"548\":1,\"582\":3}}],[\"call\",{\"1\":{\"283\":1,\"296\":1,\"313\":1,\"521\":1,\"538\":1,\"547\":1,\"558\":1,\"559\":1,\"563\":3,\"565\":2,\"566\":2,\"567\":1,\"582\":2,\"583\":1,\"584\":1,\"601\":1,\"603\":1,\"646\":1,\"656\":2,\"660\":2,\"661\":1,\"662\":1,\"663\":2,\"664\":1,\"670\":3,\"735\":1,\"738\":4,\"778\":2,\"779\":1,\"780\":1,\"781\":1}}],[\"callback队列\",{\"1\":{\"567\":1}}],[\"callbacks才会被调用执行\",{\"1\":{\"567\":1}}],[\"callbacks\",{\"1\":{\"256\":3,\"558\":1,\"567\":2,\"568\":5}}],[\"callback\",{\"1\":{\"256\":1,\"257\":1,\"281\":1,\"327\":1,\"455\":5,\"631\":2,\"727\":3,\"728\":2,\"729\":2,\"730\":2,\"740\":2,\"782\":4,\"783\":4}}],[\"called\",{\"1\":{\"77\":3,\"543\":1,\"561\":1,\"565\":3,\"575\":1,\"582\":1,\"583\":2,\"586\":1,\"656\":1,\"659\":1}}],[\"calculatearea\",{\"1\":{\"81\":2}}],[\"cnoise\",{\"1\":{\"206\":6,\"243\":2}}],[\"cnblogs\",{\"1\":{\"43\":1}}],[\"cn\",{\"1\":{\"8\":1,\"9\":1,\"13\":2,\"18\":2,\"23\":2,\"220\":1,\"442\":1,\"517\":2,\"561\":1,\"705\":1}}],[\"cover\",{\"1\":{\"713\":3}}],[\"could\",{\"1\":{\"642\":1,\"646\":1,\"656\":1}}],[\"countpluslocalstate\",{\"1\":{\"664\":1}}],[\"countalias\",{\"1\":{\"664\":1}}],[\"count`\",{\"1\":{\"664\":1}}],[\"counts\",{\"1\":{\"434\":1}}],[\"count++\",{\"1\":{\"266\":2,\"658\":1}}],[\"counter++\",{\"1\":{\"780\":1}}],[\"counter\",{\"0\":{\"439\":1},\"1\":{\"62\":7,\"266\":12,\"568\":5,\"780\":2}}],[\"countingsort\",{\"1\":{\"60\":1}}],[\"count\",{\"1\":{\"60\":4,\"80\":2,\"266\":4,\"283\":3,\"555\":5,\"658\":1,\"664\":5}}],[\"copywebpackplugin\",{\"1\":{\"720\":2}}],[\"copy\",{\"1\":{\"603\":1,\"662\":1,\"720\":1}}],[\"copyaugment\",{\"1\":{\"561\":1}}],[\"copytruncate\",{\"0\":{\"461\":1},\"1\":{\"461\":1}}],[\"copies\",{\"1\":{\"558\":1,\"568\":3}}],[\"correct\",{\"1\":{\"597\":1}}],[\"corejs\",{\"1\":{\"699\":1,\"700\":1}}],[\"core\",{\"1\":{\"540\":2,\"541\":1,\"543\":1,\"582\":1,\"656\":1,\"699\":1,\"701\":1}}],[\"corners\",{\"1\":{\"200\":1,\"206\":2,\"243\":1}}],[\"coordinates\",{\"1\":{\"215\":1,\"216\":1,\"217\":1}}],[\"coord\",{\"1\":{\"199\":66}}],[\"cosine\",{\"1\":{\"198\":1}}],[\"coshx\",{\"1\":{\"198\":1}}],[\"cosh\",{\"1\":{\"198\":3}}],[\"cos\",{\"1\":{\"198\":5,\"200\":2,\"206\":2,\"215\":1,\"216\":2,\"218\":6,\"225\":2,\"226\":1,\"227\":10,\"233\":2,\"243\":3}}],[\"cost\",{\"1\":{\"18\":2,\"614\":1}}],[\"column\",{\"1\":{\"765\":1}}],[\"columns\",{\"1\":{\"177\":2}}],[\"collisions\",{\"1\":{\"434\":1}}],[\"collected\",{\"1\":{\"565\":1}}],[\"collect\",{\"1\":{\"565\":1}}],[\"collectvalue\",{\"1\":{\"283\":3}}],[\"collection\",{\"1\":{\"70\":1,\"80\":6,\"548\":1,\"565\":1}}],[\"colin1994\",{\"1\":{\"220\":1}}],[\"colors\",{\"1\":{\"232\":2}}],[\"color2\",{\"1\":{\"195\":2}}],[\"color1\",{\"1\":{\"195\":2}}],[\"color+pct\",{\"1\":{\"190\":3}}],[\"color\",{\"1\":{\"102\":4,\"103\":4,\"104\":6,\"139\":1,\"140\":3,\"141\":2,\"190\":12,\"199\":7,\"215\":4,\"216\":4,\"217\":4,\"224\":6,\"225\":4,\"226\":6,\"227\":3,\"231\":1,\"234\":1,\"238\":1,\"239\":1,\"617\":1,\"619\":2,\"624\":2,\"635\":2}}],[\"codegenstate\",{\"1\":{\"615\":3}}],[\"codegenresult\",{\"1\":{\"615\":1}}],[\"codegen\",{\"1\":{\"603\":1,\"629\":1}}],[\"code\",{\"0\":{\"490\":1},\"1\":{\"70\":1,\"186\":1,\"263\":5,\"265\":1,\"268\":1,\"445\":1,\"603\":7,\"615\":10,\"631\":2,\"635\":5,\"637\":6,\"638\":3,\"689\":9,\"707\":1,\"718\":1}}],[\"connect\",{\"1\":{\"789\":2}}],[\"connection\",{\"1\":{\"789\":1,\"797\":1,\"799\":2,\"800\":1,\"803\":1}}],[\"condense\",{\"1\":{\"610\":5}}],[\"conditionalend\",{\"1\":{\"606\":3}}],[\"conditionalcomment\",{\"1\":{\"606\":2}}],[\"concat\",{\"1\":{\"603\":1,\"651\":2,\"654\":1,\"655\":1,\"663\":2}}],[\"concurrency\",{\"0\":{\"437\":1}}],[\"convert\",{\"1\":{\"561\":1,\"601\":1,\"603\":1}}],[\"converted\",{\"1\":{\"551\":1}}],[\"continued\",{\"1\":{\"803\":4}}],[\"continue\",{\"1\":{\"606\":5,\"644\":1,\"689\":3}}],[\"control\",{\"1\":{\"517\":1,\"793\":1}}],[\"controllers\",{\"1\":{\"139\":1,\"464\":1}}],[\"contrib\",{\"1\":{\"463\":1}}],[\"contains\",{\"1\":{\"583\":1,\"610\":1}}],[\"containing\",{\"1\":{\"175\":1}}],[\"container\",{\"1\":{\"13\":2,\"176\":1,\"177\":1,\"187\":6,\"603\":3}}],[\"contexts\",{\"1\":{\"176\":1,\"177\":1}}],[\"context\",{\"1\":{\"173\":1,\"535\":2,\"584\":11,\"585\":6,\"625\":1,\"656\":1,\"658\":2,\"663\":1,\"664\":2,\"670\":3,\"723\":1,\"724\":1,\"738\":1}}],[\"contentbase\",{\"1\":{\"719\":1}}],[\"content\",{\"1\":{\"102\":1,\"103\":1,\"104\":1,\"134\":2,\"145\":1,\"158\":2,\"160\":2,\"588\":2,\"613\":2,\"635\":3,\"723\":4,\"727\":3,\"728\":2,\"729\":2,\"730\":2,\"749\":1}}],[\"contenttype\",{\"1\":{\"102\":2,\"103\":2,\"104\":2}}],[\"confirmation\",{\"1\":{\"656\":1}}],[\"confirmed\",{\"1\":{\"656\":1}}],[\"confirmtransition\",{\"0\":{\"651\":1},\"1\":{\"649\":1,\"651\":2,\"655\":1}}],[\"confirm\",{\"1\":{\"648\":1,\"651\":1,\"655\":1}}],[\"confirmnavigation\",{\"1\":{\"102\":3,\"103\":3,\"104\":3}}],[\"configprops\",{\"1\":{\"656\":7}}],[\"config`\",{\"1\":{\"542\":1}}],[\"configdef\",{\"1\":{\"542\":3}}],[\"configure\",{\"1\":{\"464\":1,\"635\":2}}],[\"configurable\",{\"1\":{\"290\":1,\"302\":2,\"305\":1,\"550\":1,\"559\":1,\"563\":2}}],[\"configurationbuilder\",{\"1\":{\"89\":4}}],[\"configuration\",{\"1\":{\"89\":3}}],[\"configuration和microsoft\",{\"1\":{\"89\":1}}],[\"configroot\",{\"1\":{\"89\":3}}],[\"config\",{\"1\":{\"89\":9,\"540\":3,\"542\":3,\"543\":1,\"544\":2,\"558\":1,\"584\":3,\"642\":1,\"651\":1,\"656\":1,\"660\":1,\"663\":3,\"699\":2,\"700\":1,\"703\":1,\"704\":1,\"705\":1,\"706\":3,\"713\":6,\"723\":1,\"724\":1,\"726\":1,\"727\":1,\"728\":1,\"729\":1,\"730\":1,\"751\":3,\"752\":1,\"755\":5,\"758\":1,\"762\":1,\"771\":1,\"772\":3}}],[\"configbuilder\",{\"1\":{\"89\":6}}],[\"consecutive\",{\"1\":{\"610\":1}}],[\"considered\",{\"1\":{\"542\":1}}],[\"consistent\",{\"1\":{\"626\":1}}],[\"consist\",{\"1\":{\"139\":1,\"140\":1,\"141\":1}}],[\"console的底层\",{\"1\":{\"454\":1}}],[\"console\",{\"0\":{\"455\":1},\"1\":{\"64\":1,\"77\":8,\"79\":1,\"80\":2,\"81\":1,\"82\":3,\"84\":4,\"89\":5,\"102\":3,\"103\":4,\"104\":4,\"114\":2,\"115\":2,\"118\":1,\"120\":3,\"121\":4,\"122\":5,\"123\":1,\"126\":1,\"127\":2,\"252\":7,\"253\":14,\"254\":6,\"256\":7,\"257\":10,\"258\":4,\"260\":2,\"263\":20,\"264\":1,\"265\":9,\"266\":5,\"268\":5,\"269\":5,\"270\":2,\"271\":13,\"272\":1,\"273\":1,\"274\":13,\"281\":2,\"287\":11,\"288\":6,\"289\":13,\"290\":1,\"291\":3,\"294\":4,\"297\":3,\"299\":5,\"300\":1,\"302\":1,\"303\":1,\"304\":1,\"305\":1,\"306\":1,\"307\":1,\"308\":1,\"309\":1,\"310\":1,\"311\":1,\"312\":1,\"313\":1,\"316\":2,\"317\":6,\"318\":2,\"319\":2,\"320\":3,\"326\":1,\"327\":3,\"455\":2,\"463\":1,\"464\":2,\"539\":1,\"555\":3,\"559\":2,\"607\":1,\"626\":2,\"630\":1,\"635\":7,\"648\":3,\"651\":1,\"659\":1,\"663\":1,\"665\":3,\"667\":1,\"689\":1,\"690\":2,\"723\":1,\"729\":1,\"730\":1,\"739\":1,\"740\":1,\"772\":2,\"778\":2,\"779\":2,\"780\":2,\"781\":2,\"782\":3,\"783\":3,\"784\":3,\"789\":4,\"797\":4,\"801\":1}}],[\"construct\",{\"0\":{\"314\":2},\"1\":{\"295\":1,\"314\":4,\"319\":2,\"320\":2}}],[\"constructor\",{\"1\":{\"77\":4,\"264\":1,\"266\":2,\"273\":1,\"299\":1,\"319\":1,\"320\":1,\"521\":1,\"542\":1,\"543\":1,\"544\":1,\"545\":1,\"549\":1,\"561\":1,\"564\":1,\"565\":1,\"566\":1,\"573\":1,\"582\":1,\"584\":1,\"585\":1,\"643\":1,\"660\":1,\"663\":2,\"665\":1,\"670\":2,\"739\":1,\"740\":1,\"771\":1,\"778\":1,\"779\":1,\"780\":1,\"781\":1,\"782\":1,\"783\":1,\"784\":1}}],[\"constantroutes\",{\"1\":{\"641\":2}}],[\"constant\",{\"1\":{\"77\":1}}],[\"const\",{\"1\":{\"1\":1,\"7\":1,\"8\":3,\"18\":4,\"26\":1,\"43\":1,\"53\":1,\"56\":1,\"57\":2,\"77\":1,\"102\":30,\"103\":34,\"104\":36,\"127\":1,\"232\":2,\"236\":3,\"257\":1,\"268\":1,\"269\":1,\"270\":1,\"271\":1,\"272\":2,\"273\":2,\"274\":8,\"280\":4,\"281\":5,\"282\":1,\"283\":14,\"287\":4,\"288\":3,\"289\":14,\"290\":3,\"291\":3,\"294\":2,\"297\":3,\"299\":7,\"300\":2,\"302\":2,\"303\":2,\"304\":2,\"305\":2,\"306\":2,\"307\":2,\"308\":2,\"309\":2,\"310\":2,\"311\":2,\"312\":2,\"313\":2,\"316\":2,\"317\":3,\"318\":2,\"319\":3,\"320\":6,\"445\":3,\"452\":2,\"455\":1,\"463\":2,\"464\":5,\"483\":4,\"520\":1,\"521\":8,\"534\":4,\"535\":7,\"542\":1,\"544\":1,\"546\":3,\"547\":8,\"548\":3,\"549\":2,\"550\":1,\"551\":6,\"552\":2,\"553\":5,\"554\":7,\"555\":5,\"557\":2,\"558\":2,\"559\":3,\"560\":1,\"561\":2,\"562\":6,\"563\":7,\"564\":1,\"565\":6,\"566\":3,\"567\":1,\"568\":4,\"573\":16,\"575\":1,\"582\":2,\"583\":2,\"585\":6,\"586\":5,\"587\":2,\"588\":6,\"590\":3,\"591\":1,\"594\":1,\"595\":3,\"596\":4,\"597\":1,\"601\":3,\"603\":23,\"604\":2,\"606\":10,\"607\":8,\"608\":9,\"609\":1,\"610\":1,\"611\":8,\"613\":2,\"615\":5,\"625\":10,\"626\":5,\"627\":2,\"629\":7,\"630\":4,\"631\":4,\"635\":2,\"636\":4,\"637\":1,\"641\":3,\"642\":11,\"643\":2,\"644\":4,\"646\":10,\"647\":5,\"648\":1,\"649\":1,\"650\":7,\"651\":9,\"652\":1,\"653\":4,\"654\":2,\"655\":4,\"656\":11,\"658\":1,\"659\":2,\"660\":4,\"661\":4,\"662\":4,\"663\":22,\"664\":5,\"665\":3,\"668\":3,\"670\":9,\"688\":1,\"689\":4,\"690\":2,\"718\":12,\"719\":2,\"720\":10,\"723\":1,\"724\":1,\"728\":1,\"729\":3,\"730\":5,\"738\":4,\"751\":3,\"752\":1,\"772\":3,\"776\":1,\"778\":2,\"779\":2,\"780\":2,\"781\":2,\"782\":2,\"783\":2,\"784\":2,\"789\":1,\"795\":2,\"797\":1,\"801\":3,\"804\":1}}],[\"comet\",{\"1\":{\"792\":1}}],[\"combining\",{\"1\":{\"588\":1}}],[\"combinedinstance\",{\"1\":{\"77\":2}}],[\"comparisons\",{\"1\":{\"720\":1}}],[\"compat\",{\"1\":{\"709\":1}}],[\"compatible\",{\"1\":{\"635\":1}}],[\"compression\",{\"1\":{\"720\":1}}],[\"compressionwebpackplugin\",{\"1\":{\"720\":2}}],[\"compress\",{\"1\":{\"719\":1,\"720\":1}}],[\"comp\",{\"1\":{\"653\":4}}],[\"compilation\",{\"0\":{\"737\":1},\"1\":{\"636\":1,\"735\":2,\"737\":4,\"776\":1}}],[\"compilestyle\",{\"1\":{\"631\":2}}],[\"compiledfunctionresult\",{\"1\":{\"603\":1}}],[\"compiled\",{\"1\":{\"603\":7}}],[\"compiledresult\",{\"1\":{\"603\":2}}],[\"compile\",{\"1\":{\"603\":7,\"735\":1}}],[\"compiletofunctions\",{\"1\":{\"601\":1,\"603\":5}}],[\"compilerouteregex\",{\"1\":{\"644\":1}}],[\"compileroptions\",{\"1\":{\"603\":6,\"604\":1,\"612\":1,\"615\":1,\"627\":2}}],[\"compiler\",{\"0\":{\"737\":1},\"1\":{\"534\":1,\"600\":1,\"601\":1,\"603\":7,\"626\":1,\"627\":4,\"631\":1,\"635\":3,\"636\":6,\"735\":1,\"737\":2,\"738\":14,\"739\":2,\"740\":2,\"771\":1,\"772\":2,\"776\":1}}],[\"composition\",{\"0\":{\"681\":1},\"1\":{\"549\":1}}],[\"compositelayers\",{\"1\":{\"104\":2}}],[\"composing\",{\"1\":{\"528\":1}}],[\"componentnormalizer\",{\"1\":{\"635\":1}}],[\"componentinstance\",{\"1\":{\"573\":5,\"575\":5,\"591\":2,\"592\":1,\"596\":2,\"656\":4}}],[\"component>\",{\"1\":{\"571\":4}}],[\"componentoptions\",{\"1\":{\"547\":2,\"573\":9,\"585\":1}}],[\"component`\",{\"1\":{\"542\":1}}],[\"components里面\",{\"1\":{\"656\":1}}],[\"components实例\",{\"1\":{\"653\":1}}],[\"components`\",{\"1\":{\"542\":1}}],[\"components\",{\"1\":{\"540\":4,\"542\":2,\"543\":1,\"546\":1,\"547\":1,\"558\":1,\"573\":1,\"582\":1,\"584\":1,\"585\":1,\"613\":1,\"629\":1,\"635\":1,\"642\":1,\"644\":3,\"651\":2,\"653\":4,\"654\":4,\"655\":1,\"656\":3}}],[\"componentupdated\",{\"1\":{\"532\":2,\"535\":2}}],[\"component\",{\"1\":{\"325\":3,\"328\":1,\"520\":1,\"521\":4,\"528\":1,\"534\":2,\"540\":1,\"543\":1,\"544\":3,\"546\":1,\"547\":3,\"548\":1,\"549\":1,\"551\":2,\"552\":1,\"553\":1,\"554\":3,\"555\":3,\"558\":4,\"560\":1,\"565\":2,\"566\":4,\"572\":1,\"575\":5,\"581\":1,\"582\":3,\"583\":4,\"584\":8,\"585\":11,\"586\":1,\"588\":2,\"591\":2,\"592\":1,\"601\":1,\"602\":1,\"603\":2,\"613\":3,\"615\":4,\"631\":1,\"635\":8,\"638\":1,\"641\":1,\"642\":3,\"643\":2,\"644\":1,\"648\":1,\"651\":3,\"653\":11,\"654\":4,\"655\":1,\"656\":14,\"668\":2,\"669\":1,\"670\":1}}],[\"compliances\",{\"1\":{\"277\":1}}],[\"complicated\",{\"1\":{\"141\":1}}],[\"computedproperty\",{\"1\":{\"554\":4}}],[\"computedkey\",{\"1\":{\"554\":1}}],[\"computedgetter\",{\"1\":{\"521\":1,\"554\":1}}],[\"computedwatcheroptions\",{\"1\":{\"521\":1,\"554\":1}}],[\"computedwatchers\",{\"1\":{\"521\":3,\"554\":3}}],[\"computed\",{\"1\":{\"519\":1,\"520\":2,\"521\":11,\"523\":4,\"524\":2,\"549\":5,\"554\":12,\"563\":1,\"660\":1,\"663\":3,\"664\":3,\"665\":3}}],[\"computed原理分析\",{\"0\":{\"519\":1}}],[\"computedstyle\",{\"1\":{\"100\":1,\"102\":11,\"103\":11,\"104\":11}}],[\"compute\",{\"1\":{\"218\":2}}],[\"commit的指向是undefined\",{\"1\":{\"665\":1}}],[\"commititerator\",{\"1\":{\"662\":1}}],[\"committing\",{\"1\":{\"660\":1,\"662\":5,\"663\":1}}],[\"commit\",{\"0\":{\"662\":1},\"1\":{\"658\":1,\"660\":3,\"662\":6,\"663\":2,\"665\":3}}],[\"commitnavigation\",{\"1\":{\"102\":2,\"103\":2,\"104\":2}}],[\"commentend\",{\"1\":{\"606\":5}}],[\"comment\",{\"1\":{\"604\":1,\"606\":5,\"626\":1}}],[\"comments\",{\"1\":{\"601\":2,\"603\":2,\"604\":1,\"627\":2,\"720\":1}}],[\"commander\",{\"1\":{\"463\":1}}],[\"common\",{\"1\":{\"70\":4,\"71\":1}}],[\"com\",{\"1\":{\"1\":1,\"43\":1,\"89\":1,\"215\":1,\"216\":1,\"217\":1,\"218\":2,\"220\":2,\"224\":1,\"225\":2,\"226\":2,\"227\":1,\"334\":4,\"341\":1,\"343\":1,\"442\":1,\"464\":2,\"517\":6,\"635\":10,\"642\":1,\"649\":3,\"651\":1}}],[\"c\",{\"0\":{\"64\":1,\"808\":1},\"1\":{\"1\":2,\"65\":3,\"66\":3,\"67\":1,\"80\":2,\"117\":3,\"122\":2,\"200\":3,\"206\":4,\"209\":2,\"218\":14,\"225\":1,\"234\":1,\"243\":2,\"263\":5,\"334\":1,\"345\":1,\"464\":1,\"528\":1,\"529\":1,\"532\":1,\"534\":2,\"566\":3,\"584\":13,\"615\":4,\"652\":2,\"667\":2,\"670\":4,\"749\":3},\"2\":{\"88\":1}}],[\"b=2\",{\"1\":{\"607\":1}}],[\"b=>c的权\",{\"1\":{\"1\":1}}],[\"b=>c=1\",{\"1\":{\"1\":1}}],[\"b=>e=2\",{\"1\":{\"1\":1}}],[\"b=>d=4\",{\"1\":{\"1\":1}}],[\"b+1\",{\"1\":{\"218\":1}}],[\"b+c\",{\"1\":{\"117\":1}}],[\"bvec4\",{\"1\":{\"193\":1,\"231\":2}}],[\"bvec3\",{\"1\":{\"193\":1,\"231\":4}}],[\"bvec2\",{\"1\":{\"193\":3,\"231\":2}}],[\"bdo\",{\"1\":{\"186\":1}}],[\"bfc\",{\"0\":{\"144\":1,\"174\":1},\"1\":{\"174\":16,\"184\":1,\"187\":1}}],[\"br\",{\"1\":{\"186\":1}}],[\"browserify\",{\"1\":{\"718\":1}}],[\"browser\",{\"1\":{\"709\":1,\"710\":2}}],[\"browserslistrc文件\",{\"1\":{\"715\":1}}],[\"browserslist\",{\"0\":{\"709\":1},\"1\":{\"699\":1,\"709\":1,\"713\":10,\"714\":1,\"715\":1}}],[\"browsers\",{\"1\":{\"646\":1}}],[\"browse\",{\"0\":{\"809\":1},\"2\":{\"109\":1,\"112\":1}}],[\"breakpad\",{\"1\":{\"517\":1}}],[\"break\",{\"1\":{\"59\":1,\"102\":2,\"103\":2,\"104\":2,\"562\":2,\"575\":1,\"606\":2,\"610\":1,\"643\":3,\"652\":1,\"689\":3}}],[\"blank\",{\"1\":{\"583\":1,\"635\":26}}],[\"blackberry\",{\"1\":{\"713\":2}}],[\"black\",{\"1\":{\"104\":2,\"141\":1}}],[\"blessed\",{\"1\":{\"463\":1}}],[\"blendedcolor\",{\"1\":{\"195\":1}}],[\"bl\",{\"1\":{\"224\":3}}],[\"blue4\",{\"1\":{\"218\":2}}],[\"blue3\",{\"1\":{\"218\":4}}],[\"blue2\",{\"1\":{\"218\":2}}],[\"blue1\",{\"1\":{\"218\":3}}],[\"blue\",{\"1\":{\"153\":1}}],[\"blockquote块引用\",{\"1\":{\"185\":1}}],[\"block\",{\"1\":{\"139\":5,\"140\":12,\"141\":18,\"145\":1,\"174\":6,\"175\":1,\"184\":3,\"187\":2,\"588\":1,\"613\":4,\"614\":1,\"635\":3,\"702\":2,\"704\":1}}],[\"blocks\",{\"1\":{\"139\":3,\"140\":1,\"141\":2}}],[\"blog\",{\"1\":{\"87\":1,\"190\":1}}],[\"bold\",{\"1\":{\"718\":1}}],[\"boundcommit\",{\"1\":{\"660\":1,\"662\":1}}],[\"bounddispatch\",{\"1\":{\"660\":1,\"661\":1}}],[\"boundrouteguard\",{\"1\":{\"654\":1}}],[\"bootstrap\",{\"1\":{\"735\":1,\"771\":1}}],[\"bool\",{\"1\":{\"193\":2,\"230\":3,\"240\":1}}],[\"boolean\",{\"1\":{\"8\":1,\"307\":1,\"521\":1,\"528\":1,\"540\":1,\"560\":1,\"561\":1,\"563\":1,\"565\":8,\"566\":3,\"573\":1,\"581\":1,\"582\":1,\"584\":1,\"586\":1,\"588\":2,\"601\":1,\"602\":1,\"603\":1,\"613\":1,\"614\":1,\"644\":1,\"646\":1,\"654\":1}}],[\"book\",{\"1\":{\"189\":1,\"208\":1,\"223\":1}}],[\"border\",{\"1\":{\"174\":1}}],[\"bottom\",{\"0\":{\"170\":1},\"1\":{\"224\":1}}],[\"both\",{\"1\":{\"145\":2,\"558\":1}}],[\"box\",{\"1\":{\"159\":1,\"161\":1,\"166\":1,\"175\":8,\"176\":1,\"184\":2,\"187\":2,\"215\":3,\"216\":3,\"217\":3}}],[\"body\",{\"1\":{\"102\":2,\"103\":2,\"104\":2,\"238\":2,\"254\":2,\"588\":2,\"601\":1,\"603\":1,\"690\":3}}],[\"babylon7\",{\"1\":{\"690\":2}}],[\"babel也拥有编译器的工作流程\",{\"1\":{\"707\":1}}],[\"babelrc\",{\"1\":{\"706\":3}}],[\"babel提供了两种配置文件的编写\",{\"1\":{\"706\":1}}],[\"babeljs\",{\"1\":{\"705\":1}}],[\"babel的核心代码\",{\"1\":{\"701\":1}}],[\"babel本身可以作为一个独立的工具\",{\"1\":{\"701\":1}}],[\"babel7\",{\"1\":{\"699\":2,\"706\":1}}],[\"babel会根据browserslist工具进行适配\",{\"1\":{\"692\":1}}],[\"babel是一个工具链\",{\"1\":{\"692\":1}}],[\"babel是什么\",{\"0\":{\"692\":1}}],[\"babel\",{\"0\":{\"694\":1,\"697\":1,\"698\":1},\"1\":{\"635\":2,\"637\":2,\"697\":1,\"699\":4,\"700\":3,\"701\":2,\"702\":7,\"703\":1,\"704\":3,\"705\":4,\"706\":4,\"709\":1,\"718\":1,\"722\":1,\"746\":1,\"765\":1},\"2\":{\"708\":1}}],[\"bailre\",{\"1\":{\"670\":2}}],[\"bail\",{\"1\":{\"615\":1,\"777\":1}}],[\"bailing\",{\"1\":{\"588\":1}}],[\"batching\",{\"1\":{\"565\":1}}],[\"bat\",{\"1\":{\"517\":1}}],[\"bat是用来在命令行界面中执行\",{\"1\":{\"517\":1}}],[\"balancing\",{\"1\":{\"442\":1}}],[\"baz\",{\"1\":{\"263\":10,\"269\":2,\"271\":2,\"289\":3,\"317\":3}}],[\"backend\",{\"1\":{\"586\":1,\"587\":1,\"595\":2}}],[\"back\",{\"1\":{\"216\":1,\"645\":1}}],[\"background\",{\"1\":{\"102\":2,\"103\":2,\"104\":4,\"161\":2,\"215\":1,\"216\":1,\"217\":1,\"254\":2,\"617\":1}}],[\"badge\",{\"1\":{\"656\":1}}],[\"bad\",{\"1\":{\"140\":1,\"141\":1,\"455\":1}}],[\"bar两个属性单独处理\",{\"1\":{\"317\":1}}],[\"bar这两个属性\",{\"1\":{\"317\":1}}],[\"bary\",{\"1\":{\"202\":2}}],[\"barx+bary\",{\"1\":{\"202\":2}}],[\"barx\",{\"1\":{\"202\":4}}],[\"bar\",{\"1\":{\"115\":2,\"123\":2,\"126\":2,\"127\":4,\"263\":10,\"265\":2,\"268\":1,\"269\":2,\"271\":4,\"287\":3,\"288\":4,\"289\":13,\"290\":1,\"291\":2,\"294\":2,\"297\":2,\"303\":2,\"305\":1,\"317\":4,\"555\":2,\"643\":2,\"718\":2}}],[\"barking\",{\"1\":{\"84\":3}}],[\"bark\",{\"1\":{\"84\":2}}],[\"base64\",{\"1\":{\"801\":2}}],[\"basewarn\",{\"1\":{\"603\":1}}],[\"baseoptions\",{\"1\":{\"603\":5}}],[\"baseconfig\",{\"1\":{\"719\":2,\"720\":2}}],[\"basecompile\",{\"1\":{\"603\":3}}],[\"basector\",{\"1\":{\"585\":3}}],[\"based\",{\"1\":{\"141\":1,\"218\":2,\"557\":1,\"586\":1}}],[\"base\",{\"1\":{\"46\":1,\"517\":1,\"528\":2,\"542\":2,\"546\":1,\"547\":3,\"585\":2,\"643\":3,\"646\":3,\"647\":2,\"656\":2,\"718\":1,\"719\":1,\"720\":1}}],[\"benefits\",{\"1\":{\"614\":1}}],[\"been\",{\"1\":{\"588\":1,\"594\":1,\"596\":1,\"597\":1,\"651\":1,\"653\":1,\"656\":2,\"664\":1}}],[\"because\",{\"1\":{\"558\":2,\"559\":1,\"565\":1,\"575\":1,\"583\":1,\"584\":1,\"649\":1,\"653\":1,\"670\":1}}],[\"beforeresolver\",{\"1\":{\"735\":1}}],[\"beforeresolve\",{\"1\":{\"648\":3,\"655\":1}}],[\"beforerouteupdate\",{\"1\":{\"642\":1,\"648\":2,\"654\":1}}],[\"beforerouteleave\",{\"1\":{\"642\":1,\"648\":2,\"654\":1}}],[\"beforerouteenter\",{\"1\":{\"642\":1,\"648\":1,\"655\":1}}],[\"beforeeach\",{\"1\":{\"648\":3}}],[\"beforeenter\",{\"1\":{\"644\":2,\"648\":2,\"651\":1}}],[\"beforehooks\",{\"1\":{\"643\":1,\"651\":1}}],[\"beforeloaders\",{\"1\":{\"630\":2}}],[\"beforeupdate\",{\"1\":{\"582\":1}}],[\"beforemount\",{\"1\":{\"582\":1}}],[\"before\",{\"1\":{\"544\":1,\"558\":10,\"565\":3,\"582\":1,\"590\":1,\"631\":1,\"651\":3,\"655\":1,\"661\":2}}],[\"beforecreate\",{\"1\":{\"543\":2,\"544\":1,\"642\":1,\"659\":1,\"665\":1}}],[\"being\",{\"1\":{\"544\":1,\"582\":1}}],[\"beamwidth\",{\"1\":{\"225\":2}}],[\"beam\",{\"1\":{\"225\":1}}],[\"beta\",{\"1\":{\"713\":1}}],[\"better\",{\"1\":{\"190\":1,\"575\":1,\"614\":1}}],[\"between\",{\"1\":{\"79\":1,\"190\":2}}],[\"behavior\",{\"1\":{\"141\":1}}],[\"bem规范\",{\"0\":{\"138\":1}}],[\"be\",{\"1\":{\"79\":1,\"139\":3,\"140\":1,\"319\":2,\"543\":1,\"551\":1,\"557\":1,\"558\":1,\"561\":1,\"565\":2,\"573\":2,\"575\":2,\"585\":1,\"591\":1,\"606\":1,\"642\":2,\"646\":1,\"649\":1,\"656\":3,\"659\":1}}],[\"bundleanalyzerplugin\",{\"1\":{\"752\":3}}],[\"bundle\",{\"1\":{\"752\":2,\"776\":1}}],[\"but\",{\"1\":{\"547\":1,\"575\":1,\"597\":1,\"646\":1,\"656\":1}}],[\"button\",{\"1\":{\"186\":1,\"584\":1}}],[\"built\",{\"1\":{\"584\":1,\"613\":1}}],[\"builtincomponents\",{\"1\":{\"542\":1}}],[\"buildmodule\",{\"1\":{\"735\":1}}],[\"buildregex\",{\"1\":{\"611\":2}}],[\"build和外层的\",{\"1\":{\"517\":1}}],[\"build\",{\"1\":{\"89\":2,\"517\":5}}],[\"bumptech\",{\"1\":{\"517\":1}}],[\"bug\",{\"1\":{\"483\":1,\"609\":1,\"610\":1}}],[\"buffer\",{\"1\":{\"102\":2,\"103\":2,\"104\":2,\"582\":1,\"804\":3}}],[\"bucketcount\",{\"1\":{\"61\":2}}],[\"buckets\",{\"1\":{\"61\":8}}],[\"bucketsize\",{\"1\":{\"61\":5}}],[\"bucketsort\",{\"1\":{\"61\":1}}],[\"bucketlen\",{\"1\":{\"60\":2}}],[\"bucket\",{\"1\":{\"60\":6,\"61\":2,\"62\":4}}],[\"bubblesort\",{\"1\":{\"53\":1}}],[\"bips\",{\"1\":{\"218\":1}}],[\"bip2\",{\"1\":{\"218\":2}}],[\"bip1\",{\"1\":{\"218\":3}}],[\"bias\",{\"1\":{\"191\":1,\"199\":16,\"235\":4}}],[\"bian\",{\"1\":{\"18\":1}}],[\"big\",{\"1\":{\"141\":1,\"186\":1,\"803\":1}}],[\"bin\",{\"1\":{\"771\":3}}],[\"bindguard\",{\"1\":{\"654\":3}}],[\"bind`\",{\"1\":{\"571\":2}}],[\"bindre\",{\"1\":{\"534\":3}}],[\"bind\",{\"1\":{\"282\":1,\"283\":1,\"528\":1,\"532\":3,\"534\":2,\"535\":2,\"552\":5,\"584\":1,\"654\":3,\"660\":1,\"663\":1,\"665\":1}}],[\"bindings\",{\"1\":{\"613\":1,\"615\":7}}],[\"binding\",{\"1\":{\"238\":1,\"610\":2,\"611\":1}}],[\"binder\",{\"1\":{\"89\":1}}],[\"binary\",{\"1\":{\"7\":1}}],[\"by\",{\"1\":{\"13\":1,\"23\":1,\"141\":1,\"243\":1,\"565\":2,\"586\":1,\"588\":2,\"596\":1,\"597\":1,\"631\":1,\"646\":1,\"649\":1,\"656\":2,\"663\":1,\"664\":1}}],[\"b\",{\"1\":{\"1\":2,\"77\":2,\"117\":4,\"118\":2,\"122\":4,\"186\":1,\"193\":2,\"195\":2,\"200\":3,\"206\":6,\"218\":5,\"225\":3,\"243\":3,\"263\":5,\"269\":1,\"334\":1,\"343\":1,\"345\":1,\"543\":1,\"558\":2,\"571\":2,\"584\":2,\"589\":8,\"607\":2,\"608\":1,\"622\":2,\"624\":2,\"652\":9,\"663\":2,\"667\":2,\"670\":6,\"749\":5}}],[\"a><\",{\"1\":{\"635\":24}}],[\"a>\",{\"1\":{\"635\":2}}],[\"a=1\",{\"1\":{\"607\":1}}],[\"a=>c\",{\"1\":{\"1\":1}}],[\"a=>c=4\",{\"1\":{\"1\":1}}],[\"a=>b\",{\"1\":{\"1\":1}}],[\"a=>b=>c\",{\"1\":{\"1\":1}}],[\"a=>b=2\",{\"1\":{\"1\":1}}],[\"again\",{\"1\":{\"575\":1}}],[\"age=27\",{\"1\":{\"316\":1}}],[\"age\",{\"1\":{\"76\":6,\"78\":1,\"316\":1,\"610\":3,\"729\":1,\"730\":2,\"778\":6,\"779\":5,\"780\":5,\"781\":5,\"782\":5,\"783\":5,\"784\":5}}],[\"a|b\",{\"1\":{\"571\":1}}],[\"autoprefixer\",{\"1\":{\"709\":1,\"754\":1,\"755\":2}}],[\"auto\",{\"1\":{\"517\":1}}],[\"author\",{\"1\":{\"190\":1,\"215\":1,\"216\":1,\"217\":1,\"224\":1,\"225\":1,\"226\":1,\"227\":1}}],[\"aaptoptions\",{\"1\":{\"517\":1}}],[\"aar\",{\"1\":{\"517\":6}}],[\"aaa\",{\"1\":{\"471\":1,\"472\":2,\"473\":1}}],[\"aigent\",{\"1\":{\"464\":1}}],[\"aim\",{\"1\":{\"7\":3}}],[\"awesome\",{\"1\":{\"635\":2}}],[\"away+v\",{\"1\":{\"800\":1,\"801\":1}}],[\"aware\",{\"1\":{\"542\":1}}],[\"await的结果\",{\"1\":{\"253\":1}}],[\"await\",{\"0\":{\"253\":1},\"1\":{\"253\":8}}],[\"aws\",{\"1\":{\"442\":1}}],[\"amazon\",{\"1\":{\"442\":1}}],[\"am\",{\"1\":{\"326\":1,\"653\":1}}],[\"ambient\",{\"1\":{\"234\":1}}],[\"ajax\",{\"1\":{\"247\":2,\"653\":1,\"788\":1,\"801\":1}}],[\"apm\",{\"0\":{\"435\":1}}],[\"aplus\",{\"1\":{\"277\":2,\"519\":1}}],[\"api\",{\"0\":{\"289\":1,\"292\":1,\"293\":2,\"681\":1},\"1\":{\"255\":3,\"265\":1,\"289\":3,\"293\":2,\"297\":1,\"301\":1,\"324\":1,\"541\":1,\"542\":1,\"549\":1,\"596\":1,\"635\":8,\"656\":1,\"660\":1,\"796\":2}}],[\"aposition\",{\"1\":{\"239\":6}}],[\"appsrc\",{\"1\":{\"720\":1}}],[\"apps\",{\"1\":{\"642\":7,\"643\":1}}],[\"apps里\",{\"1\":{\"517\":1}}],[\"appcompat\",{\"1\":{\"517\":2}}],[\"app项目中的代码\",{\"1\":{\"517\":1}}],[\"appkey\",{\"1\":{\"517\":2}}],[\"appdocs\",{\"1\":{\"517\":2}}],[\"appendtssuffixto\",{\"1\":{\"718\":1}}],[\"appended\",{\"1\":{\"651\":1}}],[\"appendextension\",{\"1\":{\"635\":1,\"638\":1}}],[\"appenders\",{\"1\":{\"464\":2}}],[\"appendchild\",{\"1\":{\"593\":1,\"603\":1}}],[\"appendfile在每次需要写日志时都会打开一个文件\",{\"1\":{\"455\":1}}],[\"appendfile\",{\"1\":{\"455\":2}}],[\"appearance\",{\"1\":{\"141\":1}}],[\"app\",{\"1\":{\"325\":2,\"326\":2,\"464\":6,\"517\":1,\"534\":2,\"538\":4,\"539\":4,\"566\":2,\"584\":4,\"602\":2,\"615\":2,\"635\":4,\"642\":18,\"643\":1,\"651\":2,\"655\":3,\"789\":3,\"793\":4,\"795\":4,\"797\":4}}],[\"applied\",{\"1\":{\"654\":1}}],[\"application\",{\"1\":{\"435\":1}}],[\"applywebpackoptionsdefaults\",{\"1\":{\"738\":1}}],[\"applywebpackoptionsbasedefaults\",{\"1\":{\"738\":1}}],[\"applymixin通过全局\",{\"1\":{\"659\":1}}],[\"applymixin\",{\"1\":{\"659\":2}}],[\"applyns\",{\"1\":{\"584\":1}}],[\"apply\",{\"0\":{\"313\":2},\"1\":{\"296\":6,\"313\":8,\"319\":2,\"455\":1,\"547\":1,\"562\":1,\"592\":1,\"609\":1,\"636\":4,\"654\":3,\"660\":1,\"670\":1,\"736\":1,\"738\":5,\"739\":1,\"740\":1}}],[\"apple\",{\"1\":{\"26\":1}}],[\"average\",{\"1\":{\"232\":2,\"434\":1}}],[\"avoiding\",{\"1\":{\"646\":1}}],[\"avoids\",{\"1\":{\"613\":1}}],[\"avoid\",{\"1\":{\"206\":3,\"243\":1,\"542\":1,\"544\":1,\"588\":1,\"670\":1}}],[\"advance\",{\"1\":{\"606\":7,\"607\":3}}],[\"advanced\",{\"1\":{\"220\":2}}],[\"adouble\",{\"1\":{\"519\":1}}],[\"adsl\",{\"0\":{\"416\":1,\"419\":1,\"420\":1,\"421\":1},\"1\":{\"416\":2,\"418\":1,\"419\":3,\"420\":1,\"421\":1,\"423\":1}}],[\"added\",{\"1\":{\"663\":1}}],[\"addeventlistener\",{\"1\":{\"646\":1}}],[\"addchild\",{\"1\":{\"663\":2}}],[\"adding\",{\"1\":{\"651\":1}}],[\"additionalparameters\",{\"1\":{\"517\":1}}],[\"addrouterecord\",{\"1\":{\"644\":5}}],[\"addroutes\",{\"1\":{\"644\":1}}],[\"addroute\",{\"1\":{\"644\":1}}],[\"address联系方式信息\",{\"1\":{\"185\":1}}],[\"address\",{\"1\":{\"78\":1,\"89\":6}}],[\"addvnodes\",{\"1\":{\"596\":1,\"597\":1}}],[\"addsub\",{\"1\":{\"564\":1,\"565\":1}}],[\"adddep\",{\"1\":{\"556\":1,\"564\":1,\"565\":1}}],[\"adddirective\",{\"1\":{\"534\":1}}],[\"addattr\",{\"1\":{\"534\":2}}],[\"addall\",{\"1\":{\"117\":2}}],[\"addprop\",{\"1\":{\"534\":2}}],[\"addhandler\",{\"1\":{\"534\":4}}],[\"addtwo\",{\"1\":{\"483\":2}}],[\"addjsonfile\",{\"1\":{\"89\":2}}],[\"add\",{\"1\":{\"80\":4,\"117\":4,\"139\":1,\"141\":2,\"215\":1,\"216\":1,\"217\":1,\"238\":1,\"263\":3,\"517\":1,\"565\":2,\"635\":1}}],[\"at\",{\"1\":{\"434\":1,\"464\":1,\"521\":1,\"551\":1,\"554\":1,\"584\":1,\"588\":1,\"646\":1}}],[\"attach\",{\"1\":{\"656\":1}}],[\"attached\",{\"1\":{\"325\":1,\"328\":2,\"546\":1,\"547\":1,\"653\":1}}],[\"attr\",{\"1\":{\"588\":2,\"607\":6}}],[\"attrstoquery\",{\"1\":{\"625\":1,\"629\":1}}],[\"attrsquery\",{\"1\":{\"625\":2,\"629\":2}}],[\"attrs数组长度相等的数组\",{\"1\":{\"608\":1}}],[\"attrsmap\",{\"1\":{\"534\":2,\"609\":1,\"610\":1,\"613\":2}}],[\"attrslist\",{\"1\":{\"534\":1,\"609\":1,\"613\":1}}],[\"attrs\",{\"1\":{\"529\":1,\"534\":1,\"566\":1,\"584\":5,\"604\":1,\"607\":2,\"608\":8,\"609\":7,\"613\":1,\"615\":1,\"625\":1,\"629\":1,\"635\":3}}],[\"attribute\",{\"1\":{\"102\":4,\"103\":6,\"104\":6,\"236\":4,\"239\":12,\"534\":1,\"607\":3,\"635\":1}}],[\"attributes\",{\"1\":{\"102\":14,\"103\":19,\"104\":19}}],[\"atexcoord\",{\"1\":{\"239\":2}}],[\"atanh\",{\"1\":{\"198\":3}}],[\"atan\",{\"1\":{\"198\":3,\"206\":6,\"218\":2,\"225\":1,\"226\":1,\"227\":1}}],[\"axis\",{\"1\":{\"196\":4}}],[\"action中的方法\",{\"1\":{\"661\":1}}],[\"action订阅\",{\"1\":{\"660\":1}}],[\"action操作对象\",{\"1\":{\"660\":1}}],[\"action\",{\"1\":{\"660\":1,\"661\":3,\"663\":4}}],[\"actionsubscribers\",{\"1\":{\"660\":1,\"661\":2}}],[\"actions\",{\"1\":{\"658\":1,\"660\":1,\"661\":1,\"663\":5,\"665\":1}}],[\"activate\",{\"1\":{\"575\":2,\"595\":1}}],[\"activated\",{\"1\":{\"558\":1,\"651\":4,\"652\":3,\"655\":1}}],[\"activatedchildren\",{\"1\":{\"558\":2}}],[\"activatedqueue\",{\"1\":{\"558\":2}}],[\"actived\",{\"1\":{\"656\":1}}],[\"activeeffectscope\",{\"1\":{\"565\":1}}],[\"active\",{\"1\":{\"559\":1,\"565\":5,\"670\":2}}],[\"across\",{\"1\":{\"656\":1}}],[\"acronym\",{\"1\":{\"186\":1}}],[\"accept\",{\"0\":{\"801\":1},\"1\":{\"635\":2,\"799\":1,\"800\":1,\"801\":3}}],[\"accepts\",{\"1\":{\"139\":1}}],[\"access\",{\"1\":{\"583\":1,\"793\":1}}],[\"accessor\",{\"1\":{\"563\":1}}],[\"ack与窗口的合并\",{\"0\":{\"367\":1}}],[\"acos\",{\"1\":{\"198\":3}}],[\"afterenvironment\",{\"1\":{\"738\":1}}],[\"aftereach\",{\"1\":{\"648\":3,\"655\":1}}],[\"afterresolver\",{\"1\":{\"735\":1}}],[\"afterhooks\",{\"1\":{\"643\":1,\"649\":1}}],[\"afterloaders\",{\"1\":{\"630\":2}}],[\"after\",{\"1\":{\"145\":1,\"160\":1,\"534\":1,\"544\":1,\"575\":1,\"591\":1,\"610\":1,\"651\":1,\"661\":2,\"735\":1}}],[\"algorithm\",{\"0\":{\"807\":1}}],[\"also\",{\"1\":{\"575\":1,\"591\":1,\"656\":2,\"660\":1}}],[\"alone\",{\"1\":{\"573\":1}}],[\"alwaysnormalize\",{\"1\":{\"584\":2}}],[\"always\",{\"1\":{\"558\":1,\"584\":2,\"614\":1}}],[\"already\",{\"1\":{\"521\":1,\"551\":1,\"554\":1,\"557\":2,\"582\":1,\"594\":1,\"656\":1,\"659\":1}}],[\"alpha\",{\"1\":{\"195\":2,\"206\":4,\"713\":1}}],[\"alive建立缓存\",{\"1\":{\"574\":1}}],[\"alive的include和exclude属性都是通过单文件组件中的name属性来判断是否缓存此组件\",{\"1\":{\"571\":1}}],[\"alive会判断第一层dom是不是组件\",{\"1\":{\"571\":1}}],[\"alive直接包裹组件\",{\"1\":{\"571\":1}}],[\"alive\",{\"0\":{\"573\":1},\"1\":{\"571\":4,\"572\":1,\"573\":3,\"575\":2,\"588\":1,\"590\":1,\"591\":3,\"656\":4}}],[\"alive>\",{\"1\":{\"570\":1,\"571\":5,\"572\":1}}],[\"alive>是\",{\"1\":{\"570\":1}}],[\"alive原理分析\",{\"0\":{\"570\":1}}],[\"alibaba\",{\"1\":{\"517\":1}}],[\"aliasroute\",{\"1\":{\"644\":2}}],[\"aliases\",{\"1\":{\"644\":3}}],[\"alias\",{\"1\":{\"517\":1,\"644\":13,\"718\":1}}],[\"alinode\",{\"0\":{\"440\":1}}],[\"align\",{\"1\":{\"175\":3}}],[\"alice\",{\"1\":{\"79\":2}}],[\"alt=\",{\"1\":{\"529\":1}}],[\"alt\",{\"1\":{\"152\":1,\"529\":1,\"584\":1,\"713\":1}}],[\"alter\",{\"1\":{\"141\":1}}],[\"allow\",{\"1\":{\"583\":1,\"793\":1}}],[\"allows\",{\"1\":{\"583\":1}}],[\"all\",{\"1\":{\"140\":1,\"263\":1,\"283\":1,\"457\":1,\"464\":1,\"521\":1,\"542\":1,\"561\":1,\"565\":3,\"583\":1,\"592\":1,\"661\":1,\"663\":1,\"670\":1,\"720\":1}}],[\"ascii\",{\"1\":{\"720\":1}}],[\"assume\",{\"1\":{\"653\":1}}],[\"assign\",{\"1\":{\"627\":1,\"646\":1}}],[\"assigned\",{\"1\":{\"584\":1}}],[\"associated\",{\"1\":{\"590\":1}}],[\"asset\",{\"1\":{\"542\":1,\"718\":2}}],[\"assets\",{\"1\":{\"517\":1,\"529\":2,\"584\":2}}],[\"assert\",{\"1\":{\"483\":3,\"663\":1}}],[\"astexplorer\",{\"1\":{\"690\":2}}],[\"astelement\",{\"1\":{\"604\":1,\"609\":1,\"612\":1,\"615\":3}}],[\"astrender\",{\"1\":{\"615\":1}}],[\"astnode\",{\"1\":{\"610\":1,\"613\":2,\"614\":1}}],[\"astattr\",{\"1\":{\"608\":1}}],[\"ast\",{\"0\":{\"686\":1},\"1\":{\"534\":1,\"603\":12,\"604\":1,\"612\":2,\"613\":1,\"615\":5,\"687\":1,\"690\":3}}],[\"asynchook\",{\"1\":{\"782\":4,\"783\":4,\"784\":4}}],[\"asyncserieswaterfallhook\",{\"1\":{\"776\":1}}],[\"asyncseriesbailhook\",{\"1\":{\"776\":1}}],[\"asyncserieshook\",{\"0\":{\"782\":1},\"1\":{\"776\":1,\"782\":2,\"783\":1,\"784\":1}}],[\"asyncparallelbailhook\",{\"1\":{\"776\":1}}],[\"asyncparallelhook\",{\"0\":{\"783\":1},\"1\":{\"776\":1,\"783\":2,\"784\":2}}],[\"asyncfactory\",{\"1\":{\"585\":5,\"589\":3,\"596\":1}}],[\"async2\",{\"1\":{\"253\":2}}],[\"async1\",{\"1\":{\"253\":4}}],[\"async\",{\"0\":{\"253\":1},\"1\":{\"253\":5,\"646\":1,\"651\":2,\"653\":11,\"655\":1,\"670\":1,\"728\":1,\"729\":1,\"730\":1,\"777\":1}}],[\"asin\",{\"1\":{\"198\":3}}],[\"aside\",{\"1\":{\"185\":1}}],[\"as\",{\"1\":{\"139\":2,\"140\":1,\"141\":2,\"434\":2,\"464\":1,\"521\":1,\"534\":1,\"540\":1,\"544\":3,\"545\":1,\"547\":1,\"561\":1,\"565\":1,\"573\":1,\"584\":2,\"585\":4,\"586\":1,\"588\":1,\"590\":2,\"597\":1,\"603\":1,\"606\":1,\"610\":1,\"614\":1,\"615\":2,\"642\":1,\"646\":1,\"649\":1,\"656\":1,\"660\":1,\"670\":3,\"713\":1}}],[\"aspect\",{\"0\":{\"171\":1},\"1\":{\"233\":2}}],[\"asp\",{\"1\":{\"65\":4}}],[\"a+规范的实现可以与那些不太规范但可用的实现能良好共存\",{\"1\":{\"282\":1}}],[\"a+协议的\",{\"1\":{\"282\":1}}],[\"a+\",{\"1\":{\"276\":2,\"277\":1}}],[\"a+1\",{\"1\":{\"218\":1}}],[\"a+result+d\",{\"1\":{\"117\":1}}],[\"a+b\",{\"1\":{\"117\":1}}],[\"aborted\",{\"1\":{\"651\":1}}],[\"abort\",{\"1\":{\"651\":9,\"655\":7}}],[\"about\",{\"1\":{\"584\":2}}],[\"ab\",{\"1\":{\"644\":1}}],[\"able\",{\"1\":{\"613\":1,\"656\":1}}],[\"abc\",{\"1\":{\"263\":1}}],[\"abstracthistory\",{\"1\":{\"643\":1}}],[\"abstract\",{\"1\":{\"573\":1,\"585\":2,\"643\":2}}],[\"absv\",{\"1\":{\"195\":1}}],[\"absa\",{\"1\":{\"195\":1}}],[\"abs\",{\"1\":{\"190\":1,\"195\":4,\"204\":10,\"206\":9,\"210\":1,\"218\":9,\"225\":1,\"227\":6,\"243\":2}}],[\"absolute\",{\"1\":{\"103\":1,\"104\":1,\"174\":1,\"626\":1}}],[\"abbr\",{\"1\":{\"186\":1}}],[\"abzi\",{\"1\":{\"18\":1}}],[\"ahead\",{\"1\":{\"73\":1}}],[\"aot编译器通常用于移动平台和嵌入式系统\",{\"1\":{\"73\":1}}],[\"aot编译器在程序编译时将cil代码转换为机器代码\",{\"1\":{\"73\":1}}],[\"aot编译器\",{\"0\":{\"73\":1},\"1\":{\"73\":1}}],[\"around\",{\"1\":{\"585\":1,\"646\":1}}],[\"arp\",{\"1\":{\"405\":1}}],[\"are\",{\"1\":{\"140\":1,\"141\":1,\"521\":3,\"542\":2,\"546\":1,\"547\":1,\"551\":1,\"554\":2,\"558\":3,\"565\":1,\"575\":1,\"583\":2,\"586\":1,\"614\":1,\"651\":1,\"653\":1,\"654\":1,\"655\":1,\"670\":1}}],[\"area\",{\"1\":{\"13\":2,\"79\":1,\"81\":3,\"158\":1,\"230\":1}}],[\"article\",{\"1\":{\"87\":1,\"185\":1}}],[\"argre\",{\"1\":{\"534\":1}}],[\"argmatch\",{\"1\":{\"534\":3}}],[\"argv\",{\"1\":{\"452\":1}}],[\"arg\",{\"1\":{\"319\":2,\"534\":8,\"535\":1}}],[\"argument\",{\"1\":{\"319\":2}}],[\"argumentlist\",{\"1\":{\"296\":1}}],[\"argumentslist\",{\"1\":{\"296\":1,\"313\":7,\"314\":4,\"319\":4}}],[\"arguments\",{\"1\":{\"238\":2,\"263\":1,\"289\":2,\"297\":2,\"302\":1,\"303\":1,\"304\":1,\"305\":1,\"306\":1,\"307\":1,\"308\":1,\"309\":1,\"310\":1,\"311\":1,\"312\":1,\"313\":1,\"316\":2,\"317\":2,\"318\":1,\"319\":2,\"320\":2,\"455\":4,\"563\":1,\"654\":2}}],[\"argumentoutofrangeexception\",{\"1\":{\"79\":1}}],[\"args\",{\"1\":{\"68\":1,\"77\":1,\"82\":1,\"84\":1,\"89\":2,\"314\":1,\"320\":3,\"548\":2,\"562\":4,\"567\":1,\"608\":7,\"670\":4}}],[\"arrow\",{\"1\":{\"702\":3,\"704\":1}}],[\"arr3\",{\"1\":{\"263\":2}}],[\"arr2\",{\"1\":{\"263\":2}}],[\"arrlen\",{\"1\":{\"60\":2}}],[\"arr\",{\"1\":{\"53\":10,\"54\":10,\"55\":8,\"56\":8,\"57\":5,\"58\":16,\"59\":16,\"60\":7,\"61\":16,\"62\":6,\"263\":10,\"265\":5,\"654\":2}}],[\"array<navigationguard>\",{\"1\":{\"654\":1}}],[\"array<routerecord>\",{\"1\":{\"652\":5,\"653\":1,\"654\":4}}],[\"array<routeconfig>\",{\"1\":{\"644\":2}}],[\"array<\",{\"1\":{\"651\":1,\"654\":4,\"655\":1}}],[\"array<vnode>\",{\"1\":{\"584\":2,\"585\":2}}],[\"array<string>\",{\"1\":{\"573\":2,\"644\":3}}],[\"array<function>\",{\"1\":{\"567\":1,\"573\":1}}],[\"array<dep>\",{\"1\":{\"565\":2}}],[\"array<deptarget>\",{\"1\":{\"564\":1}}],[\"array<deptarget\",{\"1\":{\"563\":1}}],[\"array<any>\",{\"1\":{\"561\":1,\"563\":1,\"654\":2}}],[\"arrayproto\",{\"1\":{\"562\":3}}],[\"arraykeys\",{\"1\":{\"561\":1}}],[\"arraymethods\",{\"0\":{\"562\":1},\"1\":{\"561\":2,\"562\":3}}],[\"arraymathods\",{\"1\":{\"561\":1}}],[\"arrayiterator\",{\"1\":{\"263\":2,\"265\":1}}],[\"arrays\",{\"1\":{\"9\":1,\"43\":5,\"559\":1,\"565\":1,\"670\":1}}],[\"array\",{\"1\":{\"8\":1,\"18\":2,\"60\":1,\"61\":1,\"102\":1,\"103\":1,\"104\":1,\"232\":5,\"263\":4,\"271\":1,\"283\":1,\"300\":1,\"308\":1,\"551\":1,\"561\":1,\"562\":1,\"573\":1,\"583\":1,\"608\":1,\"642\":1,\"644\":1,\"654\":2,\"738\":1}}],[\"analyzer\",{\"1\":{\"752\":2}}],[\"ancestor\",{\"1\":{\"588\":9}}],[\"anormal\",{\"1\":{\"239\":4}}],[\"anothergetter\",{\"1\":{\"664\":1}}],[\"another\",{\"1\":{\"77\":1,\"547\":1,\"583\":1}}],[\"angle+3\",{\"1\":{\"206\":3}}],[\"angle\",{\"1\":{\"195\":4,\"196\":4,\"206\":9,\"216\":5,\"218\":2,\"226\":1,\"233\":5}}],[\"an\",{\"1\":{\"140\":1,\"141\":1,\"434\":1,\"586\":1,\"588\":1,\"590\":1,\"610\":1,\"651\":1,\"653\":1}}],[\"anything\",{\"1\":{\"585\":1}}],[\"any>\",{\"1\":{\"521\":1,\"544\":1,\"547\":4,\"554\":1,\"555\":1,\"670\":1}}],[\"any\",{\"1\":{\"139\":1,\"140\":2,\"521\":4,\"535\":2,\"544\":2,\"545\":1,\"546\":1,\"547\":3,\"548\":1,\"553\":1,\"554\":2,\"555\":4,\"560\":2,\"561\":1,\"563\":1,\"565\":4,\"566\":1,\"567\":3,\"583\":1,\"584\":6,\"588\":4,\"590\":5,\"595\":1,\"596\":1,\"603\":2,\"604\":1,\"606\":5,\"631\":1,\"642\":1,\"651\":1,\"655\":1,\"669\":2,\"670\":10}}],[\"animated\",{\"1\":{\"517\":1}}],[\"animate\",{\"1\":{\"218\":1}}],[\"animation\",{\"0\":{\"136\":1}}],[\"animal\",{\"1\":{\"84\":5}}],[\"ans\",{\"1\":{\"13\":4,\"18\":5}}],[\"androidmanifest\",{\"1\":{\"517\":1}}],[\"androidmainifest\",{\"1\":{\"517\":1}}],[\"androidx\",{\"1\":{\"517\":4}}],[\"androidtest用来编写\",{\"1\":{\"517\":1}}],[\"android\",{\"1\":{\"517\":14,\"710\":1},\"2\":{\"518\":1}}],[\"android离线打包\",{\"0\":{\"517\":1}}],[\"and\",{\"1\":{\"8\":1,\"79\":1,\"139\":2,\"140\":2,\"141\":7,\"191\":1,\"210\":1,\"226\":1,\"543\":1,\"544\":1,\"547\":1,\"558\":2,\"559\":1,\"561\":1,\"562\":1,\"565\":2,\"568\":1,\"575\":2,\"588\":3,\"591\":2,\"596\":1,\"601\":1,\"603\":1,\"606\":1,\"614\":1,\"615\":3,\"635\":3,\"644\":1,\"651\":2,\"653\":1,\"655\":1,\"656\":2,\"670\":1,\"713\":1}}],[\"a\",{\"1\":{\"1\":2,\"66\":2,\"77\":2,\"117\":2,\"118\":2,\"122\":2,\"139\":6,\"140\":4,\"141\":2,\"153\":1,\"154\":1,\"158\":2,\"186\":1,\"190\":2,\"195\":24,\"200\":4,\"206\":8,\"218\":6,\"225\":3,\"226\":2,\"227\":7,\"239\":12,\"241\":2,\"243\":4,\"263\":5,\"269\":1,\"300\":1,\"320\":1,\"334\":1,\"345\":1,\"388\":1,\"396\":1,\"410\":1,\"412\":1,\"434\":3,\"455\":4,\"483\":2,\"519\":4,\"543\":1,\"544\":3,\"547\":1,\"558\":5,\"561\":1,\"565\":2,\"571\":2,\"575\":6,\"583\":2,\"584\":3,\"585\":2,\"586\":1,\"588\":3,\"589\":8,\"590\":2,\"591\":2,\"596\":1,\"597\":1,\"607\":5,\"608\":4,\"610\":1,\"613\":2,\"614\":2,\"615\":1,\"622\":2,\"624\":2,\"626\":2,\"631\":1,\"635\":6,\"642\":1,\"652\":12,\"653\":1,\"656\":1,\"663\":4,\"667\":2,\"670\":7,\"689\":2,\"749\":5}}],[\"47da\",{\"1\":{\"801\":2}}],[\"42b983\",{\"1\":{\"635\":2}}],[\"420\",{\"1\":{\"195\":1}}],[\"404\",{\"1\":{\"806\":1}}],[\"40px\",{\"1\":{\"635\":2}}],[\"40vue\",{\"1\":{\"635\":4}}],[\"400x240\",{\"1\":{\"43\":2}}],[\"400x\",{\"1\":{\"43\":1}}],[\"400\",{\"1\":{\"43\":2,\"794\":1}}],[\"469af010\",{\"1\":{\"617\":1,\"635\":5,\"638\":1}}],[\"46\",{\"1\":{\"517\":1}}],[\"4681369\",{\"1\":{\"43\":1}}],[\"4339\",{\"1\":{\"575\":1}}],[\"438\",{\"1\":{\"455\":2}}],[\"43758\",{\"1\":{\"200\":1,\"204\":2,\"206\":2,\"243\":1}}],[\"4s2srt\",{\"1\":{\"218\":1}}],[\"41\",{\"1\":{\"206\":3,\"226\":1,\"243\":1}}],[\"4d\",{\"1\":{\"197\":5}}],[\"4590\",{\"1\":{\"588\":1}}],[\"456\",{\"1\":{\"230\":1,\"299\":2}}],[\"45\",{\"1\":{\"196\":3,\"198\":2,\"218\":2,\"233\":1,\"388\":1}}],[\"45deg\",{\"1\":{\"165\":1}}],[\"4x3\",{\"1\":{\"193\":1}}],[\"4x2\",{\"1\":{\"193\":1}}],[\"4x4\",{\"1\":{\"193\":1,\"196\":2,\"233\":2,\"239\":2}}],[\"4块\",{\"1\":{\"26\":1}}],[\"4kg\",{\"1\":{\"17\":5}}],[\"4976\",{\"1\":{\"546\":1,\"547\":1}}],[\"49\",{\"1\":{\"13\":2}}],[\"4\",{\"1\":{\"1\":3,\"8\":1,\"13\":3,\"17\":2,\"23\":1,\"43\":1,\"102\":2,\"103\":2,\"104\":2,\"122\":1,\"170\":1,\"187\":1,\"193\":2,\"195\":1,\"196\":2,\"197\":2,\"202\":6,\"215\":2,\"216\":3,\"217\":2,\"218\":2,\"226\":2,\"230\":8,\"231\":1,\"239\":1,\"252\":2,\"253\":4,\"261\":2,\"265\":1,\"271\":3,\"274\":4,\"278\":1,\"281\":2,\"282\":6,\"319\":3,\"349\":1,\"371\":1,\"421\":1,\"517\":2,\"557\":1,\"566\":1,\"606\":1,\"608\":1,\"638\":1,\"667\":1,\"699\":2,\"713\":3,\"720\":1,\"793\":1,\"794\":1,\"803\":8,\"804\":1}}],[\"36500\",{\"1\":{\"517\":1}}],[\"360\",{\"1\":{\"195\":3,\"218\":1}}],[\"3秒后才能知道promsie结果\",{\"1\":{\"281\":1}}],[\"3225\",{\"1\":{\"649\":1}}],[\"3201\",{\"1\":{\"649\":1}}],[\"3269\",{\"1\":{\"573\":1}}],[\"32\",{\"1\":{\"230\":3,\"803\":1,\"804\":1}}],[\"3799489898b3\",{\"1\":{\"517\":1}}],[\"37\",{\"1\":{\"218\":1}}],[\"3125\",{\"1\":{\"421\":1}}],[\"315\",{\"1\":{\"218\":1}}],[\"313\",{\"1\":{\"218\":1}}],[\"38\",{\"1\":{\"218\":1}}],[\"3455\",{\"1\":{\"592\":1}}],[\"349296191\",{\"1\":{\"220\":1}}],[\"34\",{\"1\":{\"206\":3,\"243\":1}}],[\"35\",{\"1\":{\"204\":1,\"215\":1,\"218\":1}}],[\"33\",{\"1\":{\"197\":1,\"606\":1}}],[\"3331\",{\"1\":{\"649\":1}}],[\"333\",{\"1\":{\"197\":1}}],[\"3x4\",{\"1\":{\"193\":1}}],[\"3x2\",{\"1\":{\"193\":1,\"233\":1}}],[\"3x3\",{\"1\":{\"193\":1,\"233\":2}}],[\"3d\",{\"1\":{\"95\":1,\"197\":13,\"199\":1,\"246\":1}}],[\"3047\",{\"1\":{\"651\":1}}],[\"30\",{\"1\":{\"198\":4,\"206\":3,\"218\":2,\"225\":1}}],[\"30am\",{\"1\":{\"22\":8}}],[\"3000\",{\"1\":{\"17\":2,\"281\":1,\"464\":1,\"559\":1,\"797\":1}}],[\"3kg\",{\"1\":{\"17\":6}}],[\"3\",{\"0\":{\"658\":1},\"1\":{\"1\":3,\"8\":1,\"9\":2,\"13\":3,\"17\":3,\"18\":3,\"23\":2,\"43\":2,\"77\":1,\"81\":1,\"102\":2,\"103\":2,\"104\":2,\"117\":1,\"122\":1,\"126\":1,\"170\":1,\"174\":1,\"190\":2,\"191\":1,\"193\":2,\"195\":24,\"196\":2,\"197\":3,\"198\":6,\"199\":3,\"200\":1,\"206\":8,\"216\":1,\"217\":1,\"218\":5,\"225\":4,\"226\":2,\"227\":8,\"230\":8,\"231\":5,\"232\":1,\"233\":1,\"234\":1,\"236\":1,\"243\":2,\"251\":1,\"252\":2,\"253\":4,\"254\":3,\"256\":3,\"261\":2,\"263\":3,\"265\":1,\"266\":6,\"270\":3,\"271\":1,\"272\":3,\"273\":2,\"274\":5,\"278\":1,\"280\":4,\"281\":11,\"282\":38,\"317\":2,\"328\":1,\"349\":1,\"371\":1,\"419\":1,\"517\":2,\"557\":1,\"558\":3,\"559\":1,\"566\":1,\"568\":1,\"590\":1,\"604\":1,\"606\":2,\"608\":1,\"610\":1,\"613\":2,\"614\":1,\"638\":1,\"653\":1,\"667\":1,\"679\":1,\"699\":1,\"700\":1,\"780\":1,\"803\":4,\"804\":1}}],[\"24\",{\"1\":{\"713\":1}}],[\"240\",{\"1\":{\"218\":5}}],[\"240x160\",{\"1\":{\"43\":2}}],[\"240x240\",{\"1\":{\"43\":1}}],[\"22\",{\"1\":{\"679\":1}}],[\"227\",{\"1\":{\"218\":1}}],[\"2639\",{\"1\":{\"642\":1}}],[\"262\",{\"1\":{\"218\":1}}],[\"2183\",{\"1\":{\"635\":1}}],[\"27\",{\"1\":{\"316\":1}}],[\"2^8\",{\"1\":{\"243\":2}}],[\"2^10\",{\"1\":{\"243\":2}}],[\"2^16\",{\"1\":{\"243\":2}}],[\"2+0\",{\"1\":{\"227\":2}}],[\"28318530718\",{\"1\":{\"226\":1}}],[\"289\",{\"1\":{\"206\":6,\"243\":2}}],[\"28\",{\"1\":{\"206\":3}}],[\"2301\",{\"1\":{\"656\":1}}],[\"230241\",{\"1\":{\"23\":1}}],[\"23\",{\"1\":{\"517\":1}}],[\"233\",{\"1\":{\"200\":1,\"204\":2,\"206\":2,\"243\":1}}],[\"258eafa5\",{\"1\":{\"801\":2}}],[\"25\",{\"1\":{\"198\":2,\"199\":2,\"204\":3,\"206\":6,\"215\":1,\"225\":3,\"517\":1}}],[\"255\",{\"1\":{\"164\":1}}],[\"2d\",{\"1\":{\"197\":6,\"199\":1,\"200\":1,\"206\":2,\"243\":2}}],[\"2x4\",{\"1\":{\"193\":1}}],[\"2x3\",{\"1\":{\"193\":1}}],[\"2x2\",{\"1\":{\"193\":1,\"233\":2}}],[\"2u\",{\"1\":{\"193\":1}}],[\"2kg\",{\"1\":{\"17\":5}}],[\"20210823135724679\",{\"1\":{\"764\":1}}],[\"20210823135708528\",{\"1\":{\"764\":1}}],[\"20210823135757279\",{\"1\":{\"764\":1}}],[\"20210823135353474\",{\"1\":{\"763\":1}}],[\"20210823135338759\",{\"1\":{\"763\":1}}],[\"20210823135132121\",{\"1\":{\"762\":1}}],[\"20210823135113891\",{\"1\":{\"762\":1}}],[\"20210823134910226\",{\"1\":{\"761\":1}}],[\"20210823134851630\",{\"1\":{\"761\":1}}],[\"20210823134841620\",{\"1\":{\"761\":1}}],[\"20210823134811148\",{\"1\":{\"761\":1}}],[\"20210823141444538\",{\"1\":{\"768\":1}}],[\"20210823141133669\",{\"1\":{\"766\":1}}],[\"20210823141121375\",{\"1\":{\"766\":1}}],[\"20210823141026445\",{\"1\":{\"758\":1}}],[\"20210823140452162\",{\"1\":{\"765\":1}}],[\"20210823143006957\",{\"1\":{\"759\":1}}],[\"20210905115012822\",{\"1\":{\"783\":1}}],[\"20210905114642656\",{\"1\":{\"782\":1}}],[\"20210905113549254\",{\"1\":{\"781\":1}}],[\"20210905113305300\",{\"1\":{\"780\":1}}],[\"20210905113030985\",{\"1\":{\"779\":1}}],[\"20210905112437439\",{\"1\":{\"778\":1}}],[\"20210903150442697\",{\"1\":{\"771\":1}}],[\"20210903150304488\",{\"1\":{\"771\":1}}],[\"20210903150636053\",{\"1\":{\"771\":1}}],[\"20210903155801295\",{\"1\":{\"771\":1}}],[\"20210903155606746\",{\"1\":{\"771\":1}}],[\"20210903155324975\",{\"1\":{\"771\":1}}],[\"20210903153231172\",{\"1\":{\"771\":1}}],[\"20210903153242825\",{\"1\":{\"771\":1}}],[\"20210903153052331\",{\"1\":{\"751\":1}}],[\"20210903152801392\",{\"1\":{\"771\":1}}],[\"20210903151518238\",{\"1\":{\"771\":1}}],[\"20210903151045187\",{\"1\":{\"771\":1}}],[\"20210903154402992\",{\"1\":{\"771\":1}}],[\"20210903154856146\",{\"1\":{\"771\":1}}],[\"20210903154607867\",{\"1\":{\"752\":1}}],[\"20210904205927222\",{\"1\":{\"730\":1}}],[\"20210904205745311\",{\"1\":{\"729\":1}}],[\"20210904174723961\",{\"1\":{\"725\":1}}],[\"20210904170248492\",{\"1\":{\"724\":1}}],[\"20210904165252768\",{\"1\":{\"723\":1}}],[\"2035\",{\"1\":{\"635\":1}}],[\"2048\",{\"1\":{\"517\":1}}],[\"2017\",{\"1\":{\"220\":1}}],[\"2015+代码转换为向后兼容版本的\",{\"1\":{\"692\":1}}],[\"2015\",{\"1\":{\"190\":1,\"215\":1,\"216\":1,\"217\":1,\"224\":1,\"225\":1,\"226\":1,\"227\":1,\"713\":4}}],[\"20\",{\"1\":{\"104\":1,\"195\":2,\"199\":2,\"206\":1,\"218\":1,\"713\":2,\"720\":1}}],[\"20px\",{\"1\":{\"104\":1}}],[\"2008\",{\"1\":{\"227\":1}}],[\"200\",{\"1\":{\"18\":1,\"793\":1,\"794\":1}}],[\"2000\",{\"1\":{\"17\":3,\"720\":1,\"728\":1,\"729\":1,\"730\":1,\"782\":2,\"783\":2,\"784\":2}}],[\"207215\",{\"1\":{\"13\":1}}],[\"2\",{\"1\":{\"1\":6,\"7\":1,\"8\":1,\"9\":4,\"13\":3,\"18\":9,\"22\":1,\"23\":3,\"33\":1,\"43\":7,\"49\":5,\"56\":2,\"57\":2,\"59\":8,\"77\":1,\"102\":1,\"103\":1,\"104\":1,\"117\":2,\"118\":1,\"121\":5,\"122\":1,\"126\":1,\"127\":1,\"164\":1,\"174\":4,\"183\":1,\"184\":1,\"191\":1,\"193\":4,\"195\":19,\"196\":4,\"197\":7,\"198\":7,\"199\":11,\"200\":1,\"202\":4,\"204\":2,\"206\":9,\"217\":1,\"218\":16,\"225\":5,\"226\":1,\"227\":3,\"230\":3,\"231\":8,\"232\":1,\"233\":4,\"234\":1,\"243\":3,\"252\":2,\"253\":4,\"254\":3,\"256\":2,\"257\":1,\"258\":1,\"261\":2,\"263\":2,\"265\":1,\"266\":4,\"270\":2,\"271\":1,\"272\":3,\"273\":2,\"274\":4,\"278\":1,\"280\":13,\"281\":52,\"282\":25,\"293\":1,\"317\":1,\"318\":1,\"319\":1,\"328\":1,\"349\":1,\"359\":1,\"371\":1,\"374\":2,\"375\":1,\"388\":1,\"457\":1,\"517\":4,\"519\":1,\"555\":1,\"557\":1,\"558\":4,\"559\":1,\"562\":1,\"563\":2,\"566\":1,\"568\":2,\"590\":1,\"604\":1,\"606\":1,\"610\":1,\"613\":3,\"638\":1,\"648\":1,\"653\":1,\"659\":1,\"667\":1,\"690\":2,\"697\":1,\"712\":1,\"713\":10,\"714\":1,\"715\":3,\"720\":2,\"803\":5}}],[\"1>\",{\"1\":{\"690\":1}}],[\"1702\",{\"1\":{\"635\":1}}],[\"1942\",{\"1\":{\"635\":1}}],[\"19\",{\"1\":{\"606\":1}}],[\"196\",{\"1\":{\"197\":1}}],[\"18\",{\"1\":{\"606\":1,\"646\":1,\"729\":1,\"730\":1,\"778\":1,\"779\":1,\"780\":1,\"781\":1,\"782\":1,\"783\":1,\"784\":1}}],[\"180\",{\"1\":{\"218\":5}}],[\"1ms\",{\"1\":{\"257\":2}}],[\"1大\",{\"1\":{\"224\":1}}],[\"15~16\",{\"1\":{\"230\":1}}],[\"15\",{\"0\":{\"633\":1},\"1\":{\"196\":1,\"206\":3,\"218\":1,\"225\":1,\"243\":1,\"635\":1,\"637\":6,\"638\":2,\"718\":1}}],[\"1500\",{\"1\":{\"17\":2}}],[\"130\",{\"1\":{\"218\":2}}],[\"13条纹相减\",{\"1\":{\"202\":1}}],[\"13\",{\"1\":{\"196\":1,\"301\":1,\"679\":1,\"799\":2}}],[\"1u\",{\"1\":{\"193\":2}}],[\"14方块图形\",{\"1\":{\"202\":1}}],[\"1400001049041748\",{\"1\":{\"195\":2}}],[\"14\",{\"1\":{\"190\":1,\"195\":2,\"196\":1,\"206\":4}}],[\"141551584\",{\"1\":{\"87\":1}}],[\"1415926\",{\"1\":{\"236\":1}}],[\"14159265358979\",{\"1\":{\"230\":1}}],[\"1415926535897932384626433832795\",{\"1\":{\"206\":2,\"218\":1}}],[\"1415926535\",{\"1\":{\"225\":1}}],[\"14159265359\",{\"1\":{\"190\":2,\"216\":1,\"217\":1,\"226\":1}}],[\"14159\",{\"1\":{\"77\":1,\"81\":1,\"195\":3,\"230\":1}}],[\"126\",{\"1\":{\"803\":1}}],[\"127\",{\"1\":{\"464\":1,\"803\":3}}],[\"123\",{\"1\":{\"230\":1,\"299\":2,\"779\":1}}],[\"129\",{\"1\":{\"224\":1}}],[\"12条纹相乘\",{\"1\":{\"202\":1}}],[\"12\",{\"1\":{\"195\":2,\"196\":1,\"198\":1,\"200\":1,\"204\":2,\"206\":2,\"227\":2,\"243\":1,\"457\":1,\"713\":1}}],[\"128\",{\"1\":{\"164\":1}}],[\"12pm\",{\"1\":{\"22\":2}}],[\"1可以给ie6\",{\"1\":{\"145\":1}}],[\"1~3\",{\"1\":{\"53\":1}}],[\"1681\",{\"1\":{\"635\":1}}],[\"1680\",{\"1\":{\"43\":2}}],[\"165\",{\"1\":{\"218\":1}}],[\"16\",{\"1\":{\"171\":1,\"196\":1,\"410\":1,\"803\":2}}],[\"160\",{\"1\":{\"43\":2}}],[\"160x80\",{\"1\":{\"43\":1}}],[\"160x\",{\"1\":{\"43\":1}}],[\"115\",{\"1\":{\"218\":1}}],[\"11条纹相加\",{\"1\":{\"202\":1}}],[\"11\",{\"1\":{\"22\":2,\"195\":1,\"196\":1,\"220\":2,\"713\":1}}],[\"11am\",{\"1\":{\"22\":4}}],[\"114203860\",{\"1\":{\"1\":1}}],[\"1kg\",{\"1\":{\"17\":6}}],[\"1后\",{\"1\":{\"8\":1}}],[\"10^308\",{\"1\":{\"230\":2}}],[\"10^38\",{\"1\":{\"230\":2}}],[\"10^9\",{\"1\":{\"230\":3}}],[\"10利用step\",{\"1\":{\"202\":1}}],[\"1071225248\",{\"1\":{\"195\":4}}],[\"10px\",{\"1\":{\"165\":1,\"635\":2}}],[\"1024\",{\"1\":{\"163\":1,\"718\":1}}],[\"10am\",{\"1\":{\"22\":4}}],[\"101\",{\"1\":{\"18\":1,\"800\":2}}],[\"1000\",{\"1\":{\"653\":1,\"793\":1,\"795\":1}}],[\"10000\",{\"1\":{\"18\":1}}],[\"100ms\",{\"1\":{\"165\":1}}],[\"100\",{\"1\":{\"18\":4,\"79\":2,\"104\":1,\"126\":1,\"154\":2,\"196\":1,\"206\":4,\"218\":1,\"233\":1,\"276\":1,\"646\":1}}],[\"10\",{\"1\":{\"8\":2,\"22\":4,\"62\":3,\"77\":1,\"104\":1,\"117\":2,\"126\":1,\"195\":3,\"196\":1,\"198\":2,\"199\":2,\"202\":25,\"204\":16,\"206\":4,\"218\":1,\"225\":3,\"227\":2,\"241\":1,\"260\":1,\"264\":1,\"517\":1,\"561\":1,\"635\":1,\"661\":1,\"713\":6,\"718\":1,\"720\":1,\"794\":1}}],[\"1\",{\"1\":{\"1\":3,\"7\":3,\"8\":11,\"9\":2,\"13\":4,\"17\":2,\"18\":15,\"22\":1,\"23\":5,\"43\":4,\"49\":5,\"53\":5,\"54\":2,\"55\":4,\"56\":1,\"58\":6,\"59\":9,\"60\":4,\"61\":2,\"62\":1,\"76\":1,\"77\":1,\"80\":2,\"83\":2,\"102\":5,\"103\":5,\"104\":5,\"118\":1,\"121\":3,\"122\":1,\"126\":2,\"127\":1,\"145\":1,\"146\":1,\"153\":1,\"154\":1,\"158\":1,\"164\":1,\"173\":1,\"174\":1,\"185\":1,\"190\":24,\"191\":2,\"193\":7,\"195\":20,\"196\":7,\"197\":18,\"198\":8,\"199\":29,\"200\":5,\"202\":44,\"204\":18,\"206\":66,\"209\":5,\"210\":1,\"211\":1,\"215\":2,\"216\":2,\"217\":2,\"218\":49,\"224\":10,\"225\":9,\"226\":7,\"227\":6,\"230\":7,\"231\":7,\"232\":6,\"233\":8,\"234\":1,\"237\":1,\"238\":5,\"239\":11,\"240\":17,\"243\":14,\"251\":1,\"252\":2,\"253\":4,\"254\":3,\"256\":1,\"257\":2,\"260\":1,\"261\":1,\"263\":3,\"264\":2,\"265\":1,\"266\":6,\"270\":2,\"271\":1,\"272\":3,\"273\":2,\"274\":6,\"278\":6,\"280\":13,\"281\":9,\"282\":5,\"283\":1,\"293\":1,\"317\":1,\"318\":3,\"319\":3,\"337\":1,\"349\":1,\"359\":1,\"371\":1,\"374\":2,\"375\":1,\"388\":1,\"403\":1,\"420\":3,\"455\":1,\"457\":1,\"461\":2,\"463\":1,\"464\":1,\"517\":9,\"519\":3,\"534\":9,\"555\":1,\"557\":3,\"558\":4,\"559\":1,\"561\":1,\"563\":2,\"566\":2,\"568\":3,\"573\":2,\"583\":1,\"584\":3,\"588\":3,\"590\":1,\"596\":2,\"597\":4,\"604\":1,\"606\":3,\"607\":3,\"608\":2,\"609\":1,\"610\":1,\"611\":2,\"613\":4,\"614\":3,\"629\":1,\"630\":3,\"631\":1,\"636\":1,\"637\":4,\"638\":1,\"642\":2,\"644\":1,\"648\":1,\"650\":1,\"651\":2,\"655\":2,\"659\":1,\"661\":1,\"663\":5,\"667\":1,\"712\":1,\"713\":3,\"720\":1,\"799\":2,\"800\":2,\"802\":1,\"803\":14,\"804\":1}}],[\"狄克斯特拉算法\",{\"0\":{\"0\":1,\"1\":1}}]],\"serializationVersion\":2}}")).map(([e,t])=>[e,zt(t,{fields:["h","t","c"],storeFields:["h","t","c"]})]));self.onmessage=({data:{type:e="all",query:t,locale:s,options:n,id:o}})=>{const u=bt[s];e==="suggest"?self.postMessage([e,o,tt(t,u,n)]):e==="search"?self.postMessage([e,o,Z(t,u,n)]):self.postMessage({suggestions:[e,o,tt(t,u,n)],results:[e,o,Z(t,u,n)]})};
//# sourceMappingURL=index.js.map
